[
    {
        "id":1,
        "response":"import typing\n\ndef remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first = s.find(ch)\n    if first == -1:\n        return s\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    return s[:first] + s[first+1:last] + s[last+1:]"
    },
    {
        "id":2,
        "response":"import typing\n\ndef sort_matrix(M: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    M.sort(key=sum)\n    return M"
    },
    {
        "id":3,
        "response":"from typing import Dict, Union, List\n\ndef count_common(words: Dict[str, int]) -> Union[str, List[str]]:\n    if not words:\n        return []\n    max_count = max(words.values())\n    common = [k for k, v in words.items() if v == max_count]\n    if len(common) == 1:\n        return common[0]\n    return sorted(common)"
    },
    {
        "id":4,
        "response":"import typing\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    if l <= 0 or b <= 0 or h <= 0:\n        raise ValueError(\"All dimensions must be positive numbers\")\n    return 0.5 * b * h * l"
    },
    {
        "id":5,
        "response":"import typing\n\ndef split_lowerstring(text: str) -> typing.List[str]:\n    if text is None:\n        return []\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    return list(text)"
    },
    {
        "id":6,
        "response":""
    },
    {
        "id":7,
        "response":"from typing import Union\n\ndef square_perimeter(a: Union[int, float]) -> Union[int, float]:\n    return 4 * a"
    },
    {
        "id":8,
        "response":"import typing\n\ndef remove_chars(s1: str, s2: str) -> str:\n    if not s1:\n        return s1\n    if not s2:\n        return s1\n    remove_set = set(s2)\n    return ''.join(ch for ch in s1 if ch not in remove_set)"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "id":10,
        "response":"import math\n\ndef is_woodall(x):\n    if not isinstance(x, int) or x < 0:\n        return False\n    target = x + 1\n    n = 1\n    while True:\n        val = n << n  # n * 2**n\n        if val == target:\n            return True\n        if val > target:\n            return False\n        n += 1\n        if n > 1000:  # safety to prevent infinite loop for extremely large values\n            return False"
    },
    {
        "id":11,
        "response":"```python\nimport math\nfrom typing import Union\n\ndef multiples_of_num(m: Union[int, float], n: int) -> Union[int, float]:\n    if n <= 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= m * i\n    return result\n```"
    },
    {
        "id":12,
        "response":"import typing\n\ndef find_first_duplicate(nums: typing.List[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1"
    },
    {
        "id":13,
        "response":"import typing\n\ndef maximum_Sum(list1: typing.List[int]) -> int:\n    return sum(list1) if list1 else 0"
    },
    {
        "id":14,
        "response":"def binary_to_decimal(binary):\n    s = str(binary).strip()\n    if not s:\n        raise ValueError(\"Empty input\")\n    try:\n        return int(s, 2)\n    except ValueError:\n        raise ValueError(\"Invalid binary number\")"
    },
    {
        "id":15,
        "response":"import typing\n\ndef find_Product(arr: typing.List[int], n: int) -> int:\n    freq: dict[int, int] = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    product = 1\n    count = 0\n    for num in arr:\n        if freq[num] == 1:\n            product *= num\n            count += 1\n    return 0 if count == 0 else product"
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: typing.List[tuple], K: int) -> bool:\n    if test_list is None:\n        return False\n    return all(len(t) == K for t in test_list)"
    },
    {
        "id":17,
        "response":"import typing\n\ndef remove(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    for i, s in enumerate(lst):\n        if isinstance(s, str):\n            lst[i] = s.replace('.', '')\n    return lst"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n, k):\n    if k < 0 or n < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - k + i) \/\/ i\n    return result"
    },
    {
        "id":19,
        "response":"import typing\n\ndef get_Odd_Occurrence(arr: typing.List[int], arr_size: int) -> typing.Optional[int]:\n    if not arr:\n        return None\n    result = 0\n    for num in arr:\n        result ^= num\n    return result if result != 0 else None\n"
    },
    {
        "id":20,
        "response":"import collections\n\ndef check_Equality(s: str) -> int:\n    counts = collections.Counter(s)\n    total = 0\n    for n in counts.values():\n        total += n * (n + 1) \/\/ 2\n    return total"
    },
    {
        "id":21,
        "response":"import collections\nfrom typing import List\n\ndef func(nums: List[int], k: int) -> List[int]:\n    if not nums or k <= 0:\n        return []\n    # Iterative quicksort (Hip Q algorithm)\n    stack = [(0, len(nums) - 1)]\n    while stack:\n        low, high = stack.pop()\n        if low < high:\n            # Partition\n            pivot = nums[high]\n            i = low - 1\n            for j in range(low, high):\n                if nums[j] <= pivot:\n                    i += 1\n                    nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1], nums[high] = nums[high], nums[i + 1]\n            p = i + 1\n            stack.append((low, p - 1))\n            stack.append((p + 1, high))\n    # Frequency count\n    freq = collections.Counter(nums)\n    # Sort by frequency desc, then value asc\n    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    # Take top k\n    result = [item[0] for item in sorted_items[:k]]\n    return result"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors(n: int):\n    if n is None:\n        return None\n    n = abs(n)\n    if n <= 1:\n        return None\n    largest = None\n    while n % 2 == 0:\n        largest = 2\n        n \/\/= 2\n    i = 3\n    max_i = int(math.isqrt(n)) + 1\n    while i <= max_i and n > 1:\n        while n % i == 0:\n            largest = i\n            n \/\/= i\n            max_i = int(math.isqrt(n)) + 1\n        i += 2\n    if n > 1:\n        largest = n\n    return largest"
    },
    {
        "id":23,
        "response":"import typing\n\ndef decimal_To_Binary(N: int) -> str:\n    if not isinstance(N, int):\n        raise TypeError(\"Input must be an integer\")\n    if N == 0:\n        return \"0\"\n    sign = \"\"\n    if N < 0:\n        sign = \"-\"\n        N = -N\n    bits = []\n    while N > 0:\n        bits.append(str(N & 1))\n        N >>= 1\n    return sign + \"\".join(reversed(bits))"
    },
    {
        "id":24,
        "response":"import typing\n\ndef find_missing(ar: typing.List[int], N: int) -> typing.List[int]:\n    if not ar:\n        return []\n    missing = []\n    expected = ar[0]\n    for num in ar:\n        while expected < num:\n            missing.append(expected)\n            expected += 1\n        expected = num + 1\n    return missing"
    },
    {
        "id":25,
        "response":"import typing\n\ndef find_rect_num(n: int) -> int:\n    if n <= 0:\n        return 0\n    m = n * (n + 1) \/\/ 2\n    return m * m"
    },
    {
        "id":26,
        "response":"import typing\n\ndef find_Nth_Digit(p: int, q: int, N: int) -> typing.Optional[int]:\n    if q == 0 or N <= 0:\n        return None\n    p_abs = abs(p)\n    q_abs = abs(q)\n    remainder = p_abs % q_abs\n    digit = 0\n    for _ in range(N):\n        remainder *= 10\n        digit = remainder \/\/ q_abs\n        remainder = remainder % q_abs\n    return digit"
    },
    {
        "id":27,
        "response":"import typing\n\ndef sort_mixed_list(mixed_list: typing.List[typing.Union[int, str]]) -> typing.List[typing.Union[int, str]]:\n    return sorted(mixed_list, key=lambda x: (0, x) if isinstance(x, int) else (1, x))"
    },
    {
        "id":28,
        "response":"import typing\n\ndef div_even_odd(list1: typing.List[float]) -> typing.Optional[float]:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if isinstance(num, (int, float)):\n            if first_even is None and num % 2 == 0:\n                first_even = num\n            if first_odd is None and num % 2 != 0:\n                first_odd = num\n            if first_even is not None and first_odd is not None:\n                break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even \/ first_odd"
    },
    {
        "id":29,
        "response":"import collections\n\ndef rearrange_possible(s: str) -> bool:\n    if not s:\n        return True\n    freq = collections.Counter(s)\n    max_count = max(freq.values())\n    return max_count <= (len(s) + 1) \/\/ 2"
    },
    {
        "id":30,
        "response":"from collections import Counter\n\ndef freq_element(nums):\n    return dict(Counter(nums))"
    },
    {
        "id":31,
        "response":"import typing\n\ndef filter_evennumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":32,
        "response":"import collections\n\ndef find_Sum(arr, n):\n    freq = collections.Counter(arr)\n    total = 0\n    for value, count in freq.items():\n        if count > 1:\n            total += value\n    return total"
    },
    {
        "id":33,
        "response":"import re\nfrom typing import List\n\ndef text_match(text: str) -> List[str]:\n    pattern = re.compile(r'[a-z](?:_[a-z])+')\n    return pattern.findall(text)"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text: str) -> str | None:\n    match = re.match(r'^\\s*(\\w+)', text)\n    return match.group(1) if match else None"
    },
    {
        "id":35,
        "response":"import math\nfrom functools import reduce\n\ndef find_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)"
    },
    {
        "id":36,
        "response":"import typing\n\ndef test_distinct(data: typing.Iterable[int]) -> bool:\n    lst = list(data)\n    return len(set(lst)) == len(lst)"
    },
    {
        "id":37,
        "response":""
    },
    {
        "id":38,
        "response":""
    },
    {
        "id":39,
        "response":"from typing import List, Any, Optional\n\ndef specified_element(nums: List[List[Any]], N: int = 0) -> List[Optional[Any]]:\n    result: List[Optional[Any]] = []\n    for row in nums:\n        if 0 <= N < len(row):\n            result.append(row[N])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "id":40,
        "response":""
    },
    {
        "id":41,
        "response":"import typing\n\ndef check_equilateral(x: float, y: float, z: float) -> bool:\n    return x > 0 and x == y == z"
    },
    {
        "id":42,
        "response":"from typing import Union\n\ndef parallelogram_area(b: Union[int, float], h: Union[int, float]) -> float:\n    return abs(b) * abs(h)"
    },
    {
        "id":43,
        "response":"import typing\n\ndef check_Equality(s: str) -> bool:\n    if not s:\n        return False\n    return s[0] == s[-1]"
    },
    {
        "id":44,
        "response":"import typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    if not my_list:\n        return []\n    min_val = min(my_list)\n    max_val = max(my_list)\n    offset = -min_val\n    count = [0] * (max_val - min_val + 1)\n    for num in my_list:\n        count[num + offset] += 1\n    sorted_list = []\n    for i, c in enumerate(count):\n        sorted_list.extend([i - offset] * c)\n    return sorted_list"
    },
    {
        "id":45,
        "response":"import typing\n\ndef tn_gp(a: typing.Any, n: int, r: typing.Any) -> typing.Any:\n    return a * (r ** (n - 1))"
    },
    {
        "id":46,
        "response":"import typing\n\ndef rev(num: typing.Union[int, float]) -> bool:\n    if num == 0:\n        return False\n    return num < 2 \/ num - 1"
    },
    {
        "id":47,
        "response":"import typing\n\ndef find_Max_Num(arr: typing.List[int], n: int) -> str:\n    if not arr:\n        return \"\"\n    m = len(arr)\n    if n <= 0:\n        return \"\"\n    if n >= m:\n        return \"\".join(str(d) for d in sorted(arr, reverse=True))\n    stack: typing.List[int] = []\n    to_remove = m - n\n    for d in arr:\n        while stack and stack[-1] < d and to_remove > 0:\n            stack.pop()\n            to_remove -= 1\n        if len(stack) < n:\n            stack.append(d)\n    return \"\".join(str(d) for d in stack)"
    },
    {
        "id":48,
        "response":"from typing import Any\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x > 0 and y < 0) or (x < 0 and y > 0)"
    },
    {
        "id":49,
        "response":"def is_octagonal(n: int) -> int:\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (3 * n - 2)"
    },
    {
        "id":50,
        "response":"from typing import List\n\ndef max_len_sub(arr: List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    max_val = arr[0]\n    min_val = arr[0]\n    for x in arr[1:]:\n        if x > max_val:\n            max_val = x\n        elif x < min_val:\n            min_val = x\n    return max_val - min_val"
    },
    {
        "id":51,
        "response":""
    },
    {
        "id":52,
        "response":"def smallest_num(xs):\n    if not xs:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "id":53,
        "response":"import typing\n\ndef max_difference(test_list: typing.List[typing.Tuple[float, float]]) -> typing.Optional[float]:\n    max_diff = None\n    for pair in test_list:\n        if not isinstance(pair, tuple) or len(pair) != 2:\n            continue\n        try:\n            a, b = pair\n            diff = abs(b - a)\n        except Exception:\n            continue\n        if max_diff is None or diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "id":54,
        "response":"import typing\n\ndef subject_marks(subjectmarks: typing.List[tuple]) -> typing.List[tuple]:\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "id":55,
        "response":"import collections\n\ndef repeating_list_set(data_list):\n    counts = collections.Counter(data_list)\n    return {item for item, cnt in counts.items() if cnt > 1}"
    },
    {
        "id":56,
        "response":"from typing import List\n\ndef pos_count(lst: List[float]) -> int:\n    return sum(1 for x in lst if isinstance(x, (int, float)) and x > 0)"
    },
    {
        "id":57,
        "response":"import math\n\ndef bell_number(n: int) -> int:\n    if n < 0:\n        return 0\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        total = 0\n        for k in range(i):\n            total += math.comb(i - 1, k) * bell[k]\n        bell[i] = total\n    return bell[n]"
    },
    {
        "id":58,
        "response":"from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    if len(A) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n        if not increasing and not decreasing:\n            return False\n    return True"
    },
    {
        "id":59,
        "response":"from typing import List\n\ndef is_sublist(l: List, s: List) -> bool:\n    if not s:\n        return True\n    n, m = len(l), len(s)\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False"
    },
    {
        "id":60,
        "response":"import typing\n\ndef find_equal_tuple(Input: typing.Sequence[int], k: int) -> bool:\n    if not Input:\n        return True\n    first = Input[0]\n    for x in Input:\n        if x != first:\n            return False\n    return True"
    },
    {
        "id":61,
        "response":"import typing\n\ndef comb_sort(nums: typing.List[int]) -> typing.List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap \/ shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "id":62,
        "response":"def dif_Square(n: int) -> bool:\n    return n % 4 != 2"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    if not isinstance(text, str):\n        return []\n    parts = re.split(r'[,\\s;:]+', text)\n    return [p for p in parts if p]"
    },
    {
        "id":64,
        "response":"import typing\n\ndef is_samepatterns(colors: typing.List[str], patterns: typing.List[str]) -> bool:\n    if not colors:\n        return True\n    if not patterns:\n        return False\n    pattern_index = 0\n    for color in colors:\n        while pattern_index < len(patterns) and patterns[pattern_index] != color:\n            pattern_index += 1\n        if pattern_index == len(patterns):\n            return False\n        pattern_index += 1\n    return True"
    },
    {
        "id":65,
        "response":"import typing\n\ndef find_tuples(test_list: typing.List[typing.Tuple[int, ...]], K: int) -> typing.List[typing.Tuple[int, ...]]:\n    if K == 0:\n        raise ValueError(\"K must be non-zero\")\n    return [t for t in test_list if all(x % K == 0 for x in t)]"
    },
    {
        "id":66,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    min_side = m if m < n else n\n    total = 0\n    for k in range(1, min_side + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":67,
        "response":"import typing\n\ndef is_Diff(n: int) -> int:\n    if n <= 0:\n        return 0\n    evens = n \/\/ 2\n    sum_even = evens * (evens + 1)\n    odds = n - evens\n    sum_odd = odds * odds\n    return sum_odd - sum_even"
    },
    {
        "id":68,
        "response":""
    },
    {
        "id":69,
        "response":"import typing\n\ndef word_len(s: str) -> bool:\n    return len(s) % 2 == 1"
    },
    {
        "id":70,
        "response":"import typing\n\ndef tetrahedral_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return n * (n + 1) * (n + 2) \/\/ 6"
    },
    {
        "id":71,
        "response":"import typing\n\ndef zip_tuples(test_tup1: typing.Tuple, test_tup2: typing.Tuple) -> typing.Tuple:\n    return tuple(zip(test_tup1, test_tup2))"
    },
    {
        "id":72,
        "response":"import math\n\ndef area_sphere(r: float) -> float:\n    return 4 * math.pi * r * r"
    },
    {
        "id":73,
        "response":"import typing\n\ndef get_Char(strr: str) -> str:\n    if not strr:\n        return ''\n    total = sum(ord(c) for c in strr)\n    total %= 0x110000\n    return chr(total)"
    },
    {
        "id":74,
        "response":""
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    if r < 0:\n        raise ValueError(\"Radius must be non-negative\")\n    return 4 * math.pi * r * r"
    },
    {
        "id":76,
        "response":"import typing\n\ndef centered_hexagonal_number(n: int) -> int:\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"from typing import Dict, Any\n\ndef merge_dictionaries_three(dict1: Dict[Any, Any], dict2: Dict[Any, Any], dict3: Dict[Any, Any]) -> Dict[Any, Any]:\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":"import collections\nfrom typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    if list1 is None:\n        return {}\n    return dict(collections.Counter(list1))"
    },
    {
        "id":79,
        "response":"import typing\n\ndef closest_num(N: typing.Union[int, float]) -> typing.Union[int, float]:\n    return N - 1.0 if isinstance(N, float) else N - 1\n\n"
    },
    {
        "id":80,
        "response":"import typing\n\ndef len_log(list1: typing.List[str]) -> int:\n    if not list1:\n        return 0\n    return max(len(str(word)) for word in list1)"
    },
    {
        "id":81,
        "response":"import typing\n\ndef find_substring(str1: str, sub_str: str) -> bool:\n    return sub_str in str1"
    },
    {
        "id":82,
        "response":"import typing\n\ndef is_undulating(n: int) -> bool:\n    s = str(abs(n))\n    length = len(s)\n    if length <= 2:\n        return True\n    for i in range(1, length - 1):\n        prev = int(s[i - 1])\n        cur = int(s[i])\n        nxt = int(s[i + 1])\n        if not ((cur > prev and cur > nxt) or (cur < prev and cur < nxt)):\n            return False\n    return True"
    },
    {
        "id":83,
        "response":"import math\n\ndef power(a: float, b: float) -> float:\n    return a**b"
    },
    {
        "id":84,
        "response":"import typing\n\ndef index_minimum(test_list: typing.Tuple[typing.Any, ...]) -> typing.Optional[int]:\n    if not test_list:\n        return None\n    min_index = 0\n    min_value = test_list[0]\n    for i, value in enumerate(test_list[1:], start=1):\n        if value < min_value:\n            min_value = value\n            min_index = i\n    return min_index"
    },
    {
        "id":85,
        "response":"import typing\n\ndef Find_Min_Length(lst: typing.List[typing.Any]) -> int:\n    min_len = None\n    for item in lst:\n        if isinstance(item, list):\n            length = len(item)\n            if min_len is None or length < min_len:\n                min_len = length\n    return 0 if min_len is None else min_len"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n):\n    if n == 0:\n        return []\n    n_abs = abs(n)\n    divs = []\n    limit = math.isqrt(n_abs)\n    for i in range(1, limit + 1):\n        if n_abs % i == 0:\n            divs.append(i)\n            j = n_abs \/\/ i\n            if j != i:\n                divs.append(j)\n    divs.sort()\n    return divs"
    },
    {
        "id":87,
        "response":"import collections\n\ndef frequency_lists(list1):\n    return dict(collections.Counter(list1))"
    },
    {
        "id":88,
        "response":"import typing\n\ndef multiply_and_divide(numbers: typing.List[float]) -> typing.Tuple[typing.List[float"
    },
    {
        "id":89,
        "response":"import typing\n\ndef decimal_to_binary(n: int) -> str:\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if n == 0:\n        return \"0\"\n    bits = []\n    while n:\n        bits.append(str(n & 1))\n        n >>= 1\n    return \"\".join(reversed(bits))"
    },
    {
        "id":90,
        "response":"import math\n\ndef next_smallest_palindrome(num: int) -> int:\n    if num < 0:\n        return 0\n    s = str(num)\n    n = len(s)\n    if all(ch == '9' for ch in s):\n        return int('1' + '0' * (n - 1) + '1')\n    left = list(s[:(n + 1) \/\/ 2])\n    right = left[::-1]\n    if n % 2 == 0:\n        candidate = int(''.join(left + right))\n    else:\n        candidate = int(''.join(left + right[1:]))\n    if candidate >= num:\n        return candidate\n    i = (n - 1) \/\/ 2\n    carry = 1\n    while i >= 0 and carry:\n        digit = int(left[i]) + carry\n        carry = digit \/\/ 10\n        left[i] = str(digit % 10)\n        i -= 1\n    if carry:\n        left = ['1'] + left\n    right = left[::-1]\n    if n % 2 == 0:\n        return int(''.join(left + right))\n    else:\n        return int(''.join(left + right[1:]))"
    },
    {
        "id":91,
        "response":"from typing import List, Optional\n\ndef kth_element(arr: List[int], n: int, k: int) -> Optional[int]:\n    if not arr or n <= 0:\n        return None\n    if k <= 0 or k > n:\n        return None\n    return arr[k - 1]"
    },
    {
        "id":92,
        "response":"import typing\n\ndef snake_to_camel(word: str) -> str:\n    parts = [p for p in word.split('_') if p]\n    if not parts:\n        return ''\n    first = parts[0].lower()\n    others = [p.capitalize() for p in parts[1:]]\n    return first + ''.join(others)"
    },
    {
        "id":93,
        "response":""
    },
    {
        "id":94,
        "response":"from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    for sublist in input_list:\n        sublist.sort(key=lambda x: x)\n    return input_list"
    },
    {
        "id":95,
        "response":"import typing\n\ndef count(lst: typing.Iterable[bool]) -> int:\n    try:\n        return lst.count(True)\n    except AttributeError:\n        return sum(1 for x in lst if x is True) if lst is not None else 0"
    },
    {
        "id":96,
        "response":"def add_lists(test_list, test_tup):\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "id":97,
        "response":"import typing\n\ndef count_Hexadecimal(L: int, R: int) -> int:\n    if L > R:\n        return 0\n    count = 0\n    for n in range(L, R + 1):\n        hex_str = hex(n)[2:].upper()\n        count += hex_str.count('F')\n    return count\n"
    },
    {
        "id":98,
        "response":"import heapq\n\ndef merge_sorted_list(*iterables):\n    iters = [iter(it) for it in iterables]\n    heap = []\n    for i, it in enumerate(iters):\n        try:\n            first = next(it)\n            heapq.heappush(heap, (first, i))\n        except StopIteration:\n            continue\n    while heap:\n        val, i = heapq.heappop(heap)\n        yield val\n        try:\n            nxt = next(iters[i])\n            heapq.heappush(heap, (nxt, i))\n        except StopIteration:\n            pass"
    },
    {
        "id":99,
        "response":"import typing\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    return sum(1 for i in range(1, len(s)) if s[i] != s[i - 1])"
    },
    {
        "id":100,
        "response":"import typing\n\ndef extract_missing(test_list: typing.List[int], strt_val: int, stop_val: int) -> typing.List[typing.Tuple[int, int]]:\n    if strt_val > stop_val:\n        return []\n    valid_nums = sorted(set(x for x in test_list if strt_val <= x <= stop_val))\n    missing_ranges: typing.List[typing.Tuple[int, int]] = []\n    prev = strt_val - 1\n    for num in valid_nums:\n        if num > prev + 1:\n            missing_ranges.append((prev + 1, num - 1))\n        prev = num\n    if prev < stop_val:\n        missing_ranges.append((prev + 1, stop_val))\n    return missing_ranges"
    },
    {
        "id":101,
        "response":"import re\nimport typing\nimport itertools\n\ndef common_in_nested_lists(nestedlist):\n    if not isinstance(nestedlist, list):\n        raise TypeError(\"Input must be a list\")\n    if not nestedlist:\n        return []\n    try:\n        common = set(nestedlist[0])\n    except TypeError:\n        raise TypeError(\"All elements must be iterable\")\n    for sublist in nestedlist[1:]:\n        try:\n            common &= set(sublist)\n        except TypeError:\n            raise TypeError(\"All elements must be iterable\")\n        if not common:\n            return []\n    return list(common)"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    if not isinstance(diameter, (int, float)) or not isinstance(height, (int, float)):\n        raise TypeError(\"Diameter and height must be numeric values\")\n    if diameter < 0 or height < 0:\n        raise ValueError(\"Diameter and height must be non-negative\")\n    return 2 * (height + math.pi * diameter)"
    },
    {
        "id":103,
        "response":"import typing\n\ndef check_integer(text: str) -> bool:\n    try:\n        int(text.strip())\n        return True\n    except ValueError:\n        return False"
    },
    {
        "id":104,
        "response":"import collections\ndef assign_freq(test_list):\n    freq_counter = collections.Counter(test_list)\n    return [(item, freq_counter[item]) for item in test_list]"
    },
    {
        "id":105,
        "response":"import typing\n\ndef empty_dit(list1: typing.List[typing.Any]) -> bool:\n    return all(isinstance(d, dict) and not d for d in list1)"
    },
    {
        "id":106,
        "response":"import typing\n\ndef tuple_to_int(nums: typing.Set[int]) -> int:\n    if not nums:\n        return 0\n    return int(''.join(str(x) for x in sorted(nums)))"
    },
    {
        "id":107,
        "response":"from typing import List, Any\n\ndef list_to_float(test_list: List[Any]) -> List[Any]:\n    stack = [test_list]\n    while stack:\n        current = stack.pop()\n        for i, item in enumerate(current):\n            if isinstance(item, list):\n                stack.append(item)\n            else:\n                try:\n                    current[i] = float(item)\n                except (ValueError, TypeError):\n                    pass\n    return test_list"
    },
    {
        "id":108,
        "response":"from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return list(string)"
    },
    {
        "id":109,
        "response":"import collections\n\ndef search(arr, n):\n    counts = collections.Counter(arr)\n    for num, cnt in counts.items():\n        if cnt == 1:\n            return num\n    return None"
    },
    {
        "id":110,
        "response":"from typing import List, Optional\n\ndef max_product_tuple(list1: List[int]) -> Optional[int]:\n    n = len(list1)\n    if n < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in list1:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    prod1 = max1 * max2\n    prod2 ="
    },
    {
        "id":111,
        "response":"from typing import List\n\ndef check_triplet(A: List[int], n: int, sum_val: int, count: List[int]) -> List[int]:\n    if n < 3:\n        return A\n    A.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum_val:\n                count[0] += 1\n                left += 1\n                right -= 1\n            elif current_sum < sum_val:\n                left += 1\n            else:\n                right -= 1\n    return A"
    },
    {
        "id":112,
        "response":"import typing\n\ndef smartNumber(n: int) -> int:\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return n"
    },
    {
        "id":113,
        "response":"import typing\n\ndef amicable_numbers_sum(limit: int) -> int:\n    return limit * (limit + 1) \/\/ 2 if limit > 0 else 0"
    },
    {
        "id":114,
        "response":"import math\n\ndef angle_complex(a, b):\n    return math.atan2(b, a)"
    },
    {
        "id":115,
        "response":"import typing\n\ndef find_length(string: str, n: int) -> int:\n    if not string:\n        return 0\n    max_sum = 0\n    current = 0\n    for ch in string[:n]:\n        val = 1 if ch == '1' else -1\n        current = max(val, current + val)\n        max_sum = max(max_sum, current)\n    return max_sum if max_sum > 0 else 0"
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    g = math.gcd(abs(a), abs(b))\n    if g == 0:\n        return 0\n    total = 0\n    limit = int(g**0.5)\n    for i in range(1, limit + 1):\n        if g % i == 0:\n            total += i\n            j = g \/\/ i\n            if j != i:\n                total += j\n    return total"
    },
    {
        "id":117,
        "response":"from typing import Any\n\ndef multiply_int(x: int, y: int) -> int:\n    sign = -1 if (x < 0) ^ (y < 0) else 1\n    a = abs(x)\n    b = abs(y)\n    result = 0\n    while b:\n        if b & 1:\n            result += a\n        a <<= 1\n        b >>= 1\n    if sign == -1:\n        result = -result\n    return result"
    },
    {
        "id":118,
        "response":"import typing\n\ndef long_words(n: int, words_str: str) -> typing.List[str]:\n    try:\n        threshold = int(n)\n    except Exception:\n        return []\n    if not isinstance(words_str, str):\n        return []\n    words = words_str.split()\n    return [w for w in words if len(w) > threshold]"
    },
    {
        "id":119,
        "response":"import typing\n\ndef magic_square_test(my_matrix: typing.List[typing.List[typing.Any]]) -> typing.List[typing.List[typing.Any]]:\n    if not isinstance(my_matrix, list) or not my_matrix:\n        raise ValueError(\"Input must be a non-empty list of lists\")\n    n = len(my_matrix)\n    for row in my_matrix:\n        if not isinstance(row, list) or len(row) != n:\n            raise ValueError(\"Input must be a square matrix\")\n    target_sum = None\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        if target_sum is None:\n            target_sum = row_sum\n        elif row_sum != target_sum:\n            raise ValueError(\"Rows do not sum to the same value\")\n    for j in range(n):\n        col_sum = sum(my_matrix[i][j] for i in range(n))\n        if col_sum != target_sum:\n            raise ValueError(\"Columns do not sum to the same value\")\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag1_sum != target_sum:\n        raise ValueError(\"Main diagonal does not sum to the same value\")\n    diag2_sum = sum(my_matrix[i][n - 1 - i] for i in range(n))\n    if diag2_sum != target_sum:\n        raise ValueError(\"Anti-diagonal does not sum to the same value\")\n    return my_matrix"
    },
    {
        "id":120,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    counter = collections.Counter(nums)\n    return counter.most_common(1)[0][0]"
    },
    {
        "id":121,
        "response":"def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    vowels_rev = [c for c in str1 if c in vowels][::-1]\n    result = []\n    idx = 0\n    for c in str1:\n        if c in vowels:\n            result.append(vowels_rev[idx])\n            idx += "
    },
    {
        "id":122,
        "response":"import typing\n\ndef tup_string(tup1: tuple) -> str:\n    return str(tup1)"
    },
    {
        "id":123,
        "response":"def sum_negativenum(nums):\n    if not nums:\n        return 0\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"import typing\n\ndef check_last(arr: typing.List[int], n: int, p: int) -> bool:\n    if n <= 0 or n > len(arr):\n        return False\n    last = arr[n - 1] + p\n    return last % 2 != 0"
    },
    {
        "id":125,
        "response":"import typing\n\ndef hexagonal_num(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"import math\n\ndef cal_electbill(units):\n    if units < 0:\n        raise ValueError(\"Units cannot be negative\")\n    bill = 0.0\n    remaining = units\n    if remaining <= 100:\n        bill += remaining * 1.20\n    else:\n        bill += 100 * 1.20\n        remaining -= 100\n        if remaining <= 200:\n            bill += remaining * 2.00\n        else:\n            bill += 200 * 2.00\n            remaining -= 200\n            if remaining <= 300:\n                bill += remaining * 3.00\n            else:\n                bill += 300 * 3.00\n                remaining -= 300\n                if remaining <= 400:\n                    bill += remaining * 4.00\n                else:\n                    bill += 400 * 4.00\n                    remaining -= 400\n                    if remaining > 0:\n                        bill += remaining * 5.00\n    return bill"
    },
    {
        "id":127,
        "response":"import typing\n\ndef zero_count(nums: typing.List[int]) -> float:\n    total = len(nums)\n    if total == 0:\n        return 0.0\n    zeros = sum(1 for n in nums if n == 0)\n    return zeros \/ total"
    },
    {
        "id":128,
        "response":"import typing\n\ndef is_Sum_Of_Powers_Of_Two(n: typing.Any) -> bool:\n    return isinstance(n, int) and n >= 0"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"Radius must be a number\")\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 2 * math.pi * r"
    },
    {
        "id":130,
        "response":"import collections\n\ndef extract_singly(test_list):\n    counts = collections.Counter(test_list)\n    return [item for item in test_list if counts[item] == 1]"
    },
    {
        "id":131,
        "response":"from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_idx = max(range(curr_size), key=lambda i: nums[i])\n        if max_idx == curr_size - 1:\n            continue\n        if max_idx != 0:\n            nums[:max_idx + 1] = reversed(nums[:max_idx + 1])\n        nums[:curr_size] = reversed(nums[:curr_size])\n    return nums"
    },
    {
        "id":132,
        "response":"from typing import List, Tuple, Any\n\ndef count_samepair(list1: List[Tuple[Any, Any]], list2: List[Tuple[Any, Any]], list3: List[Tuple[Any, Any]]) -> int:\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n    return len(set1 & set2 & set3)"
    },
    {
        "id":133,
        "response":"```python\nimport typing\n\ndef find_lists(Input: typing.Tuple) -> int:\n    count = 0\n    stack = [Input]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, tuple):\n            for item in current:\n                if isinstance(item, list):\n                    count += 1\n                elif isinstance(item, tuple):\n                    stack.append(item)\n    return count\n```"
    },
    {
        "id":134,
        "response":"from typing import List\n\ndef sum_Pairs(arr: List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    arr_sorted = sorted(arr)\n    total = 0\n    for i, val in enumerate(arr_sorted):\n        total += val * (2 * i - n + 1)\n    return total"
    },
    {
        "id":135,
        "response":"import typing\n\ndef max_Abs_Diff(arr: typing.List[int], n: int) -> int:\n    if not arr or n <= 1:\n        return 0\n    return max(arr) - min(arr)"
    },
    {
        "id":136,
        "response":"import typing\n\ndef ascii_value_string(str1: str) -> int:\n    return sum(ord(c) for c in str1)"
    },
    {
        "id":137,
        "response":"import typing\n\ndef max_path_sum(tri: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if not tri:\n        return 0\n    dp = tri[-1][:]\n    for i in range(len(tri) - 2, -1, -1):\n        row = tri[i]\n        for j in range(len(row)):\n            dp[j] = row[j] + (dp[j] if dp[j] > dp[j + 1] else dp[j + 1])\n    return dp[0]"
    },
    {
        "id":138,
        "response":""
    },
    {
        "id":139,
        "response":"import typing\n\ndef longest_subseq_with_diff_one(arr: typing.List[int], n: int) -> typing.List[int]:\n    if not arr or n <= 0:\n        return []\n    n = min(n, len(arr))\n    max_len = 1\n    max_start = 0\n    curr_start = 0\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            continue\n        curr_len = i - curr_start\n        if curr_len > max_len:\n            max_len = curr_len\n            max_start = curr_start\n        curr_start = i\n    curr_len = n - curr_start\n    if curr_len > max_len:\n        max_len = curr_len\n        max_start = curr_start\n    return arr[max_start:max_start + max_len]"
    },
    {
        "id":140,
        "response":"import typing\n\ndef does_Contain_B(a: int, b: int, c: int) -> bool:\n    if c == 0:\n        return a == b\n    if c > 0:\n        return a >= b and (a - b) % c == 0\n    return a <= b and (b - a) % (-c) == 0"
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p: int, q: int) -> int:\n    while q:\n        p, q = q, p % q\n    return abs(p)\n\ndef is_coprime(a: int, b: int) -> bool:\n    return gcd(a, b) == 1"
    },
    {
        "id":142,
        "response":""
    },
    {
        "id":143,
        "response":"import typing\n\ndef parabola_vertex(a: float, b: float, c: float) -> typing.Optional[tuple[float, float]]:\n    if a == 0:\n        return None\n    x = -b \/ (2 * a)\n    y = a * x * x + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":""
    },
    {
        "id":145,
        "response":""
    },
    {
        "id":146,
        "response":"import typing\n\ndef tuple_int_str(tuple_str: typing.Tuple[str, ...]) -> typing.Tuple[int, ...]:\n    return tuple(int(s) for s in tuple_str)"
    },
    {
        "id":147,
        "response":"import typing\n\ndef encode_list(list1: typing.List[typing.Any]) -> typing.List[typing.Tuple[typing.Any, int]]:\n    if not list1:\n        return []\n    result = []\n    current = list1[0]\n    count = 1\n    for item in list1[1:]:\n        if item == current:\n            count += 1\n        else:\n            result.append((current, count))\n            current = item\n            count = 1\n    result.append((current, count))\n    return result"
    },
    {
        "id":148,
        "response":""
    },
    {
        "id":149,
        "response":"import typing\n\ndef month_season(month: int, days: int) -> int:\n    if month < 1 or month > 12:\n        print(\"Invalid month\")\n        return month\n    if month in (12, 1, 2):\n        print(\"Winter\")\n    elif month in (3, 4, 5):\n        print(\"Spring\")\n   "
    },
    {
        "id":150,
        "response":"import math\n\ndef solution(a: int, b: int, n: int):\n    def extended_gcd(a, b):\n        old_r, r = a, b\n        old_s, s = 1, 0\n        old_t, t = 0, 1\n        while r != 0:\n            q = old_r \/\/ r\n            old_r, r = r, old_r - q * r\n            old_s, s = s, old_s - q * s\n            old_t, t = t, old_t - q * t\n        return old_r, old_s, old_t\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n \/\/ b)\n        return None\n    if b == 0:\n        if n % a == 0:\n            return (n \/\/ a, 0)\n        return None\n    g, x0, y0 = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    factor = n \/\/ g\n    return (x0 * factor, y0 * factor)"
    },
    {
        "id":151,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_elements(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    set2 = set(list2)\n    list1[:] = [x for x in list1 if x not in set2]\n    return list1"
    },
    {
        "id":152,
        "response":"import typing\n\ndef sum_series(n: int) -> int:\n    if n <= 0:\n        return 0\n    k = (n + 1) \/\/ 2\n    last = n - 2 * (k - 1)\n    return k * (n + last) \/\/ 2"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    if not isinstance(l, int) or l < 3:\n        raise ValueError(\"Number of sides must be integer >= 3\")\n    if s < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    return (l * s**2) \/ (4 * math.tan(math.pi \/ l))"
    },
    {
        "id":154,
        "response":""
    },
    {
        "id":155,
        "response":"import typing\n\ndef count_char_position(str1: str) -> int:\n    count = 0\n    for idx, ch in enumerate(str1, start=1):\n        if ch.isalpha():\n            pos = ord(ch.lower()) - 96\n            if pos == idx:\n                count += 1\n    return count"
    },
    {
        "id":156,
        "response":"import typing\n\ndef find_even_Pair(A: typing.List[int], N: int) -> int:\n    even = 0\n    for x in A:\n        if x & 1 == 0:\n            even += 1\n    odd = N - even\n    return even * (even - 1) \/\/ 2 + odd * (odd - 1) \/\/ 2"
    },
    {
        "id":157,
        "response":"import math\n\ndef next_Power_Of_2(n: int) -> int:\n    if n <= 1:\n        return 1\n    return 1 << (n - 1).bit_length()"
    },
    {
        "id":158,
        "response":"import typing\n\ndef frequency(a: typing.Iterable, x: typing.Any) -> int:\n    if a is None:\n        return 0\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "id":159,
        "response":"import typing\n\ndef get_pell(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b"
    },
    {
        "id":160,
        "response":"import typing\n\ndef sum_range_list(list1: typing.List[typing.Union[int, float]], m: int, n: int) -> float:\n    if not list1:\n        return 0\n    length = len(list1)\n    m = max(0, m)\n    n = min(length - 1, n)\n    if m > n:\n        return 0\n    return sum(list1[m:n + 1])"
    },
    {
        "id":161,
        "response":"import typing\n\ndef perimeter_pentagon(a: float) -> float:\n    if a < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    return 5 * a"
    },
    {
        "id":162,
        "response":"import typing\n\ndef contains_std(s: typing.Any) -> bool:\n    if not isinstance(s, str):\n        return False\n    return 'std' in s"
    },
    {
        "id":163,
        "response":"import re\n\ndef remove_splchar(text: str) -> str:\n    return re.sub(r'[^A-Za-z0-9]', '', text)"
    },
    {
        "id":164,
        "response":"import collections\n\ndef group_keyvalue(l):\n    d = collections.defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return dict(d)"
    },
    {
        "id":165,
        "response":"def is_valid_parenthese(str1):\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for ch in str1:\n        if ch in mapping.values():\n            stack.append(ch)\n        elif ch in mapping:\n            if not stack or stack[-1] != mapping[ch]:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "id":166,
        "response":"from typing import Union\n\ndef perimeter_triangle(a: Union[int, float], b: Union[int, float], c: Union[int, float]) -> Union[int, float]:\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise TypeError(\"Sides must be numeric\")\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Sides must be positive\")\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"Sides do not form a triangle\")\n    return a + b + c"
    },
    {
        "id":167,
        "response":"import math\n\ndef answer(L: int, R: int):\n    if L > R or L < 1:\n        return None\n    if L == 1 and R == 1:\n        return None\n    if L == 1:\n        if R >= 2:\n            return (1, 2)\n        else:\n            return None\n    return (1, L)"
    },
    {
        "id":168,
        "response":"import typing\n\ndef string_literals(patterns: typing.Union[str, typing.Iterable[str]], text: str) -> typing.List[str]:\n    if not isinstance(text, str):\n        text = str(text)\n    if isinstance(patterns, str):\n        patterns = [patterns]\n    found = []\n    for p in patterns:\n        if not isinstance(p, str):\n            continue\n        if p in text:\n            found.append(p)\n    return found"
    },
    {
        "id":169,
        "response":"import typing\n\ndef is_num_keith(x: int) -> bool:\n    if x < 10:\n        return False\n    digits = [int(d) for d in str(x)]\n    seq = digits.copy()\n    while True:\n        next_val = sum(seq[-len(digits):])\n        if next_val == x:\n            return True\n        if next_val > x:\n            return False\n        seq.append(next_val)"
    },
    {
        "id":170,
        "response":"import math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371.0\n    phi1 = math.radians(slat)\n    phi2 = math.radians(elat)\n    dphi = math.radians(elat - slat)\n    dlambda = math.radians(elon - slon)\n    a = math.sin(dphi \/ 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlambda \/ 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c"
    },
    {
        "id":171,
        "response":"from typing import List\n\ndef common_prefix_util(str1: str, str2: str) -> str:\n    min_len = len(str1) if len(str1) < len(str2) else len(str2)\n    i = 0\n    while i < min_len and str1[i] == str2[i]:\n        i += 1\n    return str1[:i]\n\ndef longest_common_prefix(strings: List[str]) -> str:\n    if not strings:\n        return \"\"\n    prefix = strings[0]\n    for s in strings[1:]:\n        prefix = common_prefix_util(prefix, s)\n        if not prefix:\n            break\n    return prefix"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string: str) -> dict:\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    digits = re.findall(r'\\d', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return {'uppercase': uppercase, 'lowercase': lowercase, 'digits': digits, 'special': special}"
    },
    {
        "id":173,
        "response":"import typing\n\ndef count_pairs(arr: typing.List[int], n: int, k: int) -> int:\n    if k < 0:\n        return 0\n    freq: dict[int, int] = {}\n    for num in arr[:n]:\n        freq[num] = freq.get(num, 0) + 1\n    count = 0\n    if k == 0:\n        for f in freq.values():\n            count += f * (f - 1) \/\/ 2\n    else:\n        for x, f in freq.items():\n            count += f * freq.get(x + k, 0)\n    return count"
    },
    {
        "id":174,
        "response":"import typing\n\ndef greater_specificnum(lst: typing.List[typing.Any], num: typing.Any) -> typing.List[typing.Any]:\n    return [x for x in lst if isinstance(x, (int, float)) and x > num]"
    },
    {
        "id":175,
        "response":"import typing\n\ndef parabola_focus(a: float, b: float, c: float) -> typing.Optional[tuple[float, float]]:\n    if a == 0:\n        return None\n    h = -b \/ (2 * a)\n    k = c - (b ** 2) \/ (4 * a)\n    focus_y = k + 1 \/ (4 * a)\n    return (h, focus_y)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    if text is None:\n        text = \"\"\n    if patterns is None:\n        patterns = []\n    for pattern in patterns:\n        if pattern is None:\n            continue\n        if not re.search(re.escape(pattern), text):\n            return None\n    return text"
    },
    {
        "id":177,
        "response":"import typing\n\ndef longest_common_subsequence(X: typing.Union[str, typing.List[typing.Any]], Y: typing.Union[str, typing.List[typing.Any]], m: int, n: int) -> typing.Union[str, typing.List[typing.Any]]:\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] if dp[i - 1][j] > dp[i][j - 1] else dp[i][j - 1]\n    i, j = m, n\n    result = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            result.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    result.reverse()\n    if isinstance(X, str):\n        return ''.join(result)\n    return result"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    if not isinstance(n, int) or n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n"
    },
    {
        "id":179,
        "response":""
    },
    {
        "id":180,
        "response":"import math\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    x_min, x_max = sorted((x1, x2))\n    y_min, y_max = sorted((y1, y2))\n    count_x = math.floor(x_max) - math.ceil(x_min) + 1\n    count_y = math.floor(y_max) - math.ceil(y_min) + 1\n    if count_x < 0 or count_y < 0:\n        return 0\n    return count_x * count_y"
    },
    {
        "id":181,
        "response":"import typing\n\ndef check_monthnumber(monthname3: typing.Union[str, int]) -> bool:\n    if isinstance(monthname3, int):\n        return monthname3 in {4, 6, 9, 11}\n    if not isinstance(monthname3, str):\n        return False\n    s = monthname3.strip().lower()\n    months30 = {\"april\", \"june\", \"september\", \"november\", \"apr\", \"jun\", \"sep\", \"nov\"}\n    return s in months30"
    },
    {
        "id":182,
        "response":"import typing\n\ndef check_String(s: typing.Optional[str]) -> bool:\n    if not s:\n        return False\n    has_letter = False\n    has_digit = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n        elif ch.isdigit():\n            has_digit = True\n        if has_letter and has_digit:\n            return True\n    return False"
    },
    {
        "id":183,
        "response":"import typing\n\ndef remove_tuple(test_tup: typing.Tuple) -> typing.Tuple:\n    return tuple(dict.fromkeys(test_tup))"
    },
    {
        "id":184,
        "response":"import typing\n\ndef octal_To_Decimal(n: typing.Union[int, str]) -> int:\n    if isinstance(n, int):\n        sign = -1 if n < 0 else 1\n        n_abs = abs(n)\n        result = 0\n        while n_abs > 0:\n            digit = n_abs % 10\n            if digit >= 8:\n                raise ValueError(\"Invalid octal digit\")\n            result = result * 8 + digit\n            n_abs \/\/= 10\n        return sign * result\n    if isinstance(n, str):\n        s = n.strip()\n        if not s:\n            raise ValueError(\"Empty string\")\n        sign = -1 if s[0] == '-' else 1\n        if s[0] in '+-':\n            s = s[1:]\n        result = 0\n        for ch in s:\n            if ch < '0' or ch > '7':\n                raise ValueError(\"Invalid octal digit\")\n            result = result * 8 + (ord(ch) - 48)\n        return sign * result\n    raise TypeError(\"Unsupported type\")"
    },
    {
        "id":185,
        "response":"import typing\n\ndef first(arr: typing.List[int], x: int, n: int) -> int:\n    left, right = 0, n - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "id":186,
        "response":"import typing\n\ndef remove_tuples(test_list: typing.List[typing.Any], K: int) -> typing.List[typing.Any]:\n    return [item for item in test_list if not (isinstance(item, tuple) and len(item) == K)]"
    },
    {
        "id":187,
        "response":"import typing\n\ndef find_exponentio(test_tup1: typing.Tuple[typing.Any, ...], test_tup2: typing.Tuple[typing.Any, ...]) -> typing.Tuple[typing.Any, ...]:\n    length = min(len(test_tup1), len(test_tup2))\n    result = []\n    for i in range(length):\n        base = test_tup1[i]\n        exp = test_tup2[i]\n        try:\n            result.append(pow(base, exp))\n        except Exception:\n            raise TypeError(f\"Cannot exponentiate {base!r} to {exp!r}\")\n    return tuple(result)"
    },
    {
        "id":188,
        "response":""
    },
    {
        "id":189,
        "response":"def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":190,
        "response":"from typing import List\n\ndef position_max(list1: List) -> List[int]:\n    if not list1:\n        return []\n    max_val = max(list1)\n    return [i for i, v in enumerate(list1) if v == max_val]"
    },
    {
        "id":191,
        "response":"import typing\n\ndef chkList(lst: typing.List) -> bool:\n    if lst is None:\n        return False\n    return len(set(lst)) <= 1"
    },
    {
        "id":192,
        "response":"import typing\n\ndef remove_even(str1: str) -> str:\n    seen = set()\n    result = []\n    for ch in str1:\n        if ch not in seen:\n            seen.add(ch)\n            result.append(ch)\n    return \"\".join(result)"
    },
    {
        "id":193,
        "response":"import typing\n\ndef hamming_Distance(n1: int, n2: int) -> int:\n"
    },
    {
        "id":194,
        "response":"import typing\n\ndef count(s: str, c: str) -> int:\n    if not isinstance(s, str) or not isinstance(c, str) or not c:\n        return 0\n    return s.count(c)"
    },
    {
        "id":195,
        "response":"import typing\n\ndef inversion_elements(test_tup: typing.Tuple[typing.Any, ...]) -> typing.Tuple[typing.Any, ...]:\n    result = []\n    for elem in test_tup:\n        if isinstance(elem, (int, float)):\n            if elem == 0:\n                result.append(None)\n            else:\n                result.append(1 \/ elem)\n        else:\n            raise TypeError(f\"Element {elem!r} is not a numeric type\")\n    return tuple(result)"
    },
    {
        "id":196,
        "response":"from typing import Tuple, Any\n\ndef concatenate_elements(test_tup: Tuple[Any, ...]) -> Tuple[Tuple[Any, Any], ...]:\n    return tuple((test_tup[i], test_tup[i + 1]) for i in range(len(test_tup) - 1))"
    },
    {
        "id":197,
        "response":"import typing\n\ndef find_longest_repeating_subseq(s: str) -> str:\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    i, j = n, n\n    subseq: typing.List[str] = []\n    while i > 0 and j > 0:\n        if s[i - 1] == s[j - 1] and i != j:\n            subseq.append(s[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return \"\".join(reversed(subseq)) if subseq else \"\""
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num):\n    pattern = re.compile(r'^[+-]?\\d+\\.\\d{2}$')\n    return bool(pattern.fullmatch(str(num)))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        heapq.heappush(heap, a)\n    else:\n        heapq.heappop(heap)\n        heapq.heappush(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string: str) -> bool:\n    pattern = re.compile(r'^[A-Za-z0-9_]+$')\n    return bool(pattern.fullmatch(string))"
    },
    {
        "id":201,
        "response":"import typing\n\ndef count_Num(n: int) -> int:\n    if n <= 0:\n        return 0\n    return (1 << n) - 1"
    },
    {
        "id":202,
        "response":"import typing\n\ndef fourth_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) * (3 * n * n + 3 * n - 1) \/\/ 30"
    },
    {
        "id":203,
        "response":"import typing\n\ndef concatenate_strings(test_tup1: typing.Any, test_tup2: typing.Any) -> str:\n    if test_tup1 is None or test_tup2 is None:\n        return ''\n    if isinstance(test_tup1, str):\n        tup1 = (test_tup1,)\n    else:\n        try:\n            tup1 = tuple(test_tup1)\n        except Exception:\n            return ''\n    if isinstance(test_tup2, str):\n        tup2 = (test_tup2,)\n    else:\n        try:\n            tup2 = tuple(test_tup2)\n        except Exception:\n            return ''\n    return ''.join(str(item) for item in tup1 + tup2)"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    if not isinstance(radian, (int, float)):\n        raise TypeError(\"Input must be a numeric type\")\n    return radian * 180.0 \/ math.pi"
    },
    {
        "id":205,
        "response":"from typing import List, Tuple, Any, Union\n\ndef decode_list(alist: List[Union[Tuple[Any, int], List[Any, int], Any]]) -> List[Any]:\n    result: List[Any] = []\n    if not alist:\n        return result\n    if isinstance(alist[0], (list, tuple)) and len(alist[0]) == 2:\n        for item in alist:\n            value, count = item\n            if isinstance(count, int) and count > 0:\n                result.extend([value] * count)\n    else:\n        it = iter(alist)\n        for value in it:\n            try"
    },
    {
        "id":206,
        "response":"import collections\n\ndef check_subset_list(list1, list2):\n    def flatten(lst):\n        result = []\n        stack = [iter(lst)]\n        while stack:\n            try:\n                item = next(stack[-1])\n                if isinstance(item, (list, tuple)):\n                    stack.append(iter(item))\n                else:\n                    result.append(item)\n            except StopIteration:\n                stack.pop()\n        return result\n\n    counter1 = collections.Counter(flatten(list1))\n    counter2 = collections.Counter(flatten(list2))\n    for elem, cnt in counter1.items():\n        if counter2.get(elem, 0) < cnt:\n            return False\n    return True"
    },
    {
        "id":207,
        "response":"import typing\n\ndef first_Repeated_Char(s: str) -> typing.Optional[str]:\n    seen = set()\n    for ch in s:\n        if ch in seen:\n            return ch\n        seen.add(ch)\n    return None"
    },
    {
        "id":208,
        "response":"import typing\n\ndef min_Operations(A: int, B: int) -> int:\n    if A == B:\n        return 0\n    if A > B:\n        return A - B\n    ops = 0\n    while B > A:\n        if B % 2 == 1:\n            B += 1\n        else:\n            B \/\/= 2\n        ops += 1\n    return ops + (A - B)"
    },
    {
        "id":209,
        "response":"import typing\n\ndef extract_min_max(test_tup: typing.Union[tuple, list], K: int) -> tuple:\n    if not isinstance(test_tup, (tuple, list)):\n        raise TypeError(\"test_tup must be a tuple or list\")\n    try:\n        K = int(K)\n    except Exception:\n        raise TypeError(\"K must be an integer\")\n    n = len(test_tup)\n    if K <= 0:\n        return tuple(), tuple()\n    if K > n:\n        K = n\n    sorted_items = sorted(test_tup)\n    min_k = tuple(sorted_items[:K])\n    max_k = tuple(sorted_items[-K:][::-1])\n    return min_k, max_k"
    },
    {
        "id":210,
        "response":"import typing\n\ndef replace_max_specialchar(text: str, n: int) -> str:\n    if not isinstance(text, str) or n <= 0:\n        return text\n    special = set(' .,')\n    res = []\n    count = 0\n    for ch in text:\n        if ch in special and count < n:\n            res.append('|')\n            count += 1\n        else:\n            res.append(ch)\n    return ''.join(res)"
    },
    {
        "id":211,
        "response":""
    },
    {
        "id":212,
        "response":"import typing\n\ndef check_type(test_tuple: typing.Tuple) -> typing.Tuple:\n    if not test_tuple:\n        return test_tuple\n    first_type = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if type(element) is not first_type:\n            raise TypeError(f\"All elements must be of the same type, found {type(element).__name__} instead of {first_type.__name__}\")\n    return test_tuple"
    },
    {
        "id":213,
        "response":"import bisect\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    if not arr:\n        return False\n    n = len(arr)\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    count = right - left\n    return count > n \/\/ 2\n\n```"
    },
    {
        "id":214,
        "response":"import sys\n\ndef count_Set_Bits(n: int) -> int:\n    return abs(n).bit_count() if hasattr(int, \"bit_count\") else bin(abs(n)).count(\"1\")"
    },
    {
        "id":215,
        "response":"import typing\n\ndef find_Min(arr: typing.List[int], low: int, high: int) -> typing.Optional[int]:\n    if not arr or low > high or low < 0 or high >= len(arr):\n        return None\n    while low <= high:\n        if low == high:\n            return arr[low]\n        if arr[low] <= arr[high]:\n            return arr[low]\n        mid = (low + high) \/\/ 2\n        if mid < high and arr[mid] > arr[mid + 1]:\n            return arr[mid + 1]\n        if mid > low and arr[mid] < arr[mid - 1]:\n            return arr[mid]\n        if arr[mid] >= arr[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None"
    },
    {
        "id":216,
        "response":"import typing\n\ndef odd_values_string(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError(\"Expected a string\")\n    return s[::2]"
    },
    {
        "id":217,
        "response":"from typing import Union\n\ndef min_of_three(a: Union[int, float], b: Union[int, float], c: Union[int, float]) -> Union[int, float]:\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"```python\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    if l > r:\n        return True\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return (n & mask) == mask\n```"
    },
    {
        "id":219,
        "response":"import typing\n\ndef re_arrange_array(arr: typing.List[int], n: int) -> typing.List[int]:\n    i = 0\n    j = n - 1\n    while i < j:\n        while i < n and arr[i] < 0:\n            i += 1\n        while j >= 0 and arr[j] >= 0:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return arr"
    },
    {
        "id":220,
        "response":"import typing\n\ndef replace_blank(str1: str, char: str) -> str:\n    if not char:\n        return str1\n    result = []\n    idx = 0\n    char_len = len(char)\n    for c in str1:\n        if c == ' ':\n            result.append(char[idx % char_len])\n            idx += 1\n        else:\n            result.append(c)\n    return ''.join(result)"
    },
    {
        "id":221,
        "response":"import math\nfrom typing import List, Optional\n\ndef max_sum(tri: List[List[int]], n: int) -> Optional[int]:\n    if not tri or n <= 0:\n        return None\n    rows, cols = len(tri), len(tri[0])\n    if n > rows or n > cols:\n        return None\n    max_sum_val = -math.inf\n    # top-left right angle\n    for i in range(rows - n + 1):\n        for j in range(cols - n + 1):\n            s = 0\n            for r in range(n):\n               "
    },
    {
        "id":222,
        "response":"import heapq\n\ndef larg_nnum(list1, n):\n    if list1 is None:\n        raise TypeError(\"list1 cannot be None\")\n    if not isinstance(list1, (list, tuple)):\n        list1 = list(list1)\n    if n <= 0:\n        return []\n    if n >= len(list1):\n        return sorted(list1, reverse=True)\n    return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h"
    },
    {
        "id":224,
        "response":"import typing\n\ndef area_cube(l: float) -> float:\n    return 6 * l * l"
    },
    {
        "id":225,
        "response":""
    },
    {
        "id":226,
        "response":""
    },
    {
        "id":227,
        "response":""
    },
    {
        "id":228,
        "response":"import typing\n\ndef number_of_substrings(str: str) -> int:\n    n = len(str)\n    return n * (n + 1) \/\/ 2"
    },
    {
        "id":229,
        "response":""
    },
    {
        "id":230,
        "response":"import typing\n\ndef replace_list(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if list1:\n        list1[-1] = list2\n    else:\n        list1.append(list2)\n    return list1"
    },
    {
        "id":231,
        "response":"from typing import List\n\ndef array_3d(m: int, n: int, o: int) -> List[List[List[str]]]:\n    return [[['*' for _ in range(o)] for _ in range(n)] for _ in range(m)]"
    },
    {
        "id":232,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_charac(str1: str) -> int:\n    if str1 is None:\n        return 0\n    return len(str1)"
    },
    {
        "id":233,
        "response":"import collections\n\ndef sort_on_occurence(lst):\n    freq = collections.Counter(x[0] if x else None for x in lst)\n    return sorted(lst, key=lambda x: freq[x[0]] if x else freq[None], reverse=True)"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    if N < 0:\n        return 0\n    k = math.isqrt(N) + 1\n    return k * k"
    },
    {
        "id":235,
        "response":""
    },
    {
        "id":236,
        "response":"import math\n\ndef babylonian_squareroot(number):\n    if not isinstance(number, (int, float)):\n        raise TypeError(\"Input must be a numeric type\")\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    if number == 0:\n        return 0.0\n    guess = number if number >= 1 else 1.0\n    tolerance = 1e-12\n    max_iter = 1000\n    for _ in range(max_iter):\n        next_guess = 0.5 * (guess + number \/ guess)\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        guess = next_guess\n    return guess"
    },
    {
        "id":237,
        "response":"import sys\n\ndef lps(str):\n    s = str\n    n = len(s)\n    if n == 0:\n        return \"\"\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + (dp[i + 1][j - 1] if cl > 2 else 0)\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    i, j = 0, n - 1\n    res = []\n    while i <= j:\n        if i == j:\n            res.append(s[i])\n            break\n        if s[i] == s[j]:\n            res.append(s[i])\n            i += 1\n            j -= 1\n        elif dp[i + 1][j] >= dp[i][j - 1]:\n            i += 1\n        else:\n            j -= 1\n    left = \"\".join(res)\n    right = \"\".join(reversed(res[:-1] if len(res) > 1 and i <= j else res))\n    return left + right if i > j else left + right[::-1] if len(res) > 1 else left\n\nif __name__ == \"__main__\":\n    for line in sys.stdin:\n        print(lps(line.strip()))"
    },
    {
        "id":238,
        "response":"from typing import Union\n\ndef harmonic_sum(n: int) -> float:\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 \/ i\n    return total"
    },
    {
        "id":239,
        "response":"import typing\n\ndef intersection_array(array_nums1: typing.List[int], array_nums2: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x in array_nums2, array_nums1))"
    },
    {
        "id":240,
        "response":"import typing\n\ndef count_X(tup: tuple, x: typing.Any) -> int:\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"from typing import List, Any\n\ndef insert_element(lst: List[Any], element: Any) -> List[Any]:\n    result: List[Any] = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "id":242,
        "response":"import typing\n\ndef convert(numbers: typing.Union[complex, typing.Iterable[complex]]) -> typing.Union[typing.Tuple[float, float], typing.List[typing.Tuple[float, float]]]:\n    if isinstance(numbers, complex):\n        return (numbers.real, numbers.imag)\n    if isinstance(numbers, (list, tuple)):\n        result: typing.List[typing.Tuple[float, float]] = []\n        for n in numbers:\n            if isinstance(n, complex):\n                result.append((n.real, n.imag))\n            else:\n                raise TypeError(\"All elements must be complex numbers\")\n        return result\n    raise TypeError(\"Input must be a complex number or a list\/tuple of complex numbers\")"
    },
    {
        "id":243,
        "response":"import typing\n\ndef count_integer(list1: typing.List) -> int:\n    if list1 is None:\n        return 0\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text: str):\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [w for w in words if w and w[0].lower() in ('a', 'e')]\n    return result"
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return [list(p) for p in itertools.product(l, repeat=n)]"
    },
    {
        "id":246,
        "response":"import math\n\ndef count_Primes_nums(n):\n    try:\n        limit = int(n)\n    except Exception:\n        return 0\n    if limit <= 2:\n        return 0\n    is_prime = [True] * limit\n    is_prime[0] = is_prime[1] = False\n    sqrt_limit = int(math.isqrt(limit - 1)) + 1\n    for i in range(2, sqrt_limit):\n        if is_prime[i]:\n            step = i\n            start = i * i\n            for j in range(start, limit, step):\n                is_prime[j] = False\n    return sum(is_prime)"
    },
    {
        "id":247,
        "response":"from typing import Tuple\n\ndef swap_numbers(a: int, b: int) -> Tuple[int, int]:\n    return b, a"
    },
    {
        "id":248,
        "response":"import typing\n\ndef count_odd(array_nums: typing.List[int]) -> int:\n    return sum(map(lambda x: 1 if x % 2 != 0 else 0, array_nums))"
    },
    {
        "id":249,
        "response":""
    },
    {
        "id":250,
        "response":""
    },
    {
        "id":251,
        "response":"import numbers\nfrom typing import Tuple, Union\n\ndef division_elements(test_tup1: Tuple[Union[int, float], ...], test_tup2: Tuple[Union[int, float], ...]) -> Tuple[Union[float, None], ...]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        if not isinstance(a, numbers.Number) or not isinstance(b, numbers.Number):\n            raise TypeError(\"All elements must be numeric\")\n        if b == 0:\n            result.append(None)\n        else:\n            result.append(a \/ b)\n    return tuple(result)"
    },
    {
        "id":252,
        "response":"from typing import List, Tuple\n\ndef split_two_parts(list1: List, L: int) -> Tuple[List, List]:\n    if L < 0:\n        L = 0\n    if L > len(list1):\n        L = len(list1)\n    return list1[:L], list1[L:]"
    },
    {
        "id":253,
        "response":"import typing\n\ndef merge_dict(d1: typing.Dict, d2: typing.Dict) -> typing.Dict:\n    if d1 is None:\n        d1 = {}\n    if d2 is None:\n        d2 = {}\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        raise TypeError(\"Both arguments must be dictionaries\")\n    d1.update(d2)\n    return d1"
    },
    {
        "id":254,
        "response":"import typing\n\ndef dog_age(h_age: typing.Union[int, float]) -> int:\n    if h_age <= 0:\n        return 0\n    h_age_int = int(h_age)\n    if h_age_int == 1:\n        return 15\n    if h_age_int == 2:\n        return 24\n    return 24 + (h_age_int - 2) * 5"
    },
    {
        "id":255,
        "response":"import typing\n\ndef list_split(S: typing.List[typing.Any], step: int) -> typing.List[typing.List[typing.Any]]:\n    if step <= 0:\n        raise ValueError(\"step must be a positive integer\")\n    return [S[i:i + step] for i in range(0, len(S), step)]"
    },
    {
        "id":256,
        "response":"import typing\n\ndef lateralsurface_cube(l: typing.Union[int, float]) -> float:\n    if not isinstance(l, (int, float)):\n        raise TypeError(\"Side length must be a number\")\n    if l < 0:\n        raise ValueError(\"Side length cannot be negative\")\n    return l * l"
    },
    {
        "id":257,
        "response":"import typing\n\ndef square_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (4 * n * n - 1) \/\/ 3"
    },
    {
        "id":258,
        "response":"import typing\n\ndef find_star_num(n: int) -> int:\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 6 * n * (n - 1) + 1"
    },
    {
        "id":259,
        "response":"def ascii_value(k: str) -> int:\n    return ord(k)"
    },
    {
        "id":260,
        "response":"import typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    total = 0\n    for i, val in enumerate(arr):\n        if i % 2 == 0 and val % 2 == 0:\n            total += val\n    return total"
    },
    {
        "id":261,
        "response":"import math\nfrom typing import List\n\ndef first_n_primes_fifth_power_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    primes: List[int] = []\n    candidate = 2\n    while len(primes) < n:\n        is_prime = True\n        limit = int(math.isqrt(candidate))\n        for p in primes:\n            if p > limit:\n                break\n            if candidate % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(candidate)\n        candidate += 1 if candidate == 2 else 2\n    total = 0\n    for p in primes:\n        total += p ** 5\n    return total"
    },
    {
        "id":262,
        "response":"import typing\n\ndef rear_extract(test_list: typing.List[typing.Tuple]) -> typing.List:\n    return [t[-1] for t in test_list if t]"
    },
    {
        "id":263,
        "response":"import typing\n\ndef substract_elements(test_tup1: typing.Tuple, test_tup2: typing.Tuple) -> typing.Tuple:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"import math\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    return 1 << (n - 1)"
    },
    {
        "id":265,
        "response":"import typing\n\ndef get_Position(a: typing.List[int], n: int, m: int) -> int:\n    length = min(n, len(a))\n    for i in range(length - 1, -1, -1):\n        if a[i] == m:\n            return i\n    return -1"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    try:\n        radius = float(r)\n        height = float(h)\n    except (TypeError, ValueError):\n        raise TypeError(\"Radius and height must be numeric values\")\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    return math.pi * radius * radius * height"
    },
    {
        "id":267,
        "response":""
    },
    {
        "id":268,
        "response":"import collections\nfrom typing import Any, Optional, Tuple\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> Optional[Any]:\n    if not test_tup:\n        return None\n    counts: dict[Any, int] = {}\n    order: list[Any] = []\n    for elem in test_tup:\n        if elem not in counts:\n            order.append(elem)\n            counts[elem] = 1\n        else:\n            counts[elem] += 1\n    max_count = max(counts.values())\n    for elem in order:\n        if counts[elem] == max_count:\n            return elem\n    return None"
    },
    {
        "id":269,
        "response":""
    },
    {
        "id":270,
        "response":"import typing\n\ndef sequential_search(dlist: typing.Sequence, item: typing.Any) -> int:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return index\n    return -1"
    },
    {
        "id":271,
        "response":"import typing\n\ndef all_unique(test_list: typing.List) -> bool:\n    try:\n        return len(test_list) == len(set(test_list))\n    except TypeError:\n        seen = []\n        for item in test_list:\n            if item in seen:\n                return False\n            seen.append(item)\n        return True"
    },
    {
        "id":272,
        "response":"import typing\n\ndef sub_list(nums1: typing.List[int], nums2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x, y: x - y, nums1, nums2))"
    },
    {
        "id":273,
        "response":"import collections\n\ndef validate(n: int) -> bool:\n    digits = str(abs(n))\n    freq = collections.Counter(digits)\n    for d, count in freq.items():\n        if count > int(d):\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"import typing\n\ndef check_element(lst: typing.List[str], element: str) -> bool:\n    return all(item == element for item in lst)"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.fullmatch(r'ab{2,3}', text))"
    },
    {
        "id":276,
        "response":"import typing\n\ndef max_sub_array_sum_repeated(a: typing.List[int], n: int, k: int) -> int:\n    if not a:\n        return 0\n    best = a[0]\n    current = a[0]\n    for x in a[1:]:\n        current = x if current < 0 else current + x\n        if current > best:\n            best = current\n    if k == 1:\n        return best\n    total = sum(a)\n    max_prefix = a[0]\n    prefix_sum = a[0]\n    for x in a[1:]:\n        prefix_sum += x\n        if prefix_sum > max_prefix:\n            max_prefix = prefix_sum\n    max_suffix = a[-1]\n    suffix_sum = a[-1]\n    for x in reversed(a[:-1]):\n        suffix_sum += x\n        if suffix_sum > max_suffix:\n            max_suffix = suffix_sum\n    if total > 0:\n        candidate = max_prefix + max_suffix + (k - 2) * total\n        if candidate > best:\n            best = candidate\n    return best"
    },
    {
        "id":277,
        "response":"from typing import Any\n\ndef square_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) \/\/ 6"
    },
    {
        "id":278,
        "response":"import typing\n\ndef modular_inverse(arr: typing.List[int], N: int, P: int) -> typing.List[int]:\n    result = []\n    for value in arr[:N]:\n        mod_val = value % P\n        if (mod_val * mod_val) % P == 1:\n            result.append(value)\n    return result"
    },
    {
        "id":279,
        "response":""
    },
    {
        "id":280,
        "response":""
    },
    {
        "id":281,
        "response":""
    },
    {
        "id":282,
        "response":"import typing\n\ndef find(n: typing.Any, m: typing.Any) -> typing.Any:\n    return n * m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w * w + h * h)"
    },
    {
        "id":284,
        "response":"import typing\n\ndef max_val(listval: typing.List[float]) -> typing.Optional[float]:\n    if not listval:\n        return None\n    return max(listval)"
    },
    {
        "id":285,
        "response":"import math\nfrom typing import Union\n\ndef sum_div(number: int) -> int:\n    if number <= 0:\n        return 0\n    n = number\n    total = 0\n    limit = math.isqrt(n)\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            total += i\n            j = n \/\/ i\n            if j != i:\n                total += j\n    return total"
    },
    {
        "id":286,
        "response":"import bisect\nfrom typing import List\n\nclass FenwickTree:\n    def __init__(self, size: int):\n        self.n = size\n        self.bit = [0] * (size + 1)\n\n    def update(self, index: int, delta: int) -> None:\n        while index <= self.n:\n            self.bit[index] += delta\n            index += index & -index\n\n    def query(self, index: int) -> int:\n        result = 0\n        while index > 0:\n            result += self.bit[index]\n            index -= index & -index\n        return result\n\ndef get_Inv_Count(arr: List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    # Coordinate compression\n    sorted_vals = sorted(set(arr))\n    comp = {v: i + 1 for i, v in enumerate(sorted_vals)}\n    ft = FenwickTree(len(sorted_vals))\n    inv_count = 0\n    # Process from right to left\n    for val in reversed(arr[:n]):\n        idx = comp[val]\n        inv_count += ft.query(idx - 1)\n        ft.update(idx, 1)\n    return inv_count"
    },
    {
        "id":287,
        "response":"import typing\n\ndef flatten_list(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result: typing.List[typing.Any] = []\n    stack: typing.List[typing.Iterator[typing.Any]] = [iter(list1)]\n    while stack:\n        try:\n            item = next(stack[-1])\n            if isinstance(item, list):\n                stack.append(iter(item))\n            else:\n                result.append(item)\n        except StopIteration:\n            stack.pop()\n    return result"
    },
    {
        "id":288,
        "response":"import typing\n\ndef intersection_nested_lists(l1: typing.List, l2: typing.List) -> typing.List:\n    result = []\n    for item in l1:\n        if isinstance(item, list) and item in l2:\n            result.append(item)\n    return result"
    },
    {
        "id":289,
        "response":"import typing\n\ndef max_aggregate(stdata: typing.List[typing.Tuple[typing.Any, ...]]) -> float:\n    if not stdata:\n        return 0\n    return max((sum(tup) for tup in stdata), default=0)"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n: int) -> int:\n    return math.comb(2 * n, n)"
    },
    {
        "id":291,
        "response":"import collections\n\ndef dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    max_depth = 1\n    stack = [(d, 1)]\n    visited = set()\n    while stack:\n        current, depth = stack.pop()\n        if id(current) in visited:\n            continue\n        visited.add(id(current))\n        if depth > max_depth:\n            max_depth = depth\n        for value in current.values():\n            if isinstance(value, dict):\n                stack.append((value, depth + 1))\n            elif isinstance(value, (list, tuple, set)):\n                for item in value:\n                    if isinstance(item, dict):\n                        stack.append((item, depth + 1))\n    return max_depth"
    },
    {
        "id":292,
        "response":""
    },
    {
        "id":293,
        "response":"import typing\n\ndef solve(a: int, n: int) -> int:\n    if n <= 1:\n        return -1\n   "
    },
    {
        "id":294,
        "response":"import typing\n\ndef find_Element(arr: typing.List[int], ranges: typing.Tuple[int, int], rotations: int, index: int) -> typing.Optional[int]:\n    if not arr or index < 0 or index >= len(arr):\n        return None\n    if not ranges:\n        return arr[index]\n    l, r = ranges\n    l = max(0, l)\n    r = min(len(arr) -"
    },
    {
        "id":295,
        "response":"import typing\n\ndef start_withp(words: typing.List[str]) -> typing.List[str]:\n    return [w for w in words if w.startswith('P')][:2]"
    },
    {
        "id":296,
        "response":""
    },
    {
        "id":297,
        "response":""
    },
    {
        "id":298,
        "response":"import heapq\nfrom typing import List, Optional\n\ndef large_product(nums1: List[float], nums2: List[float], N: int) -> Optional[float]:\n    if not nums1 or not nums2 or N <= 0:\n        return None\n    nums1_sorted = sorted(nums1, reverse=True)\n    nums2_sorted = sorted(nums2, reverse=True)\n    total_pairs = len(nums1_sorted) * len(nums2_sorted)\n    if N > total_pairs:\n        return None\n    visited = set()\n    heap = [(-nums1_sorted[0] * nums2_sorted[0], 0, 0)]\n    visited.add((0, 0))\n    result = None\n    for _ in range(N):\n        prod_neg, i, j = heapq.heappop(heap)\n        result = -prod_neg\n        if i + 1 < len(nums1_sorted) and (i + 1, j) not in visited:\n            heapq.heappush(heap, (-nums1_sorted[i + 1] * nums2_sorted[j], i + 1, j))\n            visited.add((i + 1, j))\n        if j + 1 < len(nums2_sorted) and (i, j + 1) not in visited:\n            heapq.heappush(heap, (-nums1_sorted[i] * nums2_sorted[j + 1], i, j + 1))\n            visited.add((i, j + 1))\n    return result"
    },
    {
        "id":299,
        "response":"import typing\n\ndef maximum(a: typing.Any, b: typing.Any) -> typing.Any:\n    return a if a >= b else b"
    },
    {
        "id":300,
        "response":"import typing\n\ndef string_to_tuple(str1: str) -> typing.Tuple[str, ...]:\n    return tuple(str1.split())"
    },
    {
        "id":301,
        "response":""
    },
    {
        "id":302,
        "response":"import math\n\ndef area_cone(r: float, h: float) -> float:\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Radius and height must be positive\")\n    slant = math.sqrt(r * r + h * h)\n    return math.pi * r * (r + slant)"
    },
    {
        "id":303,
        "response":"import typing\n\ndef pos_nos(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    for item in list1:\n        if isinstance(item, (int, float)) and item > 0:\n            print(item)\n    return list1"
    },
    {
        "id":304,
        "response":"import typing\n\ndef max_sum_rectangular_grid(grid: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0 or not grid or not grid[0]:\n        return 0\n    top = grid[0]\n    bottom = grid[1]\n    prev = [0, 0, 0]  # states: 0 none, 1 top, 2 bottom\n    for i in range(n):\n        cur0 = max(prev[0], prev[1], prev[2])\n        cur1 = max(prev[0], prev[2]) + top[i]\n        cur2 = max(prev[0], prev[1]) + bottom[i]\n        prev = [cur0, cur1, cur2]\n    return max(prev[0], prev[1], prev[2])"
    },
    {
        "id":305,
        "response":"import typing\n\ndef find_Max_Len_Even(s: str) -> str:\n    words = s.split()\n    if not words:\n        return ''\n    max_len = max(len(word) for word in words)\n    for word in words:\n        if len(word) == max_len:\n            return word\n    return ''"
    },
    {
        "id":306,
        "response":"from typing import List\n\ndef find_last_occurrence(A: List[int], x: int) -> int:\n    lo, hi = 0, len(A) - 1\n    res = -1\n    while lo <= hi:\n        mid = (lo + hi) \/\/ 2\n        if A[mid] == x:\n            res = mid\n            lo = mid + 1\n        elif A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return res"
    },
    {
        "id":307,
        "response":"import itertools\n\ndef modified_encode(alist):\n    return [(len(list(group)), key) for key, group in itertools.groupby(alist)]"
    },
    {
        "id":308,
        "response":"import math\nfrom typing import Union\n\ndef max_volume(s: Union[int, float]) -> float:\n    if s < 0:\n        return 0.0\n    edge = s \/ 12.0\n    return edge ** 3"
    },
    {
        "id":309,
        "response":""
    },
    {
        "id":310,
        "response":"import typing\n\ndef sum_difference(n: int) -> int:\n    sum_of_numbers = n * (n + 1) \/\/ 2\n    sum_of_squares = n * (n + 1) * (2 * n + 1) \/\/ 6\n    return sum_of_numbers * sum_of_numbers - sum_of_squares"
    },
    {
        "id":311,
        "response":""
    },
    {
        "id":312,
        "response":"from typing import List\n\ndef position_min(list1: List[int]) -> List[int]:\n    if not list1:\n        return []\n    min_val = min(list1)\n    return [i for i, v in enumerate(list1) if v == min_val]"
    },
    {
        "id":313,
        "response":"import typing\n\ndef right_rotate(arr: typing.List[int], n: int, out_of_place: int, cur: int) -> typing.List[int]:\n    if n <= 0 or not arr:\n        return arr\n    if out_of_place < 0 or out_of_place >= n or cur < 0 or cur >= n or out_of_place >= cur:\n        return arr\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr"
    },
    {
        "id":314,
        "response":"import typing\n\ndef sum_of_alternates(test_tuple: typing.Tuple[typing.Tuple[typing.Any, ...], ...]) -> float:\n    total_even = 0\n    total_odd = 0\n    for idx, inner in enumerate(test_tuple):\n        inner_sum = 0\n        for item in inner:\n            inner_sum += item\n        if idx % 2 == 0:\n            total_even += inner_sum\n        else:\n            total_odd += inner_sum\n    return total_even - total_odd"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n: int) -> int:\n    if n <= 0:\n        return 0\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        min_val = i\n        j = 1\n        while j * j <= i:\n            val = 1 + dp[i - j * j]\n            if val < min_val:\n                min_val = val\n            j += 1\n        dp[i] = min_val\n    return dp[n]"
    },
    {
        "id":316,
        "response":"import collections\n\ndef most_occurrences(test_list):\n    if not test_list:\n        return None\n    counter = collections.Counter(test_list)\n    max_count = max(counter.values())\n    for word in test_list:\n        if counter[word] == max_count:\n            return word"
    },
    {
        "id":317,
        "response":""
    },
    {
        "id":318,
        "response":"import typing\n\ndef rotate_left(list1: typing.List[typing.Any], m: int, n: int) -> typing.List[typing.Any]:\n    if not list1:\n        return list1\n    length = len(list1)\n    shift = m % length\n    return list1[shift:] + list1[:shift]"
    },
    {
        "id":319,
        "response":"import typing\n\ndef neg_count(lst: typing.Sequence[typing.Any]) -> int:\n    return sum(1 for x in lst if isinstance(x, (int, float)) and x < 0)"
    },
    {
        "id":320,
        "response":"import re\nfrom typing import List\n\ndef find_char(text: str) -> List[str]:\n    pattern = r'(?=(.{3,5}))'\n    return [m.group(1) for m in re.finditer(pattern, text)]"
    },
    {
        "id":321,
        "response":"import typing\n\ndef count_unset_bits(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    bits = n.bit_length()\n    if bits == 0:\n        bits = 1\n    ones = bin(n).count('1')\n    return bits - ones"
    },
    {
        "id":322,
        "response":"import collections\n\ndef char_frequency(str1):\n    return dict(collections.Counter(str1))"
    },
    {
        "id":323,
        "response":"from typing import List\n\ndef Sort(sub_li: List[List]) -> List[List]:\n    sub_li.sort(key=lambda x: x[1] if len(x) > 1 else float(\"-inf\"))\n    return sub_li"
    },
    {
        "id":324,
        "response":"import math\n\ndef check_Validity(a, b, c):\n    try:\n        a = float(a)\n        b = float(b)\n        c = float(c)\n    except Exception:\n        return False\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a + b > c and a + c > b and b + c > a"
    },
    {
        "id":325,
        "response":"import math\n\ndef ap_sum(a, n, d):\n    if not isinstance(n, int) or n <= 0:\n        return 0\n    total = n * (2 * a + (n - 1) * d) \/ 2\n    if isinstance(total, float) and math.isclose(total, round(total)):\n        return int(round(total))\n    return total"
    },
    {
        "id":326,
        "response":"import re\n\ndef check_monthnum(monthname1):\n    return isinstance(monthname1, str) and monthname1.strip().lower() == \"february\""
    },
    {
        "id":327,
        "response":""
    },
    {
        "id":328,
        "response":"import collections\n\ndef check_Equality(s):\n    freq = collections.Counter(s)\n    total = 0\n    for cnt in freq.values():\n        total += cnt * (cnt + 1) \/\/ 2\n    return total"
    },
    {
        "id":329,
        "response":""
    },
    {
        "id":330,
        "response":"import typing\n\ndef sum_three_smallest_nums(lst: typing.List[typing.Union[int, float]]) -> float:\n    positives = [x for x in lst if isinstance(x, (int, float)) and x > 0]\n    if not positives:\n        return 0\n    positives.sort()\n    return sum(positives[:3])"
    },
    {
        "id":331,
        "response":"from typing import Set, Tuple, Any\n\ndef set_to_tuple(s: Set[Any]) -> Tuple[Any, ...]:\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"import heapq\nfrom typing import List, Tuple\n\ndef smallest_range(nums: List[List[int]]) -> List[int]:\n    if not nums or any(not lst for lst in nums):\n        return []\n    k = len(nums)\n    heap: List[Tuple[int, int, int]] = []\n    current_max = float('-inf')\n    for i, lst in enumerate(nums):\n        heapq.heappush(heap, (lst[0], i, 0))\n        current_max = max(current_max, lst[0])\n    best_start, best_end = heap[0][0], current_max\n    while True:\n        current_min, list_idx, elem_idx = heapq.heappop(heap)\n        if current_max - current_min < best_end - best_start:\n            best_start, best_end = current_min, current_max\n        if elem_idx + 1 >= len(nums[list_idx]):\n            break\n        next_val = nums[list_idx][elem_idx + 1]\n        heapq.heappush(heap, (next_val, list_idx, elem_idx + 1))\n        current_max = max(current_max, next_val)\n    return [best_start, best_end]"
    },
    {
        "id":333,
        "response":"from typing import Tuple\n\ndef dig_let(s: str) -> Tuple[int, int]:\n    letters = sum(1 for c in s if c.isalpha())\n    digits = sum(1 for c in s if c.isdigit())\n    return letters, digits"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n, m):\n    if n > m:\n        return 0\n    if m < 0:\n        return 0\n    if n <= 0:\n        start = 0\n    else:\n        start = math.isqrt(n - 1) + 1\n    end = math.isqrt(m)\n    if end < start:\n        return 0\n    return end - start + 1"
    },
    {
        "id":335,
        "response":"import typing\n\ndef diff_consecutivenums(nums: typing.List[float]) -> typing.List[float]:\n    if not nums or len(nums) < 2:\n        return []\n    return [nums[i + 1] - nums[i] for i in range(len(nums) - 1)]"
    },
    {
        "id":336,
        "response":"import typing\n\ndef zigzag(n: int, k: int) -> int:\n    if k <= 1:\n        return 0\n    period = 2 * k - 2\n    pos = n % period\n    if pos < k:\n        return pos\n    return period - pos"
    },
    {
        "id":337,
        "response":"from typing import Any\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    min_dim = m if m < n else n\n    total = 0\n    for k in range(1, min_dim + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n: int, r: int) -> int:\n    if n < 0 or r < 0:\n        return 0\n    if r == 0:\n        return 1 if n == 0 else 0\n    return math.comb(n + r - 1, r - 1)"
    },
    {
        "id":339,
        "response":"import re\n\ndef check(string):\n    if not isinstance(string, str) or not string:\n        return False\n    return all(c in '01' for c in string)"
    },
    {
        "id":340,
        "response":"import collections\n\ndef minimum_Length(s: str) -> str:\n    if not s:\n        return \"\"\n    freq = collections.Counter(s)\n    max_char = max(freq, key=freq.get)\n    return s.replace(max_char, \"\")"
    },
    {
        "id":341,
        "response":"import typing\n\ndef first_Element(arr: typing.List[int], n: int, k: int) -> int:\n    if k <= 0 or n <= 0:\n        return -1\n    counts = {}\n    for i in range(min(n, len(arr))):\n        val = arr[i]\n        counts[val] = counts.get(val, 0) + 1\n        if counts[val] == k:\n            return val\n    return -1"
    },
    {
        "id":342,
        "response":"import typing\n\ndef unique_Characters(str: str) -> bool:\n    return len(str) == len(set(str))"
    },
    {
        "id":343,
        "response":"from typing import List, Any\n\ndef remove_column(list1: List[List[Any]], n: int) -> List[List[Any]]:\n    for row in list1:\n        if not isinstance(row, list):\n            continue\n        idx = n\n        if idx < 0:\n            idx = len(row) + idx\n        if 0 <= idx < len(row):\n            row.pop(idx)\n    return list1"
    },
    {
        "id":344,
        "response":"import typing\n\ndef tn_ap(a: typing.Any, n: int, d: typing.Any) -> typing.Any:\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"import math\n\ndef count_Rectangles(radius: int) -> int:\n    if not isinstance(radius, int):\n        raise TypeError(\"radius must be an integer\")\n    if radius <= 0:\n        return 0\n    d = 2 * radius\n    d2 = d * d\n    count = 0\n    for a in range(1, d + 1):\n        b2 = d2 - a * a\n        if b2 <= 0:\n            break\n        b = math.isqrt(b2)\n        if b * b == b2 and b >= a and b > 0:\n            count += 1\n    return count"
    },
    {
        "id":346,
        "response":"import typing\n\ndef find_angle(a: float, b: float) -> float:\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"Angle a must be a number\")\n    if not isinstance(b, (int, float)):\n        raise TypeError(\"Angle b must be a number\")\n    a = float(a)\n    b = float(b)\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Angles must be positive\")\n    if a + b >= 180:\n        raise ValueError(\"Sum of the two angles must be less than 180\")\n    return 180.0 - a - b"
    },
    {
        "id":347,
        "response":"import typing\n\ndef find_max(test_list: typing.List[typing.Tuple[typing.Any, ...]]) -> typing.Any:\n    if not test_list:\n        return None\n    max_val = None\n    for tup in test_list:\n        if not tup:\n            continue\n        local_max = max(tup)\n        if max_val is None or local_max > max_val:\n            max_val = local_max\n    return max_val"
    },
    {
        "id":348,
        "response":"from typing import List\n\ndef moddiv_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x % y if y != 0 else None, nums1, nums2))"
    },
    {
        "id":349,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    if a == 0:\n        return False\n    D = b * b - 4 * a * c\n    if D <= 0:\n        return False\n    sqrtD = math.sqrt(D)\n    denom = 2 * a\n    r1 = (-b + sqrtD) \/ denom\n    r2 = (-b - sqrtD) \/ denom\n    return math.isclose(r1, 2 * r2, rel_tol=1e-9, abs_tol=1e-9) or math.isclose(r2, 2 * r1, rel_tol=1e-9, abs_tol=1e-9)"
    },
    {
        "id":350,
        "response":""
    },
    {
        "id":351,
        "response":"import typing\n\ndef remove_empty(list1: typing.List) -> typing.List:\n    if not isinstance(list1, list):\n        return list1\n    return [x for x in list1 if x != []]"
    },
    {
        "id":352,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return 0\n    freq = collections.Counter(nums)\n    return max(freq.values())"
    },
    {
        "id":353,
        "response":"import typing\n\ndef add_K_element(test_list: typing.Union[list, tuple], K: typing.Any) -> typing.Union[list, tuple]:\n    if test_list is None:\n        return None\n    if isinstance(test_list, tuple):\n        return tuple(x + K for x in test_list)\n    return [x + K for x in test_list]"
    },
    {
        "id":354,
        "response":"import typing\n\ndef make_flip(ch: str) -> int:\n    if not ch:\n        return 0\n    flips_start_with_zero = 0\n    flips_start_with_one = 0\n    for i, c in enumerate(ch):\n        expected_zero = '0' if i % 2 == 0 else '1'\n        expected_one = '1' if i % 2 == 0 else '0'\n        if c != expected_zero:\n            flips_start_with_zero += 1\n        if c != expected_one:\n            flips_start_with_one += 1\n    return min(flips_start_with_zero, flips_start_with_one)"
    },
    {
        "id":355,
        "response":"from typing import Union\n\ndef count_Digit(n: Union[int, float]) -> int:\n    try:\n        num = int(abs(n))\n    except Exception:\n        return 0\n    if num == 0:\n        return 1\n    count = 0\n    while num:\n        num \/\/= 10\n        count += 1\n    return count"
    },
    {
        "id":356,
        "response":"import typing\n\ndef adjacent_num_product(list_nums: typing.List[int]) -> typing.Optional[int]:\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "id":357,
        "response":"import typing\n\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef is_balanced(root: typing.Optional[TreeNode]) -> bool:\n    if root is None:\n        return True\n    stack = [(root, False)]\n    heights: dict[TreeNode, int] = {}\n    while stack:\n        node, visited = stack.pop()\n        if node is None:\n            continue\n        if visited:\n            left_height = heights.get(node.left, 0)\n            right_height = heights.get(node.right, 0)\n            if abs(left_height - right_height) > 1:\n                return False\n            heights[node] = max(left_height, right_height) + 1\n        else:\n            stack.append((node, True))\n            if node.right:\n                stack.append((node.right, False))\n            if node.left:\n                stack.append((node.left, False))\n    return True"
    },
    {
        "id":358,
        "response":"import typing\n\ndef repeat_tuples(test_tup: tuple, N: int) -> tuple:\n    return test_tup * N"
    },
    {
        "id":359,
        "response":"import typing\n\ndef lateralsurface_cuboid(l: float, w: float, h: float) -> float:\n    return 2 * l * h + 2 * w * h"
    },
    {
        "id":360,
        "response":"from typing import Tuple, Any\n\ndef float_sort(price: Tuple[Any, ...]) -> float:\n    for item in price:\n        if isinstance(item, float):\n            return item\n    return 0.0"
    },
    {
        "id":361,
        "response":"import bisect\nfrom typing import List, Optional\n\ndef smallest_missing(A: List[int], left_element: int, right_element: int) -> Optional[int]:\n    if left_element > right_element:\n        return None\n    left_idx = bisect.bisect_left(A, left_element)\n    right_idx = bisect.bisect_right(A, right_element)\n    if left_idx == right_idx:\n        return left_element\n    low = left_element\n    high = right_element\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        count = bisect.bisect_right(A, mid, left_idx, right_idx) - bisect.bisect_left(A, left_element, left_idx, right_idx)\n        expected = mid - left_element + 1\n        if count < expected:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low if low <= right_element else None"
    },
    {
        "id":362,
        "response":"from typing import List\n\ndef heap_assending(nums: List[int]) -> List[int]:\n    n = len(nums)\n    if n <= 1:\n        return nums\n    def heapify(arr: List[int], size: int, root: int) -> None:\n        largest = root\n        while True:\n            left = 2 * root + 1\n            right = left + 1\n            if left < size and arr[left] > arr[largest]:\n                largest = left\n            if right < size and arr[right] > arr[largest]:\n                largest = right\n            if largest == root:\n                break\n            arr[root], arr[largest] = arr[largest], arr[root]\n            root = largest\n    for i in range(n \/\/ 2 - 1, -1, -1):\n        heapify(nums, n, i)\n    for end in range(n - 1, 0, -1):\n        nums[0], nums[end] = nums[end], nums[0]\n        heapify(nums, end, 0)\n    return nums"
    },
    {
        "id":363,
        "response":"import typing\n\ndef area_cube(side: float) -> float:\n    return 6 * side * side"
    },
    {
        "id":364,
        "response":""
    },
    {
        "id":365,
        "response":"import math\n\ndef round_num(n, m):\n    if m == 0:\n        raise ValueError(\"Multiplier must not be zero\")\n    return round(n \/ m) * m"
    },
    {
        "id":366,
        "response":""
    },
    {
        "id":367,
        "response":"import typing\n\ndef remove_Char(s: str, c: str) -> str:\n    if s is None or c is None:\n        return s\n    return ''.join(ch for ch in s if ch not in c)"
    },
    {
        "id":368,
        "response":"import typing\n\ndef move_first(test_list: list) -> list:\n    if len(test_list) > 1:\n        test_list.insert(0, test_list.pop())\n    return test_list"
    },
    {
        "id":369,
        "response":"import typing\n\ndef surfacearea_cube(side: float) -> float:\n    return 6 * side * side"
    },
    {
        "id":370,
        "response":"import typing\n\ndef multi_list(rownum: int, colnum: int) -> list[list[int]]:\n    if rownum <= 0 or colnum <= 0:\n        return []\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]"
    },
    {
        "id":371,
        "response":"import typing\n\ndef index_on_inner_list(list_data: typing.List[typing.Any], index_no: int) -> typing.Any:\n    if not isinstance(list_data, list):\n        raise TypeError(\"list_data must be a list\")\n    if not isinstance(index_no, int"
    },
    {
        "id":372,
        "response":"import typing\n\ndef find_rotation_count(A: typing.List[int]) -> int:\n    if not A:\n        return 0\n    low, high = 0, len(A) - 1\n    while low < high:\n        mid = low + (high - low) \/\/ 2\n        if A[mid] > A[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low"
    },
    {
        "id":373,
        "response":""
    },
    {
        "id":374,
        "response":"from typing import List\n\ndef frequency_Of_Smallest(n: int, arr: List[int]) -> int:\n    if not arr:\n        return 0\n    smallest = min(arr)\n    return arr.count(smallest)"
    },
    {
        "id":375,
        "response":"import typing\n\ndef get_perrin(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c = 3, 0, 2\n    for _ in range(3, n + 1):\n        a, b, c = b, c, b + a\n    return c"
    },
    {
        "id":376,
        "response":""
    },
    {
        "id":377,
        "response":"import typing\n\ndef even_or_odd(N: typing.List[int]) -> str:\n    if len(N) < 16:\n        raise ValueError(\"List must contain at least 16 elements\")\n    num = N[15]\n    return \"odd\" if num % 2 else \"even\""
    },
    {
        "id":378,
        "response":"def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":379,
        "response":"import typing\n\ndef find_lucas(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
    },
    {
        "id":380,
        "response":"import typing\n\ndef add_string(lst: typing.List[typing.Any], string: typing.Any) -> typing.List[typing.Any]:\n    if not isinstance(lst, list):\n        return lst\n    prefix = str(string)\n    for i, item in enumerate(lst):\n        lst[i] = prefix + str(item)\n    return lst"
    },
    {
        "id":381,
        "response":"import typing\n\ndef convert_list_dictionary(l1: typing.List[typing.Any], l2: typing.List[typing.Any], l3: typing.List[typing.Any]) -> dict:\n    result: dict = {}\n    for k1, k2, k3 in zip(l1, l2, l3):\n        if k1 not in result:\n            result[k1] = {}\n        result[k1][k2] = k3\n    return result"
    },
    {
        "id":382,
        "response":"```python\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return max(n, get_max_sum(n \/\/ 2) + get_max_sum(n \/\/ 3) + get_max_sum(n \/\/ 4) + get_max_sum(n \/\/ 5))\n```"
    },
    {
        "id":383,
        "response":"import typing\n\ndef max_length_list(input_list: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if not input_list:\n        return []\n    max_len = max(map(len, input_list))\n    return list(filter(lambda x: len(x) == max_len, input_list))"
    },
    {
        "id":384,
        "response":"from typing import Tuple, Any\n\ndef check_distinct(test_tup: Tuple[Any, ...]) -> bool:\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"import collections\n\ndef first_non_repeating_character(str1):\n    counts = collections.Counter(str1)\n    for ch in str1:\n        if counts[ch] == 1:\n            return ch\n    return None"
    },
    {
        "id":386,
        "response":"from typing import Any\n\ndef check_char(string: str) -> bool:\n    if not string:\n        return False\n    return string[0] == string[-1]"
    },
    {
        "id":387,
        "response":"import typing\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    return (a + b + c) \/ 3.0"
    },
    {
        "id":388,
        "response":"from typing import List\n\ndef sum_of_digits(nums: List[int]) -> List[int]:\n    return [sum(int(d) for d in str(abs(n))) for n in nums]"
    },
    {
        "id":389,
        "response":"import typing\n\ndef bitwise_xor(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of same length\")\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"import collections\n\ndef extract_freq(test_list):\n    freq = collections.Counter()\n    for t in test_list:\n        freq[tuple(sorted(t))] += 1\n    return dict(freq)"
    },
    {
        "id":391,
        "response":""
    },
    {
        "id":392,
        "response":""
    },
    {
        "id":393,
        "response":"import re\nfrom urllib.parse import urlparse\n\ndef is_valid_URL(str):\n    try:\n        result = urlparse(str)\n        if result.scheme not in ('http', 'https', 'ftp'):\n            return False\n        if not result.netloc:\n            return False\n        return True\n    except Exception:\n        return False"
    },
    {
        "id":394,
        "response":"def minimum(a, b):\n    return a if a < b else b"
    },
    {
        "id":395,
        "response":"from typing import Any, Tuple\n\ndef check_tuplex(tuplex: Any, tuple1: Tuple[Any, ...]) -> bool:\n    return tuplex in tuple1"
    },
    {
        "id":396,
        "response":"import typing\n\ndef find_Parity(x: int) -> str:\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer\")\n    return \"Even\" if x % 2 == 0 else \"Odd\""
    },
    {
        "id":397,
        "response":"import typing\n\ndef rearrange_bigger(n: int) -> int:\n    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i < 0:\n        return -1\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i], s[j] = s[j], s[i]\n    s[i + 1:] = reversed(s[i + 1:])\n    return int(''.join(s))"
    },
    {
        "id":398,
        "response":"import heapq\nfrom typing import List, Tuple\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[Tuple[int, int]]:\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    heap: List[Tuple[int, int, int]] = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    result: List[Tuple[int, int]] = []\n    while heap and len(result) < k:\n        sum_val, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return result"
    },
    {
        "id":399,
        "response":""
    },
    {
        "id":400,
        "response":"import typing\n\ndef min_val(listval: typing.List[typing.Any]) -> typing.Any:\n    if not listval:\n        raise ValueError(\"min_val() arg is an empty sequence\")\n    return min(listval)"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word: str) -> str:\n    if not word:\n        return word\n    return re.sub(r'_(.)', lambda m: m.group(1).upper(), word)"
    },
    {
        "id":402,
        "response":"import typing\n\ndef remove_odd(l: typing.List[int]) -> typing.List[int]:\n    l[:] = [x for x in l if x % 2 == 0]\n    return l"
    },
    {
        "id":403,
        "response":"import typing\n\ndef extract_nth_element(list1: typing.List[typing.Tuple], n: int) -> typing.List[typing.Any]:\n    result = []\n    for t in list1:\n        try:\n            result.append(t[n])\n        except Exception:\n            result.append(None)\n    return result"
    },
    {
        "id":404,
        "response":"import typing\n\ndef exists(seq: typing.Iterable[typing.Any], value: typing.Any) -> bool:\n    if seq is None:\n        return False\n    try:\n        return value in seq\n    except TypeError:\n        return False"
    },
    {
        "id":405,
        "response":"import typing\n\ndef max_Product(arr: typing.List[int]) -> typing.Optional[typing.Tuple[int, int]]:\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    prod1 = max1 * max2\n    prod2 = min1 * min2\n    if prod1 >= prod2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"
    },
    {
        "id":406,
        "response":"import typing\n\ndef breakSum(n: int) -> int:\n    if n < 0:\n        n = -n\n    total = 0\n    while n:\n        total += n % 3\n        n \/\/= 3\n    return total"
    },
    {
        "id":407,
        "response":"import typing\n\ndef group_tuples(Input: list[tuple]) -> typing.Any:\n    if not Input:\n        return None\n    first = Input[0][0] if Input[0] else None\n    for tup in Input:\n        if not tup or tup[0] != first:\n            return None\n    return first"
    },
    {
        "id":408,
        "response":""
    },
    {
        "id":409,
        "response":"import typing\n\ndef round_and_sum(list1: typing.List[float]) -> float:\n    if not list1:\n        return 0\n    total = sum(round(x) for x in list1)\n    return total * len(list1)"
    },
    {
        "id":410,
        "response":"import math\n\ndef sum_of_squares(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) \/\/ 6"
    },
    {
        "id":411,
        "response":"from typing import Tuple, Any\n\ndef concatenate_tuple(test_tup: Tuple[Any, ...], delimiter: str = ',') -> str:\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "id":412,
        "response":"import typing\n\ndef find_Average_Of_Squares(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    return (n + 1) * (2 * n + 1) \/ 6.0"
    },
    {
        "id":413,
        "response":"import sys\n\ndef get_maxgold(gold, m, n):\n    if m == 0 or n == 0:\n        return 0\n    dp = [0] * m\n    for j in range(n - 1, -1, -1):\n        newdp = [0] * m\n        for i in range(m):\n            right = dp[i]\n            right_up = dp[i - 1] if i > 0 else 0\n            right_down = dp[i + 1] if i < m - 1 else 0\n            newdp[i] = gold[i][j] + max(right, right_up, right_down)\n        dp = newdp\n    return max(dp)"
    },
    {
        "id":414,
        "response":"import typing\n\ndef extract_rear(test_tuple: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return tuple(s[-1] if s else '' for s in test_tuple)"
    },
    {
        "id":415,
        "response":"import typing\n\ndef count_element_in_list(list1: typing.List[typing.Any], x: typing.Any) -> int:\n    count = 0\n    last_x_index = -1\n    for i, value in enumerate(list1):\n        if value == x:\n            last_x_index = i\n        count += i - last_x_index\n    return count"
    },
    {
        "id":416,
        "response":"def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt: str) -> str:\n    if not isinstance(dt, str):\n        raise TypeError(\"Input must be a string\")\n    match = re.match(r'^(\\d{4})-(\\d{2})-(\\d{2})$', dt)\n    if not match:\n        raise ValueError(\"Date must be in yyyy-mm-dd format\")\n    return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\""
    },
    {
        "id":418,
        "response":"import typing\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list"
    },
    {
        "id":419,
        "response":""
    },
    {
        "id":420,
        "response":"import typing\n\ndef parabola_directrix(a: float, b: float, c: float) -> typing.Optional[float]:\n    if a == 0:\n        return None\n    h = -b \/ (2 * a)\n    k = a * h * h + b * h + c\n    return k - 1 \/ (4 * a)"
    },
    {
        "id":421,
        "response":"def common_element(list1, list2):\n    try:\n        s1 = set(list1)\n        for elem in list2:\n            if elem in s1:\n                return True\n        return False\n    except TypeError:\n        for a in list1:\n            for b in list2:\n                if a == b:\n                    return True\n        return False"
    },
    {
        "id":422,
        "response":"import typing\n\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":"import typing\n\ndef check_greater(arr: typing.List[typing.Any], number: typing.Any) -> bool:\n    if arr is None:\n        raise ValueError(\"arr cannot be None\")\n    try:\n        return all(number > x for x in arr)\n    except TypeError:\n        raise TypeError(\"Elements and number must be comparable\")"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    if not isinstance(text, str):\n        return False\n    return bool(re.search(r'b+', text))"
    },
    {
        "id":425,
        "response":"import typing\n\ndef last_Digit(n: int) -> int:\n    return abs(n) % 10"
    },
    {
        "id":426,
        "response":"import typing\n\ndef neg_nos(list1: typing.List[int]) -> typing.List[int]:\n    for num in list1:\n        if num < 0:\n            print(num)\n    return list1"
    },
    {
        "id":427,
        "response":"import typing\n\ndef remove_odd(str1: str) -> str:\n    return str1[::2]"
    },
    {
        "id":428,
        "response":"import typing\n\ndef count_bidirectional(test_list: typing.List[typing.Tuple[typing.Any, typing.Any]]) -> int:\n    seen = set(test_list)\n    counted = set()\n    count = 0\n    for a, b in seen:\n        rev = (b, a)\n        if rev in seen and (a, b) not in counted and (b, a) not in counted:\n            count += 1\n            counted.add((a, b))\n            counted.add((b, a))\n    return count"
    },
    {
        "id":429,
        "response":"import typing\n\ndef multiple_to_single(L: typing.List[int]) -> int:\n    if not L:\n        return 0\n    return int(''.join(str(x) for x in L))"
    },
    {
        "id":430,
        "response":""
    },
    {
        "id":431,
        "response":"from typing import Union\n\ndef surfacearea_cube(l: Union[int, float]) -> float:\n    if l < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    return 6 * l * l"
    },
    {
        "id":432,
        "response":"import typing\n\ndef positive_count(nums: typing.List[int]) -> float:\n    total = len(nums)\n    if total == 0:\n        return 0.0\n    positives = sum(1 for n in nums if n > 0)\n    return positives \/ total"
    },
    {
        "id":433,
        "response":"import typing\n\ndef largest_neg(list1: typing.List[float]) -> typing.Optional[float]:\n    negatives = [x for x in list1 if isinstance(x, (int, float)) and x < 0]\n    return max(negatives) if negatives else None"
    },
    {
        "id":434,
        "response":"import typing\n\ndef trim_tuple(test_list: typing.List[typing.Any], K: int) -> typing.List[typing.Any]:\n    if K <= 0:\n        return test_list\n    result: typing.List[typing.Any] = []\n    for item in test_list:\n        if isinstance(item, tuple):\n            if K >= len(item):\n                result.append(())\n            else:\n                result.append(item[:-K])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":435,
        "response":"import typing\n\ndef index_multiplication(test_tup1: typing.Tuple[typing.Any, ...], test_tup2: typing.Tuple[typing.Any, ...]) -> typing.Tuple[typing.Any, ...]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":"import collections\n\ndef count_Occurrence(tup, lst):\n    counts = collections.Counter(tup)\n    return tuple(counts.get(item, 0) for item in lst)"
    },
    {
        "id":437,
        "response":"import typing\n\ndef cube_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x**3, nums))"
    },
    {
        "id":438,
        "response":"import math\n\ndef cal_sum(n: int) -> int:\n    if n < 2:\n        return 0\n    sieve = bytearray(b\"\\x01\") * (n + 1)\n    sieve[0:2] = b\"\\x00\\x00\"\n    limit = int(math.isqrt(n))\n    for p in range(2, limit + 1):\n        if sieve[p]:\n            step = p\n            start = p * p\n            sieve[start:n + 1:step] = b\"\\x00\" * ((n - start) \/\/ step + 1)\n    return sum(i for i, is_prime in enumerate(sieve) if is_prime)"
    },
    {
        "id":439,
        "response":"import typing\n\ndef check_Triangle(x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> bool:\n    area = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) \/ 2.0\n    return abs(area) > 1e-9"
    },
    {
        "id":440,
        "response":"from typing import List\n\ndef extract_string(str, l):\n    if not isinstance(str, list):\n        raise TypeError(\"First argument must be a list\")\n    if not isinstance(l, int):\n        raise TypeError(\"Second argument must be an integer\")\n    return [s for s in str if isinstance(s, str) and len(s) == l]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":""
    },
    {
        "id":443,
        "response":"import math\n\ndef sumofFactors(n: int) -> int:\n    if n <= 0:\n        return 0\n    def sum_mult(k: int) -> int:\n        m = (n - 1) \/\/ k\n        return k * m * (m + 1) \/\/ 2\n    return sum_mult(3) + sum_mult(5) - sum_mult(15)"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    if not isinstance(text, str):\n        return []\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    return pattern.findall(text)"
    },
    {
        "id":445,
        "response":"import typing\n\ndef check_monthnumb_number(monthnum2: typing.Union[int, str]) -> bool:\n    try:\n        month = int(monthnum2)\n    except (ValueError, TypeError):\n        return False\n    if 1 <= month <= 12:\n        return month in {1, 3, 5, 7, 8, 10, 12}\n    return False"
    },
    {
        "id":446,
        "response":"from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"import collections\n\ndef Find_Min(lst):\n    if not lst:\n        return []\n    unique_set = set(lst)\n    target_len = len(unique_set)\n    left = 0\n    min_len = float('inf')\n    min_window = (0, 0)\n    counts = collections.defaultdict(int)\n    formed = 0\n    for right, val in enumerate(lst):\n        counts[val] += 1\n        if counts[val] == 1:\n            formed += 1\n        while formed == target_len and left <= right:\n            window_len = right - left + 1\n            if window_len < min_len:\n                min_len = window_len\n                min_window = (left, right)\n            left_val = lst[left]\n            counts[left_val] -= 1\n            if counts[left_val] == 0:\n                formed -= 1\n            left += 1\n    start, end = min_window\n    return lst[start:end+1]"
    },
    {
        "id":448,
        "response":"import typing\n\ndef rectangle_area(l: float, b: float) -> float:\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    if not isinstance(str1, str):\n        return str1\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "id":450,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.List]) -> typing.List:\n    return [sub[0] for sub in lst if sub]"
    },
    {
        "id":451,
        "response":"import typing\n\ndef upper_ctr(s: str) -> int:\n    return sum(1 for c in s if c.isupper())"
    },
    {
        "id":452,
        "response":"import itertools\nfrom typing import List, Any\n\ndef combinations_list(list1: List[Any]) -> List[List[Any]]:\n    result: List[List[Any]] = []\n    n = len(list1)\n    for r in range(1, n + 1):\n        for combo in itertools.combinations(list1, r):\n            result.append(list(combo))\n    return result"
    },
    {
        "id":453,
        "response":"import typing\n\ndef max_subarray_product(arr: typing.List[int]) -> int:\n    if not arr:\n        return 0\n    max_prod = min_prod = overall = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_prod, min_prod = min_prod, max_prod\n        max_prod = max(num, max_prod * num)\n        min_prod = min(num, min_prod * num)\n        overall = max(overall, max_prod)\n    return overall"
    },
    {
        "id":454,
        "response":"import typing\n\ndef check_value(dict: typing.Dict[typing.Any, typing.Any], n: typing.Any) -> typing.Optional[typing.Dict[typing.Any, typing.Any]]:\n    if not dict:\n        return dict\n    values = set(dict.values())\n    return dict if len(values) == 1 else None"
    },
    {
        "id":455,
        "response":"import typing\n\ndef drop_empty(dict1: typing.Dict) -> typing.Dict:\n    if not isinstance(dict1, dict):\n        return dict1\n    for key, value in list(dict1.items()):\n        if value is None:\n            del dict1[key]\n        elif isinstance(value, (str, list, dict, set, tuple)) and len(value) == 0:\n            del dict1[key]\n    return dict1"
    },
    {
        "id":456,
        "response":"import typing\n\ndef find_peak_util(arr: typing.List[int], low: int, high: int, n: int) -> typing.Optional[int]:\n    if n == 0:\n        return None\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        left_ok = (mid == 0) or (arr[mid] >= arr[mid - 1])\n        right_ok = (mid == n - 1) or (arr[mid] >= arr[mid + 1])\n        if left_ok and right_ok:\n            return arr[mid]\n        if mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None"
    },
    {
        "id":457,
        "response":"import typing\n\ndef decimal_to_Octal(deciNum: int) -> str:\n    if deciNum == 0:\n        return \"0\"\n    sign = \"-\" if deciNum < 0 else \"\"\n    n = abs(deciNum)\n    digits = []\n    while n > 0:\n        digits.append(str(n % 8))\n        n \/\/= 8\n    return sign + \"\".join(reversed(digits))"
    },
    {
        "id":458,
        "response":""
    },
    {
        "id":459,
        "response":"import typing\n\ndef max_profit(price: typing.List[int], k: int) -> int:\n    n = len(price)\n    if n == 0 or k == 0:\n        return 0\n    if k >= n \/\/ 2:\n        profit = 0\n        for i in range(1, n):\n            if price[i] > price[i - 1]:\n                profit += price[i] - price[i - 1]\n        return profit\n    dp_prev = [0] * (k + 1)\n    dp_curr = [0] * (k + 1)\n    for i in range(1, n):\n        max_diff = -price[0]\n        for j in range(1, k + 1):\n            dp_curr[j] = max(dp_curr[j - 1], price[i] + max_diff)\n            max_diff = max(max_diff, dp_prev[j] - price[i])\n        dp_prev, dp_curr = dp_curr, dp_prev\n    return dp_prev[k]"
    },
    {
        "id":460,
        "response":"import typing\n\ndef add_pairwise(test_tup: typing.Tuple[typing.Tuple[int, ...], ...]) -> typing.Tuple[int, ...]:\n    return tuple(sum(inner) for inner in test_tup)"
    },
    {
        "id":461,
        "response":"import typing\n\ndef find_remainder(arr: typing.List[int], lens: int, n: int) -> typing.List[int]:\n    if lens <= 0 or lens > len(arr) or n == 0:\n        return []\n    current_sum = sum(arr[:lens])\n    if current_sum % n == 0:\n        return arr[:lens]\n    for i in range(lens, len(arr)):\n        current_sum += arr[i] - arr[i - lens]\n        if current_sum % n == 0:\n            return arr[i - lens + 1:i + 1]\n    return []"
    },
    {
        "id":462,
        "response":"import typing\n\ndef check_Consecutive(l: typing.List[int]) -> bool:\n    if not l or len(l) < 2:\n        return False\n    s = set(l)\n    for x in s:\n        if x + 1 in s or x - 1 in s:\n            return True\n    return False"
    },
    {
        "id":463,
        "response":"import typing\n\ndef tuple_intersection(test_list1: typing.List[tuple], test_list2: typing.List[tuple]) -> typing.List[tuple]:\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return [t for t in test_list1 if tuple(sorted(t)) in set2]"
    },
    {
        "id":464,
        "response":"import typing\n\ndef replace_char(str1: typing.Any, ch: typing.Any, newch: typing.Any) -> str:\n    if str1 is None:\n        return ''\n    if not isinstance(str1, str):\n        str1 = str(str1)\n    if ch is None:\n        return str1\n    if newch is None:\n        newch = ''\n    if not isinstance(ch, str):\n        ch = str(ch)\n    if not isinstance(newch, str):\n        newch = str(newch)\n    if ch == '':\n        return str1\n    return str1.replace(ch, newch)"
    },
    {
        "id":465,
        "response":"import typing\n\ndef sort_counter(dict1: typing.Dict[str, int]) -> typing.Dict[str, int]:\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))"
    },
    {
        "id":466,
        "response":"import typing\n\ndef big_sum(nums: typing.List[float]) -> float:\n    if not nums:\n        return 0\n    return min(nums) + max(nums)"
    },
    {
        "id":467,
        "response":"def is_lower(string: str) -> str:\n    return string.lower()"
    },
    {
        "id":468,
        "response":"import re\n\ndef remove_lowercase(str1: str) -> str:\n    threshold = 3\n    words = re.split(r'\\s+', str1.strip())\n    if words == ['']:\n        return ''\n    filtered = [w for w in words if len(w) > threshold]\n    return ' '.join(filtered)"
    },
    {
        "id":469,
        "response":"import typing\n\ndef first_Digit(n: int) -> int:\n    n = abs(n)\n    if n == 0:\n        return 0\n    while n >= 10:\n        n \/\/= 10\n    return n"
    },
    {
        "id":470,
        "response":"import collections\n\ndef get_max_occuring_char(str1: str) -> str:\n    if not str1:\n        return ''\n    counter = collections.Counter(str1)\n    max_count = max(counter.values())\n    most_common_chars = [char for char, count in counter.items() if count == max_count]\n    return ''.join(sorted(most_common_chars))"
    },
    {
        "id":471,
        "response":"import typing\n\ndef is_subset_sum(arr: typing.List[int], n: int, target: int) -> bool:\n    arr = arr[:n]\n    sums = {0}\n    for num in arr:\n        new_sums = {s + num for s in sums}\n        sums |= new_sums\n    return target in sums"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text: str) -> list[str]:\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    return re.findall(r'[A-Z]([a-z]+)', text)"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    if x <= 0:\n        raise ValueError(\"x must be a positive integer\")\n    if x == 1:\n        return 1\n    def prime_factors(n: int):\n        factors = {}\n        d = 2\n        while d * d <= n:\n            while n % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                n \/\/= d\n            d += 1 if d == 2 else 2\n        if n > 1:\n            factors[n] = factors.get(n, 0) + 1\n        return factors\n    factors = prime_factors(x)\n    def min_n_for_prime(p: int, e: int):\n        low, high = 1, p * e\n        while low < high:\n            mid = (low + high) \/\/ 2\n            count = 0\n            power = p\n            while power <= mid:\n                count += mid \/\/ power\n                if power > mid \/\/ p:\n                    break\n                power *= p\n            if count >= e:\n                high = mid\n            else:\n                low = mid + 1\n        return low\n    result = 0\n    for p, e in factors.items():\n        result = max(result, min_n_for_prime(p, e))\n    return result"
    },
    {
        "id":474,
        "response":"from typing import Tuple, Any\n\ndef remove_matching_tuple(test_list1: Tuple[Any, ...], test_list2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(x for x in test_list1 if x not in test_list2)"
    },
    {
        "id":475,
        "response":"import re\nfrom typing import List, Optional\n\ndef is_palindrome(n: int) -> bool:\n    if n < 0:\n        return False\n    s = str(n)\n    return s == s[::-1]\n\ndef find_largest_palindrome(nums: List[int]) -> Optional[int]:\n    max_pal = None\n    for num in nums:\n        if is_palindrome(num):\n            if max_pal is None or num > max_pal:\n                max_pal = num\n    return max_pal"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n: int, r: int) -> float:\n    if n < 0 or r < 0 or r > n:\n        return 0.0\n    return math.comb(n, r) \/ (2 ** n)"
    },
    {
        "id":477,
        "response":"import typing\n\ndef sort_tuple(tup: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    return sorted(tup, key=lambda x: x[-1] if x else float(\"-inf\"))"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    if a is None:\n        raise TypeError(\"Input cannot be None\")\n    try:\n        side = float(a)\n    except (TypeError, ValueError):\n        raise TypeError(\"Input must be a number\")\n    if side < 0:\n        return 0.0\n    return (5 * side * side) \/ (4 * math.tan(math.pi \/ 5))"
    },
    {
        "id":479,
        "response":"def frequency_Of_Largest(n, arr):\n    if not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)"
    },
    {
        "id":480,
        "response":"import typing\n\ndef extract_symmetric(test_list: typing.List[tuple]) -> typing.List[tuple]:\n    pair_set = set(test_list)\n    result = []\n    for pair in test_list:\n        if len(pair) != 2:\n            continue\n        rev = (pair[1], pair[0])\n        if rev in pair_set:\n            result.append(pair)\n    return result"
    },
    {
        "id":481,
        "response":"import math\n\ndef sum_gp(a, n, r):\n    if n <= 0:\n        return 0\n    if r == 1:\n        return a * n\n    return a * (1 - r**n) \/ (1 - r)"
    },
    {
        "id":482,
        "response":"import typing\n\ndef binary_search(item_list: typing.List[typing.Any], item: typing.Any) -> int:\n    left = 0\n    right = len(item_list) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        mid_val = item_list[mid]\n        if mid_val == item:\n            return mid\n        if mid_val < item:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "id":483,
        "response":"import math\nfrom typing import List\n\ndef calculate_polygons(startx: float, starty: float, endx: float, endy: float, radius: float) -> List[List[float]]:\n    if radius <= 0:\n        return []\n    vertices: List[List[float]] = []\n    for i in range(6):\n        angle = math.pi \/ 3 * i\n        x = startx + radius * math.cos(angle)\n        y = starty + radius * math.sin(angle)\n        vertices.append([x, y])\n    return vertices"
    },
    {
        "id":484,
        "response":"import typing\n\ndef binary_to_integer(test_tup: typing.Tuple[int, ...]) -> int:\n    result = 0\n    for bit in test_tup:\n        if bit not in (0, 1):\n            raise ValueError(\"Input contains non-binary values\")\n        result = (result << 1) | bit\n    return result"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\nfrom typing import List, Optional\n\ndef heap_queue_smallest(nums: List[int], n: int) -> Optional[int]:\n    if not nums:\n        return None\n    heap = list(nums)\n    heapq.heapify(heap)\n    return heapq.heappop(heap)"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"r and h must be non-negative\")\n    slant = math.sqrt(r * r + h * h)\n    return math.pi * r * slant"
    },
    {
        "id":488,
        "response":"import typing\n\ndef gcd(x: int, y: int) -> int:\n    x, y = abs(x), abs(y)\n    while y:\n        x, y = y, x % y\n    return x"
    },
    {
        "id":489,
        "response":"import typing\n\ndef diameter_circle(r: float) -> float:\n    return r \/ 2.0"
    },
    {
        "id":490,
        "response":"import re\nimport typing\nimport itertools\n\ndef concatenate_elements(list):\n    if list is None:\n        return ''\n    return ''.join(map(str, list))"
    },
    {
        "id":491,
        "response":"import typing\n\ndef min_cost(cost: typing.List[typing.List[int]], m: int, n: int) -> typing.Optional[int]:\n    if not cost or m < 0 or n < 0:\n        return None\n    rows, cols = len(cost), len(cost[0])\n    if m >= rows or n >= cols:\n        return None\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, rows):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"import typing\n\ndef similar_elements(test_tup1: typing.Tuple, test_tup2: typing.Tuple) -> typing.Tuple:\n    set2 = set(test_tup2)\n    return tuple(x for x in test_tup1 if x in set2)"
    },
    {
        "id":493,
        "response":"import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += w\n        w = 6 - w\n    return False"
    },
    {
        "id":494,
        "response":"import heapq\nfrom typing import List, Optional\n\ndef heap_queue_largest(nums: List[int], n: int) -> Optional[int]:\n    if not nums or n <= 0:\n        return None\n    sublist = nums[:n]\n    return heapq.nlargest(1, sublist)[0] if sublist else None"
    },
    {
        "id":495,
        "response":"import typing\n\ndef count_ways(n: int) -> int:\n    if n < 0:\n        return 0\n    if n % 2 == 1:\n        return 0\n    f = [0] * (n + 1)\n    f[0] = 1\n    if n >= 2:\n        f[2] = 3\n    for i in range(4, n + 1, 2):\n        f[i] = 4 * f[i - 2] - f[i - 4]\n    return f[n]"
    },
    {
        "id":496,
        "response":"import typing\n\ndef differ_by_one_bit(a: int, b: int) -> bool:\n    xor = a ^ b\n    return xor != 0 and (xor & (xor - 1)) == 0"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"import typing\n\ndef square_nums(nums: typing.List[float]) -> typing.List[float]:\n    return list(map(lambda x: x * x, nums))"
    },
    {
        "id":499,
        "response":""
    },
    {
        "id":500,
        "response":"import typing\n\ndef small_nnum(list1: typing.List[typing.Any], n: int) -> typing.List[typing.Any]:\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n <= 0:\n        return []\n    return sorted(list1)[:n]"
    }
]