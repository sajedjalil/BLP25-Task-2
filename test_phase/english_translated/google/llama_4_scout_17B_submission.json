[
    {
        "id":1,
        "response":"```python\ndef remove_Occ(s, ch):\n    import re\n    first_occ = re.search(ch, s)\n    last_occ = re.search(ch + '(?!.*' + ch + ')', s)\n    \n    if first_occ and last_occ:\n        first_index = first_occ.start()\n        last_index = last_occ.start()\n        return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    elif first_occ:\n        return s[:first_occ.start()] + s[first_occ.start() + 1:]\n    elif last_occ:\n        return s[:last_occ.start()] + s[last_occ.start() + 1:]\n    else:\n        return s\n```"
    },
    {
        "id":2,
        "response":"```python\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    return sorted(M, key=sum)\n```"
    },
    {
        "id":3,
        "response":"```python\nfrom collections import Counter\nfrom typing import Dict, List\n\ndef count_common(words: List[str]) -> Dict[str, int]:\n    word_counts = Counter(words)\n    return dict(word_counts)\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]\nprint(count_common(words))\n```"
    },
    {
        "id":4,
        "response":"```python\nimport math\n\ndef find_Volume(l, b, h):\n    return 0.5 * l * b * h\n```"
    },
    {
        "id":5,
        "response":"```python\nimport re\ndef split_lowerstring(text):\n    return re.sub('([A-Z])', r' \\1', text).strip().lower().split()\n```"
    },
    {
        "id":6,
        "response":"```python\nimport re\n\ndef text_lowercase_underscore(text):\n    return re.sub(r'[^a-z0-9]+', '_', text).lower().strip('_')\n```"
    },
    {
        "id":7,
        "response":"```python\ndef square_perimeter(a: int) -> int:\n    return 4 * a\n```"
    },
    {
        "id":8,
        "response":"```python\nfrom typing import List\n\ndef str_to_list(string: str) -> List[str]:\n    return list(string)\n```"
    },
    {
        "id":9,
        "response":"```python\nfrom typing import List\n\ndef find_duplicate(nums: List[int]) -> List[int]:\n    num_set = set()\n    duplicates = set()\n    for num in nums:\n        if num in num_set:\n            duplicates.add(num)\n        num_set.add(num)\n    return list(duplicates)\n\ndef test_duplicate(arraynums):\n    return find_duplicate(arraynums)\n```"
    },
    {
        "id":10,
        "response":"```python\nimport math\n\ndef is_woodall(x: int) -> bool:\n    n = 1\n    while True:\n        woodall_num = n * (2**n - 1)\n        if woodall_num == x:\n            return True\n        elif woodall_num > x:\n            return False\n        n += 1\n```"
    },
    {
        "id":11,
        "response":"```python\nimport math\n\ndef multiples_of_num(m, n):\n    return [i for i in range(m, n*m+1) if i % m == 0]\n```"
    },
    {
        "id":12,
        "response":"```python\nfrom typing import List\n\ndef find_first_duplicate(nums: List[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n```"
    },
    {
        "id":13,
        "response":"```python\nfrom typing import List\n\ndef maximum_Sum(list1: List[List[int]]) -> int:\n    return max(sum(sublist) for sublist in list1)\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(maximum_Sum(list1))\n```"
    },
    {
        "id":14,
        "response":"```python\ndef binary_to_decimal(binary: str) -> int:\n    try:\n        return int(binary, 2)\n    except ValueError:\n        return None\n```"
    },
    {
        "id":15,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef find_Product(arr: List[int], n: int) -> int:\n    count = Counter(arr)\n    product = 1\n    for num in count:\n        if count[num] == 1:\n            product *= num\n    return product\n```"
    },
    {
        "id":16,
        "response":"```python\nfrom typing import List, Tuple\n\ndef check_k_elements(test_list: List[Tuple], K: int) -> List[Tuple]:\n    if len(test_list) == K:\n        return test_list\n    else:\n        return []\n```"
    },
    {
        "id":17,
        "response":"```python\nimport re\nfrom typing import List\n\ndef remove(lst: List[str]) -> List[str]:\n    return [re.sub('\\d', '', s) for s in lst]\n```"
    },
    {
        "id":18,
        "response":"```python\nimport math\n\ndef binomial_coeff(n, k):\n    if k > n - k:\n        k = n - k\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(k):\n        result = result * (n - i) \/\/ (i + 1)\n    return result\n\n# Alternatively, you can use math.comb for Python 3.8 and above\ndef binomial_coeff_math(n, k):\n    return math.comb(n, k)\n\nprint(binomial_coeff(5, 2))  \nprint(binomial_coeff_math(5, 2))\n```"
    },
    {
        "id":19,
        "response":"```python\nfrom typing import List\n\ndef get_Odd_Occurrence(arr: List[int], arr_size: int) -> int:\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    return -1\n```"
    },
    {
        "id":20,
        "response":"```python\nfrom typing import List\n\ndef count_substrings(s: str) -> int:\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1]:\n                count += 1\n    return count\n\n# Example usage:\nprint(count_substrings(\"abcba\"))\n```"
    },
    {
        "id":21,
        "response":"```python\nimport heapq\nfrom collections import Counter\n\ndef func(nums, k):\n    count = Counter(nums)\n    return heapq.nlargest(k, count.keys(), key=count.get)\n```"
    },
    {
        "id":22,
        "response":"```python\nimport math\n\ndef max_Prime_Factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return max(factors)\n```"
    },
    {
        "id":23,
        "response":"```python\ndef decimal_To_Binary(N: int) -> str:\n    if N == 0:\n        return '0'\n    result = ''\n    while N > 0:\n        result = str(N % 2) + result\n        N = N \/\/ 2\n    return result\n```"
    },
    {
        "id":24,
        "response":"```python\nimport numpy as np\n\ndef find_missing(ar, N):\n    expected_sum = N * (N + 1) \/\/ 2\n    actual_sum = sum(ar)\n    return expected_sum - actual_sum\n\n# Example usage:\nar = [1, 2, 4, 5]\nN = 5\nprint(find_missing(ar, N))\n```"
    },
    {
        "id":25,
        "response":"```python\ndef find_rect_num(n: int) -> int:\n    return n * (n + 1)\n```"
    },
    {
        "id":26,
        "response":"```python\nfrom typing import Tuple\n\ndef find_Nth_Digit(p: int, q: int, N: int) -> int:\n    dec = p \/ q\n    dec_str = str(dec)\n    if '.' not in dec_str:\n        return -1\n    dec_part = dec_str.split('.')[1]\n    if N > len(dec_part):\n        return -1\n    else:\n        return int(dec_part[N-1])\n```"
    },
    {
        "id":27,
        "response":"```python\nfrom typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    ints = sorted([i for i in mixed_list if isinstance(i, int)])\n    strs = sorted([i for i in mixed_list if isinstance(i, str)])\n    return ints + strs\n```"
    },
    {
        "id":28,
        "response":"```python\nfrom typing import List, Tuple\n\ndef div_even_odd(list1: List[int]) -> Tuple[List[int], List[int]]:\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2 != 0]\n    return even, odd\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6]\neven, odd = div_even_odd(list1)\nprint(\"Even numbers: \", even)\nprint(\"Odd numbers: \", odd)\n```"
    },
    {
        "id":29,
        "response":"```python\nimport collections\nimport heapq\n\ndef rearrange_string(S):\n    char_freq = collections.Counter(S)\n    max_freq = max(char_freq.values())\n    if max_freq > (len(S) + 1) \/\/ 2:\n        return \"\"\n\n    max_heap = [(-freq, char) for char, freq in char_freq.items()]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap:\n        freq1, char1 = heapq.heappop(max_heap)\n        if result and result[-1] == char1:\n            if not max_heap:\n                return \"\"\n            freq2, char2 = heapq.heappop(max_heap)\n            result.append(char2)\n            if freq2 < -1:\n                heapq.heappush(max_heap, (freq2 + 1, char2))\n            heapq.heappush(max_heap, (freq1, char1))\n        else:\n            result.append(char1)\n            if freq1 < -1:\n                heapq.heappush(max_heap, (freq1 + 1, char1))\n    return \"\".join(result)\n```"
    },
    {
        "id":30,
        "response":"```python\nfrom collections import Counter\nfrom typing import List\n\ndef freq_element(nums: List[int]) -> List[tuple]:\n    freq = Counter(nums)\n    return list(freq.items())\n\n# Example usage:\nnums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nprint(freq_element(nums))\n```"
    },
    {
        "id":31,
        "response":"```python\nfrom typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    even_filter = lambda x: x if x % 2 == 0 else None\n    return list(filter(lambda x: x is not None, map(even_filter, nums)))\n\n# Alternatively, more pythonic way\ndef filter_evennumbers_pythonic(nums: List[int]) -> List[int]:\n    return list(filter(lambda x: x % 2 == 0, nums))\n```"
    },
    {
        "id":32,
        "response":"```python\nfrom typing import List\n\ndef find_Sum(arr: List[int], n: int) -> int:\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    sum_duplicates = 0\n    for num, count in freq.items():\n        if count > 1:\n            sum_duplicates += num\n\n    return sum_duplicates\n```"
    },
    {
        "id":33,
        "response":"```python\nimport re\ndef text_match(text):\n    pattern = r'[a-z]+'\n    return re.findall(pattern, text)\n```"
    },
    {
        "id":34,
        "response":"```python\nimport re\ndef text_match_string(text):\n    pattern = r'^hello'\n    if re.match(pattern, text):\n        return text\n    else:\n        return None\n```"
    },
    {
        "id":35,
        "response":"```python\nimport math\n\ndef find_gcd(arr):\n    gcd = arr[0]\n    for num in arr[1:]:\n        gcd = math.gcd(gcd, num)\n    return gcd\n```"
    },
    {
        "id":36,
        "response":"```python\nfrom typing import List\n\ndef distinct_numbers(data: List[int]) -> bool:\n    return len(data) == len(set(data))\n```"
    },
    {
        "id":37,
        "response":"```python\nimport math\n\ndef compute_Last_Digit(A, B):\n    if B > A:\n        return 0\n    else:\n        A_factorial = math.factorial(A)\n        B_factorial = math.factorial(B)\n        result = A_factorial \/\/ B_factorial\n        return result % 10\n```"
    },
    {
        "id":38,
        "response":"```python\ndef odd_bit_set_number(n):\n    i = 1\n    while i < 32:\n        if i & n == 0:\n            n = n | i\n        i = i << 1\n    return n\n```"
    },
    {
        "id":39,
        "response":"```python\nfrom typing import List\n\ndef specified_element(nums: List[List[int]], N: int) -> List[int]:\n    return [sublist[N] for sublist in nums if len(sublist) > N]\n```"
    },
    {
        "id":40,
        "response":"```python\nfrom typing import List\n\ndef min_length_list(input_list: List[List]) -> List:\n    return min(input_list, key=len)\n```"
    },
    {
        "id":41,
        "response":"```python\ndef check_equilateral(x, y, z):\n    return x == y == z\n```"
    },
    {
        "id":42,
        "response":"```python\ndef parallelogram_area(b, h):\n    return b * h\n```"
    },
    {
        "id":43,
        "response":"```python\ndef check_Equality(s: str) -> bool:\n    import re\n    if not s:\n        return False\n    return bool(re.match(f'^(.).*\\\\1$', s))\n```"
    },
    {
        "id":44,
        "response":"```python\nfrom typing import List\n\ndef counting_sort(my_list: List[int]) -> List[int]:\n    if not my_list:\n        return my_list\n\n    min_val = min(my_list)\n    max_val = max(my_list)\n    count_len = max_val - min_val + 1\n    count = [0] * count_len\n\n    for num in my_list:\n        count[num - min_val] += 1\n\n    for i in range(1, count_len):\n        count[i] += count[i - 1]\n\n    sorted_list = [0] * len(my_list)\n    for num in my_list:\n        sorted_list[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n\n    return sorted_list\n```"
    },
    {
        "id":45,
        "response":"```python\ndef tn_gp(a, n, r):\n    return a * (r ** (n - 1))\n```"
    },
    {
        "id":46,
        "response":"```python\nimport math\n\ndef rev(num: int) -> int:\n    sign = -1 if num < 0 else 1\n    num *= sign\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num \/\/= 10\n    reversed_num *= sign\n\n    double_reversed_num = 2 * reversed_num\n    return 1 if double_reversed_num == num + 1 else 0\n```"
    },
    {
        "id":47,
        "response":"```python\nfrom itertools import permutations\n\ndef find_Max_Num(arr, n):\n    max_num = 0\n    for p in permutations(arr, n):\n        num = int(''.join(map(str, p)))\n        max_num = max(max_num, num)\n    return max_num\n\n# Alternatively, a more efficient solution\ndef find_Max_Num_Efficient(arr, n):\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n```"
    },
    {
        "id":48,
        "response":"```python\ndef opposite_Signs(x: int, y: int) -> bool:\n    import math\n    return math.copysign(1, x) != math.copysign(1, y)\n```"
    },
    {
        "id":49,
        "response":"```python\nimport math\n\ndef nth_octagonal(n):\n    return (n * (n + 1)) \/\/ 2 * 4 - n\n```"
    },
    {
        "id":50,
        "response":"```python\nfrom typing import List\n\ndef max_len_sub(arr: List[int], n: int) -> List[int]:\n    if n == 0:\n        return []\n\n    max_len = 1\n    curr_len = 1\n    max_sub = [arr[0]]\n    curr_sub = [arr[0]]\n\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) == 1:\n            curr_len += 1\n            curr_sub.append(arr[i])\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n                max_sub = curr_sub\n            curr_len = 1\n            curr_sub = [arr[i]]\n\n    if curr_len > max_len:\n        max_len = curr_len\n        max_sub = curr_sub\n\n    return max_sub\n```"
    },
    {
        "id":51,
        "response":"```python\nimport re\nfrom typing import List\n\ndef count_Substrings(s: str, n: int) -> int:\n    return len(re.findall(f'(?=\\\\d{{{n}}})', s))\n```"
    },
    {
        "id":52,
        "response":"```python\ndef smallest_num(xs: list[int]) -> int:\n    if not xs:\n        raise ValueError(\"List is empty\")\n    return min(xs)\n```"
    },
    {
        "id":53,
        "response":"```python\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for tup in test_list:\n        diff = max(tup) - min(tup)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n```"
    },
    {
        "id":54,
        "response":"```python\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n```"
    },
    {
        "id":55,
        "response":"```python\ndef recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# Example usage:\nprint(recursive_list_sum([1, 2, [3, 4], [5, [6, 7]]]))\n```"
    },
    {
        "id":56,
        "response":"```python\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for num in lst if num > 0)\n```"
    },
    {
        "id":57,
        "response":"```python\nimport math\n\ndef bell_number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n    return bell[n][0]\n\n# Example usage:\nprint(bell_number(3))  # Output: 5\n```"
    },
    {
        "id":58,
        "response":"```python\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n```"
    },
    {
        "id":59,
        "response":"```python\nfrom typing import List\n\ndef is_sublist(lst: List, sub: List) -> bool:\n    if not sub:\n        return True\n    if not lst:\n        return False\n    for i in range(len(lst)):\n        if lst[i:i+len(sub)] == sub:\n            return True\n    return False\n```"
    },
    {
        "id":60,
        "response":"```python\nfrom typing import List, Tuple\n\ndef find_equal_tuple(Input: List[Tuple], k: int) -> List[Tuple]:\n    return [t for t in Input if len(t) == k]\n```"
    },
    {
        "id":61,
        "response":"```python\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    def get_next_gap(gap: int) -> int:\n        gap = (gap * 10) \/\/ 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums\n```"
    },
    {
        "id":62,
        "response":"```python\nimport math\n\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if (n + i * i) % (2 * i) == 0 and math.sqrt((n + i * i) \/ (2 * i)) == int(math.sqrt((n + i * i) \/ (2 * i))):\n            return True\n    return False\n```"
    },
    {
        "id":63,
        "response":"```python\nimport re\ndef multiple_split(text):\n    return re.split(r'[;,|]+', text)\n```"
    },
    {
        "id":64,
        "response":"```python\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[List[int]]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n\n    color_map = {}\n    for i in range(len(patterns)):\n        pattern = tuple(patterns[i])\n        if pattern in color_map:\n            if color_map[pattern] != colors[i]:\n                return False\n        else:\n            if colors[i] in color_map.values():\n                return False\n            color_map[pattern] = colors[i]\n    return True\n```"
    },
    {
        "id":65,
        "response":"```python\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    return [tup for tup in test_list if all(i % K == 0 for i in tup)]\n```"
    },
    {
        "id":66,
        "response":"```python\nimport math\n\ndef count_Squares(m, n):\n    return m * n * (m + 1) * (n + 1) \/\/ 4\n```"
    },
    {
        "id":67,
        "response":"```python\ndef find_diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n    return abs(even_sum - odd_sum)\n```"
    },
    {
        "id":68,
        "response":"```python\ndef count_With_Odd_SetBits(n: int) -> int:\n    import math\n    return math.floor(n \/ 2) + n % 2\n```"
    },
    {
        "id":69,
        "response":"```python\ndef word_len(s: str) -> bool:\n    import re\n    return bool(re.match(r'^\\w{1,}[^aeiouAEIOU\\s\\d\\W]{1}$|^\\w{1}$', s)) if s else False\n```"
    },
    {
        "id":70,
        "response":"```python\ndef tetrahedral_number(n: int) -> int:\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return n * (n + 1) * (n + 2) \/\/ 6\n```"
    },
    {
        "id":71,
        "response":"```python\nimport typing\n\ndef zip_tuples(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":72,
        "response":"```python\nimport math\n\ndef volume_sphere(r: float) -> float:\n    if r < 0:\n        raise ValueError(\"\u09ac\u09cd\u09af\u09be\u09b8\u09be\u09b0\u09cd\u09a7 \u098b\u09a3\u09be\u09a4\u09cd\u09ae\u0995 \u09b9\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7 \u09a8\u09be\")\n    return (4\/3) * math.pi * (r ** 3)\n```"
    },
    {
        "id":73,
        "response":"```python\ndef get_Char(strr):\n    import string\n    sum = 0\n    for char in strr:\n        if char.isalpha():\n            sum += ord(char.lower()) - 96\n    remainder = sum % 26\n    if remainder == 0:\n        remainder = 26\n    return chr(remainder + 96)\n```"
    },
    {
        "id":74,
        "response":"```python\ndef sequence(n: int) -> int:\n    if n <= 0:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2) + sequence(n - 3)\n\n# However, please note that the above recursive solution is inefficient for large inputs due to repeated computations.\n# A more efficient solution would use dynamic programming.\n\ndef sequence_efficient(n: int) -> int:\n    import math\n    sqrt_5 = math.sqrt(5)\n    phi = (1 + sqrt_5) \/ 2\n    psi = (1 - sqrt_5) \/ 2\n    return round((phi**n - psi**n) \/ sqrt_5)\n```"
    },
    {
        "id":75,
        "response":"```python\nimport math\n\ndef surfacearea_sphere(r: float) -> float:\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 4 * math.pi * (r ** 2)\n```"
    },
    {
        "id":76,
        "response":"```python\ndef centered_hexagonal_number(n: int) -> int:\n    import math\n    return 1 + 6 * (n * (n - 1)) \/\/ 2\n```"
    },
    {
        "id":77,
        "response":"```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n```"
    },
    {
        "id":78,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef freq_count(input_list: List) -> dict:\n    freq_dict = dict(Counter(input_list))\n    return freq_dict\n\n# Example usage:\nlist1 = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nprint(freq_count(list1))\n```"
    },
    {
        "id":79,
        "response":"```python\nimport math\n\ndef closest_num(N):\n    return math.floor(N)\n```"
    },
    {
        "id":80,
        "response":"```python\nfrom typing import List\n\ndef len_log(list1: List[str]) -> int:\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n```"
    },
    {
        "id":81,
        "response":"```python\nfrom typing import List\n\ndef find_substring(string_list: List[str], sub_str: str) -> List[str]:\n    return [string for string in string_list if sub_str in string]\n\n# Example usage:\nstring_list = [\"Hello world\", \"Python programming\", \"Data science\"]\nsub_str = \"o\"\nprint(find_substring(string_list, sub_str))\n```"
    },
    {
        "id":82,
        "response":"```python\ndef is_undulating(n: int) -> bool:\n    digits = [int(d) for d in str(n)]\n    increasing = decreasing = True\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i + 1]:\n            increasing = False\n        if digits[i] < digits[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n```"
    },
    {
        "id":83,
        "response":"```python\nimport math\nfrom typing import Union\n\ndef power(a: Union[int, float], b: Union[int, float]) -> Union[int, float]:\n    return math.pow(a, b)\n```"
    },
    {
        "id":84,
        "response":"```python\nfrom typing import Tuple, List\n\ndef index_minimum(test_list: Tuple[int, ...]) -> Tuple[int, int]:\n    min_val = min(test_list)\n    indices = [i for i, x in enumerate(test_list) if x == min_val]\n    return min_val, indices\n\n# Example usage:\ntest_list = (5, 2, 9, 1, 7, 1, 3)\nprint(index_minimum(test_list))\n```"
    },
    {
        "id":85,
        "response":"```python\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List]) -> int:\n    return min(len(sublist) for sublist in lst if sublist)\n```"
    },
    {
        "id":86,
        "response":"```python\nimport math\n\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n```"
    },
    {
        "id":87,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef frequency_lists(list1: List) -> dict:\n    freq = Counter(list1)\n    return dict(freq)\n\n# Example usage:\nlist1 = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nprint(frequency_lists(list1))\n```"
    },
    {
        "id":88,
        "response":"```python\nimport math\nfrom typing import List\n\ndef multiply_num(numbers: List[float]) -> float:\n    product = math.prod(numbers)\n    length = len(numbers)\n    if length == 0:\n        return 0\n    return product \/ length\n```"
    },
    {
        "id":89,
        "response":"```python\ndef decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    result = ''\n    while n > 0:\n        result = str(n % 2) + result\n        n = n \/\/ 2\n    return result\n```"
    },
    {
        "id":90,
        "response":"```python\ndef next_smallest_palindrome(num: int) -> int:\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num: int) -> bool:\n    return str(num) == str(num)[::-1]\n```"
    },
    {
        "id":91,
        "response":"```python\ndef kth_element(arr, n, k):\n    if k > n or k < 1:\n        raise IndexError(\"k is out of range\")\n    arr.sort()\n    return arr[k-1]\n```"
    },
    {
        "id":92,
        "response":"```python\ndef snake_to_camel(word: str) -> str:\n    components = word.split('_')\n    return components[0] + ''.join(x.capitalize() for x in components[1:])\n```"
    },
    {
        "id":93,
        "response":"```python\nimport math\n\ndef eulerian_num(n, m):\n    if m == 0:\n        return 1 if n == 0 else 0\n    if n == 0 or m > n:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m + 1)\n\ndef eulerian_num_dp(n, m):\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n + 1):\n        for j in range(min(i, m) + 1):\n            if i > 0 and j > 0:\n                dp[i][j] = (i - j) * dp[i - 1][j] + (j + 1) * dp[i - 1][j + 1]\n    return dp[n][m]\n\ndef main():\n    n = 5\n    m = 2\n    print(eulerian_num_dp(n, m))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":94,
        "response":"```python\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return list(map(lambda x: sorted(x), input_list))\n```"
    },
    {
        "id":95,
        "response":"```python\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(1 for elem in lst if elem)\n```"
    },
    {
        "id":96,
        "response":"```python\nfrom typing import List, Tuple, Union\n\ndef add_lists(test_list: List[Union[int, float]], test_tup: Tuple[Union[int, float], ...]) -> List[Union[int, float]]:\n    test_list.extend(test_tup)\n    return test_list\n```"
    },
    {
        "id":97,
        "response":"```python\nimport re\n\ndef count_Hexadecimal(L, R):\n    count = 0\n    for i in range(L, R+1):\n        if re.match('^[0-9a-fA-F]+$', str(i)):\n            count += 1\n    return count\n```"
    },
    {
        "id":98,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef merge_sorted_lists(*args: List[int]) -> List[int]:\n    return list(heapq.merge(*args))\n\n# Example usage:\nnum1 = [1, 3, 5]\nnum2 = [2, 4, 6]\nnum3 = [0, 7, 8, 9]\n\nprint(merge_sorted_lists(num1, num2, num3))\n```"
    },
    {
        "id":99,
        "response":"```python\nimport math\n\ndef odd_Equivalent(s, n):\n    l = len(s)\n    max_count = 0\n    for i in range(l):\n        curr_count = 0\n        for j in range(l):\n            if s[(i + j) % l] == '1':\n                curr_count += 1\n        max_count = max(max_count, curr_count)\n    if max_count % 2 == 0:\n        return '0' * n + '1' * max_count + '0' * (l - max_count)\n    else:\n        return s\n```"
    },
    {
        "id":100,
        "response":"```python\nfrom typing import List\n\ndef extract_missing(test_list: List[int], strt_val: int, stop_val: int) -> List[int]:\n    full_range = set(range(strt_val, stop_val + 1))\n    test_set = set(test_list)\n    missing_range = sorted(list(full_range - test_set))\n    return missing_range\n```"
    },
    {
        "id":101,
        "response":"```python\nfrom typing import List, Any\n\ndef common_in_nested_lists(nestedlist: List[Any]) -> List[Any]:\n    if not nestedlist:\n        return []\n\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    count_dict = {}\n    for item in flat_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    common_count = len(nestedlist)\n    common_elements = [item for item, count in count_dict.items() if count == common_count]\n\n    return common_elements\n```"
    },
    {
        "id":102,
        "response":"```python\nimport math\n\ndef perimeter(diameter, height):\n    radius = diameter \/ 2\n    return 2 * math.pi * radius + 2 * diameter\n```"
    },
    {
        "id":103,
        "response":"```python\nimport re\ndef check_integer(text: str) -> bool:\n    pattern = re.compile('^-?\\d+$')\n    return bool(pattern.match(text))\n```"
    },
    {
        "id":104,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef assign_freq(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int, int]]:\n    freq_dict = Counter(test_list)\n    return [(item[0], item[1], freq_dict[item]) for item in test_list]\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (3, 4)]\nprint(assign_freq(test_list))\n```"
    },
    {
        "id":105,
        "response":"```python\nfrom typing import List, Dict\n\ndef empty_dict(dict_list: List[Dict]) -> List[Dict]:\n    return [d for d in dict_list if not d]\n```"
    },
    {
        "id":106,
        "response":"```python\nimport itertools\n\ndef tuple_to_int(nums: tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))\n```"
    },
    {
        "id":107,
        "response":"```python\nfrom typing import List, Any\n\ndef list_to_float(test_list: List[Any]) -> List[Any]:\n    return [float(i) if isinstance(i, (int, float, str)) and i.replace('.', '', 1).replace('-', '', 1).isdigit() else i for i in test_list]\n```"
    },
    {
        "id":108,
        "response":"```python\nimport re\ndef string_to_list(string):\n    return re.findall(r'\\[(.*?)\\]', string)\n```"
    },
    {
        "id":109,
        "response":"```python\nfrom typing import List\n\ndef search(arr: List[int], n: int) -> int:\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value == 1:\n            return key\n    return -1\n\n# Example usage:\narr = [1, 2, 3, 2, 3]\nn = len(arr)\nprint(search(arr, n))\n```"
    },
    {
        "id":110,
        "response":"```python\nimport itertools\n\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    result = ()\n    for tup1, tup2 in itertools.combinations(list1, 2):\n        product = tup1[0] * tup2[0]\n        if product > max_product:\n            max_product = product\n            result = (tup1, tup2)\n    return result\n\n# Example usage:\nlist1 = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(max_product_tuple(list1))\n```"
    },
    {
        "id":111,
        "response":"```python\nimport itertools\n\ndef check_triplet(A, n, sum, count):\n    triplets = list(itertools.combinations(A, 3))\n    result = []\n    for triplet in triplets:\n        if sum(triplet) == sum:\n            result.append(triplet)\n    if count == len(result):\n        return result\n    else:\n        return []\n```"
    },
    {
        "id":112,
        "response":"```python\nimport math\n\ndef smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        sqrt = math.sqrt(num)\n        if sqrt == int(sqrt):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n```"
    },
    {
        "id":113,
        "response":"```python\nimport math\n\ndef amicable_numbers_sum(limit: int) -> int:\n    def proper_divisors_sum(n: int) -> int:\n        sum_divisors = 1\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                sum_divisors += i\n                if i != n \/\/ i:\n                    sum_divisors += n \/\/ i\n        return sum_divisors\n\n    amicable_sum = 0\n    for num in range(1, limit):\n        if proper_divisors_sum(num) < limit and proper_divisors_sum(proper_divisors_sum(num)) == num and num != proper_divisors_sum(num):\n            amicable_sum += num\n    return amicable_sum\n```"
    },
    {
        "id":114,
        "response":"```python\nimport math\nimport cmath\n\ndef angle_complex(a, b):\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)\n\n# Example usage:\nprint(angle_complex(3, 4))\n```"
    },
    {
        "id":115,
        "response":"```python\nfrom typing import List\n\ndef find_max_difference(s: str, n: int) -> int:\n    max_count: int = 0\n    min_count: int = 0\n    count: int = 0\n    max_diff: int = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        max_count = max(max_count, count)\n        min_count = min(min_count, count)\n        max_diff = max(max_diff, max_count - min_count)\n    return max_diff\n```"
    },
    {
        "id":116,
        "response":"```python\nimport math\n\ndef sum_of_common_divisors(a: int, b: int) -> int:\n    def get_divisors(n: int) -> set:\n        divisors = set()\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n \/\/ i)\n        return divisors\n\n    a_divisors = get_divisors(a)\n    b_divisors = get_divisors(b)\n    common_divisors = a_divisors & b_divisors\n    return sum(common_divisors)\n```"
    },
    {
        "id":117,
        "response":"```python\ndef multiply_int(x: int, y: int) -> int:\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return result\n    else:\n        return -result\n```"
    },
    {
        "id":118,
        "response":"```python\nimport re\ndef long_words(n, str):\n    words = re.findall(r'\\b\\w+\\b', str)\n    return [word for word in words if len(word) > n]\n```"
    },
    {
        "id":119,
        "response":"```python\nimport numpy as np\n\ndef magic_square_test(my_matrix):\n    my_array = np.array(my_matrix)\n    \n    # Check if matrix is square\n    if my_array.shape[0] != my_array.shape[1]:\n        return False\n\n    n = my_array.shape[0]\n\n    # Check if all numbers are unique\n    if len(np.unique(my_array)) != n * n:\n        return False\n\n    # Check rows\n    for row in my_array:\n        if sum(row) != sum(my_array[0]):\n            return False\n\n    # Check columns\n    for col in my_array.T:\n        if sum(col) != sum(my_array[0]):\n            return False\n\n    # Check diagonals\n    diagonal1 = np.trace(my_array)\n    diagonal2 = np.trace(np.fliplr(my_array))\n    if diagonal1 != sum(my_array[0]) or diagonal2 != sum(my_array[0]):\n        return False\n\n    return True\n```"
    },
    {
        "id":120,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count.values())\n```"
    },
    {
        "id":121,
        "response":"```python\nimport re\n\ndef reverse_vowels(str1):\n    vowels = re.findall('[aeiouAEIOU]', str1)\n    str1_list = list(str1)\n    left, right = 0, len(str1) - 1\n\n    while left < right:\n        if str1_list[left] not in 'aeiouAEIOU':\n            left += 1\n        elif str1_list[right] not in 'aeiouAEIOU':\n            right -= 1\n        else:\n            str1_list[left], str1_list[right] = str1_list[right], str1_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(str1_list)\n```"
    },
    {
        "id":122,
        "response":"```python\ndef tup_string(tup1):\n    return ''.join(map(str, tup1))\n\n# Example usage:\nprint(tup_string((1, 2, 3, 'a', 'b', 'c')))\n```"
    },
    {
        "id":123,
        "response":"```python\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum(filter(lambda x: x < 0, nums))\n```"
    },
    {
        "id":124,
        "response":"```python\nimport numpy as np\n\ndef check_last(arr, n, p):\n    if n == 0:\n        return arr\n    last_element = arr[-1]\n    for _ in range(p):\n        if last_element % 2 == 0:\n            last_element = last_element \/\/ 2\n        else:\n            last_element = 3 * last_element + 1\n    arr[-1] = last_element\n    return arr\n```"
    },
    {
        "id":125,
        "response":"```python\ndef hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)\n```"
    },
    {
        "id":126,
        "response":"```python\ndef cal_electbill(units):\n    if units <= 100:\n        return units * 0.5\n    elif units <= 200:\n        return 100 * 0.5 + (units - 100) * 0.75\n    elif units <= 300:\n        return 100 * 0.5 + 100 * 0.75 + (units - 200) * 1.0\n    elif units <= 400:\n        return 100 * 0.5 + 100 * 0.75 + 100 * 1.0 + (units - 300) * 1.2\n    else:\n        return 100 * 0.5 + 100 * 0.75 + 100 * 1.0 + 100 * 1.2 + (units - 400) * 1.5\n```"
    },
    {
        "id":127,
        "response":"```python\nfrom typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n    return nums.count(0) \/ len(nums)\n```"
    },
    {
        "id":128,
        "response":"```python\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```"
    },
    {
        "id":129,
        "response":"```python\nimport math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r\n```"
    },
    {
        "id":130,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef extract_singly(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    count = Counter(test_list)\n    return [item for item, freq in count.items() if freq == 1]\n```"
    },
    {
        "id":131,
        "response":"```python\ndef pancake_sort(nums):\n    def flip(nums, k):\n        return nums[:k+1][::-1] + nums[k+1:]\n\n    n = len(nums)\n    while n > 1:\n        max_index = nums.index(max(nums[:n]))\n        if max_index == n - 1:\n            n -= 1\n            continue\n        if max_index != 0:\n            nums = flip(nums, max_index)\n        nums = flip(nums, n - 1)\n        n -= 1\n    return nums\n```"
    },
    {
        "id":132,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    pairs1 = set((x, y) for x in list1 for y in list1 if x < y)\n    pairs2 = set((x, y) for x in list2 for y in list2 if x < y)\n    pairs3 = set((x, y) for x in list3 for y in list3 if x < y)\n    common_pairs = pairs1 & pairs2 & pairs3\n    count = Counter(common_pairs)\n    return list(count.elements())\n```"
    },
    {
        "id":133,
        "response":"```python\nfrom typing import List, Tuple, Any\n\ndef find_lists(Input: Tuple[Any]):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n```"
    },
    {
        "id":134,
        "response":"```python\nimport itertools\n\ndef sum_Pairs(arr, n):\n    return sum(abs(a - b) for a, b in itertools.combinations(arr, 2))\n\n# Example usage:\narr = [1, 4, 5, 7, 8, 9]\nn = len(arr)\nprint(sum_Pairs(arr, n))\n```"
    },
    {
        "id":135,
        "response":"```python\ndef max_Abs_Diff(arr, n):\n    return max(arr) - min(arr)\n```"
    },
    {
        "id":136,
        "response":"```python\ndef ascii_value_string(str1):\n    return sum(ord(char) for char in str1)\n```"
    },
    {
        "id":137,
        "response":"```python\ndef max_path_sum(tri, m, n):\n    for i in range(m-2, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n```"
    },
    {
        "id":138,
        "response":"```python\ndef sum_digits_single(x: int) -> int:\n    num_str = str(x)\n    max_sum = 0\n    for i in range(1, len(num_str)):\n        left_sum = sum(int(digit) for digit in num_str[:i])\n        right_sum = sum(int(digit) for digit in num_str[i:])\n        max_sum = max(max_sum, left_sum + right_sum)\n    return max_sum\n```"
    },
    {
        "id":139,
        "response":"```python\nfrom typing import List\n\ndef longest_subseq_with_diff_one(arr: List[int], n: int) -> List[int]:\n    if n == 0:\n        return []\n\n    dp = [[num] for num in arr]\n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1 and len(dp[j]) + 1 > len(dp[i]):\n                dp[i] = dp[j] + [arr[i]]\n\n    return max(dp, key=len)\n```"
    },
    {
        "id":140,
        "response":"```python\nimport math\n\ndef does_Contain_B(a, b, c):\n    if b == 0:\n        return a == c\n    if a == 0:\n        return c == 0 and b > 0\n    discriminant = b * b - 4 * a * c\n    if discriminant < 0:\n        return False\n    root = math.sqrt(discriminant)\n    x1 = (-b + root) \/ (2 * a)\n    x2 = (-b - root) \/ (2 * a)\n    return (x1 >= 0 and x1 == int(x1)) or (x2 >= 0 and x2 == int(x2))\n```"
    },
    {
        "id":141,
        "response":"```python\nimport math\n\ndef gcd(p, q):\n    while q:\n        p, q = q, p % q\n    return p\n\ndef is_coprime(a, b):\n    return gcd(a, b) == 1\n\ndef check_coprime_number(n):\n    count = 0\n    for i in range(1, n):\n        if is_coprime(n, i):\n            count += 1\n    return count\n\n# example usage\nn = 10\nprint(check_coprime_number(n))\n```"
    },
    {
        "id":142,
        "response":"```python\ndef merge(a, b):\n    result = []\n    i, j = 0, 0\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n    result += a[i:]\n    result += b[j:]\n    return result\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return merge(merge_sort(left_half), merge_sort(right_half))\n\n# Example usage:\narr = [64, 34, 25, 12, 22, 11, 90]\nprint(merge_sort(arr))\n```"
    },
    {
        "id":143,
        "response":"```python\nimport numpy as np\n\ndef parabola_vertex(a, b, c):\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)\n```"
    },
    {
        "id":144,
        "response":"```python\nimport typing\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    result = []\n    for row in nums:\n        if N in row:\n            result.append(N)\n    return result\n```"
    },
    {
        "id":145,
        "response":"```python\ndef even_bit_toggle_number(n):\n    i = 0\n    while i < 32:\n        if i % 2 == 1:\n            mask = 1 << i\n            n = n ^ mask\n        i += 1\n    return n\n```"
    },
    {
        "id":146,
        "response":"```python\nfrom typing import Tuple\n\ndef tuple_str_int(tuple_str: Tuple[str, ...]) -> Tuple[int, ...]:\n    return tuple(int(i) for i in tuple_str)\n```"
    },
    {
        "id":147,
        "response":"```python\nfrom itertools import groupby\n\ndef encode_list(list1):\n    result = []\n    for key, group in groupby(list1):\n        count = len(list(group))\n        result.append((key, count))\n    return result\n\n# Example usage:\nlist1 = [1, 1, 1, 2, 3, 3, 4, 4, 4, 4]\nprint(encode_list(list1))\n```"
    },
    {
        "id":148,
        "response":"```python\nimport math\nfrom typing import List\n\ndef min_Ops(arr: List[int], n: int, k: int) -> List[int]:\n    median = sorted(arr)[n \/\/ 2]\n    ops = 0\n    for i in range(n):\n        ops += abs(arr[i] - median)\n    if ops > k:\n        return [-1]\n    else:\n        diff = k - ops\n        if diff % n == 0:\n            return [median] * n\n        else:\n            return [median + diff \/\/ n + (1 if i < diff % n else 0) for i in range(n)]\n```"
    },
    {
        "id":149,
        "response":"```python\ndef month_season(month, days):\n    if month in [12, 1, 2]:\n        return \"Winter\"\n    elif month in [3, 4, 5]:\n        return \"Spring\"\n    elif month in [6, 7, 8]:\n        return \"Summer\"\n    elif month in [9, 10, 11]:\n        return \"Autumn\"\n    else:\n        return \"Invalid Month\"\n\ndef main():\n    print(month_season(12, 10)) # Winter\n    print(month_season(3, 21))  # Spring\n    print(month_season(6, 15))  # Summer\n    print(month_season(9, 20))  # Autumn\n    print(month_season(13, 1))  # Invalid Month\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":150,
        "response":"```python\nimport math\n\ndef solution(a, b, n):\n    for x in range(n \/\/ a + 1):\n        y = (n - a * x) \/ b\n        if y >= 0 and y == int(y):\n            return x * y\n    return -1\n```"
    },
    {
        "id":151,
        "response":"```python\nfrom typing import List\n\ndef remove_elements(list1: List, list2: List) -> List:\n    return [element for element in list1 if element not in list2]\n```"
    },
    {
        "id":152,
        "response":"```python\ndef sum_series(n: int) -> int:\n    total = 0\n    i = 2\n    while n - i >= 0:\n        total += n - i\n        i += 2\n    return total\n```"
    },
    {
        "id":153,
        "response":"```python\nimport math\n\ndef area_polygon(s, l):\n    n = s\n    a = l\n    return (n * a ** 2) \/ (4 * math.tan(math.pi \/ n))\n```"
    },
    {
        "id":154,
        "response":"```python\nimport math\n\ndef divSum(n):\n    sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/ i == i:\n                sum += i\n            else:\n                sum += (i + n \/\/ i)\n    return sum\n```"
    },
    {
        "id":155,
        "response":"```python\nfrom collections import Counter\n\ndef count_char_position(str1):\n    result = Counter()\n    for char in str1:\n        if char.isalpha():\n            result[chr(96 + ord(char.lower()) - 96)] += 1\n    return dict(result)\n```"
    },
    {
        "id":156,
        "response":"```python\nfrom typing import List\n\ndef find_even_Pair(A: List[int], N: int) -> List[int]:\n    count = 0\n    pair_list = []\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0 and A[i] != A[j]:\n                count += 1\n                pair_list.append([A[i], A[j]])\n    A.append(count)\n    return A\n```"
    },
    {
        "id":157,
        "response":"```python\nimport math\n\ndef next_Power_Of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))\n```"
    },
    {
        "id":158,
        "response":"```python\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)\n```"
    },
    {
        "id":159,
        "response":"```python\ndef get_pell(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, 2 * b + a\n        return b\n```"
    },
    {
        "id":160,
        "response":"```python\ndef sum_range_list(list1, m, n):\n    import typing\n    if not isinstance(list1, list) or not all(isinstance(i, (int, float)) for i in list1):\n        raise TypeError(\"The input must be a list of numbers.\")\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"The start and end indices must be integers.\")\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid start or end index.\")\n    return sum(list1[m:n+1])\n```"
    },
    {
        "id":161,
        "response":"```python\ndef perimeter_pentagon(a: float) -> float:\n    return 5 * a\n```"
    },
    {
        "id":162,
        "response":"```python\nfrom typing import List\n\ndef count_occurance(s: str) -> int:\n    return s.count('std')\n```"
    },
    {
        "id":163,
        "response":"```python\nimport re\n\ndef remove_splchar(text: str) -> str:\n    return re.sub('[^a-zA-Z0-9]', '', text)\n```"
    },
    {
        "id":164,
        "response":"```python\nfrom typing import List, Dict\n\ndef group_keyvalue(pairs: List[List[str]]) -> Dict[str, List[str]]:\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n```"
    },
    {
        "id":165,
        "response":"```python\nfrom typing import List\n\ndef is_valid_parentheses(s: str) -> bool:\n    stack: List[str] = []\n    parentheses_map: dict = {')': '(', '}': '{', ']': '['}\n\n    for char in s:\n        if char in parentheses_map.values():\n            stack.append(char)\n        elif char in parentheses_map.keys():\n            if not stack or stack.pop() != parentheses_map[char]:\n                return False\n\n    return not stack\n```"
    },
    {
        "id":166,
        "response":"```python\ndef perimeter_triangle(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"The given sides cannot form a triangle.\")\n    return a + b + c\n```"
    },
    {
        "id":167,
        "response":"```python\nimport math\n\ndef answer(L, R):\n    for i in range(L, R + 1):\n        for j in range(i + 1, R + 1):\n            lcm = (i * j) \/\/ math.gcd(i, j)\n            if L <= lcm <= R:\n                return [i, j]\n    return []\n```"
    },
    {
        "id":168,
        "response":"```python\nimport re\nfrom typing import List\n\ndef string_literals(patterns: List[str], text: str) -> List[str]:\n    found_patterns = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            found_patterns.append(pattern)\n    return found_patterns\n```"
    },
    {
        "id":169,
        "response":"```python\nimport math\n\ndef is_num_keith(x):\n    def get_digits(n):\n        digits = []\n        while n > 0:\n            digits.append(n % 10)\n            n \/\/= 10\n        return digits[::-1]\n\n    if x < 0:\n        return False\n\n    digits = get_digits(x)\n    n = len(digits)\n\n    if n == 1:\n        return x == 1\n\n    sequence = digits[:]\n    while sequence[-1] < x:\n        sequence.append(sum(sequence[-n:]))\n        n += 1\n\n    return sequence[-1] == x\n```"
    },
    {
        "id":170,
        "response":"```python\nimport math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371\n    dlat = math.radians(elat - slat)\n    dlon = math.radians(elon - slon)\n    a = math.sin(dlat\/2)**2 + math.cos(math.radians(slat))*math.cos(math.radians(elat))*math.sin(dlon\/2)**2\n    c = 2*math.atan2(math.sqrt(a), math.sqrt(1-a))\n    distance = R * c\n    return distance\n```"
    },
    {
        "id":171,
        "response":"```python\nimport os\n\ndef common_prefix_util(strings):\n    if not strings:\n        return \"\"\n    prefix = min(strings, key=len)\n    for i, c in enumerate(prefix):\n        for string in strings:\n            if string[i] != c:\n                return prefix[:i]\n    return prefix\n\ndef common_prefix_util2(strings):\n    if not strings:\n        return \"\"\n    prefix = strings[0]\n    for string in strings[1:]:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\ndef common_prefix_util3(strings):\n    if not strings:\n        return \"\"\n    prefix = \"\"\n    for chars in zip(*strings):\n        if len(set(chars)) == 1:\n            prefix += chars[0]\n        else:\n            break\n    return prefix\n```"
    },
    {
        "id":172,
        "response":"```python\nimport re\nfrom typing import Dict\n\ndef find_character(string: str) -> Dict[str, list]:\n    result = {\n        'uppercase': re.findall(r'[A-Z]', string),\n        'lowercase': re.findall(r'[a-z]', string),\n        'special_characters': re.findall(r'[^A-Za-z0-9]', string),\n        'numeric_values': re.findall(r'\\d', string)\n    }\n    return result\n\n# Example usage:\nstring = \"Hello, World! 123\"\nprint(find_character(string))\n```"
    },
    {
        "id":173,
        "response":"```python\nfrom typing import List\n\ndef count_pairs(arr: List[int], n: int, k: int) -> int:\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    count = 0\n    for num in freq:\n        if num + k in freq:\n            count += freq[num] * freq[num + k]\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nk = 1\nprint(count_pairs(arr, n, k))\n```"
    },
    {
        "id":174,
        "response":"```python\nfrom typing import List\n\ndef greater_specificnum(lst: List[int], num: int) -> List[int]:\n    return [i for i in lst if i > num]\n```"
    },
    {
        "id":175,
        "response":"```python\nimport sympy as sp\n\ndef parabola_focus(a, b, c):\n    x = sp.symbols('x')\n    A = a\n    B = b\n    C = c\n    D = B**2 - 4*A*C\n    p = 1 \/ (4*A)\n    h = -B \/ (2*A)\n    k = A*h**2 + B*h + C\n    focus_x = h\n    focus_y = k + p\n    return (focus_x, focus_y)\n\n# Example usage:\nprint(parabola_focus(1, -3, 2))\n```"
    },
    {
        "id":176,
        "response":"```python\nimport re\nfrom typing import List\n\ndef check_literals(text: str, patterns: List[str]) -> str:\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return pattern\n    return None\n\n# Example usage:\ntext = \"Hello, world!\"\npatterns = [\"Hello\", \"world\", \"Python\"]\nprint(check_literals(text, patterns))\n```"
    },
    {
        "id":177,
        "response":"```python\nimport numpy as np\n\ndef longest_common_subsequence(X, Y, m, n):\n    L = np.zeros((m+1, n+1), dtype=int)\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0 :\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n                \n    index = L[m][n]\n    \n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n    \n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n            \n    return \"\".join(lcs)\n\n# Example usage:\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(longest_common_subsequence(X, Y, m, n))\n```"
    },
    {
        "id":178,
        "response":"```python\nimport math\n\ndef prod_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        sqrt_val = math.sqrt(n \/ (i * i))\n        if sqrt_val == int(sqrt_val):\n            return True\n    return False\n```"
    },
    {
        "id":179,
        "response":"```python\nfrom typing import List\n\ndef first_Missing_Positive(nums: List[int], n: int) -> int:\n    if not nums:\n        return 1\n\n    nums = list(set(nums))\n    nums = [num for num in nums if num > 0]\n    nums.sort()\n\n    if not nums or nums[0] > 1:\n        return 1\n\n    for i in range(len(nums) - 1):\n        if nums[i + 1] - nums[i] > 1:\n            return nums[i] + 1\n\n    return nums[-1] + 1\n```"
    },
    {
        "id":180,
        "response":"```python\ndef count_Integral_Points(x1, y1, x2, y2):\n    import math\n    points = 0\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            if x1 <= x <= x2 and y1 <= y <= y2:\n                points += 1\n    return points\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    return count_Integral_Points(x1, y1, x2, y2)\n```"
    },
    {
        "id":181,
        "response":"```python\nimport calendar\n\ndef check_monthnumber(monthname):\n    month_dict = {\n        \"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \n        \"May\": 31, \"June\": 30, \"July\": 31, \"August\": 31, \n        \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31\n    }\n    return month_dict.get(monthname.capitalize(), None) == 30\n\n# or \n\ndef check_monthnumber_alternative(monthname):\n    month_list = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n                  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    return calendar.monthrange(2024, month_list.index(monthname.capitalize()) + 1)[1] == 30\n```"
    },
    {
        "id":182,
        "response":"```python\nimport re\ndef check_String(s):\n    return bool(re.search(r\"[a-zA-Z]\", s)) and bool(re.search(r\"[0-9]\", s))\n```"
    },
    {
        "id":183,
        "response":"```python\nfrom typing import Tuple\n\ndef remove_tuple(test_tup: Tuple) -> Tuple:\n    return tuple(dict.fromkeys(test_tup))\n```"
    },
    {
        "id":184,
        "response":"```python\ndef octal_To_Decimal(n: str) -> int:\n    import re\n    if not re.match('^[0-7]+$', n):\n        raise ValueError(\"Invalid octal number\")\n    return int(n, 8)\n```"
    },
    {
        "id":185,
        "response":"```python\nimport bisect\n\ndef first(arr, x, n):\n    index = bisect.bisect_left(arr, x)\n    if index != n and arr[index] == x:\n        return index\n    else:\n        return -1\n```"
    },
    {
        "id":186,
        "response":"```python\nfrom typing import List, Tuple\n\ndef remove_tuples(test_list: List, K: int) -> List:\n    return [i for i in test_list if not isinstance(i, tuple) or len(i) != K]\n```"
    },
    {
        "id":187,
        "response":"```python\nimport operator\nimport math\nfrom typing import Tuple\n\ndef find_exponentio(test_tup1: Tuple[float], test_tup2: Tuple[float]) -> Tuple[float]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    result = tuple(map(lambda x, y: math.pow(x, y), test_tup1, test_tup2))\n    return result\n```"
    },
    {
        "id":188,
        "response":"```python\nimport math\n\ndef largest_triangle(a, b):\n    c = math.sqrt(a**2 + b**2)\n    s = (a + b + c) \/ 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\ndef largest_inscribed_triangle(radius):\n    a = radius * math.sqrt(3)\n    b = radius * math.sqrt(3)\n    return largest_triangle(a, b)\n\n# Example usage\nradius = 5\nprint(largest_inscribed_triangle(radius))\n```"
    },
    {
        "id":189,
        "response":"```python\nimport math\n\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    return 2 ** math.floor(math.log2(n))\n```"
    },
    {
        "id":190,
        "response":"```python\nfrom typing import List\n\ndef position_max(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]\n```"
    },
    {
        "id":191,
        "response":"```python\nfrom typing import List\n\ndef chkList(lst: List) -> bool:\n    return len(set(lst)) == 1\n```"
    },
    {
        "id":192,
        "response":"```python\ndef remove_even(str1):\n    return ''.join([char for i, char in enumerate(str1) if (i + 1) % 2 != 0])\n```"
    },
    {
        "id":193,
        "response":"```python\ndef hamming_distance(n1, n2):\n    return bin(n1 ^ n2).count('1')\n```"
    },
    {
        "id":194,
        "response":"```python\ndef count(s: str, c: str) -> int:\n    return s.count(c)\n```"
    },
    {
        "id":195,
        "response":"```python\nfrom typing import List, Tuple\n\ndef inversion_elements(test_tup: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return [(y, x) for x, y in test_tup]\n```"
    },
    {
        "id":196,
        "response":"```python\nfrom typing import Tuple, List\n\ndef concatenate_elements(test_tup: Tuple[str, ...]) -> List[str]:\n    return [test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)]\n```"
    },
    {
        "id":197,
        "response":"```python\nimport numpy as np\n\ndef find_longest_repeating_subseq(str):\n    m = len(str)\n    dp = np.zeros((m+1, m+1), dtype=int)\n    max_length = 0\n    end = 0\n    for i in range(1, m + 1):\n        for j in range(1, m + 1):\n            if i != j and str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n                    end = i\n            else:\n                dp[i][j] = 0\n    return str[end-max_length: end]\n```"
    },
    {
        "id":198,
        "response":"```python\nimport re\ndef is_decimal(num):\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n```"
    },
    {
        "id":199,
        "response":"```python\nimport heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        heapq.heappush(heap, a)\n    else:\n        heapq.heappop(heap)\n        heapq.heappush(heap, a)\n    return heap\n```"
    },
    {
        "id":200,
        "response":"```python\nimport re\n\ndef is_allowed_specific_char(string):\n    allowed_chars = set('abc')\n    pattern = f'^[{{allowed_chars}}]*$'.format(allowed_chars=''.join(allowed_chars))\n    return bool(re.match(pattern, string))\n\n# Test\nprint(is_allowed_specific_char('abc'))  # True\nprint(is_allowed_specific_char('abcd')) # False\n```"
    },
    {
        "id":201,
        "response":"```python\nimport math\n\ndef count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        binary = bin(i)[2:]\n        if len(binary) >= n and binary[-n-1] == '1' and binary[-1] == '1':\n            count += 1\n    return count\n```"
    },
    {
        "id":202,
        "response":"```python\ndef fourth_Power_Sum(n: int) -> int:\n    import math\n    return sum(math.pow(i, 4) for i in range(1, n + 1))\n```"
    },
    {
        "id":203,
        "response":"```python\nfrom typing import Tuple\n\ndef concatenate_strings(test_tup1: Tuple[str, str], test_tup2: Tuple[str, str]) -> Tuple[str, str, str, str]:\n    return test_tup1 + test_tup2\n\n# Example usage:\ndef main():\n    test_tup1 = (\"Hello\", \"World\")\n    test_tup2 = (\"This\", \"is a test\")\n    print(concatenate_strings(test_tup1, test_tup2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":204,
        "response":"```python\nimport math\n\ndef radian_degree(radian: float) -> float:\n    return math.degrees(radian)\n```"
    },
    {
        "id":205,
        "response":"```python\nfrom typing import List\n\ndef decode_list(alist: List[int]) -> List[int]:\n    decoded_list = []\n    i = 0\n    while i < len(alist):\n        count = alist[i]\n        num = alist[i + 1]\n        decoded_list.extend([num] * count)\n        i += 2\n    return decoded_list\n```"
    },
    {
        "id":206,
        "response":"```python\nfrom typing import List\n\ndef check_subset_list(list1: List, list2: List) -> bool:\n    def flatten(lst: List) -> List:\n        flat_list = []\n        for i in lst:\n            if isinstance(i, list):\n                flat_list.extend(flatten(i))\n            else:\n                flat_list.append(i)\n        return flat_list\n\n    flat_list1 = flatten(list1)\n    flat_list2 = flatten(list2)\n\n    return set(flat_list1).issubset(set(flat_list2))\n\n# Example usage:\nlist1 = [1, 2, [3, 4]]\nlist2 = [1, 2, [3, 4], 5]\nprint(check_subset_list(list1, list2))  # Output: True\n\nlist1 = [1, 2, [3, 5]]\nlist2 = [1, 2, [3, 4], 5]\nprint(check_subset_list(list1, list2))  # Output: False\n```"
    },
    {
        "id":207,
        "response":"```python\nfrom typing import Dict\n\ndef first_Repeated_Char(str: str) -> str:\n    char_count: Dict[str, int] = {}\n    for char in str:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return \"\"\n```"
    },
    {
        "id":208,
        "response":""
    },
    {
        "id":209,
        "response":"```python\nimport heapq\nfrom typing import Tuple\n\ndef extract_min_max(test_tup: Tuple[int], K: int) -> Tuple[int]:\n    if K > len(test_tup):\n        raise ValueError(\"K cannot be greater than the length of the tuple\")\n\n    min_k = heapq.nsmallest(K, test_tup)\n    max_k = heapq.nlargest(K, test_tup)\n\n    return (*min_k, *max_k)\n\n# Example usage:\ntest_tup = (5, 8, 9, 2, 1, 4, 7, 6, 3)\nK = 3\nprint(extract_min_max(test_tup, K))\n```"
    },
    {
        "id":210,
        "response":"```python\nimport re\ndef replace_max_specialchar(text: str, n: int) -> str:\n    specialchars = re.findall(r'[\\s.,]', text)\n    if len(specialchars) <= n:\n        return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n    else:\n        space_count = text.count(' ')\n        comma_count = text.count(',')\n        dot_count = text.count('.')\n        count_list = [space_count, comma_count, dot_count]\n        count_list.sort(reverse=True)\n        \n        space_replaced = min(n, count_list[0])\n        comma_replaced = min(n - space_replaced, count_list[1])\n        dot_replaced = min(n - space_replaced - comma_replaced, count_list[2])\n\n        text = text.replace(' ', ' ', space_count - space_replaced)\n        text = text.replace(' ', ':', space_replaced)\n        \n        text = text.replace(',', ',', comma_count - comma_replaced)\n        text = text.replace(',', ':', comma_replaced)\n        \n        text = text.replace('.', '.', dot_count - dot_replaced)\n        text = text.replace('.', ':', dot_replaced)\n        \n        return text\n```"
    },
    {
        "id":211,
        "response":"```python\nfrom typing import List\n\ndef first_even(nums: List[int]) -> int:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n```"
    },
    {
        "id":212,
        "response":"```python\nfrom typing import Tuple, Any\n\ndef check_type(test_tuple: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    if not test_tuple:\n        return test_tuple\n    data_type = type(test_tuple[0])\n    if all(isinstance(i, data_type) for i in test_tuple):\n        return test_tuple\n    else:\n        raise TypeError(\"Tuple elements are not of the same data type\")\n```"
    },
    {
        "id":213,
        "response":"```python\ndef is_majority(arr, n, x):\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if arr[mid] == x:\n            if mid > 0 and arr[mid - 1] < x:\n                return True\n            elif mid == 0:\n                return True\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n```"
    },
    {
        "id":214,
        "response":"```python\ndef count_Set_Bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```"
    },
    {
        "id":215,
        "response":"```python\nfrom typing import List\n\ndef find_Min(arr: List[int], low: int, high: int) -> int:\n    if low == high:\n        return arr[low]\n    if high == low + 1:\n        return min(arr[low], arr[high])\n\n    mid = (low + high) \/\/ 2\n\n    if arr[mid] > arr[high]:\n        return find_Min(arr, mid + 1, high)\n    elif arr[mid] < arr[low]:\n        return find_Min(arr, low, mid)\n    elif arr[mid] > arr[low]:\n        return find_Min(arr, low, mid - 1)\n    else:\n        if arr[low] == arr[mid] == arr[high]:\n            return min(find_Min(arr, low, mid - 1), find_Min(arr, mid + 1, high))\n        elif arr[low] == arr[mid]:\n            return find_Min(arr, mid + 1, high)\n        elif arr[mid] == arr[high]:\n            return find_Min(arr, low, mid)\n\n# Iterative solution \ndef find_Min_iterative(arr: List[int], low: int, high: int) -> int:\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        elif arr[mid] < arr[low]:\n            low = low\n            high = mid\n        elif arr[mid] > arr[low]:\n            high = mid - 1\n        else:\n            if arr[low] == arr[mid] == arr[high]:\n                if low + 1 <= high:\n                    return min(find_Min_iterative(arr, low, mid - 1), find_Min_iterative(arr, mid + 1, high))\n                else:\n                    return arr[low]\n            elif arr[low] == arr[mid]:\n                low = mid + 1\n            elif arr[mid] == arr[high]:\n                high = mid - 1\n    return arr[low]\n```"
    },
    {
        "id":216,
        "response":"```python\ndef odd_values_string(s):\n    import re\n    return re.sub('[^aeiouAEIOU\\s]', '', s)\n\n# However, according to your example it seems like you want to remove characters at odd index.\ndef odd_index_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n```"
    },
    {
        "id":217,
        "response":"```python\nimport typing\n\ndef min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)\n```"
    },
    {
        "id":218,
        "response":"```python\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    import math\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return (n & mask) == mask\n```"
    },
    {
        "id":219,
        "response":"```python\ndef re_arrange_array(arr, n):\n    positive = []\n    negative = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    return negative + positive\n```"
    },
    {
        "id":220,
        "response":"```python\ndef replace_blank(str1, char):\n    return str1.replace(' ', char)\n```"
    },
    {
        "id":221,
        "response":"```python\ndef max_sum(tri, n):\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n```"
    },
    {
        "id":222,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, list1)\n```"
    },
    {
        "id":223,
        "response":"```python\nimport math\n\ndef lateralsurface_cylinder(r, h):\n    return 2 * math.pi * r * h\n```"
    },
    {
        "id":224,
        "response":"```python\ndef volume_cube(l: float) -> float:\n    return l ** 3\n```"
    },
    {
        "id":225,
        "response":"```python\ndef even_bit_set_number(n):\n    i = 0\n    while i < 32:\n        if (i % 2 == 1):\n            n = n | (1 << i)\n        i += 1\n    return n\n```"
    },
    {
        "id":226,
        "response":"```python\nimport math\n\ndef No_of_Triangle(N, K):\n    if K == 0:\n        return 0\n    return min(N*(N-1)*(N-2)\/\/6, N\/\/3)\n```"
    },
    {
        "id":227,
        "response":"```python\nfrom typing import List, Tuple\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    events_dict = {}\n    for event in test_list:\n        if event[0] not in events_dict:\n            events_dict[event[0]] = set()\n        events_dict[event[0]].add(event[1])\n    \n    simultaneous_events = []\n    for time in events_dict:\n        if len(events_dict[time]) > 1:\n            simultaneous_events.append((time, tuple(sorted(events_dict[time]))))\n    \n    return simultaneous_events\n\n# Example usage:\ntest_list = [(1, 'A'), (1, 'B'), (2, 'C'), (3, 'D'), (3, 'E'), (3, 'F')]\nprint(check_occurences(test_list))\n```"
    },
    {
        "id":228,
        "response":"```python\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n*(n+1)\/\/2\n```"
    },
    {
        "id":229,
        "response":"```python\nimport math\n\ndef get_total_number_of_sequences(m, n):\n    if m < 1 or n < 1:\n        return 0\n    \n    dp = [[0]*(n+1) for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        dp[i][1] = 1\n    \n    for i in range(2, n+1):\n        total = 0\n        for j in range(1, m+1):\n            dp[j][i] = total\n            if j * 2 <= m:\n                total += dp[j*2][i-1]\n            else:\n                total += dp[m][i-1]\n    \n    total_sequences = 0\n    for i in range(1, m+1):\n        total_sequences += dp[i][n]\n    \n    return total_sequences\n```"
    },
    {
        "id":230,
        "response":"```python\nfrom typing import List\n\ndef replace_list(list1: List, list2: List) -> List:\n    if len(list1) == 0:\n        return list1\n    list1[-1] = list2\n    return list1\n```"
    },
    {
        "id":231,
        "response":"```python\nimport numpy as np\n\ndef array_3d(m, n, o):\n    return np.full((m, n, o), '*')\n```"
    },
    {
        "id":232,
        "response":"```python\ndef count_charac(str1: str) -> int:\n    return len(str1)\n```"
    },
    {
        "id":233,
        "response":"```python\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef sort_on_occurence(lst: List[Tuple]) -> List[Tuple]:\n    count = Counter(i[0] for i in lst)\n    return sorted(lst, key=lambda x: (count[x[0]], x[0]))\n```"
    },
    {
        "id":234,
        "response":"```python\nimport math\n\ndef next_Perfect_Square(N):\n    root = math.ceil(math.sqrt(N))\n    if root * root == N:\n        root += 1\n    return root * root\n```"
    },
    {
        "id":235,
        "response":"```python\ndef max_sum(arr, n):\n    increasing = [0]*n\n    decreasing = [0]*n\n    increasing[0] = arr[0]\n    decreasing[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        increasing[i] = max(increasing[i-1]+arr[i], arr[i])\n\n    for i in range(n-2, -1, -1):\n        decreasing[i] = max(decreasing[i+1]+arr[i], arr[i])\n\n    max_sum = float('-inf')\n    for i in range(n-1):\n        max_sum = max(max_sum, increasing[i]+decreasing[i+1])\n\n    return max(max_sum, max(increasing), max(decreasing))\n```"
    },
    {
        "id":236,
        "response":"```python\nimport math\n\ndef babylonian_squareroot(number: float, precision: float = 0.00001) -> float:\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number.\")\n    if number == 0 or number == 1:\n        return number\n    \n    x = number\n    y = (x + 1) \/ 2\n\n    while abs(y - x) > precision:\n        x = y\n        y = (x + number \/ x) \/ 2\n\n    return y\n\n# Test\nprint(babylonian_squareroot(25))\nprint(babylonian_squareroot(2))\n```"
    },
    {
        "id":237,
        "response":"```python\nfrom typing import List\n\ndef lps(s: str) -> str:\n    n = len(s)\n    dp = [[False] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(n):\n        dp[i][i] = True\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = True\n            start = i\n            max_len = 2\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if dp[i + 1][j - 1] and s[i] == s[j]:\n                dp[i][j] = True\n                if length > max_len:\n                    start = i\n                    max_len = length\n\n    return s[start:start + max_len]\n```"
    },
    {
        "id":238,
        "response":"```python\nfrom typing import Union\n\ndef harmonic_sum(n: int) -> Union[float, int]:\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(1, n):\n            sum += 1 \/ i\n        return sum\n```"
    },
    {
        "id":239,
        "response":"```python\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    set1 = set(array_nums1)\n    return list(filter(lambda x: x in set1, array_nums2))\n\n# Alternatively, you can use set intersection for better performance\ndef intersection_array_set(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1 & set2)\n```"
    },
    {
        "id":240,
        "response":"```python\nfrom typing import Tuple, Any\n\ndef count_X(tup: Tuple[Any], x: Any) -> int:\n    return tup.count(x)\n```"
    },
    {
        "id":241,
        "response":"```python\nfrom typing import List, Any\n\ndef insert_element(input_list: List[Any], element: Any) -> List[Any]:\n    result = []\n    for i in input_list:\n        result.append(element)\n        result.append(i)\n    return result\n\n# Example usage:\nprint(insert_element([1, 2, 3], 0))  # Output: [0, 1, 0, 2, 0, 3]\n```"
    },
    {
        "id":242,
        "response":"```python\nimport numpy as np\nfrom typing import List, Tuple\n\ndef convert(numbers: List[complex]) -> List[Tuple[float, float]]:\n    return [(num.real, num.imag) for num in numbers]\n\n# Example usage:\nnumbers = [1 + 2j, 3 - 4j, 5 + 6j]\nprint(convert(numbers))\n```"
    },
    {
        "id":243,
        "response":"```python\nfrom typing import List, Union\n\ndef count_integer(list1: List[Union[int, float, str]]) -> int:\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n```"
    },
    {
        "id":244,
        "response":"```python\nimport re\ndef words_ae(text):\n    return re.findall(r'\\b[ae][\\w]*\\b', text, flags=re.IGNORECASE)\n```"
    },
    {
        "id":245,
        "response":"```python\nimport itertools\n\ndef combinations_colors(colors, n):\n    return list(itertools.product(colors, repeat=n))\n\ncolors = ['red', 'green', 'blue']\nn = 2\nprint(combinations_colors(colors, n))\n```"
    },
    {
        "id":246,
        "response":"```python\nimport math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 0:\n        return 0\n    \n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if sieve[i]:\n            for j in range(i * i, n, i):\n                sieve[j] = False\n                \n    return sum(1 for x in sieve if x)\n```"
    },
    {
        "id":247,
        "response":"```python\ndef swap_numbers(a, b):\n    a, b = b, a\n    return a, b\n\n# Example usage:\na = 5\nb = 10\nprint(\"Before swap: a =\", a, \", b =\", b)\na, b = swap_numbers(a, b)\nprint(\"After swap: a =\", a, \", b =\", b)\n```"
    },
    {
        "id":248,
        "response":"```python\nfrom typing import List\n\ndef count_odd(array_nums: List[int]) -> int:\n    odd_count = list(filter(lambda x: x % 2 != 0, array_nums))\n    return len(odd_count)\n```"
    },
    {
        "id":249,
        "response":"```python\nfrom typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[int, int], test_tup2: Tuple[int, int]) -> Tuple[int, int]:\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":250,
        "response":"```python\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 71\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n```"
    },
    {
        "id":251,
        "response":"```python\nimport operator\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    for i in test_tup2:\n        if i == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n    return tuple(map(operator.truediv, test_tup1, test_tup2))\n```"
    },
    {
        "id":252,
        "response":"```python\nfrom typing import List\n\ndef split_two_parts(list1: List, L: int) -> List:\n    if L < 0 or L > len(list1):\n        raise ValueError(\"Invalid length\")\n    return [list1[:L], list1[L:]]\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nL = 2\nprint(split_two_parts(list1, L))  # Output: [[1, 2], [3, 4, 5]]\n```"
    },
    {
        "id":253,
        "response":"```python\ndef merge_dict(d1, d2):\n    return {**d1, **d2}\n```"
    },
    {
        "id":254,
        "response":"```python\ndef dog_age(h_age):\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n```"
    },
    {
        "id":255,
        "response":"```python\nfrom typing import List\n\ndef list_split(S: List, step: int) -> List:\n    return [S[i:i + step] for i in range(0, len(S), step)]\n```"
    },
    {
        "id":256,
        "response":"```python\ndef lateralsurface_cube(l: float) -> float:\n    import math\n    return 4 * l ** 2\n```"
    },
    {
        "id":257,
        "response":"```python\nimport math\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum\n```"
    },
    {
        "id":258,
        "response":"```python\ndef find_star_num(n: int) -> int:\n    return n * (n + 1) \/\/ 2\n```"
    },
    {
        "id":259,
        "response":"```python\ndef ascii_value(k):\n    return ord(k)\n```"
    },
    {
        "id":260,
        "response":"```python\ndef sum_even_and_even_index(arr, n):\n    total_sum = 0\n    for i in range(n):\n        if i % 2 == 1 and arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum\n```"
    },
    {
        "id":261,
        "response":"```python\ndef even_Power_Sum(n: int) -> int:\n    import math\n    return sum(math.pow(2*i, 5) for i in range(1, n+1))\n```"
    },
    {
        "id":262,
        "response":"```python\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]\n```"
    },
    {
        "id":263,
        "response":"```python\nfrom typing import Tuple\n\ndef subtract_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":264,
        "response":"```python\nimport math\n\ndef even_binomial_coeff_sum(n):\n    total = 0\n    for k in range(n + 1):\n        if k % 2 == 0:\n            total += math.comb(n, k)\n    return total\n```"
    },
    {
        "id":265,
        "response":"```python\nfrom typing import List\n\ndef get_Position(a: List[int], n: int, m: int) -> int:\n    stack = []\n    for i in range(n):\n        if stack and stack[-1] == a[i]:\n            stack.pop()\n        else:\n            stack.append(a[i])\n    return a.index(stack[-1]) if stack else -1\n```"
    },
    {
        "id":266,
        "response":"```python\nimport math\n\ndef volume_cylinder(r, h):\n    return math.pi * (r ** 2) * h\n```"
    },
    {
        "id":267,
        "response":"```python\nfrom typing import Dict\n\ndef dict_filter(input_dict: Dict, n: int) -> Dict:\n    return {key: value for key, value in input_dict.items() if value >= n}\n```"
    },
    {
        "id":268,
        "response":"```python\nfrom typing import Tuple\n\ndef count_first_elements(test_tup: Tuple) -> Tuple:\n    count = 0\n    result = ()\n    for i in test_tup:\n        result += (count,)\n        count += 1\n    return result\n```"
    },
    {
        "id":269,
        "response":"```python\nimport math\n\ndef is_num_decagonal(n):\n    x = (math.sqrt(8 * n + 1) + 1) \/ 4\n    return n if x == int(x) and x > 0 else None\n```"
    },
    {
        "id":270,
        "response":"```python\ndef sequential_search(dlist, item):\n    import typing as t\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n# Example usage:\ndlist: t.List[int] = [1, 2, 3, 4, 5]\nitem: int = 3\nindex: int = sequential_search(dlist, item)\nprint(index)\n```"
    },
    {
        "id":271,
        "response":"```python\nfrom typing import List\n\ndef all_unique(test_list: List) -> bool:\n    return len(test_list) == len(set(test_list))\n```"
    },
    {
        "id":272,
        "response":"```python\nfrom typing import List\nfrom functools import reduce\nimport operator\nimport map\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(operator.sub, nums1, nums2))\n\n# Example usage:\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [5, 4, 3, 2, 1]\nprint(sub_list(nums1, nums2))\n```"
    },
    {
        "id":273,
        "response":"```python\nfrom collections import Counter\n\ndef validate(n):\n    str_n = str(n)\n    freq = Counter(str_n)\n    for digit, count in freq.items():\n        if int(digit) < int(count):\n            return False\n    return True\n```"
    },
    {
        "id":274,
        "response":"```python\nfrom typing import List\n\ndef check_element(input_list: List, element: str) -> List:\n    return [item for item in input_list if item == element]\n```"
    },
    {
        "id":275,
        "response":"```python\nimport re\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))\n```"
    },
    {
        "id":276,
        "response":"```python\nfrom typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    if not a or n == 0 or k == 0:\n        return 0\n\n    max_sum = float('-inf')\n    current_sum = 0\n    total_sum = sum(a)\n\n    for i in range(n):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n        if current_sum < 0:\n            current_sum = 0\n\n    if k == 1:\n        return max_sum\n\n    max_sum_k_times = float('-inf')\n    max_sum_k_times = max(max_sum_k_times, max_sum)\n\n    if current_sum > 0:\n        max_sum_k_times = max(max_sum_k_times, current_sum + (k - 1) * total_sum)\n\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += a[i]\n        max_sum_k_times = max(max_sum_k_times, current_sum)\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum_k_times\n```"
    },
    {
        "id":277,
        "response":"```python\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        square = (2 * i) ** 2\n        sum += square\n    return sum\n\n# Alternatively\ndef square_SumAlternative(n):\n    return 4 * (n * (n + 1) * (2 * n + 1)) \/\/ 3\n```"
    },
    {
        "id":278,
        "response":"```python\nimport math\n\ndef modular_inverse(arr, N, P):\n    count = 0\n    for i in range(N):\n        if arr[i] != 0 and math.gcd(arr[i], P) == 1:\n            count += 1\n    return count\n```"
    },
    {
        "id":279,
        "response":"```python\nimport calendar\n\ndef odd_Days(N):\n    odd_days = 0\n    for year in range(1, N+1):\n        if calendar.isleap(year):\n            odd_days += 2\n        else:\n            odd_days += 1\n    return odd_days % 7\n```"
    },
    {
        "id":280,
        "response":"```python\nfrom typing import List\n\ndef max_length(list1: List[List[int]]) -> List[int]:\n    return max(list1, key=len, default=[])\n```"
    },
    {
        "id":281,
        "response":"```python\nfrom typing import List\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same_color, diff_color = k, k * (k - 1)\n    for _ in range(2, n):\n        same_color, diff_color = diff_color, (same_color + diff_color) * (k - 1)\n    \n    return same_color + diff_color\n```"
    },
    {
        "id":282,
        "response":"```python\nfrom typing import Union\n\ndef find(n: Union[int, float], m: Union[int, float]) -> Union[int, float]:\n    if m == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    return n \/ m\n```"
    },
    {
        "id":283,
        "response":"```python\nimport math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(abs(w**2 - h**2)) if w > h else math.sqrt(abs(h**2 - w**2))\n```"
    },
    {
        "id":284,
        "response":"```python\nfrom typing import List\n\ndef max_val(listval: List[int]) -> int:\n    if not listval:\n        raise ValueError(\"List is empty\")\n    return max(listval)\n```"
    },
    {
        "id":285,
        "response":"```python\nimport math\n\ndef sum_div(number: int) -> int:\n    if number < 1:\n        raise ValueError(\"Input number should be greater than 0\")\n    total = 0\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            if i * i != number:\n                total += i + number \/\/ i\n            else:\n                total += i\n    return total\n```"
    },
    {
        "id":286,
        "response":"```python\nfrom typing import List\n\ndef get_Inv_Count(arr: List[int], n: int) -> List[int]:\n    def merge_sort(arr: List[int]) -> List[int]:\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) \/\/ 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        merged, inv_merge = merge(left, right)\n        return merged, inv_left + inv_right + inv_merge\n\n    def merge(left: List[int], right: List[int]) -> List[int]:\n        merged = []\n        i = j = inv_count = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    _, inv_count = merge_sort(arr)\n    return [inv_count]\n```"
    },
    {
        "id":287,
        "response":"```python\nfrom typing import List, Union\n\ndef flatten_list(nested_list: List[Union[List, int]]) -> List[int]:\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n```"
    },
    {
        "id":288,
        "response":"```python\nfrom typing import List\n\ndef intersection_nested_lists(l1: List, l2: List) -> List:\n    flat_l1 = [item for sublist in l1 for item in sublist]\n    flat_l2 = [item for sublist in l2 for item in sublist]\n    return [item for item in flat_l1 if item in flat_l2]\n\n# Example usage:\nl1 = [[1, 2, 3], [4, 5, 6]]\nl2 = [[4, 5, 7], [8, 9, 6]]\nprint(intersection_nested_lists(l1, l2))\n```"
    },
    {
        "id":289,
        "response":"```python\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[int, int]]) -> int:\n    return max(sum(i) for i in stdata)\n```"
    },
    {
        "id":290,
        "response":"```python\nimport math\n\ndef count_binary_seq(n):\n    count = 0\n    for i in range(n + 1):\n        count += math.comb(n, i) * math.comb(n, i)\n    return count\n```"
    },
    {
        "id":291,
        "response":"```python\nfrom typing import Dict, Any\n\ndef dict_depth(d: Dict[str, Any]) -> int:\n    if not isinstance(d, dict):\n        return 0\n    elif not d:\n        return 1\n    else:\n        return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)\n```"
    },
    {
        "id":292,
        "response":"```python\nimport math\n\ndef set_Bit_Number(n):\n    if n == 0:\n        return 0\n    return int(math.log2(n & -n)) + 1\n```"
    },
    {
        "id":293,
        "response":"```python\ndef solve(a, n):\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    def is_reverse(s1, s2):\n        return s1 == s2[::-1]\n\n    palindrome = is_palindrome(a)\n    reverse = False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                reverse = True\n                break\n        if reverse:\n            break\n\n    return palindrome or reverse\n```"
    },
    {
        "id":294,
        "response":"```python\ndef find_Element(arr, ranges, rotations, index):\n    import math\n\n    effective_rotation = 0\n    for start, end in ranges:\n        effective_rotation += rotations[start] % (end - start + 1)\n\n    effective_index = (index - effective_rotation) % len(arr)\n    if effective_index < 0:\n        effective_index += len(arr)\n\n    return arr[effective_index]\n```"
    },
    {
        "id":295,
        "response":"```python\nimport itertools\n\ndef start_withp(words):\n    p_words = [word for word in words if word.startswith('\u09aa\u09bf')]\n    return list(itertools.combinations(p_words, 2))\n```"
    },
    {
        "id":296,
        "response":"```python\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if index >= k or index < 0 or k < 0 or n <= 0:\n        return -1\n    \n    prefix_max_sum = [0]*n\n    prefix_max_sum[0] = a[0]\n    \n    for i in range(1, n):\n        prefix_max_sum[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j]:\n                prefix_max_sum[i] = max(prefix_max_sum[i], prefix_max_sum[j] + a[i])\n                \n    max_sum = float('-inf')\n    for i in range(index, k):\n        max_sum = max(max_sum, prefix_max_sum[i])\n        \n    return max_sum\n```"
    },
    {
        "id":297,
        "response":"```python\ndef colon_tuplex(tuplex, m, n):\n    return tuplex[m:n+1]\n```"
    },
    {
        "id":298,
        "response":"```python\nimport heapq\nimport itertools\n\ndef large_product(nums1, nums2, N):\n    products = list(itertools.product(nums1, nums2))\n    products.sort(key=lambda x: x[0]*x[1], reverse=True)\n    return [x[0]*x[1] for x in products[:N]]\n```"
    },
    {
        "id":299,
        "response":"```python\ndef maximum(a: int, b: int) -> int:\n    return max(a, b)\n```"
    },
    {
        "id":300,
        "response":"```python\ndef string_to_tuple(str1):\n    return tuple(str1)\n```"
    },
    {
        "id":301,
        "response":"```python\ndef set_left_most_unset_bit(n: int) -> int:\n    if n == 0:\n        return 1\n    msb = n.bit_length() - 1\n    mask = 1 << msb\n    return n | mask\n```"
    },
    {
        "id":302,
        "response":"```python\nimport math\n\ndef volume_cone(r, h):\n    return (1\/3) * math.pi * r**2 * h\n```"
    },
    {
        "id":303,
        "response":"```python\nfrom typing import List\n\ndef pos_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num > 0]\n```"
    },
    {
        "id":304,
        "response":"```python\nimport sys\n\ndef max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n\n    dp = [[0]*n for _ in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n\n    for i in range(1, n):\n        dp[0][i] = max(dp[1][i-1] + grid[0][i], dp[1][i-1])\n        dp[1][i] = max(dp[0][i-1] + grid[1][i], dp[0][i-1])\n\n    return max(dp[0][n-1], dp[1][n-1])\n\n# Example usage:\ngrid = [[1, 3, 1], [2, 5, 2]]\nn = 3\nprint(max_sum_rectangular_grid(grid, n))\n```"
    },
    {
        "id":305,
        "response":"```python\nimport re\ndef find_Max_Len_Even(str):\n    words = re.findall(r'\\b\\w+\\b', str)\n    even_len_words = [word for word in words if len(word) % 2 == 0]\n    if even_len_words:\n        max_len = max(len(word) for word in even_len_words)\n        return next(word for word in even_len_words if len(word) == max_len)\n    else:\n        return \"\"\n```"
    },
    {
        "id":306,
        "response":"```python\nfrom typing import List\n\ndef find_last_occurrence(A: List[int], x: int) -> int:\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```"
    },
    {
        "id":307,
        "response":"```python\nfrom itertools import groupby\nfrom typing import List\n\ndef modified_encode(alist: List[int]) -> List[int]:\n    result = []\n    for key, group in groupby(alist):\n        count = sum(1 for _ in group)\n        result.extend([count, key])\n    return result\n```"
    },
    {
        "id":308,
        "response":"```python\nimport math\n\ndef max_volume(s):\n    a = s \/ 6\n    return a**3\n```"
    },
    {
        "id":309,
        "response":"```python\nimport re\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)\n```"
    },
    {
        "id":310,
        "response":"```python\ndef sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1))**2\n    return square_of_sum - sum_of_squares\n```"
    },
    {
        "id":311,
        "response":"```python\ndef find_demlo(s):\n    n = int(s)\n    demlo = int(s + s[::-1])\n    return demlo\n```"
    },
    {
        "id":312,
        "response":"```python\nfrom typing import List\n\ndef position_min(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    \n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]\n\n# Example usage:\nprint(position_min([1, 2, 3, 4, 5, 1])) \nprint(position_min([5, 5, 5, 5, 5])) \nprint(position_min([]))\n```"
    },
    {
        "id":313,
        "response":"```python\nfrom typing import List\n\ndef rearrange(arr: List[int]) -> List[int]:\n    n = len(arr)\n    positive = []\n    negative = []\n    \n    for num in arr:\n        if num >= 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n            \n    result = []\n    min_len = min(len(positive), len(negative))\n    \n    for i in range(min_len):\n        result.append(negative[i])\n        result.append(positive[i])\n        \n    result += positive[min_len:]\n    result += negative[min_len:]\n    \n    return result\n\n# Test the function\nprint(rearrange([1, -2, 3, -4, 5, -6]))\n```"
    },
    {
        "id":314,
        "response":"```python\nfrom typing import Tuple\n\ndef sum_of_alternates(test_tuple: Tuple[int, ...]) -> int:\n    return sum(test_tuple[::2]) + sum(test_tuple[1::2])\n```"
    },
    {
        "id":315,
        "response":"```python\nimport math\n\ndef get_Min_Squares(n: int) -> int:\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n```"
    },
    {
        "id":316,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef most_occurrences(test_list: List[str]) -> str:\n    counter = Counter(test_list)\n    max_count = max(counter.values())\n    most_common_words = [word for word, count in counter.items() if count == max_count]\n    return most_common_words[0]\n\n# Example usage:\nprint(most_occurrences([\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\"]))\n```"
    },
    {
        "id":317,
        "response":"```python\nimport math\n\ndef check_right_angled(x, y, z):\n    sides = [x, y, z]\n    sides.sort()\n    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)\n\ndef main():\n    x = 3\n    y = 4\n    z = 5\n    if check_right_angled(x, y, z):\n        print(\"The triangle is right-angled.\")\n    else:\n        print(\"The triangle is not right-angled.\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":318,
        "response":"```python\nfrom typing import List\n\ndef rotate_left(list1: List[int], m: int, n: int) -> List[int]:\n    m = m % len(list1)\n    return list1[m:] + list1[:m]\n```"
    },
    {
        "id":319,
        "response":"```python\nfrom typing import List\n\ndef neg_count(lst: List[int]) -> int:\n    return sum(1 for num in lst if num < 0)\n```"
    },
    {
        "id":320,
        "response":"```python\nimport re\ndef find_char(text):\n    return re.findall(r'\\b\\w{3,5}\\b', text)\n```"
    },
    {
        "id":321,
        "response":"```python\ndef count_unset_bits(n: int) -> int:\n    import math\n    if n == 0:\n        return 1\n    bits = math.floor(math.log2(n)) + 1\n    return bits - bin(n).count('1')\n```"
    },
    {
        "id":322,
        "response":"```python\nfrom collections import Counter\nfrom typing import Dict\n\ndef char_frequency(str1: str) -> Dict[str, int]:\n    frequency = Counter(str1)\n    return dict(frequency)\n```"
    },
    {
        "id":323,
        "response":"```python\nfrom typing import List\n\ndef Sort(sub_li: List[List[int]]) -> List[List[int]]:\n    return sorted(sub_li, key=lambda x: x[1])\n```"
    },
    {
        "id":324,
        "response":"```python\ndef check_Validity(a: float, b: float, c: float) -> bool:\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":325,
        "response":"```python\ndef ap_sum(a, n, d):\n    return n * (2 * a + (n - 1) * d) \/\/ 2\n```"
    },
    {
        "id":326,
        "response":"```python\nimport calendar\n\ndef check_monthnum(monthname):\n    month_dict = {\n        'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6,\n        'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12\n    }\n    if monthname in month_dict:\n        return calendar.monthrange(2024, month_dict[monthname])[1] == 28\n    else:\n        return False\n```"
    },
    {
        "id":327,
        "response":"```python\nimport re\ndef text_match_word(text):\n    pattern = r'.*\\b\\w+\\b$'\n    return bool(re.match(pattern, text))\n```"
    },
    {
        "id":328,
        "response":"```python\nfrom typing import List\n\ndef count_substrings(s: str) -> int:\n    n = len(s)\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if s[i] == s[j - 1]:\n                res += 1\n    return res\n\ndef main():\n    print(count_substrings(\"abcba\"))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":329,
        "response":"```python\nimport math\n\ndef find_Divisor(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def count_divisors(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n \/\/ i == i:\n                    count += 1\n                else:\n                    count += 2\n        return count\n\n    max_divisor = 0\n    max_count = 0\n    for i in range(x, y + 1):\n        count = count_divisors(i)\n        if count > max_count:\n            max_count = count\n            max_divisor = i\n    return max_divisor\n```"
    },
    {
        "id":330,
        "response":"```python\nimport heapq\ndef sum_three_smallest_nums(lst):\n    if len(lst) < 3:\n        return sum(lst)\n    return sum(heapq.nsmallest(3, [i for i in lst if i > 0]))\n```"
    },
    {
        "id":331,
        "response":"```python\nimport typing\n\ndef set_to_tuple(s: typing.Set) -> tuple:\n    return tuple(sorted(s))\n```"
    },
    {
        "id":332,
        "response":"```python\nimport heapq\nfrom typing import List\n\nclass Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n        pq = [(row[0], i, 0) for i, row in enumerate(nums)]\n        heapq.heapify(pq)\n        \n        ans = -1e9, 1e9\n        right = max(row[0] for row in nums)\n        while pq:\n            left, i, j = heapq.heappop(pq)\n            if right - left < ans[1] - ans[0]:\n                ans = left, right\n            if j + 1 == len(nums[i]):\n                return ans\n            v = nums[i][j+1]\n            right = max(right, v)\n            heapq.heappush(pq, (v, i, j+1))\n```"
    },
    {
        "id":333,
        "response":"```python\nimport re\nfrom typing import Tuple\n\ndef dig_let(s: str) -> Tuple[int, int]:\n    letters = len(re.findall(r'[a-zA-Z]', s))\n    digits = len(re.findall(r'\\d', s))\n    return letters, digits\n```"
    },
    {
        "id":334,
        "response":"```python\nimport math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    i = 1\n    while i * i <= m:\n        if i * i >= n:\n            if i % 2 != 0:\n                count += 1\n        i += 1\n    return count\n```"
    },
    {
        "id":335,
        "response":"```python\nfrom typing import List\n\ndef diff_consecutivenums(nums: List[int]) -> List[int]:\n    if len(nums) < 2:\n        return []\n    return [abs(nums[i] - nums[i-1]) for i in range(1, len(nums))]\n```"
    },
    {
        "id":336,
        "response":"```python\nimport math\n\ndef zigzag(n, k):\n    if k > n:\n        return 0\n    if k == 1:\n        return 1\n    if k == 2:\n        return math.comb(n-1, 1)\n    if k == 3:\n        return math.comb(n-1, 2)\n    if k > 3:\n        return 2 * math.comb(n-1, k-1) - math.comb(n-2, k-2)\n    return 0\n```"
    },
    {
        "id":337,
        "response":"```python\nimport math\n\ndef count_Squares(m, n):\n    return m * n * (m + 1) * (n + 1) \/\/ 4\n```"
    },
    {
        "id":338,
        "response":"```python\nimport math\n\ndef bin_coff(n, r):\n    if r > n - r:\n        r = n - r\n    if r < 0:\n        return 0\n    if r == 0:\n        return 1\n    return math.comb(n, r)\n```"
    },
    {
        "id":339,
        "response":"```python\nimport re\ndef check(string) :\n    if re.fullmatch('[01]+', string):\n        return string\n    else:\n        return None\n```"
    },
    {
        "id":340,
        "response":"```python\nimport re\ndef minimum_Length(s: str) -> str:\n    while True:\n        prev_s = s\n        s = re.sub(r'(.)\\1', '', s)\n        if prev_s == s:\n            break\n    return s\n```"
    },
    {
        "id":341,
        "response":"```python\nfrom collections import Counter\nimport typing\n\ndef first_Element(arr: typing.List[int], n: int, k: int) -> typing.List[int]:\n    count = Counter(arr)\n    for num in arr:\n        if count[num] == k:\n            return [num]\n    return []\n```"
    },
    {
        "id":342,
        "response":"```python\nfrom typing import Any\n\ndef unique_Characters(str: str) -> Any:\n    return len(str) == len(set(str))\n```"
    },
    {
        "id":343,
        "response":"```python\nfrom typing import List\n\ndef remove_column(nested_list: List[List], n: int) -> List[List]:\n    return [sublist[:n] + sublist[n+1:] for sublist in nested_list]\n```"
    },
    {
        "id":344,
        "response":"```python\ndef tn_ap(a, n, d):\n    return a + (n - 1) * d\n```"
    },
    {
        "id":345,
        "response":"```python\nimport math\n\ndef count_Rectangles(radius):\n    count = 0\n    for w in range(1, int(2*radius) + 1):\n        for h in range(1, int(2*radius) + 1):\n            if w % 2 == 0 and h % 2 == 0:\n                if (w\/2)**2 + (h\/2)**2 <= radius**2:\n                    count += 1\n            elif w % 2 != 0 and h % 2 != 0:\n                if (w\/2)**2 + (h\/2)**2 <= radius**2:\n                    count += 1\n    return count\n```"
    },
    {
        "id":346,
        "response":"```python\nimport math\n\ndef find_angle(a, b):\n    c = 180 - (a + b)\n    if c <= 0:\n        raise ValueError(\"Invalid input: The sum of the two angles must be less than 180 degrees.\")\n    return c\n```"
    },
    {
        "id":347,
        "response":"```python\nfrom typing import List, Tuple\n\ndef find_max(test_list: List[Tuple[int, int]]) -> int:\n    return max(max(i) for i in test_list)\n```"
    },
    {
        "id":348,
        "response":"```python\nfrom typing import List\nimport operator\nimport functools\nimport map\n\ndef moddiv_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must be of the same length\")\n    if len(nums2) == 0:\n        raise ValueError(\"Cannot divide by zero or empty list\")\n    if any(x == 0 for x in nums2):\n        raise ValueError(\"Cannot divide by zero\")\n    \n    return list(map(lambda pair: pair[0] % pair[1], zip(nums1, nums2)))\n```"
    },
    {
        "id":349,
        "response":"```python\nimport math\ndef Check_Solution(a, b, c):\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        return False\n    root1 = (-b + math.sqrt(determinant)) \/ (2*a)\n    root2 = (-b - math.sqrt(determinant)) \/ (2*a)\n    return abs(root1 - 2*root2) < 1e-9 or abs(root2 - 2*root1) < 1e-9\n```"
    },
    {
        "id":350,
        "response":"```python\nimport math\n\ndef get_carol(n):\n    return (n**2 + n + 2) \/\/ 2\n```"
    },
    {
        "id":351,
        "response":"```python\nfrom typing import List\n\ndef remove_empty(list1: List[List]) -> List[List]:\n    return [sublist for sublist in list1 if sublist != []]\n```"
    },
    {
        "id":352,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)\n\ndef max_occurrences_all(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    max_count = max(count.values())\n    return [num for num, freq in count.items() if freq == max_count]\n```"
    },
    {
        "id":353,
        "response":"```python\nfrom typing import List, Tuple\n\ndef add_K_element(test_list: List[Tuple[int, int]], K: int) -> List[Tuple[int, int]]:\n    return [(i + K, j + K) for i, j in test_list]\n```"
    },
    {
        "id":354,
        "response":"```python\ndef min_flips_to_alternate(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n\n    flips_start_with_0 = 0\n    flips_start_with_1 = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] != '0':\n                flips_start_with_0 += 1\n            if s[i] != '1':\n                flips_start_with_1 += 1\n        else:\n            if s[i] != '1':\n                flips_start_with_0 += 1\n            if s[i] != '0':\n                flips_start_with_1 += 1\n\n    return min(flips_start_with_0, flips_start_with_1)\n```"
    },
    {
        "id":355,
        "response":"```python\nimport math\n\ndef count_Digit(n: int) -> int:\n    if n == 0:\n        return 1\n    if n < 0:\n        n = -n\n    return math.floor(math.log10(n)) + 1\n```"
    },
    {
        "id":356,
        "response":"```python\nfrom typing import List\n\ndef adjacent_num_product(list_nums: List[int]) -> int:\n    if len(list_nums) < 2:\n        raise ValueError(\"Input list must contain at least two elements\")\n    \n    max_product = float('-inf')\n    for i in range(len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        max_product = max(max_product, product)\n    \n    return max_product\n```"
    },
    {
        "id":357,
        "response":"```python\nimport math\nfrom typing import Optional\n\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef is_balanced(root: Optional[TreeNode]) -> bool:\n    def check(root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        left = check(root.left)\n        right = check(root.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1\n        return 1 + max(left, right)\n    \n    return check(root) != -1\n\ndef main():\n    # Test the function\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    print(is_balanced(root))  # Expected output: True\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":358,
        "response":"```python\nimport typing\n\ndef repeat_tuples(test_tup: typing.Tuple, N: int) -> typing.Tuple:\n    return test_tup * N\n```"
    },
    {
        "id":359,
        "response":"```python\ndef lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)\n```"
    },
    {
        "id":360,
        "response":"```python\nfrom typing import Tuple\n\ndef float_sort(price: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple(sorted(price))\n```"
    },
    {
        "id":361,
        "response":"```python\nfrom typing import List\n\ndef smallest_missing(A: List[int], left_element: int, right_element: int) -> int:\n    A = sorted(list(set(A)))\n    if left_element not in A:\n        if A[0] > left_element:\n            return left_element\n        else:\n            return left_element\n    for i in range(len(A) - 1):\n        if A[i] < left_element:\n            continue\n        if A[i + 1] - A[i] > 1:\n            return A[i] + 1\n    if A[-1] < right_element:\n        return A[-1] + 1\n    return right_element + 1\n```"
    },
    {
        "id":362,
        "response":"```python\nimport heapq\n\ndef heap_assending(nums):\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(len(nums))]\n\n# Example usage:\nnums = [5, 2, 8, 1, 9]\nprint(heap_assending(nums))\n```"
    },
    {
        "id":363,
        "response":"```python\nimport typing\n\ndef volume_cuboid(l: float, w: float, h: float) -> float:\n    return l * w * h\n```"
    },
    {
        "id":364,
        "response":"```python\nimport itertools\n\ndef permute_string(s):\n    perms = [''.join(p) for p in itertools.permutations(s)]\n    return [perm for i, perm in enumerate(perms) if perm in perms[:i]]\n\ndef permute_string_main(s):\n    perms = [''.join(p) for p in itertools.permutations(s)]\n    unique_perms = set(perms)\n    duplicate_perms = [perm for perm in unique_perms if perms.count(perm) > 1]\n    return duplicate_perms\n\nprint(permute_string_main(\"abc\"))\nprint(permute_string_main(\"aab\"))\n```"
    },
    {
        "id":365,
        "response":"```python\nimport math\n\ndef round_num(n, m):\n    return m * round(n \/ m)\n```"
    },
    {
        "id":366,
        "response":"```python\nfrom typing import Tuple, Any\n\ndef remove_replica(test_tup: Tuple[Any], replacement: Any = None) -> Tuple[Any]:\n    seen = set()\n    return tuple(x if x not in seen else replacement for x in test_tup if not (x in seen or seen.add(x)))\n```"
    },
    {
        "id":367,
        "response":"```python\ndef remove_Char(s, c):\n    return s.replace(c, \"\")\n```"
    },
    {
        "id":368,
        "response":"```python\ndef move_first(test_list):\n    if len(test_list) > 1:\n        return [test_list[-1]] + test_list[:-1]\n    else:\n        return test_list\n```"
    },
    {
        "id":369,
        "response":"```python\ndef surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + l * h)\n```"
    },
    {
        "id":370,
        "response":"```python\ndef multi_list(rownum, colnum):\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]\n\n# Example usage:\ndef main():\n    row = 3\n    col = 4\n    multi_dim_list = multi_list(row, col)\n    for i in multi_dim_list:\n        print(i)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":371,
        "response":"```python\nfrom typing import List\n\ndef index_on_inner_list(list_data: List[List], index_no: int) -> List[List]:\n    try:\n        return sorted(list_data, key=lambda x: x[index_no])\n    except IndexError:\n        return []\n```"
    },
    {
        "id":372,
        "response":"```python\nfrom typing import List\n\ndef find_rotation_count(A: List[int]) -> int:\n    low, high = 0, len(A) - 1\n    if A[low] <= A[high]:\n        return 0\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if A[mid] > A[mid + 1]:\n            return mid + 1\n        if A[low] <= A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```"
    },
    {
        "id":373,
        "response":"```python\ndef even_bit_toggle_number(n) :\n    import ctypes\n    max_bits = ctypes.sizeof(ctypes.c_int) * 8\n    mask = 0\n    for i in range(max_bits):\n        if (i + 1) % 2 == 0:\n            mask |= 1 << i\n    return n ^ mask\n```"
    },
    {
        "id":374,
        "response":"```python\nfrom typing import List\nimport collections\n\ndef frequency_Of_Smallest(n: int, arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    freq = collections.Counter(arr)\n    smallest = min(arr)\n    return freq[smallest]\n```"
    },
    {
        "id":375,
        "response":"```python\nimport math\n\ndef get_perrin(n: int) -> int:\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 3, 0, 2\n        for _ in range(3, n + 1):\n            a, b, c = b, c, 2 * b + a\n        return c\n```"
    },
    {
        "id":376,
        "response":"```python\nfrom collections import deque\n\ndef swap_count(s):\n    stack = deque()\n    swap = 0\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(c)\n                swap += 1\n    swap += len(stack) \/\/ 2\n    return swap\n```"
    },
    {
        "id":377,
        "response":"```python\nimport re\n\ndef even_or_odd(N):\n    if not isinstance(N, str):\n        raise TypeError(\"Input must be a string\")\n    if not re.match('^[0-9A-Fa-f]+$', N):\n        raise ValueError(\"Invalid hexadecimal number\")\n    decimal = int(N, 16)\n    return \"Even\" if decimal % 2 == 0 else \"Odd\"\n```"
    },
    {
        "id":378,
        "response":"```python\nimport math\n\ndef highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 2 ** math.floor(math.log2(n))\n```"
    },
    {
        "id":379,
        "response":"```python\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```"
    },
    {
        "id":380,
        "response":"```python\nfrom typing import List\n\ndef add_string(input_list: List[str], string: str) -> List[str]:\n    return [string + item for item in input_list]\n\n# Example usage:\ndef main():\n    input_list = [\"apple\", \"banana\", \"cherry\"]\n    string = \"fruit_\"\n    print(add_string(input_list, string))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":381,
        "response":"```python\nfrom typing import List, Dict\n\ndef convert_list_dictionary(*lists: List) -> Dict:\n    result = {}\n    for i, lst in enumerate(lists):\n        if i == 0:\n            for item in lst:\n                result[item] = {}\n        else:\n            for j, item in enumerate(lst):\n                if j < len(result):\n                    keys = list(result.keys())\n                    result[keys[j]].update({f'key_{i}': item})\n                else:\n                    break\n    return result\n\n# Example usage:\nl1 = ['a', 'b', 'c']\nl2 = [1, 2, 3]\nl3 = ['x', 'y', 'z']\n\nprint(convert_list_dictionary(l1, l2, l3))\n```"
    },
    {
        "id":382,
        "response":"```python\nimport functools\n\ndef get_max_sum(n: int) -> int:\n    @functools.lru_cache(None)\n    def dp(n: int) -> int:\n        if n <= 1:\n            return n\n        max_sum = 0\n        for i in [n \/\/ 2, n \/\/ 3, n \/\/ 4, n \/\/ 5]:\n            if i >= 1:\n                max_sum = max(max_sum, dp(i))\n        return max(max_sum + dp(n - i), n)\n\n    return dp(n)\n```"
    },
    {
        "id":383,
        "response":"```python\nfrom typing import List, Any\nfrom functools import reduce\n\ndef max_length_list(input_list: List[List[Any]]) -> List[Any]:\n    return reduce(lambda x, y: x if len(x) >= len(y) else y, input_list)\n```"
    },
    {
        "id":384,
        "response":"```python\nfrom typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))\n```"
    },
    {
        "id":385,
        "response":"```python\nfrom collections import Counter\n\ndef first_non_repeating_character(str1):\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n```"
    },
    {
        "id":386,
        "response":"```python\ndef check_char(string):\n    if not string:\n        return False\n    return string[0] == string[-1]\n```"
    },
    {
        "id":387,
        "response":"```python\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n```"
    },
    {
        "id":388,
        "response":"```python\nfrom typing import List\n\ndef sum_of_digits(nums: List[int]) -> List[int]:\n    return [sum(int(digit) for digit in str(abs(num))) for num in nums]\n```"
    },
    {
        "id":389,
        "response":"```python\nimport operator\nimport itertools\n\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(map(operator.xor, test_tup1, test_tup2))\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6, 7, 8)\nprint(bitwise_xor(test_tup1, test_tup2))\n```"
    },
    {
        "id":390,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> dict:\n    test_list = [tuple(sorted(t)) for t in test_list]\n    return dict(Counter(test_list))\n\n# Example usage:\ntest_list = [(1, 2), (2, 1), (3, 4), (4, 3), (1, 2)]\nprint(extract_freq(test_list))\n```"
    },
    {
        "id":391,
        "response":"```python\nfrom typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n\n    result = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result += ((test_tup1[i] + test_tup2[i]),)\n\n    return result\n```"
    },
    {
        "id":392,
        "response":"```python\nimport math\n\ndef ncr_modp(n, r, p):\n    if r > n - r:\n        r = n - r\n    res = 1\n    for i in range(r):\n        res = (res * (n - i)) % p\n        res = (res * pow(i + 1, p - 2, p)) % p\n    return res\n```"
    },
    {
        "id":393,
        "response":"```python\nimport re\nfrom urllib.parse import urlparse\n\ndef is_valid_URL(str):\n    try:\n        result = urlparse(str)\n        return all([result.scheme, result.netloc]) and bool(re.match(r'^https?:\\\/\\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&\/\/=]*)$', str))\n    except ValueError:\n        return False\n```"
    },
    {
        "id":394,
        "response":"```python\ndef minimum(a: int, b: int) -> int:\n    return min(a, b)\n```"
    },
    {
        "id":395,
        "response":"```python\ndef check_tuplex(tuplex, tuple1):\n    return tuplex in tuple1\n```"
    },
    {
        "id":396,
        "response":"```python\ndef find_Parity(x: int) -> str:\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n```"
    },
    {
        "id":397,
        "response":"```python\nfrom typing import List\n\ndef rearrange_bigger(n: int) -> int:\n    digits: List[int] = [int(x) for x in str(n)]\n    i: int = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i < 0:\n        return -1\n    j: int = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1:] = digits[i + 1:][::-1]\n    result: int = int(''.join(map(str, digits)))\n    return result\n\n# Example usage:\nprint(rearrange_bigger(121)) \nprint(rearrange_bigger(122)) \nprint(rearrange_bigger(123)) \nprint(rearrange_bigger(987654321)) \nprint(rearrange_bigger(54321)) \nprint(rearrange_bigger(111)) \n```"
    },
    {
        "id":398,
        "response":"```python\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(queue)\n    result = []\n    \n    while queue and len(result) < k:\n        _, i, j = heapq.heappop(queue)\n        result.append([nums1[i], nums2[j]])\n        \n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n    \n    return result\n```"
    },
    {
        "id":399,
        "response":"```python\nimport itertools\nimport math\n\ndef min_product_tuple(list1):\n    if len(list1) < 2:\n        raise ValueError(\"Input list must contain at least two tuples\")\n    \n    min_product = math.inf\n    for tuple1, tuple2 in itertools.combinations(list1, 2):\n        product = tuple1[0] * tuple2[0] + tuple1[1] * tuple2[1]\n        min_product = min(min_product, product)\n    return min_product\n\n# Example usage:\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(min_product_tuple(list1))\n```"
    },
    {
        "id":400,
        "response":"```python\nfrom typing import List\n\ndef min_val(listval: List[int]) -> int:\n    if not listval:\n        raise ValueError(\"List is empty\")\n    return min(listval)\n```"
    },
    {
        "id":401,
        "response":"```python\nimport re\n\ndef snake_to_camel(word: str) -> str:\n    components = word.split('_')\n    return components[0] + ''.join(x.capitalize() for x in components[1:])\n\ndef snake_to_camel_regex(word: str) -> str:\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n\nprint(snake_to_camel(\"hello_world\")) \nprint(snake_to_camel_regex(\"hello_world\"))\n```"
    },
    {
        "id":402,
        "response":"```python\ndef remove_odd(l):\n    return [i for i in l if i % 2 == 0]\n```"
    },
    {
        "id":403,
        "response":"```python\nfrom typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[Any, ...]], n: int) -> List[Any]:\n    return [tup[n] for tup in list1 if n < len(tup)]\n```"
    },
    {
        "id":404,
        "response":"```python\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> List[int]:\n    set2 = set(list2)\n    return [value for value in list1 if value in set2]\n```"
    },
    {
        "id":405,
        "response":"```python\nimport sys\nfrom typing import List\n\ndef max_Product(arr: List[int]) -> List[int]:\n    if len(arr) < 2:\n        return []\n    \n    arr.sort()\n    return [arr[-1], arr[-2]] if arr[-1] * arr[-2] > arr[0] * arr[1] else [arr[0], arr[1]]\n\n# Example usage:\nprint(max_Product([-10, -10, 1, 3, 2]))\n```"
    },
    {
        "id":406,
        "response":"```python\ndef breakSum(n):\n    if n < 10:\n        return n\n    max_sum = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            a, b, c = i, j - i, n - j\n            max_sum = max(max_sum, a * b * c)\n    return max_sum\n```"
    },
    {
        "id":407,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\ndef common_first_element(tuples_list: List[Tuple]) -> any:\n    if not tuples_list:\n        return None\n\n    first_elements = [t[0] for t in tuples_list]\n    count_dict = defaultdict(int)\n\n    for element in first_elements:\n        count_dict[element] += 1\n\n    max_count = max(count_dict.values())\n    common_elements = [k for k, v in count_dict.items() if v == max_count]\n\n    if len(common_elements) == 1:\n        return common_elements[0]\n    else:\n        return common_elements\n\n\ndef group_tuples(tuples_list: List[Tuple]) -> List[Tuple]:\n    if not tuples_list:\n        return []\n\n    first_elements = [t[0] for t in tuples_list]\n    result = []\n\n    for element in set(first_elements):\n        group = [t for t in tuples_list if t[0] == element]\n        result.append(group)\n\n    return result\n\n\n# Test the functions\ntuples_list = [(1, 2), (1, 3), (2, 4), (2, 5), (1, 6)]\nprint(common_first_element(tuples_list))\nprint(group_tuples(tuples_list))\n```"
    },
    {
        "id":408,
        "response":"```python\nfrom typing import List\n\ndef Find_Max(lst: List[List[int]]) -> List[int]:\n    return max(lst, key=len, default=[])\n```"
    },
    {
        "id":409,
        "response":"```python\nimport math\n\ndef round_and_sum(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    return total_sum * len(list1)\n\n# Example usage:\nlist1 = [1.2, 2.6, 3.7]\nprint(round_and_sum(list1))\n```"
    },
    {
        "id":410,
        "response":"```python\ndef cube_Sum(n):\n    return sum(i**3 for i in range(2, 2*n+1, 2))\n```"
    },
    {
        "id":411,
        "response":"```python\nimport re\n\ndef concatenate_tuple(test_tup, delimiter=\",\"):\n    return delimiter.join(map(str, test_tup))\n\n# Example usage:\nprint(concatenate_tuple((1, 2, 3, 4, 5))) \nprint(concatenate_tuple((1, 2, 3, 4, 5), \"-\"))\n```"
    },
    {
        "id":412,
        "response":"```python\nimport math\n\ndef find_Average_Of_Cube(n: int) -> float:\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes \/ n\n    return average\n```"
    },
    {
        "id":413,
        "response":"```python\ndef get_maxgold(gold, m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        dp[i][n-1] = gold[i][n-1]\n    for j in range(n-2, -1, -1):\n        for i in range(m):\n            if i == 0:\n                dp[i][j] = gold[i][j] + max(dp[i][j+1], dp[i+1][j+1])\n            elif i == m-1:\n                dp[i][j] = gold[i][j] + max(dp[i-1][j+1], dp[i][j+1])\n            else:\n                dp[i][j] = gold[i][j] + max(dp[i-1][j+1], dp[i][j+1], dp[i+1][j+1])\n    return max(dp[0])\n```"
    },
    {
        "id":414,
        "response":"```python\nfrom typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [item[-1] for item in test_tuple]\n```"
    },
    {
        "id":415,
        "response":"```python\nfrom typing import List\n\ndef count_sublist_with_element(lst: List[List], target) -> int:\n    count = 0\n    for sub_list in lst:\n        if target in sub_list:\n            count += 1\n    return count\n```"
    },
    {
        "id":416,
        "response":"```python\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    odd_filter = lambda x: x % 2 != 0\n    return list(filter(odd_filter, nums))\n```"
    },
    {
        "id":417,
        "response":"```python\nimport re\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n```"
    },
    {
        "id":418,
        "response":"```python\ndef shell_sort(my_list):\n    import math\n    n = len(my_list)\n    gap = math.floor(n \/ 2)\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = math.floor(gap \/ 2)\n\n    return my_list\n```"
    },
    {
        "id":419,
        "response":"```python\nimport itertools\n\ndef and_tuples(test_tup1, test_tup2):\n    elements = list(itertools.chain(test_tup1, test_tup2))\n    unique_elements = list(set(elements))\n    unique_tuples = list(set([tuple(sorted(t)) for t in itertools.combinations(elements, 2)]))\n    return unique_elements, unique_tuples\n\n# Test the function\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (3, 4, 5)\nprint(and_tuples(test_tup1, test_tup2))\n```"
    },
    {
        "id":420,
        "response":"```python\nimport math\n\ndef parabola_directrix(a, b, c):\n    p = 1 \/ (4 * a)\n    directrix = -p + c \/ a if a > 0 else p + c \/ a\n    return directrix\n```"
    },
    {
        "id":421,
        "response":"```python\nfrom typing import List\n\ndef common_element(list1: List, list2: List) -> bool:\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1 & set2)\n```"
    },
    {
        "id":422,
        "response":"```python\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2\n```"
    },
    {
        "id":423,
        "response":"```python\nimport numpy as np\n\ndef check_greater(arr, number):\n    return np.array([x > number for x in arr])\n```"
    },
    {
        "id":424,
        "response":"```python\nimport re\ndef text_match_one(text):\n    pattern = r\"^.*b.*$\"\n    return bool(re.match(pattern, text, re.IGNORECASE))\n```"
    },
    {
        "id":425,
        "response":"```python\ndef last_Digit(n: int) -> int:\n    return abs(n) % 10\n```"
    },
    {
        "id":426,
        "response":"```python\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    neg_numbers = [num for num in list1 if num < 0]\n    print(neg_numbers)\n    return list1\n```"
    },
    {
        "id":427,
        "response":"```python\ndef remove_odd(str1):\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])\n```"
    },
    {
        "id":428,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    pair_count = defaultdict(int)\n    for pair in test_list:\n        pair_count[tuple(sorted(pair))] += 1\n    bidirectional_count = sum(1 for count in pair_count.values() if count > 1)\n    return bidirectional_count\n```"
    },
    {
        "id":429,
        "response":"```python\nimport itertools\n\ndef multiple_to_single(L):\n    return int(''.join(map(str, L)))\n\n# Example usage:\nprint(multiple_to_single([1, 2, 3, 4, 5]))  # Outputs: 12345\n```"
    },
    {
        "id":430,
        "response":"```python\nimport nltk\nfrom nltk import word_tokenize, pos_tag\n\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_verb_position(text):\n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    verb_positions = [(word, i) for i, (word, pos) in enumerate(tagged) if pos in ['VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']]\n    return verb_positions\n\ntext = \"The dog is running quickly and jumping high.\"\nprint(find_verb_position(text))\n```"
    },
    {
        "id":431,
        "response":"```python\ndef surfacearea_cube(l: float) -> float:\n    if l <= 0:\n        raise ValueError(\"Length must be a positive number\")\n    return 6 * (l ** 2)\n```"
    },
    {
        "id":432,
        "response":"```python\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    count = sum(1 for num in nums if num > 0)\n    if len(nums) == 0:\n        return 0.0\n    return count \/ len(nums)\n```"
    },
    {
        "id":433,
        "response":"```python\ndef largest_neg(list1):\n    neg_nums = [num for num in list1 if num < 0]\n    return max(neg_nums) if neg_nums else None\n```"
    },
    {
        "id":434,
        "response":"```python\nfrom typing import List, Tuple\n\ndef trim_tuple(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return [t[:K] + t[-K:] if len(t) > 2*K else t for t in test_list]\n```"
    },
    {
        "id":435,
        "response":"```python\nfrom typing import Tuple\n\ndef index_multiplication(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":436,
        "response":"```python\nfrom typing import List, Tuple\n\ndef count_Occurrence(tup: Tuple, lst: List) -> Tuple:\n    result = []\n    for i in tup:\n        result.append(lst.count(i))\n    return tuple(result)\n\n# Example usage:\ntup = (1, 2, 3)\nlst = [1, 2, 2, 3, 3, 3]\nprint(count_Occurrence(tup, lst))\n```"
    },
    {
        "id":437,
        "response":"```python\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return list(map(lambda x: x ** 3, nums))\n```"
    },
    {
        "id":438,
        "response":"```python\nimport math\n\ndef cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if all(i % j != 0 for j in range(2, int(math.sqrt(i)) + 1)):\n            sum += i\n    return sum\n```"
    },
    {
        "id":439,
        "response":"```python\nimport math\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    side1 = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    side2 = math.sqrt((x3-x2)**2 + (y3-y2)**2)\n    side3 = math.sqrt((x1-x3)**2 + (y1-y3)**2)\n    if side1 + side2 > side3 and side2 + side3 > side1 and side1 + side3 > side2:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":440,
        "response":"```python\nfrom typing import List\n\ndef extract_string(strings: List[str], length: int) -> List[str]:\n    return [s for s in strings if len(s) == length]\n```"
    },
    {
        "id":441,
        "response":"```python\nimport re\n\ndef remove_whitespaces(text1: str) -> str:\n    return re.sub(r'\\s+', '', text1)\n```"
    },
    {
        "id":442,
        "response":"```python\ndef loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n```"
    },
    {
        "id":443,
        "response":"```python\ndef sumofFactors(n):\n    import math\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                sum += i\n            else:\n                sum += i\n                sum += n \/\/ i\n    return sum - n\n```"
    },
    {
        "id":444,
        "response":"```python\nimport re\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)\n```"
    },
    {
        "id":445,
        "response":"```python\nimport calendar\n\ndef check_month_number(monthnum):\n    if monthnum < 1 or monthnum > 12:\n        return False\n    return calendar.monthrange(2024, monthnum)[1] == 31\n```"
    },
    {
        "id":446,
        "response":"```python\nfrom typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]\n```"
    },
    {
        "id":447,
        "response":"```python\nfrom typing import List\n\ndef Find_Min(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    \n    min_len = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len and len(set(sublist)) == len(sublist):\n                min_len = len(sublist)\n                min_sublist = sublist\n                \n    return min_sublist\n```"
    },
    {
        "id":448,
        "response":"```python\ndef rectangle_area(l, b):\n    return l * b\n```"
    },
    {
        "id":449,
        "response":"```python\nimport re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)\n```"
    },
    {
        "id":450,
        "response":"```python\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    return [sublist[0] for sublist in lst if sublist]\n```"
    },
    {
        "id":451,
        "response":"```python\ndef upper_ctr(str):\n    return sum(1 for c in str if c.isupper())\n```"
    },
    {
        "id":452,
        "response":"```python\nimport itertools\n\ndef combinations_list(input_list):\n    result = []\n    for r in range(1, len(input_list) + 1):\n        result.extend(itertools.combinations(input_list, r))\n    return result\n\n# Example usage:\nlist1 = [1, 2, 3]\nprint(combinations_list(list1))\n```"
    },
    {
        "id":453,
        "response":"```python\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n```"
    },
    {
        "id":454,
        "response":"```python\nfrom typing import Dict\n\ndef check_value(input_dict: Dict, n) -> Dict:\n    if not input_dict:\n        return {\"result\": True, \"value\": None}\n    \n    initial_value = next(iter(input_dict.values()))\n    \n    if all(value == initial_value for value in input_dict.values()):\n        return {\"result\": True, \"value\": initial_value}\n    else:\n        return {\"result\": False, \"value\": None}\n\n# Example usage:\nprint(check_value({\"a\": 1, \"b\": 1, \"c\": 1}, 1))\nprint(check_value({\"a\": 1, \"b\": 2, \"c\": 1}, 1))\n```"
    },
    {
        "id":455,
        "response":"```python\ndef drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value}\n```"
    },
    {
        "id":456,
        "response":"```python\nimport math\n\ndef find_peak_element(arr):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if (mid == 0 or arr[mid] >= arr[mid - 1]) and (mid == len(arr) - 1 or arr[mid] >= arr[mid + 1]):\n            return arr[mid]\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n# Example usage:\narr = [1, 3, 20, 4, 1, 0]\nprint(find_peak_element(arr))\n```"
    },
    {
        "id":457,
        "response":"```python\ndef decimal_to_Octal(deciNum: int) -> str:\n    import oct\n    return oct(deciNum).replace(\"0o\", \"\")\n\n# Example usage:\nprint(decimal_to_Octal(10)) \n```"
    },
    {
        "id":458,
        "response":"```python\nimport math\n\ndef max_product(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    incl = arr[0]\n    excl = 0\n\n    for i in range(1, n):\n        new_excl = max(incl, excl)\n        incl = excl + arr[i]\n        excl = new_excl\n\n    return max(incl, excl)\n\ndef longest_increasing_subsequence(arr, n):\n    if n == 0:\n        return 0\n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\ndef max_product_of_lis(arr, n):\n    lis = longest_increasing_subsequence(arr, n)\n    product = 1\n    for i in range(lis):\n        product *= arr[i]\n    return product\n\ndef actual_max_product(arr, n):\n    max_product_so_far = -math.inf\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        max_product_so_far = max(max_product_so_far, current_product)\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product_so_far\n\n# modified to get product of increasing subsequence\ndef max_product(arr, n):\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    max_len = max(dp)\n\n    product = [1]*n\n    for i in range(n):\n        product[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] == dp[j] + 1:\n                product[i] = max(product[i], product[j] * arr[i])\n\n    return max(product)\n```"
    },
    {
        "id":459,
        "response":"```python\nfrom typing import List\n\ndef max_profit(price: List[int], k: int) -> int:\n    n = len(price)\n    if n < 2:\n        return 0\n    \n    if k >= n \/\/ 2:\n        return sum(max(0, price[i] - price[i-1]) for i in range(1, n))\n    \n    dp = [[0] * n for _ in range(k + 1)]\n    \n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - price[j])\n    \n    return dp[k][n-1]\n```"
    },
    {
        "id":460,
        "response":"```python\nimport itertools\n\ndef add_pairwise(test_tup):\n    return tuple(x + y for x, y in itertools.combinations(test_tup, 2))\n```"
    },
    {
        "id":461,
        "response":"```python\nimport math\n\ndef find_remainder(arr, lens, n):\n    res = 1\n    for i in arr:\n        res = (res * i) % n\n    return res\n```"
    },
    {
        "id":462,
        "response":"```python\nfrom typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    l.sort()\n    return l == list(range(l[0], l[-1] + 1))\n```"
    },
    {
        "id":463,
        "response":"```python\nfrom typing import List, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple[int, int]], test_list2: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1 & set2)\n```"
    },
    {
        "id":464,
        "response":"```python\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n```"
    },
    {
        "id":465,
        "response":"```python\nfrom collections import Counter\nfrom typing import Dict\n\ndef sort_counter(dict1: Dict) -> Dict:\n    counter = Counter(dict1)\n    return dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n```"
    },
    {
        "id":466,
        "response":"```python\ndef big_sum(nums):\n    if len(nums) < 2:\n        return None\n    return max(nums) + min(nums)\n```"
    },
    {
        "id":467,
        "response":"```python\ndef is_lower(string):\n    return string.lower()\n```"
    },
    {
        "id":468,
        "response":"```python\nimport re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]+', '', str1)\n```"
    },
    {
        "id":469,
        "response":"```python\nimport math\n\ndef first_Digit(n) :\n    if n == 0:\n        return 0\n    while n >= 10:\n        n = n \/\/ 10\n    return n\n```"
    },
    {
        "id":470,
        "response":"```python\nfrom collections import Counter\n\ndef get_max_occuring_char(str1):\n    if not str1:\n        return ''\n    \n    char_count = Counter(str1)\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    \n    return max_chars[0] if len(max_chars) == 1 else max_chars\n\n# Example usage:\nprint(get_max_occuring_char(\"hello\"))\n```"
    },
    {
        "id":471,
        "response":"```python\ndef is_subset_sum(set, n, sum):\n    dp = [[False for _ in range(sum + 1)] for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        dp[i][0] = True\n        \n    for i in range(1, sum + 1):\n        dp[0][i] = False\n        \n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if set[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - set[i - 1]]\n                \n    return dp[n][sum]\n\n# Example usage:\nset = [3, 34, 4, 12, 5, 2]\nsum = 9\nn = len(set)\nprint(is_subset_sum(set, n, sum))\n```"
    },
    {
        "id":472,
        "response":"```python\nimport re\n\ndef match(text):\n    return re.findall(r'[A-Z][a-z]*', text)\n```"
    },
    {
        "id":473,
        "response":"```python\nimport math\n\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        factorial = math.factorial(i)\n        if factorial % x == 0:\n            return i\n        i += 1\n```"
    },
    {
        "id":474,
        "response":"```python\nfrom typing import List, Tuple\n\ndef remove_matching_tuple(test_list1: List[Tuple], test_list2: List[Tuple]) -> List[Tuple]:\n    test_list1 = list(set(test_list1) - set(test_list2))\n    test_list2 = list(set(test_list2) - set(test_list1))\n    return test_list1\n```"
    },
    {
        "id":475,
        "response":"```python\ndef largest_palindrome(nums):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    max_palindrome = float('-inf')\n    for num in nums:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome if max_palindrome != float('-inf') else -1\n\n# Example usage:\nprint(largest_palindrome([123, 121, 1331, 1001])) \n```"
    },
    {
        "id":476,
        "response":"```python\nimport math\n\ndef nCr(n, r):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    return math.comb(n, r)\n\ndef binomial_probability(n, k, p):\n    if not (0 <= p <= 1):\n        raise ValueError(\"p must be between 0 and 1\")\n    if k < 0 or k > n:\n        return 0\n    return nCr(n, k) * (p ** k) * ((1 - p) ** (n - k))\n\ndef main():\n    n = 5  # number of trials\n    k = 3  # number of successes\n    p = 0.5  # probability of success\n    print(binomial_probability(n, k, p))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":477,
        "response":"```python\nfrom typing import List, Tuple\n\ndef sort_tuple(tup: List[Tuple]) -> List[Tuple]:\n    return sorted(tup, key=lambda x: x[-1])\n```"
    },
    {
        "id":478,
        "response":"```python\nimport math\n\ndef area_pentagon(a):\n    return (math.sqrt(25 + 10 * math.sqrt(5)) \/ 4) * (a ** 2)\n```"
    },
    {
        "id":479,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef frequency_Of_Largest(n: int, arr: List[int]) -> int:\n    count = Counter(arr)\n    max_val = max(arr)\n    return count[max_val]\n```"
    },
    {
        "id":480,
        "response":"```python\nfrom typing import List, Tuple\n\ndef extract_symmetric(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    symmetric_pairs = [pair for pair in test_list if (pair[1], pair[0]) in test_list]\n    symmetric_pairs = list(set(symmetric_pairs))\n    return symmetric_pairs\n```"
    },
    {
        "id":481,
        "response":"```python\nimport math\n\ndef sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - math.pow(r, n)) \/ (1 - r)\n```"
    },
    {
        "id":482,
        "response":"```python\nfrom typing import List\n\ndef binary_search(item_list: List[int], item: int) -> int:\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        guess = item_list[mid]\n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n# Example usage\ndef main():\n    item_list = [1, 3, 5, 7, 9]\n    item = 5\n    index = binary_search(item_list, item)\n    if index != -1:\n        print(f\"Item {item} found at index {index}\")\n    else:\n        print(f\"Item {item} not found in the list\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":483,
        "response":"```python\nimport math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    for x in range(startx, endx + 1):\n        for y in range(starty, endy + 1):\n            polygon = []\n            for i in range(6):\n                angle = 2 * math.pi \/ 6 * i\n                px = x + radius * math.cos(angle)\n                py = y + radius * math.sin(angle)\n                polygon.append((px, py))\n            polygons.append(tuple(polygon))\n    return polygons\n```"
    },
    {
        "id":484,
        "response":"```python\ndef binary_to_integer(test_tup):\n    return int(''.join(map(str, test_tup)), 2)\n```"
    },
    {
        "id":485,
        "response":"```python\nimport re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]+', '', str1)\n```"
    },
    {
        "id":486,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef heap_queue_smallest(nums: List[int], n: int) -> List[int]:\n    if n > len(nums):\n        return []\n    \n    return heapq.nsmallest(n, nums)\n\n# Example usage:\nnums = [4, 2, 9, 6, 5, 1, 8, 3, 7]\nn = 3\nprint(heap_queue_smallest(nums, n))\n```"
    },
    {
        "id":487,
        "response":"```python\nimport math\n\ndef surfacearea_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + slant_height)\n```"
    },
    {
        "id":488,
        "response":"```python\nimport math\n\ndef gcd(x: int, y: int) -> int:\n    while(y):\n        x, y = y, x % y\n    return x\n\n# or \n\ndef gcd_builtin(x: int, y: int) -> int:\n    return math.gcd(x, y)\n```"
    },
    {
        "id":489,
        "response":"```python\nimport math\n\ndef diameter_circle(r):\n    return 2 * r\n\ndef circumference_circle(r):\n    return 2 * math.pi * r\n\ndef area_circle(r):\n    return math.pi * r ** 2\n```"
    },
    {
        "id":490,
        "response":"```python\nimport typing\n\ndef concatenate_elements(input_list: typing.List[str]) -> str:\n    return ''.join(input_list)\n```"
    },
    {
        "id":491,
        "response":"```python\ndef min_cost(cost, m, n):\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, m + 1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        \n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n        \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n            \n    return dp[m][n]\n```"
    },
    {
        "id":492,
        "response":"```python\nfrom typing import List, Tuple\n\ndef similar_elements(test_tup1: List[Tuple], test_tup2: List[Tuple]) -> List[Tuple]:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.intersection(set2))\n```"
    },
    {
        "id":493,
        "response":"```python\nimport math\n\ndef is_not_prime(n: int) -> int:\n    if n <= 1:\n        return n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return n\n    return 0\n```"
    },
    {
        "id":494,
        "response":"```python\nimport heapq\ndef heap_queue_largest(nums, n):\n    if n < 1 or not nums:\n        return []\n    return heapq.nlargest(n, nums)\n```"
    },
    {
        "id":495,
        "response":"```python\nimport math\n\ndef count_ways(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 3\n    else:\n        a, b = 3, 2\n        for _ in range(2, n):\n            a, b = b, a + 2 * b\n        return b\n```"
    },
    {
        "id":496,
        "response":"```python\nimport math\n\ndef is_one_bit_difference(x: int, y: int) -> bool:\n    if x < 0 or y < 0:\n        return False\n    diff = x ^ y\n    return diff != 0 and (diff & (diff - 1)) == 0\n\ndef main():\n    print(is_one_bit_difference(1, 3)) \n    print(is_one_bit_difference(2, 4))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":497,
        "response":"```python\nimport re\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)\n```"
    },
    {
        "id":498,
        "response":"```python\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return list(map(lambda x: x ** 2, nums))\n```"
    },
    {
        "id":499,
        "response":"```python\nimport math\n\ndef find_Rotations(s):\n    n = len(s)\n    s += s\n    lps = [0]*len(s)\n    length = 0\n    i = 1\n    while i < len(s):\n        if s[i] == s[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        else:\n            if length != 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n    max_len = max(lps)\n    if max_len == 0:\n        return n\n    else:\n        return n - (max_len)\n```"
    },
    {
        "id":500,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef small_nnum(list1: List[int], n: int) -> List[int]:\n    return heapq.nsmallest(n, list1)\n```"
    }
]