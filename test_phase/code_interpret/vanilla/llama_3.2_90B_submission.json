[
    {
        "id":1,
        "response":"import re\nimport typing\n\ndef remove_Occ(s: typing.Union[str, None], ch: str) -> str:\n    if s is None:\n        return ''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s[::-1].replace(ch, '', 1)[::-1]\n    return s"
    },
    {
        "id":2,
        "response":"import numpy as np\n\ndef sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    sorted_indices = np.argsort(row_sums)\n    return [M[i] for i in sorted_indices]"
    },
    {
        "id":3,
        "response":"import re\nfrom collections import Counter\n\ndef count_common(words):\n    words = re.findall(r'\\b\\w+\\b', ' '.join(words))\n    common_words = Counter(words)\n    return dict(common_words)"
    },
    {
        "id":4,
        "response":"import math\n\ndef find_Volume(l,b,h) :\n    return (1\/2) * l * b * h"
    },
    {
        "id":5,
        "response":"import re\nimport typing\nimport itertools\n\ndef split_lowerstring(text):\n    return re.findall('[a-z]+', text)"
    },
    {
        "id":6,
        "response":"import re\nimport typing\n\ndef text_lowercase_underscore(text: typing.Any) -> str:\n    text = str(text)\n    text = re.sub(r'([A-Z])', r'_\\1', text).strip('_').lower()\n    return text"
    },
    {
        "id":7,
        "response":"import math\n\ndef square_perimeter(a):\n    return 4 * a"
    },
    {
        "id":8,
        "response":"import re\nfrom typing import List\n\ndef str_to_list(string: str, second_string: str) -> List[str]:\n    second_string_list = list(second_string)\n    result = [char for char in string if char not in second_string_list]\n    return result"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))"
    },
    {
        "id":10,
        "response":"import math\n\ndef is_woodall(x):\n    if x < 1:\n        return False\n    n = 1\n    while True:\n        y = n * math.pow(2, n) - x\n        if y == 0:\n            return True\n        elif y > 0:\n            return False\n        n += 1"
    },
    {
        "id":11,
        "response":"import math\n\ndef multiples_of_num(m, n):\n    return m * n"
    },
    {
        "id":12,
        "response":"import collections\n\ndef find_first_duplicate(nums):\n    count = collections.Counter(nums)\n    for num in nums:\n        if count[num] > 1:\n            return num\n    return None"
    },
    {
        "id":13,
        "response":"import itertools\nimport typing\n\ndef maximum_Sum(list1: typing.List[typing.List[int]]) -> int:\n    return max(sum(sublist) for sublist in list1)"
    },
    {
        "id":14,
        "response":"import re\n\ndef binary_to_decimal(binary):\n    if not re.match('^[01]+$', binary):\n        return 'Invalid binary number'\n\n    decimal = 0\n    for i, bit in enumerate(reversed(binary)):\n        decimal += int(bit) * (2 ** i)\n    return decimal"
    },
    {
        "id":15,
        "response":"import numpy as np\nimport math\n\ndef find_Product(arr,n):\n    product = 1\n    count = np.zeros(max(arr) + 1)\n    for i in range(n):\n        count[arr[i]] += 1\n    for i in range(len(count)):\n        if count[i] == 1:\n            product *= i\n    return product"
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: typing.List[typing.Tuple], K: int) -> bool:\n    for tup in test_list:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "id":17,
        "response":"import re\nfrom typing import List\n\ndef remove(list: List[str]) -> List[str]:\n    return [re.sub('\\d', '', string) for string in list]"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n, k):\n    return math.comb(n, k)"
    },
    {
        "id":19,
        "response":"import collections\nimport math\nimport re\nimport typing\nfrom itertools import combinations\nfrom typing import List\n\ndef get_Odd_Occurrence(arr: List[int], arr_size: int) -> int:\n    count_dict = collections.Counter(arr)\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key"
    },
    {
        "id":20,
        "response":"import re\nfrom typing import List\n\ndef check_Equality(s: str) -> List[str]:\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    return [sub for sub in substrings if len(sub) > 1 and sub[0] == sub[-1]]"
    },
    {
        "id":21,
        "response":"import heapq\nfrom collections import Counter\n\ndef func(nums, k):\n    count = Counter(nums)\n    return [x for x, _ in heapq.nlargest(k, count.items(), key=lambda x: x[1])]"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors (n):\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n \/\/= i\n    if n > 2:\n        max_prime = n\n    return max_prime"
    },
    {
        "id":23,
        "response":"import math\n\ndef decimal_To_Binary(N):\n    binary = ''\n    while N > 0:\n        binary = str(N % 2) + binary\n        N = N \/\/ 2\n    return binary if binary else '0'"
    },
    {
        "id":24,
        "response":"import numpy as np\nimport math\nimport re\nfrom typing import List, Dict, Tuple\n\ndef find_missing(ar: List[int], N: int) -> int:\n    complete_set = set(range(1, N + 1))\n    missing_number = (complete_set - set(ar)).pop()\n    return missing_number"
    },
    {
        "id":25,
        "response":"import math\n\ndef find_rect_num(n):\n    a = int(math.ceil((math.sqrt(8 * n + 1) - 1) \/ 2))\n    b = n - (a * (a - 1)) \/\/ 2\n    return a * b"
    },
    {
        "id":26,
        "response":"import decimal\nimport math\n\ndef find_Nth_Digit(p,q,N) :\n    decimal.getcontext().prec = N + 10\n    fraction = decimal.Decimal(p) \/ decimal.Decimal(q)\n    fraction_str = str(fraction)\n    if '.' in fraction_str:\n        whole, decimal_part = fraction_str.split('.')\n    else:\n        whole = fraction_str\n        decimal_part = ''\n    digits = whole + decimal_part\n    if N < len(digits):\n        return int(digits[N])\n    else:\n        return -1"
    },
    {
        "id":27,
        "response":"import re\nimport typing\nimport itertools\n\ndef sort_mixed_list(mixed_list):\n    ints = sorted([i for i in mixed_list if isinstance(i, int)])\n    strs = sorted([s for s in mixed_list if isinstance(s, str)])\n    return ints + strs"
    },
    {
        "id":28,
        "response":"import math\nimport statistics\nimport itertools\nimport re\nfrom typing import List\n\ndef div_even_odd(list1: List[int]) -> float:\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2 != 0]\n    if len(odd) == 0:\n        return math.inf\n    return sum(even) \/ sum(odd)"
    },
    {
        "id":29,
        "response":"import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    max_heap = [(-freq, char) for char, freq in counter.items()]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap:\n        freq1, char1 = heapq.heappop(max_heap)\n        if result and result[-1] == char1:\n            if not max_heap:\n                return \"\"\n            freq2, char2 = heapq.heappop(max_heap)\n            result.append(char2)\n            freq2 += 1\n            if freq2 < 0:\n                heapq.heappush(max_heap, (freq2, char2))\n            heapq.heappush(max_heap, (freq1, char1))\n        else:\n            result.append(char1)\n            freq1 += 1\n            if freq1 < 0:\n                heapq.heappush(max_heap, (freq1, char1))\n    return \"\".join(result)"
    },
    {
        "id":30,
        "response":"from collections import Counter\n\ndef freq_element(nums):\n    return dict(Counter(nums))"
    },
    {
        "id":31,
        "response":"import itertools\nimport re\nimport typing\n\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"import numpy as np\nimport re\nimport typing\nimport itertools\n\ndef find_Sum(arr,n):\n    arr = np.array(arr)\n    unique_elements = np.unique(arr)\n    total_sum = 0\n    for element in unique_elements:\n        if np.count_nonzero(arr == element) > 1:\n            total_sum += element * np.count_nonzero(arr == element)\n    return total_sum"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    return re.findall(r'[a-z]+', text)"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    match = re.search(pattern, text)\n    return match.group() if match else ''"
    },
    {
        "id":35,
        "response":"import math\n\ndef find_gcd(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = x[0]\n    for num in x[1:]:\n        result = gcd(result, num)\n    return result"
    },
    {
        "id":36,
        "response":"import typing\n\ndef test_distinct(data: typing.List[int]) -> typing.List[int]:\n    return data if len(data) == len(set(data)) else []"
    },
    {
        "id":37,
        "response":"import math\n\ndef compute_Last_Digit(A, B):\n    if B == 0:\n        return 1\n    if A == B:\n        return 1\n    if A < B:\n        return 0\n    factorial_A = 1\n    factorial_B = 1\n    for i in range(1, A+1):\n        factorial_A = (factorial_A * i) % 10\n    for i in range(1, B+1):\n        factorial_B = (factorial_B * i) % 10\n    if factorial_B == 0:\n        return 0\n    result = (factorial_A * pow(2, -B, 10)) % 10\n    return result"
    },
    {
        "id":38,
        "response":"import math\n\ndef odd_bit_set_number(n):\n    return n | ((1 << (int(math.log2(n)) + 1)) - 1) \/\/ 2 * 2 + 1"
    },
    {
        "id":39,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return [sublist[N] for sublist in nums if len(sublist) > N]"
    },
    {
        "id":40,
        "response":"import typing\n\ndef min_length_list(input_list: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    return min(input_list, key=len)"
    },
    {
        "id":41,
        "response":"import math\n\ndef check_equilateral(x, y, z):\n    return x == y == z"
    },
    {
        "id":42,
        "response":"import math\n\ndef parallelogram_area(b, h):\n    return b * h"
    },
    {
        "id":43,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_Equality(str):\n    return str[0] == str[-1] and str or False"
    },
    {
        "id":44,
        "response":"import sys\n\ndef counting_sort(my_list):\n    max_val = max(my_list)\n    min_val = min(my_list)\n    count = [0] * (max_val - min_val + 1)\n    for num in my_list:\n        count[num - min_val] += 1\n    sorted_list = []\n    for i, cnt in enumerate(count):\n        sorted_list.extend([i + min_val] * cnt)\n    return sorted_list"
    },
    {
        "id":45,
        "response":"import math\n\ndef tn_gp(a, n, r):\n    return a * (r ** (n - 1))"
    },
    {
        "id":46,
        "response":"import math\n\ndef rev(num):\n    reversed_num = int(str(abs(num))[::-1])\n    if num < 0:\n        reversed_num = -reversed_num\n    return num == 2 * reversed_num - 1"
    },
    {
        "id":47,
        "response":"import itertools\n\ndef find_Max_Num(arr, n):\n    max_num = 0\n    for r in range(1, n+1):\n        for combination in itertools.permutations(arr, r):\n            num = int(''.join(map(str, combination)))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "id":48,
        "response":"import operator\n\ndef opposite_Signs(x,y):\n    return (x >= 0) != (y >= 0)"
    },
    {
        "id":49,
        "response":"import math\n\ndef is_octagonal(n):\n    x = (math.sqrt(8 * n + 1) - 1) \/ 4\n    return x == int(x)"
    },
    {
        "id":50,
        "response":"import sys\nimport math\nimport re\nimport typing\nimport itertools\n\ndef max_len_sub(arr, n):\n    max_len = 0\n    curr_len = 1\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) == 1:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    return max(max_len, curr_len)"
    },
    {
        "id":51,
        "response":"import re\nfrom typing import List\n\ndef count_Substrings(s: str, n: int) -> str:\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1) if len(s[i:j]) == n]\n    result = ''.join(substrings)\n    return result"
    },
    {
        "id":52,
        "response":"import sys\nimport typing\n\ndef smallest_num(xs: typing.List[int]) -> int:\n    return min(xs)"
    },
    {
        "id":53,
        "response":"import itertools\nimport math\n\ndef max_difference(test_list):\n    max_diff = 0\n    for pair in itertools.combinations(test_list, 2):\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n            result = pair\n    return result"
    },
    {
        "id":54,
        "response":"import functools\nimport operator\n\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)"
    },
    {
        "id":55,
        "response":"import typing\nimport itertools\n\ndef recursive_list_sum(data_list: typing.List[typing.Union[int, typing.List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total += element\n    return total"
    },
    {
        "id":56,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef pos_count(list):\n    return [num for num in list if isinstance(num, (int, float)) and num > 0]"
    },
    {
        "id":57,
        "response":"import math\n\ndef bell_number(n):\n    if n == 0:\n        return 1\n    bell = [0 for _ in range(n + 1)]\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = 0\n        j = i - 1\n        while j >= 0:\n            bell[i] += math.comb(i - 1, j) * bell[j]\n            j -= 1\n    return bell[n]"
    },
    {
        "id":58,
        "response":"import typing\n\ndef is_Monotonic(A: typing.List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n    return increasing or decreasing"
    },
    {
        "id":59,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_sublist(l, s):\n    n = len(s)\n    return any((l[i:i+n] == s for i in range(len(l) - n + 1)))"
    },
    {
        "id":60,
        "response":"import typing\nimport itertools\n\ndef find_equal_tuple(Input: typing.List[typing.Tuple], k: int) -> typing.List[typing.Tuple]:\n    return [t for t in Input if len(t) == k]"
    },
    {
        "id":61,
        "response":"import typing\n\ndef comb_sort(nums: typing.List[int]) -> typing.List[int]:\n    def get_next_gap(gap: int) -> int:\n        gap = (gap * 10) \/\/ 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "id":62,
        "response":"import math\n\ndef dif_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        if math.sqrt(n + i * i) % 1 == 0:\n            return True\n    return False"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    return re.split(r'[ ,;]+', text)"
    },
    {
        "id":64,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_samepatterns(colors, patterns):\n    pattern_dict = {}\n    for i, pattern in enumerate(patterns):\n        if pattern not in pattern_dict:\n            pattern_dict[pattern] = colors[i]\n        elif pattern_dict[pattern] != colors[i]:\n            return False\n    return True"
    },
    {
        "id":65,
        "response":"import math\n\ndef find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "id":66,
        "response":"import math\n\ndef count_Squares(m,n):\n    return m * n"
    },
    {
        "id":67,
        "response":"import math\n\ndef is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n = n \/\/ 10\n    return even_sum - odd_sum"
    },
    {
        "id":68,
        "response":"import math\n\ndef count_With_Odd_SetBits(n):\n    return math.ceil(n \/ 2)"
    },
    {
        "id":69,
        "response":"import re\nimport typing\n\ndef word_len(s: str) -> bool:\n    return len(s) % 2 != 0"
    },
    {
        "id":70,
        "response":"import math\n\ndef tetrahedral_number(n: int) -> int:\n    return (n * (n + 1) * (n + 2)) \/\/ 6"
    },
    {
        "id":71,
        "response":"from typing import Tuple, Any\n\ndef zip_tuples(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(zip(test_tup1, test_tup2))"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    return (4\/3) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":"import itertools\nimport string\n\ndef get_Char(strr):\n    if not strr:\n        return ''\n    total = sum(ord(char) for char in strr)\n    return chr(total % 256)"
    },
    {
        "id":74,
        "response":"import math\n\ndef sequence(n):\n    return math.floor((1 + math.sqrt(1 + 8 * n)) \/ 2) if n % 2 == 1 else n \/\/ 2"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2"
    },
    {
        "id":76,
        "response":"import math\n\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"import typing\nimport itertools\n\ndef merge_dictionaries_three(dict1: typing.Dict, dict2: typing.Dict, dict3: typing.Dict) -> typing.Dict:\n    dict1.update({**dict2, **dict3})\n    return dict1"
    },
    {
        "id":78,
        "response":"import collections\nfrom typing import List\n\ndef freq_count(list1: List) -> List:\n    freq_list = []\n    for i in list1:\n        freq_list.append((i, list1.count(i)))\n    return freq_list"
    },
    {
        "id":79,
        "response":"import math\nimport typing\n\ndef closest_num(N: int) -> int:\n    return N - (N % 10) + 9 if N % 10 != 9 else N"
    },
    {
        "id":80,
        "response":"import re\nimport typing\n\ndef len_log(list1: typing.List[str]) -> int:\n    return max(len(word) for word in list1)"
    },
    {
        "id":81,
        "response":"import re\nfrom typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> List[str]:\n    return [string for string in str1 if sub_str in string]"
    },
    {
        "id":82,
        "response":"import re\nimport typing\n\ndef is_undulating(n: typing.Union[int, str]) -> bool:\n    n = str(n)\n    if len(n) < 3:\n        return False\n    pattern = re.compile(r'(\\d{2})\\1*')\n    match = pattern.fullmatch(n)\n    if match:\n        return False\n    for i in range(len(n) - 2):\n        if (int(n[i]) > int(n[i+1]) and int(n[i+1]) < int(n[i+2])) or (int(n[i]) < int(n[i+1]) and int(n[i+1]) > int(n[i+2])):\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "id":83,
        "response":"import math\nimport operator as op\n\ndef power(a, b):\n    return op.pow(a, b)"
    },
    {
        "id":84,
        "response":"import sys\nimport typing\n\ndef index_minimum(test_list: typing.Tuple) -> int:\n    return test_list.index(min(test_list))"
    },
    {
        "id":85,
        "response":"import sys\nimport typing\n\ndef Find_Min_Length(lst: typing.List[typing.List[int]]) -> int:\n    return min(len(sublist) for sublist in lst)"
    },
    {
        "id":86,
        "response":"import math\nimport typing\n\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count"
    },
    {
        "id":87,
        "response":"from collections import Counter\nfrom typing import List\n\ndef frequency_lists(list1: List[List[int]]) -> List[List[int]]:\n    flat_list = [item for sublist in list1 for item in sublist]\n    frequency = Counter(flat_list)\n    return [[item, frequency[item]] for item in frequency]"
    },
    {
        "id":88,
        "response":"import math\nimport functools\nimport operator\n\ndef multiply_num(numbers):\n    product = functools.reduce(operator.mul, numbers, 1)\n    return product \/ len(numbers)"
    },
    {
        "id":89,
        "response":"import re\nimport typing\nimport itertools\n\ndef decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]"
    },
    {
        "id":90,
        "response":"import math\n\ndef next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]"
    },
    {
        "id":91,
        "response":"import sys\nimport re\nimport typing\nimport itertools\n\ndef kth_element(arr, n, k):\n    return arr[k-1]"
    },
    {
        "id":92,
        "response":"import re\n\ndef snake_to_camel(word):\n    components = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"
    },
    {
        "id":93,
        "response":"import math\n\ndef eulerian_num(n, m):\n    if m == 0:\n        return 1\n    elif m == 1:\n        return 0\n    elif m == 2:\n        return 1 if n % 2 == 0 else 0\n    else:\n        sum = 0\n        for k in range(m):\n            sum += ((-1) ** k) * math.comb(m, k) * (m - k) ** n\n        return sum \/\/ math.factorial(m)"
    },
    {
        "id":94,
        "response":"import functools\nimport operator\n\ndef sort_sublists(input_list):\n    return list(map(lambda sublist: sorted(sublist, key=lambda x: str(x)), input_list))"
    },
    {
        "id":95,
        "response":"import re\nimport typing\nimport itertools\n\ndef count(lst):\n    return sum(1 for i in lst if i)"
    },
    {
        "id":96,
        "response":"import itertools\nimport typing\nimport re\n\ndef add_lists(test_list: typing.List[typing.Tuple[int, int]], test_tup: typing.Tuple[int, int]) -> typing.List[typing.Tuple[int, int]]:\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0] + test_tup[0], test_list[i][1] + test_tup[1])\n    return test_list"
    },
    {
        "id":97,
        "response":"import re\nimport typing\n\ndef count_Hexadecimal(L: int, R: int) -> int:\n    count = 0\n    for i in range(L, R+1):\n        hex_str = hex(i)[2:]\n        if re.match('^[0-9A-Fa-f]+$', hex_str):\n            count += 1\n    return count"
    },
    {
        "id":98,
        "response":"import heapq\nimport typing\n\ndef merge_sorted_list(num1: typing.List[int], num2: typing.List[int], num3: typing.List[int]) -> typing.List[int]:\n    return list(heapq.merge(num1, num2, num3))"
    },
    {
        "id":99,
        "response":"import re\nimport typing\nimport itertools\n\ndef odd_Equivalent(s: str, n: int) -> str:\n    def rotate(s: str, n: int) -> str:\n        n = n % len(s)\n        return s[n:] + s[:n]\n\n    rotations = [rotate(s, i) for i in range(len(s))]\n    odd_rotations = [r for i, r in enumerate(rotations) if i % 2 != 0]\n    return odd_rotations[0]"
    },
    {
        "id":100,
        "response":"import itertools\n\ndef extract_missing(test_list, strt_val, stop_val):\n    full_range = list(range(strt_val, stop_val + 1))\n    return list(set(full_range) - set(test_list))"
    },
    {
        "id":101,
        "response":"import typing\nimport itertools\n\ndef common_in_nested_lists(nestedlist1: typing.List[typing.List[int]], nestedlist2: typing.List[typing.List[int]]) -> typing.List[int]:\n    flat_list1 = list(itertools.chain(*nestedlist1))\n    flat_list2 = list(itertools.chain(*nestedlist2))\n    return list(set(flat_list1) & set(flat_list2))"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    return 2 * math.pi * (diameter \/ 2)"
    },
    {
        "id":103,
        "response":"import re\n\ndef check_integer(text):\n    if re.fullmatch(r'[+-]?\\d+', text):\n        return text\n    else:\n        return None"
    },
    {
        "id":104,
        "response":"import collections\nfrom typing import List, Tuple\n\ndef assign_freq(test_list: List[Tuple]) -> List[Tuple]:\n    freq_dict = collections.Counter(test_list)\n    return [(sub + (freq_dict[sub],)) for sub in test_list]"
    },
    {
        "id":105,
        "response":"import typing\n\ndef empty_dict(list1: typing.List[dict]) -> typing.List[dict]:\n    return all(not d for d in list1)"
    },
    {
        "id":106,
        "response":"import typing\n\ndef tuple_to_int(nums: typing.Tuple[int, ...]) -> int:\n    result = 0\n    for i, num in enumerate(reversed(nums)):\n        result += num * (10 ** i)\n    return result"
    },
    {
        "id":107,
        "response":"import re\nimport typing\nimport itertools\n\ndef list_to_float(test_list):\n    return [float(i) if isinstance(i, (int, float, str)) and re.match('^-?\\d+(?:\\.\\d+)?$', str(i)) else i for i in test_list]"
    },
    {
        "id":108,
        "response":"import re\nimport typing\n\ndef string_to_list(string: str) -> typing.List[str]:\n    result = []\n    temp = ''\n    open_bracket = 0\n    for char in string:\n        if char == '(':\n            open_bracket += 1\n            temp += char\n        elif char == ')':\n            open_bracket -= 1\n            temp += char\n        elif char == ' ' and open_bracket == 0:\n            result.append(temp)\n            temp = ''\n        else:\n            temp += char\n    if temp:\n        result.append(temp)\n    return result"
    },
    {
        "id":109,
        "response":"import re\nimport typing\nimport itertools\n\ndef search(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value == 1:\n            return key\n    return None"
    },
    {
        "id":110,
        "response":"import itertools\n\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    result = None\n    for pair in itertools.combinations(list1, 2):\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n            result = pair\n    return result"
    },
    {
        "id":111,
        "response":"import itertools\n\ndef check_triplet(A, n, sum, count):\n    for triplet in itertools.combinations(A, 3):\n        if sum(triplet) == sum and len(triplet) == count:\n            return list(triplet)\n    return []"
    },
    {
        "id":112,
        "response":"import math\n\ndef isTriangular(num):\n    return ((math.sqrt(8 * num + 1) - 1) \/ 2) % 1 == 0\n\ndef isSquare(num):\n    return num ** 0.5 % 1 == 0\n\ndef smartNumber(n):\n    i = 1\n    count = 0\n    while True:\n        if isTriangular(i) and isSquare(i):\n            count += 1\n        if count == n:\n            return i\n        i += 1"
    },
    {
        "id":113,
        "response":"import math\n\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0 and (n \/\/ i != i or i == 1))\n\n    total_sum = 0\n    for i in range(1, limit):\n        j = sum_of_divisors(i)\n        if j < limit and sum_of_divisors(j) == i and i < j:\n            total_sum += i + j\n    return total_sum"
    },
    {
        "id":114,
        "response":"import math\nimport cmath\n\ndef angle_complex(a, b):\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)"
    },
    {
        "id":115,
        "response":"import re\nimport typing\nimport itertools\n\ndef find_length(string, n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub_str = string[i:j]\n            ones = sub_str.count('1')\n            zeros = len(sub_str) - ones\n            diff = abs(ones - zeros)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    g = gcd(a, b)\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(g)) + 1):\n        if g % i == 0:\n            sum_divisors += i\n            if i != g \/\/ i:\n                sum_divisors += g \/\/ i\n    return sum_divisors"
    },
    {
        "id":117,
        "response":"import itertools\nimport typing\n\ndef multiply_int(x, y):\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return result\n    else:\n        return -result"
    },
    {
        "id":118,
        "response":"import re\nfrom typing import List\n\ndef long_words(n: int, str: List[str]) -> List[str]:\n    return [word for word in str if len(word) > n]"
    },
    {
        "id":119,
        "response":"import numpy as np\nimport itertools\n\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    expected_sum = n * (n**2 + 1) \/\/ 2\n    \n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n        \n    for col in zip(*my_matrix):\n        if sum(col) != expected_sum:\n            return False\n            \n    if sum(my_matrix[i][i] for i in range(n)) != expected_sum:\n        return False\n        \n    if sum(my_matrix[i][n-i-1] for i in range(n)) != expected_sum:\n        return False\n        \n    return True"
    },
    {
        "id":120,
        "response":"import collections\nfrom typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = collections.Counter(nums)\n    return max(count, key=count.get)"
    },
    {
        "id":121,
        "response":"import re\n\ndef reverse_vowels(str1):\n    vowels = re.findall(r'[aeiouAEIOU]', str1)\n    vowels = vowels[::-1]\n    return re.sub(r'[aeiouAEIOU]', lambda x: vowels.pop(0), str1)"
    },
    {
        "id":122,
        "response":"import typing\n\ndef tup_string(tup1: typing.Tuple) -> str:\n    return ''.join(map(str, tup1))"
    },
    {
        "id":123,
        "response":"import typing\n\ndef sum_negativenum(nums: typing.List[int]) -> int:\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"import numpy as np\nimport math\nimport re\nimport typing\nimport itertools\n\ndef check_last(arr, n, p):\n    last_element = arr[n-1]\n    for _ in range(p):\n        last_element = np.power(last_element, 2)\n    return \"even\" if last_element % 2 == 0 else \"odd\""
    },
    {
        "id":125,
        "response":"import math\n\ndef hexagonal_num(n):\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"import math\n\ndef cal_electbill(units):\n    if units <= 50:\n        return units * 0.5\n    elif units <= 100:\n        return 25 + (units - 50) * 0.75\n    elif units <= 200:\n        return 100 + (units - 100) * 1.2\n    else:\n        return 220 + (units - 200) * 1.5"
    },
    {
        "id":127,
        "response":"import typing\nfrom typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    total_count = len(nums)\n    zero_count = sum(1 for num in nums if num == 0)\n    return zero_count \/ total_count if total_count != 0 else 0"
    },
    {
        "id":128,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    binary = bin(n)[2:]\n    return binary.count('1') == binary.count('0') + 1"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r"
    },
    {
        "id":130,
        "response":"from collections import Counter\n\ndef extract_singly(test_list):\n    freq = Counter(test_list)\n    return [key for key, val in freq.items() if val == 1]"
    },
    {
        "id":131,
        "response":"import typing\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    for size in range(n, 0, -1):\n        max_index = nums.index(max(nums[0:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n            nums = nums[:size][::-1] + nums[size:]\n    return nums"
    },
    {
        "id":132,
        "response":"from collections import Counter\nfrom typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    count1 = Counter(list1)\n    count2 = Counter(list2)\n    count3 = Counter(list3)\n    \n    for num in list1:\n        if count1[num] > 0 and count2[num] > 0 and count3[num] > 0:\n            count1[num] -= 1\n            count2[num] -= 1\n            count3[num] -= 1\n            list1.remove(num)\n            list2.remove(num)\n            list3.remove(num)\n            list1.append(num)\n    return list1"
    },
    {
        "id":133,
        "response":"import typing\nimport itertools\n\ndef find_lists(Input: typing.Tuple) -> int:\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "id":134,
        "response":"import itertools\n\ndef sum_Pairs(arr, n):\n    return sum(abs(x - y) for x, y in itertools.combinations(arr, 2))"
    },
    {
        "id":135,
        "response":"import sys\n\ndef max_Abs_Diff(arr, n):\n    arr.sort()\n    return arr[-1] - arr[0]"
    },
    {
        "id":136,
        "response":"import re\nimport typing\nimport itertools\n\ndef ascii_value_string(str1: str) -> int:\n    return sum(ord(char) for char in str1)"
    },
    {
        "id":137,
        "response":"import sys\n\ndef max_path_sum(tri, m, n):\n    for i in range(m-1, 0, -1):\n        for j in range(n):\n            if j == 0:\n                tri[i-1][j] += max(tri[i][j], tri[i][j+1])\n            elif j == n-1:\n                tri[i-1][j] += max(tri[i][j-1], tri[i][j])\n            else:\n                tri[i-1][j] += max(tri[i][j-1], tri[i][j], tri[i][j+1])\n    return tri[0][0]"
    },
    {
        "id":138,
        "response":"import itertools\nimport re\n\ndef sum_digits_single(x):\n    max_sum = 0\n    str_x = str(x)\n    for i in range(1, len(str_x)):\n        left = int(str_x[:i])\n        right = int(str_x[i:])\n        if left + right > max_sum:\n            max_sum = left + right\n    return max_sum"
    },
    {
        "id":139,
        "response":"import sys\nimport math\nimport itertools\nfrom typing import List\nfrom collections import defaultdict\n\ndef longest_subseq_with_diff_one(arr: List[int], n: int) -> List[int]:\n    arr.sort()\n    max_len = 0\n    max_subseq = []\n    curr_len = 1\n    curr_subseq = [arr[0]]\n\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] == 1:\n            curr_len += 1\n            curr_subseq.append(arr[i])\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n                max_subseq = curr_subseq\n            curr_len = 1\n            curr_subseq = [arr[i]]\n\n    if curr_len > max_len:\n        max_len = curr_len\n        max_subseq = curr_subseq\n\n    return max_subseq"
    },
    {
        "id":140,
        "response":"import math\n\ndef does_Contain_B(a, b, c):\n    n = 1\n    while True:\n        term = b * n + c\n        if term == a:\n            return True\n        elif term > a:\n            return False\n        n += 1"
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p,q):\n    p = abs(p)\n    q = abs(q)\n    while q:\n        p, q = q, p % q\n    return p"
    },
    {
        "id":142,
        "response":"import typing\n\ndef merge(a: typing.List[int], b: typing.List[int]) -> typing.List[int]:\n    result = []\n    i = j = 0\n    while i < len(a) and j < len(b):\n        if a[i] <= b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n    result += a[i:]\n    result += b[j:]\n    return result\n\ndef merge_sort(arr: typing.List[int]) -> typing.List[int]:\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left_half = merge_sort(arr[:mid])\n    right_half = merge_sort(arr[mid:])\n    return merge(left_half, right_half)"
    },
    {
        "id":143,
        "response":"import math\n\ndef parabola_vertex(a, b, c):\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"import typing\nimport itertools\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return [row[N] for row in nums]"
    },
    {
        "id":145,
        "response":"import math\n\ndef even_bit_toggle_number(n):\n    binary = bin(n)[2:]\n    binary_list = list(binary)\n    for i in range(len(binary_list)):\n        if (i + 1) % 2 == 0:\n            binary_list[i] = '1' if binary_list[i] == '0' else '0'\n    return int(''.join(binary_list), 2)"
    },
    {
        "id":146,
        "response":"import re\nfrom typing import Tuple\n\ndef tuple_int_str(tuple_str: Tuple[str, ...]) -> Tuple[int, ...]:\n    return tuple(int(i) for i in tuple_str)"
    },
    {
        "id":147,
        "response":"import re\nfrom typing import List\nimport itertools\n\ndef encode_list(list1: List[int]) -> List[int]:\n    result = []\n    i = 0\n    while i < len(list1):\n        count = 1\n        while i + 1 < len(list1) and list1[i] == list1[i+1]:\n            i += 1\n            count += 1\n        result.append(count)\n        result.append(list1[i])\n        i += 1\n    return result"
    },
    {
        "id":148,
        "response":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport bisect\nimport re\nimport typing\n\ndef min_Ops(arr, n, k):\n    max_val = max(arr)\n    ops = 0\n    for i in range(n):\n        if arr[i] < max_val:\n            ops += max_val - arr[i]\n    if ops % k == 0:\n        return ops \/\/ k\n    else:\n        return ops \/\/ k + 1"
    },
    {
        "id":149,
        "response":"import calendar\n\ndef month_season(month, days):\n    if month in [12, 1, 2]:\n        return \"Winter\"\n    elif month in [3, 4, 5]:\n        return \"Spring\"\n    elif month in [6, 7, 8]:\n        return \"Summer\"\n    elif month in [9, 10, 11]:\n        return \"Autumn\""
    },
    {
        "id":150,
        "response":"import math\n\ndef solution(a, b, n):\n    for x in range(n + 1):\n        if (n - a * x) % b == 0:\n            return x\n    return -1"
    },
    {
        "id":151,
        "response":"import typing\n\ndef remove_elements(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [element for element in list1 if element not in list2]"
    },
    {
        "id":152,
        "response":"import math\n\ndef sum_series(n):\n    sum = 0\n    i = 0\n    while n - 2 * i >= 0:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    n = len(s)\n    area = 0\n    for i in range(n):\n        j = (i + 1) % n\n        area += s[i][0] * s[j][1]\n        area -= s[j][0] * s[i][1]\n    area = abs(area) \/ 2\n    return area"
    },
    {
        "id":154,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef divSum(n):\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return sum(divisors) == n"
    },
    {
        "id":155,
        "response":"import re\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef count_char_position(str1: str) -> Dict[str, int]:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    char_count = defaultdict(int)\n    for char in str1.lower():\n        if char in alphabet:\n            char_count[alphabet.index(char)] += 1\n    return dict(char_count)"
    },
    {
        "id":156,
        "response":"import itertools\nimport typing\n\ndef find_even_Pair(A, N):\n    even_pairs = []\n    for pair in itertools.combinations(A, 2):\n        if (pair[0] ^ pair[1]) % 2 == 0:\n            even_pairs.append(pair)\n    return even_pairs"
    },
    {
        "id":157,
        "response":"import math\n\ndef next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))"
    },
    {
        "id":158,
        "response":"import re\nimport typing\nimport itertools\n\ndef frequency(a, x):\n    return a.count(x)"
    },
    {
        "id":159,
        "response":"import typing\n\ndef get_pell(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n + 1):\n            pell.append(2 * pell[i - 1] + pell[i - 2])\n        return pell[n]"
    },
    {
        "id":160,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_range_list(list1: typing.List[int], m: int, n: int) -> int:\n    return sum(list1[m:n+1])"
    },
    {
        "id":161,
        "response":"import math\n\ndef perimeter_pentagon(a):\n    return 5 * a"
    },
    {
        "id":162,
        "response":"import re\nimport typing\n\ndef count_occurance(s: str) -> int:\n    return len(re.findall('std', s))"
    },
    {
        "id":163,
        "response":"import re\n\ndef remove_splchar(text):\n    return re.sub('[^a-zA-Z0-9\\s]', '', text)"
    },
    {
        "id":164,
        "response":"from typing import List, Tuple, Dict\n\ndef group_keyvalue(l: List[Tuple[str, int]]) -> Dict[str, List[int]]:\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result"
    },
    {
        "id":165,
        "response":"import re\nfrom typing import List\n\ndef is_valid_parenthese(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack"
    },
    {
        "id":166,
        "response":"import math\n\ndef perimeter_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        raise ValueError(\"Invalid triangle sides\")"
    },
    {
        "id":167,
        "response":"import math\n\ndef answer(L, R):\n    for i in range(L, R + 1):\n        for j in range(i + 1, R + 1):\n            if L <= math.lcm(i, j) <= R:\n                return i"
    },
    {
        "id":168,
        "response":"import re\nfrom typing import List\n\ndef string_literals(patterns: List[str], text: str) -> List[str]:\n    found_patterns = [pattern for pattern in patterns if re.search(pattern, text)]\n    return found_patterns"
    },
    {
        "id":169,
        "response":"import itertools\n\ndef is_num_keith(x):\n    digits = [int(i) for i in str(x)]\n    for i in range(len(digits)):\n        for combo in itertools.combinations(digits, i+1):\n            total = 0\n            for j in combo:\n                total += j\n            if total == x:\n                return True\n    return False"
    },
    {
        "id":170,
        "response":"import math\n\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    dlat = math.radians(elat - slat)\n    dlon = math.radians(elon - slon)\n    a = math.sin(dlat \/ 2) * math.sin(dlat \/ 2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon \/ 2) * math.sin(dlon \/ 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c"
    },
    {
        "id":171,
        "response":"import os\nimport re\nimport typing\nimport itertools\n\ndef common_prefix_util(str1, str2):\n    result = \"\"\n    for i in range(min(len(str1), len(str2))):\n        if str1[i] == str2[i]:\n            result += str1[i]\n        else:\n            break\n    return result"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string):\n    upper_case = re.findall(r'[A-Z]', string)\n    lower_case = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\n    digit = re.findall(r'\\d', string)\n    \n    result = {\n        'upper_case': upper_case,\n        'lower_case': lower_case,\n        'special_char': special_char,\n        'digit': digit\n    }\n    \n    return result"
    },
    {
        "id":173,
        "response":"import collections\nimport itertools\n\ndef count_pairs(arr, n, k):\n    count = collections.Counter(arr)\n    pairs = set()\n    for i in count:\n        if i + k in count:\n            pairs.add((min(i, i + k), max(i, i + k)))\n    return list(pairs)"
    },
    {
        "id":174,
        "response":"import typing\n\ndef greater_specificnum(list: typing.List[int], num: int) -> typing.List[int]:\n    return [i for i in list if i > num]"
    },
    {
        "id":175,
        "response":"import math\n\ndef parabola_focus(a, b, c):\n    if a == 0:\n        return \"Not a parabola\"\n    else:\n        p = 1 \/ (4 * a)\n        x = -b \/ (2 * a)\n        y = p + (b**2 - 4*a*c) \/ (4*a)\n        return (x, y)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            text = re.sub(pattern, lambda x: f\"'{x.group()}'\", text)\n    return text"
    },
    {
        "id":177,
        "response":"import typing\n\ndef longest_common_subsequence(X, Y, m, n):\n    L = [[None]*(n + 1) for i in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0 :\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n \n    index = L[m][n]\n \n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n \n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n \n    return \"\".join(lcs)"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.sqrt(n \/ i) % 1 == 0:\n            return n\n    return None"
    },
    {
        "id":179,
        "response":"import typing\nimport itertools\nimport math\nimport re\nimport collections\n\ndef first_Missing_Positive(arr, n):\n    arr_set = set(arr)\n    i = 1\n    while i in arr_set:\n        i += 1\n    return i"
    },
    {
        "id":180,
        "response":"import math\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    return math.floor(max(abs(x1), abs(x2))) + math.floor(max(abs(y1), abs(y2)))"
    },
    {
        "id":181,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef check_monthnumber(monthname3: str) -> bool:\n    month30 = [\"April\", \"June\", \"September\", \"November\"]\n    return monthname3 in month30"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(str):\n    return re.search(\"[a-zA-Z]\", str) is not None and re.search(\"[0-9]\", str) is not None"
    },
    {
        "id":183,
        "response":"import itertools\nimport typing\n\ndef remove_tuple(test_tup: typing.Tuple) -> typing.Tuple:\n    test_tup = tuple(sorted(test_tup))\n    return tuple(itertools.groupby(test_tup))"
    },
    {
        "id":184,
        "response":"import re\nimport typing\nimport itertools\n\ndef octal_To_Decimal(n):\n    return int(str(n), 8)"
    },
    {
        "id":185,
        "response":"import typing\nimport bisect\n\ndef first(arr: typing.List[int], x: int, n: int) -> int:\n    arr.sort()\n    idx = bisect.bisect_left(arr, x)\n    if idx != n and arr[idx] == x:\n        return idx\n    return -1"
    },
    {
        "id":186,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_tuples(test_list, K):\n    return [ele for ele in test_list if not isinstance(ele, tuple) or len(ele) != K]"
    },
    {
        "id":187,
        "response":"import math\nimport operator\nimport functools\n\ndef find_exponentio(test_tup1, test_tup2):\n    return tuple(map(operator.pow, test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\n\ndef largest_triangle(a, b):\n    return (a * b * math.sqrt(3)) \/ 4"
    },
    {
        "id":189,
        "response":"import math\n\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":190,
        "response":"import typing\n\ndef position_max(list1: typing.List[int]) -> typing.List[int]:\n    max_val = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_val]"
    },
    {
        "id":191,
        "response":"import typing\nimport itertools\n\ndef chkList(lst: typing.List) -> typing.List:\n    return lst if len(set(lst)) == 1 else []"
    },
    {
        "id":192,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_even(str1):\n    return ''.join([char for i, char in enumerate(str1) if i % 2 != 0])"
    },
    {
        "id":193,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef hamming_Distance(n1, n2):\n    x = n1 ^ n2\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    return count"
    },
    {
        "id":194,
        "response":"import re\nfrom typing import Union\n\ndef count(s: str, c: str) -> Union[int, str]:\n    return s.count(c)"
    },
    {
        "id":195,
        "response":"import re\nimport typing\nimport itertools\n\ndef inversion_elements(test_tup):\n    return tuple(reversed(test_tup))"
    },
    {
        "id":196,
        "response":"import itertools\nimport re\nimport typing\n\ndef concatenate_elements(test_tup):\n    return tuple(''.join(map(str, test_tup)))"
    },
    {
        "id":197,
        "response":"import re\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                \n    lrs = []\n    i, j = n, n\n    while i > 0 and j > 0:\n        if str[i-1] == str[j-1] and i != j:\n            lrs.append(str[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n            \n    return ''.join(reversed(lrs))"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num):\n    pattern = re.compile(r'^-?\\d+(\\.\\d{1,2})?$')\n    return bool(pattern.match(str(num)))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    if heap:\n        heapq.heappop(heap)\n    heapq.heappush(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string):\n    allowed_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    return re.match('^[a-zA-Z]+$', string) and set(string).issubset(allowed_chars)"
    },
    {
        "id":201,
        "response":"import math\n\ndef count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        if i & (i-1) == 0:\n            count += 1\n    return count"
    },
    {
        "id":202,
        "response":"import math\n\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))"
    },
    {
        "id":203,
        "response":"import re\nimport typing\nimport itertools\n\ndef concatenate_strings(test_tup1, test_tup2):\n    return tuple(''.join(i) for i in zip(test_tup1, test_tup2))"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    return math.degrees(radian)"
    },
    {
        "id":205,
        "response":"from typing import List\nimport itertools\n\ndef decode_list(alist: List[int]) -> List[int]:\n    decoded_list = []\n    i = 0\n    while i < len(alist):\n        count = alist[i]\n        value = alist[i + 1]\n        decoded_list.extend(itertools.repeat(value, count))\n        i += 2\n    return decoded_list"
    },
    {
        "id":206,
        "response":"import typing\n\ndef check_subset_list(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    flattened_list1 = flatten(list1)\n    flattened_list2 = flatten(list2)\n    return [item for item in flattened_list1 if item in flattened_list2]\n\ndef flatten(nested_list: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "id":207,
        "response":"from collections import OrderedDict\n\ndef first_Repeated_Char(str):\n    char_count = OrderedDict()\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    return None"
    },
    {
        "id":208,
        "response":"import math\n\ndef min_Operations(A, B):\n    if A == B:\n        return 0\n    if A < B:\n        A, B = B, A\n    if A % B == 0:\n        return A \/\/ B - 1\n    return A \/\/ B + min_Operations(A % B, B)"
    },
    {
        "id":209,
        "response":"import heapq\nimport typing\n\ndef extract_min_max(test_tup, K):\n    min_heap = []\n    max_heap = []\n    \n    for num in test_tup:\n        heapq.heappush(min_heap, num)\n        heapq.heappush(max_heap, -num)\n        \n    min_k = [heapq.heappop(min_heap) for _ in range(K)]\n    max_k = [-heapq.heappop(max_heap) for _ in range(K)]\n    \n    return tuple(min_k + max_k)"
    },
    {
        "id":210,
        "response":"import re\n\ndef replace_max_specialchar(text, n):\n    special_chars = [',', '.', ' ']\n    for char in special_chars:\n        text = re.sub(char, ':', text, n)\n    return text"
    },
    {
        "id":211,
        "response":"import re\nimport typing\nimport itertools\n\ndef first_even(nums: typing.List[int]) -> int:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
    },
    {
        "id":212,
        "response":"import typing\nfrom typing import Tuple, Any\n\ndef check_type(test_tuple: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    if not test_tuple:\n        return test_tuple\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item) != data_type:\n            return ()\n    return test_tuple"
    },
    {
        "id":213,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_majority(arr, n, x):\n    count = sum(1 for i in range(n) if arr[i] == x)\n    return count > n \/ 2"
    },
    {
        "id":214,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "id":215,
        "response":"import sys\n\ndef find_Min(arr, low, high):\n    min_val = sys.maxsize\n    for i in range(low, high + 1):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val"
    },
    {
        "id":216,
        "response":"import re\nfrom typing import List\n\ndef odd_values_string(str):\n    str = list(str)\n    odd_chars = [char for i, char in enumerate(str) if i % 2 != 0]\n    even_chars = [char for i, char in enumerate(str) if i % 2 == 0]\n    return ''.join(even_chars + odd_chars)"
    },
    {
        "id":217,
        "response":"import math\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"import math\n\ndef all_Bits_Set_In_The_Given_Range(n, left, right):\n    for i in range(left, right + 1):\n        if not (n & (1 << i)):\n            return False\n    return True"
    },
    {
        "id":219,
        "response":"import itertools\n\ndef re_arrange_array(arr, n):\n    positive = [x for x in arr if x >= 0]\n    negative = [x for x in arr if x < 0]\n    return list(itertools.chain(negative, positive))"
    },
    {
        "id":220,
        "response":"import re\nfrom typing import Optional\n\ndef replace_blank(str1: Optional[str], char: str) -> str:\n    if str1 is None:\n        return ''\n    return re.sub(r'\\s', char, str1)"
    },
    {
        "id":221,
        "response":"import sys\n\ndef max_sum(tri, n):\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]"
    },
    {
        "id":222,
        "response":"import heapq\nfrom typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsurface_cylinder(r, h):\n    return 2 * math.pi * r * h"
    },
    {
        "id":224,
        "response":"import math\n\ndef volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":"import re\nimport typing\nimport itertools\n\ndef even_bit_set_number(n):\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(0, len(binary), 2):\n        binary[i] = '1'\n    return int(''.join(binary), 2)"
    },
    {
        "id":226,
        "response":"import math\n\ndef No_of_Triangle(N,K):\n    return N * (N - 1) * (N - 2) \/\/ 6 if N >= 3 else 0"
    },
    {
        "id":227,
        "response":"import itertools\nfrom typing import List, Tuple\n\ndef check_occurences(test_list: List[Tuple]) -> List[Tuple]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "id":228,
        "response":"import re\nimport typing\nimport itertools\n\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            if str[i:j] != \"\":\n                count += 1\n    return count"
    },
    {
        "id":229,
        "response":"import typing\nimport itertools\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    total_sequences = 0\n    for i in range(1, m + 1):\n        total_sequences += m - i + 1\n    return total_sequences"
    },
    {
        "id":230,
        "response":"import typing\n\ndef replace_list(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if len(list1) > 0:\n        list1[-1:] = list2\n    return list1"
    },
    {
        "id":231,
        "response":"import numpy as np\nimport typing\n\ndef array_3d(m: int, n: int, o: int) -> typing.List[typing.List[typing.List[str]]]:\n    return [[[ '*' for _ in range(o)] for _ in range(n)] for _ in range(m)]"
    },
    {
        "id":232,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_charac(str1: str) -> int:\n    return len(str1)"
    },
    {
        "id":233,
        "response":"from collections import defaultdict\nfrom typing import List, Tuple\n\ndef sort_on_occurence(lst: List[Tuple]) -> List[Tuple]:\n    freq_dict = defaultdict(int)\n    for tup in lst:\n        freq_dict[tup[0]] += 1\n    return sorted(lst, key=lambda x: freq_dict[x[0]])"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    root = math.sqrt(N)\n    if root == int(root):\n        root += 1\n    else:\n        root = math.ceil(root)\n    return root ** 2"
    },
    {
        "id":235,
        "response":"import sys\nimport itertools\n\ndef max_sum(arr, n):\n    incl = 0\n    excl = 0\n    for i in range(n):\n        new_excl = max(incl, excl)\n        incl = excl + arr[i]\n        excl = new_excl\n    return max(incl, excl)"
    },
    {
        "id":236,
        "response":"import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number\")\n    if number == 0 or number == 1:\n        return number\n\n    x = number\n    y = (x + 1) \/ 2\n\n    while y < x:\n        x = y\n        y = (x + number \/ x) \/ 2\n\n    return x"
    },
    {
        "id":237,
        "response":"import re\nimport typing\nimport itertools\n\ndef lps(str):\n    n = len(str)\n    table = [[False for _ in range(n)] for _ in range(n)]\n    max_length = 1\n    i = 0\n    while i < n:\n        table[i][i] = True\n        i += 1\n    start = 0\n    i = 0\n    while i < n - 1:\n        if str[i] == str[i + 1]:\n            table[i][i + 1] = True\n            start = i\n            max_length = 2\n        i += 1\n    k = 3\n    while k <= n:\n        i = 0\n        while i < n - k + 1:\n            j = i + k - 1\n            if str[i] == str[j] and table[i + 1][j - 1]:\n                table[i][j] = True\n                if k > max_length:\n                    start = i\n                    max_length = k\n            i += 1\n        k += 1\n    return str[start:start + max_length]"
    },
    {
        "id":238,
        "response":"import math\n\ndef harmonic_sum(n):\n    return sum(1\/i for i in range(1, n))"
    },
    {
        "id":239,
        "response":"import numpy as np\n\ndef intersection_array(array_nums1, array_nums2):\n    return np.array(list(filter(lambda x: x in array_nums2, array_nums1)))"
    },
    {
        "id":240,
        "response":"import typing\nimport itertools\n\ndef count_X(tup, x):\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"import itertools\n\ndef insert_element(list, element):\n    return list(itertools.chain.from_iterable([[element, x] for x in list]))"
    },
    {
        "id":242,
        "response":"import cmath\n\ndef convert(numbers):\n    return [complex(num) for num in numbers]"
    },
    {
        "id":243,
        "response":"import re\nimport typing\nfrom typing import List\n\ndef count_integer(list1: List[typing.Any]) -> int:\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text):\n    return re.findall(r'\\b[ae]\\w*\\b', text)"
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    return list(itertools.combinations_with_replacement(l, n))"
    },
    {
        "id":246,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for currentPrime in range(2, int(math.sqrt(n)) + 1):\n        if sieve[currentPrime]:\n            for multiple in range(currentPrime*2, n, currentPrime):\n                sieve[multiple] = False\n    return sum(sieve)"
    },
    {
        "id":247,
        "response":"import typing\n\ndef swap_numbers(a: typing.Union[int, float], b: typing.Union[int, float]) -> typing.Union[int, float]:\n    a, b = b, a\n    return a"
    },
    {
        "id":248,
        "response":"import typing\nimport functools\n\ndef count_odd(array_nums: typing.List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))"
    },
    {
        "id":249,
        "response":"import itertools\n\ndef maximize_elements(test_tup1, test_tup2):\n    return tuple(max(i, j) for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "id":250,
        "response":"import sympy\nimport math\n\ndef newman_prime(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if sympy.isprime(i):\n            primes.append(i)\n            if len(primes) == n:\n                return primes[-1]\n        i += 1"
    },
    {
        "id":251,
        "response":"import itertools\nimport operator\nimport typing\n\ndef division_elements(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[float, ...]:\n    result = tuple(map(operator.truediv, test_tup1, test_tup2))\n    return result"
    },
    {
        "id":252,
        "response":"import re\nimport typing\nimport itertools\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]"
    },
    {
        "id":253,
        "response":"import typing\n\ndef merge_dict(d1: typing.Dict, d2: typing.Dict) -> typing.Dict:\n    for key, value in d2.items():\n        if key in d1 and isinstance(d1[key], dict) and isinstance(value, dict):\n            merge_dict(d1[key], value)\n        else:\n            d1[key] = value\n    return d1"
    },
    {
        "id":254,
        "response":"import math\n\ndef dog_age(h_age):\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4"
    },
    {
        "id":255,
        "response":"import itertools\n\ndef list_split(S, step):\n    return list(itertools.islice(S, step-1, None, step))"
    },
    {
        "id":256,
        "response":"import math\n\ndef lateralsurface_cube(l):\n    return 4 * (l ** 2)"
    },
    {
        "id":257,
        "response":"import math\n\ndef square_Sum(n):\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if math.sqrt(i) % 1 != 0:\n            sum += i ** 2\n            count += 1\n        i += 1\n    return sum"
    },
    {
        "id":258,
        "response":"import math\n\ndef find_star_num(n):\n    if n < 1:\n        return 0\n    total = 0\n    i = 1\n    while total < n:\n        total += i\n        i += 1\n    return i - 1"
    },
    {
        "id":259,
        "response":"import re\nimport typing\nimport itertools\n\ndef ascii_value(k):\n    return ord(k)"
    },
    {
        "id":260,
        "response":"import typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    return sum(num for i, num in enumerate(arr) if i % 2 == 0 and num % 2 == 0)"
    },
    {
        "id":261,
        "response":"import math\nimport typing\n\ndef even_Power_Sum(n: int) -> int:\n    return sum(i ** 5 for i in range(n + 1) if i % 2 == 0)"
    },
    {
        "id":262,
        "response":"import typing\nimport itertools\n\ndef rear_extract(test_list: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    return [sub[-1] for sub in test_list]"
    },
    {
        "id":263,
        "response":"import operator as op\nimport itertools\n\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(map(op.sub, test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(0, n+1, 2):\n        sum += math.comb(n, k)\n    return sum"
    },
    {
        "id":265,
        "response":"import numpy as np\nimport re\nimport typing\nimport itertools\n\ndef get_Position(a, n, m):\n    for i in range(n-1, -1, -1):\n        for j in range(m-1, -1, -1):\n            if a[i][j] == 1:\n                return i, j\n    return -1"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    return math.pi * (r ** 2) * h"
    },
    {
        "id":267,
        "response":"import typing\n\ndef dict_filter(dict: typing.Dict, n: int) -> typing.Dict:\n    return {key: value for key, value in dict.items() if value > n}"
    },
    {
        "id":268,
        "response":"import re\nimport typing\nimport itertools\nfrom typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == test_tup[i + 1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "id":269,
        "response":"import math\n\ndef is_num_decagonal(n):\n    x = (n * 8 + 1)\n    y = math.sqrt(x)\n    return (y % 1 == 0) and ((y + 1) % 4 == 0)"
    },
    {
        "id":270,
        "response":"import typing\n\ndef sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return dlist\n    return None"
    },
    {
        "id":271,
        "response":"import typing\n\ndef all_unique(test_list: typing.List) -> bool:\n    return len(test_list) == len(set(test_list))"
    },
    {
        "id":272,
        "response":"from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x - y, nums1, nums2))"
    },
    {
        "id":273,
        "response":"import re\nfrom typing import List\nimport itertools\n\ndef validate(n: int) -> bool:\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        if digit > digits.count(digit):\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_element(list, element):\n    return [x for x in list if x == element]"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "id":276,
        "response":"import itertools\nimport math\n\ndef max_sub_array_sum_repeated(a, n, k):\n    repeated_a = list(itertools.islice(itertools.cycle(a), n * k))\n    max_sum = -math.inf\n    current_sum = 0\n    for i in range(n * k):\n        current_sum = max(repeated_a[i], current_sum + repeated_a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "id":277,
        "response":"import math\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum"
    },
    {
        "id":278,
        "response":"import math\n\ndef modular_inverse(arr, N, P):\n    for i in range(N):\n        if math.gcd(arr[i], P) != 1:\n            arr[i] = -1\n        else:\n            for j in range(1, P):\n                if (arr[i] * j) % P == 1:\n                    arr[i] = j\n                    break\n            else:\n                arr[i] = -1\n    return arr"
    },
    {
        "id":279,
        "response":"import math\nimport calendar\n\ndef odd_Days(N):\n    count = 0\n    for month in range(1, 13):\n        num_days = calendar.monthrange(N, month)[1]\n        for day in range(1, num_days + 1):\n            if day % 2 != 0:\n                count += 1\n    return count"
    },
    {
        "id":280,
        "response":"import itertools\n\ndef max_length(list1):\n    return max(list1, key=len)"
    },
    {
        "id":281,
        "response":"import numpy as np\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        dp = np.zeros((n, k), dtype=int)\n        for i in range(k):\n            dp[0, i] = 1\n            dp[1, i] = k\n            dp[2, i] = k * k - k\n        for i in range(3, n):\n            for j in range(k):\n                dp[i, j] = (k - 1) * dp[i - 1, j] + (k - 1) * dp[i - 2, j]\n        return np.sum(dp[n - 1, :])"
    },
    {
        "id":282,
        "response":"import math\n\ndef find(n, m):\n    if m == 0:\n        return \"Error: Division by zero is not allowed\"\n    return n \/ m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "id":284,
        "response":"import typing\n\ndef max_val(listval: typing.List[int]) -> int:\n    return max(listval)"
    },
    {
        "id":285,
        "response":"import math\n\ndef sum_div(number):\n    sum = 0\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            sum += i\n            if i != number \/\/ i:\n                sum += number \/\/ i\n    return sum"
    },
    {
        "id":286,
        "response":"import sys\nimport itertools\n\ndef get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "id":287,
        "response":"from typing import List, Union\n\ndef flatten_list(list1: List[Union[List, int]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":288,
        "response":"import typing\n\ndef intersection_nested_lists(l1: typing.List[typing.Any], l2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    flat_list1 = [item for sublist in l1 for item in sublist]\n    flat_list2 = [item for sublist in l2 for item in sublist]\n    intersection = list(set(flat_list1) & set(flat_list2))\n    result = []\n    for sublist in l1:\n        common_elements = [element for element in sublist if element in intersection]\n        if common_elements:\n            result.append(common_elements)\n    return result"
    },
    {
        "id":289,
        "response":"import typing\nimport itertools\n\ndef max_aggregate(stdata: typing.List[typing.Tuple[int]]) -> int:\n    return max(sum(tup) for tup in stdata)"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    return math.comb(2*n-1, n-1) if n > 0 else 0"
    },
    {
        "id":291,
        "response":"import typing\nimport collections\n\ndef dict_depth(d: typing.Dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n\n    if not d:\n        return 1\n\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)"
    },
    {
        "id":292,
        "response":"import math\n\ndef set_Bit_Number(n):\n    if n == 0:\n        return 0\n    return int(math.log2(n & -n)) + 1"
    },
    {
        "id":293,
        "response":"import re\nimport typing\nimport itertools\n\ndef solve(a, n):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    bit_count_a = count_set_bits(a)\n    bit_count_n = count_set_bits(n)\n    return bit_count_a == bit_count_n"
    },
    {
        "id":294,
        "response":"import math\nimport itertools\nimport typing\nimport re\n\ndef find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    for i in ranges:\n        arr = arr[i[0]:i[1]+1] + arr[:i[0]] + arr[i[1]+1:]\n    for _ in range(rotations % n):\n        arr = [arr[-1]] + arr[:-1]\n    return arr[index % n]"
    },
    {
        "id":295,
        "response":"import re\nfrom typing import List\n\ndef start_withp(words: List[str]) -> List[str]:\n    return [word for word in words if re.match('p', word, re.IGNORECASE)]"
    },
    {
        "id":296,
        "response":"import sys\nimport math\nimport itertools\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    max_sum = [0] * n\n    max_sum[0] = a[0]\n    for i in range(1, n):\n        max_sum[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j]:\n                max_sum[i] = max(max_sum[i], max_sum[j] + a[i])\n    return max(max_sum[:index]) + a[k]"
    },
    {
        "id":297,
        "response":"import itertools\nimport typing\n\ndef colon_tuplex(tuplex: typing.Tuple, m: int, n: int) -> typing.Tuple:\n    return tuplex[m:n]"
    },
    {
        "id":298,
        "response":"import heapq\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(heap) < N:\n                heapq.heappush(heap, product)\n            else:\n                heapq.heappushpop(heap, product)\n    return heap"
    },
    {
        "id":299,
        "response":"import math\n\ndef maximum(a, b):\n    return max(a, b)"
    },
    {
        "id":300,
        "response":"import re\nimport typing\n\ndef string_to_tuple(str1: str) -> typing.Tuple[str, ...]:\n    return tuple(str1.split(','))"
    },
    {
        "id":301,
        "response":"import math\n\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    left_most_unset_bit = int(math.log2(n ^ (n | (n - 1))))\n    return n | (1 << left_most_unset_bit)"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    return (1\/3) * math.pi * r * r * h"
    },
    {
        "id":303,
        "response":"import re\nimport typing\nimport itertools\n\ndef pos_nos(list1):\n    list1[:] = [num for num in list1 if isinstance(num, (int, float)) and num > 0]\n    return list1"
    },
    {
        "id":304,
        "response":"import itertools\nimport math\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = float('-inf')\n    for i in range(0, 2*n, 2):\n        for j in range(n):\n            if j+1 < n:\n                max_sum = max(max_sum, grid[i][j] + grid[i][j+1])\n            if i+1 < 2*n:\n                max_sum = max(max_sum, grid[i][j] + grid[i+1][j])\n            if i+2 < 2*n and j+1 < n:\n                max_sum = max(max_sum, grid[i][j] + grid[i+1][j] + grid[i+2][j] + grid[i][j+1] + grid[i+1][j+1] + grid[i+2][j+1])\n            if i+2 < 2*n:\n                max_sum = max(max_sum, grid[i][j] + grid[i+1][j] + grid[i+2][j])\n            if j+2 < n:\n                max_sum = max(max_sum, grid[i][j] + grid[i][j+1] + grid[i][j+2])\n    return max_sum"
    },
    {
        "id":305,
        "response":"import re\nfrom typing import List\n\ndef find_Max_Len_Even(str):\n    words = re.findall(r'\\w+', str)\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "id":306,
        "response":"import typing\nimport bisect\n\ndef find_last_occurrence(A: typing.List[int], x: int) -> int:\n    idx = bisect.bisect_right(A, x)\n    if idx > 0 and A[idx-1] == x:\n        return idx - 1\n    else:\n        return -1"
    },
    {
        "id":307,
        "response":"import itertools\n\ndef modified_encode(alist):\n    return [len(list(group))*x if len(list(group)) > 1 else x for x, group in itertools.groupby(alist)]"
    },
    {
        "id":308,
        "response":"import math\n\ndef max_volume (s):\n    a = s \/ 3\n    return a ** 3"
    },
    {
        "id":309,
        "response":"import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5,}\\b', text)"
    },
    {
        "id":310,
        "response":"import math\n\ndef sum_difference(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) \/\/ 6\n    square_of_sum = (n * (n + 1) \/\/ 2) ** 2\n    return square_of_sum - sum_of_squares"
    },
    {
        "id":311,
        "response":"import re\nimport math\nimport typing\nimport itertools\n\ndef find_demlo(s):\n    return int(str(s)[::-1])"
    },
    {
        "id":312,
        "response":"import typing\nimport itertools\n\ndef position_min(list1: typing.List[int]) -> typing.List[int]:\n    min_value = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_value]"
    },
    {
        "id":313,
        "response":"import typing\nimport itertools\n\ndef right_rotate(arr, n, out_of_place, cur):\n    positive = [x for x in arr if x >= 0]\n    negative = [x for x in arr if x < 0]\n    positive = positive[out_of_place:] + positive[:out_of_place]\n    negative = negative[out_of_place:] + negative[:out_of_place]\n    result = []\n    for p, n in itertools.zip_longest(positive, negative):\n        if p is not None:\n            result.append(p)\n        if n is not None:\n            result.append(n)\n    return result"
    },
    {
        "id":314,
        "response":"import itertools\n\ndef sum_of_alternates(test_tuple):\n    tuples = list(itertools.chain.from_iterable(itertools.zip_longest(*[iter(test_tuple)] * 2)))\n    return sum(tuples[::2]) + sum(tuples[1::2])"
    },
    {
        "id":315,
        "response":"import math\nimport sys\n\ndef get_Min_Squares(n):\n    dp = [sys.maxsize] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]"
    },
    {
        "id":316,
        "response":"from collections import Counter\n\ndef most_occurrences(test_list):\n    counter = Counter(test_list)\n    max_count = max(counter.values())\n    most_occurrence_words = [word for word, count in counter.items() if count == max_count]\n    return most_occurrence_words"
    },
    {
        "id":317,
        "response":"import math\n\ndef check_isosceles(x,y,z):\n    a = [x, y, z]\n    a.sort()\n    return a[0]**2 + a[1]**2 == a[2]**2"
    },
    {
        "id":318,
        "response":"import typing\nimport itertools\n\ndef rotate_left(list1: typing.List[typing.Any], m: int, n: int) -> typing.List[typing.Any]:\n    return list1[n:] + list1[:n]"
    },
    {
        "id":319,
        "response":"import re\nimport typing\nimport itertools\n\ndef neg_count(list):\n    count = 0\n    for num in list:\n        if isinstance(num, (int, float)) and num < 0:\n            count += 1\n    return count"
    },
    {
        "id":320,
        "response":"import re\n\ndef find_char(text):\n    three_char_words = re.findall(r'\\b\\w{3}\\b', text)\n    four_char_words = re.findall(r'\\b\\w{4}\\b', text)\n    five_char_words = re.findall(r'\\b\\w{5}\\b', text)\n    return three_char_words, four_char_words, five_char_words"
    },
    {
        "id":321,
        "response":"import math\n\ndef count_unset_bits(n):\n    return 32 - bin(n).count('1')"
    },
    {
        "id":322,
        "response":"import re\nimport typing\nfrom collections import Counter\n\ndef char_frequency(str1: str) -> typing.Dict[str, int]:\n    return dict(Counter(str1))"
    },
    {
        "id":323,
        "response":"import operator\n\ndef Sort(sub_li):\n    return sorted(sub_li, key=operator.itemgetter(1))"
    },
    {
        "id":324,
        "response":"import math\n\ndef check_Validity(a, b, c):\n    return a + b > c and a + c > b and b + c > a"
    },
    {
        "id":325,
        "response":"import math\n\ndef ap_sum(a, n, d):\n    l = a + (n-1)*d\n    return n*(a+l)\/\/2"
    },
    {
        "id":326,
        "response":"import calendar\nimport re\n\ndef check_monthnum(monthname1):\n    month_name = monthname1.lower()\n    month_abbr = re.sub(r'\\s+', '', month_name).capitalize()\n    month_num = list(calendar.month_abbr).index(month_abbr)\n    return calendar.monthrange(2024, month_num)[1] == 28"
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text):\n    return re.compile(r'\\w+\\W*$').sub('', text)"
    },
    {
        "id":328,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_Equality(s: typing.Union[str, int]) -> int:\n    s = str(s)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i] == s[j - 1]:\n                count += 1\n    return count"
    },
    {
        "id":329,
        "response":"import math\nimport typing\n\ndef find_Divisor(x: int, y: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    return gcd(x, y)"
    },
    {
        "id":330,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef sum_three_smallest_nums(lst: typing.List[int]) -> int:\n    return sum(sorted([num for num in lst if num > 0])[:3])"
    },
    {
        "id":331,
        "response":"import typing\n\ndef set_to_tuple(s: typing.Set) -> typing.Tuple:\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"from typing import List\nimport itertools\n\ndef __init__(self, value: List[List[int]], list_num: int, index: int):\n    self.value = value\n    self.list_num = list_num\n    self.index = index\n    self.res = []\n    self.subsets = []\n    self.subset = []\n    self.min_range = float('inf')\n    self.range_list = []\n\n    for i in range(len(self.value[0])):\n        self.subset = []\n        for j in range(len(self.value)):\n            self.subset.append(self.value[j][i])\n        self.subsets.append(self.subset)\n\n    for L in range(0, len(self.value[0])+1):\n        for subset in itertools.combinations(self.subsets, L):\n            self.range_list = []\n            for sub in subset:\n                self.range_list.extend(sub)\n            self.range_list.sort()\n            if len(self.range_list) > 0 and self.range_list[-1] - self.range_list[0] < self.min_range and len(set(self.range_list)) == len(self.value):\n                self.min_range = self.range_list[-1] - self.range_list[0]\n                self.res = [self.range_list[0], self.range_list[-1]]\n    return self.res"
    },
    {
        "id":333,
        "response":"import re\nimport typing\n\ndef dig_let(s: str) -> typing.Tuple[int, int]:\n    letters = sum(c.isalpha() for c in s)\n    digits = sum(c.isdigit() for c in s)\n    return letters, digits"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m+1):\n        sqrt = math.sqrt(i)\n        if sqrt == int(sqrt) and sqrt % 2 != 0:\n            count += 1\n    return count"
    },
    {
        "id":335,
        "response":"import itertools\n\ndef diff_consecutivenums(nums):\n    return list(itertools.starmap(lambda a, b: b - a, zip(nums, nums[1:])))"
    },
    {
        "id":336,
        "response":"import math\nimport itertools\n\ndef zigzag(n, k):\n    return (n - 1) % k + 1"
    },
    {
        "id":337,
        "response":"import math\n\ndef count_Squares(m,n):\n    return (m * (m + 1) * (2 * m + 1)) \/\/ 6 + (n * (n + 1) * (2 * n + 1)) \/\/ 6 - ((min(m, n) * (min(m, n) + 1) * (2 * min(m, n) + 1)) \/\/ 6)"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n, r):\n    return math.comb(n, r)"
    },
    {
        "id":339,
        "response":"import re\n\ndef check(string) :\n    return re.fullmatch('[01]+', string)"
    },
    {
        "id":340,
        "response":"import re\nimport typing\nimport itertools\n\ndef minimum_Length(s) :\n    if len(s) < 2:\n        return s\n    left, right = 0, len(s) - 1\n    while left < right and s[left] == s[right]:\n        temp = s[left]\n        s = s.replace(temp, '')\n        left, right = 0, len(s) - 1\n        if not s:\n            break\n    return s"
    },
    {
        "id":341,
        "response":"import collections\nimport typing\n\ndef first_Element(arr: typing.List[int], n: int, k: int) -> int:\n    count = collections.Counter(arr)\n    for i in arr:\n        if count[i] == k:\n            return i\n    return -1"
    },
    {
        "id":342,
        "response":"import re\nimport typing\nimport itertools\n\ndef unique_Characters(str):\n    str = re.sub(r'\\s+', '', str)\n    return str if len(str) == len(set(str.lower())) else None"
    },
    {
        "id":343,
        "response":"import typing\n\ndef remove_column(list1: typing.List[typing.List[typing.Any]], n: int) -> typing.List[typing.List[typing.Any]]:\n    for i in range(len(list1)):\n        if isinstance(list1[i], list) and n < len(list1[i]):\n            list1[i].pop(n)\n        elif isinstance(list1[i], list):\n            list1[i] = []\n    return list1"
    },
    {
        "id":344,
        "response":"import math\n\ndef tn_ap(a, n, d):\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"import math\n\ndef count_Rectangles(radius):\n    count = 0\n    for length in range(1, radius + 1):\n        for width in range(1, length + 1):\n            if (length \/ 2) ** 2 + (width \/ 2) ** 2 <= radius ** 2:\n                if length == width:\n                    count += 1\n                else:\n                    count += 2\n    return count"
    },
    {
        "id":346,
        "response":"import math\n\ndef find_angle(a, b):\n    return 180 - (a + b)"
    },
    {
        "id":347,
        "response":"import typing\nimport itertools\n\ndef find_max(test_list: typing.List[typing.Tuple]) -> typing.Tuple:\n    return max(test_list, key=max)"
    },
    {
        "id":348,
        "response":"from typing import List\n\ndef moddiv_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x % y, nums1, nums2))"
    },
    {
        "id":349,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    x1 = (-b + math.sqrt(D)) \/ (2*a)\n    x2 = (-b - math.sqrt(D)) \/ (2*a)\n    return x1 == 2*x2 or x2 == 2*x1"
    },
    {
        "id":350,
        "response":"import math\n\ndef get_carol(n):\n    return (math.comb(2*n, n) \/\/ (n+1)) % (10**9 + 7)"
    },
    {
        "id":351,
        "response":"import typing\n\ndef remove_empty(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    list1[:] = [i for i in list1 if i != []]\n    return list1"
    },
    {
        "id":352,
        "response":"import collections\nimport re\nimport typing\nimport itertools\n\ndef max_occurrences(nums):\n    count = collections.Counter(nums)\n    max_count = max(list(count.values()))\n    max_items = [item for item, freq in count.items() if freq == max_count]\n    return max_items"
    },
    {
        "id":353,
        "response":"from typing import List, Tuple\n\ndef add_K_element(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return [tuple(i + K for i in tup) for tup in test_list]"
    },
    {
        "id":354,
        "response":"import re\nimport typing\nimport itertools\n\ndef make_flip(ch: str) -> int:\n    flips = 0\n    expected = '0'\n    for bit in ch:\n        if bit != expected:\n            flips += 1\n        expected = '1' if expected == '0' else '0'\n    return flips"
    },
    {
        "id":355,
        "response":"import math\n\ndef count_Digit(n):\n    if n == 0:\n        return 1\n    return math.floor(math.log10(abs(n))) + 1"
    },
    {
        "id":356,
        "response":"import typing\n\ndef adjacent_num_product(list_nums: typing.List[int]) -> int:\n    if len(list_nums) < 2:\n        return None\n    max_product = float('-inf')\n    for i in range(len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        max_product = max(max_product, product)\n    return max_product"
    },
    {
        "id":357,
        "response":"import math\nfrom typing import Optional\n\nclass TreeNode:\n    def __init__(self, data: int):\n        self.data = data\n        self.left = None\n        self.right = None\n\n    def is_balanced(self) -> bool:\n        def check_height(node: Optional[TreeNode]) -> int:\n            if node is None:\n                return 0\n            left_height = check_height(node.left)\n            right_height = check_height(node.right)\n            if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n                return -1\n            return max(left_height, right_height) + 1\n        return check_height(self) != -1"
    },
    {
        "id":358,
        "response":"import itertools\nimport typing\n\ndef repeat_tuples(test_tup: typing.Tuple, N: int) -> typing.Tuple:\n    return tuple(itertools.chain.from_iterable(itertools.repeat(test_tup, N)))"
    },
    {
        "id":359,
        "response":"import math\n\ndef lateralsurface_cuboid(l, w, h):\n    return 2 * (l * h + w * h)"
    },
    {
        "id":360,
        "response":"import typing\n\ndef float_sort(price: typing.Tuple[str, float, str]) -> typing.Tuple[str, float, str]:\n    return tuple(sorted(price, key=lambda x: float(x[1]) if isinstance(x, typing.Tuple) else x))"
    },
    {
        "id":361,
        "response":"import itertools\nimport typing\nimport re\n\ndef smallest_missing(A, left_element, right_element):\n    A = sorted(A[left_element:right_element+1])\n    smallest = left_element\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            smallest = i\n            break\n    else:\n        smallest = right_element + 1\n    return smallest"
    },
    {
        "id":362,
        "response":"import heapq\n\ndef heap_assending(nums):\n    heapq.heapify(nums)\n    result = []\n    while nums:\n        result.append(heapq.heappop(nums))\n    return result"
    },
    {
        "id":363,
        "response":"import math\n\ndef volume_cuboid(l, w, h):\n    return l * w * h"
    },
    {
        "id":364,
        "response":"import itertools\n\ndef permute_string(str):\n    perms = [''.join(p) for p in itertools.permutations(str)]\n    return perms"
    },
    {
        "id":365,
        "response":"import math\n\ndef round_num(n, m):\n    return math.ceil(n \/ m) * m"
    },
    {
        "id":366,
        "response":"from typing import Tuple, Any\nimport itertools\n\ndef remove_replica(test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    seen = set()\n    custom_value = \"custom_value\"\n    return tuple(custom_value if item in seen else item for item in test_tup if not (item in seen or seen.add(item)))"
    },
    {
        "id":367,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_Char(s, c):\n    return s.replace(c, '')"
    },
    {
        "id":368,
        "response":"import typing\nimport itertools\n\ndef move_first(test_list: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if len(test_list) > 0:\n        test_list.insert(0, test_list.pop())\n    return test_list"
    },
    {
        "id":369,
        "response":"import math\n\ndef surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)"
    },
    {
        "id":370,
        "response":"import typing\n\ndef multi_list(rownum, colnum):\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]"
    },
    {
        "id":371,
        "response":"import typing\n\ndef index_on_inner_list(list_data: typing.List[typing.List[typing.Any]], index_no: int) -> typing.List[typing.Any]:\n    return [inner_list[index_no] for inner_list in list_data if index_no < len(inner_list)]"
    },
    {
        "id":372,
        "response":"import math\nimport typing\n\ndef find_rotation_count(A: typing.List[int]) -> int:\n    n = len(A)\n    min_val = min(A)\n    return A.index(min_val)"
    },
    {
        "id":373,
        "response":"import math\n\ndef even_bit_toggle_number(n) :\n    binary = bin(n)[2:]\n    binary = binary.zfill((len(binary) + 1) \/\/ 2 * 2)\n    result = ''\n    for i in range(len(binary)):\n        if i % 2 == 1:\n            result += '1' if binary[i] == '0' else '0'\n        else:\n            result += binary[i]\n    return int(result, 2)"
    },
    {
        "id":374,
        "response":"import collections\nimport math\nimport re\nimport typing\nfrom itertools import groupby, permutations, combinations, product\nfrom typing import List, Tuple\n\ndef frequency_Of_Smallest(n,arr):\n    arr.sort()\n    min_val = arr[0]\n    return arr.count(min_val)"
    },
    {
        "id":375,
        "response":"import typing\n\ndef get_perrin(n: int) -> int:\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        perrin = [3, 0, 2]\n        for i in range(3, n + 1):\n            perrin.append(perrin[i - 2] + perrin[i - 3])\n        return perrin[n]"
    },
    {
        "id":376,
        "response":"import re\nfrom collections import deque\nfrom typing import List\n\ndef swap_count(s: str) -> int:\n    stack = deque()\n    count = 0\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    opening = 0\n    closing = 0\n    for char in stack:\n        if char == '[':\n            opening += 1\n        else:\n            closing += 1\n    return (opening + 1) \/\/ 2 + (closing + 1) \/\/ 2"
    },
    {
        "id":377,
        "response":"import re\nimport typing\nimport itertools\n\ndef even_or_odd(N):\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "id":378,
        "response":"import math\n\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":379,
        "response":"import typing\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"
    },
    {
        "id":380,
        "response":"import typing\nimport itertools\n\ndef add_string(list: typing.List[str], string: str) -> typing.List[str]:\n    return [string + item for item in list]"
    },
    {
        "id":381,
        "response":"from typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[str]) -> Dict[str, Dict[str, str]]:\n    return {i: {j: k} for i, j, k in zip(l1, l2, l3)}"
    },
    {
        "id":382,
        "response":"import typing\n\ndef get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n <= 5:\n        return n\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = max(i, dp[i \/\/ 2] + dp[i \/\/ 3] + dp[i \/\/ 4] + dp[i \/\/ 5])\n        return dp[n]"
    },
    {
        "id":383,
        "response":"import functools\nimport operator\n\ndef max_length_list(input_list):\n    return max(input_list, key=len)"
    },
    {
        "id":384,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"import re\nfrom typing import Dict\n\ndef first_non_repeating_character(str1: str) -> str:\n    char_count: Dict[str, int] = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return \"\""
    },
    {
        "id":386,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_char(string: str) -> bool:\n    if len(string) < 1:\n        return False\n    return string[0] == string[-1]"
    },
    {
        "id":387,
        "response":"import math\n\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n\/\/2 - 1] + numbers[n\/\/2]) \/ 2\n    else:\n        median = numbers[n\/\/2]\n    return median"
    },
    {
        "id":388,
        "response":"import itertools\nimport re\nimport typing\n\ndef sum_of_digits(nums: typing.List[int]) -> typing.List[int]:\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "id":389,
        "response":"import itertools\nimport operator\n\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(map(operator.xor, test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"from collections import Counter\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple]) -> List[Tuple]:\n    freq_dict = Counter(tuple(sorted(sub)) for sub in test_list)\n    return list(freq_dict.items())"
    },
    {
        "id":391,
        "response":"import itertools\nimport operator\n\ndef add_nested_tuples(test_tup1, test_tup2):\n    return tuple(map(operator.add, test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"import math\n\ndef ncr_modp(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p"
    },
    {
        "id":393,
        "response":"import re\n\ndef is_valid_URL(str):\n    pattern = re.compile(\n        r'^(?:http|ftp)s?:\/\/'  # http:\/\/ or https:\/\/\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:\/?|[\/?]\\S+)$', re.IGNORECASE)\n    return bool(pattern.match(str))"
    },
    {
        "id":394,
        "response":"import math\n\ndef minimum(a, b):\n    return min(a, b)"
    },
    {
        "id":395,
        "response":"import typing\n\ndef check_tuplex(tuplex: typing.Tuple, tuple1: typing.Tuple) -> bool:\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False"
    },
    {
        "id":396,
        "response":"import math\n\ndef find_Parity(x):\n    return x & 1"
    },
    {
        "id":397,
        "response":"import itertools\n\ndef rearrange_bigger(n):\n    digits = [int(x) for x in str(n)]\n    perms = sorted([''.join(map(str, p)) for p in itertools.permutations(digits)])\n    idx = perms.index(''.join(map(str, digits)))\n    if idx == len(perms) - 1:\n        return -1\n    else:\n        return int(perms[idx + 1])"
    },
    {
        "id":398,
        "response":"import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = []\n    for i in range(len(nums1)):\n        heapq.heappush(queue, (nums1[i] + nums2[0], i, 0))\n    result = []\n    while queue and k > 0:\n        _, i, j = heapq.heappop(queue)\n        result.append((nums1[i], nums2[j]))\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    return result"
    },
    {
        "id":399,
        "response":"import itertools\nimport typing\n\ndef min_product_tuple(list1: typing.List[typing.Tuple[int]]) -> typing.Tuple[int]:\n    return min(itertools.combinations(list1, 2), key=lambda x: x[0][0]*x[0][1] + x[1][0]*x[1][1])"
    },
    {
        "id":400,
        "response":"import typing\nimport itertools\n\ndef min_val(listval: typing.List[int]) -> int:\n    return min(listval)"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)"
    },
    {
        "id":402,
        "response":"import typing\n\ndef remove_odd(l: typing.List[int]) -> typing.List[int]:\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "id":403,
        "response":"import typing\n\ndef extract_nth_element(list1: typing.List[typing.Tuple], n: int) -> typing.Tuple:\n    return [item[n] for item in list1]"
    },
    {
        "id":404,
        "response":"import itertools\n\ndef overlapping(list1, list2):\n    return list(set(list1) & set(list2))"
    },
    {
        "id":405,
        "response":"import itertools\nimport math\n\ndef max_Product(arr):\n    max_product = -math.inf\n    result = []\n    for pair in itertools.combinations(arr, 2):\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n            result = list(pair)\n    return result"
    },
    {
        "id":406,
        "response":"import math\nimport itertools\n\ndef breakSum(n):\n    max_sum = 0\n    for i in range(1, n):\n        for j in range(1, n - i):\n            k = n - i - j\n            if i + j + k == n and i * j * k > max_sum:\n                max_sum = i * j * k\n    return max_sum"
    },
    {
        "id":407,
        "response":"from typing import List, Tuple\n\ndef group_tuples(Input: List[Tuple]) -> Tuple:\n    if not Input:\n        return ()\n    first_element = Input[0][0]\n    for tup in Input:\n        if tup[0] != first_element:\n            return ()\n    return (first_element,)"
    },
    {
        "id":408,
        "response":"import itertools\n\ndef Find_Max(lst):\n    max_len = 0\n    max_sublist = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            if len(lst[i:j]) > max_len:\n                max_len = len(lst[i:j])\n                max_sublist = lst[i:j]\n    return max_sublist"
    },
    {
        "id":409,
        "response":"import math\nimport typing\n\ndef round_and_sum(list1: typing.List[float]) -> typing.List[float]:\n    return [round(num) * len(list1) for num in list1]"
    },
    {
        "id":410,
        "response":"import math\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum"
    },
    {
        "id":411,
        "response":"import re\nimport typing\nimport itertools\n\ndef concatenate_tuple(test_tup):\n    return '-'.join(map(str, test_tup))"
    },
    {
        "id":412,
        "response":"import math\n\ndef find_Average_Of_Cube(n):\n    return sum(i**3 for i in range(1, n+1)) \/ n"
    },
    {
        "id":413,
        "response":"import sys\nimport itertools\n\ndef get_maxgold(gold, m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                dp[row][col] = gold[row][col]\n            elif row == 0:\n                dp[row][col] = max(dp[row][col+1], dp[row+1][col+1]) + gold[row][col]\n            elif row == m-1:\n                dp[row][col] = max(dp[row-1][col+1], dp[row][col+1]) + gold[row][col]\n            else:\n                dp[row][col] = max(dp[row-1][col+1], dp[row][col+1], dp[row+1][col+1]) + gold[row][col]\n    return max(dp[i][0] for i in range(m))"
    },
    {
        "id":414,
        "response":"import re\nimport typing\nimport itertools\n\ndef extract_rear(test_tuple: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return tuple(test_tuple[i] for i in range(len(test_tuple) - 1, -1, -1))"
    },
    {
        "id":415,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "id":416,
        "response":"import functools\nimport operator\n\nfilter_oddnumbers = lambda nums: list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "id":418,
        "response":"import typing\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    n = len(my_list)\n    gap = n \/\/ 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n\n    return my_list"
    },
    {
        "id":419,
        "response":"import re\nimport typing\nimport itertools\n\ndef and_tuples(test_tup1, test_tup2):\n    return tuple(i for i in test_tup1 if i in test_tup2)"
    },
    {
        "id":420,
        "response":"import math\n\ndef parabola_directrix(a, b, c):\n    return (4 * a * c - b**2) \/ (4 * a)"
    },
    {
        "id":421,
        "response":"import typing\n\ndef common_element(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> bool:\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "id":422,
        "response":"import math\n\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":"import typing\nimport itertools\n\ndef check_greater(arr: typing.List[int], number: int) -> typing.List[bool]:\n    return [num < number for num in arr]"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    return re.search(r'b', text, re.IGNORECASE) is not None"
    },
    {
        "id":425,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef last_Digit(n) :\n    return n % 10"
    },
    {
        "id":426,
        "response":"import re\nimport typing\nimport itertools\n\ndef neg_nos(list1: typing.List[int]) -> typing.List[int]:\n    for num in list1:\n        if num < 0:\n            print(num)\n    return list1"
    },
    {
        "id":427,
        "response":"import re\nimport typing\n\ndef remove_odd(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])"
    },
    {
        "id":428,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_bidirectional(test_list):\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "id":429,
        "response":"import functools\nimport operator\n\ndef multiple_to_single(L):\n    return functools.reduce(operator.mul, L, 1)"
    },
    {
        "id":430,
        "response":"import re\nimport nltk\nfrom nltk import pos_tag, word_tokenize\nfrom typing import List, Tuple\n\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(text: str) -> List[Tuple[str, int]]:\n    words = word_tokenize(text)\n    tagged_words = pos_tag(words)\n    adverbs = [(word, i) for i, (word, pos) in enumerate(tagged_words) if pos in ['RB', 'RBR', 'RBS']]\n    return adverbs"
    },
    {
        "id":431,
        "response":"import math\n\ndef surfacearea_cube(l):\n    return 6 * l ** 2"
    },
    {
        "id":432,
        "response":"import re\nimport typing\nimport itertools\nimport math\nimport string\n\ndef positive_count(nums: typing.List[int]) -> float:\n    positive = sum(1 for num in nums if num > 0)\n    return positive \/ len(nums)"
    },
    {
        "id":433,
        "response":"import re\nimport typing\nimport itertools\n\ndef largest_neg(list1: typing.List[int]) -> int:\n    neg_list = [num for num in list1 if num < 0]\n    if not neg_list:\n        return None\n    return max(neg_list)"
    },
    {
        "id":434,
        "response":"import typing\n\ndef trim_tuple(test_list: typing.List[typing.Tuple[int]], K: int):\n    return [tup[:K] for tup in test_list]"
    },
    {
        "id":435,
        "response":"import operator\nimport itertools\n\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(map(operator.mul, test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":"import typing\nimport itertools\n\ndef count_Occurrence(tup, lst):\n    return tuple(i for i in lst if i in tup)"
    },
    {
        "id":437,
        "response":"import typing\nimport itertools\n\ndef cube_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x**3, nums))"
    },
    {
        "id":438,
        "response":"import math\n\ndef cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (i + 1) \/\/ 2\n    return sum"
    },
    {
        "id":439,
        "response":"import math\nimport typing\n\ndef check_Triangle(x1: float, y1: float, x2: float, y2: float, x3: float, y3: float) -> bool:\n    a = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    b = math.sqrt((x3 - x2)**2 + (y3 - y2)**2)\n    c = math.sqrt((x1 - x3)**2 + (y1 - y3)**2)\n    return a + b > c and a + c > b and b + c > a"
    },
    {
        "id":440,
        "response":"import re\n\ndef extract_string(str, l):\n    return [s for s in str if len(s) == l]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1: str) -> str:\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":"import math\n\ndef loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None"
    },
    {
        "id":443,
        "response":"import math\nimport typing\n\ndef sumofFactors(n: int) -> int:\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(factors)"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "id":445,
        "response":"import calendar\n\ndef check_monthnumb_number(monthnum2):\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]"
    },
    {
        "id":446,
        "response":"import re\nimport typing\nimport itertools\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"import sys\nimport itertools\n\ndef Find_Min(lst):\n    min_len = sys.maxsize\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len and len(sublist) > 0:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "id":448,
        "response":"import math\n\ndef rectangle_area(l, b):\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    return re.sub('[A-Z]+', '', str1)"
    },
    {
        "id":450,
        "response":"import re\nimport typing\nimport itertools\n\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]"
    },
    {
        "id":451,
        "response":"import re\n\ndef upper_ctr(str):\n    return len(re.findall(r'[A-Z]', str))"
    },
    {
        "id":452,
        "response":"import itertools\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.combinations(list1, r))\n    return result"
    },
    {
        "id":453,
        "response":"import itertools\nimport math\n\ndef max_subarray_product(arr):\n    max_product = float('-inf')\n    max_subarray = []\n    for L in range(0, len(arr)+1):\n        for subset in itertools.combinations(arr, L):\n            if subset:\n                product = math.prod(subset)\n                if product > max_product:\n                    max_product = product\n                    max_subarray = subset\n    return max_subarray"
    },
    {
        "id":454,
        "response":"import typing\nimport itertools\n\ndef check_value(dict, n):\n    return all(value == n for value in dict.values())"
    },
    {
        "id":455,
        "response":"import typing\n\ndef drop_empty(dict1: typing.Dict) -> typing.Dict:\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "id":456,
        "response":"import typing\n\ndef find_peak_util(arr, low, high, n):\n    mid = (low + high) \/\/ 2\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n        return arr[mid]\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)"
    },
    {
        "id":457,
        "response":"import re\nimport typing\nimport itertools\n\ndef decimal_to_Octal(deciNum: int) -> str:\n    return oct(deciNum).replace(\"0o\", \"\")"
    },
    {
        "id":458,
        "response":"import math\nimport itertools\n\ndef max_product(arr, n):\n    max_product = -math.inf\n    for r in range(1, n + 1):\n        for subset in itertools.combinations(arr, r):\n            if all(subset[i] < subset[i + 1] for i in range(len(subset) - 1)):\n                product = 1\n                for num in subset:\n                    product *= num\n                max_product = max(max_product, product)\n    return max_product"
    },
    {
        "id":459,
        "response":"import typing\n\ndef max_profit(price: typing.List[int], k: int) -> int:\n    n = len(price)\n    if n < 2:\n        return 0\n    if k >= n \/\/ 2:\n        return sum(max(0, price[i] - price[i - 1]) for i in range(1, n))\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n    return dp[k][n - 1]"
    },
    {
        "id":460,
        "response":"import itertools\n\ndef add_pairwise(test_tup):\n    return tuple(map(sum, zip(*test_tup)))"
    },
    {
        "id":461,
        "response":"import numpy as np\n\ndef find_remainder(arr, lens, n):\n    result = 1\n    for i in range(lens):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "id":462,
        "response":"import itertools\n\ndef check_Consecutive(l):\n    return all(y - x == 1 for x, y in itertools.pairwise(sorted(l)))"
    },
    {
        "id":463,
        "response":"from typing import Tuple, List\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> List[Tuple]:\n    common = set(test_list1).intersection(set(test_list2))\n    return list(common)"
    },
    {
        "id":464,
        "response":"import re\nimport typing\nimport itertools\n\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)"
    },
    {
        "id":465,
        "response":"from collections import Counter\nfrom typing import Dict, Any\n\ndef sort_counter(dict1: Dict[Any, int]) -> Dict[Any, int]:\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))"
    },
    {
        "id":466,
        "response":"import sys\nimport math\nimport re\nimport typing\nimport itertools\n\ndef big_sum(nums: typing.List[int]) -> int:\n    return max(nums) + min(nums)"
    },
    {
        "id":467,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_lower(string: str) -> str:\n    return string.lower()"
    },
    {
        "id":468,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_lowercase(str1: str) -> str:\n    return ''.join(filter(str.isupper, str1))"
    },
    {
        "id":469,
        "response":"import math\n\ndef first_Digit(n):\n    n = abs(n)\n    while n >= 10:\n        n \/= 10\n    return int(n)"
    },
    {
        "id":470,
        "response":"import re\nfrom typing import Counter\nfrom collections import Counter\n\ndef get_max_occuring_char(str1):\n    str1 = re.sub('[^a-zA-Z]', '', str1).lower()\n    char_count = Counter(str1)\n    max_count = max(char_count.values())\n    max_chars = [char for char, count in char_count.items() if count == max_count]\n    return max_chars[0]"
    },
    {
        "id":471,
        "response":"import itertools\n\ndef is_subset_sum(set, n, sum):\n    for r in range(n + 1):\n        for subset in itertools.combinations(set, r):\n            if sum(subset) == sum:\n                return True\n    return False"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    return re.findall(r'[A-Z][a-z]+', text)"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x):\n    n = 1\n    while True:\n        factorial = math.factorial(n)\n        if factorial % x == 0:\n            return n\n        n += 1"
    },
    {
        "id":474,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_matching_tuple(test_list1, test_list2):\n    for i in test_list2:\n        if i in test_list1:\n            test_list1.remove(i)\n    return test_list1"
    },
    {
        "id":475,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef is_palindrome(n) -> bool:\n    return str(n) == str(n)[::-1]"
    },
    {
        "id":476,
        "response":"import math\nimport typing\n\ndef nCr(n: int, r: int) -> int:\n    return math.factorial(n) \/\/ (math.factorial(r) * math.factorial(n - r))"
    },
    {
        "id":477,
        "response":"import operator\n\ndef sort_tuple(tup):\n    return sorted(tup, key=operator.itemgetter(-1))"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    n = 5\n    return (n * a**2) \/ (4 * math.tan(math.pi \/ n))"
    },
    {
        "id":479,
        "response":"import collections\nimport itertools\n\ndef frequency_Of_Largest(n,arr):\n    max_val = max(arr)\n    return arr.count(max_val)"
    },
    {
        "id":480,
        "response":"from typing import List, Tuple\n\ndef extract_symmetric(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    symmetric_pairs = []\n    for pair in test_list:\n        if (pair[1], pair[0]) in test_list:\n            symmetric_pairs.append(pair)\n    return symmetric_pairs"
    },
    {
        "id":481,
        "response":"import math\n\ndef sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) \/ (1 - r)"
    },
    {
        "id":482,
        "response":"import bisect\nimport typing\n\ndef binary_search(item_list: typing.List[int], item: int) -> typing.List[int]:\n    item_list.sort()\n    index = bisect.bisect_left(item_list, item)\n    if index != len(item_list) and item_list[index] == item:\n        item_list[index] = f\"Found: {item}\"\n    return item_list"
    },
    {
        "id":483,
        "response":"import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    for x in range(startx, endx + 1):\n        for y in range(starty, endy + 1):\n            points = []\n            for i in range(6):\n                px = x + radius * math.cos(math.pi \/ 3 * i)\n                py = y + radius * math.sin(math.pi \/ 3 * i)\n                points.append((px, py))\n            polygons.append(points)\n    return polygons"
    },
    {
        "id":484,
        "response":"import re\n\ndef binary_to_integer(test_tup):\n    binary_str = ''.join(test_tup)\n    return int(binary_str, 2)"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\nimport typing\n\ndef heap_queue_smallest(nums: typing.List[int], n: int) -> typing.List[int]:\n    heapq.heapify(nums)\n    for _ in range(n-1):\n        heapq.heappop(nums)\n    return [heapq.heappop(nums)]"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"import math\n\ndef gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x"
    },
    {
        "id":489,
        "response":"import math\nimport typing\n\ndef diameter_circle(r: typing.Union[int, float]) -> typing.Union[int, float]:\n    return r"
    },
    {
        "id":490,
        "response":"import itertools\nimport typing\n\ndef concatenate_elements(list: typing.List[str]) -> str:\n    return ''.join(map(str, list))"
    },
    {
        "id":491,
        "response":"import sys\n\ndef min_cost(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"import typing\n\ndef similar_elements(test_tup1: typing.Tuple, test_tup2: typing.Tuple) -> typing.Tuple:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    similar = set1.intersection(set2)\n    return tuple(similar)"
    },
    {
        "id":493,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef is_not_prime(n: int) -> int:\n    if n <= 1:\n        return n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return n\n    return None"
    },
    {
        "id":494,
        "response":"import heapq\nimport typing\n\ndef heap_queue_largest(nums: typing.List[int], n: int) -> typing.List[int]:\n    heapq.heapify(nums)\n    for _ in range(len(nums) - n):\n        heapq.heappop(nums)\n    return nums"
    },
    {
        "id":495,
        "response":"import math\n\ndef count_ways(n):\n    return math.pow(7, n \/\/ 2) if n % 2 == 0 else 0"
    },
    {
        "id":496,
        "response":"import math\n\ndef is_Power_Of_Two (x):\n    if x <= 0:\n        return False\n    return math.log2(x) % 1 == 0"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"import math\n\ndef square_nums(nums):\n    return list(map(lambda x: x**2, set(nums)))"
    },
    {
        "id":499,
        "response":"import itertools\n\ndef find_Rotations(s):\n    def is_equal(s1, s2):\n        return s1 == s2\n\n    rotations = []\n    for i in range(len(s)):\n        rotations.append(''.join(itertools.islice(itertools.cycle(s), i, i+len(s))))\n\n    for i in range(len(rotations)):\n        if is_equal(s, rotations[i]):\n            return i"
    },
    {
        "id":500,
        "response":"import heapq\nimport typing\n\ndef small_nnum(list1: typing.List[int], n: int) -> typing.List[int]:\n    return heapq.nsmallest(n, list1)"
    }
]