[
    {
        "id":1,
        "response":"def remove_Occ(s, ch):\n    import re\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    if first_occurrence == last_occurrence:\n        return s.replace(ch, '', 1)\n    return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]"
    },
    {
        "id":2,
        "response":"def sort_matrix(M):\n    import numpy as np\n    M = np.array(M)\n    row_sums = np.sum(M, axis=1)\n    sorted_indices = np.argsort(row_sums)\n    return M[sorted_indices].tolist()"
    },
    {
        "id":3,
        "response":"from collections import Counter\nfrom typing import Dict, List\n\ndef count_common(words: List[str]) -> Dict[str, int]:\n    counter = Counter(words)\n    return dict(counter)"
    },
    {
        "id":4,
        "response":"import math\n\ndef find_Volume(l, b, h):\n    area = (math.sqrt(3) \/ 4) * (l ** 2)\n    volume = area * h\n    return volume"
    },
    {
        "id":5,
        "response":"import re\n\ndef split_lowerstring(text):\n    return re.findall('[a-z]+', text.lower())"
    },
    {
        "id":6,
        "response":"import re\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))"
    },
    {
        "id":7,
        "response":"def square_perimeter(a):\n    return 4 * a"
    },
    {
        "id":8,
        "response":"def str_to_list(s1, s2):\n    s2_set = set(s2)\n    return ''.join([char for char in s1 if char not in s2_set])"
    },
    {
        "id":9,
        "response":"def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "id":10,
        "response":"def is_woodall(x):\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        if woodall_num == x:\n            return True\n        elif woodall_num > x:\n            return False\n        n += 1"
    },
    {
        "id":11,
        "response":"def multiples_of_num(m, n):\n    return [i * m for i in range(1, n + 1)]"
    },
    {
        "id":12,
        "response":"def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"
    },
    {
        "id":13,
        "response":"def maximum_Sum(list1):\n    from typing import List\n    return max(list1, key=sum)"
    },
    {
        "id":14,
        "response":"def binary_to_decimal(binary: str) -> int:\n    try:\n        decimal = int(binary, 2)\n        return decimal\n    except ValueError:\n        return None"
    },
    {
        "id":15,
        "response":"from collections import Counter\n\ndef find_Product(arr, n):\n    count = Counter(arr)\n    product = 1\n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n    return product"
    },
    {
        "id":16,
        "response":"def check_k_elements(test_list, K):\n    return len(test_list) == K"
    },
    {
        "id":17,
        "response":"import re\ndef remove(list):\n    return [re.sub('\\d', '', s) for s in list]"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(k):\n        result = result * (n - i)\n        result = result \/\/ (i + 1)\n    return result"
    },
    {
        "id":19,
        "response":"def get_Odd_Occurrence(arr, arr_size):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    return None"
    },
    {
        "id":20,
        "response":"def check_Equality(s: str) -> int:\n    from collections import defaultdict\n    count = 0\n    char_count = defaultdict(int)\n    for char in s:\n        count += char_count[char]\n        char_count[char] += 1\n    return count + len(s)"
    },
    {
        "id":21,
        "response":"import heapq\nfrom collections import Counter\n\ndef topKFrequent(nums, k):\n    count = Counter(nums)\n    return heapq.nlargest(k, count.keys(), key=count.get)"
    },
    {
        "id":22,
        "response":"def max_Prime_Factors(n):\n    import math\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n \/ i\n    if n > 2:\n        max_prime = n\n    return int(max_prime)"
    },
    {
        "id":23,
        "response":"def decimal_To_Binary(N):\n    return bin(N)[2:]"
    },
    {
        "id":24,
        "response":"def find_missing(ar, N):\n    from typing import List\n    full_set = set(range(ar[0], ar[-1] + 1))\n    actual_set = set(ar)\n    missing_nums = sorted(list(full_set - actual_set))\n    if len(missing_nums) == 0:\n        return [-1]\n    return missing_nums[:N]"
    },
    {
        "id":25,
        "response":"def find_rect_num(n):\n    return n * (n + 1)"
    },
    {
        "id":26,
        "response":"def find_Nth_Digit(p, q, N):\n    from decimal import Decimal, getcontext\n    getcontext().prec = N + 10\n    fraction = str(Decimal(p) \/ Decimal(q))[2:]\n    if len(fraction) >= N:\n        return int(fraction[N-1])\n    else:\n        return 0"
    },
    {
        "id":27,
        "response":"def sort_mixed_list(mixed_list):\n    ints = sorted([x for x in mixed_list if isinstance(x, int)])\n    strs = sorted([x for x in mixed_list if isinstance(x, str)])\n    return ints + strs"
    },
    {
        "id":28,
        "response":"def div_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return None\n    return even \/ odd"
    },
    {
        "id":29,
        "response":"from collections import Counter\n\ndef rearange_string(S):\n    count = Counter(S)\n    max_count = max(count.values())\n    if len(S) < 2 * max_count - 1:\n        return \"\"\n    max_char = [k for k, v in count.items() if v == max_count]\n    if len(max_char) > 1:\n        return S\n    result = []\n    for char in max_char:\n        result.append(char)\n        count[char] -= 1\n    for _ in range(len(S) - max_count):\n        next_char = max(count, key=count.get)\n        result.append(next_char)\n        count[next_char] -= 1\n        if count[next_char] == 0:\n            del count[next_char]\n        result.append(max_char[0])\n        count[max_char[0]] -= 1\n    if count[max_char[0]] > 0:\n        result.append(max_char[0])\n    return \"\".join(result)\n\ndef rearange_string(S):\n    count = Counter(S)\n    max_count = max(count.values())\n    if len(S) < 2 * max_count - 1:\n        return \"\"\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    result = []\n    while sorted_count:\n        first_char, first_count = sorted_count.pop(0)\n        result.append(first_char)\n        first_count -= 1\n        if sorted_count:\n            second_char, second_count = sorted_count.pop(0)\n            result.append(second_char)\n            second_count -= 1\n            if second_count > 0:\n                sorted_count.append((second_char, second_count))\n        if first_count > 0:\n            sorted_count.append((first_char, first_count))\n        sorted_count.sort(key=lambda x: x[1], reverse=True)\n    return \"\".join(result)"
    },
    {
        "id":30,
        "response":"from collections import Counter\n\ndef freq_element(nums):\n    freq = Counter(nums)\n    return dict(freq)"
    },
    {
        "id":31,
        "response":"def filter_evennumbers(nums):\n    nums = list(filter(lambda x: x % 2 == 0, nums))\n    return nums"
    },
    {
        "id":32,
        "response":"from collections import Counter\n\ndef find_Sum(arr, n):\n    count = Counter(arr)\n    return sum(key for key, value in count.items() if value > 1)"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns, text):\n        return text\n    else:\n        return None"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text):\n    pattern = r'^[a-zA-Z]+'\n    if re.match(pattern, text):\n        return text\n    else:\n        return None"
    },
    {
        "id":35,
        "response":"import math\nfrom functools import reduce\n\ndef find_gcd(nums):\n    return reduce(math.gcd, nums)"
    },
    {
        "id":36,
        "response":"def test_distinct(data):\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":"import math\n\ndef compute_Last_Digit(a, b):\n    if b > a:\n        return 0\n    \n    result = 1\n    for i in range(b + 1, a + 1):\n        result *= i\n    \n    while result % 10 == 0:\n        result \/\/= 10\n    \n    return result % 10"
    },
    {
        "id":38,
        "response":"def odd_bit_set_number(n):\n    mask = 0xAAAAAAAA\n    n = n | mask\n    return n"
    },
    {
        "id":39,
        "response":"def specified_element(nums, N):\n    return [num[N] for num in nums if len(num) > N]"
    },
    {
        "id":40,
        "response":"from typing import List\n\ndef min_length_list(input_list: List[List]) -> List:\n    return min(input_list, key=lambda x: len(x), default=[])"
    },
    {
        "id":41,
        "response":"def check_equilateral(x, y, z):\n    if x <= 0 or y <= 0 or z <= 0:\n        return False\n    if x == y == z:\n        return True\n    return False"
    },
    {
        "id":42,
        "response":"def parallelogram_area(b, h):\n    return b * h"
    },
    {
        "id":43,
        "response":"def check_Equality(s: str) -> bool:\n    if len(s) < 1:\n        return False\n    return s[0] == s[-1]"
    },
    {
        "id":44,
        "response":"def counting_sort(my_list):\n    if not my_list:\n        return my_list\n\n    max_val = max(my_list)\n    min_val = min(my_list)\n    count = [0] * (max_val - min_val + 1)\n    output = [0] * len(my_list)\n\n    for num in my_list:\n        count[num - min_val] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for num in my_list:\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n\n    return output"
    },
    {
        "id":45,
        "response":"def tn_gp(a, n, r):\n    return a * (r ** (n - 1))"
    },
    {
        "id":46,
        "response":"def rev(num):\n    reversed_num = int(str(abs(num))[::-1])\n    if num < 0:\n        reversed_num = -reversed_num\n    return num == 2 * reversed_num - 1"
    },
    {
        "id":47,
        "response":"from functools import cmp_to_key\n\ndef compare(a, b):\n    ab = str(a) + str(b)\n    ba = str(b) + str(a)\n    if ab > ba:\n        return -1\n    elif ab < ba:\n        return 1\n    else:\n        return 0\n\ndef find_Max_Num(arr, n):\n    arr.sort(key=cmp_to_key(compare))\n    return ''.join(map(str, arr)).lstrip('0') or '0'"
    },
    {
        "id":48,
        "response":"def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)"
    },
    {
        "id":49,
        "response":"def nth_octagonal(n):\n    return n * (3 * n - 2)"
    },
    {
        "id":50,
        "response":"def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    \n    max_len = 1\n    curr_len = 1\n    \n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) == 1:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    \n    return max(max_len, curr_len)"
    },
    {
        "id":51,
        "response":"def count_Substrings(s, n):\n    from itertools import accumulate\n    prefix_sum = list(accumulate(int(digit) for digit in s))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            length = j - i + 1\n            substring_sum = prefix_sum[j] - (prefix_sum[i-1] if i > 0 else 0)\n            if substring_sum == length:\n                count += 1\n    return count"
    },
    {
        "id":52,
        "response":"def smallest_num(xs):\n    if not xs:\n        return None\n    return min(xs)"
    },
    {
        "id":53,
        "response":"def max_difference(test_list):\n    return max(abs(y - x) for x, y in test_list)"
    },
    {
        "id":54,
        "response":"def subject_marks(subjectmarks):\n    from typing import List, Tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "id":55,
        "response":"def recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"
    },
    {
        "id":56,
        "response":"def pos_count(lst):\n    from typing import List\n    count = sum(1 for num in lst if isinstance(num, (int, float)) and num > 0)\n    return count"
    },
    {
        "id":57,
        "response":"def bell_number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"
    },
    {
        "id":58,
        "response":"def is_Monotonic(A):\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n    return increasing or decreasing"
    },
    {
        "id":59,
        "response":"def is_sublist(l, s):\n    len_s = len(s)\n    for i in range(len(l) - len_s + 1):\n        if l[i:i+len_s] == s:\n            return True\n    return False"
    },
    {
        "id":60,
        "response":"def find_equal_tuple(Input, k):\n    return [t for t in Input if len(t) == k]"
    },
    {
        "id":61,
        "response":"def comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) \/\/ 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "id":62,
        "response":"def dif_Square(n):\n    return n % 4 != 2"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    return re.split(r'[;,|]+', text)"
    },
    {
        "id":64,
        "response":"def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_map = {}\n    pattern_map = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_map:\n            color_map[color] = pattern\n        if pattern not in pattern_map:\n            pattern_map[pattern] = color\n        if color_map[color] != pattern or pattern_map[pattern] != color:\n            return False\n    return True"
    },
    {
        "id":65,
        "response":"def find_tuples(test_list, K):\n    return [tup for tup in test_list if all(i % K == 0 for i in tup)]"
    },
    {
        "id":66,
        "response":"def count_Squares(m, n):\n    total = 0\n    for i in range(min(m, n), 0, -1):\n        total += (m - i + 1) * (n - i + 1)\n    return total"
    },
    {
        "id":67,
        "response":"def is_Diff(n):\n    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)\n    return abs(even_sum - odd_sum)"
    },
    {
        "id":68,
        "response":"def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n + 1):\n        set_bits = bin(i).count('1')\n        if set_bits % 2 != 0:\n            count += 1\n    return count"
    },
    {
        "id":69,
        "response":"def word_len(s):\n    if len(s) % 2 != 0:\n        return s\n    else:\n        return None"
    },
    {
        "id":70,
        "response":"def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) \/\/ 6"
    },
    {
        "id":71,
        "response":"def zip_tuples(test_tup1, test_tup2):\n    return tuple(zip(test_tup1, test_tup2))"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return (4\/3) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":"def get_Char(strr):\n    total = sum(ord(char) for char in strr)\n    return chr(total % 256)"
    },
    {
        "id":74,
        "response":"def sequence(n):\n    seq = [1, 1]\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[seq[i-1]])\n    return seq[n-1]"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "id":76,
        "response":"def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":"from typing import List\nfrom collections import Counter\n\ndef freq_count(list1: List) -> List:\n    freq = Counter(list1)\n    return [[key, value] for key, value in freq.items()]"
    },
    {
        "id":79,
        "response":"def closest_num(N):\n    import math\n    n = int(N)\n    if n == 0:\n        return 0\n    k = int(math.log(n, 2))\n    x = 2 ** k\n    y = 2 ** (k + 1)\n    if abs(n - x) < abs(y - n):\n        return x\n    else:\n        return y"
    },
    {
        "id":80,
        "response":"def len_log(list1):\n    import re\n    list1 = [re.sub('[^A-Za-z0-9]', '', word) for word in list1]\n    if not list1:\n        return []\n    max_len = max(len(word) for word in list1)\n    return [word for word in list1 if len(word) == max_len]"
    },
    {
        "id":81,
        "response":"def find_substring(str_list, sub_str):\n    return [s for s in str_list if sub_str in s]"
    },
    {
        "id":82,
        "response":"def is_undulating(n):\n    n = str(n)\n    if len(n) < 3:\n        return False\n    increasing = None\n    for i in range(len(n) - 1):\n        if n[i] == n[i + 1]:\n            return False\n        if increasing is None:\n            increasing = n[i] < n[i + 1]\n        elif (n[i] < n[i + 1]) != increasing:\n            increasing = not increasing\n        else:\n            return False\n    return True"
    },
    {
        "id":83,
        "response":"def power(a, b):\n    return a ** b"
    },
    {
        "id":84,
        "response":"def index_minimum(test_list):\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "id":85,
        "response":"def Find_Min_Length(lst):\n    from typing import List\n    if not lst:\n        return []\n    return min(lst, key=len)"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n):\n    count = 0\n    sqrt_n = math.isqrt(n)\n    for i in range(1, sqrt_n + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count"
    },
    {
        "id":87,
        "response":"from typing import List\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> List[List[int]]:\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq = Counter(flat_list)\n    return [[freq[i] for i in sublist] for sublist in list1]"
    },
    {
        "id":88,
        "response":"import math\nfrom typing import List\n\ndef multiply_num(numbers: List[float]) -> float:\n    product = math.prod(numbers)\n    return product \/ len(numbers)"
    },
    {
        "id":89,
        "response":"def decimal_to_binary(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return bin(n)[2:]"
    },
    {
        "id":90,
        "response":"def next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]"
    },
    {
        "id":91,
        "response":"def kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]"
    },
    {
        "id":92,
        "response":"def snake_to_camel(word):\n    import re\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"
    },
    {
        "id":93,
        "response":"def eulerian_num(n, m):\n    eulerian = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if j == 0:\n                eulerian[i][j] = 1\n            elif j >= i:\n                eulerian[i][j] = 0\n            else:\n                eulerian[i][j] = (i - j) * eulerian[i - 1][j - 1] + (j + 1) * eulerian[i - 1][j]\n    return eulerian[n][m]"
    },
    {
        "id":94,
        "response":"from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return list(map(lambda sublist: sorted(sublist), input_list))"
    },
    {
        "id":95,
        "response":"def count(lst):\n    return sum(1 for elem in lst if elem)"
    },
    {
        "id":96,
        "response":"def add_lists(test_list, test_tup):\n    test_list = list(map(sum, zip(test_list, test_tup)))\n    return test_list"
    },
    {
        "id":97,
        "response":"def count_Hexadecimal(L, R):\n    import re\n    count = 0\n    for num in range(L, R + 1):\n        try:\n            int(str(num), 16)\n            count += 1\n        except ValueError:\n            pass\n    return count"
    },
    {
        "id":98,
        "response":"import heapq\nfrom typing import List\n\ndef merge_sorted_list(*args: List[int]) -> List[int]:\n    return list(heapq.merge(*args))\n\ndef main(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return merge_sorted_list(num1, num2, num3)"
    },
    {
        "id":99,
        "response":"def odd_Equivalent(s, n):\n    from collections import deque\n    count = 0\n    d = deque(s)\n    for _ in range(n):\n        if int(d[0]) % 2 != 0:\n            count += 1\n        d.rotate(1)\n    return count"
    },
    {
        "id":100,
        "response":"def extract_missing(test_list, strt_val, stop_val):\n    return sorted(list(set(range(strt_val, stop_val + 1)) - set(test_list)))"
    },
    {
        "id":101,
        "response":"from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements &= set(lst)\n    \n    return list(common_elements)"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    radius = diameter \/ 2\n    circumference = 2 * math.pi * radius\n    return 2 * circumference + 2 * diameter"
    },
    {
        "id":103,
        "response":"import re\n\ndef check_integer(text):\n    pattern = re.compile(r'^[-+]?[0-9]+$')\n    if pattern.match(text):\n        return True\n    return False"
    },
    {
        "id":104,
        "response":"from collections import Counter\n\ndef assign_freq(test_list):\n    freq_dict = Counter(test_list)\n    result = [(tup, freq_dict[tup]) for tup in test_list]\n    return result"
    },
    {
        "id":105,
        "response":"def empty_dit(list1):\n    return all(not d for d in list1 if isinstance(d, dict))"
    },
    {
        "id":106,
        "response":"def tuple_to_int(nums):\n    num_str = ''.join(map(str, nums))\n    return int(num_str)"
    },
    {
        "id":107,
        "response":"def list_to_float(test_list):\n    test_list = [float(i) for i in test_list if isinstance(i, (int, str, float)) and (isinstance(i, str) and i.replace('.', '', 1).replace('-', '', 1).isdigit() or not isinstance(i, str))]\n    return test_list"
    },
    {
        "id":108,
        "response":"def string_to_list(string):\n    import re\n    return re.findall(r'\\S+', string)"
    },
    {
        "id":109,
        "response":"def search(arr, n):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if (mid == 0 or arr[mid - 1] != arr[mid]) and (mid == n - 1 or arr[mid] != arr[mid + 1]):\n            return arr[mid]\n        if mid > 0 and arr[mid - 1] == arr[mid]:\n            if mid % 2 == 0:\n                high = mid - 2\n            else:\n                low = mid + 1\n        else:\n            if mid % 2 == 0:\n                low = mid + 2\n            else:\n                high = mid - 1\n    return -1"
    },
    {
        "id":110,
        "response":"def max_product_tuple(list1):\n    return max(list1, key=lambda x: x[0]*x[1])"
    },
    {
        "id":111,
        "response":"from typing import List\n\ndef check_triplet(A: List[int], n: int, sum: int, count: int) -> List[int]:\n    A.sort()\n    result = []\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                result.extend([A[i], A[left], A[right]])\n                count -= 1\n                left += 1\n                right -= 1\n                if count == 0:\n                    return result\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return result"
    },
    {
        "id":112,
        "response":"def smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        divisors = 0\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                if num \/\/ i == i:\n                    divisors += 1\n                else:\n                    divisors += 2\n        if divisors % 2 != 0:\n            count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "id":113,
        "response":"def sum_of_divisors(n):\n    return sum(i for i in range(1, n) if n % i == 0)\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_num = sum_of_divisors(num)\n        if sum_num <= limit and sum_num != num and sum_of_divisors(sum_num) == num:\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "id":114,
        "response":"import cmath\nimport math\n\ndef angle_complex(a, b):\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)"
    },
    {
        "id":115,
        "response":"def find_length(string, n):\n    from collections import defaultdict\n    count_map = defaultdict(int)\n    count_map[0] = 1\n    count = 0\n    max_length = 0\n    for i in range(n):\n        count += 1 if string[i] == '1' else -1\n        max_length = max(max_length, i + 1 - count_map[count])\n        count_map[count] = min(count_map[count], i + 1)\n    return max_length"
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    gcd = math.gcd(a, b)\n    divisors_sum = 0\n    for i in range(1, int(math.sqrt(gcd)) + 1):\n        if gcd % i == 0:\n            if gcd \/\/ i == i:\n                divisors_sum += i\n            else:\n                divisors_sum += i + gcd \/\/ i\n    return divisors_sum"
    },
    {
        "id":117,
        "response":"def multiply_int(x, y):\n    if x == 0 or y == 0:\n        return 0\n    negative_result = (x < 0) ^ (y < 0)\n    x, y = abs(x), abs(y)\n    result = 0\n    for _ in range(y):\n        result += x\n    return -result if negative_result else result"
    },
    {
        "id":118,
        "response":"def long_words(n, str):\n    word_len = []\n    txt = str.split()\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len"
    },
    {
        "id":119,
        "response":"def magic_square_test(my_matrix):\n    import numpy as np\n\n    my_matrix = np.array(my_matrix)\n    if my_matrix.shape[0] != my_matrix.shape[1]:\n        return False\n\n    expected_sum = np.sum(my_matrix[0, :])\n    for i in range(my_matrix.shape[0]):\n        if np.sum(my_matrix[i, :]) != expected_sum:\n            return False\n        if np.sum(my_matrix[:, i]) != expected_sum:\n            return False\n\n    if np.sum(np.diag(my_matrix)) != expected_sum:\n        return False\n    if np.sum(np.diag(np.fliplr(my_matrix))) != expected_sum:\n        return False\n\n    return True"
    },
    {
        "id":120,
        "response":"from collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    \n    count = Counter(nums)\n    max_count = max(count.values())\n    max_items = [item for item, freq in count.items() if freq == max_count]\n    \n    return max(max_items)"
    },
    {
        "id":121,
        "response":"def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    return ''.join(str_list)"
    },
    {
        "id":122,
        "response":"def tup_string(tup1):\n    return ''.join(tup1)"
    },
    {
        "id":123,
        "response":"def sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"def check_last(arr, n, p):\n    import typing\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"arr should be a list of integers\")\n    if not isinstance(n, int) or n <= 0:\n        raise TypeError(\"n should be a positive integer\")\n    if not isinstance(p, int) or p < 0:\n        raise TypeError(\"p should be a non-negative integer\")\n    if n > len(arr):\n        raise ValueError(\"n cannot be greater than the length of arr\")\n    last_element = arr[n-1]\n    for _ in range(p):\n        last_element = last_element \/\/ 2\n    return last_element % 2 == 0"
    },
    {
        "id":125,
        "response":"def hexagonal_num(n):\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"def cal_electbill(units):\n    if units < 0:\n        return \"Invalid units\"\n    elif units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 25 + (units - 50) * 0.75\n    elif units <= 250:\n        return 25 + 75 + (units - 150) * 1.20\n    else:\n        return 25 + 75 + 120 + (units - 250) * 1.50"
    },
    {
        "id":127,
        "response":"def zero_count(nums):\n    from typing import List\n    count = sum(1 for num in nums if num == 0)\n    return count \/ len(nums) if nums else 0.0"
    },
    {
        "id":128,
        "response":"def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count <= 1"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 2 * math.pi * r"
    },
    {
        "id":130,
        "response":"from collections import Counter\n\ndef extract_singly(test_list):\n    count = Counter(test_list)\n    return [ele for ele in test_list if count[ele] == 1]"
    },
    {
        "id":131,
        "response":"def pancake_sort(nums):\n    def flip(nums, k):\n        return nums[:k+1][::-1] + nums[k+1:]\n\n    n = len(nums)\n    while n > 1:\n        max_idx = nums.index(max(nums[:n]))\n        if max_idx == n - 1:\n            n -= 1\n            continue\n        if max_idx != 0:\n            nums = flip(nums, max_idx)\n        nums = flip(nums, n - 1)\n        n -= 1\n    return nums"
    },
    {
        "id":132,
        "response":"def count_samepair(list1, list2, list3):\n    count = 0\n    min_len = min(len(list1), len(list2), len(list3))\n    for i in range(min_len):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "id":133,
        "response":"def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "id":134,
        "response":"def sum_Pairs(arr, n):\n    total_sum = 0\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in freq:\n        total_sum += freq[num] * (n - freq[num]) * num\n    \n    return total_sum - sum(arr)"
    },
    {
        "id":135,
        "response":"def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    return max(abs(max(arr) - min(arr)), max(abs(x - arr[0]) for x in arr), max(abs(x - arr[-1]) for x in arr))"
    },
    {
        "id":136,
        "response":"def ascii_value_string(str1):\n    return sum(ord(char) for char in str1)"
    },
    {
        "id":137,
        "response":"def max_path_sum(tri, m, n):\n    for i in range(m-2, -1, -1):\n        for j in range(n-1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n            n -= 1\n        n = i + 1\n    return tri[0][0]"
    },
    {
        "id":138,
        "response":"def sum_digits_single(x):\n    from itertools import permutations\n    x_str = str(x)\n    max_sum = float('-inf')\n    for i in range(1, len(x_str)):\n        first_part = int(x_str[:i])\n        second_part = int(x_str[i:])\n        max_sum = max(max_sum, sum(int(digit) for digit in str(first_part)) + sum(int(digit) for digit in str(second_part)))\n    return max_sum"
    },
    {
        "id":139,
        "response":"def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return []\n\n    dp = {}\n    max_length = 0\n    end_idx = 0\n\n    for i in range(n):\n        if arr[i] - 1 in dp:\n            dp[arr[i]] = dp[arr[i] - 1] + 1\n        elif arr[i] + 1 in dp:\n            dp[arr[i]] = dp[arr[i] + 1] + 1\n        else:\n            dp[arr[i]] = 1\n        \n        if dp[arr[i]] > max_length:\n            max_length = dp[arr[i]]\n            end_idx = arr[i]\n\n    seq = []\n    for _ in range(max_length):\n        seq.append(end_idx)\n        if end_idx - 1 in dp:\n            end_idx -= 1\n        else:\n            break\n\n    return list(reversed(seq))"
    },
    {
        "id":140,
        "response":"def does_Contain_B(a, b, c):\n    import math\n    d = b * b - 4 * a * c\n    if d < 0:\n        return False\n    elif d == 0:\n        root = -b \/ (2 * a)\n        return root.is_integer() and root > 0\n    else:\n        root1 = (-b + math.sqrt(d)) \/ (2 * a)\n        root2 = (-b - math.sqrt(d)) \/ (2 * a)\n        return (root1.is_integer() and root1 > 0) or (root2.is_integer() and root2 > 0)"
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\ndef is_coprime(a, b):\n    return gcd(a, b) == 1"
    },
    {
        "id":142,
        "response":"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return merge(merge_sort(left_half), merge_sort(right_half))\n\ndef merge(a, b):\n    merged = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(a) and right_index < len(b):\n        if a[left_index] <= b[right_index]:\n            merged.append(a[left_index])\n            left_index += 1\n        else:\n            merged.append(b[right_index])\n            right_index += 1\n    merged += a[left_index:]\n    merged += b[right_index:]\n    return merged"
    },
    {
        "id":143,
        "response":"def parabola_vertex(a, b, c):\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"def specified_element(nums, N):\n    return [row[N] for row in nums if len(row) > N]"
    },
    {
        "id":145,
        "response":"def even_bit_toggle_number(n):\n    import ctypes\n    mask = 0xAAAAAAAA\n    return ctypes.c_uint32(n ^ mask).value"
    },
    {
        "id":146,
        "response":"def tuple_int_str(tuple_str):\n    try:\n        return tuple(int(i) for i in tuple_str)\n    except ValueError:\n        return tuple_str"
    },
    {
        "id":147,
        "response":"from typing import List\nimport itertools\n\ndef encode_list(list1: List) -> List:\n    encoded_list = []\n    for key, group in itertools.groupby(list1):\n        count = len(list(group))\n        encoded_list.append((key, count))\n    return encoded_list"
    },
    {
        "id":148,
        "response":"from collections import Counter\n\ndef min_Ops(arr, n, k):\n    count = Counter(arr)\n    most_common = count.most_common(1)\n    if most_common[0][1] >= n - k:\n        target = most_common[0][0]\n        return [target] * n\n    else:\n        return [-1] * n"
    },
    {
        "id":149,
        "response":"def month_season(month, days):\n    if month in [12, 1, 2]:\n        return 'Winter'\n    elif month in [3, 4, 5]:\n        return 'Spring'\n    elif month in [6, 7, 8]:\n        return 'Summer'\n    elif month in [9, 10, 11]:\n        return 'Autumn'\n    else:\n        return 'Invalid month'\n\n    if days < 1 or days > 31:\n        return 'Invalid day'"
    },
    {
        "id":150,
        "response":"import math\n\ndef solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b \/\/ a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n \/\/ gcd\n    y *= n \/\/ gcd\n    return x, y"
    },
    {
        "id":151,
        "response":"def remove_elements(list1, list2):\n    list2_set = set(list2)\n    list1 = [element for element in list1 if element not in list2_set]\n    return list1"
    },
    {
        "id":152,
        "response":"def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    return (l * l * s) \/ (4 * math.tan(math.pi \/ s))"
    },
    {
        "id":154,
        "response":"def divSum(n):\n    def sum_divisors(num):\n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i\n                if i != num \/\/ i:\n                    sum += num \/\/ i\n        return sum\n\n    count = 0\n    while True:\n        count += 1\n        n = sum_divisors(n)\n        if n == sum_divisors(sum_divisors(n)):\n            return count\n        if count > 1000:\n            return -1"
    },
    {
        "id":155,
        "response":"def count_char_position(str1):\n    import string\n    count = 0\n    str1 = str1.lower()\n    for i, char in enumerate(str1):\n        if char == string.ascii_lowercase[i]:\n            count += 1\n    return count"
    },
    {
        "id":156,
        "response":"def find_even_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "id":157,
        "response":"def next_Power_Of_2(n):\n    import math\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))"
    },
    {
        "id":158,
        "response":"def frequency(a, x):\n    from collections import Counter\n    count = Counter(a)\n    return count.get(x, 0)"
    },
    {
        "id":159,
        "response":"def get_pell(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b"
    },
    {
        "id":160,
        "response":"def sum_range_list(list1, m, n):\n    if not list1 or m > n or m < 0 or n >= len(list1):\n        return 0\n    return sum(list1[m:n+1])"
    },
    {
        "id":161,
        "response":"def perimeter_pentagon(a):\n    return 5 * a"
    },
    {
        "id":162,
        "response":"def count_occurance(s):\n    import re\n    return len(re.findall('std', s))"
    },
    {
        "id":163,
        "response":"import re\n\ndef remove_splchar(text):\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    return text"
    },
    {
        "id":164,
        "response":"from typing import List, Dict, Any\nfrom itertools import groupby\n\ndef group_keyvalue(pairs: List[List[Any]]) -> Dict[Any, List[Any]]:\n    pairs.sort(key=lambda x: x[0])\n    result = {}\n    for key, group in groupby(pairs, lambda x: x[0]):\n        result[key] = [value for _, value in group]\n    return result"
    },
    {
        "id":165,
        "response":"def is_valid_parenthese(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack"
    },
    {
        "id":166,
        "response":"def perimeter_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"The input sides cannot form a triangle\")\n    return a + b + c"
    },
    {
        "id":167,
        "response":"def answer(L, R):\n    import math\n    for i in range(L, R + 1):\n        for j in range(i + 1, R + 1):\n            if math.lcm(i, j) <= R:\n                return [i, j]\n    return [-1, -1]"
    },
    {
        "id":168,
        "response":"import re\nfrom typing import List\n\ndef string_literals(patterns: List[str], text: str) -> List[str]:\n    found_patterns = []\n    for pattern in patterns:\n        if re.search(re.escape(pattern), text):\n            found_patterns.append(pattern)\n    return found_patterns"
    },
    {
        "id":169,
        "response":"def is_num_keith(x):\n    if x < 10:\n        return False\n\n    digits = [int(d) for d in str(x)]\n    sequence = digits[:]\n    while sequence[-1] < x:\n        next_term = sum(sequence[-len(digits):])\n        sequence.append(next_term)\n\n    return sequence[-1] == x"
    },
    {
        "id":170,
        "response":"import math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371\n    slat = math.radians(slat)\n    slon = math.radians(slon)\n    elat = math.radians(elat)\n    elon = math.radians(elon)\n    dlat = elat - slat\n    dlon = elon - slon\n    a = math.sin(dlat\/2)**2 + math.cos(slat) * math.cos(elat) * math.sin(dlon\/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return R * c"
    },
    {
        "id":171,
        "response":"def common_prefix_util(str1, str2):\n    result = \"\"\n    n1, n2 = len(str1), len(str2)\n    i, j = 0, 0\n    while i <= n1 - 1 and j <= n2 - 1:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return result\n\ndef longest_common_prefix(strs):\n    import functools\n    return functools.reduce(common_prefix_util, strs)\n\ndef main(strs):\n    if not strs:\n        return \"\"\n    return longest_common_prefix(strs)\n\ndef longestCommonPrefix(strs):\n    return main(strs)"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    numbers = re.findall(r'\\d', string)\n    return {\n        'uppercase': uppercase,\n        'lowercase': lowercase,\n        'special_characters': special_characters,\n        'numbers': numbers\n    }"
    },
    {
        "id":173,
        "response":"def count_pairs(arr, n, k):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    count = 0\n    for num in freq:\n        if num + k in freq:\n            count += 1\n    return count"
    },
    {
        "id":174,
        "response":"def greater_specificnum(lst, num):\n    return [i for i in lst if i > num]"
    },
    {
        "id":175,
        "response":"def parabola_focus(a, b, c):\n    import math\n    if a == 0:\n        raise ValueError(\"Not a parabola\")\n    focus_x = -b \/ (2 * a)\n    focus_y = (1 - (b**2 - 4*a*c)) \/ (4 * a)\n    return (focus_x, focus_y)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        escaped_pattern = re.escape(pattern)\n        if re.search(escaped_pattern, text):\n            return True\n    return False"
    },
    {
        "id":177,
        "response":"def longest_common_subsequence(X, Y, m, n):\n    import numpy as np\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    lcs = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        if math.sqrt(n - i * i) % 1 == 0:\n            return True\n    return False"
    },
    {
        "id":179,
        "response":"def first_Missing_Positive(arr, n):\n    arr = list(set(arr))\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if not arr or arr[0] > 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1"
    },
    {
        "id":180,
        "response":"def count_Intgral_Points(x1, y1, x2, y2):\n    import math\n    min_x, max_x = min(x1, x2), max(x1, x2)\n    min_y, max_y = min(y1, y2), max(y1, y2)\n    side_length = max_x - min_x\n    if side_length == 0 or max_y - min_y != side_length:\n        return 0\n    integral_points = (side_length - 1) ** 2\n    return integral_points"
    },
    {
        "id":181,
        "response":"def check_monthnumber(monthname3):\n    month_days = {\n        'January': 31, 'February': 28, 'March': 31, 'April': 30,\n        'May': 31, 'June': 30, 'July': 31, 'August': 31,\n        'September': 30, 'October': 31, 'November': 30, 'December': 31\n    }\n    if monthname3 in month_days and month_days[monthname3] == 30:\n        return True\n    else:\n        return False"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(s):\n    if re.search(r\"[a-zA-Z]\", s) and re.search(r\"\\d\", s):\n        return True\n    return False"
    },
    {
        "id":183,
        "response":"def remove_tuple(test_tup):\n    return tuple(set(test_tup))"
    },
    {
        "id":184,
        "response":"def octal_To_Decimal(n):\n    return int(str(n), 8)"
    },
    {
        "id":185,
        "response":"from typing import List\n\ndef first(arr: List[int], x: int, n: int) -> int:\n    left, right = 0, n - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "id":186,
        "response":"def remove_tuples(test_list, K):\n    return [tup for tup in test_list if len(tup) != K]"
    },
    {
        "id":187,
        "response":"def find_exponentio(test_tup1, test_tup2):\n    return tuple(pow(a, b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\n\ndef largest_triangle(r, _):\n    return (3 * r * r) \/ (2 * math.sin(math.radians(120)))\n\ndef largest_triangle(a, b):\n    if a == 0 or b == 0:\n        return 0\n    return (a * b) \/ 2"
    },
    {
        "id":189,
        "response":"def highest_Power_of_2(n):\n    import math\n    if n <= 0:\n        return 0\n    return 2 ** int(math.log2(n))"
    },
    {
        "id":190,
        "response":"def position_max(list1):\n    import typing\n    if not isinstance(list1, list) or len(list1) == 0:\n        return []\n    max_val = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_val]"
    },
    {
        "id":191,
        "response":"def chkList(lst):\n    return len(set(lst)) == 1"
    },
    {
        "id":192,
        "response":"def remove_even(str1):\n    return str1[1::2]"
    },
    {
        "id":193,
        "response":"def hamming_Distance(n1, n2):\n    return bin(n1 ^ n2).count('1')"
    },
    {
        "id":194,
        "response":"def count(s, c):\n    return s.count(c)"
    },
    {
        "id":195,
        "response":"def inversion_elements(test_tup):\n    return test_tup[::-1]"
    },
    {
        "id":196,
        "response":"def concatenate_elements(test_tup):\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (str(test_tup[i]) + str(test_tup[i + 1]),)\n    return result"
    },
    {
        "id":197,
        "response":"def find_longest_repeating_subseq(s):\n    import numpy as np\n    n = len(s)\n    dp = np.zeros((n + 1, n + 1), dtype=int)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    lrs = \"\"\n    i, j = n, n\n    while i > 0 and j > 0:\n        if s[i - 1] == s[j - 1] and i != j:\n            lrs = s[i - 1] + lrs\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return lrs"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num):\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        heapq.heappush(heap, a)\n    else:\n        heapq.heappop(heap)\n        heapq.heappush(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string):\n    charRe = re.compile(r'[^a-zA-Z0-9]')\n    string = charRe.search(string)\n    return not bool(string)"
    },
    {
        "id":201,
        "response":"def count_Num(n):\n    count = 0\n    for i in range(n + 1):\n        if (i & 1) and ((i >> (n - 1)) & 1):\n            count += 1\n    return count"
    },
    {
        "id":202,
        "response":"def fourth_Power_Sum(n):\n    return sum(i ** 4 for i in range(1, n + 1))"
    },
    {
        "id":203,
        "response":"def concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    degree = math.degrees(radian)\n    return degree"
    },
    {
        "id":205,
        "response":"from typing import List, Any\n\ndef decode_list(alist: List[Any]) -> List[Any]:\n    result = []\n    for item in alist:\n        if isinstance(item, list):\n            result.extend([item[1]] * item[0])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":206,
        "response":"def check_subset_list(list1, list2):\n    from typing import List, Any\n    def flatten(nested_list: List[Any]) -> List[Any]:\n        flat_list = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list1 = set(flatten(list1))\n    flat_list2 = set(flatten(list2))\n    return flat_list1.issubset(flat_list2)"
    },
    {
        "id":207,
        "response":"def first_Repeated_Char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] > 1:\n            return char\n    return None"
    },
    {
        "id":208,
        "response":"def min_Operations(A, B):\n    import math\n    return math.gcd(A, B) if A > 0 and B > 0 else -1"
    },
    {
        "id":209,
        "response":"def extract_min_max(test_tup, K):\n    from heapq import nsmallest, nlargest\n    min_elements = nsmallest(K, test_tup)\n    max_elements = nlargest(K, test_tup)\n    return min_elements, max_elements"
    },
    {
        "id":210,
        "response":"import re\n\ndef replace_max_specialchar(text, n):\n    pattern = r'[ ,\\.]+'\n    return re.sub(pattern, lambda match: ':' if match.end() - match.start() <= n else match.group(), text)"
    },
    {
        "id":211,
        "response":"def first_even(nums):\n    return next((num for num in nums if num % 2 == 0), None)"
    },
    {
        "id":212,
        "response":"def check_type(test_tuple):\n    if not test_tuple:\n        return True\n    data_type = type(test_tuple[0])\n    return all(isinstance(i, data_type) for i in test_tuple)"
    },
    {
        "id":213,
        "response":"def is_majority(arr, n, x):\n    from bisect import bisect_left, bisect_right\n    left_index = bisect_left(arr, x)\n    right_index = bisect_right(arr, x)\n    return arr[left_index:right_index] if right_index - left_index > n \/ 2 else []"
    },
    {
        "id":214,
        "response":"def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "id":215,
        "response":"def find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":216,
        "response":"def odd_values_string(str):\n    return str[::2]"
    },
    {
        "id":217,
        "response":"def min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"def all_Bits_Set_In_The_Given_Range(n, left, right):\n    mask = ((1 << (right - left + 1)) - 1) << left\n    return (n & mask) == mask"
    },
    {
        "id":219,
        "response":"def re_arrange_array(arr, n):\n    arr.sort(key=lambda x: x >= 0)\n    return arr"
    },
    {
        "id":220,
        "response":"def replace_blank(str1, char):\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ' ':\n            str1[i] = char\n    return ''.join(str1)"
    },
    {
        "id":221,
        "response":"def max_sum(tri, n):\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]"
    },
    {
        "id":222,
        "response":"import heapq\nfrom typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsuface_cylinder(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height cannot be negative\")\n    return 2 * math.pi * r * h"
    },
    {
        "id":224,
        "response":"def volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":"def even_bit_set_number(n):\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    return n | mask"
    },
    {
        "id":226,
        "response":"def No_of_Triangle(N, K):\n    import math\n    count = 0\n    for i in range(1, N+1):\n        for j in range(i, N+1):\n            hypotenuse = math.sqrt(i**2 + j**2)\n            if hypotenuse <= N and hypotenuse == int(hypotenuse) and (i + j + int(hypotenuse)) <= K:\n                count += 1\n    return count"
    },
    {
        "id":227,
        "response":"from collections import defaultdict\n\ndef check_occurences(test_list):\n    res = defaultdict(int)\n    for tup in test_list:\n        res[tup] += 1\n    return [key for key, val in res.items() if val > 1]\n\ndef main(test_list):\n    return check_occurences(test_list)\n\ntest_list = [(3, 4), (1, 2), (3, 4), (5, 6), (1, 2)]\nprint(main(test_list))"
    },
    {
        "id":228,
        "response":"def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) \/\/ 2"
    },
    {
        "id":229,
        "response":"def get_total_number_of_sequences(m, n):\n    import math\n    total = 0\n    for i in range(1, m + 1):\n        total += math.comb(m \/\/ i + n - 1, n)\n    return total"
    },
    {
        "id":230,
        "response":"def replace_list(list1, list2):\n    if len(list1) == 0:\n        return list1\n    list1[-1] = list2\n    return list1"
    },
    {
        "id":231,
        "response":"def array_3d(m, n, o):\n    return [[[ '*' for _ in range(o)] for _ in range(n)] for _ in range(m)]"
    },
    {
        "id":232,
        "response":"def count_charac(str1):\n    return len(str1)"
    },
    {
        "id":233,
        "response":"from collections import Counter\n\ndef sort_on_occurence(lst):\n    first_elements = [t[0] for t in lst]\n    count = Counter(first_elements)\n    return sorted(lst, key=lambda x: count[x[0]])"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        root += 1\n    else:\n        root = math.ceil(root)\n    return int(root ** 2)"
    },
    {
        "id":235,
        "response":"def max_sum(arr, n):\n    import itertools\n    max_sum = float('-inf')\n    for r in range(1, n+1):\n        for subseq in itertools.combinations(range(n), r):\n            subseq = [arr[i] for i in subseq]\n            if len(set(subseq)) <= 2:\n                max_sum = max(max_sum, sum(subseq))\n    return max_sum"
    },
    {
        "id":236,
        "response":"def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number\")\n    if number == 0 or number == 1:\n        return number\n    \n    x = number\n    y = (x + 1) \/ 2\n    \n    while(y < x):\n        x = y\n        y = (x + number \/ x) \/ 2\n    \n    return x"
    },
    {
        "id":237,
        "response":"def lps(s: str) -> str:\n    import numpy as np\n\n    n = len(s)\n    dp = np.zeros((n, n), dtype=int)\n\n    for i in range(n):\n        dp[i, i] = 1\n\n    max_length = 1\n    start = 0\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n\n            if s[i] == s[j] and length == 2:\n                dp[i, j] = 2\n            elif s[i] == s[j]:\n                dp[i, j] = dp[i + 1, j - 1] + 2\n            else:\n                dp[i, j] = max(dp[i, j - 1], dp[i + 1, j])\n\n            if dp[i, j] > max_length:\n                max_length = dp[i, j]\n                start = i\n\n    def reconstruct_lps(i, j):\n        if i > j:\n            return \"\"\n        if i == j:\n            return s[i]\n\n        if s[i] == s[j]:\n            return s[i] + reconstruct_lps(i + 1, j - 1) + s[j]\n        elif dp[i + 1, j] > dp[i, j - 1]:\n            return reconstruct_lps(i + 1, j)\n        else:\n            return reconstruct_lps(i, j - 1)\n\n    return reconstruct_lps(start, start + max_length - 1)"
    },
    {
        "id":238,
        "response":"def harmonic_sum(n):\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input should be a positive integer\")\n    return sum(1.0\/i for i in range(1, n))"
    },
    {
        "id":239,
        "response":"def intersection_array(array_nums1, array_nums2):\n    return list(filter(lambda x: x in array_nums2, array_nums1))"
    },
    {
        "id":240,
        "response":"def count_X(tup, x):\n    from typing import Tuple, Any\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "id":241,
        "response":"def insert_element(lst, element):\n    result = []\n    for i in lst:\n        result.extend([element, i])\n    return result"
    },
    {
        "id":242,
        "response":"import cmath\nimport math\n\ndef convert(numbers):\n    result = []\n    for num in numbers:\n        r, phi = cmath.polar(complex(num))\n        phi = math.degrees(phi)\n        result.append((r, phi))\n    return result"
    },
    {
        "id":243,
        "response":"def count_integer(list1):\n    from typing import List, Any\n    count = sum(isinstance(x, int) for x in list1)\n    return count"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    return [word for word in words if word.startswith(('a', 'e'))]"
    },
    {
        "id":245,
        "response":"from typing import List\nimport itertools\n\ndef combinations_colors(colors: List[str], n: int) -> List[List[str]]:\n    return [list(p) for p in itertools.combinations_with_replacement(colors, n)]"
    },
    {
        "id":246,
        "response":"def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for currentPrime in range(2, int(n ** 0.5) + 1):\n        if sieve[currentPrime]:\n            for multiple in range(currentPrime * currentPrime, n, currentPrime):\n                sieve[multiple] = False\n    return sum(1 for isPrime in sieve if isPrime)"
    },
    {
        "id":247,
        "response":"def swap_numbers(a, b):\n    a, b = b, a\n    return a, b"
    },
    {
        "id":248,
        "response":"def count_odd(array_nums):\n    count = len(list(filter(lambda x: x % 2 != 0, array_nums)))\n    return count"
    },
    {
        "id":249,
        "response":"def maximize_elements(test_tup1, test_tup2):\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":250,
        "response":"def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 1\n    while True:\n        newman_shanks_williams = (2**num + 1) \/\/ 3\n        if is_prime(newman_shanks_williams):\n            count += 1\n            if count == n:\n                return newman_shanks_williams\n        num += 1"
    },
    {
        "id":251,
        "response":"def division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result.append(test_tup1[i] \/ test_tup2[i])\n    return tuple(result)"
    },
    {
        "id":252,
        "response":"def split_two_parts(list1, L):\n    return [list1[:L], list1[L:]]"
    },
    {
        "id":253,
        "response":"def merge_dict(d1, d2):\n    d1.update(d2)\n    return d1"
    },
    {
        "id":254,
        "response":"def dog_age(h_age):\n    if h_age <= 0:\n        return 0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4"
    },
    {
        "id":255,
        "response":"def list_split(S, step):\n    return [S[i::step] for i in range(step)]"
    },
    {
        "id":256,
        "response":"def lateralsurface_cube(l):\n    return 4 * (l ** 2)"
    },
    {
        "id":257,
        "response":"def square_Sum(n):\n    return n * (2 * n + 1) * (2 * n - 1) \/\/ 3"
    },
    {
        "id":258,
        "response":"def find_star_num(n: int) -> int:\n    return 6 * (n * (n - 1)) + 1"
    },
    {
        "id":259,
        "response":"def ascii_value(k: str) -> int:\n    if not isinstance(k, str) or len(k) != 1:\n        raise ValueError(\"Input must be a single character\")\n    return ord(k)"
    },
    {
        "id":260,
        "response":"def sum_even_and_even_index(arr, n):\n    from itertools import accumulate\n    even_index_even_sum = sum(x for i, x in enumerate(arr) if i % 2 == 0 and x % 2 == 0)\n    return even_index_even_sum"
    },
    {
        "id":261,
        "response":"def even_Power_Sum(n):\n    return sum((2*i)**5 for i in range(1, n+1))"
    },
    {
        "id":262,
        "response":"def rear_extract(test_list):\n    return [sub[-1] for sub in test_list]"
    },
    {
        "id":263,
        "response":"def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"def even_binomial_Coeff_Sum(n):\n    from math import comb\n    return sum(comb(n, k) for k in range(0, n+1, 2))"
    },
    {
        "id":265,
        "response":"def get_Position(a, n, m):\n    from collections import deque\n    q = deque(a)\n    for _ in range(m):\n        q.popleft()\n    if not q:\n        return -1\n    return a.index(q[0]) + 1"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height cannot be negative\")\n    return math.pi * (r ** 2) * h"
    },
    {
        "id":267,
        "response":"def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"
    },
    {
        "id":268,
        "response":"def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count"
    },
    {
        "id":269,
        "response":"def decagonal_num(n):\n    return (8 * n * n - 6 * n) \/\/ 2\n\ndef is_num_decagonal(num):\n    import math\n    n = (3 + math.sqrt(4 * num + 9)) \/ 8\n    return n == int(n)\n\ndef nth_decagonal_num(n):\n    return decagonal_num(n)"
    },
    {
        "id":270,
        "response":"def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1"
    },
    {
        "id":271,
        "response":"def all_unique(test_list):\n    return len(test_list) == len(set(test_list))"
    },
    {
        "id":272,
        "response":"from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x - y, nums1, nums2))"
    },
    {
        "id":273,
        "response":"def validate(n):\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(len(str(n))):\n        if int(str(n)[i]) < freq[int(str(n)[i])]:\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"def check_element(lst, element):\n    return all(i == element for i in lst)"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return text\n    return None"
    },
    {
        "id":276,
        "response":"def max_sub_array_sum_repeated(a, n, k):\n    def max_sub_array_sum(arr, size):\n        max_so_far = float('-inf')\n        max_ending_here = 0\n        for i in range(size):\n            max_ending_here += arr[i]\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n\n    total_sum = sum(a)\n    max_sum = max_sub_array_sum(a, n)\n    if k == 1:\n        return max_sum\n    max_prefix_sum = float('-inf')\n    max_suffix_sum = float('-inf')\n    prefix_sum = 0\n    suffix_sum = 0\n    for i in range(n):\n        prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    for i in range(n-1, -1, -1):\n        suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    if total_sum < 0:\n        return max(max_sum, max_prefix_sum + max_suffix_sum)\n    else:\n        return max(max_sum, max_prefix_sum + max_suffix_sum + total_sum * (k-2))"
    },
    {
        "id":277,
        "response":"def square_Sum(n):\n    total_sum = sum([(2 * i) ** 2 for i in range(1, n + 1)])\n    return total_sum"
    },
    {
        "id":278,
        "response":"def modular_inverse(arr, N, P):\n    def gcdExtended(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = gcdExtended(b % a, a)\n        x = y1 - (b \/\/ a) * x1\n        y = x1\n        return gcd, x, y\n\n    count = 0\n    for num in arr:\n        gcd, x, _ = gcdExtended(num, P)\n        if gcd == 1:\n            modular_inverse = (x % P + P) % P\n            if modular_inverse == num:\n                count += 1\n    return count"
    },
    {
        "id":279,
        "response":"def odd_Days(N):\n    import calendar\n    count = 0\n    for month in range(1, 13):\n        month_calendar = calendar.monthcalendar(N, month)\n        for week in month_calendar:\n            if week[0] != 0:\n                count += 1\n    return count"
    },
    {
        "id":280,
        "response":"def max_length(lists):\n    return max(lists, key=len)"
    },
    {
        "id":281,
        "response":"def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same = k\n    diff = k * (k - 1)\n    total = same + diff\n    \n    for _ in range(3, n + 1):\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    \n    return total"
    },
    {
        "id":282,
        "response":"def find(n, m):\n    if m == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    return n \/ m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    if w == 0:\n        return math.sqrt(h**2 - w**2) if h > 0 else 0\n    elif h == 0:\n        return math.sqrt(w**2 - h**2) if w > 0 else 0\n    else:\n        return math.sqrt(w**2 + h**2)"
    },
    {
        "id":284,
        "response":"def max_val(listval):\n    if not listval:\n        return []\n    max_value = max(listval)\n    return [max_value]"
    },
    {
        "id":285,
        "response":"def sum_div(number):\n    return sum(i for i in range(1, number + 1) if number % i == 0)"
    },
    {
        "id":286,
        "response":"def get_Inv_Count(arr, n):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) \/\/ 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        merged, inv_merge = merge(left, right)\n        return merged, inv_left + inv_right + inv_merge\n\n    def merge(left, right):\n        merged = []\n        i = j = inv_count = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    _, inv_count = merge_sort(arr)\n    return inv_count"
    },
    {
        "id":287,
        "response":"from typing import List, Any\n\ndef flatten_list(nested_list: List[Any]) -> List[Any]:\n    flat_list = []\n    stack = [nested_list]\n    while stack:\n        current_list = stack.pop()\n        for element in current_list:\n            if isinstance(element, list):\n                stack.append(element)\n            else:\n                flat_list.append(element)\n    return flat_list"
    },
    {
        "id":288,
        "response":"def intersection_nested_lists(l1, l2):\n    flat_list1 = [item for sublist in l1 for item in sublist]\n    flat_list2 = [item for sublist in l2 for item in sublist]\n    intersection = list(set(flat_list1) & set(flat_list2))\n    return intersection"
    },
    {
        "id":289,
        "response":"def max_aggregate(stdata):\n    from typing import List, Tuple\n    max_sum = float('-inf')\n    for tup in stdata:\n        if sum(tup) > max_sum:\n            max_sum = sum(tup)\n    return max_sum"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    return math.comb(2*n, n)"
    },
    {
        "id":291,
        "response":"def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)"
    },
    {
        "id":292,
        "response":"def set_Bit_Number(n):\n    import math\n    if n == 0:\n        return -1\n    return math.floor(math.log2(n & -n))"
    },
    {
        "id":293,
        "response":"from collections import Counter\n\ndef solve(a, n):\n    freq = Counter(a)\n    count_odd = sum(val % 2 for val in freq.values())\n    return count_odd <= 1"
    },
    {
        "id":294,
        "response":"def find_Element(arr, ranges, rotations, index):\n    for start, end in ranges:\n        rotations = rotations % (end - start + 1)\n        if start <= index <= end:\n            index = (index - rotations) % (end - start + 1) + start\n    return arr[index]"
    },
    {
        "id":295,
        "response":"from typing import List\n\ndef start_withp(words: List[str]) -> List[str]:\n    return [word for word in words if word.startswith('\u09aa\u09bf')][:2]"
    },
    {
        "id":296,
        "response":"def max_sum_increasing_subseq(a, n, index, k):\n    import sys\n    max_sum = -sys.maxsize - 1\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, a[i])\n    return max_sum + a[k] if max_sum != -sys.maxsize - 1 else a[k]"
    },
    {
        "id":297,
        "response":"def colon_tuplex(tuplex, m, n):\n    return tuplex[:m] + tuplex[n:]"
    },
    {
        "id":298,
        "response":"import heapq\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    return heapq.nlargest(N, (x * y for x in nums1 for y in nums2))"
    },
    {
        "id":299,
        "response":"def maximum(a, b):\n    return max(a, b)"
    },
    {
        "id":300,
        "response":"def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "id":301,
        "response":"def set_left_most_unset_bit(n):\n    import math\n    if n == 0:\n        return 1\n    if n == (1 << int(math.log2(n)) + 1) - 1:\n        return n\n    x = 1\n    while n & x:\n        x <<= 1\n    return n | x"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height cannot be negative\")\n    return (1.0\/3) * math.pi * r * r * h"
    },
    {
        "id":303,
        "response":"def pos_nos(list1):\n    return [num for num in list1 if num > 0]"
    },
    {
        "id":304,
        "response":"def max_sum_rectangular_grid(grid, n):\n    import numpy as np\n    \n    dp = np.zeros((2, n))\n    \n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    \n    for i in range(1, n):\n        dp[0][i] = max(dp[1][i-1] + grid[0][i], dp[0][i-1])\n        dp[1][i] = max(dp[0][i-1] + grid[1][i], dp[1][i-1])\n    \n    return max(dp[0][n-1], dp[1][n-1])"
    },
    {
        "id":305,
        "response":"def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            result = word\n    return result"
    },
    {
        "id":306,
        "response":"from typing import List\n\ndef find_last_occurrence(A: List[int], x: int) -> int:\n    for i in range(len(A) - 1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "id":307,
        "response":"from typing import List, Any\n\ndef modified_encode(alist: List[Any]) -> List[Any]:\n    result = []\n    count = 1\n    for i in range(1, len(alist)):\n        if alist[i] == alist[i - 1]:\n            count += 1\n        else:\n            if count == 1:\n                result.append(alist[i - 1])\n            else:\n                result.append([count, alist[i - 1]])\n            count = 1\n    if alist:\n        if count == 1:\n            result.append(alist[-1])\n        else:\n            result.append([count, alist[-1]])\n    return result"
    },
    {
        "id":308,
        "response":"def max_volume(s):\n    side = s \/\/ 3\n    return side ** 3"
    },
    {
        "id":309,
        "response":"import re\n\ndef find_long_word(text):\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "id":310,
        "response":"def sum_difference(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) \/\/ 6\n    square_of_sum = (n * (n + 1) \/\/ 2) ** 2\n    return square_of_sum - sum_of_squares"
    },
    {
        "id":311,
        "response":"def find_demlo(s: int) -> int:\n    return int(str(s)[::-1])"
    },
    {
        "id":312,
        "response":"def position_min(list1):\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]"
    },
    {
        "id":313,
        "response":"from typing import List\n\ndef right_rotate(arr: List[int], n: int, out_of_place: int, cur: int) -> List[int]:\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\ndef rearrange(arr: List[int]) -> List[int]:\n    n = len(arr)\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if ((arr[index] >= 0 and arr[out_of_place] < 0) or \n                (arr[index] < 0 and arr[out_of_place] >= 0)):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if out_of_place == -1:\n            if ((arr[index] >= 0 and index % 2 == 1) or \n                (arr[index] < 0 and index % 2 == 0)):\n                out_of_place = index\n    return arr"
    },
    {
        "id":314,
        "response":"def sum_of_alternates(test_tuple):\n    return sum(test_tuple[::2]) - sum(test_tuple[1::2])"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]"
    },
    {
        "id":316,
        "response":"from collections import Counter\n\ndef most_occurrences(test_list):\n    counter = Counter(test_list)\n    max_count = max(counter.values())\n    most_common_words = [word for word, count in counter.items() if count == max_count]\n    return most_common_words"
    },
    {
        "id":317,
        "response":"def check_right_angled(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"
    },
    {
        "id":318,
        "response":"def rotate_left(list1, m, n):\n    m = m % n\n    list1[:m], list1[m:] = list1[m:], list1[:m]\n    return list1"
    },
    {
        "id":319,
        "response":"def neg_count(lst):\n    from typing import List\n    count = sum(1 for num in lst if num < 0)\n    return count"
    },
    {
        "id":320,
        "response":"import re\n\ndef find_char(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "id":321,
        "response":"def count_unset_bits(n):\n    import math\n    max_bits = math.floor(math.log2(n)) + 1 if n != 0 else 1\n    bin_n = bin(n)[2:]\n    return max_bits - bin_n.count('1')"
    },
    {
        "id":322,
        "response":"from collections import Counter\n\ndef char_frequency(str1):\n    return dict(Counter(str1))"
    },
    {
        "id":323,
        "response":"def Sort(sub_li):\n    return sorted(sub_li, key=lambda x: x[1])"
    },
    {
        "id":324,
        "response":"def check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"
    },
    {
        "id":325,
        "response":"def ap_sum(a, n, d):\n    sum_of_ap = (n \/ 2) * (2 * a + (n - 1) * d)\n    return sum_of_ap"
    },
    {
        "id":326,
        "response":"import calendar\n\ndef check_monthnum(monthname1):\n    month_name_to_num = {calendar.month_name[i].lower(): i for i in range(1, 13)}\n    month_num = month_name_to_num.get(monthname1.lower())\n    if month_num is None:\n        return False\n    return calendar.monthrange(2024, month_num)[1] == 28"
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text):\n    pattern = r'\\b\\w+\\W*$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group().strip()\n    return None"
    },
    {
        "id":328,
        "response":"def check_Equality(s):\n    from collections import defaultdict\n    count_map = defaultdict(int)\n    total_count = 0\n    for char in s:\n        total_count += count_map[char]\n        count_map[char] += 1\n    return total_count + len(s)"
    },
    {
        "id":329,
        "response":"import math\nfrom collections import Counter\n\ndef find_Divisor(x, y):\n    divisors = []\n    for num in range(x, y + 1):\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i != num \/\/ i:\n                    divisors.append(num \/\/ i)\n    counter = Counter(divisors)\n    return counter.most_common(1)[0][0]"
    },
    {
        "id":330,
        "response":"def sum_three_smallest_nums(lst):\n    import heapq\n    positive_nums = [num for num in lst if num > 0]\n    if len(positive_nums) < 3:\n        return None\n    return sum(heapq.nsmallest(3, positive_nums))"
    },
    {
        "id":331,
        "response":"def set_to_tuple(s):\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"import heapq\nfrom typing import List\n\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\nclass Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n        min_heap = []\n        max_val = float('-inf')\n        for i, num_list in enumerate(nums):\n            node = Node(num_list[0], i, 0)\n            heapq.heappush(min_heap, node)\n            max_val = max(max_val, num_list[0])\n\n        min_range = float('inf')\n        result = []\n        while min_heap:\n            node = heapq.heappop(min_heap)\n            if max_val - node.value < min_range:\n                min_range = max_val - node.value\n                result = [node.value, max_val]\n\n            if node.index + 1 < len(nums[node.list_num]):\n                next_node = Node(nums[node.list_num][node.index + 1], node.list_num, node.index + 1)\n                heapq.heappush(min_heap, next_node)\n                max_val = max(max_val, next_node.value)\n            else:\n                break\n\n        return result"
    },
    {
        "id":333,
        "response":"def dig_let(s):\n    import re\n    digits = len(re.findall('\\d', s))\n    letters = len(re.findall('[a-zA-Z]', s))\n    return (digits, letters)"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m + 1):\n        factors = set()\n        for j in range(1, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                factors.add(j)\n                factors.add(i \/\/ j)\n        odd_factors = sum(1 for factor in factors if factor % 2 != 0)\n        if odd_factors % 2 != 0:\n            count += 1\n    return count"
    },
    {
        "id":335,
        "response":"def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [abs(nums[i] - nums[i-1]) for i in range(1, len(nums))]"
    },
    {
        "id":336,
        "response":"import math\n\ndef zigzag(n, k):\n    return math.comb(n, k)"
    },
    {
        "id":337,
        "response":"def count_Squares(m, n):\n    import math\n    min_side = min(m, n)\n    count = 0\n    for i in range(1, min_side + 1):\n        count += (m - i + 1) * (n - i + 1)\n    return count"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n, r):\n    if r > n: \n        return 0\n    return math.comb(n, r)"
    },
    {
        "id":339,
        "response":"import re\n\ndef check(string):\n    pattern = re.compile('[^01]')\n    return not bool(pattern.search(string))"
    },
    {
        "id":340,
        "response":"from collections import Counter\n\ndef minimum_Length(s: str) -> str:\n    char_count = Counter(s)\n    for char, count in char_count.items():\n        if count == 1:\n            return s.replace(char, '', 1)\n    return s"
    },
    {
        "id":341,
        "response":"from collections import OrderedDict\n\ndef first_Element(arr, n, k):\n    count_dict = OrderedDict()\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value == k:\n            return key\n    return -1"
    },
    {
        "id":342,
        "response":"def unique_Characters(s):\n    return len(s) == len(set(s))"
    },
    {
        "id":343,
        "response":"def remove_column(list1, n):\n    return [row[:n] + row[n+1:] for row in list1]"
    },
    {
        "id":344,
        "response":"def tn_ap(a, n, d):\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"import math\n\ndef count_Rectangles(radius):\n    count = 0\n    r_squared = radius ** 2\n    for width in range(1, radius + 1):\n        for height in range(1, width + 1):\n            if width ** 2 + height ** 2 <= r_squared * 2:\n                if width == height:\n                    count += 1\n                else:\n                    count += 2\n    return count"
    },
    {
        "id":346,
        "response":"def find_angle(a, b):\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float))):\n        raise TypeError(\"Angles must be numbers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Angles must be positive\")\n    if a + b >= 180:\n        raise ValueError(\"The sum of two angles cannot be greater than or equal to 180 degrees\")\n    return 180 - (a + b)"
    },
    {
        "id":347,
        "response":"def find_max(test_list):\n    import itertools\n    return max(itertools.chain(*test_list))"
    },
    {
        "id":348,
        "response":"def moddiv_list(nums1, nums2):\n    from typing import List\n    return list(map(lambda x, y: x % y if y != 0 else float('inf'), nums1, nums2))"
    },
    {
        "id":349,
        "response":"def Check_Solution(a, b, c):\n    import math\n    d = b**2 - 4*a*c\n    if d < 0:\n        return False\n    root1 = (-b + math.sqrt(d)) \/ (2*a)\n    root2 = (-b - math.sqrt(d)) \/ (2*a)\n    return (math.isclose(root1, 2*root2) or math.isclose(root2, 2*root1)) and (a != 0)"
    },
    {
        "id":350,
        "response":"def get_carol(n):\n    return ((2**n - 1)**2 - 2)"
    },
    {
        "id":351,
        "response":"def remove_empty(list1):\n    return [i for i in list1 if i != []]"
    },
    {
        "id":352,
        "response":"from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    max_count = max(count.values())\n    max_nums = [num for num, freq in count.items() if freq == max_count]\n    return min(max_nums)"
    },
    {
        "id":353,
        "response":"def add_K_element(test_list, K):\n    return [tuple(i + K for i in tup) for tup in test_list]"
    },
    {
        "id":354,
        "response":"def minFlips(s: str) -> int:\n    n = len(s)\n    alt1 = '01' * (n \/\/ 2) + '0' * (n % 2)\n    alt2 = '10' * (n \/\/ 2) + '1' * (n % 2)\n    flips1 = sum(c1 != c2 for c1, c2 in zip(s, alt1))\n    flips2 = sum(c1 != c2 for c1, c2 in zip(s, alt2))\n    return min(flips1, flips2)"
    },
    {
        "id":355,
        "response":"def count_Digit(n):\n    return len(str(abs(n)))"
    },
    {
        "id":356,
        "response":"def adjacent_num_product(list_nums):\n    if len(list_nums) < 2:\n        return None\n    return max(a * b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "id":357,
        "response":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self, data):\n        self.root = Node(data)\n\n    def height(self, node):\n        if node is None:\n            return 0\n        return 1 + max(self.height(node.left), self.height(node.right))\n\n    def is_balanced(self, node):\n        if node is None:\n            return True\n\n        left_height = self.height(node.left)\n        right_height = self.height(node.right)\n\n        return (abs(left_height - right_height) <= 1 and \n                self.is_balanced(node.left) and \n                self.is_balanced(node.right))\n\n    def check_balance(self):\n        return self.is_balanced(self.root)"
    },
    {
        "id":358,
        "response":"def repeat_tuples(test_tup, N):\n    return test_tup * N"
    },
    {
        "id":359,
        "response":"def lateralsurface_cuboid(length, width, height):\n    return 2 * (length + width) * height"
    },
    {
        "id":360,
        "response":"def float_sort(price):\n    import re\n    from typing import Tuple\n\n    def extract_float(item):\n        return float(re.search(r'\\d+(?:\\.\\d+)?', item).group())\n\n    return tuple(sorted(price, key=extract_float))"
    },
    {
        "id":361,
        "response":"def smallest_missing(A, left_element, right_element):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if A[mid] == mid + left_element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + left_element"
    },
    {
        "id":362,
        "response":"import heapq\nfrom typing import List\n\ndef heap_assending(nums: List[int]) -> List[int]:\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(len(nums))]"
    },
    {
        "id":363,
        "response":"def volume_cuboid(l, w, h):\n    return l * w * h"
    },
    {
        "id":364,
        "response":"from itertools import permutations\n\ndef permute_string(str):\n    perms = set(\"\".join(p) for p in permutations(str))\n    return list(perms)"
    },
    {
        "id":365,
        "response":"def round_num(n, m):\n    import math\n    n = math.floor(n \/ m + 0.5) * m\n    return n"
    },
    {
        "id":366,
        "response":"from collections import Counter\n\ndef remove_replica(test_tup, custom_val=None):\n    count = Counter(test_tup)\n    return tuple(custom_val if count[i] > 1 else i for i in test_tup)"
    },
    {
        "id":367,
        "response":"def remove_Char(s, c):\n    import re\n    return re.sub(c, '', s)"
    },
    {
        "id":368,
        "response":"def move_first(test_list):\n    if len(test_list) > 0:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n    return test_list"
    },
    {
        "id":369,
        "response":"def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)"
    },
    {
        "id":370,
        "response":"def multi_list(rownum, colnum):\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]"
    },
    {
        "id":371,
        "response":"def index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])"
    },
    {
        "id":372,
        "response":"def find_rotation_count(A):\n    left, right = 0, len(A) - 1\n    while left < right:\n        mid = left + (right - left) \/\/ 2\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "id":373,
        "response":"def even_bit_toggle_number(n):\n    import ctypes\n    bits = ctypes.sizeof(ctypes.c_int) * 8\n    mask = 0\n    for i in range(bits):\n        if i % 2 != 0:\n            mask |= (1 << i)\n    return n ^ mask"
    },
    {
        "id":374,
        "response":"def frequency_Of_Smallest(n, arr):\n    from collections import Counter\n    freq = Counter(arr)\n    smallest = min(arr)\n    return freq[smallest]"
    },
    {
        "id":375,
        "response":"def get_perrin(n: int) -> int:\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return perrin[n]"
    },
    {
        "id":376,
        "response":"def swap_count(s):\n    import re\n    s = re.sub('[^{}]', '', s)\n    length = len(s)\n    if length % 2 != 0:\n        return -1\n    \n    open_count = 0\n    imbalance = 0\n    \n    for char in s:\n        if char == '{':\n            open_count += 1\n        else:\n            if open_count == 0:\n                imbalance += 1\n                open_count += 1\n            else:\n                open_count -= 1\n    \n    return imbalance + open_count \/\/ 2"
    },
    {
        "id":377,
        "response":"def even_or_odd(N):\n    num = int(N, 16)\n    if num % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'"
    },
    {
        "id":378,
        "response":"def highest_Power_of_2(n):\n    import math\n    if n < 1:\n        return None\n    return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":379,
        "response":"def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
    },
    {
        "id":380,
        "response":"def add_string(lst, string):\n    return [string + item for item in lst]"
    },
    {
        "id":381,
        "response":"from typing import List, Dict, Any\n\ndef convert_list_dictionary(l1: List[Any], l2: List[Any], l3: List[Any]) -> List[Dict[str, Any]]:\n    return [{ 'l1': x, 'l2': y, 'l3': z } for x, y, z in zip(l1, l2, l3)]"
    },
    {
        "id":382,
        "response":"def get_max_sum(n):\n    memo = {0: 0}\n    for i in range(1, n + 1):\n        memo[i] = max(i, memo.get(i \/\/ 2, 0) + memo.get(i \/\/ 3, 0) + memo.get(i \/\/ 4, 0) + memo.get(i \/\/ 5, 0))\n    return memo[n]"
    },
    {
        "id":383,
        "response":"def max_length_list(input_list):\n    return max(input_list, key=lambda x: len(x) if isinstance(x, list) else 0)"
    },
    {
        "id":384,
        "response":"def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"from collections import Counter\n\ndef first_non_repeating_character(str1):\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "id":386,
        "response":"import re\n\ndef check_char(string):\n    if not string:\n        return False\n    pattern = f'^{string[0]}.*{string[-1]}$'\n    return bool(re.match(pattern, string, re.IGNORECASE))"
    },
    {
        "id":387,
        "response":"def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]"
    },
    {
        "id":388,
        "response":"def sum_of_digits(nums):\n    return [sum(int(digit) for digit in str(abs(num))) for num in nums]"
    },
    {
        "id":389,
        "response":"def bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"from typing import List, Tuple\nfrom collections import defaultdict\n\ndef extract_freq(test_list: List[Tuple]) -> dict:\n    freq_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        freq_dict[sorted_tup] += 1\n    return dict(freq_dict)"
    },
    {
        "id":391,
        "response":"def add_nested_tuples(test_tup1, test_tup2):\n    return tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"def ncr_modp(n, r, p):\n    import math\n\n    def power(x, y, m):\n        if y == 0:\n            return 1\n        temp = power(x, y \/\/ 2, m) % m\n        temp = (temp * temp) % m\n        if y % 2 == 1:\n            return (x * temp) % m\n        else:\n            return temp\n\n    def modInverse(n, p):\n        return power(n, p - 2, p)\n\n    C = [0] * (r + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n    return C[r]"
    },
    {
        "id":393,
        "response":"import re\n\ndef is_valid_URL(url: str) -> bool:\n    pattern = re.compile(\n        r'^(?:http|ftp)s?:\/\/'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:\/?|[\/?]\\S+)$', re.IGNORECASE)\n    return bool(pattern.match(url))"
    },
    {
        "id":394,
        "response":"def minimum(a, b):\n    return min(a, b)"
    },
    {
        "id":395,
        "response":"def check_tuplex(tuplex, tuple1):\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "id":396,
        "response":"def find_Parity(x: int) -> int:\n    return x % 2"
    },
    {
        "id":397,
        "response":"def rearrange_bigger(n):\n    import itertools\n    digits = list(str(n))\n    perms = set(int(''.join(p)) for p in itertools.permutations(digits))\n    larger_nums = [num for num in perms if num > n]\n    return min(larger_nums) if larger_nums else n"
    },
    {
        "id":398,
        "response":"import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(len(nums1))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n    return pairs"
    },
    {
        "id":399,
        "response":"def min_product_tuple(list1):\n    return min(list1, key=lambda x: x[0]*x[1])"
    },
    {
        "id":400,
        "response":"def min_val(listval):\n    if not listval:\n        return []\n    return min(listval, key=listval.count)"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word):\n    words = re.split('_+', word)\n    return words[0] + ''.join(w.capitalize() for w in words[1:])"
    },
    {
        "id":402,
        "response":"def remove_odd(l):\n    l[:] = [i for i in l if i % 2 == 0]\n    return l"
    },
    {
        "id":403,
        "response":"def extract_nth_element(test_list, n):\n    import operator\n    return list(map(operator.itemgetter(n), test_list))"
    },
    {
        "id":404,
        "response":"def overlapping(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return list1\n    else:\n        return []"
    },
    {
        "id":405,
        "response":"def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    arr.sort()\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])"
    },
    {
        "id":406,
        "response":"def breakSum(n):\n    import math\n    if n < 12:\n        return n\n    return max(n, breakSum(n \/\/ 2) + breakSum(n \/\/ 3) + breakSum(n \/\/ 4))"
    },
    {
        "id":407,
        "response":"from typing import List, Tuple, Any\nfrom itertools import groupby\n\ndef group_tuples(Input: List[Tuple[Any]]) -> List[Tuple[Any]]:\n    Input.sort(key=lambda x: x[0])\n    result = []\n    for key, group in groupby(Input, key=lambda x: x[0]):\n        result.append(tuple([key] + [item for tup in group for item in tup[1:]]))\n    return result"
    },
    {
        "id":408,
        "response":"from typing import List\n\ndef Find_Max(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n\n    max_len = 0\n    max_sublist = []\n    current_len = 1\n    current_sublist = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            current_len += 1\n            current_sublist.append(lst[i])\n        else:\n            if current_len > max_len:\n                max_len = current_len\n                max_sublist = current_sublist\n            current_len = 1\n            current_sublist = [lst[i]]\n\n    if current_len > max_len:\n        max_len = current_len\n        max_sublist = current_sublist\n\n    return max_sublist"
    },
    {
        "id":409,
        "response":"def round_and_sum(list1):\n    import math\n    total_sum = sum(round(num) for num in list1)\n    return total_sum * len(list1)"
    },
    {
        "id":410,
        "response":"def cube_Sum(n):\n    return sum([i**3 for i in range(2, n*2+1, 2)])"
    },
    {
        "id":411,
        "response":"def concatenate_tuple(test_tup):\n    return ''.join(map(str, test_tup))"
    },
    {
        "id":412,
        "response":"def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i ** 3 for i in range(1, n + 1))\n    return sum_of_cubes \/ n if n != 0 else 0"
    },
    {
        "id":413,
        "response":"def get_maxgold(gold, m, n):\n    goldTable = [[0 for i in range(n)] for j in range(m)]\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = goldTable[row][col+1]\n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = goldTable[row-1][col+1]\n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = goldTable[row+1][col+1]\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n    res = goldTable[0][0]\n    for i in range(m):\n        res = max(res, goldTable[i][0])\n    return res"
    },
    {
        "id":414,
        "response":"def extract_rear(test_tuple):\n    return tuple(i[-1] for i in test_tuple)"
    },
    {
        "id":415,
        "response":"def count_element_in_list(list1, x):\n    count = sum(1 for sublist in list1 if x in sublist)\n    return count"
    },
    {
        "id":416,
        "response":"def filter_oddnumbers(nums):\n    nums = list(filter(lambda x: x % 2 != 0, nums))\n    return nums"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "id":418,
        "response":"def shell_sort(my_list):\n    n = len(my_list)\n    gap = n \/\/ 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    \n    return my_list"
    },
    {
        "id":419,
        "response":"def and_tuples(test_tup1, test_tup2):\n    return tuple(x for x in test_tup1 if x in test_tup2)"
    },
    {
        "id":420,
        "response":"def parabola_directrix(a, b, c):\n    if a == 0:\n        raise ValueError(\"Not a parabola\")\n    return (4 * a * c - b ** 2 + 1) \/ (4 * a)"
    },
    {
        "id":421,
        "response":"def common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "id":422,
        "response":"def median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":"def check_greater(arr, number):\n    if not arr:\n        return arr\n    if all(i < number for i in arr):\n        return arr\n    else:\n        return []"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'B+')\n    if pattern.search(text):\n        return text\n    else:\n        return None"
    },
    {
        "id":425,
        "response":"def last_Digit(n):\n    return abs(n) % 10"
    },
    {
        "id":426,
        "response":"def neg_nos(list1):\n    return [num for num in list1 if num < 0]"
    },
    {
        "id":427,
        "response":"def remove_odd(str1):\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "id":428,
        "response":"from typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    seen = set()\n    count = 0\n    result = []\n    for tup in test_list:\n        reverse_tup = (tup[1], tup[0])\n        if reverse_tup in seen:\n            count += 1\n            result.append(tup)\n        seen.add(tup)\n    print(count)\n    return result"
    },
    {
        "id":429,
        "response":"def multiple_to_single(L):\n    return int(''.join(map(str, L)))"
    },
    {
        "id":430,
        "response":"import nltk\nfrom nltk import pos_tag, word_tokenize\n\nnltk.download('averaged_perceptron_tagger')\nnltk.download('punkt')\n\ndef find_adverb_position(text):\n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    adverbs = [(word, i) for i, (word, tag) in enumerate(tagged) if tag in ['RB', 'RBR', 'RBS']]\n    return adverbs"
    },
    {
        "id":431,
        "response":"def surfacearea_cube(l):\n    if l < 0:\n        raise ValueError(\"Length cannot be negative\")\n    return 6 * (l ** 2)"
    },
    {
        "id":432,
        "response":"def positive_count(nums):\n    from typing import List\n    total_count = len(nums)\n    if total_count == 0:\n        return 0\n    positive_nums = sum(1 for num in nums if num > 0)\n    return positive_nums \/ total_count"
    },
    {
        "id":433,
        "response":"def largest_neg(list1):\n    neg_numbers = [num for num in list1 if num < 0]\n    if neg_numbers:\n        return max(neg_numbers)\n    return None"
    },
    {
        "id":434,
        "response":"def trim_tuple(test_list, K):\n    return [tup[:len(tup)-K] if K <= len(tup) else () for tup in test_list]"
    },
    {
        "id":435,
        "response":"def index_multiplication(test_tup1, test_tup2):\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":"from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    count_dict = Counter(tup)\n    for elem in lst:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    tup = tuple([elem for elem in tup if elem in lst])\n    return tup"
    },
    {
        "id":437,
        "response":"def cube_nums(nums):\n    nums = list(map(lambda x: x ** 3, nums))\n    return nums"
    },
    {
        "id":438,
        "response":"def cal_sum(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    total = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            total += i\n    return total"
    },
    {
        "id":439,
        "response":"def check_Triangle(x1, y1, x2, y2, x3, y3):\n    area = abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) \/ 2.0)\n    if area == 0:\n        return False\n    else:\n        return True"
    },
    {
        "id":440,
        "response":"def extract_string(strings, length):\n    return [s for s in strings if len(s) == length]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1):\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "id":442,
        "response":"def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None"
    },
    {
        "id":443,
        "response":"def sumofFactors(n):\n    import math\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n \/\/ i) % 2 == 0 and i != n \/\/ i:\n                sum += n \/\/ i\n    if n % 2 == 0:\n        sum += n\n    return sum"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "id":445,
        "response":"def check_monthnumb_number(monthnum2):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days"
    },
    {
        "id":446,
        "response":"def reverse_string_list(stringlist):\n    stringlist[:] = [s[::-1] for s in stringlist]\n    return stringlist"
    },
    {
        "id":447,
        "response":"from typing import List\n\ndef Find_Min(lst: List[List[int]]) -> List[int]:\n    return min(lst, key=len, default=[])"
    },
    {
        "id":448,
        "response":"def rectangle_area(length, breadth):\n    return length * breadth"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "id":450,
        "response":"def Extract(lst):\n    return [item[0] for item in lst]"
    },
    {
        "id":451,
        "response":"def upper_ctr(s):\n    import re\n    return len(re.findall(r'[A-Z]', s))"
    },
    {
        "id":452,
        "response":"import itertools\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.combinations(list1, r))\n    return [list(i) for i in result]"
    },
    {
        "id":453,
        "response":"def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n            \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result"
    },
    {
        "id":454,
        "response":"def check_value(d, n):\n    return len(set(d.values())) == n\n\ndef main(dict, n):\n    if check_value(dict, n):\n        return dict\n    else:\n        return \"Not all values are same\"\n\ndef check_value(dict, n):\n    return dict if len(set(dict.values())) == n else \"Not all values are same\""
    },
    {
        "id":455,
        "response":"def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v not in [None, \"\", [], {}, ()] and not (isinstance(v, (int, float)) and v == 0)}"
    },
    {
        "id":456,
        "response":"def find_peak_util(arr, low, high, n):\n    import math\n    mid = low + (high - low) \/\/ 2\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n        return arr[mid]\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, mid - 1, n)\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\ndef find_peak(arr, n):\n    return find_peak_util(arr, 0, n - 1, n)"
    },
    {
        "id":457,
        "response":"def decimal_to_Octal(deciNum):\n    return oct(deciNum).replace(\"0o\", \"\")"
    },
    {
        "id":458,
        "response":"def max_product(arr, n):\n    import math\n    max_product = float('-inf')\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "id":459,
        "response":"def max_profit(price, k):\n    import sys\n    n = len(price)\n    if n < 2:\n        return 0\n    if k >= n \/\/ 2:\n        return sum(max(0, b - a) for a, b in zip(price, price[1:]))\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -sys.maxsize\n        for j in range(1, n):\n            max_diff = max(max_diff, dp[i - 1][j - 1] - price[j - 1])\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n    return dp[k][n - 1]"
    },
    {
        "id":460,
        "response":"def add_pairwise(test_tup):\n    return tuple(a + b for a, b in zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "id":461,
        "response":"def find_remainder(arr, lens, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product % n"
    },
    {
        "id":462,
        "response":"def check_Consecutive(l):\n    if not l:\n        return False\n    return max(l) - min(l) == len(l) - 1 and len(set(l)) == len(l)"
    },
    {
        "id":463,
        "response":"def tuple_intersection(test_list1, test_list2):\n    set1 = set(tuple(sorted(t)) for t in test_list1)\n    set2 = set(tuple(sorted(t)) for t in test_list2)\n    intersection = set1 & set2\n    return [tuple(t) for t in intersection]"
    },
    {
        "id":464,
        "response":"def replace_char(str1, ch, newch):\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "id":465,
        "response":"from collections import Counter\n\ndef sort_counter(dict1):\n    counter = Counter(dict1)\n    sorted_counter = dict(counter.most_common())\n    return sorted_counter"
    },
    {
        "id":466,
        "response":"def big_sum(nums):\n    return max(nums) + min(nums)"
    },
    {
        "id":467,
        "response":"def is_lower(string):\n    return string.lower()"
    },
    {
        "id":468,
        "response":"def remove_lowercase(str1):\n    import re\n    return re.sub('[a-z]', '', str1)"
    },
    {
        "id":469,
        "response":"def first_Digit(n):\n    import math\n    n = abs(n)\n    if n == 0:\n        return 0\n    digits = math.floor(math.log10(n)) + 1\n    n = n \/\/ (10 ** (digits - 1))\n    return n"
    },
    {
        "id":470,
        "response":"from collections import Counter\n\ndef get_max_occuring_char(str1):\n    if not str1:\n        return ''\n    counter = Counter(str1)\n    return max(counter, key=counter.get)"
    },
    {
        "id":471,
        "response":"def is_subset_sum(set, n, sum):\n    subset = [[False for _ in range(sum + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        subset[i][0] = True\n    for i in range(1, sum + 1):\n        subset[0][i] = False\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            else:\n                subset[i][j] = subset[i - 1][j] or subset[i - 1][j - set[i - 1]]\n    return subset[n][sum]"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    pattern = r'[A-Z][a-z]+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    i = 1\n    while True:\n        if math.factorial(i) % x == 0:\n            return i\n        i += 1"
    },
    {
        "id":474,
        "response":"def remove_matching_tuple(test_list1, test_list2):\n    test_list2_set = set(test_list2)\n    test_list1 = [ele for ele in test_list1 if ele not in test_list2_set]\n    return test_list1"
    },
    {
        "id":475,
        "response":"def largest_palindrome(nums):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    max_palindrome = float('-inf')\n    for num in nums:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome if max_palindrome != float('-inf') else None"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n, r):\n    if r > n:\n        return 0\n    if r == 0 or n == r:\n        return 1\n    return math.comb(n, r)\n\ndef binomial_probability(n, k, p):\n    return nCr(n, k) * (p ** k) * ((1 - p) ** (n - k))"
    },
    {
        "id":477,
        "response":"def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    return (math.sqrt(25 + 10 * math.sqrt(5)) \/ 4) * (a ** 2)"
    },
    {
        "id":479,
        "response":"def frequency_Of_Largest(n, arr):\n    from collections import Counter\n    count = Counter(arr)\n    max_val = max(arr)\n    return count[max_val]"
    },
    {
        "id":480,
        "response":"def extract_symmetric(test_list):\n    return [ele for ele in test_list if (ele[1], ele[0]) in test_list]"
    },
    {
        "id":481,
        "response":"def sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) \/ (1 - r)"
    },
    {
        "id":482,
        "response":"def binary_search(item_list, item):\n    import typing\n    if not isinstance(item_list, list) or not item_list:\n        return []\n    if not all(isinstance(x, (int, float)) for x in item_list):\n        return []\n    item_list.sort()\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if item_list[mid] == item:\n            return [mid]\n        elif item_list[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return []"
    },
    {
        "id":483,
        "response":"import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hexagons = []\n    x_step = radius * 1.5\n    y_step = radius * math.sqrt(3)\n    x_offset = 0\n    y = starty\n    while y <= endy:\n        x = startx + x_offset\n        while x <= endx:\n            hexagon = []\n            for i in range(6):\n                angle = 2 * math.pi \/ 6 * i\n                px = x + radius * math.cos(angle)\n                py = y + radius * math.sin(angle)\n                hexagon.append((px, py))\n            hexagons.append(tuple(hexagon))\n            x += x_step\n        y += y_step\n        x_offset = x_step \/ 2 if x_offset == 0 else 0\n    return hexagons"
    },
    {
        "id":484,
        "response":"def binary_to_integer(test_tup):\n    return int(''.join(map(str, test_tup)), 2)"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    str1 = re.sub(r'[a-z]', '', str1)\n    return str1"
    },
    {
        "id":486,
        "response":"import heapq\nfrom typing import List\n\ndef heap_queue_smallest(nums: List[int], n: int) -> List[int]:\n    heapq.heapify(nums)\n    return heapq.nsmallest(n, nums)"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"import math\n\ndef gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x"
    },
    {
        "id":489,
        "response":"import math\n\ndef diameter_circle(r):\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 2 * r"
    },
    {
        "id":490,
        "response":"def concatenate_elements(list):\n    return ''.join(map(str, list))"
    },
    {
        "id":491,
        "response":"def min_cost(cost, m, n):\n    import sys\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + cost[i][j]\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"def similar_elements(test_tup1, test_tup2):\n    return tuple(sorted(set(test_tup1) & set(test_tup2)))"
    },
    {
        "id":493,
        "response":"def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "id":494,
        "response":"import heapq\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, nums)"
    },
    {
        "id":495,
        "response":"def count_ways(n):\n    MOD = 10**9 + 7\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    \n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, (2*a + 3*b) % MOD\n    \n    return b"
    },
    {
        "id":496,
        "response":"def is_one_bit_diff(x: int, y: int) -> bool:\n    import math\n    if x < 0 or y < 0:\n        return False\n    xor_result = x ^ y\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "id":498,
        "response":"def square_nums(nums):\n    nums = list(map(lambda x: x ** 2, nums))\n    return nums"
    },
    {
        "id":499,
        "response":"def find_Rotations(str):\n    n = len(str)\n    temp = str + str\n    for i in range(1, n + 1):\n        if temp[i:i + n] == str:\n            return i\n    return n"
    },
    {
        "id":500,
        "response":"import heapq\nfrom typing import List\n\ndef small_nnum(list1: List[int], n: int) -> List[int]:\n    return heapq.nsmallest(n, list1)"
    }
]