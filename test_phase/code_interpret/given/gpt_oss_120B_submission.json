[
    {
        "id":1,
        "response":"import re\n\ndef remove_Occ(s, ch):\n    if not s or not ch:\n        return s\n    first = s.find(ch)\n    if first == -1:\n        return s\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    return s[:first] + s[first+1:last] + s[last+1:]"
    },
    {
        "id":2,
        "response":"import typing\n\ndef sort_matrix(M: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    if not M:\n        return []\n    return sorted(M, key=lambda row: sum(row))"
    },
    {
        "id":3,
        "response":"import collections\n\ndef count_common(words):\n    if not words:\n        return []\n    counter = collections.Counter(words)\n    first_index = {}\n    for i, w in enumerate(words):\n        if w not in first_index:\n            first_index[w] = i\n    sorted_items = sorted(counter.items(), key=lambda x: (-x[1], first_index.get(x[0], float('inf'))))\n    return sorted_items[:4]"
    },
    {
        "id":4,
        "response":"import math\n\ndef find_Volume(l, b, h):\n    if l < 0 or b < 0 or h < 0:\n        raise ValueError(\"Dimensions must be non-negative\")\n    return (l * b * h) \/ 2.0"
    },
    {
        "id":5,
        "response":"import re\n\ndef split_lowerstring(text):\n    result = []\n    i = 0\n    n = len(text)\n    while i < n:\n        if text[i].islower():\n            start = i\n            i += 1\n            while i < n and text[i].isupper():\n                i += 1\n            result.append(text[start:i])\n        else:\n            i += 1\n    return result"
    },
    {
        "id":6,
        "response":"import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'^[a-z]+_[a-z]+$', text):\n        return 'Found a match!'\n    return 'Not found!'"
    },
    {
        "id":7,
        "response":"def square_perimeter(a):\n    return 4 * a"
    },
    {
        "id":8,
        "response":"import typing\n\ndef str_to_list(s: str, chars: str) -> str:\n    remove_set = set(chars)\n    return ''.join(ch for ch in s if ch not in remove_set)"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "id":10,
        "response":"import math\n\ndef is_woodall(x):\n    if x < 1:\n        return False\n    n = 1\n    while True:\n        w = n * (1 << n) - 1\n        if w == x:\n            return True\n        if w > x:\n            return False\n        n += 1"
    },
    {
        "id":11,
        "response":"import typing\n\ndef multiples_of_num(m: int, n: int) -> typing.List[int]:\n    if m <= 0:\n        return []\n    return [n * i for i in range(1, m + 1)]"
    },
    {
        "id":12,
        "response":"import typing\n\ndef find_first_duplicate(nums: typing.List[int]) -> typing.Optional[int]:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"
    },
    {
        "id":13,
        "response":"import typing\n\ndef maximum_Sum(list1: typing.List[typing.List[int]]) -> int:\n    max_sum = 0\n    for sublist in list1:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "id":14,
        "response":"import typing\n\ndef binary_to_decimal(binary: typing.Union[int, str]) -> int:\n    binary_str = str(binary)\n    if not all(ch in \"01\" for ch in binary_str):\n        raise ValueError(\"Invalid binary number\")\n    return int(binary_str, 2)"
    },
    {
        "id":15,
        "response":"import math\n\ndef find_Product(arr, n):\n    unique_elements = set(arr)\n    product = 1\n    for num in unique_elements:\n        product *= num\n    return product"
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: typing.List[tuple], K: int) -> bool:\n    for item in test_list:\n        if isinstance(item, tuple) and len(item) == K:\n            return True\n    return False"
    },
    {
        "id":17,
        "response":"import re\n\ndef remove(lst):\n    return [re.sub(r'\\d', '', s) for s in lst]"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    k = min(k, n - k)\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - k + i) \/\/ i\n    return result"
    },
    {
        "id":19,
        "response":"import typing\n\ndef get_Odd_Occurrence(arr: typing.List[int], arr_size: int) -> int:\n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result"
    },
    {
        "id":20,
        "response":"import collections\n\ndef check_Equality(s):\n    if not s:\n        return 0\n    freq = collections.Counter(s)\n    total = 0\n    for count in freq.values():\n        total += count * (count + 1) \/\/ 2\n    return total"
    },
    {
        "id":21,
        "response":"None"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    max_factor = None\n    while n % 2 == 0:\n        max_factor = 2\n        n \/\/= 2\n    i = 3\n    limit = math.isqrt(n) + 1\n    while i <= limit and n > 1:\n        while n % i == 0:\n            max_factor = i\n            n \/\/= i\n            limit = math.isqrt(n) + 1\n        i += 2\n    if n > 1:\n        max_factor = n\n    return max_factor"
    },
    {
        "id":23,
        "response":"def decimal_To_Binary(N):\n    if N == 0:\n        return 0\n    result = 0\n    place = 1\n    while N > 0:\n        bit = N & 1\n        result += bit * place\n        place *= 10\n        N >>= 1\n    return result"
    },
    {
        "id":24,
        "response":"import typing\n\ndef find_missing(ar: typing.List[int], N: int) -> int:\n    for i, val in enumerate(ar):\n        expected = i + 1\n        if val != expected:\n            return expected\n    return N + 1"
    },
    {
        "id":25,
        "response":"import typing\n\ndef find_rect_num(n: int) -> int:\n    return n * (n + 1)"
    },
    {
        "id":26,
        "response":"import sys\n\ndef find_Nth_Digit(p, q, N):\n    if q == 0:\n        raise ZeroDivisionError(\"Denominator q cannot be zero.\")\n    p = abs(p)\n    q = abs(q)\n    remainder = p % q\n    digit = 0\n    for _ in range(N):\n        remainder *= 10\n        digit = remainder \/\/ q\n        remainder %= q\n    return digit"
    },
    {
        "id":27,
        "response":"import typing\n\ndef sort_mixed_list(mixed_list: typing.List[typing.Union[int, str]]) -> typing.List[typing.Union[int, str]]:\n    numbers = [item for item in mixed_list if isinstance(item, int) and not isinstance(item, bool)]\n    strings = [item for item in mixed_list if isinstance(item, str)]\n    numbers.sort()\n    strings.sort()\n    return numbers + strings"
    },
    {
        "id":28,
        "response":"import typing\n\ndef div_even_odd(list1: typing.List[int]) -> typing.Optional[float]:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even \/ first_odd"
    },
    {
        "id":29,
        "response":"import heapq\nfrom collections import Counter\n\ndef rearange_string(S: str) -> str:\n    if not S:\n        return \"\"\n    freq = Counter(S)\n    n = len(S)\n    if max(freq.values()) > (n + 1) \/\/ 2:\n        return \"\"\n    heap = [(-cnt, ch) for ch, cnt in freq.items()]\n    heapq.heapify(heap)\n    prev_cnt, prev_ch = 0, ''\n    result = []\n    while heap:\n        cnt, ch = heapq.heappop(heap)\n        result.append(ch)\n        cnt += 1\n        if prev_cnt < 0:\n            heapq.heappush(heap, (prev_cnt, prev_ch))\n        prev_cnt, prev_ch = cnt, ch\n    return ''.join(result)"
    },
    {
        "id":30,
        "response":"import collections\n\ndef freq_element(nums):\n    counter = collections.Counter()\n    for sublist in nums:\n        counter.update(sublist)\n    return dict(counter)"
    },
    {
        "id":31,
        "response":"import typing\n\ndef filter_evennumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"import collections\n\ndef find_Sum(arr, n):\n    freq = collections.Counter(arr)\n    total = 0\n    for x in arr:\n        if freq[x] > 1:\n            total += x\n    return total"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    return 'Found a match!' if re.search(r'[a-z]+_[a-z]+', text) else 'Not found!'"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text):\n    if re.match(r'^[A-Za-z]\\w*', text):\n        return text\n    return 'Not matched!'"
    },
    {
        "id":35,
        "response":"import math\nfrom functools import reduce\n\ndef find_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)"
    },
    {
        "id":36,
        "response":"import typing\n\ndef test_distinct(data: typing.List[int]) -> bool:\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":"import typing\n\ndef compute_Last_Digit(A: int, B: int) -> int:\n    lo, hi = (A, B) if A <= B else (B, A)\n    result_mod = 1\n    for i in range(lo + 1, hi + 1):\n        result_mod = (result_mod * i) % 10\n    return result_mod"
    },
    {
        "id":38,
        "response":"import typing\n\ndef odd_bit_set_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0:\n        return 1\n    bit_len = n.bit_length()\n    mask = 0\n    for i in range(0, bit_len, 2):\n        mask |= 1 << i\n    return n | mask"
    },
    {
        "id":39,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[typing.Any]], N: int) -> typing.List[typing.Any]:\n    result: typing.List[typing.Any] = []\n    for sub in nums:\n        if -len(sub) <= N < len(sub):\n            result.append(sub[N])\n    return result"
    },
    {
        "id":40,
        "response":"import typing\n\ndef min_length_list(input_list: typing.List[typing.List[typing.Any]]) -> typing.Tuple[int, typing.List[typing.Any]]:\n    if not input_list:\n        return (0, [])\n    min_lst = min(input_list, key=lambda x: len(x))\n    return (len(min_lst), min_lst)"
    },
    {
        "id":41,
        "response":"def check_equilateral(x, y, z):\n    return x == y == z"
    },
    {
        "id":42,
        "response":"def parallelogram_area(b, h):\n    return b * h"
    },
    {
        "id":43,
        "response":"import typing\n\ndef check_Equality(s: str) -> str:\n    if not s:\n        return \"Not Equal\"\n    return \"Equal\" if s[0] == s[-1] else \"Not Equal\""
    },
    {
        "id":44,
        "response":"import typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    if not my_list:\n        return []\n    min_val = min(my_list)\n    max_val = max(my_list)\n    range_size = max_val - min_val + 1\n    count = [0] * range_size\n    for num in my_list:\n        count[num - min_val] += 1\n    sorted_list = []\n    for i, c in enumerate(count):\n        sorted_list.extend([i + min_val] * c)\n    return sorted_list"
    },
    {
        "id":45,
        "response":"import math\n\ndef tn_gp(a, n, r):\n    if n < 1:\n        return 0\n    return a * (r ** (n - 1))"
    },
    {
        "id":46,
        "response":"import typing\n\ndef rev(num: int) -> bool:\n    rev_num = int(str(num)[::-1])\n    return num == 2 * rev_num - 1"
    },
    {
        "id":47,
        "response":"import typing\n\ndef find_Max_Num(arr: typing.List[int], n: int) -> int:\n    sorted_arr = sorted(arr, reverse=True)\n    return int(''.join(map(str, sorted_arr)))"
    },
    {
        "id":48,
        "response":"import typing\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return x * y < 0"
    },
    {
        "id":49,
        "response":"import math\nimport typing\n\ndef is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"
    },
    {
        "id":50,
        "response":"import typing\n\ndef max_len_sub(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_len = 1\n    cur_len = 1\n    prev_diff = None\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff == 0:\n            cur_len = 1\n            prev_diff = None\n        else:\n            if prev_diff is not None and diff * prev_diff < 0:\n                cur_len += 1\n            else:\n                cur_len = 2\n            prev_diff = diff\n        if cur_len > max_len:\n            max_len = cur_len\n    return max_len"
    },
    {
        "id":51,
        "response":"import collections\n\ndef count_Substrings(s, n):\n    prefix = 0\n    freq = collections.defaultdict(int)\n    freq[0] = 1\n    count = 0\n    for ch in s:\n        prefix += int(ch) - 1\n        count += freq[prefix]\n        freq[prefix] += 1\n    return count"
    },
    {
        "id":52,
        "response":"def smallest_num(xs):\n    if not xs:\n        raise ValueError(\"List is empty\")\n    m = xs[0]\n    for num in xs[1:]:\n        if num < m:\n            m = num\n    return m"
    },
    {
        "id":53,
        "response":"import typing\n\ndef max_difference(test_list: typing.List[typing.Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = a - b\n        if diff < 0:\n            diff = -diff\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "id":54,
        "response":"def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "id":55,
        "response":"def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, (list, tuple)):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"
    },
    {
        "id":56,
        "response":"import typing\n\ndef pos_count(lst):\n    return sum(1 for x in lst if x > 0)"
    },
    {
        "id":57,
        "response":"import math\n\ndef bell_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non\u2011negative\")\n    bell = [1]\n    for i in range(1, n + 1):\n        total = 0\n        for k in range(i):\n            total += math.comb(i - 1, k) * bell[k]\n        bell.append(total)\n    return bell[n]"
    },
    {
        "id":58,
        "response":"import typing\n\ndef is_Monotonic(A: typing.List[int]) -> bool:\n    if len(A) <= 1:\n        return True\n    increasing = True\n    decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] < A[i + 1]:\n            decreasing = False\n        if A[i] > A[i + 1]:\n            increasing = False\n        if not increasing and not decreasing:\n            return False\n    return increasing or decreasing"
    },
    {
        "id":59,
        "response":"import typing\n\ndef is_sublist(l: typing.List[int], s: typing.List[int]) -> bool:\n    if not s:\n        return True\n    n, m = len(l), len(s)\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False"
    },
    {
        "id":60,
        "response":"import typing\n\ndef find_equal_tuple(Input: typing.List[tuple], k: int) -> str:\n    if all(len(t) == k for t in Input):\n        return 'All tuples have same length'\n    return 'Not all tuples have same length'"
    },
    {
        "id":61,
        "response":"import math\n\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    shrink = 1.3\n    while gap > 1 or swapped:\n        gap = int(gap \/ shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "id":62,
        "response":"import typing\n\ndef dif_Square(n: int) -> bool:\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    return n % 4 != 2"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    return re.split(r'[\\n*]', text)"
    },
    {
        "id":64,
        "response":"import typing\n\ndef is_samepatterns(colors: typing.List[str], patterns: typing.List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    mapping: typing.Dict[str, str] = {}\n    for color, pattern in zip(colors, patterns):\n        if pattern in mapping:\n            if mapping[pattern] != color:\n                return False\n        else:\n            mapping[pattern] = color\n    return True"
    },
    {
        "id":65,
        "response":"import re\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> str:\n    filtered = [t for t in test_list if all(isinstance(x, int) and x % K == 0 for x in t)]\n    return str(filtered)"
    },
    {
        "id":66,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = m if m < n else n\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":67,
        "response":"import typing\n\ndef is_Diff(n: int) -> bool:\n    n = abs(n)\n    sum_even = 0\n    sum_odd = 0\n    while n:\n        d = n % 10\n        if d % 2 == 0:\n            sum_even += d\n        else:\n            sum_odd += d\n        n \/\/= 10\n    return sum_even == sum_odd"
    },
    {
        "id":68,
        "response":"import typing\n\ndef count_With_Odd_SetBits(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') & 1:\n            count += 1\n    return count"
    },
    {
        "id":69,
        "response":"def word_len(s):\n    return len(s) % 2 == 1"
    },
    {
        "id":70,
        "response":"import math\n\ndef tetrahedral_number(n):\n    if not isinstance(n, (int, float)):\n        raise TypeError(\"Input must be a number\")\n    n = int(n)\n    if n <= 0:\n        return 0.0\n    return n * (n + 1) * (n + 2) \/ 6.0"
    },
    {
        "id":71,
        "response":"import typing\n\ndef zip_tuples(test_tup1: tuple, test_tup2: tuple) -> list:\n    if not test_tup2:\n        return []\n    result = []\n    len2 = len(test_tup2)\n    for i, val1 in enumerate(test_tup1):\n        result.append((val1, test_tup2[i % len2]))\n    return result"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    return (4.0\/3.0) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":"import string\n\ndef get_Char(strr: str) -> str:\n    total = 0\n    for ch in strr:\n        if ch.isalpha():\n            total += ord(ch.lower()) - ord('a') + 1\n    if total == 0:\n        return ''\n    remainder = total % 26\n    index = 26 if remainder == 0 else remainder\n    return chr(ord('a') + index - 1)"
    },
    {
        "id":74,
        "response":"import sys\n\ndef sequence(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1 or n == 2:\n        return 1\n    a = [0, 1, 1]  # index 0 unused\n    for i in range(3, n + 1):\n        a.append(a[a[i - 1]] + a[i - a[i - 1]])\n    return a[n]"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r"
    },
    {
        "id":76,
        "response":"import typing\n\ndef centered_hexagonal_number(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":"import typing\n\ndef freq_count(list1: typing.List[int]) -> dict:\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "id":79,
        "response":"import math\nfrom typing import Union\n\ndef closest_num(N: Union[int, float]) -> int:\n    if isinstance(N, int):\n        return N - 1\n    if N == int(N):\n        return int(N) - 1\n    return math.floor(N)"
    },
    {
        "id":80,
        "response":"import typing\n\ndef len_log(list1: typing.List[str]) -> int:\n    max_len = 0\n    for word in list1:\n        length = len(word)\n        if length > max_len:\n            max_len = length\n    return max_len"
    },
    {
        "id":81,
        "response":"import typing\n\ndef find_substring(str_list: typing.List[str], sub_str: str) -> bool:\n    return any(sub_str in s for s in str_list)"
    },
    {
        "id":82,
        "response":"import typing\n\ndef is_undulating(n: typing.Union[int, str]) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    if s[0] == s[1]:\n        return False\n    if len(set(s)) != 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i - 2]:\n            return False\n    return True"
    },
    {
        "id":83,
        "response":"def power(a, b):\n    return a ** b"
    },
    {
        "id":84,
        "response":"import typing\n\ndef index_minimum(test_list: typing.List[typing.Tuple[typing.Any, int]]) -> typing.Any:\n    if not test_list:\n        return None\n    min_tuple = min(test_list, key=lambda x: x[1])\n    return min_tuple[0]"
    },
    {
        "id":85,
        "response":"import typing\n\ndef Find_Min_Length(lst: typing.List[typing.Iterable]) -> int:\n    if not lst:\n        return 0\n    return min(len(sub) for sub in lst)"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n: int) -> int:\n    if n == 0:\n        return 0\n    n = abs(n)\n    count = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            count += 2\n    if limit * limit == n:\n        count -= 1\n    return count"
    },
    {
        "id":87,
        "response":"from collections import Counter\n\ndef frequency_lists(list_of_lists):\n    cnt = Counter()\n    for sublist in list_of_lists:\n        cnt.update(sublist)\n    return dict(cnt)"
    },
    {
        "id":88,
        "response":"import functools\nimport operator\n\ndef multiply_num(numbers):\n    nums = list(numbers)\n    if not nums:\n        return 0.0\n    product = functools.reduce(operator.mul, nums, 1)\n    return product \/ len(nums)"
    },
    {
        "id":89,
        "response":"def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    if n < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    bits = []\n    while n > 0:\n        bits.append(str(n & 1))\n        n >>= 1\n    return ''.join(reversed(bits))"
    },
    {
        "id":90,
        "response":"import re\n\ndef _increment_str(num_str: str) -> str:\n    num_list = list(num_str)\n    i = len(num_list) - 1\n    carry = 1\n    while i >= 0 and carry:\n        new_digit = ord(num_list[i]) - 48 + carry\n        carry = new_digit \/\/ 10\n        num_list[i] = chr((new_digit % 10) + 48)\n        i -= 1\n    if carry:\n        num_list.insert(0, '1')\n    return ''.join(num_list)\n\ndef next_smallest_palindrome(num: int) -> int:\n    s = str(num)\n    n = len(s)\n    if set(s) == {'9'}:\n        return int('1' + ('0' * (n - 1)) + '1')\n    left = s[:n \/\/ 2]\n    middle = s[n \/\/ 2] if n % 2 else ''\n    if n % 2:\n        pal = left + middle + left[::-1]\n    else:\n        pal = left + left[::-1]\n    if int(pal) > num:\n        return int(pal)\n    if n % 2:\n        prefix = s[:n \/\/ 2 + 1]\n        inc_prefix = _increment_str(prefix)\n        new_left = inc_prefix[:-1]\n        new_middle = inc_prefix[-1]\n        return int(new_left + new_middle + new_left[::-1])\n    else:\n        prefix = s[:n \/\/ 2]\n        inc_prefix = _increment_str(prefix)\n        new_left = inc_prefix\n        return int(new_left + new_left[::-1])"
    },
    {
        "id":91,
        "response":"import typing\n\ndef kth_element(arr: typing.List[int], n: int, k: int) -> typing.Optional[int]:\n    if k < 1 or k > n:\n        return None\n    return arr[k - 1]"
    },
    {
        "id":92,
        "response":"import re\n\ndef snake_to_camel(word: str) -> str:\n    parts = word.split('_')\n    return ''.join(p[:1].upper() + p[1:].lower() for p in parts if p)"
    },
    {
        "id":93,
        "response":"import math\n\ndef eulerian_num(n: int, m: int) -> int:\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m < 0 or m >= n:\n        return 0\n    dp = [[0] * (n) for _ in range(n + 1)]\n    dp[1][0] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            val = 0\n            if j > 0:\n                val += (i - j) * dp[i - 1][j - 1]\n            if j < i - 1:\n                val += (j + 1) * dp[i - 1][j]\n            dp[i][j] = val\n    return dp[n][m]"
    },
    {
        "id":94,
        "response":"import typing\n\ndef sort_sublists(input_list: typing.Iterable[typing.Iterable[str]]) -> list:\n    return list(map(lambda sub: sorted(sub), input_list))"
    },
    {
        "id":95,
        "response":"import typing\n\ndef count(lst: typing.List[bool]) -> int:\n    return sum(1 for item in lst if item is True)"
    },
    {
        "id":96,
        "response":"import typing\n\ndef add_lists(test_list: typing.List, test_tup: typing.Tuple) -> typing.Tuple:\n    return tuple(test_tup) + tuple(test_list)"
    },
    {
        "id":97,
        "response":"import typing\n\ndef count_Hexadecimal(L: int, R: int) -> int:\n    if L > R:\n        L, R = R, L\n    lower = max(L, 0)\n    upper = min(R, 15)\n    return max(0, upper - lower + 1)"
    },
    {
        "id":98,
        "response":"import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    sorted_iters = [sorted(num1), sorted(num2), sorted(num3)]\n    return list(heapq.merge(*sorted_iters))"
    },
    {
        "id":99,
        "response":"import typing\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    return s.count('1')"
    },
    {
        "id":100,
        "response":"import typing\n\ndef extract_missing(test_list: typing.List[typing.Tuple[int, int]], strt_val: int, stop_val: int) -> typing.List[typing.Tuple[int, int]]:\n    intervals = sorted(test_list, key=lambda x: x[0])\n    result: typing.List[typing.Tuple[int, int]] = []\n    if not intervals:\n        if strt_val < stop_val:\n            result.append((strt_val, stop_val))\n        return result\n    first_start, first_end = intervals[0]\n    if strt_val < first_start:\n        result.append((strt_val, first_start))\n    for i, (s, e) in enumerate(intervals):\n        if e < stop_val:\n            result.append((e, stop_val))\n        if i + 1 < len(intervals):\n            next_start, _ = intervals[i + 1]\n            if e < next_start:\n                result.append((e, next_start))\n    return result"
    },
    {
        "id":101,
        "response":"import typing\n\ndef common_in_nested_lists(nestedlist: typing.List[typing.List[int]]) -> typing.List[int]:\n    if not nestedlist:\n        return []\n    common_set = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_set.intersection_update(sublist)\n        if not common_set:\n            break\n    return sorted(common_set, reverse=True)"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    return 2 * (diameter + height)"
    },
    {
        "id":103,
        "response":"def check_integer(text):\n    try:\n        int(text)\n        return True\n    except (ValueError, TypeError):\n        return False"
    },
    {
        "id":104,
        "response":"import collections\n\ndef assign_freq(test_list):\n    freq = collections.OrderedDict()\n    for tpl in test_list:\n        freq[tpl] = freq.get(tpl, 0) + 1\n    result = [tuple(list(k) + [v]) for k, v in freq.items()]\n    return str(result)"
    },
    {
        "id":105,
        "response":"def empty_dit(list1):\n    return all(isinstance(d, dict) and not d for d in list1)"
    },
    {
        "id":106,
        "response":"import typing\n\ndef tuple_to_int(nums: typing.Tuple[int, ...]) -> int:\n    result = 0\n    for digit in nums:\n        result = result * 10 + digit\n    return result"
    },
    {
        "id":107,
        "response":"import re\nfrom typing import Any, List, Tuple\n\ndef list_to_float(test_list: List[Any]) -> str:\n    result: List[Any] = []\n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            new_tuple = []\n            for sub in item:\n                try:\n                    new_tuple.append(float(sub))\n                except Exception:\n                    new_tuple.append(sub)\n            result.append(tuple(new_tuple))\n        else:\n            try:\n                result.append(float(item))\n            except Exception:\n                result.append(item)\n    return str(result)"
    },
    {
        "id":108,
        "response":"def string_to_list(string: str) -> list:\n    return string.split()"
    },
    {
        "id":109,
        "response":"import typing\n\ndef search(arr: typing.List[int], n: int) -> int:\n    low, high = 0, n - 1\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if mid % 2:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":110,
        "response":"import typing\n\ndef max_product_tuple(list1: typing.List[typing.Tuple[int, int]]) -> typing.Optional[int]:\n    if not list1:\n        return None\n    max_prod = None\n    for t in list1:\n        if len(t) < 2:\n            continue\n        prod = t[0] * t[1]\n        if max_prod is None or prod > max_prod:\n            max_prod = prod\n    return max_prod"
    },
    {
        "id":111,
        "response":"import itertools\n\ndef check_triplet(A, n, target_sum, count):\n    if n < 3:\n        return False\n    A.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current = A[i] + A[left] + A[right]\n            if current == target_sum:\n                return True\n            if current < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False"
    },
    {
        "id":112,
        "response":"import math\n\ndef smartNumber(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    count = 0\n    num = 30\n    while True:\n        temp = num\n        distinct = 0\n        ok = True\n        i = 2\n        while i * i <= temp:\n            if temp % i == 0:\n                exp = 0\n                while temp % i == 0:\n                    temp \/\/= i\n                    exp += 1\n                if exp != 1:\n                    ok = False\n                    break\n                distinct += 1\n                if distinct > 3:\n                    ok = False\n                    break\n            i += 1 if i == 2 else 2\n        if ok and temp > 1:\n            distinct += 1\n        if ok and distinct == 3:\n            count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "id":113,
        "response":"import math\n\ndef amicable_numbers_sum(limit):\n    if limit <= 1:\n        return 0\n    sum_div = [0] * limit\n    for i in range(1, limit \/\/ 2 + 1):\n        for j in range(i * 2, limit, i):\n            sum_div[j] += i\n    total = 0\n    for n in range(2, limit):\n        partner = sum_div[n]\n        if partner != n and partner < limit and sum_div[partner] == n:\n            total += n\n    return total"
    },
    {
        "id":114,
        "response":"import math\n\ndef angle_complex(a, b):\n    real_part = float(a)\n    imag_part = float(b.imag) if isinstance(b, complex) else float(b)\n    if real_part == 0 and imag_part == 0:\n        return 0.0\n    return math.atan2(imag_part, real_part)"
    },
    {
        "id":115,
        "response":"import sys\n\ndef find_length(string: str, n: int) -> int:\n    if not string:\n        return 0\n    max_ending = max_sofar = -sys.maxsize\n    min_ending = min_sofar = sys.maxsize\n    for ch in string:\n        val = 1 if ch == '0' else -1\n        max_ending = val if max_ending < 0 else max_ending + val\n        max_sofar = max(max_sofar, max_ending)\n        min_ending = val if min_ending > 0 else min_ending + val\n        min_sofar = min(min_sofar, min_ending)\n    return max(max_sofar, -min_sofar)"
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    g = math.gcd(a, b)\n    total = 0\n    i = 1\n    while i * i <= g:\n        if g % i == 0:\n            total += i\n            if i != g \/\/ i:\n                total += g \/\/ i\n        i += 1\n    return total"
    },
    {
        "id":117,
        "response":"def multiply_int(x, y):\n    sign = -1 if (x < 0) ^ (y < 0) else 1\n    a = abs(x)\n    b = abs(y)\n    result = 0\n    while b:\n        if b & 1:\n            result += a\n        a <<= 1\n        b >>= 1\n    if sign == -1:\n        result = -result\n    return result"
    },
    {
        "id":118,
        "response":"import typing\n\ndef long_words(n: int, s: str) -> typing.List[str]:\n    return [word for word in s.split() if len(word) > n]"
    },
    {
        "id":119,
        "response":"import typing\n\ndef magic_square_test(my_matrix: typing.List[typing.List[int]]) -> bool:\n    if not my_matrix or not isinstance(my_matrix, list):\n        return False\n    n = len(my_matrix)\n    for row in my_matrix:\n        if not isinstance(row, list) or len(row) != n:\n            return False\n    target_sum = sum(my_matrix[0])\n    for i in range(n):\n        if sum(my_matrix[i]) != target_sum:\n            return False\n        if sum(my_matrix[j][i] for j in range(n)) != target_sum:\n            return False\n    if sum(my_matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n    return True"
    },
    {
        "id":120,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return (None, 0)\n    return collections.Counter(nums).most_common(1)[0]"
    },
    {
        "id":121,
        "response":"import re\n\ndef reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    chars = list(str1)\n    left, right = 0, len(chars) - 1\n    while left < right:\n        while left < right and chars[left] not in vowels:\n            left += 1\n        while left < right and chars[right] not in vowels:\n            right -= 1\n        if left < right:\n            chars[left], chars[right] = chars[right], chars[left]\n            left += 1\n            right -= 1\n    return ''.join(chars)"
    },
    {
        "id":122,
        "response":"import typing\n\ndef tup_string(tup1: typing.Tuple) -> str:\n    return ''.join(map(str, tup1))"
    },
    {
        "id":123,
        "response":"def sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"import typing\n\ndef check_last(arr: typing.List[int], n: int, p: int) -> str:\n    if not arr or n != len(arr):\n        raise ValueError(\"Array length mismatch or empty array\")\n    result = arr[-1] + p\n    return \"EVEN\" if result % 2 == 0 else \"ODD\""
    },
    {
        "id":125,
        "response":"def hexagonal_num(n):\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"import typing\n\ndef cal_electbill(units: float) -> float:\n    if units <= 0:\n        return 0.0\n    if units <= 50:\n        return round(units * 2.5, 2)\n    return round(50 * 2.5 + (units - 50) * 4.85, 2)"
    },
    {
        "id":127,
        "response":"import typing\n\ndef zero_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    zeros = sum(1 for x in nums if x == 0)\n    return round(zeros \/ len(nums), 2)"
    },
    {
        "id":128,
        "response":"import typing\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if not isinstance(n, int):\n        return False\n    return n > 0 and n % 2 == 0"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    pi = 3.1415\n    return 2 * pi * r"
    },
    {
        "id":130,
        "response":"import itertools\n\ndef extract_singly(test_list):\n    seen = set()\n    result = []\n    for tup in test_list:\n        for item in tup:\n            if item not in seen:\n                seen.add(item)\n                result.append(item)\n    return result"
    },
    {
        "id":131,
        "response":"import typing\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_idx = 0\n        for i in range(1, curr_size):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                nums[:max_idx + 1] = reversed(nums[:max_idx + 1])\n            nums[:curr_size] = reversed(nums[:curr_size])\n    return nums"
    },
    {
        "id":132,
        "response":"import itertools\n\ndef count_samepair(list1, list2, list3):\n    return sum(1 for a, b, c in itertools.zip_longest(list1, list2, list3, fillvalue=None) if a == b == c)"
    },
    {
        "id":133,
        "response":"import typing\n\ndef find_lists(Input: tuple) -> int:\n    return sum(1 for item in Input if isinstance(item, list))"
    },
    {
        "id":134,
        "response":"import typing\n\ndef sum_Pairs(arr: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    arr.sort()\n    total = 0\n    for i, val in enumerate(arr):\n        total += val * (2 * i - n + 1)\n    return total if total >= 0 else -total  # ensure non\u2011negative result for safety\n\n# Example usage (can be removed in production)\n# assert sum_Pairs([1, 8, 9, 15, 16], 5) == 74"
    },
    {
        "id":135,
        "response":"def max_Abs_Diff(arr, n):\n    if n <= 1:\n        return 0\n    mn = mx = arr[0]\n    for i in range(1, n):\n        v = arr[i]\n        if v < mn:\n            mn = v\n        if v > mx:\n            mx = v\n    return mx - mn"
    },
    {
        "id":136,
        "response":"import typing\n\ndef ascii_value_string(str1: str) -> int:\n    if not str1:\n        return 0\n    return ord(str1[0])"
    },
    {
        "id":137,
        "response":"import typing\n\ndef max_path_sum(tri: typing.List[typing.List[int]], m: int, n: int) -> int:\n    rows = len(tri)\n    for i in range(rows - 2, -1, -1):\n        for j in range(i + 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]"
    },
    {
        "id":138,
        "response":"import typing\n\ndef sum_digits_single(x: int) -> int:\n    def digit_sum(n: int) -> int:\n        s = 0\n        while n:\n            s += n % 10\n            n \/\/= 10\n        return s\n\n    if x < 0:\n        raise ValueError(\"Input must be non\u2011negative\")\n    if x == 0:\n        return 0\n\n    max_sum = digit_sum(x)  # case where one part is 0\n    length = len(str(x))\n    for k in range(1, length + 1):\n        a = 10 ** k - 1\n        if a > x:\n            continue\n        b = x - a\n        current = digit_sum(a) + digit_sum(b)\n        if current > max_sum:\n            max_sum = current\n    return max_sum"
    },
    {
        "id":139,
        "response":"import typing\n\ndef longest_subseq_with_diff_one(arr: typing.List[int], n: int) -> int:\n    if not arr:\n        return 0\n    best: typing.Dict[int, int] = {}\n    max_len = 0\n    for x in arr:\n        prev_len = max(best.get(x - 1, 0), best.get(x + 1, 0))\n        cur_len = prev_len + 1\n        if cur_len > best.get(x, 0):\n            best[x] = cur_len\n        if cur_len > max_len:\n            max_len = cur_len\n    return max_len"
    },
    {
        "id":140,
        "response":"import math\n\ndef does_Contain_B(a, b, c):\n    if c == 0:\n        return a == b\n    return (a - b) % c == 0"
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p, q):\n    return math.gcd(p, q) == 1"
    },
    {
        "id":142,
        "response":"import typing\n\ndef merge(arr: typing.List[int]) -> typing.List[int]:\n    if len(arr) <= 1:\n        return arr[:]\n    mid = len(arr) \/\/ 2\n    left = merge(arr[:mid])\n    right = merge(arr[mid:])\n    i = j = 0\n    result: typing.List[int] = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    if i < len(left):\n        result.extend(left[i:])\n    if j < len(right):\n        result.extend(right[j:])\n    return result"
    },
    {
        "id":143,
        "response":"import typing\n\ndef parabola_vertex(a: float, b: float, c: float) -> typing.Tuple[float, float]:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must not be zero for a parabola.\")\n    x = -b \/ (2 * a)\n    y = a * x * x + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return [row[N] for row in nums if len(row) > N]"
    },
    {
        "id":145,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    mask = 0\n    bits = n.bit_length() + 1\n    for i in range(bits):\n        if i % 2 == 1:\n            mask |= 1 << i\n    return n ^ mask"
    },
    {
        "id":146,
        "response":"import typing\n\ndef tuple_int_str(tuple_str: tuple) -> tuple:\n    return tuple(tuple(int(item) for item in inner) for inner in tuple_str)"
    },
    {
        "id":147,
        "response":"import typing\n\ndef encode_list(list1: typing.List[typing.Any]) -> typing.List[typing.List[typing.Any]]:\n    if not list1:\n        return []\n    result: typing.List[typing.List[typing.Any]] = []\n    current = list1[0]\n    count = 1\n    for item in list1[1:]:\n        if item == current:\n            count += 1\n        else:\n            result.append([count, current])\n            current = item\n            count = 1\n    result.append([count, current])\n    return result"
    },
    {
        "id":148,
        "response":"import collections\n\ndef min_Ops(arr, n, k):\n    if not arr:\n        return 0\n    freq = collections.Counter(arr)\n    max_freq = max(freq.values())\n    return n - max_freq"
    },
    {
        "id":149,
        "response":"import re\n\ndef month_season(month: str, days: int) -> str:\n    month_lower = month.strip().lower()\n    winter = {'december', 'january', 'february'}\n    spring = {'march', 'april', 'may'}\n    summer = {'june', 'july', 'august'}\n    autumn = {'september', 'october', 'november'}\n    if month_lower in winter:\n        return 'winter'\n    if month_lower in spring:\n        return 'spring'\n    if month_lower in summer:\n        return 'summer'\n    if month_lower in autumn:\n        return 'autumn'\n    raise ValueError('Invalid month name')"
    },
    {
        "id":150,
        "response":"import math\nimport typing\n\ndef extended_gcd(a: int, b: int) -> typing.Tuple[int, int, int]:\n    if b == 0:\n        return a, 1, 0\n    g, x1, y1 = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a \/\/ b) * y1\n    return g, x, y\n\ndef solution(a: int, b: int, n: int):\n    if a == 0 and b == 0:\n        raise ValueError(\"No solution exists for a = b = 0\")\n    if a == 0:\n        if n % b != 0:\n            raise ValueError(\"No integer solution\")\n        y = n \/\/ b\n        x = 0\n        return ('x = ', x, ', y = ', y)\n    if b == 0:\n        if n % a != 0:\n            raise ValueError(\"No integer solution\")\n        x = n \/\/ a\n        y = 0\n        return ('x = ', x, ', y = ', y)\n    g, x0, y0 = extended_gcd(a, b)\n    if n % g != 0:\n        raise ValueError(\"No integer solution\")\n    mult = n \/\/ g\n    x = x0 * mult\n    y = y0 * mult\n    step_x = b \/\/ g\n    step_y = a \/\/ g\n    if step_x != 0:\n        t = math.ceil(-x \/ step_x)\n        x += step_x * t\n        y -= step_y * t\n        while y < 0:\n            t += 1\n            x += step_x\n            y -= step_y\n    return ('x = ', x, ', y = ', y)"
    },
    {
        "id":151,
        "response":"import typing\n\ndef remove_elements(list1: typing.List[int], list2: typing.List[int]) -> typing.List[int]:\n    remove_set = set(list2)\n    return [item for item in list1 if item not in remove_set]"
    },
    {
        "id":152,
        "response":"import sys\n\ndef sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n\nif __name__ == \"__main__\":\n    assert sum_series(6) == 12\n    assert sum_series(5) == 9\n    assert sum_series(1) == 1\n    assert sum_series(0) == 0\n    print(\"All tests passed.\")"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    if s < 3 or l <= 0:\n        return 0.0\n    return (s * l * l) \/ (4 * math.tan(math.pi \/ s))"
    },
    {
        "id":154,
        "response":"import math\n\ndef divSum(a, b):\n    def divisor_sum(n):\n        if n <= 0:\n            return 0\n        total = 0\n        limit = int(math.isqrt(n))\n        for i in range(1, limit + 1):\n            if n % i == 0:\n                total += i\n                j = n \/\/ i\n                if j != i:\n                    total += j\n        return total\n    return divisor_sum(a) == divisor_sum(b)"
    },
    {
        "id":155,
        "response":"import string\n\ndef count_char_position(str1):\n    count = 0\n    for idx, ch in enumerate(str1, start=1):\n        if ch.isalpha():\n            if (ord(ch.lower()) - ord('a') + 1) == idx:\n                count += 1\n    return count"
    },
    {
        "id":156,
        "response":"import math\n\ndef find_even_Pair(A, N):\n    even = 0\n    odd = 0\n    for num in A:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n    return even * (even - 1) \/\/ 2 + odd * (odd - 1) \/\/ 2"
    },
    {
        "id":157,
        "response":"import math\n\ndef next_Power_Of_2(n):\n    if n <= 1:\n        return 1\n    return 1 << (n - 1).bit_length()"
    },
    {
        "id":158,
        "response":"import typing\n\ndef frequency(a: typing.List[int], x: int) -> int:\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "id":159,
        "response":"import typing\n\ndef get_pell(n: int) -> int:\n    if n <= 0:\n        return 0\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b if n >= 1 else a"
    },
    {
        "id":160,
        "response":"import typing\n\ndef sum_range_list(list1: typing.List[int], m: int, n: int) -> int:\n    length = len(list1)\n    if length == 0:\n        return 0\n    start = max(m, 0)\n    end = min(n, length - 1)\n    if start > end:\n        return 0\n    total = 0\n    for i in range(start, end + 1):\n        total += list1[i]\n    return total"
    },
    {
        "id":161,
        "response":"def perimeter_pentagon(a):\n    return 5 * a"
    },
    {
        "id":162,
        "response":"def count_occurance(s):\n    return s.count(\"std\")"
    },
    {
        "id":163,
        "response":"import re\n\ndef remove_splchar(text):\n    return re.sub(r'[^A-Za-z0-9]', '', text)"
    },
    {
        "id":164,
        "response":"import collections\n\ndef group_keyvalue(l):\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result"
    },
    {
        "id":165,
        "response":"import typing\n\ndef is_valid_parenthese(str1: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for ch in str1:\n        if ch in mapping.values():\n            stack.append(ch)\n        elif ch in mapping:\n            if not stack or stack[-1] != mapping[ch]:\n                return False\n            stack.pop()\n        else:\n            continue\n    return not stack"
    },
    {
        "id":166,
        "response":"import math\n\ndef perimeter_triangle(a, b, c):\n    return a + b + c"
    },
    {
        "id":167,
        "response":"import math\n\ndef answer(L, R):\n    if 2 * L <= R:\n        return (L, 2 * L)\n    for a in range(L, R + 1):\n        for b in range(a + 1, R + 1):\n            l = a * b \/\/ math.gcd(a, b)\n            if L <= l <= R:\n                return (a, b)\n    return (-1, -1)"
    },
    {
        "id":168,
        "response":"import re\n\ndef string_literals(patterns, text):\n    for pat in patterns:\n        if pat in text:\n            return \"Matched!\"\n    return \"Not Matched!\""
    },
    {
        "id":169,
        "response":"import typing\n\ndef is_num_keith(x: int) -> bool:\n    if x < 10:\n        return False\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    seq = digits[:]\n    while True:\n        nxt = sum(seq[-n:])\n        if nxt == x:\n            return True\n        if nxt > x:\n            return False\n        seq.append(nxt)"
    },
    {
        "id":170,
        "response":"import math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371000.0\n    phi1 = math.radians(slat)\n    phi2 = math.radians(elat)\n    dphi = math.radians(elat - slat)\n    dlambda = math.radians(elon - slon)\n    a = math.sin(dphi \/ 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlambda \/ 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c"
    },
    {
        "id":171,
        "response":"import typing\n\ndef common_prefix_util(strings: typing.List[str], n: int) -> str:\n    if n == 0 or not strings:\n        return ''\n    if n != len(strings):\n        strings = strings[:n]\n    min_len = min(len(s) for s in strings)\n    if min_len == 0:\n        return ''\n    prefix_chars = []\n    for i in range(min_len):\n        current_char = strings[0][i]\n        if all(s[i] == current_char for s in strings):\n            prefix_chars.append(current_char)\n        else:\n            break\n    return ''.join(prefix_chars)"
    },
    {
        "id":172,
        "response":"import re\nfrom typing import List, Tuple\n\ndef find_character(string: str) -> Tuple[List[str], List[str], List[str], List[str]]:\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    digits = re.findall(r'\\d', string)\n    specials = re.findall(r'[^a-zA-Z0-9]', string)\n    return (uppercase, lowercase, specials, digits)"
    },
    {
        "id":173,
        "response":"import typing\n\ndef count_pairs(arr: typing.List[int], n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    count = 0\n    if k == 0:\n        for v in freq.values():\n            if v > 1:\n                count += v * (v - 1) \/\/ 2\n        return count\n    seen = set()\n    for num in freq:\n        if num + k in freq:\n            count += 1\n        if num - k in freq:\n            # avoid double counting when both num+k and num-k exist\n            # count only when num < num+k to ensure each unordered pair counted once\n            pass\n    return count"
    },
    {
        "id":174,
        "response":"import typing\n\ndef greater_specificnum(lst: typing.List[int], num: int) -> bool:\n    return all(item > num for item in lst)"
    },
    {
        "id":175,
        "response":"import typing\n\ndef parabola_focus(a: float, b: float, c: float) -> typing.Tuple[float, float]:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero for a parabola.\")\n    h = -b \/ (2 * a)\n    k = a * h * h + b * h + c\n    focus_y = k + 1 \/ (4 * a)\n    return (h, focus_y)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    if not patterns:\n        return 'Not Matched!'\n    escaped_patterns = [re.escape(p) for p in patterns]\n    regex = '|'.join(escaped_patterns)\n    return 'Matched!' if re.search(regex, text) else 'Not Matched!'"
    },
    {
        "id":177,
        "response":"import sys\n\ndef longest_common_subsequence(X: str, Y: str, m: int, n: int) -> int:\n    if m == 0 or n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        xi = X[i - 1]\n        row = dp[i]\n        prev_row = dp[i - 1]\n        for j in range(1, n + 1):\n            if xi == Y[j - 1]:\n                row[j] = prev_row[j - 1] + 1\n            else:\n                a = prev_row[j]\n                b = row[j - 1]\n                row[j] = a if a >= b else b\n    return dp[m][n]"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    if n <= 0:\n        return False\n    s = math.isqrt(n)\n    if s * s != n or s <= 1:\n        return False\n    limit = math.isqrt(s)\n    for i in range(2, limit + 1):\n        if s % i == 0:\n            return True\n    return False"
    },
    {
        "id":179,
        "response":"import typing\n\ndef first_Missing_Positive(arr: typing.List[int], n: int) -> int:\n    s = set(x for x in arr if x > 0)\n    missing = 1\n    while True:\n        if missing not in s:\n            return missing\n        missing += 1"
    },
    {
        "id":180,
        "response":"import math\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    dx = abs(x2 - x1) - 1\n    dy = abs(y2 - y1) - 1\n    if dx < 0 or dy < 0:\n        return 0\n    return dx * dy"
    },
    {
        "id":181,
        "response":"import re\n\ndef check_monthnumber(monthname):\n    month = monthname.strip().lower()\n    return month in {\"september\", \"april\", \"june\", \"november\"}"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(s: str) -> bool:\n    has_letter = any(ch.isalpha() for ch in s)\n    has_digit = any(ch.isdigit() for ch in s)\n    return has_letter and has_digit"
    },
    {
        "id":183,
        "response":"import typing\n\ndef remove_tuple(test_tup: tuple) -> tuple:\n    return tuple(sorted(set(test_tup)))"
    },
    {
        "id":184,
        "response":"import sys\n\ndef octal_To_Decimal(n):\n    if n == 0:\n        return 0\n    negative = n < 0\n    n = abs(n)\n    result = 0\n    power = 0\n    while n > 0:\n        digit = n % 10\n        if digit >= 8:\n            raise ValueError(\"Invalid octal digit\")\n        result += digit * (8 ** power)\n        power += 1\n        n \/\/= 10\n    return -result if negative else result"
    },
    {
        "id":185,
        "response":"import typing\n\ndef first(arr: typing.List[int], x: int, n: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "id":186,
        "response":"import typing\n\ndef remove_tuples(test_list: typing.List[typing.Any], K: int) -> typing.List[typing.Any]:\n    return [item for item in test_list if not (isinstance(item, tuple) and len(item) == K)]"
    },
    {
        "id":187,
        "response":"import typing\n\ndef find_exponentio(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(a ** b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\n\ndef largest_triangle(a, b):\n    return (3 * math.sqrt(3) \/ 4) * a * b"
    },
    {
        "id":189,
        "response":"import typing\n\ndef highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":190,
        "response":"import typing\n\ndef position_max(list1: typing.List[int]) -> typing.List[int]:\n    if not list1:\n        return []\n    max_val = max(list1)\n    return [i for i, v in enumerate(list1) if v == max_val]"
    },
    {
        "id":191,
        "response":"def chkList(lst):\n    return len(set(lst)) <= 1"
    },
    {
        "id":192,
        "response":"import re\nfrom typing import *\n\ndef remove_even(str1: str) -> str:\n    return str1[::2]"
    },
    {
        "id":193,
        "response":"import typing\n\ndef hamming_Distance(n1: int, n2: int) -> int:\n    return (n1 ^ n2).bit_count()"
    },
    {
        "id":194,
        "response":"def count(s, c):\n    if not c:\n        return 0\n    return s.count(c)"
    },
    {
        "id":195,
        "response":"import typing\n\ndef inversion_elements(test_tup: tuple) -> tuple:\n    return tuple(-(x + 1) for x in test_tup)"
    },
    {
        "id":196,
        "response":"import typing\n\ndef concatenate_elements(test_tup: tuple) -> tuple:\n    if len(test_tup) < 2:\n        return ()\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i + 1])\n    return tuple(result)"
    },
    {
        "id":197,
        "response":"import typing\n\ndef find_longest_repeating_subseq(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        ch_i = s[i - 1]\n        for j in range(1, n + 1):\n            if ch_i == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] if dp[i - 1][j] >= dp[i][j - 1] else dp[i][j - 1]\n    return dp[n][n]"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.fullmatch(r'\\d+\\.\\d{2}', num))"
    },
    {
        "id":199,
        "response":"None"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z0-9]+', string))"
    },
    {
        "id":201,
        "response":"import sys\n\ndef count_Num(n):\n    if n < 0:\n        n = n & ((1 << (n.bit_length() + 1)) - 1)\n    try:\n        return n.bit_count()\n    except AttributeError:\n        return bin(n).count('1')"
    },
    {
        "id":202,
        "response":"import typing\n\ndef fourth_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) * (3 * n * n + 3 * n - 1) \/\/ 30"
    },
    {
        "id":203,
        "response":"import typing\n\ndef concatenate_strings(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    return radian * 180.0 \/ math.pi"
    },
    {
        "id":205,
        "response":"import typing\n\ndef decode_list(alist: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result = []\n    for item in alist:\n        if isinstance(item, list) and len(item) == 2 and isinstance(item[0], int):\n            count, value = item\n            if count > 0:\n                result.extend([value] * count)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":206,
        "response":"import itertools\n\ndef check_subset_list(list1, list2):\n    flat = list(itertools.chain.from_iterable(list2))\n    set_flat = set(flat)\n    return all(item in set_flat for item in list1)"
    },
    {
        "id":207,
        "response":"import typing\n\ndef first_Repeated_Char(s: str) -> str:\n    seen = set()\n    for ch in s:\n        if ch in seen:\n            return ch\n        seen.add(ch)\n    return \"\""
    },
    {
        "id":208,
        "response":"import typing\n\ndef min_Operations(A: int, B: int) -> int:\n    if A >= B:\n        return A - B\n    ops = 0\n    while B > A:\n        if B % 2 == 0:\n            B \/\/= 2\n        else:\n            B += 1\n        ops += 1\n    ops += A - B\n    return ops"
    },
    {
        "id":209,
        "response":"import heapq\nfrom typing import Tuple\n\ndef extract_min_max(test_tup: Tuple[int, ...], K: int) -> Tuple[int, ...]:\n    if K <= 0:\n        return ()\n    n = len(test_tup)\n    if K * 2 >= n:\n        sorted_all = sorted(test_tup)\n        return tuple(sorted_all)\n    smallest = heapq.nsmallest(K, test_tup)\n    largest = heapq.nlargest(K, test_tup)\n    smallest.sort()\n    largest.sort()\n    return tuple(smallest + largest)"
    },
    {
        "id":210,
        "response":"import re\n\ndef replace_max_specialchar(text: str, n: int) -> str:\n    if n <= 0:\n        return text\n    result = []\n    replaced = 0\n    for ch in text:\n        if replaced < n and ch in {' ', ',', '.'}:\n            result.append(':')\n            replaced += 1\n        else:\n            result.append(ch)\n    return ''.join(result)"
    },
    {
        "id":211,
        "response":"def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
    },
    {
        "id":212,
        "response":"import typing\n\ndef check_type(test_tuple: tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for item in test_tuple[1:]:\n        if type(item) is not first_type:\n            return False\n    return True"
    },
    {
        "id":213,
        "response":"import bisect\n\ndef is_majority(arr, n, x):\n    if n == 0:\n        return False\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    count = right - left\n    return count > n \/\/ 2"
    },
    {
        "id":214,
        "response":"def count_Set_Bits(n):\n    if n < 0:\n        n = n & (2**(n.bit_length() + 1) - 1)\n    return bin(n).count('1')"
    },
    {
        "id":215,
        "response":"import typing\n\ndef find_Min(arr: typing.List[int], low: int, high: int) -> int:\n    if not arr:\n        raise ValueError(\"Array must not be empty\")\n    if low < 0 or high >= len(arr) or low > high:\n        raise ValueError(\"Invalid low and high indices\")\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":216,
        "response":"import typing\n\ndef odd_values_string(s: str) -> str:\n    return s[::2]"
    },
    {
        "id":217,
        "response":"def min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"import typing\n\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    if l > r or l < 1:\n        return False\n    length = r - l + 1\n    mask = (1 << length) - 1\n    shifted = n >> (l - 1)\n    return (shifted & mask) == 0"
    },
    {
        "id":219,
        "response":"import typing\n\ndef re_arrange_array(arr: typing.List[int], n: int) -> typing.List[int]:\n    length = min(n, len(arr))\n    i = -1\n    for j in range(length):\n        if arr[j] < 0:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr"
    },
    {
        "id":220,
        "response":"import re\n\ndef replace_blank(str1, char):\n    return str1.replace(' ', char)"
    },
    {
        "id":221,
        "response":"import copy\nfrom typing import List\n\ndef max_sum(tri: List[List[int]], n: int) -> int:\n    if n == 0 or not tri:\n        return 0\n    dp = copy.deepcopy(tri)\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n    return dp[0][0]"
    },
    {
        "id":222,
        "response":"import heapq\n\ndef larg_nnum(list1, n):\n    if n <= 0:\n        return []\n    if n >= len(list1):\n        return sorted(list1, reverse=True)\n    return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsuface_cylinder(r, h):\n    pi = 3.1415\n    return 2 * pi * r * h"
    },
    {
        "id":224,
        "response":"def volume_cube(l):\n    return l * l * l"
    },
    {
        "id":225,
        "response":"import typing\n\ndef even_bit_set_number(n: int) -> int:\n    mask = 0\n    i = 1\n    limit = n.bit_length() + 1\n    while i < limit:\n        mask |= 1 << i\n        i += 2\n    return n | mask"
    },
    {
        "id":226,
        "response":"import math\n\ndef No_of_Triangle(N: int, K: int) -> int:\n    if N <= 0 or K <= 0:\n        return 0\n    return N * K - 1"
    },
    {
        "id":227,
        "response":"import collections\n\ndef check_occurences(test_list):\n    counter = collections.defaultdict(int)\n    for a, b in test_list:\n        key = (a, b) if a <= b else (b, a)\n        counter[key] += 1\n    return dict(counter)"
    },
    {
        "id":228,
        "response":"import typing\n\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) \/\/ 2"
    },
    {
        "id":229,
        "response":"import sys\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    if n <= 0 or m <= 0:\n        return 0\n    if n == 1:\n        return m\n    dp_prev = [0] * (m + 1)\n    for v in range(1, m + 1):\n        dp_prev[v] = 1\n    for _ in range(2, n + 1):\n        prefix = [0] * (m + 1)\n        running = 0\n        for v in range(1, m + 1):\n            running += dp_prev[v]\n            prefix[v] = running\n        dp_curr = [0] * (m + 1)\n        for v in range(1, m + 1):\n            limit = v \/\/ 2\n            if limit >= 1:\n                dp_curr[v] = prefix[limit]\n        dp_prev = dp_curr\n    return sum(dp_prev)"
    },
    {
        "id":230,
        "response":"import typing\n\ndef replace_list(list1: typing.List, list2: typing.List) -> typing.List:\n    if not list1:\n        return list2.copy()\n    return list1[:-1] + list2"
    },
    {
        "id":231,
        "response":"import typing\n\ndef array_3d(m: int, n: int, o: int) -> typing.List[typing.List[typing.List[str]]]:\n    return [[['*' for _ in range(m)] for _ in range(n)] for _ in range(o)]"
    },
    {
        "id":232,
        "response":"def count_charac(str1):\n    return len(str1)"
    },
    {
        "id":233,
        "response":"import itertools\n\ndef sort_on_occurence(lst):\n    groups = {}\n    order = []\n    for key, val in lst:\n        if key not in groups:\n            groups[key] = []\n            order.append(key)\n        groups[key].append(val)\n    result = []\n    for key in order:\n        values = groups[key]\n        result.append(tuple([key] + values + [len(values)]))\n    result.sort(key=lambda x: -x[-1])\n    return result"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    if N < 0:\n        return 0\n    root = math.isqrt(N)\n    if root * root <= N:\n        root += 1\n    return root * root"
    },
    {
        "id":235,
        "response":"import sys\n\ndef max_sum(arr, n):\n    if not arr:\n        return 0\n    inc = arr[:]\n    for i in range(1, n):\n        max_val = 0\n        for j in range(i):\n            if arr[j] < arr[i] and inc[j] > max_val:\n                max_val = inc[j]\n        inc[i] = arr[i] + max_val\n    dec = arr[:]\n    for i in range(n - 2, -1, -1):\n        max_val = 0\n        for j in range(i + 1, n):\n            if arr[j] < arr[i] and dec[j] > max_val:\n                max_val = dec[j]\n        dec[i] = arr[i] + max_val\n    max_sum_val = 0\n    for i in range(n):\n        current = inc[i] + dec[i] - arr[i]\n        if current > max_sum_val:\n            max_sum_val = current\n    return max_sum_val"
    },
    {
        "id":236,
        "response":"import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    if number == 0:\n        return 0.0\n    guess = number \/ 2.0 if number >= 2 else 1.0\n    tolerance = 1e-12\n    while True:\n        next_guess = (guess + number \/ guess) \/ 2.0\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        guess = next_guess"
    },
    {
        "id":237,
        "response":"import typing\n\ndef lps(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2 if i + 1 <= j - 1 else 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"
    },
    {
        "id":238,
        "response":"def harmonic_sum(n):\n    if n <= 0:\n        return 0.0\n    total = 0.0\n    for i in range(1, n + 1):\n        total += 1.0 \/ i\n    return total"
    },
    {
        "id":239,
        "response":"import typing\n\ndef intersection_array(array_nums1: typing.List[int], array_nums2: typing.List[int]) -> typing.List[int]:\n    set2 = set(array_nums2)\n    return list(filter(lambda x: x in set2, array_nums1))"
    },
    {
        "id":240,
        "response":"def count_X(tup, x):\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"import typing\n\ndef insert_element(lst: typing.List[typing.Any], element: typing.Any) -> typing.List[typing.Any]:\n    result: typing.List[typing.Any] = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "id":242,
        "response":"import typing\n\ndef convert(numbers: typing.Any) -> typing.Union[tuple[float, float], list[tuple[float, float]]]:\n    def _to_tuple(val):\n        if isinstance(val, complex):\n            return (float(val.real), float(val.imag))\n        elif isinstance(val, (int, float)):\n            return (float(val), 0.0)\n        else:\n            raise TypeError(\"Unsupported type\")\n    if isinstance(numbers, (list, tuple, set)):\n        result = []\n        for item in numbers:\n            result.append(_to_tuple(item))\n        return result\n    else:\n        return _to_tuple(numbers)"
    },
    {
        "id":243,
        "response":"def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text):\n    result = []\n    for word in re.findall(r\"\\b\\w+\\b\", text):\n        lower = word.lower()\n        idx_a = lower.find('a')\n        idx_e = lower.find('e')\n        idx = -1\n        if idx_a != -1 and idx_e != -1:\n            idx = idx_a if idx_a < idx_e else idx_e\n        elif idx_a != -1:\n            idx = idx_a\n        elif idx_e != -1:\n            idx = idx_e\n        if idx != -1:\n            result.append(word[idx:])\n    return result"
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    if n < 0:\n        return []\n    return list(itertools.combinations_with_replacement(l, n))"
    },
    {
        "id":246,
        "response":"import math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = bytearray(b'\\x01') * n\n    sieve[0:2] = b'\\x00\\x00'\n    limit = int(math.isqrt(n - 1))\n    for p in range(2, limit + 1):\n        if sieve[p]:\n            start = p * p\n            sieve[start:n:p] = b'\\x00' * ((n - 1 - start) \/\/ p + 1)\n    return sum(sieve)"
    },
    {
        "id":247,
        "response":"def swap_numbers(a, b):\n    return b, a"
    },
    {
        "id":248,
        "response":"import typing\n\ndef count_odd(array_nums: typing.List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))"
    },
    {
        "id":249,
        "response":"import typing\n\ndef maximize_elements(test_tup1: typing.Tuple[typing.Tuple[int, ...], ...],\n                      test_tup2: typing.Tuple[typing.Tuple[int, ...], ...]) -> typing.Tuple[typing.Tuple[int, ...], ...]:\n    result = []\n    for inner1, inner2 in zip(test_tup1, test_tup2):\n        max_inner = tuple(max(a, b) for a, b in zip(inner1, inner2))\n        result.append(max_inner)\n    return tuple(result)"
    },
    {
        "id":250,
        "response":"import typing\n\ndef newman_prime(n: int) -> int:\n    if n <= 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b"
    },
    {
        "id":251,
        "response":"import typing\n\ndef division_elements(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in tuple\")\n        result.append(a \/\/ b)\n    return tuple(result)"
    },
    {
        "id":252,
        "response":"import typing\n\ndef split_two_parts(list1: typing.List[typing.Any], L: int) -> typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]:\n    if L < 0:\n        L = 0\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "id":253,
        "response":"import typing\n\ndef merge_dict(d1: dict, d2: dict) -> dict:\n    merged = {}\n    merged.update(d2)\n    merged.update(d1)\n    return merged"
    },
    {
        "id":254,
        "response":"import math\n\ndef dog_age(h_age):\n    if h_age <= 0:\n        return 0\n    if h_age <= 2:\n        result = h_age * 10.5\n    else:\n        result = 21 + (h_age - 2) * 4\n    return int(result) if isinstance(result, float) and result.is_integer() else result"
    },
    {
        "id":255,
        "response":"import typing\n\ndef list_split(S: typing.List[typing.Any], step: int) -> typing.List[typing.List[typing.Any]]:\n    if step <= 0:\n        raise ValueError(\"step must be a positive integer\")\n    result = [[] for _ in range(step)]\n    for idx, item in enumerate(S):\n        result[idx % step].append(item)\n    return result"
    },
    {
        "id":256,
        "response":"import math\n\ndef lateralsurface_cube(l):\n    return 4 * (l ** 2)"
    },
    {
        "id":257,
        "response":"import typing\n\ndef square_Sum(n: int) -> int:\n    total = 0\n    for i in range(1, n + 1):\n        odd = 2 * i - 1\n        total += odd * odd\n    return total"
    },
    {
        "id":258,
        "response":"import typing\n\ndef find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1"
    },
    {
        "id":259,
        "response":"import sys\n\ndef ascii_value(k):\n    return ord(k)"
    },
    {
        "id":260,
        "response":"import typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    total = 0\n    limit = min(n, len(arr))\n    for i in range(0, limit, 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "id":261,
        "response":"def even_Power_Sum(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n + 1):\n        total += (2 * i) ** 5\n    return total"
    },
    {
        "id":262,
        "response":"import typing\n\ndef rear_extract(test_list: typing.List[typing.Tuple]) -> typing.List:\n    return [t[-1] for t in test_list]"
    },
    {
        "id":263,
        "response":"def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"import math\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    if n == 0:\n        return 1\n    return 1 << (n - 1)"
    },
    {
        "id":265,
        "response":"import sys\n\ndef get_Position(a, n, m):\n    if not a:\n        return None\n    indexed = [(val, idx) for idx, val in enumerate(a)]\n    idx = 0\n    last_removed_index = None\n    while indexed:\n        idx = (idx + m - 1) % len(indexed)\n        _, last_removed_index = indexed.pop(idx)\n    return last_removed_index"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    pi = 3.1415\n    return pi * r * r * h"
    },
    {
        "id":267,
        "response":"import typing\n\ndef dict_filter(d: typing.Dict[typing.Any, int], n: int) -> typing.Dict[typing.Any, int]:\n    return {k: v for k, v in d.items() if v > n}"
    },
    {
        "id":268,
        "response":"import typing\n\ndef count_first_elements(test_tup: tuple) -> int:\n    for idx, item in enumerate(test_tup):\n        if isinstance(item, tuple):\n            return idx\n    return len(test_tup)"
    },
    {
        "id":269,
        "response":"import typing\n\ndef is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)"
    },
    {
        "id":270,
        "response":"import typing\n\ndef sequential_search(dlist: typing.List[typing.Any], item: typing.Any) -> typing.Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1"
    },
    {
        "id":271,
        "response":"import typing\n\ndef all_unique(test_list: typing.List[typing.Any]) -> bool:\n    try:\n        return len(test_list) == len(set(test_list))\n    except TypeError:\n        seen = []\n        for item in test_list:\n            if item in seen:\n                return False\n            seen.append(item)\n        return True"
    },
    {
        "id":272,
        "response":"from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda a, b: a - b, nums1, nums2))"
    },
    {
        "id":273,
        "response":"import re\nfrom collections import Counter\n\ndef validate(n):\n    s = str(abs(n))\n    if not re.fullmatch(r'\\d+', s):\n        return False\n    cnt = Counter(s)\n    for d, c in cnt.items():\n        if int(d) < c:\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"import typing\n\ndef check_element(lst: typing.List[str], element: str) -> bool:\n    return all(item == element for item in lst)"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    match = re.search(r'a(b{2,3})', text)\n    return match.group(0) if match else 'Not matched!'"
    },
    {
        "id":276,
        "response":"import itertools\nfrom typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    if not a or k <= 0:\n        return 0\n\n    total = sum(a)\n\n    # Kadane on single array\n    max_ending = max_sofar = a[0]\n    for x in a[1:]:\n        max_ending = max(x, max_ending + x)\n        max_sofar = max(max_sofar, max_ending)\n\n    # Kadane on two concatenated arrays\n    double = a + a\n    max_ending = max_sofar_double = double[0]\n    for x in double[1:]:\n        max_ending = max(x, max_ending + x)\n        max_sofar_double = max(max_sofar_double, max_ending)\n\n    if k == 1:\n        return max_sofar\n\n    # Max prefix sum\n    prefix = cur = a[0]\n    max_prefix = cur\n    for x in a[1:]:\n        cur += x\n        max_prefix = max(max_prefix, cur)\n\n    # Max suffix sum\n    suffix = cur = a[-1]\n    max_suffix = cur\n    for x in reversed(a[:-1]):\n        cur += x\n        max_suffix = max(max_suffix, cur)\n\n    if total > 0:\n        return max(max_sofar_double, max_prefix + max_suffix + (k - 2) * total)\n    else:\n        return max_sofar_double"
    },
    {
        "id":277,
        "response":"import math\n\ndef square_Sum(n):\n    if n <= 0:\n        return 0\n    return 4 * n * (n + 1) * (2 * n + 1) \/\/ 6"
    },
    {
        "id":278,
        "response":"import typing\n\ndef modular_inverse(arr: typing.List[int], N: int, P: int) -> int:\n    count = 0\n    limit = min(N, len(arr))\n    for i in range(limit):\n        a = arr[i] % P\n        if (a * a) % P == 1:\n            count += 1\n    return count"
    },
    {
        "id":279,
        "response":"import math\n\ndef odd_Days(N: int) -> int:\n    leap_years = N \/\/ 4 - N \/\/ 100 + N \/\/ 400\n    total_days = N * 365 + leap_years\n    return total_days % 7"
    },
    {
        "id":280,
        "response":"import typing\n\ndef max_length(list_of_lists: typing.List[typing.List[typing.Any]]) -> typing.Tuple[int, typing.List[typing.Any]]:\n    if not list_of_lists:\n        return (0, [])\n    max_len = -1\n    max_sublist = []\n    for sublist in list_of_lists:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return (max_len, max_sublist)"
    },
    {
        "id":281,
        "response":"import typing\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n <= 0 or k <= 0:\n        return 0\n    if n == 1:\n        return k\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        new_same = diff\n        new_diff = (same + diff) * (k - 1)\n        same, diff = new_same, new_diff\n    return same + diff"
    },
    {
        "id":282,
        "response":"def find(n, m):\n    if m == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return n \/\/ m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w * w + h * h)"
    },
    {
        "id":284,
        "response":"import numbers\n\ndef max_val(listval):\n    max_num = None\n    for item in listval:\n        if isinstance(item, numbers.Number) and not isinstance(item, bool):\n            if max_num is None or item > max_num:\n                max_num = item\n    return max_num"
    },
    {
        "id":285,
        "response":"import math\n\ndef sum_div(number):\n    if number <= 1:\n        return 0\n    total = 1\n    limit = int(math.isqrt(number))\n    for i in range(2, limit + 1):\n        if number % i == 0:\n            total += i\n            other = number \/\/ i\n            if other != i:\n                total += other\n    return total"
    },
    {
        "id":286,
        "response":"import typing\n\ndef get_Inv_Count(arr: typing.List[int], n: int) -> int:\n    if not arr or n <= 1:\n        return 0\n    n = min(n, len(arr))\n    temp = [0] * n\n\n    def merge_sort(left: int, right: int) -> int:\n        if left >= right:\n            return 0\n        mid = (left + right) \/\/ 2\n        inv_count = merge_sort(left, mid)\n        inv_count += merge_sort(mid + 1, right)\n\n        i, j, k = left, mid + 1, left\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n\n        for idx in range(left, right + 1):\n            arr[idx] = temp[idx]\n        return inv_count\n\n    return merge_sort(0, n - 1)"
    },
    {
        "id":287,
        "response":"import typing\n\ndef flatten_list(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result: typing.List[typing.Any] = []\n    stack: typing.List[typing.Any] = [list1]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, list):\n            for item in reversed(current):\n                stack.append(item)\n        else:\n            result.append(current)\n    return result"
    },
    {
        "id":288,
        "response":"import typing\n\ndef intersection_nested_lists(l1: typing.List[int], l2: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    s = set(l1)\n    result = []\n    for sub in l2:\n        intersected = [item for item in sub if item in s]\n        result.append(intersected)\n    return result"
    },
    {
        "id":289,
        "response":"import typing\n\ndef max_aggregate(stdata: typing.List[typing.Tuple[str, int]]) -> typing.Optional[typing.Tuple[str, int]]:\n    if not stdata:\n        return None\n    totals = {}\n    for name, value in stdata:\n        totals[name] = totals.get(name, 0) + value\n    max_name, max_sum = max(totals.items(), key=lambda item: item[1])\n    return (max_name, max_sum)"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    return math.comb(2 * n, n)"
    },
    {
        "id":291,
        "response":"import typing\n\ndef dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    stack: typing.List[typing.Tuple[dict, int]] = [(d, 1)]\n    while stack:\n        current, depth = stack.pop()\n        max_depth = max(max_depth, depth)\n        for value in current.values():\n            if isinstance(value, dict):\n                stack.append((value, depth + 1))\n    return max_depth"
    },
    {
        "id":292,
        "response":"import typing\n\ndef set_Bit_Number(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":293,
        "response":"import itertools\n\ndef solve(a, n):\n    if len(a) != n:\n        return False\n    rev = list(range(n - 1, -1, -1))\n    doubled = rev + rev\n    for i in range(n):\n        if doubled[i:i + n] == a:\n            return True\n    return False"
    },
    {
        "id":294,
        "response":"import typing\n\ndef find_Element"
    },
    {
        "id":295,
        "response":"import re\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for phrase in words:\n        for word in re.split(r'\\s+', phrase.strip()):\n            if word and word[0].lower() == 'p':\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"
    },
    {
        "id":296,
        "response":"None"
    },
    {
        "id":297,
        "response":"import typing\n\ndef colon_tuplex(tuplex: tuple, m: int, n) -> tuple:\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"First argument must be a tuple\")\n    if m < 0 or m >= len(tuplex):\n        return tuplex\n    lst = list(tuplex)\n    lst[m] = [n]\n    return tuple(lst)"
    },
    {
        "id":298,
        "response":"import itertools\n\ndef large_product(nums1, nums2, N):\n    if N <= 0 or not nums1 or not nums2:\n        return []\n    products = [a * b for a, b in itertools.product(nums1, nums2)]\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "id":299,
        "response":"def maximum(a, b):\n    return a if a > b else b"
    },
    {
        "id":300,
        "response":"import typing\n\ndef string_to_tuple(str1: str) -> tuple:\n    return tuple(ch for ch in str1 if not ch.isspace())"
    },
    {
        "id":301,
        "response":"import typing\n\ndef set_left_most_unset_bit(n: int) -> int:\n    if n == 0:\n        return 1\n    bit_len = n.bit_length()\n    for i in range(bit_len - 1, -1, -1):\n        if not (n >> i) & 1:\n            return n | (1 << i)\n    return n | (1 << bit_len)"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    return (1.0 \/ 3.0) * math.pi * r * r * h"
    },
    {
        "id":303,
        "response":"None"
    },
    {
        "id":304,
        "response":"import typing\n\ndef max_sum_rectangular_grid(grid: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0 or not grid or len(grid) < 2:\n        return 0\n    top = grid[0]\n    bottom = grid[1]\n    dp_none = 0\n    dp_top = top[0]\n    dp_bottom = bottom[0]\n    for i in range(1, n):\n        val_top = top[i]\n        val_bottom = bottom[i]\n        new_none = max(dp_none, dp_top, dp_bottom)\n        new_top = val_top + max(dp_none, dp_bottom)\n        new_bottom = val_bottom + max(dp_none, dp_top)\n        dp_none, dp_top, dp_bottom = new_none, new_top, new_bottom\n    return max(dp_none, dp_top, dp_bottom)"
    },
    {
        "id":305,
        "response":"import typing\n\ndef find_Max_Len_Even(s: str) -> str:\n    max_len = -1\n    result = \"\"\n    for word in s.split():\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            result = word\n    return result"
    },
    {
        "id":306,
        "response":"import typing\n\ndef find_last_occurrence(A: typing.List[int], x: int) -> int:\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "id":307,
        "response":"import typing\n\ndef modified_encode(alist: typing.List[int]) -> typing.List[typing.Union[int, typing.List[int]]]:\n    if not alist:\n        return []\n    result = []\n    count = 1\n    prev = alist[0]\n    for item in alist[1:]:\n        if item == prev:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, prev])\n            else:\n                result.append(prev)\n            prev = item\n            count = 1\n    if count > 1:\n        result.append([count, prev])\n    else:\n        result.append(prev)\n    return result"
    },
    {
        "id":308,
        "response":"import typing\n\ndef max_volume(s: int) -> int:\n    if s < 3:\n        return 0\n    base = s \/\/ 3\n    rem = s % 3\n    parts = [base, base, base]\n    for i in range(rem):\n        parts[i] += 1\n    return parts[0] * parts[1] * parts[2]"
    },
    {
        "id":309,
        "response":"import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)"
    },
    {
        "id":310,
        "response":"import typing\n\ndef sum_difference(n: int) -> int:\n    sum_n = n * (n + 1) \/\/ 2\n    sum_sq = n * (n + 1) * (2 * n + 1) \/\/ 6\n    return sum_n * sum_n - sum_sq"
    },
    {
        "id":311,
        "response":"import typing\n\ndef find_demlo(s: str) -> str:\n    if not s:\n        return \"\"\n    try:\n        num = int(s)\n    except ValueError:\n        return \"\"\n    return str(num * num)"
    },
    {
        "id":312,
        "response":"import typing\n\ndef position_min(list1: typing.List[int]) -> typing.List[int]:\n    if not list1:\n        return []\n    min_val = min(list1)\n    return [i for i, v in enumerate(list1) if v == min_val]"
    },
    {
        "id":313,
        "response":"import typing\n\ndef right_rotate(arr: typing.List[int], n: int) -> typing.List[int]:\n    if n == 0:\n        return []\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    result = []\n    start_negative = arr[0] < 0\n    i = j = 0\n    while i < len(negatives) and j < len(positives):\n        if start_negative:\n            result.append(negatives[i])\n            i += 1\n            result.append(positives[j])\n            j += 1\n        else:\n            result.append(positives[j])\n            j += 1\n            result.append(negatives[i])\n            i += 1\n    result.extend(negatives[i:])\n    result.extend(positives[j:])\n    return result"
    },
    {
        "id":314,
        "response":"import typing\n\ndef sum_of_alternates(test_tuple: tuple) -> tuple:\n    sum_odd = sum(test_tuple[1::2])\n    sum_even = sum(test_tuple[0::2])\n    return (sum_odd, sum_even)"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n):\n    if n <= 0:\n        return 0\n    squares = [i * i for i in range(1, int(math.isqrt(n)) + 1)]\n    dp = [0] + [float('inf')] * n\n    for i in range(1, n + 1):\n        for sq in squares:\n            if sq > i:\n                break\n            if dp[i - sq] + 1 < dp[i]:\n                dp[i] = dp[i - sq] + 1\n    return dp[n]"
    },
    {
        "id":316,
        "response":"import collections\n\ndef most_occurrences(test_list):\n    if not test_list:\n        return ''\n    counter = collections.Counter()\n    for s in test_list:\n        counter.update(s.split())\n    if not counter:\n        return ''\n    max_count = max(counter.values())\n    for word in test_list:\n        for w in word.split():\n            if counter[w] == max_count:\n                return w\n    return ''"
    },
    {
        "id":317,
        "response":"import math\n\ndef check_isosceles(x, y, z):\n    sides = sorted([x, y, z])\n    a, b, c = sides\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c:\n        return False\n    return a * a + b * b == c * c"
    },
    {
        "id":318,
        "response":"import typing\n\ndef rotate_left(list1: typing.List[typing.Any], m: int, n: typing.Any) -> typing.List[typing.Any]:\n    if not list1:\n        return [n]\n    length = len(list1)\n    m = m % length\n    rotated = list1[m:] + list1[:m]\n    rotated.append(n)\n    return rotated"
    },
    {
        "id":319,
        "response":"def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "id":320,
        "response":"import re\n\ndef find_char(text):\n    return re.findall(r'\\b\\w{3,5}\\b', text)"
    },
    {
        "id":321,
        "response":"import sys\n\ndef count_unset_bits(n: int) -> int:\n    if n == 0:\n        return 1\n    total_bits = n.bit_length()\n    set_bits = bin(n).count('1')\n    return total_bits - set_bits\n\n# Sample test\nassert count_unset_bits(2) == 1"
    },
    {
        "id":322,
        "response":"import collections\n\ndef char_frequency(str1):\n    return dict(collections.Counter(str1))"
    },
    {
        "id":323,
        "response":"import typing\n\ndef Sort(sub_li: typing.List[typing.List[typing.Any]]) -> typing.List[typing.List[typing.Any]]:\n    return sorted(sub_li, key=lambda x: x[1])"
    },
    {
        "id":324,
        "response":"import typing\n\ndef check_Validity(a: float, b: float, c: float) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a + b > c and a + c > b and b + c > a"
    },
    {
        "id":325,
        "response":"import math\n\ndef ap_sum(a, n, d):\n    if n <= 0:\n        return 0\n    return n * (2 * a + (n - 1) * d) \/\/ 2 if isinstance(a, int) and isinstance(d, int) and isinstance(n, int) else n * (2 * a + (n - 1) * d) \/ 2"
    },
    {
        "id":326,
        "response":"import re\ndef check_monthnum(monthname1):\n    return monthname1.strip().lower() == \"february\""
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text: str) -> str:\n    pattern = r'\\b\\w+[.,!?:;]?$'\n    return \"Found a match!\" if re.search(pattern, text) else \"No match!\""
    },
    {
        "id":328,
        "response":"import collections\n\ndef check_Equality(s):\n    freq = collections.Counter(s)\n    total = 0\n    for c in freq.values():\n        total += c * (c + 1) \/\/ 2\n    return total"
    },
    {
        "id":329,
        "response":"import math\n\ndef find_Divisor(x, y):\n    return math.gcd(abs(x), abs(y))"
    },
    {
        "id":330,
        "response":"import typing\n\ndef sum_three_smallest_nums(lst: typing.List[int]) -> int:\n    positives = [x for x in lst if x > 0]\n    positives.sort()\n    return sum(positives[:3])"
    },
    {
        "id":331,
        "response":"import typing\n\ndef set_to_tuple(s: typing.Set[int]) -> tuple:\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"import heapq\n\ndef __init__(lists):\n    if not lists:\n        return ()\n    k = len(lists)\n    heap = []\n    current_max = float('-inf')\n    for i, lst in enumerate(lists):\n        if not lst:\n            return ()\n        val = lst[0]\n        heap.append((val, i, 0))\n        if val > current_max:\n            current_max = val\n    heapq.heapify(heap)\n    best_range = (float('-inf'), float('inf'))\n    while True:\n        min_val, list_idx, elem_idx = heapq.heappop(heap)\n        if current_max - min_val < best_range[1] - best_range[0]:\n            best_range = (min_val, current_max)\n        if elem_idx + 1 == len(lists[list_idx]):\n            break\n        next_val = lists[list_idx][elem_idx + 1]\n        heapq.heappush(heap, (next_val, list_idx, elem_idx + 1))\n        if next_val > current_max:\n            current_max = next_val\n    return best_range"
    },
    {
        "id":333,
        "response":"import re\n\ndef dig_let(s):\n    letters = sum(1 for ch in s if ch.isalpha())\n    digits = sum(1 for ch in s if ch.isdigit())\n    return (letters, digits)"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n, m):\n    if n > m:\n        n, m = m, n\n    start = math.isqrt(n)\n    if start * start < n:\n        start += 1\n    end = math.isqrt(m)\n    count = end - start + 1\n    return count if count > 0 else 0"
    },
    {
        "id":335,
        "response":"import typing\n\ndef diff_consecutivenums(nums: typing.List[int]) -> typing.List[int]:\n    if len(nums) < 2:\n        return []\n    return [nums[i + 1] - nums[i] for i in range(len(nums) - 1)]"
    },
    {
        "id":336,
        "response":"import sys\n\ndef zigzag(n, k):\n    return n + k - 2\n\n# Example usage (can be removed in production)\nif __name__ == \"__main__\":\n    assert zigzag(4, 3) == 5"
    },
    {
        "id":337,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = m if m < n else n\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n, r=None):\n    if n % 2:\n        return 0\n    k = n \/\/ 2\n    return math.comb(2 * k, k) \/\/ (k + 1)"
    },
    {
        "id":339,
        "response":"import re\n\ndef check(string):\n    if string and re.fullmatch(r'[01]+', string):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "id":340,
        "response":"import collections\n\ndef minimum_Length(s: str) -> int:\n    if not s:\n        return 0\n    freq = collections.Counter(s)\n    max_freq = max(freq.values())\n    return len(s) - max_freq"
    },
    {
        "id":341,
        "response":"import collections\n\ndef first_Element(arr, n, k):\n    if k <= 0 or n == 0:\n        return -1\n    freq = collections.Counter(arr)\n    for num in arr:\n        if freq[num] == k:\n            return num\n    return -1"
    },
    {
        "id":342,
        "response":"import typing\n\ndef unique_Characters(s: str) -> bool:\n    return len(set(s)) == len(s)"
    },
    {
        "id":343,
        "response":"import typing\n\ndef remove_column(list1: typing.List[typing.List], n: int) -> typing.List[typing.List]:\n    for row in list1:\n        if -len(row) <= n < len(row):\n            del row[n]\n    return list1"
    },
    {
        "id":344,
        "response":"def tn_ap(a, n, d):\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"None"
    },
    {
        "id":346,
        "response":"import typing\n\ndef find_angle(a: typing.Union[int, float], b: typing.Union[int, float]) -> typing.Union[int, float]:\n    return 180 - (a + b)"
    },
    {
        "id":347,
        "response":"import typing\n\ndef find_max(test_list: typing.List[typing.Tuple[typing.Any, ...]]) -> typing.Any:\n    if not test_list:\n        return None\n    max_val = None\n    for tup in test_list:\n        for item in tup:\n            if max_val is None or item > max_val:\n                max_val = item\n    return max_val"
    },
    {
        "id":348,
        "response":"import typing\n\ndef moddiv_list(nums1: typing.List[int], nums2: typing.List[int]) -> typing.List[typing.Optional[int]]:\n    return list(map(lambda pair: pair[0] % pair[1] if pair[1] != 0 else None, zip(nums1, nums2)))"
    },
    {
        "id":349,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    left = 9 * a * c\n    right = 2 * b * b\n    if abs(left - right) > 1e-9:\n        return \"No\"\n    discriminant = b * b - 4 * a * c\n    if discriminant < -1e-9:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "id":350,
        "response":"import math\n\ndef get_carol(n):\n    return (2**n - 1)**2 - 2"
    },
    {
        "id":351,
        "response":"import typing\n\ndef remove_empty(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [item for item in list1 if not (isinstance(item, list) and len(item) == 0)]"
    },
    {
        "id":352,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    counter = collections.Counter(nums)\n    max_count = max(counter.values())\n    for item in nums:\n        if counter[item] == max_count:\n            return item"
    },
    {
        "id":353,
        "response":"import typing\n\ndef add_K_element(test_list: typing.List[typing.Tuple[typing.Any, ...]], K: typing.Any) -> typing.List[typing.Tuple[typing.Any, ...]]:\n    return [tuple(item + K for item in tpl) for tpl in test_list]"
    },
    {
        "id":354,
        "response":"import typing\n\ndef make_flip(ch: str) -> int:\n    if not ch:\n        return 0\n    flips_start_with_0 = 0\n    flips_start_with_1 = 0\n    for i, c in enumerate(ch):\n        expected0 = '0' if i % 2 == 0 else '1'\n        expected1 = '1' if i % 2 == 0 else '0'\n        if c != expected0:\n            flips_start_with_0 += 1\n        if c != expected1:\n            flips_start_with_1 += 1\n    return min(flips_start_with_0, flips_start_with_1)"
    },
    {
        "id":355,
        "response":"def count_Digit(n):\n    return len(str(abs(n)))"
    },
    {
        "id":356,
        "response":"import typing\n\ndef adjacent_num_product(list_nums: typing.List[int]) -> typing.Optional[int]:\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "id":357,
        "response":"import typing\n\nclass TreeNode:\n    def __init__(self, val: int, left: 'TreeNode' = None, right: 'TreeNode' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_balanced(root: typing.Optional[TreeNode]) -> bool:\n    def check(node: typing.Optional[TreeNode]) -> typing.Tuple[bool, int]:\n        if node is None:\n            return True, 0\n        left_balanced, left_height = check(node.left)\n        if not left_balanced:\n            return False, 0\n        right_balanced, right_height = check(node.right)\n        if not right_balanced:\n            return False, 0\n        balanced = abs(left_height - right_height) <= 1\n        height = max(left_height, right_height) + 1\n        return balanced, height\n    balanced, _ = check(root)\n    return balanced\n\n__init__ = is_balanced\n\n# Sample unbalanced tree for testing\nroot = TreeNode(1, TreeNode(2, TreeNode(3), None), None)\n\nassert __init__(root) == False"
    },
    {
        "id":358,
        "response":"import typing\n\ndef repeat_tuples(test_tup: typing.Tuple[typing.Any, ...], N: int) -> typing.Tuple[typing.Tuple[typing.Any, ...], ...]:\n    return (test_tup,) * N"
    },
    {
        "id":359,
        "response":"import typing\n\ndef lateralsurface_cuboid(l: float, w: float, h: float) -> float:\n    return 2 * h * (l + w)"
    },
    {
        "id":360,
        "response":"import typing\n\ndef float_sort(price: typing.Iterable[typing.Tuple[typing.Any, str]]) -> typing.List[typing.Tuple[typing.Any, str]]:\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)"
    },
    {
        "id":361,
        "response":"import typing\n\ndef smallest_missing(A: typing.List[int], left_element: int, right_element: int) -> int:\n    present = set(A)\n    for num in range(left_element, right_element + 1):\n        if num not in present:\n            return num\n    return right_element + 1"
    },
    {
        "id":362,
        "response":"import heapq\n\ndef heap_assending(nums):\n    heap = nums[:]\n    heapq.heapify(heap)\n    sorted_nums = []\n    while heap:\n        sorted_nums.append(heapq.heappop(heap))\n    return sorted_nums"
    },
    {
        "id":363,
        "response":"def volume_cuboid(l, w, h):\n    return l * w * h"
    },
    {
        "id":364,
        "response":"import itertools\n\ndef permute_string(s):\n    return [''.join(p) for p in itertools.permutations(s)]"
    },
    {
        "id":365,
        "response":"import math\n\ndef round_num(n: int, m: int) -> int:\n    if m == 0:\n        raise ValueError(\"m cannot be zero\")\n    return int(round(n \/ m)) * m"
    },
    {
        "id":366,
        "response":"import typing\n\ndef remove_replica(test_tup: tuple) -> tuple:\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append('MSP')\n        else:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":367,
        "response":"import re\n\ndef remove_Char(s: str, c: str) -> str:\n    if not s or not c:\n        return s\n    pattern = re.escape(c)\n    return re.sub(pattern, \"\", s)"
    },
    {
        "id":368,
        "response":"import typing\n\ndef move_first(test_list):\n    if not test_list:\n        return test_list\n    return [test_list[-1]] + test_list[:-1]"
    },
    {
        "id":369,
        "response":"import math\n\ndef surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)"
    },
    {
        "id":370,
        "response":"import typing\n\ndef multi_list(rownum: int, colnum: int) -> typing.List[typing.List[int]]:\n    return [[i * j for j in range(colnum)] for i in range(rownum)]"
    },
    {
        "id":371,
        "response":"import typing\n\ndef index_on_inner_list(list_data: typing.List[typing.Sequence], index_no: int) -> typing.List[typing.Sequence]:\n    return sorted(list_data, key=lambda x: x[index_no])"
    },
    {
        "id":372,
        "response":"import typing\n\ndef find_rotation_count(A: typing.List[int]) -> int:\n    n = len(A)\n    if n == 0:\n        return 0\n    low, high = 0, n - 1\n    while low <= high:\n        if A[low] <= A[high]:\n            return low\n        mid = (low + high) \/\/ 2\n        next_idx = (mid + 1) % n\n        prev_idx = (mid - 1 + n) % n\n        if A[mid] <= A[next_idx] and A[mid] <= A[prev_idx]:\n            return mid\n        if A[mid] >= A[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0"
    },
    {
        "id":373,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Only non\u2011negative integers are supported\")\n    mask = 0\n    i = 0\n    while (1 << i) <= n:\n        mask |= (1 << i)\n        i += 2\n    return n ^ mask"
    },
    {
        "id":374,
        "response":"import typing\n\ndef frequency_Of_Smallest(n: int, arr: typing.List[int]) -> int:\n    if n <= 0:\n        return 0\n    smallest = min(arr)\n    return arr.count(smallest)"
    },
    {
        "id":375,
        "response":"import functools\n\n@functools.lru_cache(maxsize=None)\ndef get_perrin(n: int) -> int:\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "id":376,
        "response":"None"
    },
    {
        "id":377,
        "response":"import re\n\ndef even_or_odd(N):\n    digits = re.findall(r'\\d', str(N))\n    if not digits:\n        return \"Even\"\n    first_digit = int(digits[0])\n    return \"Even\" if first_digit % 2 == 0 else \"Odd\""
    },
    {
        "id":378,
        "response":"def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":379,
        "response":"import typing\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
    },
    {
        "id":380,
        "response":"import typing\n\ndef add_string(lst: typing.List[typing.Any], string: str) -> typing.List[str]:\n    return [string.format(item) for item in lst]"
    },
    {
        "id":381,
        "response":"import typing\n\ndef convert_list_dictionary(l1: typing.List[str], l2: typing.List[str], l3: typing.List[int]) -> typing.List[dict]:\n    result = []\n    for id_val, name, score in zip(l1, l2, l3):\n        result.append({id_val: {name: score}})\n    return result"
    },
    {
        "id":382,
        "response":"import functools\n\ndef get_max_sum(n):\n    @functools.lru_cache(maxsize=None)\n    def f(x):\n        if x < 2:\n            return x\n        broken = f(x \/\/ 2) + f(x \/\/ 3) + f(x \/\/ 4) + f(x \/\/ 5)\n        return x if x > broken else broken\n    return f(n)"
    },
    {
        "id":383,
        "response":"import typing\n\ndef max_length_list(input_list: typing.List[typing.List[typing.Any]]) -> typing.Tuple[int, typing.List[typing.Any]]:\n    if not input_list:\n        return (0, [])\n    max_list = max(input_list, key=lambda x: len(x))\n    return (len(max_list), max_list)"
    },
    {
        "id":384,
        "response":"import typing\n\ndef check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"import collections\n\ndef first_non_repeating_character(str1):\n    if not str1:\n        return None\n    freq = collections.Counter(str1)\n    for ch in str1:\n        if freq[ch] == 1:\n            return ch\n    return None"
    },
    {
        "id":386,
        "response":"import re\n\ndef check_char(string):\n    if not string:\n        return \"Invalid\"\n    return \"Valid\" if string[0] == string[-1] else \"Invalid\""
    },
    {
        "id":387,
        "response":"import typing\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    nums = [a, b, c]\n    nums.sort()\n    return float(nums[1])"
    },
    {
        "id":388,
        "response":"import typing\n\ndef sum_of_digits(nums: typing.List[int]) -> int:\n    total = 0\n    for n in nums:\n        n_abs = abs(int(n))\n        if n_abs == 0:\n            continue\n        while n_abs:\n            total += n_abs % 10\n            n_abs \/\/= 10\n    return total"
    },
    {
        "id":389,
        "response":"import typing\n\ndef bitwise_xor(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    length = min(len(test_tup1), len(test_tup2))\n    result = []\n    for i in range(length):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "id":390,
        "response":"import typing\n\ndef extract_freq(test_list: typing.List[tuple]) -> int:\n    unique = set()\n    for t in test_list:\n        unique.add(tuple(sorted(t)))\n    return len(unique)"
    },
    {
        "id":391,
        "response":"import itertools\n\ndef add_nested_tuples(test_tup1, test_tup2):\n    return tuple(tuple(a + b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"import math\n\ndef ncr_modp(n: int, r: int, p: int) -> int:\n    if r < 0 or r > n:\n        return 0\n    r = min(r, n - r)\n    if r == 0:\n        return 1 % p\n    numerator = 1\n    denominator = 1\n    for i in range(1, r + 1):\n        numerator = (numerator * (n - r + i)) % p\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p"
    },
    {
        "id":393,
        "response":"import re\nfrom urllib.parse import urlparse\n\ndef is_valid_URL(url: str) -> bool:\n    if not isinstance(url, str) or not url:\n        return False\n    parsed = urlparse(url)\n    if parsed.scheme not in (\"http\", \"https\", \"ftp\"):\n        return False\n    if not parsed.netloc:\n        return False\n    # Simple regex to ensure no illegal characters in the netloc and path\n    pattern = re.compile(\n        r'^[A-Za-z0-9.-]+\\.[A-Za-z]{2,}(:\\d+)?'  # domain and optional port\n        r'(\/[A-Za-z0-9._~:\/?#\\[\\]@!$&\\'()*+,;=%-]*)?$'\n    )\n    return bool(pattern.match(parsed.netloc + (parsed.path or \"\")))"
    },
    {
        "id":394,
        "response":"def minimum(a, b):\n    return a if a <= b else b"
    },
    {
        "id":395,
        "response":"def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex"
    },
    {
        "id":396,
        "response":"def find_Parity(x):\n    return \"Even Parity\" if x % 2 == 0 else \"Odd Parity\""
    },
    {
        "id":397,
        "response":"import typing\n\ndef rearrange_bigger(n: int) -> int:\n    if n < 0:\n        return -1\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1:] = reversed(digits[i + 1:])\n    return int(''.join(digits))"
    },
    {
        "id":398,
        "response":"import heapq\nfrom typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    result = []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    while heap and len(result) < k:\n        total, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return result"
    },
    {
        "id":399,
        "response":"import typing\n\ndef min_product_tuple(list1: typing.List[typing.Tuple[int, int]]) -> typing.Optional[int]:\n    if not list1:\n        return None\n    min_product = None\n    for t in list1:\n        if len(t) != 2:\n            continue\n        product = t[0] * t[1]\n        if min_product is None or product < min_product:\n            min_product = product\n    return min_product"
    },
    {
        "id":400,
        "response":"import typing\n\ndef min_val(listval: typing.List[typing.Any]) -> typing.Optional[float]:\n    min_num = None\n    for item in listval:\n        if isinstance(item, bool):\n            continue\n        if isinstance(item, (int, float)):\n            if min_num is None or item < min_num:\n                min_num = item\n    return min_num"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word):\n    if not word:\n        return ''\n    word = re.sub(r'_([a-zA-Z0-9])', lambda m: m.group(1).upper(), word)\n    word = word[:1].upper() + word[1:] if word else ''\n    word = word.replace('_', '')\n    return word"
    },
    {
        "id":402,
        "response":"import typing\n\ndef remove_odd(l: typing.List[int]) -> typing.List[int]:\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "id":403,
        "response":"import typing\n\ndef extract_nth_element(list1: typing.List[typing.Tuple], n: int) -> typing.List:\n    return [t[n] for t in list1 if len(t) > n]"
    },
    {
        "id":404,
        "response":"import typing\n\ndef overlapping(list1, list2):\n    return bool(set(list1) & set(list2))"
    },
    {
        "id":405,
        "response":"import typing\n\ndef max_Product(arr: typing.List[int]) -> typing.Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    max1 = max2 = float(\"-inf\")\n    min1 = min2 = float(\"inf\")\n    for num in arr:\n        if num > max1:\n            max2, max1 = max1, num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2, min1 = min1, num\n        elif num < min2:\n            min2 = num\n    prod_max = max1 * max2\n    prod_min = min1 * min2\n    if prod_max >= prod_min:\n        result = (max1, max2)\n    else:\n        result = (min1, min2)\n    return tuple(sorted(result))"
    },
    {
        "id":406,
        "response":"None"
    },
    {
        "id":407,
        "response":"import collections\n\ndef group_tuples(Input):\n    groups = collections.OrderedDict()\n    for tpl in Input:\n        if not tpl:\n            continue\n        key = tpl[0]\n        rest = tpl[1:]\n        if key not in groups:\n            groups[key] = []\n        groups[key].extend(rest)\n    return [tuple([k] + v) for k, v in groups.items()]"
    },
    {
        "id":408,
        "response":"import typing\n\ndef Find_Max(lst: typing.List[typing.List]) -> typing.List:\n    if not lst:\n        return []\n    max_sub = lst[0]\n    max_len = len(max_sub)\n    for sub in lst[1:]:\n        if len(sub) > max_len:\n            max_len = len(sub)\n            max_sub = sub\n    return max_sub"
    },
    {
        "id":409,
        "response":"import typing\n\ndef round_and_sum(list1: typing.List[float]) -> int:\n    if not list1:\n        return 0\n    total = sum(round(num) for num in list1)\n    return total * len(list1)"
    },
    {
        "id":410,
        "response":"def cube_Sum(n):\n    if n <= 0:\n        return 0\n    return 2 * n * n * (n + 1) * (n + 1)"
    },
    {
        "id":411,
        "response":"import typing\n\ndef concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(str(item) for item in test_tup)"
    },
    {
        "id":412,
        "response":"import typing\n\ndef find_Average_Of_Cube(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    total = sum(i * i * i for i in range(1, n + 1))\n    return total \/ n"
    },
    {
        "id":413,
        "response":"import typing\n\ndef get_maxgold(gold: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if m == 0 or n == 0:\n        return 0\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        dp[i][n - 1] = gold[i][n - 1]\n    for j in range(n - 2, -1, -1):\n        for i in range(m):\n            right = dp[i][j + 1]\n            right_up = dp[i - 1][j + 1] if i > 0 else 0\n            right_down = dp[i + 1][j + 1] if i < m - 1 else 0\n            dp[i][j] = gold[i][j] + max(right, right_up, right_down)\n    return max(dp[i][0] for i in range(m))"
    },
    {
        "id":414,
        "response":"import typing\n\ndef extract_rear(test_tuple: typing.Tuple[str, ...]) -> typing.List[str]:\n    result: typing.List[str] = []\n    for s in test_tuple:\n        result.append(s[-1] if s else '')\n    return result"
    },
    {
        "id":415,
        "response":"import typing\n\ndef count_element_in_list(list1: typing.List[typing.Iterable], x) -> int:\n    count = 0\n    for sublist in list1:\n        try:\n            if x in sublist:\n                count += 1\n        except TypeError:\n            continue\n    return count"
    },
    {
        "id":416,
        "response":"import typing\n\ndef filter_oddnumbers(nums: typing.Iterable[int]) -> list[int]:\n    return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt: str) -> str:\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "id":418,
        "response":"import typing\n\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list"
    },
    {
        "id":419,
        "response":"import typing\n\ndef and_tuples(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":420,
        "response":"None"
    },
    {
        "id":421,
        "response":"import typing\n\ndef common_element(list1, list2):\n    return bool(set(list1) & set(list2))"
    },
    {
        "id":422,
        "response":"import typing\n\ndef median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":"import typing\n\ndef check_greater(arr: typing.List[int], number: int) -> str:\n    if not arr:\n        return 'Array is empty'\n    return 'Yes, entered number is greater than those in the array' if number > max(arr) else 'No, entered number is less than those in the array'"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    return text if re.search(r'b+', text) else 'Not matched!'"
    },
    {
        "id":425,
        "response":"def last_Digit(n):\n    return abs(n) % 10"
    },
    {
        "id":426,
        "response":"import typing\n\ndef neg_nos(list1: typing.List[int]) -> int:\n    for item in list1:\n        if item < 0:\n            return item\n    return 0"
    },
    {
        "id":427,
        "response":"import re\ndef remove_odd(str1):\n    return str1[1::2]"
    },
    {
        "id":428,
        "response":"import typing\n\ndef count_bidirectional(test_list: typing.List[typing.Tuple[int, int]]) -> str:\n    seen = set()\n    count = 0\n    for a, b in test_list:\n        if (b, a) in seen:\n            count += 1\n        seen.add((a, b))\n    return str(count)"
    },
    {
        "id":429,
        "response":"import typing\n\ndef multiple_to_single(L: typing.List[int]) -> int:\n    if not L:\n        return 0\n    concatenated = ''.join(str(num) for num in L)\n    return int(concatenated)"
    },
    {
        "id":430,
        "response":"import re\n\ndef find_adverb_position(text):\n    for match in re.finditer(r'\\b\\w+\\b', text):\n        word = match.group()\n        if word.lower().endswith('ly'):\n            return (match.start(), match.end(), word)\n    return None"
    },
    {
        "id":431,
        "response":"def surfacearea_cube(l):\n    return 6 * l * l"
    },
    {
        "id":432,
        "response":"import typing\n\ndef positive_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    positive = sum(1 for n in nums if n > 0)\n    return round(positive \/ len(nums), 2)"
    },
    {
        "id":433,
        "response":"import typing\n\ndef largest_neg(list1: typing.List[typing.Union[int, float]]) -> typing.Optional[typing.Union[int, float]]:\n    min_neg = None\n    for num in list1:\n        if isinstance(num, (int, float)) and num < 0:\n            if min_neg is None or num < min_neg:\n                min_neg = num\n    return min_neg"
    },
    {
        "id":434,
        "response":"import sys\n\ndef trim_tuple(test_list, K):\n    return str([ (t[K],) for t in test_list ])"
    },
    {
        "id":435,
        "response":"import typing\n\ndef index_multiplication(test_tup1: tuple[tuple[int, ...], ...], test_tup2: tuple[tuple[int, ...], ...]) -> tuple[tuple[int, ...], ...]:\n    result = []\n    for inner1, inner2 in zip(test_tup1, test_tup2):\n        multiplied = tuple(a * b for a, b in zip(inner1, inner2))\n        result.append(multiplied)\n    return tuple(result)"
    },
    {
        "id":436,
        "response":"import collections\n\ndef count_Occurrence(tup, lst):\n    cnt = collections.Counter(tup)\n    return sum(cnt.get(item, 0) for item in lst)"
    },
    {
        "id":437,
        "response":"import typing\n\ndef cube_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x ** 3, nums))"
    },
    {
        "id":438,
        "response":"None"
    },
    {
        "id":439,
        "response":"import math\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    area = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)\n    return 'Yes' if area != 0 else 'No'"
    },
    {
        "id":440,
        "response":"import typing\n\ndef extract_string(strings: typing.List[str], l: int) -> typing.List[str]:\n    return [s for s in strings if isinstance(s, str) and len(s) == l]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":"import typing\n\ndef loss_amount(actual_cost: float, sale_amount: float) -> typing.Optional[float]:\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    return None"
    },
    {
        "id":443,
        "response":"import math\n\ndef sumofFactors(n: int) -> int:\n    if n <= 0:\n        return 0\n    total = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            d1, d2 = i, n \/\/ i\n            if d1 % 2 == 0:\n                total += d1\n            if d2 != d1 and d2 % 2 == 0:\n                total += d2\n    return total"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text, re.IGNORECASE):\n        return 'Found a match!'\n    return 'No match!'"
    },
    {
        "id":445,
        "response":"import typing\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}"
    },
    {
        "id":446,
        "response":"import typing\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"import typing\n\ndef Find_Min(lst: typing.List[typing.List]) -> typing.List:\n    if not lst:\n        return []\n    min_sublist = lst[0]\n    min_len = len(min_sublist)\n    for sub in lst[1:]:\n        if len(sub) < min_len:\n            min_len = len(sub)\n            min_sublist = sub\n    return min_sublist"
    },
    {
        "id":448,
        "response":"def rectangle_area(l, b):\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "id":450,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.List]) -> typing.List:\n    return [sub[0] for sub in lst if sub]"
    },
    {
        "id":451,
        "response":"import re\n\ndef upper_ctr(s: str) -> int:\n    count = 0\n    prev_upper = False\n    for ch in s:\n        if ch.isupper():\n            if not prev_upper:\n                count += 1\n            prev_upper = True\n        else:\n            prev_upper = False\n    return count"
    },
    {
        "id":452,
        "response":"import typing\n\ndef combinations_list(list1: typing.List[typing.Any]) -> typing.List[typing.List[typing.Any]]:\n    result = [[]]\n    for elem in list1:\n        current = result[:]\n        for subset in current:\n            result.append([elem] + subset)\n    return result"
    },
    {
        "id":453,
        "response":"import typing\n\ndef max_subarray_product(arr: typing.List[int]) -> int:\n    if not arr:\n        return 0\n    max_prod = arr[0]\n    max_ending = arr[0]\n    min_ending = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_ending, min_ending = min_ending, max_ending\n        max_ending = max(num, max_ending * num)\n        min_ending = min(num, min_ending * num)\n        max_prod = max(max_prod, max_ending)\n    return max_prod"
    },
    {
        "id":454,
        "response":"import typing\n\ndef check_value(data: dict, n: int) -> bool:\n    return all(value == n for value in data.values())"
    },
    {
        "id":455,
        "response":"import collections\n\ndef drop_empty(dict1):\n    result = {}\n    for k, v in dict1.items():\n        if v is None:\n            continue\n        if isinstance(v, (str, list, dict, set, tuple)) and len(v) == 0:\n            continue\n        result[k] = v\n    return result"
    },
    {
        "id":456,
        "response":"import typing\n\ndef find_peak_util(arr: typing.List[int], n: int, low: int = 0, high: int = None) -> int:\n    if n == 0:\n        return -1\n    if high is None:\n        high = n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        left_ok = (mid == 0) or (arr[mid] >= arr[mid - 1])\n        right_ok = (mid == n - 1) or (arr[mid] >= arr[mid + 1])\n        if left_ok and right_ok:\n            return mid\n        if mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1"
    },
    {
        "id":457,
        "response":"import typing\n\ndef decimal_to_Octal(deciNum: int) -> int:\n    if deciNum == 0:\n        return 0\n    sign = -1 if deciNum < 0 else 1\n    n = abs(deciNum)\n    octal = 0\n    place = 1\n    while n:\n        digit = n % 8\n        octal += digit * place\n        place *= 10\n        n \/\/= 8\n    return octal * sign"
    },
    {
        "id":458,
        "response":"import typing\n\ndef max_product(arr: typing.List[int], n: int) -> int:\n    if not arr or n == 0:\n        return 0\n    length = min(n, len(arr))\n    dp = [0] * length\n    max_prod = 0\n    for i in range(length):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[j] * arr[i] > dp[i]:\n                dp[i] = dp[j] * arr[i]\n        if dp[i] > max_prod:\n            max_prod = dp[i]\n    return max_prod"
    },
    {
        "id":459,
        "response":"import math\n\ndef max_profit(price, k):\n    n = len(price)\n    if n == 0 or k == 0:\n        return 0\n    if k >= n \/\/ 2:\n        profit = 0\n        for i in range(1, n):\n            diff = price[i] - price[i - 1]\n            if diff > 0:\n                profit += diff\n        return profit\n    dp = [0] * (k + 1)\n    hold = [-math.inf] * (k + 1)\n    for p in price:\n        for t in range(1, k + 1):\n            hold[t] = max(hold[t], dp[t - 1] - p)\n            dp[t] = max(dp[t], hold[t] + p)\n    return dp[k]"
    },
    {
        "id":460,
        "response":"import re\nimport itertools\nfrom typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))"
    },
    {
        "id":461,
        "response":"import typing\n\ndef find_remainder(arr: typing.List[int], lens: int, n: int) -> int:\n    if n == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    result = 1 % n\n    for i in range(min(lens, len(arr))):\n        result = (result * (arr[i] % n)) % n\n    return result"
    },
    {
        "id":462,
        "response":"import typing\n\ndef check_Consecutive(l: typing.List[int]) -> bool:\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] - l[i - 1] != 1:\n            return False\n    return True"
    },
    {
        "id":463,
        "response":"import typing\n\ndef tuple_intersection(test_list1: typing.List[typing.Tuple[int, int]], test_list2: typing.List[typing.Tuple[int, int]]) -> typing.Set[typing.Tuple[int, int]]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1 & set2"
    },
    {
        "id":464,
        "response":"def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)"
    },
    {
        "id":465,
        "response":"import typing\n\ndef sort_counter(dict1: typing.Dict[str, int]) -> typing.List[typing.Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)"
    },
    {
        "id":466,
        "response":"import typing\n\ndef big_sum(nums: typing.List[int]) -> int:\n    if not nums:\n        return 0\n    min_val = max_val = nums[0]\n    for n in nums[1:]:\n        if n < min_val:\n            min_val = n\n        elif n > max_val:\n            max_val = n\n    return min_val + max_val"
    },
    {
        "id":467,
        "response":"def is_lower(string):\n    return string.lower()"
    },
    {
        "id":468,
        "response":"def remove_lowercase(str1):\n    return ''.join(ch for ch in str1 if not ch.islower())"
    },
    {
        "id":469,
        "response":"def first_Digit(n):\n    n = abs(int(n))\n    if n == 0:\n        return 0\n    while n >= 10:\n        n \/\/= 10\n    return n"
    },
    {
        "id":470,
        "response":"import collections\n\ndef get_max_occuring_char(str1: str) -> str:\n    if not str1:\n        return \"\"\n    freq = collections.Counter(str1)\n    max_count = max(freq.values())\n    for ch in str1:\n        if freq[ch] == max_count:\n            return ch\n    return \"\""
    },
    {
        "id":471,
        "response":"import typing\n\ndef is_subset_sum(arr: typing.List[int], n: int, target: int) -> bool:\n    if target < 0:\n        return False\n    n = min(n, len(arr))\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for i in range(n):\n        num = arr[i]\n        if num > target:\n            continue\n        for s in range(target, num - 1, -1):\n            if dp[s - num]:\n                dp[s] = True\n    return dp[target]"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    return 'Yes' if re.search(r'[A-Z][a-z]+', text) else 'No'"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    if x == 1:\n        return 1\n\n    def factorize(n):\n        factors = {}\n        d = 2\n        while d * d <= n:\n            while n % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                n \/\/= d\n            d += 1 if d == 2 else 2\n        if n > 1:\n            factors[n] = factors.get(n, 0) + 1\n        return factors\n\n    def legendre(n, p):\n        cnt = 0\n        while n:\n            n \/\/= p\n            cnt += n\n        return cnt\n\n    def min_n_for_prime(p, exp):\n        low, high = 1, p * exp\n        while legendre(high, p) < exp:\n            high *= 2\n        while low < high:\n            mid = (low + high) \/\/ 2\n            if legendre(mid, p) >= exp:\n                high = mid\n            else:\n                low = mid + 1\n        return low\n\n    prime_powers = factorize(x)\n    result = 0\n    for p, e in prime_powers.items():\n        result = max(result, min_n_for_prime(p, e))\n    return result"
    },
    {
        "id":474,
        "response":"import typing\n\ndef remove_matching_tuple(test_list1: typing.List[typing.Tuple], test_list2: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    remove_set = set(test_list2)\n    return [t for t in test_list1 if t not in remove_set]"
    },
    {
        "id":475,
        "response":"import typing\n\ndef is_palindrome(arr: typing.List[int], n: int) -> int:\n    max_pal = -1\n    for i in range(min(n, len(arr))):\n        num = arr[i]\n        s = str(num)\n        if s == s[::-1]:\n            if num > max_pal:\n                max_pal = num\n    return max_pal\n\n# Sample test\nassert is_palindrome([1, 232, 54545, 999991], 4) == 54545"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n, r, p):\n    if r < 0 or r > n:\n        return 0.0\n    comb = math.comb(n, r)\n    return comb * (p ** r) * ((1 - p) ** (n - r))"
    },
    {
        "id":477,
        "response":"import typing\n\ndef sort_tuple(tup: typing.List[tuple]) -> typing.List[tuple]:\n    return sorted(tup, key=lambda x: x[-1])"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    if a <= 0:\n        return 0.0\n    return (5 * a * a) \/ (4 * math.tan(math.pi \/ 5))"
    },
    {
        "id":479,
        "response":"import typing\n\ndef frequency_Of_Largest(n: int, arr: typing.List[int]) -> int:\n    if not arr:\n        return 0\n    max_val = arr[0]\n    count = 0\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            count = 1\n        elif num == max_val:\n            count += 1\n    return count"
    },
    {
        "id":480,
        "response":"import typing\n\ndef extract_symmetric(test_list: typing.List[typing.Tuple[int, int]]) -> typing.Set[typing.Tuple[int, int]]:\n    pair_set = set(test_list)\n    result = set()\n    for a, b in test_list:\n        if (b, a) in pair_set:\n            result.add((a, b) if a <= b else (b, a))\n    return result"
    },
    {
        "id":481,
        "response":"import math\n\ndef sum_gp(a, n, r):\n    if n <= 0:\n        return 0\n    if r == 1:\n        return a * n\n    return a * ((pow(r, n) - 1) \/\/ (r - 1))"
    },
    {
        "id":482,
        "response":"def binary_search(item_list, item):\n    left, right = 0, len(item_list) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        mid_val = item_list[mid]\n        if mid_val == item:\n            return True\n        elif mid_val < item:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "id":483,
        "response":"None"
    },
    {
        "id":484,
        "response":"import typing\n\ndef binary_to_integer(test_tup: typing.Tuple[int, ...]) -> str:\n    result = 0\n    for bit in test_tup:\n        result = (result << 1) | (bit & 1)\n    return str(result)"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\n\ndef heap_queue_smallest(nums, n):\n    if n <= 0:\n        return []\n    if n >= len(nums):\n        return sorted(nums)\n    return heapq.nsmallest(n, nums)"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r * r + h * h)\n    return math.pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x"
    },
    {
        "id":489,
        "response":"def diameter_circle(r):\n    return r * 2"
    },
    {
        "id":490,
        "response":"import typing\n\ndef concatenate_elements(lst: typing.List[str]) -> str:\n    if not lst:\n        return ''\n    return '  ' + ' '.join(lst)"
    },
    {
        "id":491,
        "response":"import typing\n\ndef min_cost(cost: typing.List[typing.List[int]], m: int, n: int) -> int:\n    rows = len(cost)\n    cols = len(cost[0]) if rows else 0\n    if m >= rows or n >= cols:\n        raise IndexError(\"Target position out of bounds\")\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"import typing\n\ndef similar_elements(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    set2 = set(test_tup2)\n    return tuple(item for item in test_tup1 if item in set2)"
    },
    {
        "id":493,
        "response":"import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    limit = int(math.isqrt(n))\n    i = 5\n    while i <= limit:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "id":494,
        "response":"import heapq\n\ndef heap_queue_largest(nums, n):\n    if n <= 0:\n        return []\n    return heapq.nlargest(n, nums)"
    },
    {
        "id":495,
        "response":"import typing\n\ndef count_ways(n: int) -> int:\n    if n % 2 == 1:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    if n >= 2:\n        dp[2] = 3\n    for i in range(4, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]"
    },
    {
        "id":496,
        "response":"def is_Power_Of_Two(a: int, b: int) -> bool:\n    diff = a ^ b\n    return diff != 0 and (diff & (diff - 1)) == 0"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"import typing\n\ndef square_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x * x, nums))"
    },
    {
        "id":499,
        "response":"import typing\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    lps = [0] * n\n    length = 0\n    i = 1\n    while i < n:\n        if s[i] == s[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        else:\n            if length != 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n    period = n - lps[-1]\n    if n % period == 0:\n        return period\n    return n"
    },
    {
        "id":500,
        "response":"import heapq\n\ndef small_nnum(list1, n):\n    if n <= 0:\n        return []\n    return heapq.nsmallest(n, list1)"
    }
]