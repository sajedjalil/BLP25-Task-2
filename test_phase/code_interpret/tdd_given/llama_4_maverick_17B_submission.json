[
    {
        "id":1,
        "response":"def remove_Occ(s, ch):\n    try:\n        first_index = s.index(ch)\n        last_index = s.rindex(ch)\n        if first_index == last_index:\n            return s.replace(ch, '', 1)\n        else:\n            return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    except ValueError:\n        return s"
    },
    {
        "id":2,
        "response":"def sort_matrix(M):\n    M.sort(key=sum)\n    return M"
    },
    {
        "id":3,
        "response":"from collections import Counter\n\ndef count_common(words):\n    counter = Counter(words)\n    return counter.most_common(4)"
    },
    {
        "id":4,
        "response":"def find_Volume(l, b, h):\n    return 0.5 * l * b * h"
    },
    {
        "id":5,
        "response":"def split_lowerstring(text):\n    result = []\n    temp = ''\n    for i, char in enumerate(text):\n        temp += char\n        if char.islower() and (i == len(text) - 1 or text[i + 1].isupper()):\n            result.append(temp)\n            temp = ''\n    if temp:\n        result.append(temp)\n    return result"
    },
    {
        "id":6,
        "response":"import re\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "id":7,
        "response":"def square_perimeter(a):\n    return 4 * a"
    },
    {
        "id":8,
        "response":"def str_to_list(string, chars_to_remove):\n    chars_to_remove_set = set(chars_to_remove)\n    return ''.join([char for char in string if char not in chars_to_remove_set])"
    },
    {
        "id":9,
        "response":"def test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))"
    },
    {
        "id":10,
        "response":"def is_woodall(x):\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        if woodall_num == x:\n            return True\n        elif woodall_num > x:\n            return False\n        n += 1"
    },
    {
        "id":11,
        "response":"def multiples_of_num(m, n):\n    return [i * n for i in range(1, m + 1)]"
    },
    {
        "id":12,
        "response":"def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"
    },
    {
        "id":13,
        "response":"def maximum_Sum(list1):\n    return max(sum(sublist) for sublist in list1)"
    },
    {
        "id":14,
        "response":"def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary > 0:\n        digit = binary % 10\n        decimal += digit * (2 ** power)\n        binary \/\/= 10\n        power += 1\n    return decimal"
    },
    {
        "id":15,
        "response":"from collections import Counter\n\ndef find_Product(arr, n):\n    count = Counter(arr)\n    product = 1\n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n    return product"
    },
    {
        "id":16,
        "response":"def check_k_elements(test_list, K):\n    return any(len(tup) == K for tup in test_list)"
    },
    {
        "id":17,
        "response":"import re\ndef remove(list):\n    return [re.sub('\\d', '', s) for s in list]"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result = result * (n - i)\n        result = result \/\/ (i + 1)\n    return result"
    },
    {
        "id":19,
        "response":"def get_Odd_Occurrence(arr, arr_size):\n    res = 0\n    for i in range(arr_size):\n        res = res ^ arr[i]\n    return res"
    },
    {
        "id":20,
        "response":"def check_Equality(s):\n    count = 0\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        count += char_count[char] * (char_count[char] + 1) \/\/ 2\n    return count"
    },
    {
        "id":21,
        "response":"import heapq\nfrom typing import List\nfrom collections import Counter\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    count_map = Counter(num for sublist in nums for num in sublist)\n    min_heap = []\n    for num, freq in count_map.items():\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (freq, num))\n        else:\n            if freq > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (freq, num))\n    result = sorted(min_heap, key=lambda x: (-x[0], x[1]))\n    return [num for _, num in result]"
    },
    {
        "id":22,
        "response":"def max_Prime_Factors(n):\n    i = 2\n    max_prime = -1\n    while i * i <= n:\n        while n % i == 0:\n            max_prime = i\n            n \/\/= i\n        i += 1\n    if n > 1:\n        max_prime = n\n    return max_prime"
    },
    {
        "id":23,
        "response":"def decimal_To_Binary(N):\n    return int(bin(N)[2:])"
    },
    {
        "id":24,
        "response":"def find_missing(ar, N):\n    for i in range(N-1):\n        if ar[i+1] - ar[i] > 1:\n            return ar[i] + 1\n    if ar[0] != 1:\n        return 1\n    return ar[-1] + 1"
    },
    {
        "id":25,
        "response":"def find_rect_num(n):\n    return n * (n + 1)"
    },
    {
        "id":26,
        "response":"def find_Nth_Digit(p, q, N):\n    from decimal import Decimal, getcontext\n    getcontext().prec = N + 10\n    fraction = str(Decimal(p) \/ Decimal(q))[2:]\n    if len(fraction) < N:\n        return -1\n    return int(fraction[N-1])"
    },
    {
        "id":27,
        "response":"def sort_mixed_list(mixed_list):\n    ints = sorted([x for x in mixed_list if isinstance(x, int)])\n    strs = sorted([x for x in mixed_list if isinstance(x, str)])\n    return ints + strs"
    },
    {
        "id":28,
        "response":"def div_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return None\n    return even \/ odd"
    },
    {
        "id":29,
        "response":"import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    max_heap = [(-freq, char) for char, freq in counter.items()]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap:\n        freq1, char1 = heapq.heappop(max_heap)\n        if result and result[-1] == char1:\n            if not max_heap:\n                return \"\"\n            freq2, char2 = heapq.heappop(max_heap)\n            result.append(char2)\n            if freq2 + 1 != 0:\n                heapq.heappush(max_heap, (freq2 + 1, char2))\n            heapq.heappush(max_heap, (freq1, char1))\n        else:\n            result.append(char1)\n            if freq1 + 1 != 0:\n                heapq.heappush(max_heap, (freq1 + 1, char1))\n    return ''.join(result)"
    },
    {
        "id":30,
        "response":"from collections import Counter\nimport itertools\n\ndef freq_element(nums):\n    flat_list = list(itertools.chain(*nums))\n    return dict(Counter(flat_list))"
    },
    {
        "id":31,
        "response":"def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"def find_Sum(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return sum(key * (count_dict[key] - 1) for key, value in count_dict.items() if value > 1)"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text):\n    patterns = '^python'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "id":35,
        "response":"import math\nfrom functools import reduce\n\ndef find_gcd(nums):\n    return reduce(math.gcd, nums)"
    },
    {
        "id":36,
        "response":"def test_distinct(data):\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":"import math\n\ndef compute_Last_Digit(a, b):\n    if a > b:\n        return 0\n    result = 1\n    for i in range(a+1, b+1):\n        result *= i\n    return (math.factorial(b) \/\/ math.factorial(a)) % 10"
    },
    {
        "id":38,
        "response":"def odd_bit_set_number(n):\n    mask = 0\n    for i in range(1, 32, 2):\n        mask |= (1 << i)\n    return n | mask"
    },
    {
        "id":39,
        "response":"def specified_element(nums, N):\n    return [num[N] for num in nums if N < len(num)]"
    },
    {
        "id":40,
        "response":"def min_length_list(input_list):\n    min_len = min(len(sublist) for sublist in input_list)\n    return min_len, next(sublist for sublist in input_list if len(sublist) == min_len)"
    },
    {
        "id":41,
        "response":"def check_equilateral(x, y, z):\n    if x <= 0 or y <= 0 or z <= 0:\n        return False\n    return x == y == z"
    },
    {
        "id":42,
        "response":"def parallelogram_area(b, h):\n    return b * h"
    },
    {
        "id":43,
        "response":"def check_Equality(s):\n    if len(s) < 1:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""
    },
    {
        "id":44,
        "response":"def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, cnt in enumerate(count):\n        sorted_list.extend([i] * cnt)\n    return sorted_list"
    },
    {
        "id":45,
        "response":"def tn_gp(a, n, r):\n    return a * (r ** (n - 1))"
    },
    {
        "id":46,
        "response":"def rev(num):\n    reversed_num = int(str(abs(num))[::-1])\n    if num < 0:\n        reversed_num = -reversed_num\n    return num == 2 * reversed_num - 1"
    },
    {
        "id":47,
        "response":"from functools import cmp_to_key\n\ndef compare(a, b):\n    ab = str(a) + str(b)\n    ba = str(b) + str(a)\n    return int(ba) - int(ab)\n\ndef find_Max_Num(arr, n):\n    arr.sort(key=cmp_to_key(compare))\n    return int(''.join(map(str, arr)))"
    },
    {
        "id":48,
        "response":"def opposite_Signs(x, y):\n    return (x * y) < 0"
    },
    {
        "id":49,
        "response":"def is_octagonal(n):\n    return n * (3 * n - 2)"
    },
    {
        "id":50,
        "response":"def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    \n    max_len = 1\n    curr_len = 1\n    \n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) == 1:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    \n    max_len = max(max_len, curr_len)\n    return max_len"
    },
    {
        "id":51,
        "response":"def count_Substrings(s, n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total == j - i + 1:\n                count += 1\n    return count"
    },
    {
        "id":52,
        "response":"def smallest_num(xs):\n    return min(xs)"
    },
    {
        "id":53,
        "response":"def max_difference(test_list):\n    return max(abs(y - x) for x, y in test_list)"
    },
    {
        "id":54,
        "response":"def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "id":55,
        "response":"def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"
    },
    {
        "id":56,
        "response":"def pos_count(lst):\n    count = sum(1 for num in lst if num > 0)\n    return count"
    },
    {
        "id":57,
        "response":"def bell_number(n):\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"
    },
    {
        "id":58,
        "response":"def is_Monotonic(A):\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n    return increasing or decreasing"
    },
    {
        "id":59,
        "response":"def is_sublist(l, s):\n    n = len(s)\n    return any(s == l[i:i+n] for i in range(len(l)-n+1))"
    },
    {
        "id":60,
        "response":"def find_equal_tuple(Input, k):\n    for tup in Input:\n        if len(tup) != k:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'"
    },
    {
        "id":61,
        "response":"def comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) \/\/ 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "id":62,
        "response":"def dif_Square(n):\n    if n % 4 == 2:\n        return False\n    else:\n        return True"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    return re.split(r'[*\\n]', text)"
    },
    {
        "id":64,
        "response":"def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True"
    },
    {
        "id":65,
        "response":"def find_tuples(test_list, K):\n    return str([tup for tup in test_list if all(ele % K == 0 for ele in tup)])"
    },
    {
        "id":66,
        "response":"def count_Squares(m, n):\n    total = 0\n    for i in range(min(m, n), 0, -1):\n        total += (m - i + 1) * (n - i + 1)\n    return total"
    },
    {
        "id":67,
        "response":"def is_Diff(n):\n    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)\n    return abs(even_sum - odd_sum) == 0"
    },
    {
        "id":68,
        "response":"def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n + 1):\n        bin_num = bin(i)[2:]\n        set_bits = bin_num.count('1')\n        if set_bits % 2 != 0:\n            count += 1\n    return count"
    },
    {
        "id":69,
        "response":"def word_len(s):\n    return len(s) % 2 != 0"
    },
    {
        "id":70,
        "response":"def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) \/ 6"
    },
    {
        "id":71,
        "response":"from itertools import cycle\n\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, cycle(test_tup2)))"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    return (4\/3) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":"def get_Char(strr):\n    sum_val = sum(ord(char.lower()) - ord('a') + 1 for char in strr if char.isalpha())\n    return chr((sum_val - 1) % 26 + ord('a'))"
    },
    {
        "id":74,
        "response":"def sequence(n):\n    if n <= 0:\n        return None\n    elif n <= 2:\n        return 1\n    seq = [1, 1]\n    for i in range(2, n):\n        next_term = seq[i-1] + seq[i - seq[i-1]]\n        seq.append(next_term)\n    return seq[-1]"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "id":76,
        "response":"def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "id":78,
        "response":"from collections import Counter\n\ndef freq_count(list1):\n    freq_dict = Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "id":79,
        "response":"def closest_num(N):\n    if N % 2 == 0:\n        return N - 2\n    else:\n        return N - 1"
    },
    {
        "id":80,
        "response":"def len_log(list1):\n    return max(len(word) for word in list1)"
    },
    {
        "id":81,
        "response":"def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "id":82,
        "response":"def is_undulating(n):\n    n = str(n)\n    if len(n) < 3:\n        return False\n    increasing = int(n[0]) < int(n[1])\n    for i in range(2, len(n)):\n        if increasing and int(n[i-1]) <= int(n[i]):\n            return False\n        if not increasing and int(n[i-1]) >= int(n[i]):\n            return False\n        increasing = not increasing\n    return True"
    },
    {
        "id":83,
        "response":"def power(a, b):\n    return a ** b"
    },
    {
        "id":84,
        "response":"def index_minimum(test_list):\n    return min(test_list, key=lambda x: x[1])[0]"
    },
    {
        "id":85,
        "response":"def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)"
    },
    {
        "id":86,
        "response":"def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count"
    },
    {
        "id":87,
        "response":"from typing import List\nfrom collections import Counter\nimport itertools\n\ndef frequency_lists(list1: List[List[int]]) -> dict:\n    flat_list = list(itertools.chain(*list1))\n    return dict(Counter(flat_list))"
    },
    {
        "id":88,
        "response":"import math\nfrom typing import Iterable\n\ndef multiply_num(numbers: Iterable[float]) -> float:\n    product = math.prod(numbers)\n    return product \/ len(numbers)"
    },
    {
        "id":89,
        "response":"def decimal_to_binary(n):\n    return bin(n)[2:]"
    },
    {
        "id":90,
        "response":"def next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]"
    },
    {
        "id":91,
        "response":"def kth_element(arr, n, k):\n    if k > n or k < 1:\n        return -1\n    return sorted(arr)[k-1]"
    },
    {
        "id":92,
        "response":"def snake_to_camel(word):\n    words = word.split('_')\n    return ''.join(w.capitalize() for w in words)"
    },
    {
        "id":93,
        "response":"def eulerian_num(n, m):\n    eulerian = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        eulerian[i][0] = 1\n        eulerian[i][i] = 0\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            eulerian[i][j] = (i - j) * eulerian[i - 1][j - 1] + (j + 1) * eulerian[i - 1][j]\n    return eulerian[n][m]"
    },
    {
        "id":94,
        "response":"def sort_sublists(input_list):\n    return list(map(lambda x: sorted(x), input_list))"
    },
    {
        "id":95,
        "response":"def count(lst):\n    return sum(1 for elem in lst if elem)"
    },
    {
        "id":96,
        "response":"def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)"
    },
    {
        "id":97,
        "response":"def count_Hexadecimal(L, R):\n    count = 0\n    for num in range(L, R + 1):\n        count += sum(c in '0123456789ABCDEF' for c in hex(num)[2:].upper()) == len(hex(num)[2:])\n    return count"
    },
    {
        "id":98,
        "response":"import heapq\nfrom typing import List\n\ndef merge_sorted_list(*args: List[int]) -> List[int]:\n    merged_list = list(heapq.merge(*args))\n    return sorted(merged_list)"
    },
    {
        "id":99,
        "response":"def odd_Equivalent(s, n):\n    count = s.count('1')\n    return count if count % 2 == 0 else n - count"
    },
    {
        "id":100,
        "response":"def extract_missing(test_list, strt_val, stop_val):\n    test_list = sorted(test_list, key=lambda x: x[0])\n    result = []\n    for tup in test_list:\n        if tup[1] <= strt_val or tup[0] >= stop_val:\n            continue\n        if tup[0] > strt_val:\n            result.append((strt_val, tup[0]))\n        if tup[1] < stop_val:\n            result.append((tup[1], stop_val))\n        strt_val = tup[1]\n    if strt_val < stop_val:\n        result.append((strt_val, stop_val))\n    valid_result = [tup for tup in result if tup[0] < tup[1]]\n    return sorted(list(set(valid_result)), key=lambda x: x[0])"
    },
    {
        "id":101,
        "response":"def common_in_nested_lists(nestedlist):\n    from collections import Counter\n    counter = Counter(nestedlist[0])\n    for lst in nestedlist[1:]:\n        counter &= Counter(lst)\n    return sorted(list(counter.keys()), reverse=True)"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    radius = diameter \/ 2\n    circumference = 2 * math.pi * radius\n    perimeter = circumference + 2 * height\n    return round(perimeter)"
    },
    {
        "id":103,
        "response":"def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "id":104,
        "response":"from collections import OrderedDict\n\ndef assign_freq(test_list):\n    freq_dict = OrderedDict()\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    result = []\n    for key, value in freq_dict.items():\n        result.append(key + (value,))\n    return str(result)"
    },
    {
        "id":105,
        "response":"def empty_dit(list1):\n    return all(not d for d in list1)"
    },
    {
        "id":106,
        "response":"def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))"
    },
    {
        "id":107,
        "response":"def list_to_float(test_list):\n    test_list = [tuple(map(float, t)) for t in test_list]\n    return str(test_list)"
    },
    {
        "id":108,
        "response":"def string_to_list(string):\n    return string.split()"
    },
    {
        "id":109,
        "response":"def search(arr, n):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if (mid == 0 or arr[mid - 1] != arr[mid]) and (mid == n - 1 or arr[mid] != arr[mid + 1]):\n            return arr[mid]\n        if mid > 0 and arr[mid - 1] == arr[mid]:\n            if mid % 2 == 0:\n                high = mid - 2\n            else:\n                low = mid + 1\n        else:\n            if mid % 2 == 0:\n                low = mid + 2\n            else:\n                high = mid - 1\n    return -1"
    },
    {
        "id":110,
        "response":"def max_product_tuple(list1):\n    return max(a * b for a, b in list1)"
    },
    {
        "id":111,
        "response":"def check_triplet(A, n, sum, count):\n    A.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count > 0"
    },
    {
        "id":112,
        "response":"import math\n\ndef smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        root = math.sqrt(num)\n        if int(root + 0.5) ** 2 == num:\n            count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "id":113,
        "response":"def sum_of_divisors(n):\n    sum_div = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_div += i\n            if i != n \/\/ i:\n                sum_div += n \/\/ i\n    return sum_div\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_div = sum_of_divisors(num)\n        if sum_div <= limit and sum_div != num and sum_of_divisors(sum_div) == num:\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "id":114,
        "response":"import cmath\n\ndef angle_complex(a, b):\n    if isinstance(b, complex):\n        b = b.imag\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)"
    },
    {
        "id":115,
        "response":"def find_length(string, n):\n    count = 0\n    max_diff = 0\n    diff_count = {0: -1}\n    for i in range(n):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        if count not in diff_count:\n            diff_count[count] = i\n        else:\n            max_diff = max(max_diff, i - diff_count[count])\n    return max_diff"
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    gcd = math.gcd(a, b)\n    divisors_sum = 0\n    for i in range(1, int(math.sqrt(gcd)) + 1):\n        if gcd % i == 0:\n            if gcd \/\/ i == i:\n                divisors_sum += i\n            else:\n                divisors_sum += i + gcd \/\/ i\n    return divisors_sum"
    },
    {
        "id":117,
        "response":"def multiply_int(x, y):\n    if x == 0 or y == 0:\n        return 0\n    result = 0\n    is_negative = (x < 0) ^ (y < 0)\n    x, y = abs(x), abs(y)\n    for _ in range(y):\n        result += x\n    return -result if is_negative else result"
    },
    {
        "id":118,
        "response":"def long_words(n, str):\n    word_len = []\n    txt = str.split()\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len"
    },
    {
        "id":119,
        "response":"def magic_square_test(my_matrix):\n    if not my_matrix or not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n    n = len(my_matrix)\n    expected_sum = sum(my_matrix[0])\n    for i in range(1, n):\n        if sum(my_matrix[i]) != expected_sum:\n            return False\n    for j in range(n):\n        if sum(my_matrix[i][j] for i in range(n)) != expected_sum:\n            return False\n    if sum(my_matrix[i][i] for i in range(n)) != expected_sum:\n        return False\n    if sum(my_matrix[i][n - i - 1] for i in range(n)) != expected_sum:\n        return False\n    return True"
    },
    {
        "id":120,
        "response":"from typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> Tuple[int, int]:\n    count = Counter(nums)\n    max_count = max(count.values())\n    max_num = next(num for num, freq in count.items() if freq == max_count)\n    return max_num, max_count"
    },
    {
        "id":121,
        "response":"def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    return \"\".join(str_list)"
    },
    {
        "id":122,
        "response":"def tup_string(tup1):\n    return ''.join(tup1)"
    },
    {
        "id":123,
        "response":"def sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"def check_last(arr, n, p):\n    from collections import deque\n    d = deque(arr)\n    for _ in range(p):\n        d.pop()\n        d.appendleft(d.pop())\n    return \"EVEN\" if d[-1] % 2 == 0 else \"ODD\""
    },
    {
        "id":125,
        "response":"def hexagonal_num(n):\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"def cal_electbill(units):\n    if units <= 50:\n        return units * 3.20\n    elif units <= 150:\n        return 50 * 3.20 + (units - 50) * 3.45\n    elif units <= 250:\n        return 50 * 3.20 + 100 * 3.45 + (units - 150) * 4.60\n    else:\n        return 50 * 3.20 + 100 * 3.45 + 100 * 4.60 + (units - 250) * 5.75"
    },
    {
        "id":127,
        "response":"def zero_count(nums):\n    count = sum(1 for num in nums if num == 0)\n    return round(count \/ len(nums), 2)"
    },
    {
        "id":128,
        "response":"def is_Sum_Of_Powers_Of_Two(n):\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n \/\/ 2\n    return count > 0 and (count & (count - 1)) == 0"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    return round(2 * math.pi * r, 12)"
    },
    {
        "id":130,
        "response":"from collections import Counter\nimport itertools\n\ndef extract_singly(test_list):\n    freq = Counter(itertools.chain(*test_list))\n    return [ele for ele, count in freq.items() if count >= 1]"
    },
    {
        "id":131,
        "response":"def pancake_sort(nums):\n    def flip(nums, k):\n        return nums[:k][::-1] + nums[k:]\n\n    n = len(nums)\n    for size in range(n, 0, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums"
    },
    {
        "id":132,
        "response":"def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "id":133,
        "response":"def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "id":134,
        "response":"def sum_Pairs(arr, n):\n    total_sum = 0\n    arr.sort()\n    for i in range(n):\n        total_sum += arr[i] * (i - (n - i - 1))\n    return total_sum"
    },
    {
        "id":135,
        "response":"def max_Abs_Diff(arr, n):\n    return max(arr) - min(arr)"
    },
    {
        "id":136,
        "response":"def ascii_value_string(str1):\n    return ord(str1[0])"
    },
    {
        "id":137,
        "response":"def max_path_sum(tri, m, n):\n    for i in range(m-1, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]"
    },
    {
        "id":138,
        "response":"def sum_digits_single(x):\n    import itertools\n    num_str = str(x)\n    max_sum = 0\n    for r in range(1, len(num_str)):\n        for split_point in itertools.combinations(range(1, len(num_str)), r):\n            parts = []\n            prev = 0\n            for i in sorted(split_point):\n                parts.append(num_str[prev:i])\n                prev = i\n            parts.append(num_str[prev:])\n            current_sum = sum(int(part) for part in parts)\n            max_sum = max(max_sum, current_sum)\n    return max(max_sum, sum(int(digit) for digit in num_str), x)"
    },
    {
        "id":139,
        "response":"def longest_subseq_with_diff_one(arr, n):\n    dp = {}\n    for num in arr:\n        dp[num] = max(dp.get(num - 1, 0), dp.get(num + 1, 0)) + 1\n    return max(dp.values())"
    },
    {
        "id":140,
        "response":"def does_Contain_B(a, b, c):\n    if a > b:\n        return False\n    if a == b:\n        return True\n    if c == 0:\n        return False\n    if c < 0:\n        a, b = b, a\n        c = -c\n    while a <= b:\n        if a % c == b % c:\n            return True\n        a += c\n    return False"
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p, q):\n    return math.gcd(p, q) == 1"
    },
    {
        "id":142,
        "response":"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return merge(merge_sort(left_half), merge_sort(right_half))\n\ndef merge(a, b):\n    merged = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(a) and right_index < len(b):\n        if a[left_index] <= b[right_index]:\n            merged.append(a[left_index])\n            left_index += 1\n        else:\n            merged.append(b[right_index])\n            right_index += 1\n    merged += a[left_index:]\n    merged += b[right_index:]\n    return merged\n\ndef merge(a, b=None):\n    if b is None:\n        return merge_sort(a)\n    else:\n        merged = []\n        left_index = 0\n        right_index = 0\n        while left_index < len(a) and right_index < len(b):\n            if a[left_index] <= b[right_index]:\n                merged.append(a[left_index])\n                left_index += 1\n            else:\n                merged.append(b[right_index])\n                right_index += 1\n        merged += a[left_index:]\n        merged += b[right_index:]\n        return merged"
    },
    {
        "id":143,
        "response":"def parabola_vertex(a, b, c):\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"def specified_element(nums, N):\n    return [num[N] for num in nums]"
    },
    {
        "id":145,
        "response":"def even_bit_toggle_number(n):\n    mask = 0x55555555\n    return n ^ mask"
    },
    {
        "id":146,
        "response":"def tuple_int_str(tuple_str):\n    return tuple(tuple(int(i) for i in t) for t in tuple_str)"
    },
    {
        "id":147,
        "response":"from typing import List, Union\n\ndef encode_list(list1: List[Union[int, float]]) -> List[List[Union[int, float]]]:\n    result = []\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            count += 1\n        else:\n            result.append([count, list1[i - 1]])\n            count = 1\n    result.append([count, list1[-1]])\n    return result"
    },
    {
        "id":148,
        "response":"def min_Ops(arr, n, k):\n    from collections import Counter\n    count = Counter(arr)\n    max_count = max(count.values())\n    if max_count >= k:\n        return 0\n    else:\n        return n - max_count"
    },
    {
        "id":149,
        "response":"def month_season(month, days):\n    month_dict = {\n        'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6,\n        'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12\n    }\n    month_num = month_dict[month]\n    if (month_num == 3 and days >= 20) or (month_num == 4 or month_num == 5) or (month_num == 6 and days < 21):\n        return 'spring'\n    elif (month_num == 6 and days >= 21) or (month_num == 7 or month_num == 8) or (month_num == 9 and days < 23):\n        return 'summer'\n    elif (month_num == 9 and days >= 23) or (month_num == 10 or month_num == 11) or (month_num == 12 and days < 21):\n        return 'autumn'\n    else:\n        return 'winter'"
    },
    {
        "id":150,
        "response":"def solution(a, b, n):\n    for x in range(n \/\/ a + 1):\n        y = (n - a * x) \/ b\n        if y >= 0 and y == int(y):\n            return ('x = ', x, ', y = ', int(y))\n    return None"
    },
    {
        "id":151,
        "response":"def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]"
    },
    {
        "id":152,
        "response":"def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    return (s * l ** 2) \/ (4 * math.tan(math.pi \/ s))"
    },
    {
        "id":154,
        "response":"def divSum(n, m):\n    def sum_of_divisors(num):\n        sum_div = 0\n        for i in range(1, num):\n            if num % i == 0:\n                sum_div += i\n        return sum_div\n\n    return sum_of_divisors(n) == sum_of_divisors(m)"
    },
    {
        "id":155,
        "response":"def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if (ord(str1[i].lower()) - ord('a') + 1) == i + 1:\n            count += 1\n    return count"
    },
    {
        "id":156,
        "response":"def find_even_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "id":157,
        "response":"def next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count"
    },
    {
        "id":158,
        "response":"def frequency(a, x):\n    return a.count(x)"
    },
    {
        "id":159,
        "response":"def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b"
    },
    {
        "id":160,
        "response":"def sum_range_list(list1, m, n):\n    if not list1 or m > n or m < 0 or n >= len(list1):\n        return 0\n    return sum(list1[m:n+1])"
    },
    {
        "id":161,
        "response":"def perimeter_pentagon(a):\n    return 5 * a"
    },
    {
        "id":162,
        "response":"def count_occurance(s):\n    count = 0\n    length = len(s)\n    i = 0\n    while i < length - 2:\n        if s[i:i+3] == 'std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "id":163,
        "response":"import re\ndef remove_splchar(text):\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    return text"
    },
    {
        "id":164,
        "response":"from collections import defaultdict\n\ndef group_keyvalue(l):\n    result = defaultdict(list)\n    for key, value in l:\n        result[key].append(value)\n    return dict(result)"
    },
    {
        "id":165,
        "response":"def is_valid_parenthese(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []"
    },
    {
        "id":166,
        "response":"def perimeter_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        return a + b + c"
    },
    {
        "id":167,
        "response":"def answer(L, R):\n    import math\n    for i in range(L, R+1):\n        for j in range(i+1, min(2*i, R+1)):\n            if (i*j)\/\/math.gcd(i, j) <= R and i != j:\n                return (i, j)\n    for i in range(L, R):\n        if 2 * i <= R:\n            return (i, 2*i)\n    return (-1, -1)"
    },
    {
        "id":168,
        "response":"def string_literals(patterns, text):\n    for pattern in patterns:\n        if pattern in text:\n            return 'Matched!'\n    return 'Not Matched!'"
    },
    {
        "id":169,
        "response":"def is_num_keith(x):\n    if x < 10:\n        return False\n\n    digits = [int(d) for d in str(x)]\n    seq = digits[:]\n    while seq[-1] < x:\n        next_term = sum(seq[-len(digits):])\n        seq.append(next_term)\n\n    return seq[-1] == x"
    },
    {
        "id":170,
        "response":"import math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371\n    dlat = math.radians(elat - slat)\n    dlon = math.radians(elon - slon)\n    a = math.sin(dlat \/ 2) * math.sin(dlat \/ 2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon \/ 2) * math.sin(dlon \/ 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = round(R * c * 1000, 6)\n    return d"
    },
    {
        "id":171,
        "response":"def common_prefix_util(strs, n):\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return strs[0]\n    strs.sort()\n    end = min(len(strs[0]), len(strs[n - 1]))\n    i = 0\n    while i < end and strs[0][i] == strs[n - 1][i]:\n        i += 1\n    return strs[0][:i]"
    },
    {
        "id":172,
        "response":"import re\nfrom typing import List, Tuple\n\ndef find_character(string: str) -> Tuple[List[str], List[str], List[str], List[str]]:\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\n    numeric = re.findall(r'\\d', string)\n    return uppercase, lowercase, special_char, numeric"
    },
    {
        "id":173,
        "response":"def count_pairs(arr, n, k):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    count = 0\n    for num in freq:\n        if num + k in freq:\n            count += 1\n    return count"
    },
    {
        "id":174,
        "response":"def greater_specificnum(lst, num):\n    return all(i > num for i in lst)"
    },
    {
        "id":175,
        "response":"def parabola_focus(a, b, c):\n    h = -b \/ (2 * a)\n    k = (4 * a * c - b**2) \/ (4 * a)\n    focus_x = h\n    focus_y = k + 1 \/ (4 * a)\n    return (focus_x, focus_y)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(re.escape(pattern), text):\n            return 'Matched!'\n    return text"
    },
    {
        "id":177,
        "response":"def longest_common_subsequence(X, Y, m, n):\n    L = [[None]*(n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0 :\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    count = 0\n    for i in range(int(math.sqrt(n)) + 1):\n        if math.sqrt(n - i * i) % 1 == 0:\n            count += 1\n    return count == 2"
    },
    {
        "id":179,
        "response":"def first_Missing_Positive(arr, n):\n    arr = list(set(arr))\n    arr.sort()\n    arr = [x for x in arr if x > 0]\n    if not arr or arr[0] > 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1"
    },
    {
        "id":180,
        "response":"import math\ndef count_Intgral_Points(x1, y1, x2, y2):\n    side_length = abs(x2 - x1)\n    return math.floor(side_length - 1) ** 2"
    },
    {
        "id":181,
        "response":"def check_monthnumber(monthname3):\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return monthname3 in months_with_30_days"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(s):\n    return bool(re.search(r'\\d', s) and re.search(r'[a-zA-Z]', s))"
    },
    {
        "id":183,
        "response":"from typing import Tuple\n\ndef remove_tuple(test_tup: Tuple) -> Tuple:\n    seen = set()\n    return tuple(sorted(x for x in test_tup if not (x in seen or seen.add(x))))\n\ndef main():\n    test_tup = (1, 3, 5, 2, 3, 5, 1, 1, 3)\n    print(remove_tuple(test_tup))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "id":184,
        "response":"def octal_To_Decimal(n):\n    return int(str(n), 8)"
    },
    {
        "id":185,
        "response":"def first(arr, x, n):\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "id":186,
        "response":"def remove_tuples(test_list, K):\n    return [tup for tup in test_list if len(tup) != K]"
    },
    {
        "id":187,
        "response":"def find_exponentio(test_tup1, test_tup2):\n    return tuple(a ** b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\n\ndef largest_triangle(r, _):\n    return (3 * r * r * math.sqrt(3)) \/ 4"
    },
    {
        "id":189,
        "response":"def highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i \/\/ 2"
    },
    {
        "id":190,
        "response":"def position_max(list1):\n    max_val = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_val]"
    },
    {
        "id":191,
        "response":"def chkList(lst):\n    return len(set(lst)) == 1"
    },
    {
        "id":192,
        "response":"def remove_even(str1):\n    return \"\".join([str1[i] for i in range(len(str1)) if i % 2 == 0])"
    },
    {
        "id":193,
        "response":"def hamming_Distance(n1, n2):\n    return bin(n1 ^ n2).count('1')"
    },
    {
        "id":194,
        "response":"def count(s, c):\n    return s.count(c)"
    },
    {
        "id":195,
        "response":"def inversion_elements(test_tup):\n    return tuple(-(i + 1) for i in test_tup)"
    },
    {
        "id":196,
        "response":"def concatenate_elements(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))"
    },
    {
        "id":197,
        "response":"def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num):\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        return heap\n    heapq.heappop(heap)\n    heapq.heappush(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string):\n    charRe = re.compile(r'[^a-zA-Z0-9]')\n    string = charRe.search(string)\n    return not bool(string)"
    },
    {
        "id":201,
        "response":"def count_Num(n):\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2**n):\n        if (i & 1) and ((i >> (n-1)) & 1):\n            count += 1\n    return count"
    },
    {
        "id":202,
        "response":"def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))"
    },
    {
        "id":203,
        "response":"def concatenate_strings(test_tup1, test_tup2):\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    degree = radian * (180 \/ math.pi)\n    return degree"
    },
    {
        "id":205,
        "response":"def decode_list(alist):\n    result = []\n    for item in alist:\n        if isinstance(item, list):\n            result.extend([item[1]] * item[0])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":206,
        "response":"def check_subset_list(list1, list2):\n    flat_list2 = set([item for sublist in list2 for item in sublist])\n    return set(list1).issubset(flat_list2)"
    },
    {
        "id":207,
        "response":"def first_Repeated_Char(str):\n    seen = set()\n    for char in str.lower():\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"
    },
    {
        "id":208,
        "response":"def min_Operations(A, B):\n    import math\n    if A == B:\n        return 0\n    if A > B:\n        A, B = B, A\n    return math.ceil(math.log2(B \/ A))"
    },
    {
        "id":209,
        "response":"def extract_min_max(test_tup, K):\n    sorted_tup = tuple(sorted(test_tup))\n    min_k = sorted_tup[:K]\n    max_k = sorted_tup[-K:]\n    return min_k + max_k"
    },
    {
        "id":210,
        "response":"import re\nimport itertools\n\ndef replace_max_specialchar(text, n):\n    count = 0\n    result = ''\n    for char in text:\n        if char in [' ', ',', '.']:\n            count += 1\n            if count <= n:\n                result += ':'\n            else:\n                result += char\n        else:\n            if result and result[-1] not in [' ', ',', '.']:\n                count = 0\n            result += char\n    return result"
    },
    {
        "id":211,
        "response":"def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
    },
    {
        "id":212,
        "response":"def check_type(test_tuple):\n    return len(set(type(i) for i in test_tuple)) == 1"
    },
    {
        "id":213,
        "response":"def is_majority(arr, n, x):\n    from bisect import bisect_left, bisect_right\n    left_index = bisect_left(arr, x)\n    right_index = bisect_right(arr, x)\n    return right_index - left_index > n \/ 2"
    },
    {
        "id":214,
        "response":"def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "id":215,
        "response":"def find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":216,
        "response":"def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "id":217,
        "response":"def min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"def all_Bits_Set_In_The_Given_Range(n, left, right):\n    mask = ((1 << (right - left + 1)) - 1) << (left - 1)\n    return (n & mask) == 0"
    },
    {
        "id":219,
        "response":"def re_arrange_array(arr, n):\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    return negatives[::-1] + positives"
    },
    {
        "id":220,
        "response":"def replace_blank(str1, char):\n    str1 = str1.replace(' ', char)\n    return str1"
    },
    {
        "id":221,
        "response":"def max_sum(tri, n):\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]"
    },
    {
        "id":222,
        "response":"def larg_nnum(list1, n):\n    list1.sort(reverse=True)\n    return list1[:n]"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsuface_cylinder(r, h):\n    return round(2 * math.pi * r * h, 12)"
    },
    {
        "id":224,
        "response":"def volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":"def even_bit_set_number(n):\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    return n | mask"
    },
    {
        "id":226,
        "response":"from math import comb\n\ndef No_of_Triangle(N, K):\n    return comb(N + K, K + 1) + comb(N + K, K)"
    },
    {
        "id":227,
        "response":"from collections import defaultdict\n\ndef check_occurences(test_list):\n    freq_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        freq_dict[sorted_tup] += 1\n    return dict(freq_dict)"
    },
    {
        "id":228,
        "response":"def number_of_substrings(s):\n    n = len(s)\n    return n*(n+1)\/\/2"
    },
    {
        "id":229,
        "response":"def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(1, m + 1):\n        current = i\n        valid = True\n        for _ in range(n - 1):\n            current *= 2\n            if current > m:\n                valid = False\n                break\n        if valid:\n            total += 1\n    return total"
    },
    {
        "id":230,
        "response":"def replace_list(list1, list2):\n    if len(list1) == 0:\n        return list1\n    list1[-1:] = list2\n    return list1"
    },
    {
        "id":231,
        "response":"def array_3d(m, n, o):\n    return [[[ '*' for _ in range(m)] for _ in range(n)] for _ in range(o)]"
    },
    {
        "id":232,
        "response":"def count_charac(str1):\n    return len(str1)"
    },
    {
        "id":233,
        "response":"from collections import defaultdict\n\ndef sort_on_occurence(lst):\n    count_dict = defaultdict(int)\n    name_dict = defaultdict(list)\n    for num, name in lst:\n        count_dict[num] += 1\n        name_dict[num].append(name)\n    \n    sorted_lst = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    result = []\n    for num, count in sorted_lst:\n        names = name_dict[num]\n        names.insert(0, num)\n        names.append(count)\n        result.append(tuple(names))\n    return result"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        root += 1\n    else:\n        root = math.ceil(root)\n    return int(root ** 2)"
    },
    {
        "id":235,
        "response":"def max_sum(arr, n):\n    if n == 0:\n        return 0\n    increasing = [x for x in arr]\n    decreasing = [x for x in arr]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing[i] = max(increasing[i], increasing[j] + arr[i])\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing[i] = max(decreasing[i], decreasing[j] + arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, increasing[i] + decreasing[i] - arr[i])\n    return max_sum"
    },
    {
        "id":236,
        "response":"def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number\")\n    if number == 0 or number == 1:\n        return number\n    \n    x = number\n    y = (x + 1) \/ 2\n    \n    while(y < x):\n        x = y\n        y = (x + number \/ x) \/ 2\n    \n    return x"
    },
    {
        "id":237,
        "response":"def lps(s):\n    import re\n    s = re.sub(r'\\W+', '', s).upper()\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and length == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]"
    },
    {
        "id":238,
        "response":"def harmonic_sum(n):\n    return sum(1.0\/i for i in range(1, n+1))"
    },
    {
        "id":239,
        "response":"def intersection_array(array_nums1, array_nums2):\n    return list(filter(lambda x: x in array_nums2, array_nums1))"
    },
    {
        "id":240,
        "response":"def count_X(tup, x):\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"from typing import List, Any\n\ndef insert_element(lst: List[Any], element: Any) -> List[Any]:\n    result = []\n    for i in lst:\n        result.extend([element, i])\n    return result"
    },
    {
        "id":242,
        "response":"import cmath\ndef convert(numbers):\n    complex_num = complex(numbers)\n    r, phi = cmath.polar(complex_num)\n    return (r, phi)"
    },
    {
        "id":243,
        "response":"def count_integer(list1):\n    count = sum(isinstance(x, int) and not isinstance(x, bool) for x in list1)\n    return count"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text):\n    words = re.findall(r'\\b\\w*[ae]\\w*\\b', text)\n    filtered_words = [word for word in words if word.lower().startswith(('a', 'e'))]\n    return filtered_words"
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    return list(itertools.combinations_with_replacement(l, n))"
    },
    {
        "id":246,
        "response":"def count_Primes_nums(n):\n    def sieve_of_eratosthenes(n):\n        primes = [True] * n\n        primes[0] = primes[1] = False\n        p = 2\n        while p * p < n:\n            if primes[p]:\n                for i in range(p * p, n, p):\n                    primes[i] = False\n            p += 1\n        return sum(1 for is_prime in primes if is_prime)\n    return sieve_of_eratosthenes(n)"
    },
    {
        "id":247,
        "response":"def swap_numbers(a, b):\n    a, b = b, a\n    return a, b"
    },
    {
        "id":248,
        "response":"def count_odd(array_nums):\n    count = sum(1 for num in array_nums if (lambda x: x % 2 != 0)(num))\n    return count"
    },
    {
        "id":249,
        "response":"def maximize_elements(test_tup1, test_tup2):\n    return tuple(tuple(max(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "id":250,
        "response":"def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 1\n    while True:\n        newman_num = 2**num + num\n        if is_prime(newman_num):\n            count += 1\n            if count == n:\n                return newman_num\n        num += 1"
    },
    {
        "id":251,
        "response":"def division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result.append(test_tup1[i] \/\/ test_tup2[i])\n    return tuple(result)"
    },
    {
        "id":252,
        "response":"def split_two_parts(list1, L):\n    return list1[:L], list1[L:]"
    },
    {
        "id":253,
        "response":"def merge_dict(d1, d2):\n    d2.update(d1)\n    return d2"
    },
    {
        "id":254,
        "response":"def dog_age(h_age):\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4"
    },
    {
        "id":255,
        "response":"def list_split(S, step):\n    return [S[i::step] for i in range(step)]"
    },
    {
        "id":256,
        "response":"def lateralsurface_cube(l):\n    return 4 * l ** 2"
    },
    {
        "id":257,
        "response":"def square_Sum(n):\n    return sum(i**2 for i in range(1, 2*n, 2))"
    },
    {
        "id":258,
        "response":"def find_star_num(n):\n    return 6 * n * (n - 1) + 1"
    },
    {
        "id":259,
        "response":"def ascii_value(k):\n    return ord(k)"
    },
    {
        "id":260,
        "response":"def sum_even_and_even_index(arr, n):\n    return sum(num for idx, num in enumerate(arr[:n]) if idx % 2 == 0 and num % 2 == 0)"
    },
    {
        "id":261,
        "response":"def even_Power_Sum(n):\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        sum += num ** 5\n        num += 2\n        count += 1\n    return sum"
    },
    {
        "id":262,
        "response":"def rear_extract(test_list):\n    return [sub[-1] for sub in test_list]"
    },
    {
        "id":263,
        "response":"def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)"
    },
    {
        "id":265,
        "response":"def get_Position(a, n, m):\n    from collections import deque\n    q = deque(a)\n    for _ in range(m):\n        if not q:\n            return -1\n        q.popleft()\n    if not q:\n        return -1\n    return a.index(q[0])"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    return round(math.pi * (r ** 2) * h, 13)"
    },
    {
        "id":267,
        "response":"def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"
    },
    {
        "id":268,
        "response":"def count_first_elements(test_tup):\n    count = 0\n    for ele in test_tup:\n        if isinstance(ele, tuple):\n            break\n        count += 1\n    return count"
    },
    {
        "id":269,
        "response":"def is_num_decagonal(n):\n    return (4*n*n - 3*n)"
    },
    {
        "id":270,
        "response":"def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "id":271,
        "response":"def all_unique(test_list):\n    return len(test_list) == len(set(test_list))"
    },
    {
        "id":272,
        "response":"def sub_list(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))"
    },
    {
        "id":273,
        "response":"def validate(n):\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for digit in str(n):\n        if freq[int(digit)] > int(digit):\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"def check_element(lst, element):\n    return all(i == element for i in lst)"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    },
    {
        "id":276,
        "response":"def max_sub_array_sum_repeated(a, n, k):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    total_sum = sum(a)\n    for i in range(n * min(k, 2)):\n        max_ending_here = max_ending_here + a[i % n]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    if k > 1 and total_sum > 0:\n        max_so_far = max(max_so_far, max_ending_here + (k - 2) * total_sum + max_suffix_sum(a, n))\n    return max_so_far\n\ndef max_suffix_sum(a, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(n - 1, -1, -1):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "id":277,
        "response":"def square_Sum(n):\n    total_sum = sum([i**2 for i in range(2, n*2+1, 2)])\n    return total_sum"
    },
    {
        "id":278,
        "response":"def modular_inverse(arr, N, P):\n    count = 0\n    for num in arr:\n        if pow(num, P-2, P) == num % P:\n            count += 1\n    return count"
    },
    {
        "id":279,
        "response":"def odd_Days(N):\n    return (N + (N \/\/ 4) - (N \/\/ 100) + (N \/\/ 400)) % 7"
    },
    {
        "id":280,
        "response":"def max_length(list1):\n    max_len = max(len(sublist) for sublist in list1)\n    max_len_list = next(sublist for sublist in list1 if len(sublist) == max_len)\n    return max_len, max_len_list"
    },
    {
        "id":281,
        "response":"def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same = k\n    diff = k * (k - 1)\n    total = same + diff\n    \n    for _ in range(2, n):\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    \n    return total"
    },
    {
        "id":282,
        "response":"def find(n, m):\n    if m == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return n \/\/ m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    if w == 0 or h == 0:\n        return max(w, h)\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "id":284,
        "response":"def max_val(listval):\n    nums = [x for x in listval if isinstance(x, (int, float))]\n    return max(nums) if nums else None"
    },
    {
        "id":285,
        "response":"def sum_div(number):\n    return sum(i for i in range(1, number) if number % i == 0)"
    },
    {
        "id":286,
        "response":"def get_Inv_Count(arr, n):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) \/\/ 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        merged, inv_merge = merge(left, right)\n        return merged, inv_left + inv_right + inv_merge\n\n    def merge(left, right):\n        result = []\n        i, j = 0, 0\n        inv_count = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result, inv_count\n\n    _, inv_count = merge_sort(arr)\n    return inv_count"
    },
    {
        "id":287,
        "response":"from typing import List, Any\n\ndef flatten_list(list1: List[Any]) -> List[Any]:\n    result = []\n    stack = list1[:]\n    while stack:\n        current = stack.pop(0)\n        if isinstance(current, list):\n            stack = current + stack\n        else:\n            result.append(current)\n    return result"
    },
    {
        "id":288,
        "response":"def intersection_nested_lists(l1, l2):\n    s1 = set(l1)\n    return [list(set(sublist) & s1) for sublist in l2]"
    },
    {
        "id":289,
        "response":"from typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_dict = {}\n    for name, score in stdata:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    return max_name, aggregate_dict[max_name]"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    return math.comb(2*n, n)"
    },
    {
        "id":291,
        "response":"def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)"
    },
    {
        "id":292,
        "response":"def set_Bit_Number(n):\n    import math\n    if n == 0:\n        return 0\n    return 2 ** int(math.log2(n))"
    },
    {
        "id":293,
        "response":"def solve(a, n):\n    count1 = sum(1 for i, x in enumerate(a) if x == i)\n    count2 = sum(1 for i, x in enumerate(a) if a[x] == n - i - 1)\n    return count1 == count2"
    },
    {
        "id":294,
        "response":"def find_Element(arr, ranges, rotations, index):\n    from collections import deque\n    for start, end in ranges[::-1]:\n        rotations = rotations % (end - start + 1)\n        d = deque(arr[start:end+1])\n        d.rotate(rotations)\n        arr[start:end+1] = list(d)\n    return arr[index]\n\ndef find_Element(arr, ranges, rotations, index):\n    total_rotations = sum((end - start + 1) for start, end in ranges) * rotations\n    for start, end in ranges[::-1]:\n        if index >= start and index <= end:\n            index = (index - start + total_rotations) % (end - start + 1) + start\n            total_rotations -= (end - start + 1) * rotations\n        total_rotations -= (end - start + 1) * rotations\n    return arr[index]"
    },
    {
        "id":295,
        "response":"def start_withp(words):\n    words = words[0].split()\n    p_words = [word for word in words if word.lower().startswith('p')]\n    return tuple(p_words[:2]) if len(p_words) >= 2 else ()"
    },
    {
        "id":296,
        "response":"def max_sum_increasing_subseq(a, n, index, k):\n    import bisect\n    msis = [num for num in a]\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and msis[i] < msis[j] + a[i]:\n                msis[i] = msis[j] + a[i]\n    max_sum = float('-inf')\n    for i in range(index + 1, k + 1):\n        if a[i] > a[index] and msis[i] > max_sum:\n            max_sum = msis[i]\n    if max_sum == float('-inf'):\n        return a[index]\n    return max_sum"
    },
    {
        "id":297,
        "response":"def colon_tuplex(tuplex, m, n):\n    tuplex = list(tuplex)\n    if isinstance(tuplex[m], list):\n        tuplex[m].append(n)\n    else:\n        tuplex[m] = [n]\n    return tuple(tuplex)"
    },
    {
        "id":298,
        "response":"import heapq\n\ndef large_product(nums1, nums2, N):\n    return heapq.nlargest(N, (a * b for a in nums1 for b in nums2))"
    },
    {
        "id":299,
        "response":"def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "id":300,
        "response":"def string_to_tuple(str1):\n    return tuple(str1.replace(\" \", \"\"))"
    },
    {
        "id":301,
        "response":"def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    x = 1\n    left_most_unset = None\n    while x <= n:\n        if not (n & x):\n            left_most_unset = x\n        x <<= 1\n    if left_most_unset is None:\n        return n\n    return n | left_most_unset"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    return (1.0\/3) * math.pi * r * r * h"
    },
    {
        "id":303,
        "response":"def pos_nos(list1):\n    return ','.join(map(str, [num for num in list1 if num > 0]))"
    },
    {
        "id":304,
        "response":"def max_sum_rectangular_grid(grid, n):\n    incl = 0\n    excl = 0\n     \n    for i in range(n):\n        new_excl = max(incl, excl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = new_excl\n     \n    return max(incl, excl)"
    },
    {
        "id":305,
        "response":"def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            result = word\n    return result"
    },
    {
        "id":306,
        "response":"def find_last_occurrence(A, x):\n    for i in range(len(A) - 1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "id":307,
        "response":"from itertools import groupby\n\ndef modified_encode(alist):\n    result = []\n    for key, group in groupby(alist):\n        count = len(list(group))\n        if count == 1:\n            result.append(key)\n        else:\n            result.append([count, key])\n    return result"
    },
    {
        "id":308,
        "response":"def max_volume(s):\n    import math\n    s = s \/ 3\n    if s.is_integer():\n        return int(s) ** 3\n    else:\n        a = math.floor(s)\n        b = a + 1\n        x = s - a\n        return a ** 2 * (a + x) if x <= 0.5 else a * b ** 2"
    },
    {
        "id":309,
        "response":"import re\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)"
    },
    {
        "id":310,
        "response":"def sum_difference(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) \/\/ 6\n    square_of_sum = (n * (n + 1) \/\/ 2) ** 2\n    return square_of_sum - sum_of_squares"
    },
    {
        "id":311,
        "response":"def find_demlo(s):\n    n = len(s)\n    result = ''\n    for i in range(1, n+1):\n        result += str(i)\n    for i in range(n-1, 0, -1):\n        result += str(i)\n    return result"
    },
    {
        "id":312,
        "response":"def position_min(list1):\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]"
    },
    {
        "id":313,
        "response":"def right_rotate(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\ndef rearrange(arr, n):\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if ((arr[index] >= 0 and arr[out_of_place] < 0) or \n                (arr[index] < 0 and arr[out_of_place] >= 0)):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if out_of_place == -1:\n            if ((arr[index] >= 0 and index % 2 == 1) or \n                (arr[index] < 0 and index % 2 == 0)):\n                out_of_place = index\n    return arr\n\ndef rearrange_array(arr, n):\n    return rearrange(arr, n)\n\ndef right_rotate(arr, n):\n    return rearrange_array(arr, len(arr))"
    },
    {
        "id":314,
        "response":"def sum_of_alternates(test_tuple):\n    sum1 = sum(test_tuple[::2])\n    sum2 = sum(test_tuple[1::2])\n    return (sum2, sum1)"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]"
    },
    {
        "id":316,
        "response":"from collections import Counter\nimport re\n\ndef most_occurrences(test_list):\n    words = ' '.join(test_list).lower()\n    words = re.findall(r'\\b\\w+\\b', words)\n    count = Counter(words)\n    max_count = max(count.values(), default=0)\n    most_common_words = [word for word, freq in count.items() if freq == max_count]\n    return max(most_common_words)"
    },
    {
        "id":317,
        "response":"def check_isosceles(x, y, z):\n    sides = sorted([x, y, z])\n    return sides[0] == sides[1] or sides[1] == sides[2]"
    },
    {
        "id":318,
        "response":"def rotate_left(list1, m, n):\n    list1 = (list1 * ((n \/\/ len(list1)) + 2))[:n]\n    m = m % len(list1)\n    list1 = list1[m:] + list1[:m]\n    return list1"
    },
    {
        "id":319,
        "response":"def neg_count(lst):\n    count = sum(1 for num in lst if num < 0)\n    return count"
    },
    {
        "id":320,
        "response":"import re\nfrom typing import List\n\ndef find_char(text: str) -> List[str]:\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) in [3, 4, 5]]"
    },
    {
        "id":321,
        "response":"def count_unset_bits(n):\n    bits = n.bit_length()\n    total_bits = bits\n    count = 0\n    while n:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return total_bits - count"
    },
    {
        "id":322,
        "response":"def char_frequency(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq"
    },
    {
        "id":323,
        "response":"def Sort(sub_li):\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li"
    },
    {
        "id":324,
        "response":"def check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"
    },
    {
        "id":325,
        "response":"def ap_sum(a, n, d):\n    sum_of_ap = (n \/ 2) * (2 * a + (n - 1) * d)\n    return sum_of_ap"
    },
    {
        "id":326,
        "response":"def check_monthnum(monthname1):\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return month_days.get(monthname1, None) == 28"
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text):\n    patterns = ['python']\n    for pattern in patterns:\n        if re.search(pattern + r'\\W*$', text):\n            return 'Found a match!'\n    return 'Not matched!'"
    },
    {
        "id":328,
        "response":"def check_Equality(s):\n    count = 0\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        count += char_count[char] * (char_count[char] + 1) \/\/ 2\n    return count"
    },
    {
        "id":329,
        "response":"import math\n\ndef find_Divisor(x, y):\n    if x == y:\n        return x\n    gcd = math.gcd(x, y)\n    count = {}\n    for i in range(1, int(gcd ** 0.5) + 1):\n        if gcd % i == 0:\n            count[i] = count.get(i, 0) + 1\n            if i != gcd \/\/ i:\n                count[gcd \/\/ i] = count.get(gcd \/\/ i, 0) + 1\n    max_count = max(count.values())\n    max_divisor = max([k for k, v in count.items() if v == max_count])\n    return max_divisor"
    },
    {
        "id":330,
        "response":"def sum_three_smallest_nums(lst):\n    positive_nums = sorted([num for num in lst if num > 0])\n    return sum(positive_nums[:3]) if len(positive_nums) >= 3 else None"
    },
    {
        "id":331,
        "response":"def set_to_tuple(s):\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"import heapq\nfrom typing import List, Tuple, Optional\n\nclass Node:\n    def __init__(self, value: int, list_num: int, index: int):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other: 'Node') -> bool:\n        return self.value < other.value\n\ndef smallest_range(nums: List[List[int]]) -> Tuple[int, int]:\n    min_heap: List[Node] = []\n    max_val: int = float('-inf')\n    for i, num_list in enumerate(nums):\n        node: Node = Node(num_list[0], i, 0)\n        min_heap.append(node)\n        max_val = max(max_val, num_list[0])\n    heapq.heapify(min_heap)\n\n    min_range: Optional[Tuple[int, int]] = None\n    while min_heap:\n        node: Node = min_heap[0]\n        min_val: int = node.value\n        if min_range is None or max_val - min_val < min_range[1] - min_range[0]:\n            min_range = (min_val, max_val)\n        if node.index + 1 == len(nums[node.list_num]):\n            break\n        next_node: Node = Node(nums[node.list_num][node.index + 1], node.list_num, node.index + 1)\n        max_val = max(max_val, next_node.value)\n        heapq.heapreplace(min_heap, next_node)\n    return min_range\n\ndef __init__(nums: List[List[int]]) -> Tuple[int, int]:\n    return smallest_range(nums)\n\nprint(__init__([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]))"
    },
    {
        "id":333,
        "response":"def dig_let(s):\n    letter_count = sum(1 for c in s if c.isalpha())\n    digit_count = sum(1 for c in s if c.isdigit())\n    return letter_count, digit_count"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m + 1):\n        sqrt = math.sqrt(i)\n        if sqrt == int(sqrt):\n            factors = set()\n            for j in range(1, int(sqrt) + 1):\n                if i % j == 0:\n                    factors.add(j)\n                    factors.add(i \/\/ j)\n            odd_count = sum(1 for f in factors if f % 2 != 0)\n            if odd_count % 2 != 0:\n                count += 1\n    return count"
    },
    {
        "id":335,
        "response":"def diff_consecutivenums(nums):\n    return [abs(nums[i] - nums[i-1]) for i in range(1, len(nums))]"
    },
    {
        "id":336,
        "response":"def zigzag(n, k):\n    import math\n    return math.comb(n + k - 1, n)"
    },
    {
        "id":337,
        "response":"def count_Squares(m, n):\n    total = 0\n    for i in range(1, min(m, n) + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n, r=None):\n    if r is None:\n        r = n\n    return math.comb(2*n, n) \/\/ (n + 1)"
    },
    {
        "id":339,
        "response":"def check(string):\n    try:\n        int(string, 2)\n        return \"Yes\"\n    except ValueError:\n        return \"No\""
    },
    {
        "id":340,
        "response":"from collections import Counter\n\ndef minimum_Length(s: str) -> int:\n    freq = Counter(s)\n    for count in sorted(freq.values()):\n        s = s.replace(s[0], '', count)\n        if len(set(s)) <= 1:\n            return len(s)\n    return len(s)"
    },
    {
        "id":341,
        "response":"from collections import OrderedDict\n\ndef first_Element(arr, n, k):\n    count_dict = OrderedDict()\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value == k:\n            return key\n    return -1"
    },
    {
        "id":342,
        "response":"def unique_Characters(s):\n    return len(s) == len(set(s))"
    },
    {
        "id":343,
        "response":"def remove_column(list1, n):\n    return [row[:n] + row[n+1:] for row in list1]"
    },
    {
        "id":344,
        "response":"def tn_ap(a, n, d):\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"def count_Rectangles(radius):\n    count = 0\n    for l in range(1, 2*radius + 1):\n        for b in range(1, 2*radius + 1):\n            if l*l + b*b <= 4*radius*radius:\n                count += 1\n    return count"
    },
    {
        "id":346,
        "response":"def find_angle(a, b):\n    return 180 - (a + b)"
    },
    {
        "id":347,
        "response":"def find_max(test_list):\n    return max(max(inner_tuple) for inner_tuple in test_list)"
    },
    {
        "id":348,
        "response":"def moddiv_list(nums1, nums2):\n    return list(map(lambda x, y: x % y, nums1, nums2))"
    },
    {
        "id":349,
        "response":"def Check_Solution(a, b, c):\n    import math\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    root1 = (-b + math.sqrt(d)) \/ (2*a)\n    root2 = (-b - math.sqrt(d)) \/ (2*a)\n    return \"Yes\" if (root1 == 2*root2 or root2 == 2*root1) else \"No\""
    },
    {
        "id":350,
        "response":"def get_carol(n):\n    return ((2 ** n) - 1) ** 2 - 2"
    },
    {
        "id":351,
        "response":"def remove_empty(list1):\n    return [i for i in list1 if i != []]"
    },
    {
        "id":352,
        "response":"from collections import Counter\n\ndef max_occurrences(nums):\n    count = Counter(nums)\n    return max(count, key=count.get)"
    },
    {
        "id":353,
        "response":"def add_K_element(test_list, K):\n    return [tuple(i + K for i in t) for t in test_list]"
    },
    {
        "id":354,
        "response":"def make_flip(ch):\n    ch = list(ch)\n    count1, count2 = 0, 0\n    for i in range(len(ch)):\n        if i % 2 == 0 and ch[i] != '1':\n            count1 += 1\n        elif i % 2 != 0 and ch[i] != '0':\n            count1 += 1\n    for i in range(len(ch)):\n        if i % 2 == 0 and ch[i] != '0':\n            count2 += 1\n        elif i % 2 != 0 and ch[i] != '1':\n            count2 += 1\n    return min(count1, count2)"
    },
    {
        "id":355,
        "response":"def count_Digit(n):\n    return len(str(abs(n)))"
    },
    {
        "id":356,
        "response":"def adjacent_num_product(list_nums):\n    if len(list_nums) < 2:\n        return None\n    return max(a * b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "id":357,
        "response":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isBalanced(self, root):\n        def check(root):\n            if root is None:\n                return 0\n            left  = check(root.left)\n            right = check(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return 1 + max(left, right)\n            \n        return check(root) != -1\n\n    def __init__(self, root):\n        self.result = self.isBalanced(root)\n\ndef main(root):\n    solution = Solution(root)\n    return solution.result\n\ndef __init__(root):\n    return main(root)\n\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nroot.left.left.left = Node(6)"
    },
    {
        "id":358,
        "response":"def repeat_tuples(test_tup, N):\n    return (test_tup,) * N"
    },
    {
        "id":359,
        "response":"def lateralsurface_cuboid(l, w, h):\n    return 2 * (l + w) * h"
    },
    {
        "id":360,
        "response":"def float_sort(price):\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)"
    },
    {
        "id":361,
        "response":"def smallest_missing(A, left_element, right_element):\n    if not A:\n        return left_element\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if A[mid] == mid + left_element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + left_element"
    },
    {
        "id":362,
        "response":"import heapq\nfrom typing import List\n\ndef heap_assending(nums: List[int]) -> List[int]:\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(len(nums))]"
    },
    {
        "id":363,
        "response":"def volume_cuboid(l, w, h):\n    return l * w * h"
    },
    {
        "id":364,
        "response":"from itertools import permutations\n\ndef permute_string(s):\n    perms = set(''.join(p) for p in permutations(s))\n    return list(perms)"
    },
    {
        "id":365,
        "response":"def round_num(n, m):\n    return m * round(n \/ m)"
    },
    {
        "id":366,
        "response":"from itertools import groupby\n\ndef remove_replica(test_tup):\n    result = []\n    for k, g in groupby(test_tup):\n        lst = list(g)\n        if len(lst) > 1:\n            result.append(k)\n            result.extend(['MSP'] * (len(lst) - 1))\n        else:\n            result.append(k)\n    return tuple(result)"
    },
    {
        "id":367,
        "response":"def remove_Char(s, c):\n    return s.replace(c, '')"
    },
    {
        "id":368,
        "response":"def move_first(test_list):\n    if len(test_list) > 0:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n    return test_list"
    },
    {
        "id":369,
        "response":"def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)"
    },
    {
        "id":370,
        "response":"def multi_list(rownum, colnum):\n    return [[i*j for j in range(colnum)] for i in range(rownum)]"
    },
    {
        "id":371,
        "response":"def index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])"
    },
    {
        "id":372,
        "response":"def find_rotation_count(A):\n    low = 0\n    high = len(A) - 1\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if A[mid] > A[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low"
    },
    {
        "id":373,
        "response":"def even_bit_toggle_number(n):\n    mask = 0\n    for i in range(n.bit_length() if n != 0 else 1):\n        if (i + 1) % 2 == 0:\n            mask |= (1 << i)\n    return n ^ mask"
    },
    {
        "id":374,
        "response":"def frequency_Of_Smallest(n, arr):\n    min_val = min(arr)\n    return arr.count(min_val)"
    },
    {
        "id":375,
        "response":"def get_perrin(n):\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return perrin[n]"
    },
    {
        "id":376,
        "response":"def swap_count(s):\n    l = list(s)\n    count = 0\n    imbalance = 0\n    for i in range(len(l)):\n        if l[i] == '[':\n            imbalance += 1\n        elif l[i] == ']':\n            imbalance -= 1\n        if imbalance < 0:\n            j = i + 1\n            while j < len(l) and l[j] != '[':\n                j += 1\n            l[i], l[j] = l[j], l[i]\n            count += 1\n            imbalance += 2\n    return count"
    },
    {
        "id":377,
        "response":"def even_or_odd(N):\n    try:\n        decimal = int(N, 16)\n        if decimal % 2 == 0:\n            return \"Even\"\n        else:\n            return \"Odd\"\n    except ValueError:\n        return \"Invalid input\""
    },
    {
        "id":378,
        "response":"def highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i \/\/ 2"
    },
    {
        "id":379,
        "response":"def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"
    },
    {
        "id":380,
        "response":"def add_string(lst, string):\n    return [string.format(i) for i in lst]"
    },
    {
        "id":381,
        "response":"def convert_list_dictionary(l1, l2, l3):\n    return [{k1: {k2: k3}} for k1, k2, k3 in zip(l1, l2, l3)]"
    },
    {
        "id":382,
        "response":"def get_max_sum(n):\n    dp = [0] * (n + 1)\n    for i in range(n + 1):\n        dp[i] = max(i, dp[i\/\/2] + dp[i\/\/3] + dp[i\/\/4] + dp[i\/\/5])\n    return dp[n]"
    },
    {
        "id":383,
        "response":"def max_length_list(input_list):\n    max_len = max(map(len, input_list))\n    max_len_list = list(filter(lambda x: len(x) == max_len, input_list))[0]\n    return (max_len, max_len_list)"
    },
    {
        "id":384,
        "response":"def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"from collections import Counter\n\ndef first_non_repeating_character(str1):\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "id":386,
        "response":"import re\n\ndef check_char(string):\n    if not string:\n        return \"Invalid\"\n    pattern = r'^(.).*\\1$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    return \"Invalid\""
    },
    {
        "id":387,
        "response":"def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]"
    },
    {
        "id":388,
        "response":"def sum_of_digits(nums):\n    return sum(sum(int(digit) for digit in str(num)) for num in nums)"
    },
    {
        "id":389,
        "response":"def bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"from typing import List, Tuple\nfrom collections import defaultdict\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    freq_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        freq_dict[sorted_tup] += 1\n    count = len(freq_dict)\n    return count"
    },
    {
        "id":391,
        "response":"def add_nested_tuples(test_tup1, test_tup2):\n    return tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"def ncr_modp(n, r, p):\n    import math\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p"
    },
    {
        "id":393,
        "response":"import re\n\ndef is_valid_URL(url):\n    pattern = re.compile(\n        r'^(?:http|ftp)s?:\/\/'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:\/?|[\/?]\\S+)$', re.IGNORECASE)\n    return bool(pattern.match(url))"
    },
    {
        "id":394,
        "response":"def minimum(a, b):\n    return min(a, b)"
    },
    {
        "id":395,
        "response":"def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex"
    },
    {
        "id":396,
        "response":"def find_Parity(x):\n    count = bin(x).count('1')\n    if count % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""
    },
    {
        "id":397,
        "response":"def rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return n\n    x = digits[i - 1]\n    smallest_idx = i\n    for j in range(i, len(digits)):\n        if x < digits[j] <= digits[smallest_idx]:\n            smallest_idx = j\n    digits[i - 1], digits[smallest_idx] = digits[smallest_idx], x\n    digits[i:] = sorted(digits[i:])\n    return int(''.join(digits))"
    },
    {
        "id":398,
        "response":"import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(len(nums1))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n    return pairs"
    },
    {
        "id":399,
        "response":"def min_product_tuple(list1):\n    return min(a * b for a, b in list1)"
    },
    {
        "id":400,
        "response":"def min_val(listval):\n    nums = [x for x in listval if isinstance(x, (int, float))]\n    return min(nums) if nums else None"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word):\n    words = re.sub(r'(?:^|_)(\\w)', lambda x: x.group(1).upper(), word)\n    return words"
    },
    {
        "id":402,
        "response":"def remove_odd(l):\n    l[:] = [i for i in l if i % 2 == 0]\n    return l"
    },
    {
        "id":403,
        "response":"def extract_nth_element(list1, n):\n    return [i[n] for i in list1]"
    },
    {
        "id":404,
        "response":"def overlapping(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return list1\n    else:\n        return False"
    },
    {
        "id":405,
        "response":"def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    for num in arr:\n        if num > max1:\n            max1, max2 = num, max1\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min1, min2 = num, min1\n        elif num < min2:\n            min2 = num\n    if max1 * max2 > min1 * min2:\n        return (max2, max1) \n    else:\n        return (min1, min2) if min1 <= min2 else (min2, min1)"
    },
    {
        "id":406,
        "response":"def breakSum(n):\n    if n < 12:\n        return n\n    return breakSum(n \/\/ 2) + breakSum(n \/\/ 3) + breakSum(n \/\/ 4)"
    },
    {
        "id":407,
        "response":"from itertools import groupby\n\ndef group_tuples(Input):\n    sorted_Input = sorted(Input, key=lambda x: x[0])\n    result = []\n    for key, group in groupby(sorted_Input, key=lambda x: x[0]):\n        group_list = list(group)\n        first_element = group_list[0][0]\n        rest_elements = tuple(sorted(set(t[1] for t in group_list)))\n        combined_tuple = (first_element,) + rest_elements\n        result.append(combined_tuple)\n    return result"
    },
    {
        "id":408,
        "response":"def Find_Max(lst):\n    return max(lst, key=len)"
    },
    {
        "id":409,
        "response":"def round_and_sum(list1):\n    total = sum(round(num) for num in list1)\n    return total * len(list1)"
    },
    {
        "id":410,
        "response":"def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**3\n    return sum"
    },
    {
        "id":411,
        "response":"def concatenate_tuple(test_tup):\n    return '-'.join(map(str, test_tup))"
    },
    {
        "id":412,
        "response":"def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    return sum_of_cubes \/ n"
    },
    {
        "id":413,
        "response":"def get_maxgold(gold, m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                dp[row][col] = gold[row][col]\n            else:\n                max_val = 0\n                if row > 0:\n                    max_val = max(max_val, dp[row-1][col+1])\n                max_val = max(max_val, dp[row][col+1])\n                if row < m-1:\n                    max_val = max(max_val, dp[row+1][col+1])\n                dp[row][col] = gold[row][col] + max_val\n    max_gold = 0\n    for i in range(m):\n        max_gold = max(max_gold, dp[i][0])\n    return max_gold"
    },
    {
        "id":414,
        "response":"def extract_rear(test_tuple):\n    return [elem[-1] for elem in test_tuple]"
    },
    {
        "id":415,
        "response":"def count_element_in_list(list1, x):\n    return sum(1 for sublist in list1 if x in sublist)"
    },
    {
        "id":416,
        "response":"def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "id":418,
        "response":"def shell_sort(my_list):\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list"
    },
    {
        "id":419,
        "response":"def and_tuples(test_tup1, test_tup2):\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":420,
        "response":"def parabola_directrix(a, b, c):\n    return -(1 + b**2 - 4*a*c)\/(4*a)"
    },
    {
        "id":421,
        "response":"def common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "id":422,
        "response":"def median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":"def check_greater(arr, number):\n    if all(i < number for i in arr):\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'.*B+.*')\n    if pattern.fullmatch(text):\n        return text\n    else:\n        return 'Not matched!'"
    },
    {
        "id":425,
        "response":"def last_Digit(n):\n    return n % 10"
    },
    {
        "id":426,
        "response":"def neg_nos(list1):\n    return tuple(num for num in list1 if num < 0)"
    },
    {
        "id":427,
        "response":"def remove_odd(str1):\n    return str1[1::2]"
    },
    {
        "id":428,
        "response":"from collections import Counter\n\ndef count_bidirectional(test_list):\n    test_list = list(map(tuple, map(sorted, test_list)))\n    freq = Counter(test_list)\n    count = sum(1 for f in freq.values() if f >= 2)\n    return str(count)"
    },
    {
        "id":429,
        "response":"def multiple_to_single(L):\n    return int(''.join(map(str, L)))"
    },
    {
        "id":430,
        "response":"import re\n\ndef find_adverb_position(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    for adverb in adverbs:\n        index = text.find(adverb)\n        return (index, index + len(adverb), adverb)\n    return None"
    },
    {
        "id":431,
        "response":"def surfacearea_cube(l):\n    return 6 * l ** 2"
    },
    {
        "id":432,
        "response":"def positive_count(nums):\n    total_count = len(nums)\n    positive_count = sum(1 for num in nums if num > 0)\n    return round(positive_count \/ total_count, 2)"
    },
    {
        "id":433,
        "response":"def largest_neg(list1):\n    neg_numbers = [num for num in list1 if num < 0]\n    if neg_numbers:\n        return min(neg_numbers)\n    return list1"
    },
    {
        "id":434,
        "response":"def trim_tuple(test_list, K):\n    return str([tuple([tup[K]]) for tup in test_list])"
    },
    {
        "id":435,
        "response":"def index_multiplication(test_tup1, test_tup2):\n    return tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":"def count_Occurrence(tup, lst):\n    count = sum(1 for elem in tup if elem in lst)\n    return count"
    },
    {
        "id":437,
        "response":"def cube_nums(nums):\n    nums = list(map(lambda x: x ** 3, nums))\n    return nums"
    },
    {
        "id":438,
        "response":"def cal_sum(n):\n    return sum(i for i in range(n + 1) if i % 2 != 0)"
    },
    {
        "id":439,
        "response":"def check_Triangle(x1, y1, x2, y2, x3, y3):\n    area = abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) \/ 2.0)\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "id":440,
        "response":"def extract_string(str_list, length):\n    return [s for s in str_list if len(s) == length]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1):\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "id":442,
        "response":"def loss_amount(actual_cost, sale_amount):\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return None"
    },
    {
        "id":443,
        "response":"def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    patterns = '\\w*z.\\w*'\n    if re.search(patterns,  text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')"
    },
    {
        "id":445,
        "response":"def check_monthnumb_number(monthnum2):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days"
    },
    {
        "id":446,
        "response":"def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"def Find_Min(lst):\n    return min(lst, key=len)"
    },
    {
        "id":448,
        "response":"def rectangle_area(l, b):\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1"
    },
    {
        "id":450,
        "response":"def Extract(lst):\n    return [item[0] for item in lst]"
    },
    {
        "id":451,
        "response":"def upper_ctr(s):\n    return sum(1 for c in s if c.isupper()) - 1 if sum(1 for c in s if c.isupper()) > 0 else 0"
    },
    {
        "id":452,
        "response":"import itertools\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.combinations(list1, r))\n    return [list(tup) for tup in sorted(result, key=lambda x: (len(x), list(reversed(x))))]"
    },
    {
        "id":453,
        "response":"def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n            \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result"
    },
    {
        "id":454,
        "response":"def check_value(dict, n):\n    return all(value == n for value in dict.values())"
    },
    {
        "id":455,
        "response":"def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "id":456,
        "response":"def find_peak_util(arr, n):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n            return mid\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1"
    },
    {
        "id":457,
        "response":"def decimal_to_Octal(deciNum):\n    return int(oct(deciNum)[2:])"
    },
    {
        "id":458,
        "response":"def max_product(arr, n):\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], temp * arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "id":459,
        "response":"def max_profit(price, k):\n    n = len(price)\n    if n < 2:\n        return 0\n    if k >= n \/\/ 2:\n        return sum(max(0, b - a) for a, b in zip(price, price[1:]))\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n    return dp[k][n - 1]"
    },
    {
        "id":460,
        "response":"def add_pairwise(test_tup):\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "id":461,
        "response":"def find_remainder(arr, lens, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product % n"
    },
    {
        "id":462,
        "response":"def check_Consecutive(l):\n    return len(l) > 0 and max(l) - min(l) == len(l) - 1 and len(set(l)) == len(l)"
    },
    {
        "id":463,
        "response":"def tuple_intersection(test_list1, test_list2):\n    set1 = set(frozenset(t) for t in test_list1)\n    set2 = set(frozenset(t) for t in test_list2)\n    intersection = set1 & set2\n    return set(tuple(sorted(t)) for t in intersection)"
    },
    {
        "id":464,
        "response":"def replace_char(str1, ch, newch):\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "id":465,
        "response":"def sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)"
    },
    {
        "id":466,
        "response":"def big_sum(nums):\n    return max(nums) + min(nums)"
    },
    {
        "id":467,
        "response":"def is_lower(string):\n    return string.lower()"
    },
    {
        "id":468,
        "response":"def remove_lowercase(str1):\n    str1 = ''.join([char for char in str1 if not char.islower()])\n    return str1"
    },
    {
        "id":469,
        "response":"def first_Digit(n):\n    n = str(abs(n))\n    return int(n[0])"
    },
    {
        "id":470,
        "response":"from collections import Counter\n\ndef get_max_occuring_char(str1):\n    counter = Counter(str1)\n    return max(counter, key=counter.get)"
    },
    {
        "id":471,
        "response":"def is_subset_sum(set, n, sum):\n    subset = [[False for _ in range(sum + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        subset[i][0] = True\n    for i in range(1, sum + 1):\n        subset[0][i] = False\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            else:\n                subset[i][j] = subset[i - 1][j] or subset[i - 1][j - set[i - 1]]\n    return subset[n][sum]"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    pattern = r\"[A-Z][a-z]+\"\n    if re.search(pattern, text):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if math.factorial(i) % x == 0:\n            return i\n        i += 1"
    },
    {
        "id":474,
        "response":"def remove_matching_tuple(test_list1, test_list2):\n    test_list2_set = set(test_list2)\n    return [tup for tup in test_list1 if tup not in test_list2_set]"
    },
    {
        "id":475,
        "response":"def is_palindrome(arr, n):\n    max_palindrome = -1\n    for num in arr:\n        str_num = str(num)\n        if str_num == str_num[::-1] and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n, r, p):\n    combination = math.comb(n, r)\n    probability = combination * (p ** r) * ((1 - p) ** (n - r))\n    return probability"
    },
    {
        "id":477,
        "response":"def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    return (math.sqrt(25 + 10 * math.sqrt(5)) \/ 4) * (a ** 2)"
    },
    {
        "id":479,
        "response":"def frequency_Of_Largest(n, arr):\n    max_val = max(arr)\n    return arr.count(max_val)"
    },
    {
        "id":480,
        "response":"def extract_symmetric(test_list):\n    return set([ele for ele in test_list if (ele[1], ele[0]) in test_list and ele[0] <= ele[1]])"
    },
    {
        "id":481,
        "response":"def sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) \/ (1 - r)"
    },
    {
        "id":482,
        "response":"def binary_search(item_list, item):\n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) \/\/ 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found"
    },
    {
        "id":483,
        "response":"import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    for x in range(startx, endx+1):\n        for y in range(starty, endy+1):\n            cx = (x + (y % 2) * 0.5) * radius * 1.5 \n            cy = y * radius * math.sqrt(3)\n            hexagon = []\n            for i in range(7):\n                angle = 2 * math.pi \/ 6 * (i % 6) \n                if y % 2 == 1:\n                    angle += math.pi \/ 6\n                px = cx + radius * math.cos(angle)\n                py = cy + radius * math.sin(angle)\n                hexagon.append((px, py))\n            polygons.append(hexagon)\n    return polygons"
    },
    {
        "id":484,
        "response":"def binary_to_integer(test_tup):\n    binary_str = ''.join(map(str, test_tup))\n    return str(int(binary_str, 2))"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\nfrom typing import List\n\ndef heap_queue_smallest(nums: List[int], n: int) -> List[int]:\n    return heapq.nsmallest(n, nums)"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"import math\n\ndef gcd(x, y):\n    return math.gcd(x, y)"
    },
    {
        "id":489,
        "response":"def diameter_circle(r):\n    return 2 * r"
    },
    {
        "id":490,
        "response":"def concatenate_elements(list):\n    return '  ' + ' '.join(list)"
    },
    {
        "id":491,
        "response":"def min_cost(cost, m, n):\n    rows = m + 1\n    cols = n + 1\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"def similar_elements(test_tup1, test_tup2):\n    return tuple(sorted(set(test_tup1) & set(test_tup2)))"
    },
    {
        "id":493,
        "response":"def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "id":494,
        "response":"import heapq\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, nums)"
    },
    {
        "id":495,
        "response":"def count_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    a, b = 1, 0\n    for _ in range(2, n + 1):\n        a, b = b, 3 * a + 2 * b\n    return b"
    },
    {
        "id":496,
        "response":"def is_Power_Of_Two(x, y):\n    return bin(x ^ y).count('1') == 1"
    },
    {
        "id":497,
        "response":"import re\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"def square_nums(nums):\n    nums = list(map(lambda x: x ** 2, nums))\n    return nums"
    },
    {
        "id":499,
        "response":"def find_Rotations(str):\n    n = len(str)\n    temp = str + str\n    for i in range(1, n + 1):\n        if temp[i:i + n] == str:\n            return i\n    return n"
    },
    {
        "id":500,
        "response":"def small_nnum(list1, n):\n    list1.sort()\n    return list1[:n]"
    }
]