id,instruction,response,test_list
1,স্ট্রিং থেকে প্রদত্ত অক্ষরের প্রথম এবং শেষ উপস্থিতি অপসারণের জন্য একটি পাইথন ফাংশন লিখুন।,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","""['assert remove_Occ(\""hello\"",\""l\"") == \""heo\""', 'assert remove_Occ(\""abcda\"",\""a\"") == \""bcd\""', 'assert remove_Occ(\""PHP\"",\""P\"") == \""H\""']"""
2,একটি প্রদত্ত ম্যাট্রিক্সকে তার সারিগুলির যোগফল অনুযায়ী ক্রমবর্ধমান ক্রমে সাজানোর জন্য একটি ফাংশন লিখুন।,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","""['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']"""
3,একটি ফাংশন লিখুন যা একটি অভিধানে সবচেয়ে সাধারণ শব্দগুলি গণনা করে।,"from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
","""['assert count_common([\\'red\\',\\'green\\',\\'black\\',\\'pink\\',\\'black\\',\\'white\\',\\'black\\',\\'eyes\\',\\'white\\',\\'black\\',\\'orange\\',\\'pink\\',\\'pink\\',\\'red\\',\\'red\\',\\'white\\',\\'orange\\',\\'white\\',\""black\"",\\'pink\\',\\'green\\',\\'green\\',\\'pink\\',\\'green\\',\\'pink\\',\\'white\\',\\'orange\\',\""orange\"",\\'red\\']) == [(\\'pink\\', 6), (\\'black\\', 5), (\\'white\\', 5), (\\'red\\', 4)]', \""assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\"", \""assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\""]"""
4,একটি ত্রিভুজাকার প্রিজমের আয়তন খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","""['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']"""
5,একটি স্ট্রিংকে ছোট অক্ষরে বিভক্ত করার জন্য একটি ফাংশন লিখুন।,"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","""['assert split_lowerstring(\""AbCd\"")==[\\'bC\\',\\'d\\']', 'assert split_lowerstring(\""Python\"")==[\\'y\\', \\'t\\', \\'h\\', \\'o\\', \\'n\\']', 'assert split_lowerstring(\""Programming\"")==[\\'r\\', \\'o\\', \\'g\\', \\'r\\', \\'a\\', \\'m\\', \\'m\\', \\'i\\', \\'n\\', \\'g\\']']"""
6,একটি ফাংশন লিখুন যাতে ছোট অক্ষরের ক্রম খুঁজে পাওয়া যায়।,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","""['assert text_lowercase_underscore(\""aab_cbbbc\"")==(\\'Found a match!\\')', 'assert text_lowercase_underscore(\""aab_Abbbc\"")==(\\'Not matched!\\')', 'assert text_lowercase_underscore(\""Aaab_abbbc\"")==(\\'Not matched!\\')']"""
7,একটি বর্গক্ষেত্রের পরিধি খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def square_perimeter(a):
  perimeter=4*a
  return perimeter","""['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']"""
8,প্রথম স্ট্রিং থেকে দ্বিতীয় স্ট্রিংয়ে উপস্থিত অক্ষরগুলি সরিয়ে ফেলার জন্য একটি ফাংশন লিখুন।,"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","""['assert remove_dirty_chars(\""probasscurve\"", \""pros\"") == \\'bacuve\\'', 'assert remove_dirty_chars(\""digitalindia\"", \""talent\"") == \\'digiidi\\'', 'assert remove_dirty_chars(\""exoticmiles\"", \""toxic\"") == \\'emles\\' ']"""
9,একটি নির্দিষ্ট পূর্ণসংখ্যা অ্যারেতে কোনো সদৃশ উপাদান আছে কিনা তা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ","""['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']"""
10,প্রদত্ত সংখ্যাটি কাঠের বল কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False","""['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']"""
11,একটি ফাংশন লিখুন যা m এর n সংখ্যার গুণিতক খুঁজে বের করবে।,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","""['assert multiples_of_num(4,3)== [3,6,9,12]', 'assert multiples_of_num(2,5)== [5,10]', 'assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]']"""
12,একটি পূর্ণসংখ্যার অ্যারেতে প্রথম ডুপ্লিকেট উপাদান খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","""['assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4', 'assert find_first_duplicate([1, 2, 3, 4])==-1', 'assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1']"""
13,একটি পাইথন ফাংশন লিখুন যাতে তালিকার তালিকার উপাদানগুলির সর্বাধিক যোগফল পাওয়া যায়।,"def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ","""['assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33', 'assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6', 'assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19']"""
14,একটি ফাংশন লিখুন যা প্রদত্ত বাইনারি সংখ্যাটিকে তার দশমিক সমতুল্য রূপান্তর করে।,"def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)","""['assert binary_to_decimal(100) == 4', 'assert binary_to_decimal(1011) == 11', 'assert binary_to_decimal(1101101) == 109']"""
15,একটি প্রদত্ত অ্যারেতে পুনরাবৃত্তি না হওয়া উপাদানগুলির পণ্যটি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ","""['assert find_Product([1,1,2,3],4) == 6', 'assert find_Product([1,2,3,1,1],5) == 6', 'assert find_Product([1,1,4,5,6],5) == 120']"""
16,প্রদত্ত টিউপল তালিকায় k টি উপাদান রয়েছে কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","""['assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True', 'assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True', 'assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False']"""
17,একটি স্ট্রিংয়ের তালিকা থেকে সমস্ত অঙ্ক সরিয়ে ফেলার জন্য একটি পাইথন ফাংশন লিখুন।,"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list","""[\""assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\"", \""assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\"", \""assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']\""]"""
18,দ্বিপদী সহগ খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","""['assert binomial_Coeff(5,2) == 10', 'assert binomial_Coeff(4,3) == 4', 'assert binomial_Coeff(3,2) == 3']"""
19,অদ্ভুত সংখ্যক বার উপস্থিত উপাদানটি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1","""['assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1', 'assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3', 'assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5']"""
20,একই অক্ষর দিয়ে শুরু এবং শেষ হওয়া সব সাবস্ট্রিং গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","""['assert count_Substring_With_Equal_Ends(\""abc\"") == 3', 'assert count_Substring_With_Equal_Ends(\""abcda\"") == 6', 'assert count_Substring_With_Equal_Ends(\""ab\"") == 2']"""
21,একটি ফাংশন লিখুন যা হিপ ক্যু অ্যালগরিদম ব্যবহার করে সাজানো এবং স্বতন্ত্র পূর্ণসংখ্যার তালিকা থেকে সর্বাধিক ঘন ঘন ঘটে এমন শীর্ষ k পূর্ণসংখ্যা খুঁজে বের করে।,"def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result","""['assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]', 'assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]']"""
22,একটি প্রদত্ত সংখ্যার বৃহত্তম প্রধান গুণক খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)","""['assert max_Prime_Factors(15) == 5', 'assert max_Prime_Factors(6) == 3', 'assert max_Prime_Factors(2) == 2']"""
23,দশমিক সংখ্যাকে বাইনারি সংখ্যায় রূপান্তর করতে একটি পাইথন ফাংশন লিখুন।,"def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ","""['assert decimal_To_Binary(10) == 1010', 'assert decimal_To_Binary(1) == 1', 'assert decimal_To_Binary(20) == 10100']"""
24,একটি সাজানো অ্যারেতে অনুপস্থিত সংখ্যা খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ","""['assert find_missing([1,2,3,5],4) == 4', 'assert find_missing([1,3,4,5],4) == 2', 'assert find_missing([1,2,3,5,6,7],5) == 4']"""
25,n-তম আয়তক্ষেত্রাকার সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def find_rect_num(n):
  return n*(n + 1) ","""['assert find_rect_num(4) == 20', 'assert find_rect_num(5) == 30', 'assert find_rect_num(6) == 42']"""
26,দুটি প্রদত্ত সংখ্যার সঠিক ভগ্নাংশের n-তম অঙ্কটি খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ","""['assert find_Nth_Digit(1,2,1) == 5', 'assert find_Nth_Digit(3,5,1) == 6', 'assert find_Nth_Digit(5,6,5) == 3']"""
27,পূর্ণসংখ্যা এবং স্ট্রিং এর একটি মিশ্র তালিকা বাছাই করার জন্য একটি ফাংশন লিখুন।,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part","""[\""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\"", \""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\"", \""assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\""]"""
28,একটি প্রদত্ত তালিকার প্রথম সম এবং অদ্ভুত সংখ্যার বিভাজন খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)","""['assert div_even_odd([1,3,5,7,4,1,6,8])==4', 'assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2', 'assert div_even_odd([1,5,7,9,10])==10']"""
29,একটি প্রদত্ত স্ট্রিং এর অক্ষরগুলোকে পুনরায় সাজানো যায় কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন যাতে একে অপরের সাথে সংলগ্ন দুটি অক্ষর ভিন্ন হয়।,"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","""['assert rearange_string(\""aab\"")==(\\'aba\\')', 'assert rearange_string(\""aabb\"")==(\\'abab\\')', 'assert rearange_string(\""abccdd\"")==(\\'cdabcd\\')']"""
30,একটি ফাংশন লিখুন যা সংগ্রহ মডিউল ব্যবহার করে তালিকার একটি প্রদত্ত তালিকার উপাদানগুলির ফ্রিকোয়েন্সি খুঁজে বের করে।,"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result","""['assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})', 'assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})', 'assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})']"""
31,ল্যাম্বদা ফাংশন ব্যবহার করে সম সংখ্যা ফিল্টার করার জন্য একটি ফাংশন লিখুন।,"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums","""['assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]', 'assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]', 'assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]']"""
32,একটি প্রদত্ত অ্যারেতে পুনরাবৃত্ত উপাদানগুলির যোগফল খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])","""['assert find_Sum([1,2,3,1,1,4,5,6],8) == 3', 'assert find_Sum([1,2,3,1,1],5) == 3', 'assert find_Sum([1,1,2],3) == 2']"""
33,রেজেক্স ব্যবহার করে একটি নিম্নরেখা দিয়ে সংযুক্ত ছোট অক্ষরের ক্রম খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","""['assert text_match(\""aab_cbbbc\"") == \\'Found a match!\\'', 'assert text_match(\""aab_Abbbc\"") == \\'Not matched!\\'', 'assert text_match(\""Aaab_abbbc\"") == \\'Not matched!\\'']"""
34,একটি ফাংশন লিখুন যা স্ট্রিংয়ের শুরুতে একটি শব্দের সাথে মিলবে।,"import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","""['assert text_match_string(\"" python\"")==(\\'Not matched!\\')', 'assert text_match_string(\""python\"")==(\\'Found a match!\\')', 'assert text_match_string(\""  lang\"")==(\\'Not matched!\\')']"""
35,প্রদত্ত অ্যারে উপাদানগুলির gcd খুঁজে পেতে একটি ফাংশন লিখুন।,"def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd","""['assert get_gcd([2, 4, 6, 8, 16]) == 2', 'assert get_gcd([1, 2, 3]) == 1', 'assert get_gcd([2, 4, 6, 8]) == 2 ']"""
36,একটি পাইথন ফাংশন লিখুন যা সব সংখ্যা একে অপরের থেকে ভিন্ন কিনা তা নির্ধারণ করে।,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;","""['assert test_distinct([1,5,7,9]) == True', 'assert test_distinct([2,4,5,5,7,9]) == False', 'assert test_distinct([1,2,3]) == True']"""
37,একটি পাইথন ফাংশন লিখুন যখন a এর ফ্যাক্টরিয়াল b এর ফ্যাক্টরিয়ালকে ভাগ করে দেয় তখন শেষ অঙ্কটি খুঁজে বের করতে।,"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10","""['assert compute_Last_Digit(2,4) == 2', 'assert compute_Last_Digit(6,8) == 6', 'assert compute_Last_Digit(1,2) == 2']"""
38,একটি প্রদত্ত সংখ্যার সমস্ত বিজোড় বিট সেট করার জন্য একটি পাইথন ফাংশন লিখুন।,"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)","""['assert odd_bit_set_number(10) == 15', 'assert odd_bit_set_number(20) == 21', 'assert odd_bit_set_number(30) == 31']"""
39,একটি প্রদত্ত দ্বি-মাত্রিক তালিকা থেকে প্রতিটি প্রথম বা নির্দিষ্ট উপাদান বের করার জন্য একটি ফাংশন লিখুন।,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ","""['assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]']"""
40,ল্যাম্বদা ফাংশন ব্যবহার করে সর্বনিম্ন দৈর্ঘ্যের তালিকাটি খুঁজে পেতে একটি ফাংশন লিখুন।,"def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)","""['assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])', 'assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])', 'assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])']"""
41,একটি ফাংশন লিখুন যাতে প্রিন্ট চেক করে যে ত্রিভুজটি সমান পাশের কিনা।,"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False","""['assert check_equilateral(6,8,12)==False ', 'assert check_equilateral(6,6,12)==False', 'assert check_equilateral(6,6,6)==True']"""
42,সমান্তরাল অক্ষের ক্ষেত্রফল গণনা করার জন্য একটি ফাংশন লিখুন।,"def parallelogram_area(b,h):
  area=b*h
  return area","""['assert parallelogram_area(10,20)==200', 'assert parallelogram_area(15,20)==300', 'assert parallelogram_area(8,9)==72']"""
43,একটি প্রদত্ত স্ট্রিংয়ের প্রথম এবং শেষ অক্ষর সমান কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ","""['assert check_Equality(\""abcda\"") == \""Equal\""', 'assert check_Equality(\""ab\"") == \""Not Equal\""', 'assert check_Equality(\""mad\"") == \""Not Equal\""']"""
44,একটি ফাংশন লিখুন যা গণনা বাছাই ব্যবহার করে প্রদত্ত অ্যারে বাছাই করে।,"def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list","""['assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]', 'assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]', 'assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]']"""
45,জ্যামিতিক সিরিজের টি-নং পদটি খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn","""['assert tn_gp(1,5,2)==16', 'assert tn_gp(1,5,4)==256', 'assert tn_gp(2,6,3)==486']"""
46,একটি প্রদত্ত সংখ্যা তার বিপরীতের দ্বিগুণের চেয়ে এক কম কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ","""['assert check(70) == False', 'assert check(23) == False', 'assert check(73) == True']"""
47,একটি পাইথন ফাংশন লিখুন যাতে দেওয়া সংখ্যার সাথে সবচেয়ে বড় সংখ্যাটি তৈরি করা যায়।,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ","""['assert find_Max_Num([1,2,3],3) == 321', 'assert find_Max_Num([4,5,6,1],4) == 6541', 'assert find_Max_Num([1,2,3,9],4) == 9321']"""
48,একটি পাইথন ফাংশন লিখুন যা দিয়ে দুইটি পূর্ণসংখ্যার বিপরীত চিহ্ন আছে কিনা তা পরীক্ষা করা যায়।,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ","""['assert opposite_Signs(1,-2) == True', 'assert opposite_Signs(3,2) == False', 'assert opposite_Signs(-10,-10) == False']"""
49,nth অষ্টভুজীয় সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ","""['assert is_octagonal(5) == 65', 'assert is_octagonal(10) == 280', 'assert is_octagonal(15) == 645']"""
50,প্রদত্ত অ্যারের জন্য সংলগ্ন উপাদানগুলির মধ্যে পার্থক্য সহ উপসারণের সর্বাধিক দৈর্ঘ্য খুঁজে পেতে একটি ফাংশন লিখুন।,"def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max","""['assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5', 'assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4', 'assert max_len_sub([9, 11, 13, 15, 18], 5) == 1']"""
51,একটি পাইথন ফাংশন লিখুন যাতে সংখ্যাগুলি তাদের দৈর্ঘ্যের সমান সংখ্যার সাথে সাবস্ট্রিংগুলি গণনা করতে পারে।,"from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count","""[\""assert count_Substrings('112112',6) == 6\"", \""assert count_Substrings('111',3) == 6\"", \""assert count_Substrings('1101112',7) == 12\""]"""
52,একটি তালিকার ক্ষুদ্রতম সংখ্যা খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def smallest_num(xs):
  return min(xs)
","""['assert smallest_num([10, 20, 1, 45, 99]) == 1', 'assert smallest_num([1, 2, 3]) == 1', 'assert smallest_num([45, 46, 50, 60]) == 45']"""
53,প্রদত্ত টিপল তালিকায় উপলব্ধ জোড়াগুলির মধ্যে সর্বাধিক পার্থক্য খুঁজে পেতে একটি ফাংশন লিখুন।,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ","""['assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7', 'assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15', 'assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23']"""
54,ল্যাম্বডা ব্যবহার করে টুপলগুলির একটি তালিকা বাছাই করার জন্য একটি ফাংশন লিখুন।,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks","""[\""assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\"", \""assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\"", \""assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\""]"""
55,পুনরাবৃত্ত তালিকা সমষ্টির একটি ফাংশন লিখুন।,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total","""['assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21', 'assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106', 'assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210']"""
56,একটি তালিকায় ধনাত্মক সংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ","""['assert pos_count([1,-2,3,-4]) == 2', 'assert pos_count([3,4,5,-1]) == 3', 'assert pos_count([1,2,3,4]) == 4']"""
57,একটি ফাংশন লিখুন যাতে একটি বেল নম্বর সেটকে ভাগ করার উপায়ের সংখ্যা পাওয়া যায়।,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ","""['assert bell_number(2)==2', 'assert bell_number(10)==115975', 'assert bell_number(56)==6775685320645824322581483068371419745979053216268760300']"""
58,প্রদত্ত অ্যারেটি একবচনীয় কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","""['assert is_Monotonic([6, 5, 4, 4]) == True', 'assert is_Monotonic([1, 2, 2, 3]) == True', 'assert is_Monotonic([1, 3, 2]) == False']"""
59,একটি তালিকা প্রদত্ত উপ-তালিকা ধারণ করে কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set","""['assert is_sublist([2,4,3,5,7],[3,7])==False', 'assert is_sublist([2,4,3,5,7],[4,3])==True', 'assert is_sublist([2,4,3,5,7],[1,6])==False']"""
60,একটি ফাংশন লিখুন যা সবগুলো টুপল সমান দৈর্ঘ্যের কিনা তা খুঁজে বের করবে।,"def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")","""[\""assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\"", \""assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\"", \""assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'\""]"""
61,একটি ফাংশন লিখুন যা কম্পসোর্ট ব্যবহার করে উপাদানগুলির একটি তালিকা বাছাই করে।,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums","""['assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]', 'assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]', 'assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]']"""
62,একটি পাইথন ফাংশন লিখুন যা দিয়ে পরীক্ষা করা যায় যে প্রদত্ত সংখ্যাটি দুইটি বর্গক্ষেত্রের পার্থক্য হিসাবে উপস্থাপিত হতে পারে কিনা।,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","""['assert dif_Square(5) == True', 'assert dif_Square(10) == False', 'assert dif_Square(15) == True']"""
63,রেজেক্স ব্যবহার করে একাধিক ডিলিমিটার দিয়ে প্রদত্ত স্ট্রিংকে বিভক্ত করার জন্য একটি ফাংশন লিখুন।,"import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))","""[\""assert multiple_split('Forces of the \\\\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\"", \""assert multiple_split('Mi Box runs on the \\\\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\"", \""assert multiple_split('Certain services\\\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\""]"""
64,একটি ফাংশন লিখুন যা এটি প্যাটার্নস অ্যারেতে প্রদত্ত ক্রম অনুসরণ করে কিনা তা পরীক্ষা করে।,"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True","""['assert is_samepatterns([\""red\"",\""green\"",\""green\""], [\""a\"", \""b\"", \""b\""])==True ', 'assert is_samepatterns([\""red\"",\""green\"",\""greenn\""], [\""a\"",\""b\"",\""b\""])==False ', 'assert is_samepatterns([\""red\"",\""green\"",\""greenn\""], [\""a\"",\""b\""])==False ']"""
65,একটি ফাংশন লিখুন যাতে tuples খুঁজে পাওয়া যায় যার সব উপাদান k দ্বারা বিভাজ্য।,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ","""[\""assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\"", \""assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\"", \""assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'\""]"""
66,একটি আয়তক্ষেত্রে বর্গক্ষেত্রের সংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))","""['assert count_Squares(4,3) == 20', 'assert count_Squares(2,2) == 5', 'assert count_Squares(1,1) == 1']"""
67,একটি পাইথন ফাংশন লিখুন যাতে সম এবং অদ্ভুত অঙ্কগুলির যোগফলের মধ্যে পার্থক্য খুঁজে পাওয়া যায়।,"def is_Diff(n): 
    return (n % 11 == 0) ","""['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']"""
68,অদ্ভুত সংখ্যক সেট বিট সহ পূর্ণসংখ্যার সংখ্যা খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ","""['assert count_With_Odd_SetBits(5) == 3', 'assert count_With_Odd_SetBits(10) == 5', 'assert count_With_Odd_SetBits(15) == 8']"""
69,একটি পাইথন ফাংশন লিখুন যাতে শব্দটির দৈর্ঘ্য অদ্ভুত কিনা তা পরীক্ষা করা যায়।,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False","""['assert word_len(\""Hadoop\"") == False', 'assert word_len(\""great\"") == True', 'assert word_len(\""structure\"") == True']"""
70,nth টেট্রাহেড্রাল সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6","""['assert tetrahedral_number(5) == 35.0', 'assert tetrahedral_number(6) == 56.0', 'assert tetrahedral_number(7) == 84.0']"""
71,একটি ফাংশন লিখুন যা দুইটি টুপলকে জিপ করে।,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","""['assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]', 'assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]', 'assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]']"""
72,একটি গোলকের আয়তন খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume","""['assert volume_sphere(10)==4188.790204786391', 'assert volume_sphere(25)==65449.84694978735', 'assert volume_sphere(20)==33510.32163829113']"""
73,প্রদত্ত স্ট্রিংয়ের সমস্ত অক্ষর যোগ করে তৈরি অক্ষরটি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)","""['assert get_Char(\""abc\"") == \""f\""', 'assert get_Char(\""gfg\"") == \""t\""', 'assert get_Char(\""ab\"") == \""c\""']"""
74,নিউম্যান কনওয়ে ক্রমের n-তম সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","""['assert sequence(10) == 6', 'assert sequence(2) == 1', 'assert sequence(3) == 2']"""
75,একটি গোলকের পৃষ্ঠতল এলাকা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea","""['assert surfacearea_sphere(10)==1256.6370614359173', 'assert surfacearea_sphere(15)==2827.4333882308138', 'assert surfacearea_sphere(20)==5026.548245743669']"""
76,একটি ফাংশন লিখুন যা nth কেন্দ্রযুক্ত ষড়ভুজ সংখ্যা খুঁজে বের করবে।,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1","""['assert centered_hexagonal_number(10) == 271', 'assert centered_hexagonal_number(2) == 7', 'assert centered_hexagonal_number(9) == 217']"""
77,একটি ফাংশন লিখুন যাতে তিনটি অভিধান একক অভিব্যক্তিতে একত্রিত হয়।,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict","""['assert merge_dictionaries_three({ \""R\"": \""Red\"", \""B\"": \""Black\"", \""P\"": \""Pink\"" }, { \""G\"": \""Green\"", \""W\"": \""White\"" },{ \""O\"": \""Orange\"", \""W\"": \""White\"", \""B\"": \""Black\"" })=={\\'B\\': \\'Black\\', \\'R\\': \\'Red\\', \\'P\\': \\'Pink\\', \\'G\\': \\'Green\\', \\'W\\': \\'White\\', \\'O\\': \\'Orange\\'}', 'assert merge_dictionaries_three({ \""R\"": \""Red\"", \""B\"": \""Black\"", \""P\"": \""Pink\"" }, { \""G\"": \""Green\"", \""W\"": \""White\"" },{\""L\"":\""lavender\"",\""B\"":\""Blue\""})=={\\'W\\': \\'White\\', \\'P\\': \\'Pink\\', \\'B\\': \\'Black\\', \\'R\\': \\'Red\\', \\'G\\': \\'Green\\', \\'L\\': \\'lavender\\'}', 'assert merge_dictionaries_three({ \""R\"": \""Red\"", \""B\"": \""Black\"", \""P\"": \""Pink\"" },{\""L\"":\""lavender\"",\""B\"":\""Blue\""},{ \""G\"": \""Green\"", \""W\"": \""White\"" })=={\\'B\\': \\'Black\\', \\'P\\': \\'Pink\\', \\'R\\': \\'Red\\', \\'G\\': \\'Green\\', \\'L\\': \\'lavender\\', \\'W\\': \\'White\\'}']"""
78,একটি তালিকার উপাদানগুলির ফ্রিকোয়েন্সি পেতে একটি ফাংশন লিখুন।,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","""['assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ', 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ', 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ']"""
79,n এর চেয়ে ছোট নিকটতম সংখ্যাটি খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def closest_num(N):
  return (N - 1)","""['assert closest_num(11) == 10', 'assert closest_num(7) == 6', 'assert closest_num(12) == 11']"""
80,দীর্ঘতম শব্দের দৈর্ঘ্য খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max","""['assert len_log([\""python\"",\""PHP\"",\""bigdata\""]) == 7', 'assert len_log([\""a\"",\""ab\"",\""abc\""]) == 3', 'assert len_log([\""small\"",\""big\"",\""tall\""]) == 5']"""
81,একটি স্ট্রিং মানের তালিকায় একটি সাবস্ট্রিং উপস্থিত আছে কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False","""['assert find_substring([\""red\"", \""black\"", \""white\"", \""green\"", \""orange\""],\""ack\"")==True', 'assert find_substring([\""red\"", \""black\"", \""white\"", \""green\"", \""orange\""],\""abc\"")==False', 'assert find_substring([\""red\"", \""black\"", \""white\"", \""green\"", \""orange\""],\""ange\"")==True']"""
82,প্রদত্ত সংখ্যাটি তরঙ্গযুক্ত কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","""['assert is_undulating(\""1212121\"") == True', 'assert is_undulating(\""1991\"") == False', 'assert is_undulating(\""121\"") == True']"""
83,'a' এর মানকে 'b' এর ক্ষমতায় গণনা করার জন্য একটি ফাংশন লিখুন।,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)","""['assert power(3,4) == 81', 'assert power(2,3) == 8', 'assert power(5,5) == 3125']"""
84,প্রদত্ত টুপল থেকে সূচক সর্বনিম্ন মান রেকর্ড বের করার জন্য একটি ফাংশন লিখুন।,"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ","""[\""assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\"", \""assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\"", \""assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\""]"""
85,একটি পাইথন ফাংশন লিখুন যাতে সাবলিস্টের সর্বনিম্ন দৈর্ঘ্য পাওয়া যায়।,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ","""['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']"""
86,একটি প্রদত্ত পূর্ণসংখ্যার বিভাজক সংখ্যা খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x","""['assert divisor(15) == 4 ', 'assert divisor(12) == 6', 'assert divisor(9) == 3']"""
87,তালিকা তালিকা এর ফ্রিকোয়েন্সি গণনা খুঁজে পেতে একটি ফাংশন লিখুন।,"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
","""['assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}', 'assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}', 'assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}']"""
88,একটি ফাংশন লিখুন যাতে একটি তালিকার সমস্ত সংখ্যাকে গুণ করা যায় এবং তালিকার দৈর্ঘ্যের সাথে ভাগ করা যায়।,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ","""['assert multiply_num((8, 2, 3, -1, 7))==-67.2', 'assert multiply_num((-10,-20,-30))==-2000.0', 'assert multiply_num((19,15,18))==1710.0']"""
89,একটি ফাংশন লিখুন যা প্রদত্ত দশমিক সংখ্যাটিকে তার বাইনারি সমতুল্য রূপান্তর করে।,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ","""[\""assert decimal_to_binary(8) == '1000'\"", \""assert decimal_to_binary(18) == '10010'\"", \""assert decimal_to_binary(7) == '111' \""]"""
90,একটি নির্দিষ্ট সংখ্যার পরবর্তী ক্ষুদ্রতম প্যালিনড্রোম খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","""['assert next_smallest_palindrome(99)==101', 'assert next_smallest_palindrome(1221)==1331', 'assert next_smallest_palindrome(120)==121']"""
91,প্রদত্ত অ্যারেতে k-তম উপাদান খুঁজে পেতে একটি ফাংশন লিখুন।,"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]","""['assert kth_element([12,3,5,7,19], 5, 2) == 3', 'assert kth_element([17,24,8,23], 4, 3) == 8', 'assert kth_element([16,21,25,36,4], 5, 4) == 36']"""
92,একটি ফাংশন লিখুন যা সাপের ক্ষেত্রে স্ট্রিংকে উটের ক্ষেত্রে স্ট্রিং রূপান্তর করে।,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))","""[\""assert snake_to_camel('python_program')=='PythonProgram'\"", \""assert snake_to_camel('python_language')==('PythonLanguage')\"", \""assert snake_to_camel('programming_language')==('ProgrammingLanguage')\""]"""
93,"একটি ইউলিয়েরীয় সংখ্যা a ((n, m) খুঁজে বের করার জন্য একটি ফাংশন লিখুন।","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","""['assert eulerian_num(3, 1) == 4', 'assert eulerian_num(4, 1) == 11', 'assert eulerian_num(5, 3) == 26']"""
94,ল্যাম্বদা ফাংশন ব্যবহার করে তালিকাগুলির একটি প্রদত্ত তালিকার স্ট্রিংগুলির প্রতিটি উপ-তালিকা বাছাই করার জন্য একটি ফাংশন লিখুন।,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result","""['assert sort_sublists(([\""green\"", \""orange\""], [\""black\"", \""white\""], [\""white\"", \""black\"", \""orange\""]))==[[\\'green\\', \\'orange\\'], [\\'black\\', \\'white\\'], [\\'black\\', \\'orange\\', \\'white\\']]', 'assert sort_sublists(([\"" red \"",\""green\"" ],[\""blue \"",\"" black\""],[\"" orange\"",\""brown\""]))==[[\\' red \\', \\'green\\'], [\\' black\\', \\'blue \\'], [\\' orange\\', \\'brown\\']]', 'assert sort_sublists(([\""zilver\"",\""gold\""], [\""magnesium\"",\""aluminium\""], [\""steel\"", \""bronze\""]))==[[\\'gold\\', \\'zilver\\'],[\\'aluminium\\', \\'magnesium\\'], [\\'bronze\\', \\'steel\\']]']"""
95,প্রদত্ত তালিকায় সত্য বুলিয়ান গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count(lst):   
    return sum(lst) ","""['assert count([True,False,True]) == 2', 'assert count([False,False]) == 0', 'assert count([True,True,True]) == 3']"""
96,প্রদত্ত তালিকায় প্রদত্ত টুপলগুলি যোগ করার জন্য একটি ফাংশন লিখুন।,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","""['assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)', 'assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)', 'assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)']"""
97,একটি নির্দিষ্ট পরিসরের জন্য ষোড়শমাংশ সংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","""['assert count_Hexadecimal(10,15) == 6', 'assert count_Hexadecimal(2,4) == 0', 'assert count_Hexadecimal(15,16) == 1']"""
98,হিল ক্যু অ্যালগরিদম ব্যবহার করে একাধিক সাজানো ইনপুটকে একক সাজানো পুনরাবৃত্তিতে একত্রিত করার জন্য একটি ফাংশন লিখুন।,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)","""['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']"""
99,একটি বাইনারি স্ট্রিং এর ঘূর্ণন সংখ্যা খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ","""['assert odd_Equivalent(\""011001\"",6) == 3', 'assert odd_Equivalent(\""11011\"",5) == 4', 'assert odd_Equivalent(\""1010\"",4) == 2']"""
100,একটি ফাংশন লিখুন যা প্রদত্ত তালিকা থেকে অনুপস্থিত পরিসীমাগুলিকে প্রদত্ত শুরু পরিসীমা এবং শেষ পরিসীমা মানগুলির সাথে বের করে।,"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ","""['assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]', 'assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]', 'assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]']"""
101,একটি ফাংশন লিখুন যা প্রদত্ত নেস্টেড তালিকাগুলিতে সাধারণ উপাদানগুলি খুঁজে বের করে। * তালিকা আইটেম * তালিকা আইটেম * তালিকা আইটেম * তালিকা আইটেম,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result","""['assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]', 'assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]', 'assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]']"""
102,একটি পাইথন ফাংশন লিখুন যাতে একটি সিলিন্ডারের পরিধি খুঁজে পাওয়া যায়।,"def perimeter(diameter,height) : 
    return 2*(diameter+height)  ","""['assert perimeter(2,4) == 12', 'assert perimeter(1,2) == 6', 'assert perimeter(3,1) == 8']"""
103,একটি স্ট্রিং একটি পূর্ণসংখ্যা প্রতিনিধিত্ব করে কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False","""['assert check_integer(\""python\"")==False', 'assert check_integer(\""1\"")==True', 'assert check_integer(\""12345\"")==True']"""
104,প্রদত্ত টিপল তালিকার প্রতিটি টিপলকে ফ্রিকোয়েন্সি নির্ধারণের জন্য একটি ফাংশন লিখুন।,"from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ","""[\""assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\"", \""assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\"", \""assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\""]"""
105,একটি তালিকার সমস্ত অভিধান খালি আছে কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit","""['assert empty_dit([{},{},{}])==True', 'assert empty_dit([{1,2},{},{}])==False', 'assert empty_dit({})==True']"""
106,একটি নির্দিষ্ট ধনাত্মক পূর্ণসংখ্যার টুপলকে একটি পূর্ণসংখ্যায় রূপান্তর করার জন্য একটি ফাংশন লিখুন।,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result","""['assert tuple_to_int((1,2,3))==123', 'assert tuple_to_int((4,5,6))==456', 'assert tuple_to_int((5,6,7))==567']"""
107,একটি ফাংশন লিখুন যা তালিকার সমস্ত সম্ভাব্য রূপান্তরযোগ্য উপাদানকে ভাসমানে রূপান্তর করে।,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) ","""['assert list_to_float( [(\""3\"", \""4\""), (\""1\"", \""26.45\""), (\""7.32\"", \""8\""), (\""4\"", \""8\"")] ) == \\'[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\\'', 'assert list_to_float( [(\""4\"", \""4\""), (\""2\"", \""27\""), (\""4.12\"", \""9\""), (\""7\"", \""11\"")] ) == \\'[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\\'', 'assert list_to_float( [(\""6\"", \""78\""), (\""5\"", \""26.45\""), (\""1.33\"", \""4\""), (\""82\"", \""13\"")] ) == \\'[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\\'']"""
108,[লিঙ্ক টেক্সট](https:// [লিঙ্ক টেক্সট](https:// [লিঙ্ক টেক্সট](https://))) একটি স্ট্রিংকে একটি তালিকায় রূপান্তর করতে একটি ফাংশন লিখুন।,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst","""['assert string_to_list(\""python programming\"")==[\\'python\\',\\'programming\\']', 'assert string_to_list(\""lists tuples strings\"")==[\\'lists\\',\\'tuples\\',\\'strings\\']', 'assert string_to_list(\""write a program\"")==[\\'write\\',\\'a\\',\\'program\\']']"""
109,একটি সাজানো অ্যারেতে শুধুমাত্র একবার প্রদর্শিত উপাদানটি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)","""['assert search([1,1,2,2,3],5) == 3', 'assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8', 'assert search([1,2,2,3,3,4,4],7) == 1']"""
110,একটি প্রদত্ত তালিকার মধ্যে টিপলগুলির জোড়া থেকে সর্বাধিক পণ্য খুঁজে পেতে একটি ফাংশন লিখুন।,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max","""['assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36', 'assert max_product_tuple([(10,20), (15,2), (5,10)] )==200', 'assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484']"""
111,প্রদত্ত অ্যারের যোগফল সহ ট্রিপলেটটি খুঁজে পেতে একটি ফাংশন লিখুন,"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)","""['assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True', 'assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False', 'assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True']"""
112,nth স্মার্ট নম্বর খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ","""['assert smartNumber(1) == 30', 'assert smartNumber(50) == 273', 'assert smartNumber(1000) == 2664']"""
113,১ থেকে নির্দিষ্ট সংখ্যার মধ্যে থাকা সব বন্ধুত্বপূর্ণ সংখ্যার যোগফলের জন্য একটি ফাংশন লিখুন।,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)","""['assert amicable_numbers_sum(999)==504', 'assert amicable_numbers_sum(9999)==31626', 'assert amicable_numbers_sum(99)==0']"""
114,একটি জটিল সংখ্যার কোণ পেতে একটি ফাংশন লিখুন।,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle","""['assert angle_complex(0,1j)==1.5707963267948966 ', 'assert angle_complex(2,1j)==0.4636476090008061', 'assert angle_complex(0,2j)==1.5707963267948966']"""
115,একটি ফাংশন লিখুন যাতে 0 এবং 1 এর সংখ্যা প্রদত্ত বাইনারি স্ট্রিংয়ের যে কোনও সাব-স্ট্রিংয়ের মধ্যে সর্বাধিক পার্থক্য খুঁজে পাওয়া যায়।,"def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0","""['assert find_length(\""11000010001\"", 11) == 6', 'assert find_length(\""10111\"", 5) == 1', 'assert find_length(\""11011101100101\"", 14) == 2 ']"""
116,দুটি প্রদত্ত সংখ্যার সাধারণ বিভাজকগুলির যোগফল খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum","""['assert sum(10,15) == 6', 'assert sum(100,150) == 93', 'assert sum(4,6) == 3']"""
117,পাইথনে * অপারেটর ব্যবহার না করে দুটি পূর্ণসংখ্যার গুণ করার জন্য একটি ফাংশন লিখুন।,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)","""['assert multiply_int(10,20)==200', 'assert multiply_int(5,10)==50', 'assert multiply_int(4,8)==32']"""
118,একটি ফাংশন লিখুন যা একটি প্রদত্ত শব্দের তালিকা থেকে n এর চেয়ে দীর্ঘ শব্দগুলিকে সংক্ষিপ্ত তালিকাভুক্ত করে।,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	","""['assert long_words(3,\""python is a programming language\"")==[\\'python\\',\\'programming\\',\\'language\\']', 'assert long_words(2,\""writing a program\"")==[\\'writing\\',\\'program\\']', 'assert long_words(5,\""sorting list\"")==[\\'sorting\\']']"""
119,ম্যাজিক স্কোয়ার গণনা করার জন্য একটি ফাংশন লিখুন।,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True","""['assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False']"""
120,একটি প্রদত্ত তালিকায় সর্বোচ্চ ঘন ঘন আইটেমটি খুঁজে পেতে একটি ফাংশন লিখুন।,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result","""['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)', 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)', 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)']"""
121,একটি পাইথন ফাংশন লিখুন যা শুধুমাত্র একটি প্রদত্ত স্ট্রিং এর স্বরবর্ণকে বিপরীত করে।,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string","""['assert reverse_vowels(\""Python\"") == \""Python\""', 'assert reverse_vowels(\""USA\"") == \""ASU\""', 'assert reverse_vowels(\""ab\"") == \""ab\""']"""
122,একটি ফাংশন লিখুন যা টিপলকে স্ট্রিংয়ে রূপান্তর করে।,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str","""['assert tup_string((\\'e\\', \\'x\\', \\'e\\', \\'r\\', \\'c\\', \\'i\\', \\'s\\', \\'e\\', \\'s\\'))==(\""exercises\"")', 'assert tup_string((\\'p\\',\\'y\\',\\'t\\',\\'h\\',\\'o\\',\\'n\\'))==(\""python\"")', 'assert tup_string((\\'p\\',\\'r\\',\\'o\\',\\'g\\',\\'r\\',\\'a\\',\\'m\\'))==(\""program\"")']"""
123,ল্যাম্বদা ফাংশন ব্যবহার করে একটি প্রদত্ত সংখ্যার তালিকার নেতিবাচক সংখ্যার যোগফল গণনা করার জন্য একটি ফাংশন লিখুন।,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)","""['assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32', 'assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52', 'assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894']"""
124,একটি পাইথন ফাংশন লিখুন যা একটি প্রদত্ত অ্যারের শেষ উপাদানটি p বার অপারেশন করার পরে এমনকি বা অদ্ভুত কিনা তা পরীক্ষা করে।,"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ","""['assert check_last([5,7,10],3,1) == \""ODD\""', 'assert check_last([2,3],2,3) == \""EVEN\""', 'assert check_last([1,2,3],3,1) == \""ODD\""']"""
125,nth ষড়ভুজ সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def hexagonal_num(n): 
	return n*(2*n - 1) ","""['assert hexagonal_num(10) == 190', 'assert hexagonal_num(5) == 45', 'assert hexagonal_num(7) == 91']"""
126,বিদ্যুৎ বিল গণনা করার জন্য একটি ফাংশন লিখুন।,"def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total","""['assert cal_electbill(75)==246.25', 'assert cal_electbill(265)==1442.75', 'assert cal_electbill(100)==327.5']"""
127,পূর্ণসংখ্যার একটি অ্যারেতে শূন্যের অনুপাত খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","""['assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15', 'assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00', 'assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00']"""
128,একটি পাইথন ফাংশন লিখুন যা দিয়ে চেক করা যায় যে প্রদত্ত সংখ্যাটি ২ এর শূন্য-বিহীন শক্তির যোগফল হিসাবে উপস্থাপিত হতে পারে কিনা।,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True","""['assert is_Sum_Of_Powers_Of_Two(10) == True', 'assert is_Sum_Of_Powers_Of_Two(7) == False', 'assert is_Sum_Of_Powers_Of_Two(14) == True']"""
129,একটি বৃত্তের পরিধি খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter","""['assert circle_circumference(10)==62.830000000000005', 'assert circle_circumference(5)==31.415000000000003', 'assert circle_circumference(4)==25.132']"""
130,প্রদত্ত টিপল তালিকায় এককভাবে উপস্থিত উপাদানগুলি বের করার জন্য একটি ফাংশন লিখুন।,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ","""['assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]', 'assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]', 'assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]']"""
131,প্যানকেক বাছাই ব্যবহার করে উপাদানগুলির একটি তালিকা বাছাই করার জন্য একটি ফাংশন লিখুন।,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums","""['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]', 'assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]', 'assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']"""
132,একটি ফাংশন লিখুন যা তিনটি তালিকায় একই জোড়া গণনা করে।,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result","""['assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3', 'assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4', 'assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5']"""
133,প্রদত্ত টিউপলে উপস্থিত তালিকার সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ","""['assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2', 'assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3', 'assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1']"""
134,প্রদত্ত অ্যারের সমস্ত জোড়ায় পরম পার্থক্যের যোগফল খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum","""['assert sum_Pairs([1,8,9,15,16],5) == 74', 'assert sum_Pairs([1,2,3,4],4) == 10', 'assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188']"""
135,একটি প্রদত্ত অ্যারেতে যেকোন দুটি উপাদানের মধ্যে সর্বাধিক পার্থক্য খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ","""['assert max_Abs_Diff((2,1,5,3),4) == 4', 'assert max_Abs_Diff((9,3,2,5,1),5) == 8', 'assert max_Abs_Diff((3,2,1),3) == 2']"""
136,একটি স্ট্রিংয়ের মোট অক্ষরের ascii মান খুঁজে পেতে একটি ফাংশন লিখুন।,"def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])","""['assert ascii_value_string(\""python\"")==112', 'assert ascii_value_string(\""Program\"")==80', 'assert ascii_value_string(\""Language\"")==76']"""
137,প্রদত্ত ত্রিভুজের সর্বাধিক মোট পথের যোগফল খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]","""['assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14', 'assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ', 'assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53']"""
138,একটি সংখ্যাকে দুই ভাগে ভাগ করার জন্য একটি ফাংশন লিখুন যাতে অঙ্কগুলির যোগফল সর্বাধিক হয়।,"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ","""['assert sum_digits_twoparts(35)==17', 'assert sum_digits_twoparts(7)==7', 'assert sum_digits_twoparts(100)==19']"""
139,একটি ফাংশন লিখুন যাতে সবচেয়ে দীর্ঘতম উপ-অনুক্রম খুঁজে পাওয়া যায় যাতে প্রদত্ত অ্যারের জন্য সংলগ্নগুলির মধ্যে পার্থক্য এক হয়।,"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result","""['assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6', 'assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3', 'assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7']"""
140,একটি পাইথন ফাংশন লিখুন যাতে পাওয়া যায় যে প্রদত্ত সংখ্যাটি অসীম ক্রমের মধ্যে উপস্থিত আছে কিনা।,"def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False","""['assert does_Contain_B(1,7,3) == True', 'assert does_Contain_B(1,-3,5) == False', 'assert does_Contain_B(3,2,5) == False']"""
141,প্রদত্ত সংখ্যাটি সহ-প্রাথমিক কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1","""['assert is_coprime(17,13) == True', 'assert is_coprime(15,21) == False', 'assert is_coprime(25,45) == False']"""
142,একটি ফাংশন লিখুন যা প্রদত্ত অ্যারেকে মার্জ সোর্ট ব্যবহার করে বাছাই করে।,"def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)
","""['assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]', 'assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]', 'assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]']"""
143,একটি প্যারাবোলার শীর্ষস্থান খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex","""['assert parabola_vertex(5,3,2)==(-0.3, 1.55)', 'assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)', 'assert parabola_vertex(2,4,6)==(-1.0, 4.0)']"""
144,একটি প্রদত্ত দ্বি-মাত্রিক তালিকা থেকে প্রতিটি নির্দিষ্ট উপাদান বের করার জন্য একটি ফাংশন লিখুন।,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result","""['assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]']"""
145,একটি প্রদত্ত সংখ্যার সমস্ত জোড় বিট টগল করার জন্য একটি পাইথন ফাংশন লিখুন।,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","""['assert even_bit_toggle_number(10) == 0', 'assert even_bit_toggle_number(20) == 30', 'assert even_bit_toggle_number(30) == 20']"""
146,একটি ফাংশন লিখুন যা স্ট্রিং মানের একটি টুপলকে পূর্ণসংখ্যা মানের একটি টুপলে রূপান্তর করে।,"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result","""[\""assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\"", \""assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\"", \""assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))\""]"""
147,একটি তালিকা থেকে রান-লংথ এনকোডিং প্রতিফলিত করার জন্য একটি ফাংশন লিখুন।,"from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]","""['assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]', \""assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\"", \""assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\""]"""
148,একটি পাইথন ফাংশন লিখুন যাতে সব উপাদানকে সমান করতে k সংখ্যক অপারেশন প্রয়োজন হয়।,"def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) ","""['assert min_Ops([2,2,2,2],4,3) == 0', 'assert min_Ops([4,2,6,8],4,3) == -1', 'assert min_Ops([21,33,9,45,63],5,6) == 24']"""
149,প্রদত্ত মাস ও দিনের জন্য ঋতু মুদ্রণ করার জন্য একটি ফাংশন লিখুন।,"def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season","""[\""assert month_season('January',4)==('winter')\"", \""assert month_season('October',28)==('autumn')\"", \""assert month_season('June',6)==('spring')\""]"""
150,একটি ফাংশন লিখুন x এবং y এর জন্য যা ax + by = n পূরণ করে।,"def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") ","""[\""assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\"", \""assert solution(4, 2, 7) == 'No solution'\"", \""assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)\""]"""
151,একটি তালিকা থেকে অন্য তালিকায় উপস্থিত সমস্ত উপাদান অপসারণের জন্য একটি ফাংশন লিখুন।,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result","""['assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]']"""
152,n+(n-2) +(n-4)... এর ধনাত্মক পূর্ণসংখ্যার যোগফল গণনা করার জন্য একটি ফাংশন লিখুন (যতক্ষণ না n-x = < 0) ।,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)","""['assert sum_series(6)==12', 'assert sum_series(10)==30', 'assert sum_series(9)==25']"""
153,একটি নিয়মিত বহুভুজের ক্ষেত্রফল গণনা করার জন্য একটি ফাংশন লিখুন।,"from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area","""['assert area_polygon(4,20)==400.00000000000006', 'assert area_polygon(10,15)==1731.1969896610804', 'assert area_polygon(9,7)==302.90938549487214']"""
154,একটি পাইথন ফাংশন লিখুন যা যাচাই করে যে বিভাজক সমষ্টি একই কিনা।,"import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); ","""['assert areEquivalent(36,57) == False', 'assert areEquivalent(2,4) == False', 'assert areEquivalent(23,47) == True']"""
155,একটি প্রদত্ত স্ট্রিং (নিম্ন এবং বড় অক্ষর) এ ইংরেজি বর্ণমালার মতো একই অবস্থানে অক্ষর গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ","""['assert count_char_position(\""xbcefg\"") == 2', 'assert count_char_position(\""ABcED\"") == 3', 'assert count_char_position(\""AbgdeF\"") == 5']"""
156,একটি পাইথন ফাংশন লিখুন যা xor এর সাথে জোড়া সংখ্যা গণনা করে।,"def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ","""['assert find_even_Pair([5,4,7,2,1],5) == 4', 'assert find_even_Pair([7,2,8,1,0,5,11],7) == 9', 'assert find_even_Pair([1,2,3],3) == 1']"""
157,একটি পাইথন ফাংশন লিখুন যা 2 এর ক্ষুদ্রতম শক্তি খুঁজে বের করে যা n এর চেয়ে বড় বা সমান।,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ","""['assert next_Power_Of_2(0) == 1', 'assert next_Power_Of_2(5) == 8', 'assert next_Power_Of_2(17) == 32']"""
158,একটি প্রদত্ত অ্যারেতে একটি সংখ্যার ফ্রিকোয়েন্সি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ","""['assert frequency([1,2,3],4) == 0', 'assert frequency([1,2,2,3,3,3,4],3) == 3', 'assert frequency([0,1,2,3,1,2],1) == 2']"""
159,nth pell সংখ্যা গণনা করার জন্য একটি ফাংশন লিখুন।,"def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b ","""['assert get_pell(4) == 12', 'assert get_pell(7) == 169', 'assert get_pell(8) == 408']"""
160,একটি নির্দিষ্ট পরিসরের সূচকের মধ্যে একটি তালিকার সংখ্যার যোগফল খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ","""['assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29', 'assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16', 'assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38']"""
161,একটি পেন্টাগনের পরিধি খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter","""['assert perimeter_pentagon(5)==25', 'assert perimeter_pentagon(10)==50', 'assert perimeter_pentagon(15)==75']"""
162,প্রদত্ত স্ট্রিংয়ে 'std' অক্ষরের উপস্থিতি খুঁজে বের করার জন্য একটি ফাংশন লিখুন। 1. তালিকা আইটেম 1. তালিকা আইটেম 1. তালিকা আইটেম 2. তালিকা আইটেম 2. তালিকা আইটেম 2. তালিকা আইটেম 2. তালিকা আইটেম,"def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count","""['assert count_occurance(\""letstdlenstdporstd\"") == 3', 'assert count_occurance(\""truststdsolensporsd\"") == 1', 'assert count_occurance(\""makestdsostdworthit\"") == 2']"""
163,একটি স্ট্রিং থেকে আলফানিউমেরিক অক্ষর ছাড়া অন্য সব কিছু সরিয়ে ফেলার জন্য একটি ফাংশন লিখুন।,"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))","""[\""assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\"", \""assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\"", \""assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')\""]"""
164,একটি ফাংশন লিখুন যা কী-ভ্যালু জোড়ার একটি ক্রমকে তালিকার একটি অভিধানে গোষ্ঠীভুক্ত করে।,"def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result","""[\""assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\"", \""assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\"", \""assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\""]"""
165,একটি ফাংশন লিখুন যা বন্ধনীগুলির স্ট্রিংয়ের বৈধতা যাচাই করে।,"def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0","""['assert is_valid_parenthese(\""(){}[]\"")==True', 'assert is_valid_parenthese(\""()[{)}\"")==False', 'assert is_valid_parenthese(\""()\"")==True']"""
166,একটি ত্রিভুজের পরিধি খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter","""['assert perimeter_triangle(10,20,30)==60', 'assert perimeter_triangle(3,4,5)==12', 'assert perimeter_triangle(25,35,45)==105']"""
167,একটি পাইথন ফাংশন লিখুন যাতে দুইটি ভিন্ন সংখ্যা পাওয়া যায় যার lcm প্রদত্ত পরিসরের মধ্যে থাকে।,"def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) ","""['assert answer(3,8) == (3,6)', 'assert answer(2,6) == (2,4)', 'assert answer(1,3) == (1,2)']"""
168,একটি স্ট্রিং-এ কিছু আক্ষরিক স্ট্রিং অনুসন্ধান করার জন্য একটি ফাংশন লিখুন।,"import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')","""[\""assert string_literals(['language'],'python language')==('Matched!')\"", \""assert string_literals(['program'],'python language')==('Not Matched!')\"", \""assert string_literals(['python'],'programming language')==('Not Matched!')\""]"""
169,"একটি ফাংশন লিখুন যেটা দিয়ে আমরা জানতে পারি যে, প্রদত্ত সংখ্যাটি কিথ সংখ্যা কিনা।","def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) ","""['assert is_num_keith(14) == True', 'assert is_num_keith(12) == False', 'assert is_num_keith(197) == True']"""
170,অক্ষাংশ এবং দ্রাঘিমাংশ ব্যবহার করে দুটি পয়েন্টের মধ্যে দূরত্ব গণনা করার জন্য একটি ফাংশন লিখুন।,"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist","""['assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429', 'assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514', 'assert distance_lat_long(10,20,30,40)==6783.751974994595']"""
171,একটি ফাংশন লিখুন যা প্রদত্ত স্ট্রিং সেট এর মধ্যে সবচেয়ে দীর্ঘতম সাধারণ উপসর্গ খুঁজে বের করে।,"def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) ","""['assert common_prefix([\""tablets\"", \""tables\"", \""taxi\"", \""tamarind\""], 4) == \\'ta\\'', 'assert common_prefix([\""apples\"", \""ape\"", \""april\""], 3) == \\'ap\\'', 'assert common_prefix([\""teens\"", \""teenager\"", \""teenmar\""], 3) == \\'teen\\'']"""
172,"রেজেক্স ব্যবহার করে বড়, ছোট, বিশেষ অক্ষর এবং সংখ্যাসূচক মান খুঁজে পেতে একটি ফাংশন লিখুন।","import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters","""['assert find_character(\""ThisIsGeeksforGeeks\"") == ([\\'T\\', \\'I\\', \\'G\\', \\'G\\'], [\\'h\\', \\'i\\', \\'s\\', \\'s\\', \\'e\\', \\'e\\', \\'k\\', \\'s\\', \\'f\\', \\'o\\', \\'r\\', \\'e\\', \\'e\\', \\'k\\', \\'s\\'], [], [])', 'assert find_character(\""Hithere2\"") == ([\\'H\\'], [\\'i\\', \\'t\\', \\'h\\', \\'e\\', \\'r\\', \\'e\\'], [\\'2\\'], [])', 'assert find_character(\""HeyFolks32\"") == ([\\'H\\', \\'F\\'], [\\'e\\', \\'y\\', \\'o\\', \\'l\\', \\'k\\', \\'s\\'], [\\'3\\', \\'2\\'], [])']"""
173,একটি ফাংশন লিখুন যে কোন অ্যারেতে k এর পার্থক্য সহ সমস্ত স্বতন্ত্র জোড়া গণনা করতে।,"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count","""['assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2', 'assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5', 'assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3']"""
174,একটি নির্দিষ্ট সংখ্যার চেয়ে বড় একটি তালিকার সমস্ত মান খুঁজে পেতে একটি ফাংশন লিখুন।,"def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum","""['assert greater_specificnum([220, 330, 500],200)==True', 'assert greater_specificnum([12, 17, 21],20)==False', 'assert greater_specificnum([1,2,3,4],10)==False']"""
175,একটি প্যারাবোলার ফোকাস খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus","""['assert parabola_focus(5,3,2)==(-0.3, 1.6)', 'assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)', 'assert parabola_focus(2,4,6)==(-1.0, 4.125)']"""
176,রেজেক্স ব্যবহার করে একটি স্ট্রিংয়ের কিছু আক্ষরিক স্ট্রিং অনুসন্ধান করার জন্য একটি ফাংশন লিখুন।,"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')","""[\""assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\"", \""assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\"", \""assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'\""]"""
177,প্রদত্ত দুটি ক্রমের জন্য দীর্ঘতম সাধারণ উপসারণ খুঁজে পেতে একটি ফাংশন লিখুন।,"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","""['assert longest_common_subsequence(\""AGGTAB\"" , \""GXTXAYB\"", 6, 7) == 4', 'assert longest_common_subsequence(\""ABCDGH\"" , \""AEDFHR\"", 6, 6) == 3', 'assert longest_common_subsequence(\""AXYT\"" , \""AYZX\"", 4, 4) == 2']"""
178,"একটি পাইথন ফাংশন লিখুন যা দিয়ে পরীক্ষা করা যায় যে, প্রদত্ত সংখ্যাটি দুইটি বর্গক্ষেত্রের গুণন দ্বারা উপস্থাপিত হতে পারে কি না।","def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;","""['assert prod_Square(25) == False', 'assert prod_Square(30) == False', 'assert prod_Square(16) == True']"""
179,প্রথম অনুপস্থিত ধনাত্মক সংখ্যা খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)","""['assert first_Missing_Positive([1,2,3,-1,5],5) == 4', 'assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2', 'assert first_Missing_Positive([0,1,2,5,-8],5) == 3']"""
180,একটি বর্গক্ষেত্রের ভিতরে অবস্থিত সমন্বয় সংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","""['assert count_Intgral_Points(1,1,4,4) == 4', 'assert count_Intgral_Points(1,2,1,2) == 1', 'assert count_Intgral_Points(4,2,6,4) == 1']"""
181,একটি ফাংশন লিখুন যা দিয়ে পরীক্ষা করা যায় যে প্রদত্ত মাসের নামটিতে ৩০ দিন আছে কি না।,"def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False","""['assert check_monthnumber(\""February\"")==False', 'assert check_monthnumber(\""June\"")==True', 'assert check_monthnumber(\""April\"")==True']"""
182,একটি স্ট্রিংয়ে অন্তত একটি অক্ষর এবং একটি সংখ্যা আছে কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ","""[\""assert check_String('thishasboth29') == True\"", \""assert check_String('python') == False\"", \""assert check_String ('string') == False\""]"""
183,প্রদত্ত টিপল থেকে ডুপ্লিকেট অপসারণের জন্য একটি ফাংশন লিখুন।,"def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ","""['assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)', 'assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)', 'assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)']"""
184,অষ্টম সংখ্যাকে দশমিক সংখ্যায় রূপান্তর করতে একটি পাইথন ফাংশন লিখুন।,"def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ","""['assert octal_To_Decimal(25) == 21', 'assert octal_To_Decimal(30) == 24', 'assert octal_To_Decimal(40) == 32']"""
185,একটি সাজানো অ্যারেতে একটি উপাদান প্রথম অবস্থান খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res","""['assert first([1,2,3,4,5,6,6],6,6) == 5', 'assert first([1,2,2,2,3,2,2,4,2],2,9) == 1', 'assert first([1,2,3],1,3) == 0']"""
186,একটি ফাংশন লিখুন যাতে k দৈর্ঘ্যের সকল টুপল অপসারণ করা যায়।,"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ","""['assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]', 'assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]', 'assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]']"""
187,প্রদত্ত দুটি টুপলের এক্সপোনেন্সিয়েশন করার জন্য একটি ফাংশন লিখুন।,"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
","""['assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)', 'assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)', 'assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)']"""
188,একটি ফাংশন লিখুন যাতে একটি বৃত্তের মধ্যে যে বৃহত্তম ত্রিভুজটি লেখা যায় তা পাওয়া যায়।,"import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area ","""['assert largest_triangle(4,2)==10.392304845413264', 'assert largest_triangle(5,7)==4.639421805988064', 'assert largest_triangle(9,1)==105.2220865598093']"""
189,একটি পাইথন ফাংশন লিখুন যা ২ এর সর্বোচ্চ শক্তিকে প্রদত্ত সংখ্যার চেয়ে কম বা সমান করে।,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ","""['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']"""
190,একটি প্রদত্ত তালিকার সর্বোচ্চ মানের সমস্ত সূচক অবস্থান খুঁজে পেতে একটি ফাংশন লিখুন।,"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result","""['assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]', 'assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]', 'assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]']"""
191,একটি তালিকার উপাদানগুলো একই কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def chkList(lst): 
    return len(set(lst)) == 1","""[\""assert chkList(['one','one','one']) == True\"", \""assert chkList(['one','Two','Three']) == False\"", \""assert chkList(['bigdata','python','Django']) == False\""]"""
192,একটি স্ট্রিং থেকে সমকক্ষ অক্ষর সরিয়ে ফেলার জন্য একটি ফাংশন লিখুন।,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2","""['assert remove_even(\""python\"")==(\""pto\"")', 'assert remove_even(\""program\"")==(\""porm\"")', 'assert remove_even(\""language\"")==(\""lnug\"")']"""
193,একটি পাইথন ফাংশন লিখুন যা দুইটি পূর্ণসংখ্যার মধ্যে হ্যামিং দূরত্ব খুঁজে বের করে।,"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ","""['assert hamming_Distance(4,8) == 2', 'assert hamming_Distance(2,4) == 2', 'assert hamming_Distance(1,2) == 2']"""
194,একটি স্ট্রিংয়ে প্রদত্ত অক্ষরের উপস্থিতি গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res ","""['assert count(\""abcc\"",\""c\"") == 2', 'assert count(\""ababca\"",\""a\"") == 3', 'assert count(\""mnmm0pm\"",\""m\"") == 4']"""
195,প্রদত্ত টিপল তালিকায় টিপল উপাদানগুলির বিপরীতগুলি খুঁজে পেতে একটি ফাংশন লিখুন।,"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ","""['assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)', 'assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)', 'assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)']"""
196,প্রদত্ত টুপলগুলিতে সংলগ্ন উপাদান সংযুক্ত করার জন্য একটি ফাংশন লিখুন।,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","""['assert concatenate_elements((\""DSP \"", \""IS \"", \""BEST \"", \""FOR \"", \""ALL \"", \""UTS\"")) == (\\'DSP IS \\', \\'IS BEST \\', \\'BEST FOR \\', \\'FOR ALL \\', \\'ALL UTS\\')', 'assert concatenate_elements((\""RES \"", \""IS \"", \""BEST \"", \""FOR \"", \""ALL \"", \""QESR\"")) == (\\'RES IS \\', \\'IS BEST \\', \\'BEST FOR \\', \\'FOR ALL \\', \\'ALL QESR\\')', 'assert concatenate_elements((\""MSAM\"", \""IS \"", \""BEST \"", \""FOR \"", \""ALL \"", \""SKD\"")) == (\\'MSAMIS \\', \\'IS BEST \\', \\'BEST FOR \\', \\'FOR ALL \\', \\'ALL SKD\\')']"""
197,একটি ফাংশন লিখুন যাতে দীর্ঘতম পুনরাবৃত্তিমূলক উপসারণগুলি গণনা করা যায় যাতে দুটি উপসারণের একই স্ট্রিং অক্ষর একই অবস্থানে না থাকে।,"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]","""['assert find_longest_repeating_subseq(\""AABEBCDD\"") == 3', 'assert find_longest_repeating_subseq(\""aabb\"") == 2', 'assert find_longest_repeating_subseq(\""aab\"") == 1']"""
198,রেজেক্স ব্যবহার করে 2 এর নির্ভুলতার সাথে প্রদত্ত দশমিকটি পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)","""[\""assert is_decimal('123.11') == True\"", \""assert is_decimal('0.21') == True\"", \""assert is_decimal('123.1214') == False\""]"""
199,একটি ফাংশন লিখুন যা প্রদত্ত হিপ থেকে ক্ষুদ্রতম উপাদান মুছে ফেলবে এবং তারপরে একটি নতুন আইটেম সন্নিবেশ করিয়ে দেবে।,"import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap","""['assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]', 'assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]', 'assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]']"""
200,একটি ফাংশন লিখুন যা রেজেক্স ব্যবহার করে প্রদত্ত স্ট্রিংটিতে শুধুমাত্র অক্ষরের একটি নির্দিষ্ট সেট রয়েছে তা পরীক্ষা করার জন্য।,"import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)","""['assert is_allowed_specific_char(\""ABCDEFabcdef123450\"") == True', 'assert is_allowed_specific_char(\""*&%@#!}{\"") == False', 'assert is_allowed_specific_char(\""HELLOhowareyou98765\"") == True']"""
201,এমন একটি পাইথন ফাংশন লিখুন যা এমন সংখ্যা গণনা করে যার ওথ এবং এনথ বিট সেট করা আছে।,"def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count ","""['assert count_Num(2) == 1', 'assert count_Num(3) == 2', 'assert count_Num(1) == 1']"""
202,একটি পাইথন ফাংশন লিখুন যাতে n প্রাকৃতিক সংখ্যার চতুর্থ ক্ষমতার যোগফল পাওয়া যায়।,"import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum","""['assert fourth_Power_Sum(2) == 17', 'assert fourth_Power_Sum(4) == 354', 'assert fourth_Power_Sum(6) == 2275']"""
203,দুটি স্ট্রিং টুপলের কনক্যাটেনেশন সম্পাদন করার জন্য একটি ফাংশন লিখুন।,"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","""['assert concatenate_strings((\""Manjeet\"", \""Nikhil\"", \""Akshat\""), (\"" Singh\"", \"" Meherwal\"", \"" Garg\"")) == (\\'Manjeet Singh\\', \\'Nikhil Meherwal\\', \\'Akshat Garg\\')', 'assert concatenate_strings((\""Shaik\"", \""Ayesha\"", \""Sanya\""), (\"" Dawood\"", \"" Begum\"", \"" Singh\"")) == (\\'Shaik Dawood\\', \\'Ayesha Begum\\', \\'Sanya Singh\\')', 'assert concatenate_strings((\""Harpreet\"", \""Priyanka\"", \""Muskan\""), (\""Kour\"", \"" Agarwal\"", \""Sethi\"")) == (\\'HarpreetKour\\', \\'Priyanka Agarwal\\', \\'MuskanSethi\\')']"""
204,রেডিয়ানকে ডিগ্রিতে রূপান্তর করার জন্য একটি ফাংশন লিখুন।,"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree","""['assert degree_radian(90)==5156.620156177409', 'assert degree_radian(60)==3437.746770784939', 'assert degree_radian(120)==6875.493541569878']"""
205,একটি রান-লংথ এনকোডযুক্ত তালিকা ডিকোড করার জন্য একটি ফাংশন লিখুন।,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","""['assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]', \""assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\"", \""assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']\""]"""
206,একটি নেস্টেড তালিকা অন্য নেস্টেড তালিকার একটি উপসেট কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ","""['assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False', 'assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True', \""assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\""]"""
207,একটি প্রদত্ত স্ট্রিং-এ প্রথম পুনরাবৃত্ত অক্ষর খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'","""['assert first_Repeated_Char(\""Google\"") == \""o\""', 'assert first_Repeated_Char(\""data\"") == \""a\""', 'assert first_Repeated_Char(\""python\"") == \\'\\\\0\\'']"""
208,দুটি সংখ্যা সমান করার জন্য প্রয়োজনীয় ন্যূনতম অপারেশনগুলি খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1","""['assert min_Operations(2,4) == 1', 'assert min_Operations(4,10) == 4', 'assert min_Operations(1,4) == 3']"""
209,প্রদত্ত টিপল থেকে সর্বোচ্চ এবং সর্বনিম্ন k উপাদান বের করার জন্য একটি ফাংশন লিখুন।,"
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ","""['assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)', 'assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)', 'assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)']"""
210,"একটি ফাংশন লিখুন যাতে স্পেস, কমা বা বিন্দুগুলির সর্বোচ্চ n টি ঘটনাকে একটি কলোন দিয়ে প্রতিস্থাপন করা যায়।","import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))","""[\""assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\"", \""assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\"", \""assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')\""]"""
211,একটি পাইথন ফাংশন লিখুন যাতে একটি সংখ্যার তালিকায় প্রথম সম সংখ্যাটি পাওয়া যায়।,"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even","""['assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4', 'assert first_even([2, 3, 4]) == 2', 'assert first_even([5, 6, 7]) == 6']"""
212,একটি ফাংশন লিখুন যাতে টিপলের সব উপাদান একই ডাটা টাইপ করে কিনা তা পরীক্ষা করা যায়।,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ","""['assert check_type((5, 6, 7, 3, 5, 6) ) == True', 'assert check_type((1, 2, \""4\"") ) == False', 'assert check_type((3, 2, 1, 4, 5) ) == True']"""
213,প্রদত্ত সাজানো অ্যারেতে সংখ্যাগরিষ্ঠ উপাদান পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1","""['assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True', 'assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False', 'assert is_majority([1, 1, 1, 2, 2], 5, 1) == True']"""
214,একটি প্রদত্ত সংখ্যার সেট বিট গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ","""['assert count_Set_Bits(2) == 1', 'assert count_Set_Bits(4) == 1', 'assert count_Set_Bits(6) == 2']"""
215,একটি সাজানো এবং ঘূর্ণিত অ্যারেতে সর্বনিম্ন উপাদানটি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ","""['assert find_Min([1,2,3,4,5],0,4) == 1', 'assert find_Min([4,6,8],0,2) == 4', 'assert find_Min([2,3,5,7,9],0,4) == 2']"""
216,একটি প্রদত্ত স্ট্রিং এর অদ্ভুত সূচক মান আছে এমন অক্ষরগুলি সরিয়ে ফেলার জন্য একটি পাইথন ফাংশন লিখুন।,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result","""[\""assert odd_values_string('abcdef') == 'ace'\"", \""assert odd_values_string('python') == 'pto'\"", \""assert odd_values_string('data') == 'dt'\""]"""
217,একটি ফাংশন লিখুন যাতে অন্তত তিনটি সংখ্যা পাওয়া যায়।,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ","""['assert min_of_three(10,20,0)==0', 'assert min_of_three(19,15,18)==15', 'assert min_of_three(-10,-20,-30)==-30']"""
218,একটি পাইথন ফাংশন লিখুন যা সব বিট প্রদত্ত পরিসরে অ-সেট করা আছে কিনা তা পরীক্ষা করে।,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False","""['assert all_Bits_Set_In_The_Given_Range(4,1,2) == True', 'assert all_Bits_Set_In_The_Given_Range(17,2,4) == True', 'assert all_Bits_Set_In_The_Given_Range(39,4,6) == False']"""
219,প্রদত্ত অ্যারের উপাদানগুলিকে পুনরায় সাজানোর জন্য একটি ফাংশন লিখুন যাতে সমস্ত নেতিবাচক উপাদানগুলি ইতিবাচকগুলির আগে উপস্থিত হয়।,"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr","""['assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]', 'assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]', 'assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]']"""
220,একটি স্ট্রিংয়ের যেকোন অক্ষর দিয়ে ফাঁকা স্থান প্রতিস্থাপনের জন্য একটি ফাংশন লিখুন।,"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2","""['assert replace_blank(\""hello people\"",\\'@\\')==(\""hello@people\"")', 'assert replace_blank(\""python program language\"",\\'$\\')==(\""python$program$language\"")', 'assert replace_blank(\""blank space\"",\""-\"")==(\""blank-space\"")']"""
221,একটি ফাংশন লিখুন যাতে প্রদত্ত সংখ্যার ডান ত্রিভুজটির সর্বোচ্চ যোগফল পাওয়া যায়।,"def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))","""['assert max_sum([[1], [2,1], [3,3,2]], 3) == 6', 'assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ', 'assert max_sum([[2], [3,2], [13,23,12]], 3) == 28']"""
222,একটি ডাটাসেট থেকে n টি বৃহত্তম আইটেম পেতে একটি ফাংশন লিখুন।,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest","""['assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]', 'assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]', 'assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]']"""
223,একটি সিলিন্ডারের পার্শ্বীয় পৃষ্ঠতল এলাকা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface","""['assert lateralsuface_cylinder(10,5)==314.15000000000003', 'assert lateralsuface_cylinder(4,5)==125.66000000000001', 'assert lateralsuface_cylinder(4,10)==251.32000000000002']"""
224,একটি ঘনক্ষেত্রের আয়তন খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def volume_cube(l):
  volume = l * l * l
  return volume","""['assert volume_cube(3)==27', 'assert volume_cube(2)==8', 'assert volume_cube(5)==125']"""
225,একটি প্রদত্ত সংখ্যার সমস্ত জোড়া বিট সেট করার জন্য একটি পাইথন ফাংশন লিখুন।,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ","""['assert even_bit_set_number(10) == 10', 'assert even_bit_set_number(20) == 30', 'assert even_bit_set_number(30) == 30']"""
226,একটি পাইথন ফাংশন লিখুন যা একটি প্রদত্ত সমকোণ ত্রিভুজের মধ্যে গঠিত হতে পারে এমন সমকোণ ত্রিভুজের সর্বোচ্চ সংখ্যা গণনা করে।,"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;","""['assert No_of_Triangle(4,2) == 7', 'assert No_of_Triangle(4,3) == 3', 'assert No_of_Triangle(1,3) == -1']"""
227,প্রদত্ত টুপলগুলিতে একই সময়ে ঘটে যাওয়া রেকর্ডগুলির ঘটনাগুলি পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ","""['assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}', 'assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}', 'assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}']"""
228,একটি প্রদত্ত স্ট্রিংয়ের অ-খালি সাবস্ট্রিংয়ের সংখ্যা গণনা করতে একটি পাইথন ফাংশন লিখুন।,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ","""['assert number_of_substrings(\""abc\"") == 6', 'assert number_of_substrings(\""abcd\"") == 10', 'assert number_of_substrings(\""abcde\"") == 15']"""
229,একটি ফাংশন লিখুন যাতে দৈর্ঘ্য n এর সম্ভাব্য ক্রমের সংখ্যা পাওয়া যায় যাতে পরবর্তী উপাদানগুলির প্রতিটি পূর্ববর্তী উপাদানটির দ্বিগুণের চেয়ে বড় বা সমান হয় তবে m এর চেয়ে কম বা সমান হয়।,"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]","""['assert get_total_number_of_sequences(10, 4) == 4', 'assert get_total_number_of_sequences(5, 2) == 6', 'assert get_total_number_of_sequences(16, 3) == 84']"""
230,একটি ফাংশন লিখুন যাতে তালিকার শেষ উপাদানটি অন্য তালিকার সাথে প্রতিস্থাপিত হয়।,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
","""['assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]', 'assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]', 'assert replace_list([\""red\"",\""blue\"",\""green\""],[\""yellow\""])==[\""red\"",\""blue\"",\""yellow\""]']"""
231,একটি ফাংশন লিখুন যাতে একটি 3D অ্যারে তৈরি হয় যার প্রতিটি উপাদান '*' হয়।,"def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d","""[\""assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\"", \""assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\"", \""assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]\""]"""
232,একটি স্ট্রিংয়ের মোট অক্ষর গণনা করার জন্য একটি ফাংশন লিখুন।,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","""['assert count_charac(\""python programming\"")==18', 'assert count_charac(\""language\"")==8', 'assert count_charac(\""words\"")==5']"""
233,একটি ফাংশন লিখুন যা টুপলগুলির প্রথম উপাদানটির ঘটনার উপর ভিত্তি করে প্রদত্ত তালিকাটি বাছাই করে।,"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ","""[\""assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\"", \""assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\"", \""assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\""]"""
234,একটি প্রদত্ত সংখ্যার চেয়ে পরবর্তী পূর্ণ বর্গফল খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ","""['assert next_Perfect_Square(35) == 36', 'assert next_Perfect_Square(6) == 9', 'assert next_Perfect_Square(9) == 16']"""
235,প্রদত্ত অ্যারের জন্য দ্বি-টোনিক উপ-অনুক্রমের সর্বাধিক যোগফল খুঁজে পেতে একটি ফাংশন লিখুন।,"def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum","""['assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194', 'assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210', 'assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138']"""
236,ব্যাবিলনীয় পদ্ধতি ব্যবহার করে বর্গমূল গণনার জন্য একটি ফাংশন লিখুন।,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;","""['assert babylonian_squareroot(10)==3.162277660168379', 'assert babylonian_squareroot(2)==1.414213562373095', 'assert babylonian_squareroot(9)==3.0']"""
237,প্রদত্ত স্ট্রিং-এ দীর্ঘতম প্যালিনড্রোমিক সাবসেকভেন্স খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]","""['assert lps(\""TENS FOR TENS\"") == 5 ', 'assert lps(\""CARDIO FOR CARDS\"") == 7', 'assert lps(\""PART OF THE JOURNEY IS PART\"") == 9 ']"""
238,n-1 এর হারমোনিক সমষ্টি গণনা করার জন্য একটি ফাংশন লিখুন।,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ","""['assert harmonic_sum(7) == 2.5928571428571425', 'assert harmonic_sum(4) == 2.083333333333333', 'assert harmonic_sum(19) == 3.547739657143682']"""
239,ল্যাম্বদা ফাংশন ব্যবহার করে দুটি অ্যারেগুলির ছেদ খুঁজে পেতে একটি ফাংশন লিখুন।,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result","""['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]']"""
240,একটি টুপলে একটি উপাদানের উপস্থিতি গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ","""['assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4']"""
241,একটি ফাংশন লিখুন যাতে একটি তালিকার প্রতিটি উপাদানের আগে একটি উপাদান সন্নিবেশ করা যায়।,"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list","""[\""assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \"", \""assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \"", \""assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] \""]"""
242,জটিল সংখ্যাকে ধ্রুব সমন্বয়গুলিতে রূপান্তর করতে একটি পাইথন ফাংশন লিখুন।,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ","""['assert convert(1) == (1.0, 0.0)', 'assert convert(4) == (4.0,0.0)', 'assert convert(5) == (5.0,0.0)']"""
243,একটি প্রদত্ত তালিকা থেকে পূর্ণসংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr","""[\""assert count_integer([1,2,'abc',1.2]) == 2\"", 'assert count_integer([1,2,3]) == 3', 'assert count_integer([1,1.2,4,5.1]) == 2']"""
244,একটি প্রদত্ত স্ট্রিং-এ 'a' বা 'e' দিয়ে শুরু হওয়া সব শব্দ খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list","""['assert words_ae(\""python programe\"")==[\\'ame\\']', 'assert words_ae(\""python programe language\"")==[\\'ame\\',\\'anguage\\']', 'assert words_ae(\""assert statement\"")==[\\'assert\\', \\'atement\\']']"""
245,তিনটি ভিন্ন রঙের মধ্যে থেকে নির্দিষ্ট সংখ্যক রং বেছে নেওয়ার জন্য একটি ফাংশন লিখুন এবং পুনরাবৃত্তি সহ সমস্ত সমন্বয় তৈরি করুন।,"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))","""['assert combinations_colors( [\""Red\"",\""Green\"",\""Blue\""],1)==[(\\'Red\\',), (\\'Green\\',), (\\'Blue\\',)]', 'assert combinations_colors( [\""Red\"",\""Green\"",\""Blue\""],2)==[(\\'Red\\', \\'Red\\'), (\\'Red\\', \\'Green\\'), (\\'Red\\', \\'Blue\\'), (\\'Green\\', \\'Green\\'), (\\'Green\\', \\'Blue\\'), (\\'Blue\\', \\'Blue\\')]', 'assert combinations_colors( [\""Red\"",\""Green\"",\""Blue\""],3)==[(\\'Red\\', \\'Red\\', \\'Red\\'), (\\'Red\\', \\'Red\\', \\'Green\\'), (\\'Red\\', \\'Red\\', \\'Blue\\'), (\\'Red\\', \\'Green\\', \\'Green\\'), (\\'Red\\', \\'Green\\', \\'Blue\\'), (\\'Red\\', \\'Blue\\', \\'Blue\\'), (\\'Green\\', \\'Green\\', \\'Green\\'), (\\'Green\\', \\'Green\\', \\'Blue\\'), (\\'Green\\', \\'Blue\\', \\'Blue\\'), (\\'Blue\\', \\'Blue\\', \\'Blue\\')]']"""
246,একটি প্রদত্ত অ-নতিবাচক সংখ্যার চেয়ে কম সংখ্যক অগ্রিম সংখ্যার সংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr","""['assert count_Primes_nums(5) == 2', 'assert count_Primes_nums(10) == 4', 'assert count_Primes_nums(100) == 25']"""
247,দুটি সংখ্যা বিনিময় করার জন্য একটি ফাংশন লিখুন।,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)","""['assert swap_numbers(10,20)==(20,10)', 'assert swap_numbers(15,17)==(17,15)', 'assert swap_numbers(100,200)==(200,100)']"""
248,ল্যাম্বদা ফাংশন ব্যবহার করে প্রদত্ত তালিকায় অদ্ভুত উপাদানগুলির সংখ্যা খুঁজে পেতে একটি ফাংশন লিখুন।,"def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd","""['assert count_odd([1, 2, 3, 5, 7, 8, 10])==4', 'assert count_odd([10,15,14,13,-18,12,-20])==2', 'assert count_odd([1, 2, 4, 8, 9])==2']"""
249,একটি ফাংশন লিখুন যা দুইটি টুপলকে সর্বোচ্চ করে।,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","""['assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))', 'assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))', 'assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))']"""
250,nth নিউম্যান  শ্যাঙ্কস  উইলিয়ামস প্রাইম সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)","""['assert newman_prime(3) == 7 ', 'assert newman_prime(4) == 17', 'assert newman_prime(5) == 41']"""
251,প্রদত্ত টুপলগুলিতে গাণিতিক বিভাজন অপারেশন সম্পাদন করার জন্য একটি ফাংশন লিখুন।,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","""['assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)', 'assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)', 'assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)']"""
252,একটি তালিকাকে দুই ভাগে ভাগ করার জন্য একটি ফাংশন লিখুন যেখানে তালিকার প্রথম অংশের দৈর্ঘ্য দেওয়া আছে।,"def split_two_parts(list1, L):
    return list1[:L], list1[L:]","""['assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])', \""assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\"", \""assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\""]"""
253,দুটি অভিধানকে একত্রিত করার জন্য একটি ফাংশন লিখুন।,"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d","""[\""assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\"", \""assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\"", \""assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}\""]"""
254,একটি কুকুরের বয়স গণনা করার জন্য একটি ফাংশন লিখুন।,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age","""['assert dog_age(12)==61', 'assert dog_age(15)==73', 'assert dog_age(24)==109']"""
255,একটি ফাংশন লিখুন যা প্রতিটি n-তম উপাদানের জন্য একটি তালিকা ভাগ করে।,"def list_split(S, step):
    return [S[i::step] for i in range(step)]","""[\""assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \"", 'assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ', \""assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] \""]"""
256,একটি ঘনক্ষেত্রের পাশের পৃষ্ঠের আয়তন খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA","""['assert lateralsurface_cube(5)==100', 'assert lateralsurface_cube(9)==324', 'assert lateralsurface_cube(10)==400']"""
257,প্রথম n অদ্ভুত প্রাকৃতিক সংখ্যার বর্গফলের যোগফল খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ","""['assert square_Sum(2) == 10', 'assert square_Sum(3) == 35', 'assert square_Sum(4) == 84']"""
258,একটি ফাংশন লিখুন n'th তারকা সংখ্যা খুঁজে পেতে।,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ","""['assert find_star_num(3) == 37', 'assert find_star_num(4) == 73', 'assert find_star_num(5) == 121']"""
259,একটি অক্ষরের ascii মান খুঁজে পেতে একটি ফাংশন লিখুন।,"def ascii_value(k):
  ch=k
  return ord(ch)","""[\""assert ascii_value('A')==65\"", \""assert ascii_value('R')==82\"", \""assert ascii_value('S')==83\""]"""
260,একটি পাইথন ফাংশন লিখুন যাতে আপনি জোড়া অবস্থানে জোড়া সংখ্যার যোগফল খুঁজে পান।,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum","""['assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30', 'assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26', 'assert sum_even_and_even_index([5, 6, 12, 1],4) == 12']"""
261,প্রথম n টি সম সংখ্যাকে পঞ্চম শক্তিতে যোগ করার জন্য একটি পাইথন ফাংশন লিখুন।,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","""['assert even_Power_Sum(2) == 1056', 'assert even_Power_Sum(3) == 8832', 'assert even_Power_Sum(1) == 32']"""
262,টুপল রেকর্ডের তালিকা থেকে রিয়ার এলিমেন্ট এক্সট্রাকশন সম্পাদন করার জন্য একটি ফাংশন লিখুন।,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ","""[\""assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\"", \""assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\"", \""assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\""]"""
263,একটি ফাংশন লিখুন যাতে অন্য টিপলের সংশ্লিষ্ট সূচক দিয়ে একটি টিপলের বিষয়বস্তুকে বিয়োগ করা যায়।,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ","""['assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)', 'assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)', 'assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)']"""
264,একটি পাইথন ফাংশন লিখুন যাতে জোড়া সূচক দ্বিপদী সহগ খুঁজে পাওয়া যায়।,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ","""['assert even_binomial_Coeff_Sum(4) == 8', 'assert even_binomial_Coeff_Sum(6) == 32', 'assert even_binomial_Coeff_Sum(2) == 2']"""
265,প্রদত্ত অ্যারে থেকে শেষ সরানো উপাদানটির অবস্থান খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1","""['assert get_Position([2,5,4],3,2) == 2', 'assert get_Position([4,3],2,2) == 2', 'assert get_Position([1,2,3,4],4,1) == 4']"""
266,একটি সিলিন্ডারের আয়তন খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume","""['assert volume_cylinder(10,5)==1570.7500000000002', 'assert volume_cylinder(4,5)==251.32000000000002', 'assert volume_cylinder(4,10)==502.64000000000004']"""
267,মানের উপর ভিত্তি করে একটি অভিধান ফিল্টার করার জন্য একটি ফাংশন লিখুন।,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result","""[\""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\"", \""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\"", \""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\""]"""
268,প্রদত্ত টিউপলে রেকর্ডের আগে যে উপাদান গণনা ঘটে তা খুঁজে পেতে একটি ফাংশন লিখুন।,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ","""['assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3', 'assert count_first_elements((2, 9, (5, 7), 11) ) == 2', 'assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4']"""
269,nth দশকোণীয় সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ","""['assert is_num_decagonal(3) == 27', 'assert is_num_decagonal(7) == 175', 'assert is_num_decagonal(10) == 370']"""
270,ক্রমিক অনুসন্ধান ব্যবহার করে প্রদত্ত অ্যারেতে একটি উপাদান অনুসন্ধান করার জন্য একটি ফাংশন লিখুন।,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos","""['assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)', 'assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)', 'assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)']"""
271,একটি প্রদত্ত তালিকার উপাদানগুলি অনন্য কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True","""['assert all_unique([1,2,3]) == True', 'assert all_unique([1,2,1,2]) == False', 'assert all_unique([1,2,3,4,5]) == True']"""
272,মানচিত্র এবং ল্যাম্বদা ফাংশন ব্যবহার করে দুটি তালিকা সাবস্ট্রাক্ট করার জন্য একটি ফাংশন লিখুন।,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)","""['assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]', 'assert sub_list([1,2],[3,4])==[-2,-2]', 'assert sub_list([90,120],[50,70])==[40,50]']"""
273,একটি পাইথন ফাংশন লিখুন যা প্রতিটি অঙ্কের ফ্রিকোয়েন্সি অঙ্কের চেয়ে কম বা সমান কিনা তা পরীক্ষা করে।,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True","""['assert validate(1234) == True', 'assert validate(51241) == False', 'assert validate(321) == True']"""
274,একটি তালিকা থেকে সব আইটেম একটি প্রদত্ত স্ট্রিং সমান কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element","""['assert check_element([\""green\"", \""orange\"", \""black\"", \""white\""],\\'blue\\')==False', 'assert check_element([1,2,3,4],7)==False', 'assert check_element([\""green\"", \""green\"", \""green\"", \""green\""],\\'green\\')==True']"""
275,এমন একটি ফাংশন লিখুন যা একটি স্ট্রিংয়ের সাথে মিলে যায় যার মধ্যে একটি a থাকে যার পরে দুই থেকে তিনটি 'b' থাকে।,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","""['assert text_match_two_three(\""ac\"")==(\\'Not matched!\\')', 'assert text_match_two_three(\""dc\"")==(\\'Not matched!\\')', 'assert text_match_two_three(\""abbbba\"")==(\\'Found a match!\\')']"""
276,একটি ফাংশন লিখুন যা সংশোধিত অ্যারেতে সংলগ্ন অ্যারের বৃহত্তম যোগফল খুঁজে বের করে যা প্রদত্ত অ্যারেকে k বার পুনরাবৃত্তি করে গঠিত হয়।,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far","""['assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30', 'assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59', 'assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1']"""
277,প্রথম n টি সম সংখ্যা প্রাকৃতিক সংখ্যার বর্গফলের যোগফল খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)","""['assert square_Sum(2) == 20', 'assert square_Sum(3) == 56', 'assert square_Sum(4) == 120']"""
278,একটি ফাংশন লিখুন যাতে অ্যারে উপাদানগুলি গণনা করা যায় যার মডুলার বিপরীত রয়েছে প্রদত্ত প্রধান সংখ্যা p এর অধীনে নিজের সমান।,"def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element","""['assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2', 'assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3', 'assert modular_inverse([2, 3, 4, 5], 4, 6) == 1']"""
279,একটি নির্দিষ্ট বছরে অদ্ভুত দিনের সংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ","""['assert odd_Days(100) == 5', 'assert odd_Days(50) ==6', 'assert odd_Days(75) == 2']"""
280,সর্বাধিক দৈর্ঘ্যের তালিকা খুঁজে পেতে একটি ফাংশন লিখুন।,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)","""['assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])', 'assert max_length([[5], [15,20,25]])==(3, [15,20,25])']"""
281,একটি ফাংশন লিখুন যা বেড়াটি আঁকার উপায়ের সংখ্যা খুঁজে বের করে যাতে সর্বাধিক 2 টি সংলগ্ন পোস্টের প্রদত্ত বেড়ার জন্য একই রঙ থাকে n টি পোস্ট এবং কে রঙের সাথে।,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]","""['assert count_no_of_ways(2, 4) == 16', 'assert count_no_of_ways(3, 2) == 6', 'assert count_no_of_ways(4, 4) == 228']"""
282,দুটি সংখ্যার ভাগফল খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def find(n,m):  
    q = n//m 
    return (q)","""['assert find(10,3) == 3', 'assert find(4,2) == 2', 'assert find(20,5) == 4']"""
283,একটি রাইট এঙ্গেল ট্রায়াঙ্গেলের তৃতীয় পাশের জন্য একটি ফাংশন লিখুন।,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s","""['assert otherside_rightangle(7,8)==10.63014581273465', 'assert otherside_rightangle(3,4)==5', 'assert otherside_rightangle(7,15)==16.55294535724685']"""
284,একটি নির্দিষ্ট বৈষম্যপূর্ণ তালিকায় সর্বাধিক মান খুঁজে পেতে একটি ফাংশন লিখুন।,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)","""[\""assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\"", \""assert max_val(['Python', 15, 20, 25])==25\"", \""assert max_val(['Python', 30, 20, 40, 50, 'version'])==50\""]"""
285,একটি সংখ্যার সকল বিভাজকের যোগফল প্রদানের জন্য একটি ফাংশন লিখুন।,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)","""['assert sum_div(8)==7', 'assert sum_div(12)==16', 'assert sum_div(7)==1']"""
286,একটি অ্যারেতে বিপরীত গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ","""['assert get_Inv_Count([1,20,6,4,5],5) == 5', 'assert get_Inv_Count([1,2,1],3) == 1', 'assert get_Inv_Count([1,2,5,6,1],5) == 3']"""
287,একটি প্রদত্ত নেস্টেড তালিকা কাঠামো সমতল করার জন্য একটি ফাংশন লিখুন।,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ","""['assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]', 'assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]', 'assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]']"""
288,অন্য তালিকায় উপস্থিত নেস্টেড তালিকা উপাদানগুলি খুঁজে পেতে একটি ফাংশন লিখুন।,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result","""['assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]', 'assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]', \""assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\""]"""
289,টুপল তালিকা থেকে সর্বাধিক সমষ্টি গণনা করার জন্য একটি ফাংশন লিখুন।,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])","""[\""assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\"", \""assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\"", \""assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\""]"""
290,একটি ফাংশন লিখুন যাতে ২n দৈর্ঘ্যের সমস্ত বাইনারি ক্রমের গণনা পাওয়া যায় যাতে প্রথম n বিটগুলির যোগফল শেষ n বিটগুলির যোগফলের সমান হয়।,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ","""['assert count_binary_seq(1) == 2.0', 'assert count_binary_seq(2) == 6.0', 'assert count_binary_seq(3) == 20.0']"""
291,একটি অভিধানের গভীরতা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0","""[\""assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\"", \""assert dict_depth({'a':1, 'b': {'c':'python'}})==2\"", \""assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\""]"""
292,সবচেয়ে গুরুত্বপূর্ণ বিট সংখ্যা খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন যা একটি সেট বিটও।,"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)","""['assert set_Bit_Number(6) == 4', 'assert set_Bit_Number(10) == 8', 'assert set_Bit_Number(18) == 16']"""
293,একটি পাইথন ফাংশন লিখুন যা দুই ধরনের বিপরীত গণনা একই বা না কিনা তা পরীক্ষা করে।,"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True","""['assert solve([1,0,2],3) == True', 'assert solve([1,2,0],3) == False', 'assert solve([1,2,1],3) == True']"""
294,একটি প্রদত্ত সূচকের একটি উপাদান খুঁজে পেতে একটি পাইথন ফাংশন লিখুন ঘূর্ণন সংখ্যা পরে।,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ","""['assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3', 'assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3', 'assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1']"""
295,'পি' অক্ষর দিয়ে শুরু হওয়া শব্দের তালিকা থেকে দুটি শব্দের সাথে মিলিয়ে একটি ফাংশন লিখুন।,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()","""['assert start_withp([\""Python PHP\"", \""Java JavaScript\"", \""c c++\""])==(\\'Python\\', \\'PHP\\')', 'assert start_withp([\""Python Programming\"",\""Java Programming\""])==(\\'Python\\',\\'Programming\\')', 'assert start_withp([\""Pqrst Pqr\"",\""qrstuv\""])==(\\'Pqrst\\',\\'Pqr\\')']"""
296,"একটি ফাংশন লিখুন যা প্রিফিক্স থেকে ith সূচক পর্যন্ত ক্রমবর্ধমান উপসর্গগুলির সর্বাধিক যোগফল খুঁজে বের করে এবং একটি প্রদত্ত kth উপাদান যা i এর পরে থাকে, অর্থাৎ, k > i।","def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]","""['assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11', 'assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7', 'assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71']"""
297,একটি টুপেলের কলোন পেতে একটি ফাংশন লিখুন।,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon","""['assert colon_tuplex((\""HELLO\"", 5, [], True) ,2,50)==(\""HELLO\"", 5, [50], True) ', 'assert colon_tuplex((\""HELLO\"", 5, [], True) ,2,100)==((\""HELLO\"", 5, [100],True))', 'assert colon_tuplex((\""HELLO\"", 5, [], True) ,2,500)==(\""HELLO\"", 5, [500], True)']"""
298,দুটি তালিকা থেকে সবচেয়ে বড় পণ্যের নির্দিষ্ট সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result","""['assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]']"""
299,দুটি সংখ্যার সর্বোচ্চ সংখ্যা খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ","""['assert maximum(5,10) == 10', 'assert maximum(-1,-2) == -1', 'assert maximum(9,7) == 9']"""
300,একটি প্রদত্ত স্ট্রিংকে একটি টিপলে রূপান্তর করার জন্য একটি ফাংশন লিখুন।,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result","""['assert string_to_tuple(\""python 3.0\"")==(\\'p\\', \\'y\\', \\'t\\', \\'h\\', \\'o\\', \\'n\\', \\'3\\', \\'.\\', \\'0\\')', 'assert string_to_tuple(\""item1\"")==(\\'i\\', \\'t\\', \\'e\\', \\'m\\', \\'1\\')', 'assert string_to_tuple(\""15.10\"")==(\\'1\\', \\'5\\', \\'.\\', \\'1\\', \\'0\\')']"""
301,বাম সবচেয়ে অসত বিট সেট করার জন্য একটি পাইথন ফাংশন লিখুন।,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ","""['assert set_left_most_unset_bit(10) == 14', 'assert set_left_most_unset_bit(12) == 14', 'assert set_left_most_unset_bit(15) == 15']"""
302,একটি শঙ্কুর আয়তন খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume","""['assert volume_cone(5,12)==314.15926535897927', 'assert volume_cone(10,15)==1570.7963267948965', 'assert volume_cone(19,17)==6426.651371693521']"""
303,একটি তালিকায় ধনাত্মক সংখ্যা প্রিন্ট করার জন্য একটি পাইথন ফাংশন লিখুন।,"def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num ","""['assert pos_nos([-1,-2,1,2]) == 1,2', 'assert pos_nos([3,4,-5]) == 3,4', 'assert pos_nos([-2,-3,1]) == 1']"""
304,একটি ফাংশন লিখুন যাতে সর্বোচ্চ যোগফলটি পাওয়া যায় যাতে 2 x n মাত্রার প্রদত্ত আয়তক্ষেত্রাকার গ্রিডের জন্য কোন দুটি নির্বাচিত সংখ্যা সংলগ্ন থাকে না।,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)","""['assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7', 'assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24', 'assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81']"""
305,একটি পাইথন ফাংশন লিখুন যাতে সম শব্দটির প্রথম সর্বোচ্চ দৈর্ঘ্য খুঁজে পাওয়া যায়।,"def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return ""-1"" 
    return str[st: st + maxlen] ","""['assert find_Max_Len_Even(\""python language\"") == \""language\""', 'assert find_Max_Len_Even(\""maximum even length\"") == \""length\""', 'assert find_Max_Len_Even(\""eve\"") == \""-1\""']"""
306,একটি সাজানো অ্যারেতে প্রদত্ত সংখ্যার শেষ উপস্থিতির সূচক খুঁজে পেতে একটি ফাংশন লিখুন।,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ","""['assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3', 'assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9', 'assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6']"""
307,একটি তালিকা থেকে পরিবর্তিত রান-লংথ এনকোডিং প্রতিফলিত করার জন্য একটি ফাংশন লিখুন।,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]","""['assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]', \""assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\"", \""assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']\""]"""
308,একটি পাইথন ফাংশন লিখুন যাতে একটি কিউবয়েডের সর্বোচ্চ ভলিউম পাওয়া যায় যার দিকের যোগফল দেওয়া আছে।,"def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue ","""['assert max_volume(8) == 18', 'assert max_volume(4) == 2', 'assert max_volume(1) == 0']"""
309,একটি ফাংশন লিখুন যা রেজেক্স ব্যবহার করে প্রদত্ত স্ট্রিংয়ের সমস্ত পাঁচটি অক্ষরের দীর্ঘ শব্দ খুঁজে বের করে।,"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))","""[\""assert find_long_word('Please move back to strem') == ['strem']\"", \""assert find_long_word('4K Ultra HD streaming player') == ['Ultra']\"", \""assert find_long_word('Streaming Media Player') == ['Media']\""]"""
310,প্রথম n টি প্রাকৃতিক সংখ্যার বর্গফল এবং প্রথম n টি প্রাকৃতিক সংখ্যার বর্গফলের সমষ্টির মধ্যে পার্থক্য গণনা করার জন্য একটি ফাংশন লিখুন।,"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares","""['assert sum_difference(12)==5434', 'assert sum_difference(20)==41230', 'assert sum_difference(54)==2151270']"""
311,প্রদত্ত সংখ্যার জন্য ডেমলো সংখ্যা খুঁজে পেতে একটি ফাংশন লিখুন।,"def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	","""['assert find_demlo(\""111111\"") == \\'12345654321\\'', 'assert find_demlo(\""1111\"") == \\'1234321\\'', 'assert find_demlo(\""13333122222\"") == \\'123456789101110987654321\\'']"""
312,একটি প্রদত্ত তালিকার সর্বনিম্ন মানের সমস্ত সূচক অবস্থান খুঁজে পেতে একটি ফাংশন লিখুন।,"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result","""['assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]', 'assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]', 'assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]']"""
313,একটি ফাংশন লিখুন যা প্রদত্ত অ্যারেটিকে বিকল্পভাবে ধনাত্মক এবং নেতিবাচক আইটেমগুলিতে পুনরায় সাজিয়ে দেয়।,"def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr","""['assert re_arrange([-5, -2, 5, 2, 4,\\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]', 'assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]', 'assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]']"""
314,একটি ফাংশন লিখুন যা টুপলগুলির বিকল্প চেইনগুলির যোগফল বের করে।,"def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ","""['assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)', 'assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)', 'assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)']"""
315,"একটি পাইথন ফাংশন লিখুন যার যোগফল একটি প্রদত্ত সংখ্যার সমান, যার সর্বনিম্ন সংখ্যক বর্গক্ষেত্র খুঁজে বের করতে।","def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;","""['assert get_Min_Squares(6) == 3', 'assert get_Min_Squares(2) == 2', 'assert get_Min_Squares(4) == 1']"""
316,প্রদত্ত স্ট্রিং তালিকায় সর্বাধিক সংখ্যক উপস্থিতি সহ শব্দটি পেতে একটি ফাংশন লিখুন।,"from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ","""['assert most_occurrences([\""UTS is best for RTF\"", \""RTF love UTS\"", \""UTS is best\""] ) == \\'UTS\\'', 'assert most_occurrences([\""Its been a great year\"", \""this year is so worse\"", \""this year is okay\""] ) == \\'year\\'', 'assert most_occurrences([\""Families can be reunited\"", \""people can be reunited\"", \""Tasks can be achieved \""] ) == \\'can\\'']"""
317,একটি ফাংশন লিখুন যাতে প্রিন্ট চেক করে যে ত্রিভুজটি সমকোণীয় কিনা।,"def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False","""['assert check_isosceles(6,8,12)==False ', 'assert check_isosceles(6,6,12)==True', 'assert check_isosceles(6,16,20)==False']"""
318,একটি নির্দিষ্ট তালিকা লিখুন যা বাম দিকের নির্দিষ্ট সংখ্যক আইটেম দ্বারা ঘোরানো হয়।,"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result","""['assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]', 'assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]', 'assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]']"""
319,একটি তালিকায় নেতিবাচক সংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ","""['assert neg_count([-1,-2,3,-4,-5]) == 4', 'assert neg_count([1,2,3]) == 0', 'assert neg_count([1,2,-3,-10,20]) == 2']"""
320,"একটি ফাংশন লিখুন যা রেজেক্স ব্যবহার করে প্রদত্ত স্ট্রিংয়ের তিনটি, চারটি, পাঁচটি অক্ষরের দীর্ঘ শব্দ খুঁজে বের করে।","import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))","""[\""assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\"", \""assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\"", \""assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']\""]"""
321,একটি প্রদত্ত সংখ্যার অ-সেট বিট গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ","""['assert count_unset_bits(2) == 1', 'assert count_unset_bits(4) == 2', 'assert count_unset_bits(6) == 1']"""
322,একটি প্রদত্ত স্ট্রিং এর অক্ষর ফ্রিকোয়েন্সি গণনা করার জন্য একটি ফাংশন লিখুন।,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict","""[\""assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\"", \""assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\"", \""assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\""]"""
323,একটি তালিকাকে উপ-তালিকার দ্বিতীয় উপাদান অনুযায়ী সাজানোর জন্য একটি পাইথন ফাংশন লিখুন।,"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ","""[\""assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\"", \""assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\"", \""assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\""]"""
324,"একটি পাইথন ফাংশন লিখুন যাতে আপনি পরীক্ষা করতে পারেন যে, যদি কোন ত্রিভুজকে দিক দেওয়া হয়, তাহলে তা বৈধ কিনা।","def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ","""['assert check_Validity(1,2,3) == False', 'assert check_Validity(2,3,5) == False', 'assert check_Validity(7,10,5) == True']"""
325,একটি ফাংশন লিখুন যাতে অঙ্কগত ক্রমের যোগফল পাওয়া যায়।,"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total","""['assert ap_sum(1,5,2)==25', 'assert ap_sum(2,6,4)==72', 'assert ap_sum(1,4,5)==34']"""
326,"একটি ফাংশন লিখুন যা দিয়ে পরীক্ষা করা যায় যে, প্রদত্ত মাসের নামটিতে ২৮ দিন আছে কি না।","def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False","""['assert check_monthnum(\""February\"")==True', 'assert check_monthnum(\""January\"")==False', 'assert check_monthnum(\""March\"")==False']"""
327,"একটি ফাংশন লিখুন যা স্ট্রিংয়ের শেষে একটি শব্দের সাথে মিলবে, ঐচ্ছিক বিন্যাস চিহ্ন সহ।","import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","""['assert text_match_word(\""python.\"")==(\\'Found a match!\\')', 'assert text_match_word(\""python.\"")==(\\'Found a match!\\')', 'assert text_match_word(\""  lang  .\"")==(\\'Not matched!\\')']"""
328,একই প্রথম এবং শেষ অক্ষর সহ সাবস্ট্রিংয়ের সংখ্যা গণনা করতে একটি পাইথন ফাংশন লিখুন।,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","""[\""assert count_Substring_With_Equal_Ends('aba') == 4\"", \""assert count_Substring_With_Equal_Ends('abcab') == 7\"", \""assert count_Substring_With_Equal_Ends('abc') == 3\""]"""
329,একটি অন্তরালের সর্বাধিক ঘটনাকারী বিভাজক খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2","""['assert find_Divisor(2,2) == 2', 'assert find_Divisor(2,5) == 2', 'assert find_Divisor(5,10) == 2']"""
330,একটি পাইথন ফাংশন লিখুন যাতে একটি নির্দিষ্ট সংখ্যার তালিকা থেকে তিনটি সর্বনিম্ন ধনাত্মক সংখ্যার যোগফল পাওয়া যায়।,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])","""['assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37', 'assert sum_three_smallest_nums([1,2,3,4,5]) == 6', 'assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6']"""
331,প্রদত্ত সেটকে অর্ডারড টুপলে রূপান্তর করার জন্য একটি ফাংশন লিখুন।,"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)","""['assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)', 'assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)', 'assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)']"""
332,একটি ফাংশন লিখুন যাতে সবচেয়ে ছোট পরিসীমা খুঁজে পাওয়া যায় যাতে প্রদত্ত অ্যারেগুলির প্রত্যেকটি থেকে কমপক্ষে একটি উপাদান অন্তর্ভুক্ত থাকে।,"from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])","""['assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)', 'assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)', 'assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)']"""
333,একটি স্ট্রিংয়ে অক্ষর এবং অঙ্ক সংখ্যা গণনা করার জন্য একটি ফাংশন লিখুন।,"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)","""['assert dig_let(\""python\"")==(6,0)', 'assert dig_let(\""program\"")==(7,0)', 'assert dig_let(\""python3.0\"")==(6,2)']"""
334,একটি নির্দিষ্ট পরিসরে অদ্ভুত ফ্যাক্টর সহ উপাদানগুলির সংখ্যা খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ","""['assert count_Odd_Squares(5,100) == 8', 'assert count_Odd_Squares(8,65) == 6', 'assert count_Odd_Squares(2,5) == 1']"""
335,একটি প্রদত্ত তালিকায় দুটি পরপর সংখ্যার মধ্যে পার্থক্য খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result","""['assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]', 'assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]', 'assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]']"""
336,"একটি ফাংশন লিখুন যাতে প্রবেশকারী সংখ্যা e ((n, k) পাওয়া যায়।","def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","""['assert zigzag(4, 3) == 5', 'assert zigzag(4, 2) == 4', 'assert zigzag(3, 1) == 1']"""
337,একটি আয়তক্ষেত্রে বর্গক্ষেত্রের সংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6","""['assert count_Squares(4,3) == 20', 'assert count_Squares(1,2) == 2', 'assert count_Squares(2,2) == 5']"""
338,একটি ফাংশন লিখুন যা প্রদত্ত দৈর্ঘ্যের ক্রমগুলি গণনা করে যার অ-নেতিবাচক উপসর্গ যোগফল রয়েছে যা প্রদত্ত মান দ্বারা উত্পন্ন হতে পারে।,"def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) ","""['assert find_ways(4) == 2', 'assert find_ways(6) == 5', 'assert find_ways(8) == 14']"""
339,প্রদত্ত স্ট্রিংটি বাইনারি স্ট্রিং কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") ","""['assert check(\""01010101010\"") == \""Yes\""', 'assert check(\""name0\"") == \""No\""', 'assert check(\""101\"") == \""Yes\""']"""
340,শুধুমাত্র একটি অক্ষরের উপস্থিতি সরিয়ে স্ট্রিংয়ের দৈর্ঘ্যকে ন্যূনতম করার জন্য একটি পাইথন ফাংশন লিখুন।,"def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc ","""['assert minimum_Length(\""mnm\"") == 1', 'assert minimum_Length(\""abcda\"") == 3', 'assert minimum_Length(\""abcb\"") == 2']"""
341,একটি প্রদত্ত অ্যারেতে k বার ঘটে যাওয়া প্রথম উপাদানটি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1","""['assert first_Element([0,1,2,3,4,5],6,1) == 0', 'assert first_Element([1,2,1,3,4],5,2) == 1', 'assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2']"""
342,একটি প্রদত্ত স্ট্রিংয়ের সমস্ত অক্ষর অনন্য কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;","""[\""assert unique_Characters('aba') == False\"", \""assert unique_Characters('abc') == True\"", \""assert unique_Characters('abab') == False\""]"""
343,একটি প্রদত্ত নেস্টেড তালিকা থেকে একটি নির্দিষ্ট কলাম অপসারণ করার জন্য একটি ফাংশন লিখুন।,"def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1","""['assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]', 'assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]', 'assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]']"""
344,একটি ফাংশন লিখুন যা অঙ্কবিজ্ঞান প্রক্রিয়ার টি-এনথ মেয়াদ খুঁজে বের করে।,"def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn","""['assert tn_ap(1,5,2)==9', 'assert tn_ap(2,6,4)==22', 'assert tn_ap(1,4,5)==16']"""
345,একটি পাইথন ফাংশন লিখুন যা ব্যাসার্ধ r এর একটি বৃত্তের মধ্যে আয়তক্ষেত্রের সংখ্যা গণনা করে।,"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ","""['assert count_Rectangles(2) == 8', 'assert count_Rectangles(1) == 1', 'assert count_Rectangles(0) == 0']"""
346,একটি ত্রিভুজের তৃতীয় কোণ খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def find_angle(a,b):
 c = 180 - (a + b)
 return c
","""['assert find_angle(47,89)==44', 'assert find_angle(45,95)==40', 'assert find_angle(50,40)==90']"""
347,একটি ফাংশন লিখুন যা সকল প্রদত্ত টুপল রেকর্ডের সর্বোচ্চ উপাদান খুঁজে বের করে।,"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ","""['assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10', 'assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11', 'assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12']"""
348,মানচিত্র এবং ল্যাম্বদা ফাংশন ব্যবহার করে দুটি তালিকার মডুলো বিভাজন খুঁজে পেতে একটি ফাংশন লিখুন।,"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)","""['assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]', 'assert moddiv_list([3,2],[1,4])==[0, 2]', 'assert moddiv_list([90,120],[50,70])==[40, 50]']"""
349,"একটি পাইথন ফাংশন লিখুন যাচাই করতে হবে যে, বর্গক্ষেত্র সমীকরণের একটি মূল অন্যটির দ্বিগুণ কিনা।","def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ","""['assert Check_Solution(1,3,2) == \""Yes\""', 'assert Check_Solution(1,2,3) == \""No\""', 'assert Check_Solution(1,-5,6) == \""No\""']"""
350,একটি ফাংশন লিখুন nth ক্যারোল সংখ্যা খুঁজে পেতে।,"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2","""['assert get_carol(2) == 7', 'assert get_carol(4) == 223', 'assert get_carol(5) == 959']"""
351,একটি প্রদত্ত তালিকা থেকে খালি তালিকা অপসারণের জন্য একটি ফাংশন লিখুন।,"def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty","""[\""assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\"", \""assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\"", \""assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']\""]"""
352,একটি প্রদত্ত তালিকায় সর্বোচ্চ সংখ্যক বার প্রদর্শিত আইটেমটি খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result","""['assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2', 'assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0', 'assert max_occurrences([1,2,3,1,2,4,1]) == 1']"""
353,একটি ফাংশন লিখুন যাতে k উপাদানগুলিকে টিপলের প্রতিটি উপাদান যোগ করা যায়।,"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ","""['assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]', 'assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]', 'assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]']"""
354,একটি ফাংশন লিখুন যা প্রদত্ত বাইনারি স্ট্রিংকে বিকল্প অক্ষরের একটি ক্রম তৈরি করতে প্রয়োজনীয় ফ্লিপগুলির সংখ্যা খুঁজে বের করে।,"def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ","""['assert min_flip_to_make_string_alternate(\""0001010111\"") == 2', 'assert min_flip_to_make_string_alternate(\""001\"") == 1', 'assert min_flip_to_make_string_alternate(\""010111011\"") == 2 ']"""
355,একটি প্রদত্ত সংখ্যার অঙ্ক সংখ্যা গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count","""['assert count_Digit(12345) == 5', 'assert count_Digit(11223305) == 8', 'assert count_Digit(4123459) == 7']"""
356,একটি পাইথন ফাংশন লিখুন যা একটি প্রদত্ত পূর্ণসংখ্যার তালিকা থেকে সংলগ্ন উপাদানগুলির জোড়ার বৃহত্তম পণ্য খুঁজে বের করে।,"def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))","""['assert adjacent_num_product([1,2,3,4,5,6]) == 30', 'assert adjacent_num_product([1,2,3,4,5]) == 20', 'assert adjacent_num_product([2,3]) == 6']"""
357,একটি বাইনারি ট্রি ভারসাম্যপূর্ণ কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False","""['assert is_tree_balanced(root) == False', 'assert is_tree_balanced(root1) == True', 'assert is_tree_balanced(root2) == False ']"""
358,একটি ফাংশন লিখুন যা প্রদত্ত টিপলকে n বার পুনরাবৃত্তি করে।,"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ","""['assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))', 'assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))', 'assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))']"""
359,একটি ক্রিয়া লিখুন যা ঘনক্ষেত্রের পাশের পৃষ্ঠের ক্ষেত্রফল খুঁজে বের করে,"def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA","""['assert lateralsurface_cuboid(8,5,6)==156', 'assert lateralsurface_cuboid(7,9,10)==320', 'assert lateralsurface_cuboid(10,20,30)==1800']"""
360,একটি ফাংশন লিখুন যাতে একটি টিপল তার ফ্লোট এলিমেন্ট দ্বারা সাজানো যায়।,"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort","""[\""assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \"", \""assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \"", \""assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] \""]"""
361,একটি শ্রেণীবদ্ধ অ্যারেতে ক্ষুদ্রতম অনুপস্থিত উপাদান খুঁজে পেতে একটি ফাংশন লিখুন।,"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)","""['assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7', 'assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3', 'assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0']"""
362,হিপ ক্যু অ্যালগরিদম ব্যবহার করে একটি প্রদত্ত উপাদান তালিকাকে ক্রমবর্ধমান ক্রমে বাছাই করার জন্য একটি ফাংশন লিখুন।,"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result","""['assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]', 'assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]', 'assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]']"""
363,একটি ঘনক্ষেত্রের আয়তন খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","""['assert volume_cuboid(1,2,3)==6', 'assert volume_cuboid(5,7,9)==315', 'assert volume_cuboid(10,15,21)==3150']"""
364,একটি প্রদত্ত স্ট্রিং এর সমস্ত পার্মুটেশন সহ ডুপ্লিকেট প্রিন্ট করার জন্য একটি ফাংশন লিখুন।,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list","""[\""assert permute_string('ab')==['ab', 'ba']\"", \""assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\"", \""assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\""]"""
365,একটি নির্দিষ্ট সংখ্যার নিকটতম গুণিতক দিয়ে প্রদত্ত সংখ্যাটিকে গোলাকার করার জন্য একটি ফাংশন লিখুন।,"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)","""['assert round_num(4722,10)==4720', 'assert round_num(1111,5)==1110', 'assert round_num(219,2)==218']"""
366,একটি ফাংশন লিখুন যাতে একাধিকবার উপস্থিত টিপল উপাদানগুলি সরিয়ে ফেলা যায় এবং ডুপ্লিকেটগুলিকে কিছু কাস্টম মান দিয়ে প্রতিস্থাপন করা যায়।,"def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)","""[\""assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\"", \""assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\"", \""assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\""]"""
367,একটি প্রদত্ত স্ট্রিংয়ে অক্ষরের সমস্ত উপস্থিতি অপসারণ করতে একটি পাইথন ফাংশন লিখুন।,"def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) ","""['assert remove_Char(\""aba\"",\\'a\\') == \""b\""', 'assert remove_Char(\""toggle\"",\\'g\\') == \""tole\""', 'assert remove_Char(\""aabbc\"",\\'b\\') == \""aac\""']"""
368,একটি পাইথন ফাংশন লিখুন যা প্রদত্ত তালিকার শেষ উপাদানকে প্রথম অবস্থানে স্থানান্তরিত করে।,"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list","""['assert move_first([1,2,3,4]) == [4,1,2,3]', 'assert move_first([0,1,2,3]) == [3,0,1,2]', 'assert move_first([9,8,7,1]) == [1,9,8,7]']"""
369,একটি ঘনক্ষেত্রের পৃষ্ঠতল এলাকা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA","""['assert surfacearea_cuboid(1,2,3)==22', 'assert surfacearea_cuboid(5,7,9)==286', 'assert surfacearea_cuboid(10,15,21)==1350']"""
370,একটি দ্বি-মাত্রিক অ্যারে তৈরি করতে একটি ফাংশন লিখুন।,"def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
","""['assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ', 'assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]', 'assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]']"""
371,একটি ফাংশন লিখুন যা অভ্যন্তরীণ তালিকার প্রদত্ত সূচকের দ্বারা তালিকার একটি তালিকা বাছাই করে।,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result","""[\""assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\"", \""assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\"", \""assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\""]"""
372,একটি বৃত্তাকারভাবে সাজানো অ্যারেতে ঘূর্ণনের সংখ্যা খুঁজে পেতে একটি ফাংশন লিখুন।,"def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1","""['assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3', 'assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3', 'assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0']"""
373,একটি প্রদত্ত সংখ্যার সমস্ত বিজোড় বিট টগল করার জন্য একটি পাইথন ফাংশন লিখুন।,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","""['assert even_bit_toggle_number(10) == 15', 'assert even_bit_toggle_number(20) == 1', 'assert even_bit_toggle_number(30) == 11']"""
374,একটি প্রদত্ত অ্যারেতে ক্ষুদ্রতম মানের ফ্রিকোয়েন্সি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","""['assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1', 'assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1', 'assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3']"""
375,পুনরাবৃত্তি ব্যবহার করে n'th পারিন সংখ্যা খুঁজে পেতে একটি ফাংশন লিখুন।,"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)","""['assert get_perrin(9) == 12', 'assert get_perrin(4) == 2', 'assert get_perrin(6) == 5']"""
376,প্রদত্ত স্ট্রিং-এ ব্র্যাকেট ব্যালেন্সিং-এর জন্য প্রয়োজনীয় সর্বনিম্ন সংখ্যক সোয়্যাপের জন্য একটি ফাংশন লিখুন।,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap","""['assert swap_count(\""[]][][\"") == 2', 'assert swap_count(\""[[][]]\"") == 0', 'assert swap_count(\""[[][]]][\"") == 1']"""
377,ষোড়শমাংশ সংখ্যাটি জোড়া বা অদ্ভুত কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") ","""['assert even_or_odd(\""AB3454D\"") ==\""Odd\""', 'assert even_or_odd(\""ABC\"") == \""Even\""', 'assert even_or_odd(\""AAD\"") == \""Odd\""']"""
378,একটি পাইথন ফাংশন লিখুন ২ এর সর্বোচ্চ শক্তি যা n এর চেয়ে কম বা সমান।,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ","""['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']"""
379,n'th lucas সংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ","""['assert find_lucas(9) == 76', 'assert find_lucas(4) == 7', 'assert find_lucas(3) == 4']"""
380,একটি ফাংশন লিখুন যাতে একটি নির্দিষ্ট স্ট্রিং একটি তালিকার সমস্ত আইটেমের শুরুতে সন্নিবেশ করা যায়।,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string","""[\""assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\"", \""assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\"", \""assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\""]"""
381,একটির বেশি তালিকাকে নেস্টেড অভিধানে রূপান্তর করার জন্য একটি ফাংশন লিখুন।,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result","""['assert convert_list_dictionary([\""S001\"", \""S002\"", \""S003\"", \""S004\""],[\""Adina Park\"", \""Leyton Marsh\"", \""Duncan Boyle\"", \""Saim Richards\""] ,[85, 98, 89, 92])==[{\\'S001\\': {\\'Adina Park\\': 85}}, {\\'S002\\': {\\'Leyton Marsh\\': 98}}, {\\'S003\\': {\\'Duncan Boyle\\': 89}}, {\\'S004\\': {\\'Saim Richards\\': 92}}]', 'assert convert_list_dictionary([\""abc\"",\""def\"",\""ghi\"",\""jkl\""],[\""python\"",\""program\"",\""language\"",\""programs\""],[100,200,300,400])==[{\\'abc\\':{\\'python\\':100}},{\\'def\\':{\\'program\\':200}},{\\'ghi\\':{\\'language\\':300}},{\\'jkl\\':{\\'programs\\':400}}]', 'assert convert_list_dictionary([\""A1\"",\""A2\"",\""A3\"",\""A4\""],[\""java\"",\""C\"",\""C++\"",\""DBMS\""],[10,20,30,40])==[{\\'A1\\':{\\'java\\':10}},{\\'A2\\':{\\'C\\':20}},{\\'A3\\':{\\'C++\\':30}},{\\'A4\\':{\\'DBMS\\':40}}]']"""
382,"প্রদত্ত সমীকরণ f (n) = max (f (n/2) + f (n/3) + f (n/4) + f (n/5)), n ব্যবহার করে সর্বাধিক সম্ভাব্য যোগফল খুঁজে বের করার জন্য একটি ফাংশন লিখুন।","def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]","""['assert get_max_sum(60) == 106', 'assert get_max_sum(10) == 12', 'assert get_max_sum(2) == 2']"""
383,ল্যাম্বদা ফাংশন ব্যবহার করে সর্বাধিক দৈর্ঘ্যের তালিকাটি খুঁজে পেতে একটি ফাংশন লিখুন।,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)","""['assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])', 'assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])']"""
384,প্রদত্ত টিপলটি স্বতন্ত্র কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ","""['assert check_distinct((1, 4, 5, 6, 1, 4)) == False', 'assert check_distinct((1, 4, 5, 6)) == True', 'assert check_distinct((2, 3, 4, 5, 6)) == True']"""
385,একটি প্রদত্ত স্ট্রিংয়ের প্রথম অ-পুনরাবৃত্ত অক্ষরটি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None","""['assert first_non_repeating_character(\""abcabc\"") == None', 'assert first_non_repeating_character(\""abc\"") == \""a\""', 'assert first_non_repeating_character(\""ababc\"") == \""c\""']"""
386,একটি ফাংশন লিখুন যা দিয়ে চেক করা যায় যে প্রদত্ত স্ট্রিং একই অক্ষর দিয়ে শুরু এবং শেষ হয় কিনা বা রেজেক্স ব্যবহার করে না।,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ","""['assert check_char(\""abba\"") == \""Valid\""', 'assert check_char(\""a\"") == \""Valid\""', 'assert check_char(\""abcd\"") == \""Invalid\""']"""
387,তিনটি নির্দিষ্ট সংখ্যার মধ্যমা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median","""['assert median_numbers(25,55,65)==55.0', 'assert median_numbers(20,10,30)==20.0', 'assert median_numbers(15,45,75)==45.0']"""
388,একটি প্রদত্ত তালিকার প্রতিটি সংখ্যার অঙ্কগুলির যোগফল গণনা করার জন্য একটি ফাংশন লিখুন।,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())","""['assert sum_of_digits([10,2,56])==14', \""assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\"", 'assert sum_of_digits([10,20,-4,5,-70])==19']"""
389,প্রদত্ত টুপলগুলিতে গাণিতিক বিটসওয়াইস এক্সর অপারেশন সম্পাদন করার জন্য একটি ফাংশন লিখুন।,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","""['assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)', 'assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)', 'assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)']"""
390,প্রদত্ত তালিকার ক্রম নির্বিশেষে অনন্য টুপলের ফ্রিকোয়েন্সি বের করার জন্য একটি ফাংশন লিখুন।,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)","""['assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3', 'assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4', 'assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4']"""
391,একটি ফাংশন লিখুন যা প্রদত্ত দুটি নেস্টেড টুপলে টুপল উপাদানগুলির সূচক-জ্ঞান যুক্ত করার জন্য।,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","""['assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))', 'assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))', 'assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))']"""
392,ncr%p এর মান গণনা করার জন্য একটি ফাংশন লিখুন।,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","""['assert ncr_modp(10,2,13)==6', 'assert ncr_modp(15,12,43)==25', 'assert ncr_modp(17,9,18)==10']"""
393,একটি URL বৈধ কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False","""['assert is_valid_URL(\""https://www.google.com\"") == True', 'assert is_valid_URL(\""https:/www.gmail.com\"") == False', 'assert is_valid_URL(\""https:// www.redit.com\"") == False']"""
394,দুইটি সংখ্যার সর্বনিম্ন সংখ্যা খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ","""['assert minimum(1,2) == 1', 'assert minimum(-5,-4) == -5', 'assert minimum(0,0) == 0']"""
395,একটি ফাংশন লিখুন যা একটি উপাদান একটি টিপলের মধ্যে বিদ্যমান কিনা তা পরীক্ষা করে।,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False","""['assert check_tuplex((\""w\"", 3, \""r\"", \""e\"", \""s\"", \""o\"", \""u\"", \""r\"", \""c\"", \""e\""),\\'r\\')==True', 'assert check_tuplex((\""w\"", 3, \""r\"", \""e\"", \""s\"", \""o\"", \""u\"", \""r\"", \""c\"", \""e\""),\\'5\\')==False', 'assert check_tuplex((\""w\"", 3, \""r\"", \""e\"", \""s\"", \""o\"", \""u\"", \""r\"", \""c\"",\""e\""),3)==True']"""
396,একটি প্রদত্ত সংখ্যার সমতা খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ","""['assert find_Parity(12) == \""Even Parity\""', 'assert find_Parity(7) == \""Odd Parity\""', 'assert find_Parity(10) == \""Even Parity\""']"""
397,একটি প্রদত্ত সংখ্যার অঙ্কগুলি পুনরায় সাজিয়ে পরবর্তী বৃহত্তর সংখ্যা তৈরি করার জন্য একটি ফাংশন লিখুন।,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False","""['assert rearrange_bigger(12)==21', 'assert rearrange_bigger(10)==False', 'assert rearrange_bigger(102)==120']"""
398,প্রথম অ্যারে থেকে একটি উপাদান এবং দ্বিতীয় অ্যারে থেকে একটি উপাদান নিয়ে গঠিত k সংখ্যক জোড়া খুঁজে পেতে একটি ফাংশন লিখুন।,"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs","""['assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]']"""
399,একটি প্রদত্ত তালিকার মধ্যে টিপলগুলির জোড়া থেকে সর্বনিম্ন পণ্য খুঁজে পেতে একটি ফাংশন লিখুন।,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min","""['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8', 'assert min_product_tuple([(10,20), (15,2), (5,10)] )==30', 'assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']"""
400,একটি নির্দিষ্ট বৈষম্যপূর্ণ তালিকায় সর্বনিম্ন মান খুঁজে পেতে একটি ফাংশন লিখুন।,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val","""[\""assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\"", \""assert min_val(['Python', 15, 20, 25])==15\"", \""assert min_val(['Python', 30, 20, 40, 50, 'version'])==20\""]"""
401,একটি ফাংশন লিখুন যা রেজেক্স ব্যবহার করে দেওয়া সাপ কেস স্ট্রিংকে উট কেস স্ট্রিংয়ে রূপান্তর করে।,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))","""[\""assert snake_to_camel('android_tv') == 'AndroidTv'\"", \""assert snake_to_camel('google_pixel') == 'GooglePixel'\"", \""assert snake_to_camel('apple_watch') == 'AppleWatch'\""]"""
402,একটি প্রদত্ত তালিকা থেকে অদ্ভুত সংখ্যা অপসারণের জন্য একটি পাইথন ফাংশন লিখুন।,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l","""['assert remove_odd([1,2,3]) == [2]', 'assert remove_odd([2,4,6]) == [2,4,6]', 'assert remove_odd([10,20,3]) == [10,20]']"""
403,একটি প্রদত্ত টুপল তালিকা থেকে n-তম উপাদান বের করার জন্য একটি ফাংশন লিখুন।,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result","""[\""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\"", \""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\"", \""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\""]"""
404,একটি পাইথন ফাংশন লিখুন যাতে মানটি একটি ক্রমের মধ্যে বিদ্যমান কিনা তা পরীক্ষা করা যায়।,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0","""['assert overlapping([1,2,3,4,5],[6,7,8,9]) == False', 'assert overlapping([1,2,3],[4,5,6]) == False', 'assert overlapping([1,4,5],[1,4,5]) == True']"""
405,একটি প্রদত্ত পূর্ণসংখ্যা অ্যারে থেকে সর্বোচ্চ পণ্য সহ একটি জোড়া খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ","""['assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)', 'assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)', 'assert max_Product([1,2,3]) == (2,3)']"""
406,একটি ফাংশন লিখুন যেটা দিয়ে আমরা সর্বোচ্চ যোগফল বের করতে পারি। আমরা সংখ্যাটিকে তিন ভাগে বিভক্ত করে এবং তারপর সেই সংখ্যাটির জন্য যোগফল বের করতে পারি।,"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]","""['assert breakSum(12) == 13', 'assert breakSum(24) == 27', 'assert breakSum(23) == 23']"""
407,একটি ফাংশন লিখুন যা টিপল তালিকার সাধারণ প্রথম উপাদান খুঁজে বের করে।,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ","""[\""assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\"", \""assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\"", \""assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\""]"""
408,সর্বাধিক দৈর্ঘ্যের উপ-তালিকাটি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList","""[\""assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\"", 'assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]', 'assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]']"""
409,একটি প্রদত্ত সংখ্যার তালিকার প্রতিটি সংখ্যাকে গোলাকার করার জন্য একটি ফাংশন লিখুন এবং তালিকার দৈর্ঘ্যের দ্বারা মোট যোগফলকে গুণ করুন।,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum","""['assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243', 'assert round_and_sum([5,2,9,24.3,29])==345', 'assert round_and_sum([25.0,56.7,89.2])==513']"""
410,প্রথম n টি সম সংখ্যাগুলির ঘনফলের সমষ্টি খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum","""['assert cube_Sum(2) == 72', 'assert cube_Sum(3) == 288', 'assert cube_Sum(4) == 800']"""
411,একটি ফাংশন লিখুন যাতে প্রতিটি উপাদানকে ডিলিমিটার দ্বারা সংযুক্ত করা যায়।,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ","""['assert concatenate_tuple((\""ID\"", \""is\"", 4, \""UTS\"") ) == \\'ID-is-4-UTS\\'', 'assert concatenate_tuple((\""QWE\"", \""is\"", 4, \""RTY\"") ) == \\'QWE-is-4-RTY\\'', 'assert concatenate_tuple((\""ZEN\"", \""is\"", 4, \""OP\"") ) == \\'ZEN-is-4-OP\\'']"""
412,প্রথম n টি প্রাকৃতিক সংখ্যার ঘনক্ষেত্রের গড় খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ","""['assert find_Average_Of_Cube(2) == 4.5', 'assert find_Average_Of_Cube(3) == 12', 'assert find_Average_Of_Cube(1) == 1']"""
413,সোনার খনি সমস্যা সমাধানের জন্য একটি ফাংশন লিখুন।,"def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ","""['assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16', 'assert get_maxgold([[10,20],[30,40]],2,2)==70', 'assert get_maxgold([[4,9],[3,7]],2,2)==13']"""
414,একটি ফাংশন লিখুন যা প্রদত্ত টিপল থেকে প্রতিটি স্ট্রিংয়ের শুধুমাত্র রিয়ার ইন্ডেক্স এলিমেন্ট বের করে।,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ","""[\""assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\"", \""assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\"", \""assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\""]"""
415,একটি নির্দিষ্ট উপাদান ধারণকারী উপ-তালিকার সংখ্যা গণনা করার জন্য একটি ফাংশন লিখুন।,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr","""['assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3', \""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\"", \""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\""]"""
416,ল্যাম্বদা ফাংশন ব্যবহার করে অদ্ভুত সংখ্যা ফিল্টার করার জন্য একটি ফাংশন লিখুন।,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums","""['assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]', 'assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]', 'assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]']"""
417,রেজেক্স ব্যবহার করে yyyy-mm-dd ফরম্যাটে তারিখকে dd-mm-yyyy ফরম্যাটে রূপান্তর করার জন্য একটি ফাংশন লিখুন।,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)","""['assert change_date_format(\""2026-01-02\"") == \\'02-01-2026\\'', 'assert change_date_format(\""2020-11-13\"") == \\'13-11-2020\\'', 'assert change_date_format(\""2021-04-26\"") == \\'26-04-2021\\'']"""
418,শেল বাছাই ব্যবহার করে প্রদত্ত অ্যারে বাছাই করার জন্য একটি ফাংশন লিখুন।,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","""['assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]', 'assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]', 'assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]']"""
419,প্রদত্ত দুটি টুপল থেকে উপাদান এবং টুপল বের করার জন্য একটি ফাংশন লিখুন।,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","""['assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)', 'assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)', 'assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)']"""
420,একটি প্যারাবোলার ডাইরেক্ট্রিক্স খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix","""['assert parabola_directrix(5,3,2)==-198', 'assert parabola_directrix(9,8,4)==-2336', 'assert parabola_directrix(2,4,6)==-130']"""
421,এমন একটি ফাংশন লিখুন যা দুটি তালিকা গ্রহণ করে এবং সত্য ফেরত দেয় যদি তাদের কমপক্ষে একটি সাধারণ উপাদান থাকে।,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result","""['assert common_element([1,2,3,4,5], [5,6,7,8,9])==True', 'assert common_element([1,2,3,4,5], [6,7,8,9])==None', \""assert common_element(['a','b','c'], ['d','b','e'])==True\""]"""
422,ট্র্যাপিসিয়ামের মধ্যমা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median","""['assert median_trapezium(15,25,35)==20', 'assert median_trapezium(10,20,30)==15', 'assert median_trapezium(6,9,4)==7.5']"""
423,প্রদত্ত অ্যারের উপাদানগুলির চেয়ে প্রবেশ করা সংখ্যাটি বড় কিনা তা পরীক্ষা করার জন্য একটি ফাংশন লিখুন।,"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')","""[\""assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\"", \""assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\"", \""assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\""]"""
424,একটি ফাংশন লিখুন যা একটি স্ট্রিংয়ের সাথে মিলে যায় যার মধ্যে একটি বা একাধিক বি রয়েছে।,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
","""['assert text_match_one(\""ac\"")==(\\'Not matched!\\')', 'assert text_match_one(\""dc\"")==(\\'Not matched!\\')', 'assert text_match_one(\""abba\"")==(\\'Found a match!\\')']"""
425,একটি প্রদত্ত সংখ্যার শেষ অঙ্ক খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def last_Digit(n) :
    return (n % 10) ","""['assert last_Digit(123) == 3', 'assert last_Digit(25) == 5', 'assert last_Digit(30) == 0']"""
426,একটি তালিকায় নেতিবাচক সংখ্যা প্রিন্ট করার জন্য একটি পাইথন ফাংশন লিখুন।,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ","""['assert neg_nos([-1,4,5,-6]) == -1,-6', 'assert neg_nos([-1,-2,3,4]) == -1,-2', 'assert neg_nos([-7,-6,8,9]) == -7,-6']"""
427,একটি স্ট্রিংয়ের অদ্ভুত অক্ষরগুলি অপসারণ করার জন্য একটি ফাংশন লিখুন।,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2","""['assert remove_odd(\""python\"")==(\""yhn\"")', 'assert remove_odd(\""program\"")==(\""rga\"")', 'assert remove_odd(\""language\"")==(\""agae\"")']"""
428,দ্বি-মুখী টুপল জোড়া গণনা করার জন্য একটি ফাংশন লিখুন।,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ","""[\""assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\"", \""assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\"", \""assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'\""]"""
429,একাধিক পূর্ণসংখ্যার একটি তালিকাকে একটি একক পূর্ণসংখ্যায় রূপান্তর করার জন্য একটি ফাংশন লিখুন।,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x","""['assert multiple_to_single([11, 33, 50])==113350', 'assert multiple_to_single([-1,2,3,4,5,6])==-123456', 'assert multiple_to_single([10,15,20,25])==10152025']"""
430,একটি নির্দিষ্ট বাক্যে সব ক্রিয়া এবং তাদের অবস্থান খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))","""['assert find_adverb_position(\""clearly!! we can see the sky\"")==(0, 7, \\'clearly\\')', 'assert find_adverb_position(\""seriously!! there are many roses\"")==(0, 9, \\'seriously\\')', 'assert find_adverb_position(\""unfortunately!! sita is going to home\"")==(0, 13, \\'unfortunately\\')']"""
431,একটি ঘনক্ষেত্রের পৃষ্ঠতল এলাকা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea","""['assert surfacearea_cube(5)==150', 'assert surfacearea_cube(3)==54', 'assert surfacearea_cube(10)==600']"""
432,পূর্ণসংখ্যার একটি অ্যারেতে ধনাত্মক সংখ্যার অনুপাত খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","""['assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54', 'assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69', 'assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56']"""
433,প্রদত্ত তালিকা থেকে বৃহত্তম ঋণাত্মক সংখ্যা খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max","""['assert largest_neg([1,2,3,-4,-6]) == -6', 'assert largest_neg([1,2,3,-8,-9]) == -9', 'assert largest_neg([1,2,3,4,-1]) == -1']"""
434,প্রদত্ত টিউপেল তালিকায় k দ্বারা প্রতিটি টিউপেল ট্রিম করার জন্য একটি ফাংশন লিখুন।,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ","""[\""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\"", \""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\"", \""assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\""]"""
435,একটি ফাংশন লিখুন যা প্রদত্ত দুটি টুপলে টুপল উপাদানগুলির সূচকযুক্ত গুণক সম্পাদন করে।,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","""['assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))', 'assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))', 'assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))']"""
436,একটি পাইথন ফাংশন লিখুন যাতে একটি তালিকার সমস্ত উপাদান একটি টুপলে উপস্থিত হয়।,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ","""[\""assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\"", 'assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6', 'assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2']"""
437,ল্যাম্বদা ফাংশন ব্যবহার করে একটি তালিকার পৃথক উপাদানগুলির কিউবগুলি খুঁজে পেতে একটি ফাংশন লিখুন।,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums","""['assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]', 'assert cube_nums([10,20,30])==([1000, 8000, 27000])', 'assert cube_nums([12,15])==([1728, 3375])']"""
438,পারিন সংখ্যাগুলির যোগফল গণনা করার জন্য একটি ফাংশন লিখুন।,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum","""['assert cal_sum(9) == 49', 'assert cal_sum(10) == 66', 'assert cal_sum(11) == 88']"""
439,"একটি পাইথন ফাংশন লিখুন যাতে পরীক্ষা করা যায় যে, 3 পয়েন্ট দেওয়া হলে ত্রিভুজটি বৈধ কিনা।","def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') ","""[\""assert check_Triangle(1,5,2,5,4,6) == 'Yes'\"", \""assert check_Triangle(1,1,1,4,1,5) == 'No'\"", \""assert check_Triangle(1,1,1,1,1,1) == 'No'\""]"""
440,স্ট্রিং মানের একটি তালিকা থেকে স্ট্রিংগুলির নির্দিষ্ট আকারের এক্সট্র্যাক্ট করার জন্য একটি ফাংশন লিখুন।,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result","""[\""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\"", \""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\"", \""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\""]"""
441,একটি ফাংশন লিখুন যা রেজেক্স ব্যবহার করে প্রদত্ত স্ট্রিং থেকে সমস্ত হোয়াইটস্পেস সরিয়ে দেয়।,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))","""[\""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\"", \""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\"", \""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\""]"""
442,একটি ফাংশন লিখুন যা ক্ষতির পরিমাণ দেয় যদি প্রদত্ত পরিমাণে ক্ষতি হয় অন্যথায় কোনও ফেরত দেয় না।,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None","""['assert loss_amount(1500,1200)==None', 'assert loss_amount(100,200)==100', 'assert loss_amount(2000,5000)==3000']"""
443,একটি সংখ্যার জোড়া গুণকের যোগফল খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ","""['assert sumofFactors(18) == 26', 'assert sumofFactors(30) == 48', 'assert sumofFactors(6) == 8']"""
444,একটি ফাংশন লিখুন যা 'z' ধারণকারী একটি শব্দের সাথে মিলে যায়।,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","""['assert text_match_wordz(\""pythonz.\"")==(\\'Found a match!\\')', 'assert text_match_wordz(\""xyz.\"")==(\\'Found a match!\\')', 'assert text_match_wordz(\""  lang  .\"")==(\\'Not matched!\\')']"""
445,"একটি ফাংশন লিখুন যা দিয়ে পরীক্ষা করা যায় যে, প্রদত্ত মাসের সংখ্যাটিতে ৩১ দিন আছে কি না।","def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False","""['assert check_monthnumb_number(5)==True', 'assert check_monthnumb_number(2)==False', 'assert check_monthnumb_number(6)==False']"""
446,স্ট্রিং মানের একটি প্রদত্ত তালিকায় স্ট্রিংগুলিকে বিপরীত করার জন্য একটি ফাংশন লিখুন।,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result","""[\""assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\"", \""assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\"", \""assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\""]"""
447,সর্বনিম্ন দৈর্ঘ্যের উপ-তালিকাটি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList","""['assert Find_Min([[1],[1,2],[1,2,3]]) == [1]', 'assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]', \""assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\""]"""
448,একটি আয়তক্ষেত্রের ক্ষেত্রফল খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def rectangle_area(l,b):
  area=l*b
  return area","""['assert rectangle_area(10,20)==200', 'assert rectangle_area(10,5)==50', 'assert rectangle_area(4,2)==8']"""
449,একটি প্রদত্ত স্ট্রিং থেকে রেজেক্স ব্যবহার করে বড় হাতের সাবস্ট্রিংগুলি সরিয়ে ফেলার জন্য একটি ফাংশন লিখুন।,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","""[\""assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\"", \""assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\"", \""assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\""]"""
450,প্রতিটি উপ-তালিকার প্রথম উপাদান পেতে একটি পাইথন ফাংশন লিখুন।,"def Extract(lst): 
    return [item[0] for item in lst] ","""['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]', 'assert Extract([[1,2,3],[4, 5]]) == [1,4]', 'assert Extract([[9,8,1],[1,2]]) == [9,1]']"""
451,একটি প্রদত্ত স্ট্রিংয়ের বড় হাতের অক্ষর গণনা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr","""[\""assert upper_ctr('PYthon') == 1\"", \""assert upper_ctr('BigData') == 1\"", \""assert upper_ctr('program') == 0\""]"""
452,একটি প্রদত্ত তালিকার উপাদানগুলির সমস্ত সম্ভাব্য সংমিশ্রণ খুঁজে পেতে একটি ফাংশন লিখুন।,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result","""[\""assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\"", \""assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\"", \""assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\""]"""
453,প্রদত্ত অ্যারের সর্বাধিক পণ্য উপ-অ্যারে খুঁজে পেতে একটি ফাংশন লিখুন।,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far","""['assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112', 'assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ', 'assert max_subarray_product([-2, -40, 0, -2, -3]) == 80']"""
454,একটি ফাংশন লিখুন যা সব মান একই হয় কিনা তা পরীক্ষা করে।,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result","""[\""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\"", \""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\"", \""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\""]"""
455,একটি নির্দিষ্ট অভিধান থেকে খালি আইটেমগুলি বাদ দেওয়ার জন্য একটি ফাংশন লিখুন।,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1","""[\""assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\"", \""assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\"", \""assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\""]"""
456,প্রদত্ত অ্যারেতে পিক উপাদানটি খুঁজে পেতে একটি ফাংশন লিখুন।,"def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) ","""['assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2', 'assert find_peak([2, 3, 4, 5, 6], 5) == 4', 'assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ']"""
457,দশমিক সংখ্যাকে অষ্টম সংখ্যাতে রূপান্তর করতে একটি পাইথন ফাংশন লিখুন।,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)","""['assert decimal_to_Octal(10) == 12', 'assert decimal_to_Octal(2) == 2', 'assert decimal_to_Octal(33) == 41']"""
458,একটি ফাংশন লিখুন যাতে সেই অ্যারের ক্রমবর্ধমান উপসারণের সংখ্যাগুলিকে গুণ করে গঠিত সর্বোচ্চ পণ্যটি পাওয়া যায়।,"def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)","""['assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ', 'assert max_product([4, 42, 55, 68, 80], 5) == 50265600', 'assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ']"""
459,একটি ফাংশন লিখুন যা সর্বোচ্চ k টি স্টক লেনদেন থেকে সর্বাধিক লাভের পরিমাণ খুঁজে বের করে,"def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]","""['assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10', 'assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7', 'assert max_profit([10, 6, 8, 4, 2], 2) == 2']"""
460,প্রদত্ত টুপলগুলির উপাদানগুলির জোড়ায় জোড়ায় যোগ করার জন্য একটি ফাংশন লিখুন।,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","""['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)', 'assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)', 'assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']"""
461,একটি পাইথন ফাংশন লিখুন যাতে অ্যারে গুণের অবশিষ্ট অংশ n দ্বারা ভাগ করা যায়।,"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ","""['assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9', 'assert find_remainder([1,1,1],3,1) == 0', 'assert find_remainder([1,2,1],3,2) == 0']"""
462,প্রদত্ত তালিকায় পরপর সংখ্যা আছে কিনা তা পরীক্ষা করার জন্য একটি পাইথন ফাংশন লিখুন।,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ","""['assert check_Consecutive([1,2,3,4,5]) == True', 'assert check_Consecutive([1,2,3,5,6]) == False', 'assert check_Consecutive([1,2,1]) == False']"""
463,"একটি ফাংশন লিখুন যাতে প্রদত্ত টিপল তালিকার উপাদানগুলির টিপল ছেদ খুঁজে পাওয়া যায়, তাদের ক্রম নির্বিশেষে।","def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)","""['assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}', 'assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}', 'assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}']"""
464,একটি স্ট্রিংয়ের অক্ষর প্রতিস্থাপনের জন্য একটি ফাংশন লিখুন।,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2","""['assert replace_char(\""polygon\"",\\'y\\',\\'l\\')==(\""pollgon\"")', 'assert replace_char(\""character\"",\\'c\\',\\'a\\')==(\""aharaater\"")', 'assert replace_char(\""python\"",\\'l\\',\\'a\\')==(\""python\"")']"""
465,মান অনুযায়ী কাউন্টার বাছাই করার জন্য একটি ফাংশন লিখুন।,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter","""[\""assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\"", \""assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\"", \""assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\""]"""
466,একটি প্রদত্ত অ্যারেতে বৃহত্তম এবং ক্ষুদ্রতম মানের যোগফল খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","""['assert big_sum([1,2,3]) == 4', 'assert big_sum([-1,2,3,4]) == 3', 'assert big_sum([2,3,6]) == 8']"""
467,প্রদত্ত স্ট্রিংকে ছোট হাতের অক্ষরে রূপান্তর করতে একটি পাইথন ফাংশন লিখুন।,"def is_lower(string):
  return (string.lower())","""['assert is_lower(\""InValid\"") == \""invalid\""', 'assert is_lower(\""TruE\"") == \""true\""', 'assert is_lower(\""SenTenCE\"") == \""sentence\""']"""
468,একটি প্রদত্ত স্ট্রিং থেকে ছোট হাতের সাবস্ট্রিংগুলি সরিয়ে ফেলার জন্য একটি ফাংশন লিখুন।,"import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result","""['assert remove_lowercase(\""PYTHon\"")==(\\'PYTH\\')', 'assert remove_lowercase(\""FInD\"")==(\\'FID\\')', 'assert remove_lowercase(\""STRinG\"")==(\\'STRG\\')']"""
469,একটি প্রদত্ত সংখ্যার প্রথম অঙ্ক খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) ","""['assert first_Digit(123) == 1', 'assert first_Digit(456) == 4', 'assert first_Digit(12) == 1']"""
470,একটি প্রদত্ত স্ট্রিংয়ে সর্বাধিক প্রদর্শিত অক্ষর খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch","""['assert get_max_occuring_char(\""data\"") == \""a\""', 'assert get_max_occuring_char(\""create\"") == \""e\""', 'assert get_max_occuring_char(\""brilliant girl\"") == \""i\""']"""
471,একটি ফাংশন লিখুন যা নির্ধারণ করে যে প্রদত্ত সমষ্টিটির একটি উপসেট আছে কিনা যার যোগফল প্রদত্ত সমষ্টির সমান।,"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])","""['assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True', 'assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False', 'assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True']"""
472,একটি ফাংশন লিখুন যা রেজেক্স ব্যবহার করে প্রদত্ত স্ট্রিংয়ের একটি বড় হাতের অক্ষরের পরে ছোট হাতের অক্ষরের ক্রম খুঁজে বের করে।,"import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') ","""['assert match(\""Geeks\"") == \\'Yes\\'', 'assert match(\""geeksforGeeks\"") == \\'Yes\\'', 'assert match(\""geeks\"") == \\'No\\'']"""
473,প্রথম প্রাকৃতিক সংখ্যা খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন যার ফ্যাক্টরিয়াল x দ্বারা বিভাজ্য।,"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ","""['assert first_Factorial_Divisible_Number(10) == 5', 'assert first_Factorial_Divisible_Number(15) == 5', 'assert first_Factorial_Divisible_Number(5) == 4']"""
474,একটি ফাংশন লিখুন যা প্রদত্ত দুটি টুপল থেকে মিলিত টুপলগুলি সরিয়ে ফেলবে।,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ","""[\""assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\"", \""assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\"", \""assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]\""]"""
475,প্রদত্ত অ্যারেতে বৃহত্তম প্যালিনড্রোমিক সংখ্যা খুঁজে পেতে একটি ফাংশন লিখুন।,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1","""['assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545', 'assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5', 'assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9']"""
476,প্রদত্ত সংখ্যার জন্য দ্বিপদী সম্ভাব্যতা গণনা করার জন্য একটি ফাংশন লিখুন।,"def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ","""['assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185', 'assert binomial_probability(11, 6, 2.0/4) == 0.2255859375', 'assert binomial_probability(12, 7, 3.0/5) == 0.227030335488']"""
477,একটি ফাংশন লিখুন যা প্রতিটি টুপলের শেষ উপাদান দ্বারা ক্রমবর্ধমান ক্রমের মধ্যে টুপলগুলির একটি তালিকা বাছাই করে।,"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup","""['assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]', 'assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]', 'assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]']"""
478,একটি পেন্টাগনের ক্ষেত্রফল খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area","""['assert area_pentagon(5)==43.01193501472417', 'assert area_pentagon(10)==172.0477400588967', 'assert area_pentagon(15)==387.10741513251753']"""
479,একটি প্রদত্ত অ্যারেতে বৃহত্তম মানের ফ্রিকোয়েন্সি খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","""['assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2', 'assert frequency_Of_Largest(3,[5,6,5]) == 1', 'assert frequency_Of_Largest(4,[2,7,7,7]) == 3']"""
480,একটি ফাংশন লিখুন যা প্রদত্ত টিপল তালিকায় সমান্তরাল সমস্ত জোড়া বের করে।,"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ","""['assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}', 'assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}', 'assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}']"""
481,জ্যামিতিক ক্রমবর্ধমান সিরিজের যোগফল খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total","""['assert sum_gp(1,5,2)==31', 'assert sum_gp(1,5,4)==341', 'assert sum_gp(2,6,3)==728']"""
482,বাইনারি সার্চ ব্যবহার করে প্রদত্ত অ্যারেতে একটি উপাদান অনুসন্ধান করার জন্য একটি ফাংশন লিখুন।,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found","""['assert binary_search([1,2,3,5,8], 6) == False', 'assert binary_search([7, 8, 9, 10, 13], 10) == True', 'assert binary_search([11, 13, 14, 19, 22, 36], 23) == False']"""
483,"ষড়ভুজ সমন্বয়গুলির একটি গ্রিড গণনা করার জন্য একটি ফাংশন লিখুন যেখানে ফাংশনটি x, y পয়েন্ট সমন্বয়গুলির 6 টিপলযুক্ত তালিকার একটি তালিকা প্রদান করে।","import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons","""['assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]', 'assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]', 'assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]']"""
484,প্রদত্ত বাইনারি টিপলকে পূর্ণসংখ্যায় রূপান্তর করার জন্য একটি ফাংশন লিখুন।,"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ","""[\""assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\"", \""assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\"", \""assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'\""]"""
485,একটি প্রদত্ত স্ট্রিং থেকে রেজেক্স ব্যবহার করে ছোট হাতের সাবস্ট্রিংগুলি সরিয়ে ফেলার জন্য একটি ফাংশন লিখুন।,"import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)","""[\""assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\"", \""assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\"", \""assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'\""]"""
486,একটি ফাংশন লিখুন যা হিপ ক্যু অ্যালগরিদম ব্যবহার করে সংখ্যার একটি তালিকা থেকে ক্ষুদ্রতম পূর্ণসংখ্যা খুঁজে বের করে।,"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums","""['assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ', 'assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]', 'assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]']"""
487,একটি শঙ্কুর পৃষ্ঠতল এলাকা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA","""['assert surfacearea_cone(5,12)==282.7433388230814', 'assert surfacearea_cone(10,15)==880.5179353159282', 'assert surfacearea_cone(19,17)==2655.923961165254']"""
488,দুইটি ধনাত্মক পূর্ণসংখ্যার gcd খুঁজে বের করার জন্য একটি পাইথন ফাংশন লিখুন।,"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd","""['assert gcd(12, 17) == 1', 'assert gcd(4,6) == 2', 'assert gcd(2,9) == 1']"""
489,একটি বৃত্তের ব্যাসার্ধ খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"def diameter_circle(r):
  diameter=2*r
  return diameter","""['assert diameter_circle(10)==20', 'assert diameter_circle(40)==80', 'assert diameter_circle(15)==30']"""
490,একটি ফাংশন লিখুন যা প্রদত্ত তালিকার সমস্ত উপাদানকে একটি স্ট্রিংয়ে সংযুক্ত করে।,"def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ","""[\""assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\"", \""assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\"", \""assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'\""]"""
491,"প্রদত্ত খরচ ম্যাট্রিক্স খরচ [][] এবং খরচ [][] একটি অবস্থান (m, n) জন্য (0, 0) থেকে (m, n) পৌঁছানোর জন্য সর্বনিম্ন খরচ পথ খুঁজে পেতে একটি ফাংশন লিখুন।","R = 3
C = 3
def min_cost(cost, m, n): 
	tc = [[0 for x in range(C)] for x in range(R)] 
	tc[0][0] = cost[0][0] 
	for i in range(1, m+1): 
		tc[i][0] = tc[i-1][0] + cost[i][0] 
	for j in range(1, n+1): 
		tc[0][j] = tc[0][j-1] + cost[0][j] 
	for i in range(1, m+1): 
		for j in range(1, n+1): 
			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] 
	return tc[m][n]","""['assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8', 'assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12', 'assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16']"""
492,প্রদত্ত দুটি টিপল তালিকা থেকে অনুরূপ উপাদানগুলি খুঁজে পেতে একটি ফাংশন লিখুন।,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ","""['assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)', 'assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)', 'assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)']"""
493,অ-প্রাইম সংখ্যা চিহ্নিত করার জন্য একটি পাইথন ফাংশন লিখুন।,"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result","""['assert is_not_prime(2) == False', 'assert is_not_prime(10) == True', 'assert is_not_prime(35) == True']"""
494,হিপ ক্যু অ্যালগরিদম ব্যবহার করে সংখ্যার একটি তালিকা থেকে বৃহত্তম পূর্ণসংখ্যা খুঁজে বের করার জন্য একটি ফাংশন লিখুন।,"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums","""['assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ', 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ', 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]']"""
495,একটি ফাংশন লিখুন যা 3xn বোর্ডের জন্য 2x1 ডোমিনো দিয়ে ভরাট করার উপায়ের সংখ্যা খুঁজে বের করে।,"def count_ways(n): 
	A = [0] * (n + 1) 
	B = [0] * (n + 1) 
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1): 
		A[i] = A[i - 2] + 2 * B[i - 1] 
		B[i] = A[i - 1] + B[i - 2] 
	return A[n] ","""['assert count_ways(2) == 3', 'assert count_ways(8) == 153', 'assert count_ways(12) == 2131']"""
496,একটি পাইথন ফাংশন লিখুন যা দুটি সংখ্যা শুধুমাত্র এক বিট অবস্থানে ভিন্ন কিনা তা পরীক্ষা করে।,"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)","""['assert differ_At_One_Bit_Pos(13,9) == True', 'assert differ_At_One_Bit_Pos(15,8) == False', 'assert differ_At_One_Bit_Pos(2,4) == False']"""
497,একটি ফাংশন লিখুন যা রেজেক্স ব্যবহার করে একটি স্ট্রিংয়ে কমপক্ষে ৪ অক্ষরের দৈর্ঘ্যের সমস্ত শব্দ খুঁজে বের করে।,"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))","""[\""assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\"", \""assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\"", \""assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']\""]"""
498,ল্যাম্বদা ফাংশন ব্যবহার করে একটি তালিকার পৃথক উপাদানগুলির বর্গক্ষেত্র খুঁজে পেতে একটি ফাংশন লিখুন।,"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums","""['assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]', 'assert square_nums([10,20,30])==([100,400,900])', 'assert square_nums([12,15])==([144,225])']"""
499,একই স্ট্রিং পেতে প্রয়োজনীয় ন্যূনতম ঘূর্ণন সংখ্যা খুঁজে পেতে একটি পাইথন ফাংশন লিখুন।,"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n ","""['assert find_Rotations(\""aaaa\"") == 1', 'assert find_Rotations(\""ab\"") == 2', 'assert find_Rotations(\""abc\"") == 3']"""
500,একটি ডাটাসেট থেকে n টি ক্ষুদ্রতম আইটেম পেতে একটি ফাংশন লিখুন।,"import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest","""['assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]', 'assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]', 'assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]']"""
