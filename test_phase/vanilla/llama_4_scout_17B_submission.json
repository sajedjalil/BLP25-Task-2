[
    {
        "id":1,
        "response":" import re\n\n    def remove_Occ(s,ch):\n        if not s or not ch:\n            return s\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ != -1 and last_occ != -1:\n            return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n        return s"
    },
    {
        "id":2,
        "response":" import numpy as np\n     def sort_matrix(M):\n        row_sums = np.sum(M, axis=1)\n        sorted_indices = np.argsort(row_sums)\n        return M[sorted_indices]"
    },
    {
        "id":3,
        "response":" from collections import Counter\n     from typing import Dict, List\n\n     def count_common(words: List[str]) -> Dict[str, int]:\n         word_counts = Counter(words)\n         return dict(word_counts)"
    },
    {
        "id":4,
        "response":" import math \ndef find_Volume(l,b,h) :\n    return 0.5*l*b*h"
    },
    {
        "id":5,
        "response":" import re\n\n    def split_lowerstring(text):\n        return re.sub('([A-Z])', r' \\1', text).lower().lstrip()"
    },
    {
        "id":6,
        "response":" import re\n    def text_lowercase_underscore(text):\n        return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()"
    },
    {
        "id":7,
        "response":" import math\n\ndef square_perimeter(a: float) -> float:\n    return 4 * a<|end_header_id|>"
    },
    {
        "id":8,
        "response":" ```python\nimport re\ndef str_to_list(s1, s2):\n    for char in s2:\n        s1 = re.sub(char, '', s1)\n    return s1\n```"
    },
    {
        "id":9,
        "response":"\n\n\n\nimport typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "id":10,
        "response":" ```python\nimport math\n\ndef is_woodall(x: int) -> bool:\n    if x < 0:\n        return False\n    n = 1\n    while True:\n        woodall_num = (n * 2**n) - 1\n        if woodall_num == x:\n            return True\n        elif woodall_num > x:\n            return False\n        n += 1\n```"
    },
    {
        "id":11,
        "response":" import math\n\ndef multiples_of_num(m,n):\n    return [i for i in range(m, m*n+1, m)]"
    },
    {
        "id":12,
        "response":" import typing\n\ndef find_first_duplicate(nums: typing.List[int]) -> typing.Optional[int]:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"
    },
    {
        "id":13,
        "response":" ```python\nimport sys\nimport itertools\n\ndef maximum_sum(list1):\n    return max(sum(sublist) for sublist in list1)\n```"
    },
    {
        "id":14,
        "response":" ```python\nimport re\ndef binary_to_decimal(binary: str) -> int:\n    if not re.match('^[01]+$', binary):\n        raise ValueError(\"Invalid binary number\")\n    return int(binary, 2)\n```"
    },
    {
        "id":15,
        "response":" import math\n     from collections import Counter\n\n     def find_Product(arr,n):\n        count = Counter(arr)\n        product = 1\n        for i in count:\n            if count[i] == 1:\n                product *= i\n        return product<|eot_id|>"
    },
    {
        "id":16,
        "response":" import typing\n\n    def check_k_elements(test_list: typing.List[typing.Tuple], K: int) -> typing.List[typing.Tuple]:\n        return [i for i in test_list if len(i) == K]"
    },
    {
        "id":17,
        "response":" import re\n     from typing import List\n\n     def remove(lst: List[str]) -> List[str]:\n         return [re.sub('\\d', '', i) for i in lst]"
    },
    {
        "id":18,
        "response":" import math\n\ndef binomial_Coeff(n,k):\n    if k > n - k:\n        k = n - k\n    if k < 0 or k > n:\n        return 0\n    result = 1\n    for i in range(k):\n        result = result * (n - i) \/\/ (i + 1)\n    return result"
    },
    {
        "id":19,
        "response":" import collections\n\n    def get_Odd_Occurrence(arr,arr_size):\n        count_map = collections.defaultdict(int)\n        for num in arr:\n            count_map[num] += 1\n        for num, count in count_map.items():\n            if count % 2 != 0:\n                return num\n        return None"
    },
    {
        "id":20,
        "response":" from typing import List\n\ndef count_substrings(s: str) -> int:\n    n = len(s)\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if s[i] == s[j - 1]:\n                res += 1\n    return res"
    },
    {
        "id":21,
        "response":" import heapq\n    from collections import Counter\n    from typing import List\n\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        count = Counter(nums)\n        return heapq.nlargest(k, count.keys(), key=count.get)"
    },
    {
        "id":22,
        "response":" import math\n\n    def max_Prime_Factors (n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n \/\/= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return max(factors)"
    },
    {
        "id":23,
        "response":" ```python\nimport math\n\ndef decimal_To_Binary(N: int) -> str:\n    if N == 0:\n        return '0'\n    result = ''\n    while N > 0:\n        result = str(N % 2) + result\n        N = N \/\/ 2\n    return result\n```"
    },
    {
        "id":24,
        "response":" import numpy as np\n\ndef find_missing(ar,N):\n    return np.sum(np.arange(1,N+1)) - np.sum(ar)"
    },
    {
        "id":25,
        "response":" import math\n    def find_rect_num(n):\n        return (n * (n + 1)) \/\/ 2"
    },
    {
        "id":26,
        "response":" import re\n     from decimal import Decimal, getcontext\n\ndef find_Nth_Digit(p,q,N) :\n    getcontext().prec = N+2\n    d = Decimal(p) \/ Decimal(q)\n    s = str(d)\n    s = re.sub(r'\\.', '', s)\n    if len(s) < N:\n        return -1\n    return int(s[N-1])"
    },
    {
        "id":27,
        "response":" from typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    ints = sorted([i for i in mixed_list if isinstance(i, int)])\n    strs = sorted([i for i in mixed_list if isinstance(i, str)])\n    return ints + strs<|end_header_id|>"
    },
    {
        "id":28,
        "response":" import itertools\n\n    def div_even_odd(list1):\n        even = list(itertools.filterfalse(lambda x: x % 2, list1))\n        odd = list(itertools.filterfalse(lambda x: x % 2 == 0, list1))\n        if len(even) == 0 or len(odd) == 0:\n            return list1\n        return [even[0] \/ odd[0]]"
    },
    {
        "id":29,
        "response":" import collections\n     import heapq\n\n     def rearrange_string(S):\n        count = collections.Counter(S)\n        max_freq = max(count.values())\n        max_freq_char = [k for k, v in count.items() if v == max_freq]\n        \n        if len(max_freq_char) > (len(S) + 1) \/\/ 2:\n            return \"\"\n        \n        max_heap = [(-freq, char) for char, freq in count.items()]\n        heapq.heapify(max_heap)\n        \n        result = []\n        while max_heap:\n            freq1, char1 = heapq.heappop(max_heap)\n            if result and result[-1] == char1:\n                if not max_heap:\n                    return \"\"\n                freq2, char2 = heapq.heappop(max_heap)\n                result.append(char2)\n                if freq2 < -1:\n                    heapq.heappush(max_heap, (freq2 + 1, char2))\n                heapq.heappush(max_heap, (freq1, char1))\n            else:\n                result.append(char1)\n                if freq1 < -1:\n                    heapq.heappush(max_heap, (freq1 + 1, char1))\n        return \"\".join(result)"
    },
    {
        "id":30,
        "response":" import collections\n\n    def freq_element(nums):\n        counter = collections.Counter(nums)\n        return list(counter.items())"
    },
    {
        "id":31,
        "response":" from typing import List\n\ndef filter_evennumbers(nums: List[int]):\n    even_filter = lambda x: x if x % 2 == 0 else None\n    return list(filter(lambda x: x is not None, map(even_filter, nums)))"
    },
    {
        "id":32,
        "response":" import collections\n\n    def find_Sum(arr,n):\n        count = collections.Counter(arr)\n        sum = 0\n        for i in count:\n            if count[i]>1:\n                sum+=i\n        return sum"
    },
    {
        "id":33,
        "response":" import re\n\n    def text_match(text):\n        pattern = r'[a-z]+_[a-z]+'\n        return re.findall(pattern, text)"
    },
    {
        "id":34,
        "response":" import re\n    def text_match_string(text):\n        return bool(re.match(r'^\\w+', text))<|end_header_id|>"
    },
    {
        "id":35,
        "response":" import math\n\n    def find_gcd(arr):\n        result = arr[0]\n        for num in arr[1:]:\n            result = math.gcd(result, num)\n        return result"
    },
    {
        "id":36,
        "response":" ```python\nimport typing\n\ndef test_distinct(data: typing.List[int]) -> bool:\n    return len(data) == len(set(data))\n```"
    },
    {
        "id":37,
        "response":" import math\n\n    def compute_Last_Digit(A,B):\n        if B > A:\n            return 0\n        else:\n            result = 1\n            for i in range(B+1, A+1):\n                result *= i\n            return result % 10"
    },
    {
        "id":38,
        "response":" import re\n     import typing\n    def odd_bit_set_number(n: int) -> int:\n        i = 1\n        while i < 32:\n            if i % 2 != 0:\n                n = n | i\n            i = i << 1\n        return n<|eot_id|>"
    },
    {
        "id":39,
        "response":" import typing\n\n    def specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n        return [sublist[N] for sublist in nums if len(sublist) > N]"
    },
    {
        "id":40,
        "response":" import typing\n     from functools import reduce\n\n     def min_length_list(input_list: typing.List[typing.List[int]]) -> typing.List[int]:\n        return reduce(lambda x, y: x if len(x) <= len(y) else y, input_list)"
    },
    {
        "id":41,
        "response":" import math\n     def check_equilateral(x,y,z):\n        if x <= 0 or y <= 0 or z <= 0:\n            return False\n        return x == y == z \n    def check_equilateral_print(x,y,z):\n        if check_equilateral(x,y,z):\n            print(\"The triangle is equilateral.\")\n        else:\n            print(\"The triangle is not equilateral.\")<|eot_id|>"
    },
    {
        "id":42,
        "response":" import typing\n\n    def parallelogram_area(b: float, h: float) -> float:\n        return b * h"
    },
    {
        "id":43,
        "response":" ```python\nimport re\n\ndef check_Equality(str: str) -> bool:\n    if not str:\n        return False\n    return bool(re.match(r'^(.).*\\1$', str))\n    ```"
    },
    {
        "id":44,
        "response":" import typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    if not my_list:\n        return my_list\n    max_val = max(my_list)\n    min_val = min(my_list)\n    count = [0] * (max_val - min_val + 1)\n    for num in my_list:\n        count[num - min_val] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    sorted_list = [0] * len(my_list)\n    for num in my_list:\n        sorted_list[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n    return sorted_list<|end_header_id|>"
    },
    {
        "id":45,
        "response":" import math \n\ndef tn_gp(a,n,r):\n    return a * math.pow(r, n-1)"
    },
    {
        "id":46,
        "response":" ```python\nimport math\n\ndef rev(num: int) -> bool:\n    reversed_num = int(str(abs(num))[::-1])\n    if num < 0:\n        reversed_num = -reversed_num\n    return num == 2 * reversed_num - 1\n```"
    },
    {
        "id":47,
        "response":" import itertools\n\ndef find_Max_Num(arr,n) :\n    arr = list(map(str, arr))\n    arr.sort(key=lambda x: x*3, reverse=True)\n    return int(''.join(arr))"
    },
    {
        "id":48,
        "response":" ```python\nimport typing\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x * y) < 0\n```"
    },
    {
        "id":49,
        "response":" import math\n\ndef is_octagonal(n):\n    x = (1 + math.sqrt(1 + 8 * n)) \/ 4\n    return x == int(x)"
    },
    {
        "id":50,
        "response":" import itertools\n\n    def max_len_sub(arr, n):\n        if n == 0:\n            return 0\n        max_len = 1\n        curr_len = 1\n        for i in range(1, n):\n            if abs(arr[i] - arr[i-1]) == 1:\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_len = 1\n        return max(max_len, curr_len)"
    },
    {
        "id":51,
        "response":"\n\n\n\nimport re\ndef count_Substrings(s,n):\n    return len(re.findall(f'(?=(\\\\d{{{n}}}))', s))"
    },
    {
        "id":52,
        "response":" ```python\nimport typing\n\ndef smallest_num(xs: typing.List[int]) -> int:\n    if not xs:\n        raise ValueError(\"List is empty\")\n    return min(xs)\n```"
    },
    {
        "id":53,
        "response":" import itertools\n\ndef max_difference(test_list):\n    return max(abs(a - b) for a, b in itertools.combinations(test_list, 2))"
    },
    {
        "id":54,
        "response":" from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)"
    },
    {
        "id":55,
        "response":"\n\n\n\nfrom typing import List\n\ndef recursive_list_sum(data_list: List[int]) -> int:\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "id":56,
        "response":" ```python\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for num in lst if num > 0)\n```"
    },
    {
        "id":57,
        "response":" import math\n\ndef bell_number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n    return bell[n][0]"
    },
    {
        "id":58,
        "response":" import typing\n\n    def is_Monotonic(A: typing.List[int]) -> bool:\n        increasing = decreasing = True\n\n        for i in range(len(A) - 1):\n            if A[i] > A[i + 1]:\n                increasing = False\n            if A[i] < A[i + 1]:\n                decreasing = False\n\n        return increasing or decreasing"
    },
    {
        "id":59,
        "response":" ```python\nfrom typing import List\n\ndef is_sublist(lst: List, sub: List) -> bool:\n    if not sub:\n        return True\n    if not lst:\n        return False\n    for i in range(len(lst)):\n        if lst[i:i+len(sub)] == sub:\n            return True\n    return False\n```"
    },
    {
        "id":60,
        "response":" import itertools\n\n    def find_equal_tuple(Input, k):\n        length_list = [len(tuple) for tuple in Input]\n        return list(itertools.chain.from_iterable((t for t, l in zip(Input, length_list) if l == k)))"
    },
    {
        "id":61,
        "response":" import typing\n\n    def comb_sort(nums: typing.List[int]) -> typing.List[int]:\n        def get_next_gap(gap):\n            gap = (gap * 10) \/\/ 13\n            if gap < 1:\n                return 1\n            return gap\n\n        n = len(nums)\n        gap = n\n        swapped = True\n\n        while gap != 1 or swapped:\n            gap = get_next_gap(gap)\n            swapped = False\n\n            for i in range(0, n - gap):\n                j = i + gap\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    swapped = True\n        return nums<|end_header_id|>"
    },
    {
        "id":62,
        "response":" import math\n\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if (n + i * i) % (2 * i) == 0 and math.sqrt((n + i * i) \/ (2 * i)) % 1 == 0:\n            return True\n    return False"
    },
    {
        "id":63,
        "response":" import re\n     from typing import List\n\n    def multiple_split(text: str) -> List[str]:\n        return re.split(r'[;,|]+', text)"
    },
    {
        "id":64,
        "response":" import re\n     from typing import List\n\n    def is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n        if len(colors) != len(patterns):\n            return False\n        for color, pattern in zip(colors, patterns):\n            if not re.fullmatch(pattern, color):\n                return False\n        return True"
    },
    {
        "id":65,
        "response":" import typing\n\n    def find_tuples(test_list: typing.List[typing.Tuple[int, ...]], K: int) -> typing.List[typing.Tuple[int, ...]]:\n        return [tup for tup in test_list if all(i % K == 0 for i in tup)]"
    },
    {
        "id":66,
        "response":" import math\n\ndef count_Squares(m,n):\n    return m * n * (m-1) * (n-1) \/\/ 4"
    },
    {
        "id":67,
        "response":" ```python\nimport re\ndef find_Diff(n):\n    even = 0\n    odd = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even += int(digit)\n        else:\n            odd += int(digit)\n    return abs(even - odd)\n```"
    },
    {
        "id":68,
        "response":" import math\n    def count_With_Odd_SetBits(n):\n        x = int(math.log2(n))+1\n        if x%2 == 0:\n            return 2**(x-1)\n        else:\n            return 2**(x-1) + (n-2**(x-1)+1) \/\/2 \n    ```<|eot_id|>"
    },
    {
        "id":69,
        "response":" ```python\nimport re\n\ndef word_len(s):\n    return bool(re.search(r'^\\w*[aeiouAEIOU]\\w*[aeiouAEIOU]\\w*$', s))\n```"
    },
    {
        "id":70,
        "response":" import math\n\ndef tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) \/\/ 6"
    },
    {
        "id":71,
        "response":" import itertools\n\n    def zip_tuples(test_tup1, test_tup2):\n        return list(zip(test_tup1, test_tup2))"
    },
    {
        "id":72,
        "response":" import math\n    def volume_sphere(r):\n        return (4\/3) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":" import string\n\n    def get_Char(strr):\n        sum = 0\n        for char in strr:\n            sum += ord(char)\n        result = chr(sum % 26 + ord('a') if sum % 26 != 0 else ord('z'))\n        return result"
    },
    {
        "id":74,
        "response":" import math\n\ndef sequence(n):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"
    },
    {
        "id":75,
        "response":" import math \n    def surfacearea_sphere(r):\n        return 4 * math.pi * (r ** 2)"
    },
    {
        "id":76,
        "response":" import math\ndef centered_hexagonal_number(n):\n    return 3 * n * n - 3 * n + 1"
    },
    {
        "id":77,
        "response":" import {dict1,dict2, dict3} from typing\n     def merge_dictionaries_three(dict1: dict,dict2: dict, dict3: dict):\n        return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":" from typing import List\nfrom collections import Counter\n\ndef freq_count(list1: List[int]) -> List[tuple]:\n    freq = Counter(list1)\n    return list(freq.items())"
    },
    {
        "id":79,
        "response":" import math\n\n    def closest_num(N):\n        return math.floor(N) if N%1 != 0 else N-1"
    },
    {
        "id":80,
        "response":" ```python\nimport re\ndef len_longest_word(list1):\n    return max(len(re.sub('[^a-zA-Z0-9]','', word)) for word in list1)\n```"
    },
    {
        "id":81,
        "response":" import re\n\n    def find_substring(str_list, sub_str):\n        return [string for string in str_list if re.search(sub_str, string)]"
    },
    {
        "id":82,
        "response":" import re\ndef is_undulating(n):\n    s = str(n)\n    return bool(re.fullmatch('(\\\\d)(\\\\d)\\\\1\\\\2', s)) or bool(re.fullmatch('(\\\\d)\\\\1(\\\\d)\\\\2', s)) and len(s) > 2 \n    and  not  re.search(r'(\\d)\\1{2,}',s) and len(s) > 2<|eot_id|>"
    },
    {
        "id":83,
        "response":" import math\n    def power(a,b):\n        return math.pow(a, b)"
    },
    {
        "id":84,
        "response":" import typing\n\ndef index_minimum(test_list: typing.Tuple) -> typing.Tuple:\n    if not test_list:\n        return ()\n    min_val = min(test_list)\n    indices = [i for i, x in enumerate(test_list) if x == min_val]\n    return tuple(indices)"
    },
    {
        "id":85,
        "response":" import itertools \n\n    def Find_Min_Length(lst):\n        return min(len(sublist) for sublist in itertools.chain.from_iterable(itertools.combinations(lst, r) for r in range(1, len(lst)+1)) if sublist)"
    },
    {
        "id":86,
        "response":" import math\n\n    def divisor(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n \/\/ i == i:\n                    count += 1\n                else:\n                    count += 2\n        return count"
    },
    {
        "id":87,
        "response":" from collections import Counter\n     \n    def frequency_lists(list1):\n        freq = Counter(list1)\n        return list(freq.items())"
    },
    {
        "id":88,
        "response":" import math\n     from typing import List\n\n    def multiply_num(numbers: List[float]) -> float:\n        product = math.prod(numbers)\n        return product \/ len(numbers) if numbers else 0<|end_header_id|>"
    },
    {
        "id":89,
        "response":" ```python\nimport re\n\ndef decimal_to_binary(n: int) -> str:\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        return '-' + bin(abs(n))[2:]\n    return bin(n)[2:]\n```"
    },
    {
        "id":90,
        "response":"\n\n\n\nimport math\n\ndef next_smallest_palindrome(num: int) -> int:\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num: int) -> bool:\n    return str(num) == str(num)[::-1]"
    },
    {
        "id":91,
        "response":" import heapq\n     def kth_element(arr, n, k):\n        if k < 1 or k > n:\n            return None\n        return heapq.nsmallest(k, arr)[-1]"
    },
    {
        "id":92,
        "response":" import re\n    def snake_to_camel(word):\n        components = word.split('_')\n        return components[0] + ''.join(x.capitalize() for x in components[1:])"
    },
    {
        "id":93,
        "response":" import math \n\ndef eulerian_num(n, m):\n    if m == 0:\n        return 1 if n == 0 else 0\n    if n == 0:\n        return 0\n    result = 0\n    for k in range(m + 1):\n        result += math.comb(n, k) * (m + 1 - k) ** n\n    return result"
    },
    {
        "id":94,
        "response":" ```python\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist, key=lambda x: x) for sublist in input_list]\n```"
    },
    {
        "id":95,
        "response":" ```python\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(1 for elem in lst if elem)\n```"
    },
    {
        "id":96,
        "response":" from typing import List, Tuple\n\n    def add_lists(test_list: List[int], test_tup: Tuple[int, ...]) -> List[int]:\n        test_list.extend(test_tup)\n        return test_list"
    },
    {
        "id":97,
        "response":" import re\n\n    def count_Hexadecimal(L,R) :\n        count = 0\n        for i in range(L, R+1):\n            if re.match('^[0-9a-fA-F]+$', str(i)):\n                count += 1\n        return count"
    },
    {
        "id":98,
        "response":" import heapq\n     from typing import List\n\n     def merge_sorted_lists(*args: List[int]) -> List[int]:\n        queue = []\n        for lst in args:\n            if lst:\n                heapq.heappush(queue, (lst[0], 0, lst))\n        result = []\n        while queue:\n            val, idx, lst = heapq.heappop(queue)\n            result.append(val)\n            if idx + 1 < len(lst):\n                heapq.heappush(queue, (lst[idx + 1], idx + 1, lst))\n        return result"
    },
    {
        "id":99,
        "response":" import math\n\ndef odd_Equivalent(s,n):\n    l = len(s)\n    max_count = 0\n    for i in range(l):\n        substring = s[i:] + s[:i]\n        count = 0\n        for j in range(l):\n            if substring[j] != s[j]:\n                count += 1\n        max_count = max(max_count, count)\n    return max_count"
    },
    {
        "id":100,
        "response":" import itertools\n\ndef extract_missing(test_list, strt_val, stop_val):\n    full_range = list(range(strt_val, stop_val+1))\n    return [i for i in full_range if i not in test_list]"
    },
    {
        "id":101,
        "response":" import itertools\n\n     def common_in_nested_lists(nestedlist):\n        if not nestedlist:\n            return []\n        result = set(nestedlist[0])\n        for lst in nestedlist[1:]:\n            result = result.intersection(set(lst))\n        return list(result)"
    },
    {
        "id":102,
        "response":" import math \n    def perimeter(diameter,height) :\n        return 2 * math.pi * (diameter \/ 2) + 2 * height"
    },
    {
        "id":103,
        "response":" import re\n     def check_integer(text):\n        return bool(re.fullmatch(r'-?\\d+', text))<|end_header_id|>"
    },
    {
        "id":104,
        "response":" from typing import List, Tuple\nfrom collections import Counter\n\ndef assign_freq(test_list: List[Tuple[int, int]]) -> List[Tuple[Tuple[int, int], int]]:\n    freq_dict = Counter(test_list)\n    return [(item, freq_dict[item]) for item in test_list]"
    },
    {
        "id":105,
        "response":" ```python\nfrom typing import List, Dict\n\ndef empty_dict(dict_list: List[Dict]) -> bool:\n    return all(not d for d in dict_list)\n```"
    },
    {
        "id":106,
        "response":" import re\n     def tuple_to_int(nums):\n        return int(''.join(map(str,nums)))\n     <|eot_id|>"
    },
    {
        "id":107,
        "response":" ```python\nfrom typing import List, Union\n\ndef list_to_float(test_list: List[Union[str, int, float]]) -> List[Union[float, str, int]]:\n    return [float(i) if isinstance(i, (str, int, float)) and not isinstance(i, bool) else i for i in test_list]\n```"
    },
    {
        "id":108,
        "response":" import re\n\n    def string_to_list(string):\n        return re.findall(r'\\S+', string)"
    },
    {
        "id":109,
        "response":" import collections\n\n    def search(arr, n):\n        count = collections.Counter(arr)\n        for i in range(n):\n            if count[arr[i]] == 1:\n                return arr[i]\n        return -1<|end_header_id|>"
    },
    {
        "id":110,
        "response":" import itertools\n\n    def max_product_tuple(list1):\n        if len(list1) < 2:\n            return None\n        max_product = float('-inf')\n        for tuple1, tuple2 in itertools.combinations(list1, 2):\n            product = tuple1[0] * tuple1[1] * tuple2[0] * tuple2[1]\n            max_product = max(max_product, product)\n        return max_product"
    },
    {
        "id":111,
        "response":" import itertools\n\ndef check_triplet(A, n, sum, count):\n    A.sort()\n    triplets = list(itertools.combinations(A, 3))\n    result = []\n    for triplet in triplets:\n        if sum(triplet) == sum:\n            result.append(triplet)\n            count[0] += 1\n        if count[0] == count[1]:\n            break\n    return result"
    },
    {
        "id":112,
        "response":" import math\n\n    def smartNumber(n):\n        val = 1\n        count = 0\n        while True:\n            sqrt = math.sqrt(val)\n            if sqrt == int(sqrt):\n                count += 1\n                if count == n:\n                    return val\n            val += 1"
    },
    {
        "id":113,
        "response":" ```python\nimport math\n\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        sum_div = 1\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if i * i != n:\n                    sum_div += i + n \/\/ i\n                else:\n                    sum_div += i\n        return sum_div\n\n    amicable_sum = 0\n    for i in range(1, limit):\n        j = sum_of_divisors(i)\n        if j < limit and i != j and sum_of_divisors(j) == i:\n            amicable_sum += i\n    return amicable_sum\n```"
    },
    {
        "id":114,
        "response":" import math \n     import cmath \n\n    def angle_complex(a,b):\n        z = complex(a, b)\n        return cmath.phase(z)"
    },
    {
        "id":115,
        "response":" import itertools\n\n    def find_max_difference(string, n):\n        max_diff = 0\n        curr_ones = 0\n        curr_zeros = 0\n        for i in range(n):\n            if string[i] == '1':\n                curr_ones += 1\n            else:\n                curr_zeros += 1\n            max_diff = max(max_diff, abs(curr_ones - curr_zeros))\n        return max_diff\n    string = \"01001110\"\n    n = len(string)\n    print(find_max_difference(string, n))<|eot_id|>"
    },
    {
        "id":116,
        "response":" import math\n\n    def sum_of_common_divisors(a, b):\n        def get_divisors(n):\n            divisors = []\n            for i in range(1, int(math.sqrt(n)) + 1):\n                if n % i == 0:\n                    divisors.append(i)\n                    if i != n \/\/ i:\n                        divisors.append(n \/\/ i)\n            return divisors\n\n        a_divisors = get_divisors(a)\n        b_divisors = get_divisors(b)\n        common_divisors = set(a_divisors) & set(b_divisors)\n        return sum(common_divisors)\n\n    def sum(a,b):\n        return sum_of_common_divisors(a,b)"
    },
    {
        "id":117,
        "response":" import math\n\ndef multiply_int(x, y):\n    return math.prod([x, y])"
    },
    {
        "id":118,
        "response":" import re\n     from typing import List\n\n    def long_words(n: int, str: str) -> List[str]:\n        return re.findall(r'\\b\\w{%d,}\\b' % (n+1), str)"
    },
    {
        "id":119,
        "response":" import numpy as np\n\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    expected_sum = n * (n**2 + 1) \/\/ 2\n\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if row_sum != expected_sum or col_sum != expected_sum:\n            return False\n\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != expected_sum or diagonal_sum2 != expected_sum:\n        return False\n\n    unique_nums = set(num for row in my_matrix for num in row)\n    if len(unique_nums) != n**2 or not unique_nums.issubset(range(1, n**2 + 1)):\n        return False\n\n    return True"
    },
    {
        "id":120,
        "response":" from typing import List\n    from collections import Counter\n\n    def max_occurrences(nums: List[int]) -> List[int]:\n        count = Counter(nums)\n        max_count = max(count.values())\n        return [num for num, freq in count.items() if freq == max_count]"
    },
    {
        "id":121,
        "response":" ```python\nimport re\n\ndef reverse_vowels(str1):\n    vowels = re.findall('[aeiouAEIOU]', str1)\n    str1_list = list(str1)\n    left, right = 0, len(str1) - 1\n\n    while left < right:\n        if str1_list[left] not in 'aeiouAEIOU':\n            left += 1\n        elif str1_list[right] not in 'aeiouAEIOU':\n            right -= 1\n        else:\n            str1_list[left], str1_list[right] = str1_list[right], str1_list[left]\n            left, right = left + 1, right - 1\n\n    return ''.join(str1_list)\n```"
    },
    {
        "id":122,
        "response":" import re\n\n    def tup_string(tup1):\n        return re.sub('[\\(\\)\\,]', '', str(tup1))<|end_header_id|>"
    },
    {
        "id":123,
        "response":" import functools\n     def sum_negativenum(nums):\n        return functools.reduce(lambda x, y: x + y if y < 0 else x, nums, 0)"
    },
    {
        "id":124,
        "response":" import numpy as np\n\n    def check_last(arr, n, p):\n        last_element = arr[-1]\n        for _ in range(p):\n            if last_element % 2 == 0:\n                last_element = last_element \/\/ 2\n            else:\n                last_element = 3 * last_element + 1\n        if last_element % 2 == 0:\n            return \"even\"\n        else:\n            return \"odd\""
    },
    {
        "id":125,
        "response":" import math\ndef hexagonal_num(n):\n    return ((n * (n - 1)) * 4) + n"
    },
    {
        "id":126,
        "response":"\n\n\n\nimport math\n\ndef cal_electbill(units: float) -> float:\n    if units <= 100:\n        return units * 0.5\n    elif units <= 200:\n        return 100 * 0.5 + (units - 100) * 0.75\n    elif units <= 300:\n        return 100 * 0.5 + 100 * 0.75 + (units - 200) * 1.0\n    elif units <= 400:\n        return 100 * 0.5 + 100 * 0.75 + 100 * 1.0 + (units - 300) * 1.2\n    elif units <= 600:\n        return 100 * 0.5 + 100 * 0.75 + 100 * 1.0 + 100 * 1.2 + (units - 400) * 1.5\n    else:\n        return 100 * 0.5 + 100 * 0.75 + 100 * 1.0 + 100 * 1.2 + 200 * 1.5 + (units - 600) * 2.0"
    },
    {
        "id":127,
        "response":" import typing\n\ndef zero_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    count = nums.count(0)\n    return count \/ len(nums)"
    },
    {
        "id":128,
        "response":" import re\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    return re.fullmatch('1(01)*', bin(n)[2:]) is not None<|eot_id|>"
    },
    {
        "id":129,
        "response":" import math\n    def circle_circumference(r):\n        return 2 * math.pi * r<|end_header_id|>"
    },
    {
        "id":130,
        "response":" from typing import List, Tuple\n    from collections import Counter\n\n    def extract_singly(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        count = Counter(test_list)\n        return [item for item, freq in count.items() if freq == 1]"
    },
    {
        "id":131,
        "response":"\n\n\n\nfrom typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    def flip(nums: List[int], k: int) -> None:\n        nums[:k+1] = reversed(nums[:k+1])\n\n    n = len(nums)\n    while n > 1:\n        max_index = nums.index(max(nums[:n]))\n        if max_index == n - 1:\n            n -= 1\n            continue\n        if max_index != 0:\n            flip(nums, max_index)\n        flip(nums, n - 1)\n        n -= 1\n    return nums"
    },
    {
        "id":132,
        "response":" import collections\n\n    def count_samepair(list1,list2,list3):\n        count1 = collections.Counter(list1)\n        count2 = collections.Counter(list2)\n        count3 = collections.Counter(list3)\n        common = count1 & count2 & count3\n        return list(common.elements())"
    },
    {
        "id":133,
        "response":" ```python\nfrom typing import Tuple, List\n\ndef find_lists(Input: Tuple) -> int:\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n```"
    },
    {
        "id":134,
        "response":" import itertools \n\n    def sum_Pairs(arr,n):\n        return sum(abs(a - b) for a, b in itertools.combinations(arr, 2))"
    },
    {
        "id":135,
        "response":" import sys\n    def max_Abs_Diff(arr,n):\n        return max(arr) - min(arr) \n    <|end_header_id|>"
    },
    {
        "id":136,
        "response":" ```python\ndef ascii_value_string(str1):\n    return sum(ord(char) for char in str1)\n```"
    },
    {
        "id":137,
        "response":" import typing\n\ndef max_path_sum(tri: typing.List[typing.List[int]], m: int, n: int) -> int:\n    for i in range(m - 2, -1, -1):\n        for j in range(n - i):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]"
    },
    {
        "id":138,
        "response":" import re\n     from typing import List\n\ndef sum_digits_single(x: int) -> int:\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    max_sum = 0\n    for i in range(1, n):\n        left_sum = sum(digits[:i])\n        right_sum = sum(digits[i:])\n        max_sum = max(max_sum, left_sum + right_sum)\n    return max_sum<|eot_id|>"
    },
    {
        "id":139,
        "response":" import sys\n     from typing import List\n\n     def longest_subseq_with_diff_one(arr: List[int], n: int) -> List[int]:\n        if n == 0:\n            return []\n        \n        dp = [[num] for num in arr]\n        \n        for i in range(1, n):\n            for j in range(i):\n                if abs(arr[i] - arr[j]) == 1 and len(dp[j]) + 1 > len(dp[i]):\n                    dp[i] = dp[j] + [arr[i]]\n        \n        return max(dp, key=len)"
    },
    {
        "id":140,
        "response":" import math\n    def does_Contain_B(a, b, c):\n        if b == 0:\n            return a == c\n        if a == 0:\n            return c == 0 or (c > 0 and c % b == 0)\n        n = (c - b) \/ a\n        return n >= 0 and n == int(n) and (n % 1 == 0)"
    },
    {
        "id":141,
        "response":" import math \n\n    def gcd(p,q):\n        while q:\n            p,q = q, p % q\n        return p"
    },
    {
        "id":142,
        "response":" from typing import List\n\ndef merge(a: List[int], b: List[int]) -> List[int]:\n    i, j = 0, 0\n    result = []\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n    result += a[i:]\n    result += b[j:]\n    return result\n\ndef merge_sort(arr: List[int]) -> List[int]:\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)"
    },
    {
        "id":143,
        "response":" import numpy as np\n\ndef parabola_vertex(a, b, c):\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return np.array([x, y])"
    },
    {
        "id":144,
        "response":" import typing\n\n    def specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n        result = []\n        for row in nums:\n            if N in row:\n                result.append(N)\n        return result"
    },
    {
        "id":145,
        "response":" import re\n     import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    mask = 0\n    i = 0\n    while i < 32:\n        if i % 2 == 1:\n            mask |= 1 << i\n        i += 1\n    return n ^ mask<|eot_id|>"
    },
    {
        "id":146,
        "response":" ```python\nfrom typing import Tuple\n\ndef tuple_str_int(tuple_str: Tuple[str, ...]) -> Tuple[int, ...]:\n    return tuple(int(i) for i in tuple_str)\n```"
    },
    {
        "id":147,
        "response":" import itertools\n\n    def encode_list(list1):\n        result = []\n        for key, group in itertools.groupby(list1):\n            result.append((key, sum(1 for _ in group)))\n        return result"
    },
    {
        "id":148,
        "response":" import math\n     from typing import List\n\n    def min_Ops(arr: List[int], n: int, k: int) -> List[int]:\n        avg = sum(arr) \/ n\n        if avg != int(avg):\n            return [-1]\n        target = int(avg)\n        ops = 0\n        res = []\n        for i in range(n):\n            diff = arr[i] - target\n            if diff != 0:\n                ops += abs(diff)\n                res.append(target)\n            else:\n                res.append(arr[i])\n        if ops > k:\n            return [-1]\n        return res<|eot_id|>"
    },
    {
        "id":149,
        "response":" import calendar \n\n    def month_season(month, days):\n        if month < 1 or month > 12:\n            return \"Invalid Month\"\n        if days < 1 or days > calendar.monthrange(2024, month)[1]:\n            return \"Invalid Days\"\n        seasons = [\"Winter\", \"Spring\", \"Summer\", \"Autumn\"]\n        if month in [12, 1, 2]:\n            return seasons[0]\n        elif month in [3, 4, 5]:\n            return seasons[1]\n        elif month in [6, 7, 8]:\n            return seasons[2]\n        else:\n            return seasons[3]"
    },
    {
        "id":150,
        "response":" import math\n\n    def solution (a, b, n):\n        for x in range(n \/\/ a + 1):\n            y = (n - a * x) \/ b\n            if y >= 0 and y == int(y):\n                return x * y\n        return -1<|end_header_id|>"
    },
    {
        "id":151,
        "response":" import typing\n\n    def remove_elements(list1: typing.List[int], list2: typing.List[int]) -> typing.List[int]:\n        return [element for element in list1 if element not in list2]"
    },
    {
        "id":152,
        "response":" import math\n\n    def sum_series(n):\n        if n <= 0:\n            return 0\n        sum = 0\n        i = 2\n        while n - i >= 0:\n            sum += n - i\n            i += 2\n        return sum"
    },
    {
        "id":153,
        "response":" import math\n\ndef area_polygon(s, l):\n    n = s\n    a = l\n    return (n * a ** 2) \/ (4 * math.tan(math.pi \/ n))"
    },
    {
        "id":154,
        "response":" import math \n\n    def divSum(n):\n        if n == 1:\n            return 1\n        sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n \/ i == i:\n                    sum = sum + i\n                else:\n                    sum = sum + i + int(n \/ i)\n        return sum - n"
    },
    {
        "id":155,
        "response":" import re\n     from typing import Dict\n\n     def count_char_position(str1: str) -> Dict[int, int]:\n        result = {}\n        for char in str1:\n            if char.isalpha():\n                position = ord(char.lower()) - 96\n                if position in result:\n                    result[position] += 1\n                else:\n                    result[position] = 1\n        return result<|eot_id|>"
    },
    {
        "id":156,
        "response":" import itertools \n\n    def find_even_Pair(A,N):\n        count = 0\n        for i,j in itertools.combinations(A,2):\n            if (i ^ j) % 2 == 0 and i != j:\n                count += 1\n        return count<|eot_id|>"
    },
    {
        "id":157,
        "response":" import math\n    def next_Power_Of_2(n):\n        if n <= 0:\n            return 1\n        return 2 ** math.ceil(math.log2(n))"
    },
    {
        "id":158,
        "response":" from typing import List\n\n    def frequency(a: List[int], x: int) -> int:\n        return a.count(x)"
    },
    {
        "id":159,
        "response":" import math\n\ndef get_pell(n):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, 2 * b + a\n        return b"
    },
    {
        "id":160,
        "response":" import typing\n\n    def sum_range_list(list1: typing.List[int], m: int, n: int) -> typing.List[int]:\n        return [sum(list1[i] for i in range(m, n+1)) if m <= n and m >= 0 and n < len(list1) else 0]"
    },
    {
        "id":161,
        "response":" import math \n\ndef perimeter_pentagon(a: float) -> float:\n    return 5 * a<|end_header_id|>"
    },
    {
        "id":162,
        "response":" import re\n\ndef count_occurance(s):\n    return len(re.findall('std', s))"
    },
    {
        "id":163,
        "response":" import re\n     def remove_splchar(text):\n        return re.sub('[^a-zA-Z0-9]', '', text)"
    },
    {
        "id":164,
        "response":" from typing import List, Dict\n\n    def group_keyvalue(l: List[List[str]]) -> Dict[str, List[str]]:\n        result = {}\n        for key, value in l:\n            if key in result:\n                result[key].append(value)\n            else:\n                result[key] = [value]\n        return result"
    },
    {
        "id":165,
        "response":" import re\n     from typing import List\n\n    def is_valid_parentheses(s: str) -> bool:\n        stack: List[str] = []\n        parentheses_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n        for char in s:\n            if char in parentheses_map.values():\n                stack.append(char)\n            elif char in parentheses_map.keys():\n                if not stack or parentheses_map[char] != stack.pop():\n                    return False\n        return not stack"
    },
    {
        "id":166,
        "response":" import math\n\ndef perimeter_triangle(a,b,c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return None\n    return a + b + c<|eot_id|>"
    },
    {
        "id":167,
        "response":" import math\n\ndef answer(L,R):\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if math.lcm(i, j) <= R:\n                return i \n    return -1<|end_header_id|>"
    },
    {
        "id":168,
        "response":" import re\n\n    def string_literals(patterns,text):\n        for pattern in patterns:\n            if re.search(pattern, text):\n                return pattern\n        return None<|end_header_id|>"
    },
    {
        "id":169,
        "response":" import math \n\ndef is_num_keith(x):\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    seq = digits[:]\n    while seq[-1] < x:\n        seq.append(sum(seq[-n:]))\n    return seq[-1] == x and x > 0"
    },
    {
        "id":170,
        "response":" import math\n\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    dlat = math.radians(elat - slat)\n    dlon = math.radians(elon - slon)\n    a = math.sin(dlat\/2)**2 + math.cos(math.radians(slat))*math.cos(math.radians(elat))*math.sin(dlon\/2)**2\n    c = 2*math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return R * c"
    },
    {
        "id":171,
        "response":" import itertools\n\n    def common_prefix_util(strings):\n        prefix = []\n        for chars in itertools.zip_longest(*strings):\n            if len(set(chars)) == 1 and chars[0] is not None:\n                prefix.append(chars[0])\n            else:\n                break\n        return ''.join(prefix)"
    },
    {
        "id":172,
        "response":" import re\n     import typing\n\n     def find_character(string: str) -> typing.Dict[str, list]:\n        uppercase = re.findall(r'[A-Z]', string)\n        lowercase = re.findall(r'[a-z]', string)\n        special_char = re.findall(r'[^A-Za-z0-9]', string)\n        numeric = re.findall(r'[0-9]', string)\n        return {\n            \"uppercase\": uppercase,\n            \"lowercase\": lowercase,\n            \"special_char\": special_char,\n            \"numeric\": numeric\n        }<|end_header_id|>"
    },
    {
        "id":173,
        "response":" import sys\n     from typing import List\n\n    def count_pairs(arr: List[int], n: int, k: int) -> int:\n        freq = {}\n        for i in arr:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n        count = 0\n        for i in freq:\n            if i + k in freq:\n                count += freq[i] * freq[i + k]\n        if k == 0:\n            count = sum([freq[x] * (freq[x] - 1) \/\/ 2 for x in freq])\n        return count \n    arr = [1, 7, 5, 9, 2, 12, 3]\n    n = len(arr)\n    k = 2\n    print(count_pairs(arr, n, k))<|end_header_id|>"
    },
    {
        "id":174,
        "response":" import typing\n\n    def greater_specificnum(lst: typing.List[int], num: int) -> typing.List[int]:\n        return [i for i in lst if i > num]"
    },
    {
        "id":175,
        "response":" import typing\n\ndef parabola_focus(a: float, b: float, c: float) -> typing.Tuple[float, float]:\n    h = -b \/ (2 * a)\n    k = a * h * h + b * h + c\n    focus_x = h\n    focus_y = k + 1 \/ (4 * a)\n    return focus_x, focus_y"
    },
    {
        "id":176,
        "response":" import re\n    def check_literals(text, patterns):\n        result = []\n        for pattern in patterns:\n            if re.search(pattern, text):\n                result.append(pattern)\n        return result"
    },
    {
        "id":177,
        "response":" import numpy as np\n\ndef longest_common_subsequence(X, Y, m, n):\n    dp = np.zeros((m+1, n+1))\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    lcs = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return \"\".join(reversed(lcs))"
    },
    {
        "id":178,
        "response":" import math\n\ndef prod_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        j = math.sqrt(n \/ (i * i))\n        if j == int(j):\n            return True\n    return False"
    },
    {
        "id":179,
        "response":" import sys\n     from typing import List\n\n    def first_Missing_Positive(arr:List[int],n:int):\n        if n == 0:\n            return 1\n        arr = [x for x in arr if x > 0]\n        if not arr:\n            return 1\n        arr = list(set(arr))\n        arr.sort()\n        if arr[0] > 1:\n            return 1\n        for i in range(len(arr) - 1):\n            if arr[i+1] != arr[i]+1:\n                return arr[i]+1\n        return arr[-1]+1"
    },
    {
        "id":180,
        "response":" import math\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            if (x - x1) ** 2 + (y - y1) ** 2 <= (x2 - x1) ** 2 + (y2 - y1) ** 2 and \\\n               x ** 2 + y ** 2 >= x1 ** 2 + y1 ** 2 and \\\n               x ** 2 + y ** 2 <= x2 ** 2 + y2 ** 2:\n                count += 1\n    return count<|eot_id|>"
    },
    {
        "id":181,
        "response":" import calendar \n\n    def check_monthnumber(monthname3):\n        monthname = ['January', 'February', 'March', 'April', 'May', 'June', \n                    'July', 'August', 'September', 'October', 'November', 'December']\n        if monthname3 in monthname:\n            return  calendar.monthrange(2024, monthname.index(monthname3)+1)[1] == 30\n        else:\n            return \"Invalid month name\""
    },
    {
        "id":182,
        "response":" import re\n\n    def check_String(s: str) -> bool:\n        return bool(re.search(r'\\d', s)) and bool(re.search(r'[a-zA-Z]', s))<|end_header_id|>"
    },
    {
        "id":183,
        "response":" import re\n     from typing import Tuple\n\ndef remove_tuple(test_tup: Tuple) -> Tuple:\n    seen = set()\n    new_tup = tuple(x for x in test_tup if not (x in seen or seen.add(x)))\n    return new_tup"
    },
    {
        "id":184,
        "response":" import re\n\ndef octal_To_Decimal(n):\n    if not isinstance(n, str):\n        raise TypeError(\"Input must be a string\")\n    if not re.match(\"^[0-7]+$\", n):\n        raise ValueError(\"Invalid octal number\")\n    return int(n, 8)"
    },
    {
        "id":185,
        "response":"\n\n\n\nimport bisect\n\ndef first(arr, x, n):\n    index = bisect.bisect_left(arr, x)\n    if index != n and arr[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "id":186,
        "response":" import itertools\n\n    def remove_tuples(test_list, K):\n        return [i for i in test_list if not isinstance(i, tuple) or len(i) != K]"
    },
    {
        "id":187,
        "response":" import operator\n     import math\n\n    def find_exponentio(test_tup1, test_tup2):\n        return tuple(map(lambda x, y: math.pow(x, y), test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":" import math\n\n    def largest_triangle(a, b):\n        c = math.sqrt(a**2 + b**2)\n        if a + b <= c:\n            return 0\n        s = (a + b + c) \/ 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area"
    },
    {
        "id":189,
        "response":" import math\n\n    def highest_Power_of_2(n):\n        if n <= 0:\n            return 0\n        return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":190,
        "response":" ```python\nimport typing\n\ndef position_max(lst: typing.List[int]) -> typing.List[int]:\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]\n```"
    },
    {
        "id":191,
        "response":" import typing\n\n    def chkList(lst: typing.List) -> bool:\n        return len(set(lst)) == 1<|end_header_id|>"
    },
    {
        "id":192,
        "response":" ```python\nimport re\ndef remove_even(str1):\n    return ''.join([c for i, c in enumerate(str1) if (i+1) % 2 != 0])\n```"
    },
    {
        "id":193,
        "response":" import re\n     import typing\n     import itertools\n     import math\n\ndef hamming_distance(x: int, y: int) -> int:\n    return bin(x ^ y).count('1')"
    },
    {
        "id":194,
        "response":" from typing import Any\n\ndef count(s: str, c: Any) -> int:\n    return s.count(str(c))"
    },
    {
        "id":195,
        "response":" import typing\n\n    def inversion_elements(test_tup: typing.Tuple) -> typing.Tuple:\n        return tuple(-i for i in test_tup)"
    },
    {
        "id":196,
        "response":" import re\n     from typing import Tuple\n\n    def concatenate_elements(test_tup: Tuple[str]) -> Tuple[str]:\n        return tuple(''.join(re.findall(r'\\w+', str(elem))) for elem in test_tup)\n    \n    def concatenate_adjacent_elements(test_tup: Tuple[str]) -> Tuple[str]:\n        return tuple(''.join([test_tup[i], test_tup[i+1]]) for i in range(0, len(test_tup)-1, 2))<|eot_id|> \n```python\nimport re\nfrom typing import Tuple\n\ndef concatenate_adjacent_elements(test_tup: Tuple[str]) -> Tuple[str]:\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(0, len(test_tup)-1, 2))\n```"
    },
    {
        "id":197,
        "response":" import re\n     from typing import List\n\n    def find_longest_repeating_subseq(s: str) -> str:\n        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        max_length = 0\n        end = 0\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i != j and s[i - 1] == s[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                    if dp[i][j] > max_length:\n                        max_length = dp[i][j]\n                        end = i\n                else:\n                    dp[i][j] = 0\n        return s[end - max_length: end]"
    },
    {
        "id":198,
        "response":" import re\n     def is_decimal(num):\n        pattern = r'^-?\\d+(\\.\\d+)?$'\n        if re.match(pattern, num):\n            decimal_part = num.split('.')[1] if '.' in num else ''\n            return len(decimal_part) <= 2\n        return False"
    },
    {
        "id":199,
        "response":" import heapq\n     def heap_replace(heap, a):\n        heapq.heappop(heap)\n        heapq.heappush(heap, a)\n        return heap<|end_header_id|>"
    },
    {
        "id":200,
        "response":" import re\n    def is_allowed_specific_char(string):\n        allowed_chars = r'^[a-zA-Z]+$'\n        return bool(re.match(allowed_chars, string))"
    },
    {
        "id":201,
        "response":" import math\ndef count_Num(n):\n    count = 0\n    i = 0\n    while i <= int(math.log2(n)):\n        if (n & (1 << i)) and (n & (1 << (i+1))):\n            count += 1\n        i += 1\n    return count<|eot_id|>"
    },
    {
        "id":202,
        "response":" import math\n\n    def fourth_Power_Sum(n):\n        return sum(i ** 4 for i in range(1, n + 1))"
    },
    {
        "id":203,
        "response":" import typing\n\n    def concatenate_strings(test_tup1: typing.Tuple[str, str], test_tup2: typing.Tuple[str, str]) -> tuple:\n        return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])"
    },
    {
        "id":204,
        "response":" import math\n    def radian_degree(radian: float) -> float:\n        return math.degrees(radian)"
    },
    {
        "id":205,
        "response":" import itertools\n\n    def decode_list(alist):\n        return [x for x, _ in itertools.groupby(alist, key=lambda x: x is not None)] if alist and alist[0] is not None else list(itertools.chain.from_iterable([[x\/\/10,x%10] for x in alist]))"
    },
    {
        "id":206,
        "response":" import typing\n\n    def check_subset_list(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> bool:\n        def flatten(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n            result = []\n            for i in lst:\n                if isinstance(i, list):\n                    result.extend(flatten(i))\n                else:\n                    result.append(i)\n            return result\n\n        set1 = set(flatten(list1))\n        set2 = set(flatten(list2))\n        return set1.issubset(set2)"
    },
    {
        "id":207,
        "response":" ```python\nimport re\ndef first_Repeated_Char(s: str) -> str:\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return \"\"\n```"
    },
    {
        "id":208,
        "response":" import math\n\n    def min_Operations(A,B):\n        return abs(A-B)"
    },
    {
        "id":209,
        "response":" import heapq\n     def extract_min_max(test_tup, K):\n        return heapq.nsmallest(K, test_tup) + heapq.nlargest(K, test_tup)"
    },
    {
        "id":210,
        "response":" import re\n     from typing import List\n\n     def replace_max_specialchar(text: str, n: int) -> str:\n        special_chars: List[str] = re.findall(r'[\\s,.]', text)\n        if n >= len(special_chars):\n            return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n        else:\n            space_count: int = special_chars.count(' ')\n            comma_count: int = special_chars.count(',')\n            dot_count: int = special_chars.count('.')\n            count_dict: dict = {' ': space_count, ',': comma_count, '.': dot_count}\n            sorted_dict: dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n            replace_chars: List[str] = list(sorted_dict.keys())[:n]\n            for char in replace_chars:\n                text = text.replace(char, ':')\n            return text<|eot_id|>"
    },
    {
        "id":211,
        "response":" ```python\nfrom typing import List, Optional\n\ndef first_even(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n```"
    },
    {
        "id":212,
        "response":" ```python\nfrom typing import Tuple, Any\n\ndef check_type(test_tuple: Tuple[Any, ...]) -> bool:\n    return len(set(type(i) for i in test_tuple)) == 1\n```"
    },
    {
        "id":213,
        "response":" import bisect\n\ndef is_majority(arr, n, x):\n    index = bisect.bisect_left(arr, x)\n    if index == n or arr[index] != x:\n        return False\n    return index + arr[index:].count(x) > n \/ 2"
    },
    {
        "id":214,
        "response":" import math\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "id":215,
        "response":" import sys \n\n    def find_Min(arr,low,high):\n        if low == high:\n            return arr[low]\n        if high == low + 1:\n            return min(arr[low], arr[high])\n        mid = (low + high) \/\/ 2\n        if arr[mid] > arr[high]:\n            return find_Min(arr, mid+1, high)\n        if arr[mid] < arr[low]:\n            return find_Min(arr, low, mid)\n        if arr[mid] == arr[low] == arr[high]:\n            return min(find_Min(arr, low, mid), find_Min(arr, mid+1, high))\n        return find_Min(arr, low, mid)"
    },
    {
        "id":216,
        "response":" ```python\nimport re\ndef odd_values_string(s):\n    return ''.join([c for i, c in enumerate(s) if i % 2 == 0])\n```"
    },
    {
        "id":217,
        "response":" import math\ndef min_of_three(a: float, b: float, c: float) -> float:\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":" import math\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    mask = (1 << (r - l + 1)) - 1\n    mask = mask << l\n    if n & mask == mask:\n        return True\n    return False<|end_header_id|>"
    },
    {
        "id":219,
        "response":" import typing\n\ndef re_arrange_array(arr: typing.List[int], n: int) -> typing.List[int]:\n    negative = []\n    positive = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    return negative + positive"
    },
    {
        "id":220,
        "response":" import re\n    def replace_blank(str1,char):\n        return re.sub('\\s+',char,str1)"
    },
    {
        "id":221,
        "response":" import typing\n\n    def max_sum(tri: typing.List[typing.List[int]], n: int) -> int:\n        dp = [[0]*len(row) for row in tri]\n        dp[0][0] = tri[0][0]\n        for i in range(1, n):\n            for j in range(len(tri[i])):\n                if j == 0:\n                    dp[i][j] = dp[i-1][j] + tri[i][j]\n                elif j == len(tri[i]) - 1:\n                    dp[i][j] = dp[i-1][j-1] + tri[i][j]\n                else:\n                    dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + tri[i][j]\n        return max(dp[-1])<|eot_id|>"
    },
    {
        "id":222,
        "response":" import heapq\n     def larg_nnum(list1,n):\n        return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":" import math \n    def lateralsuface_cylinder(r,h):\n        return 2 * math.pi * r * h"
    },
    {
        "id":224,
        "response":" import math\nfrom typing import Union\n\ndef volume_cube(l: Union[int, float]) -> Union[int, float]:\n    return l ** 3<|eot_id|>"
    },
    {
        "id":225,
        "response":" import math\n\n    def even_bit_set_number(n):\n        if n == 0:\n            return 0\n        pos = 0\n        while n != 0:\n            if (n & 1) == 0:\n                n = n | (1 << pos)\n            pos += 1\n            n = n >> 1\n        return (1 << pos) - 1"
    },
    {
        "id":226,
        "response":" import math\n\ndef No_of_Triangle(N,K):\n    if K >= N:\n        return 0\n    else:\n        return (N - K) * (N - K - 1) \/\/ 2"
    },
    {
        "id":227,
        "response":" import itertools\n\n     def check_occurences(test_list):\n        res = []\n        for t1, t2 in itertools.combinations(test_list, 2):\n            if set(t1).intersection(set(t2)):\n                res.append((t1, t2))\n        return res"
    },
    {
        "id":228,
        "response":" ```python\nfrom typing import Dict\n\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    dp: Dict[int, int] = {0: 1}\n    count = 0\n    for i in range(n):\n        if s[i] == ' ':\n            dp[i + 1] = 0\n        else:\n            dp[i + 1] = dp[i] + 1\n        count += dp[i + 1]\n    return count\n```"
    },
    {
        "id":229,
        "response":" import math\n\n    def get_total_number_of_sequences(m, n):\n        if m < 2:\n            return 0\n        if n == 1:\n            return min(m, 1)\n        dp = [0] * (m + 1)\n        dp[1] = 1\n        for i in range(2, m + 1):\n            dp[i] = 1\n            for j in range(1, i \/\/ 2 + 1):\n                dp[i] += dp[j]\n        res = 0\n        for i in range(1, m + 1):\n            res += dp[i]\n            if res >= n:\n                return res\n        return res"
    },
    {
        "id":230,
        "response":" import typing\n\n    def replace_list(list1: typing.List, list2: typing.List) -> typing.List:\n        if not list1 or not list2:\n            return list1\n        list1[-1] = list2[-1]\n        return list1<|end_header_id|>"
    },
    {
        "id":231,
        "response":" ```python\nimport numpy as np\n\ndef array_3d(m, n, o):\n    return np.full((m, n, o), '*')\n```"
    },
    {
        "id":232,
        "response":" import re\n\ndef count_charac(str1):\n    return len(re.sub('[^a-zA-Z]', '', str1))"
    },
    {
        "id":233,
        "response":" from collections import Counter\n     from typing import List, Tuple\n\n    def sort_on_occurence(lst: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        count = Counter(i[0] for i in lst)\n        return sorted(lst, key=lambda x: count[x[0]], reverse=True)"
    },
    {
        "id":234,
        "response":" import math\n\n    def next_Perfect_Square(N):\n        root = math.ceil(math.sqrt(N))\n        if root * root == N:\n            root += 1\n        return root * root"
    },
    {
        "id":235,
        "response":" import sys\n\n    def max_sum(arr, n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n        if n == 2:\n            return max(arr[0], arr[1], arr[0] + arr[1])\n\n        incl = arr[0]\n        excl = 0\n        for i in range(1, n):\n            new_excl = max(incl, excl)\n            incl = excl + arr[i]\n            excl = new_excl\n        return max(incl, excl)"
    },
    {
        "id":236,
        "response":" import math\n\n    def babylonian_squareroot(number):\n        if number < 0:\n            raise ValueError(\"Input must be a non-negative number\")\n        if number == 0 or number == 1:\n            return number\n        x = number\n        y = (x + 1) \/ 2\n        while y < x:\n            x = y\n            y = (x + number \/ x) \/ 2\n        return x"
    },
    {
        "id":237,
        "response":" import numpy as np\n\ndef lps(str):\n    n = len(str)\n    dp = np.zeros((n, n), dtype=int)\n    for i in range(n):\n        dp[i, i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j] and length == 2:\n                dp[i, j] = 2\n            elif str[i] == str[j]:\n                dp[i, j] = dp[i + 1, j - 1] + 2\n            else:\n                dp[i, j] = max(dp[i, j - 1], dp[i + 1, j])\n    lps_str = \"\"\n    i, j = 0, n - 1\n    while i <= j:\n        if str[i] == str[j]:\n            lps_str += str[i]\n            i += 1\n            j -= 1\n        elif dp[i, j - 1] > dp[i + 1, j]:\n            j -= 1\n        else:\n            i += 1\n    return lps_str + lps_str[::-1][1:] if lps_str else \"\""
    },
    {
        "id":238,
        "response":" import math\n\n    def harmonic_sum(n):\n        if n <= 0:\n            return 0\n        sum = 0\n        for i in range(1, n):\n            sum += 1 \/ i\n        return sum"
    },
    {
        "id":239,
        "response":" import numpy as np\ndef intersection_array(array_nums1,array_nums2):\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1 & set2)"
    },
    {
        "id":240,
        "response":" import typing\n\n    def count_X(tup: typing.Tuple, x) -> int:\n        return tup.count(x)"
    },
    {
        "id":241,
        "response":" from typing import List\n\n    def insert_element(input_list: List, element):\n        if not input_list:\n            return [element]\n        return [element] + input_list<|end_header_id|>"
    },
    {
        "id":242,
        "response":" import cmath\n     import numpy as np\n\n     def convert(numbers):\n         result = []\n         for number in numbers:\n             real = number.real\n             imag = number.imag\n             polar = cmath.polar(number)\n             rect = complex(polar[0]*np.cos(polar[1]), polar[0]*np.sin(polar[1]))\n             result.append((real, imag, polar[0], polar[1], rect))\n         return result"
    },
    {
        "id":243,
        "response":" from typing import List\n\ndef count_integer(list1: List) -> int:\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "id":244,
        "response":" import re\n     def words_ae(text):\n        return re.findall(r'\\b[ae][\\w]*', text)"
    },
    {
        "id":245,
        "response":" import itertools\n\n    def combinations_colors(l, n):\n        return list(itertools.product(l, repeat=n))"
    },
    {
        "id":246,
        "response":" import math\n\ndef count_Primes_nums(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    p = 2\n    while p**2 <= n:\n        if primes[p]:\n            for i in range(p**2, n + 1, p):\n                primes[i] = False\n        p += 1\n    return sum(1 for prime in primes if prime)"
    },
    {
        "id":247,
        "response":" import typing\n\n    def swap_numbers(a: int, b: int) -> typing.Tuple[int, int]:\n        return b, a"
    },
    {
        "id":248,
        "response":" import functools\n     from typing import List\n\ndef count_odd(array_nums: List[int]):\n    odd_count = functools.reduce(lambda x, y: x + (1 if y % 2 != 0 else 0), array_nums, 0)\n    return odd_count<|end_header_id|>"
    },
    {
        "id":249,
        "response":" import itertools\n\n    def maximize_elements(test_tup1, test_tup2):\n        return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":250,
        "response":" import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 41\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 2\n```"
    },
    {
        "id":251,
        "response":" import operator\n     from typing import Tuple\n\n     def division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n        if len(test_tup1) != len(test_tup2):\n            raise ValueError(\"Tuples must be of the same length\")\n        if any(x == 0 for x in test_tup2):\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        return tuple(map(operator.truediv, test_tup1, test_tup2))<|end_header_id|>"
    },
    {
        "id":252,
        "response":" import typing\n\n    def split_two_parts(list1: typing.List[int], L: int) -> typing.List[typing.List[int]]:\n        return [list1[:L], list1[L:]]<|end_header_id|>"
    },
    {
        "id":253,
        "response":" import {dict} \ndef merge_dict(d1: dict, d2: dict) -> dict:\n    return {**d1, **d2}"
    },
    {
        "id":254,
        "response":" import math\n    def dog_age(h_age):\n        if h_age <= 2:\n            return h_age * 10.5\n        else:\n            return 21 + (h_age - 2) * 4\n    <|eot_id|>"
    },
    {
        "id":255,
        "response":" import itertools\n\n    def list_split(S, step):\n        return [list(g) for k, g in itertools.groupby(enumerate(S), key=lambda x: x[0] \/\/ step) if k != -1]"
    },
    {
        "id":256,
        "response":" import math \ndef lateralsurface_cube(l):\n    return 4*l**2"
    },
    {
        "id":257,
        "response":" import math\n\n    def square_Sum(n):\n        sum = 0\n        for i in range(1, n+1):\n            if i % 2 != 0:\n                sum += i ** 2\n        return sum"
    },
    {
        "id":258,
        "response":" import math\n    def find_star_num(n):\n        return n*(n+1)*(2*n+1)\/\/6"
    },
    {
        "id":259,
        "response":" ```python\ndef ascii_value(k):\n    return ord(k)\n```"
    },
    {
        "id":260,
        "response":" ```python\nimport typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    return sum([arr[i] for i in range(n) if i % 2 == 1 and arr[i] % 2 == 0])\n```"
    },
    {
        "id":261,
        "response":" ```python\nimport math\n\ndef even_Power_Sum(n):\n    return sum(i**5 for i in range(2, 2*n+1, 2))\n```"
    },
    {
        "id":262,
        "response":" import typing\n\n    def rear_extract(test_list: typing.List[typing.Tuple]) -> typing.List:\n        return [tup[-1] for tup in test_list]"
    },
    {
        "id":263,
        "response":" import operator\n     from typing import Tuple\n\n     def substract_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n        return tuple(map(operator.sub, test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":" import math \n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(n + 1):\n        if k % 2 == 0:\n            sum += math.comb(n, k)\n    return sum"
    },
    {
        "id":265,
        "response":" import numpy as np\n\n    def get_Position(a,n,m):\n        return np.where(a==m)[0][-1] if np.any(a==m) else -1"
    },
    {
        "id":266,
        "response":" import math\n    def volume_cylinder(r,h):\n        return math.pi * (r ** 2) * h<|eot_id|>"
    },
    {
        "id":267,
        "response":"\n\n\n\nfrom typing import Dict\n\ndef dict_filter(d: Dict, n: int) -> Dict:\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "id":268,
        "response":" from typing import Tuple\n\ndef count_first_elements(test_tup: Tuple) -> int:\n    return test_tup[0]"
    },
    {
        "id":269,
        "response":" import math\n\ndef is_num_decagonal(n):\n    x = (1 + math.sqrt(1 + 8 * n)) \/ 4\n    return x == int(x) and x >= 1<|eot_id|>"
    },
    {
        "id":270,
        "response":"\n\n\n\nimport typing\n\ndef sequential_search(dlist: typing.List[int], item: int) -> typing.List[int]:\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return [i, dlist[i]]\n    return [-1, item]"
    },
    {
        "id":271,
        "response":" ```python\nfrom typing import List\n\ndef all_unique(test_list: List) -> bool:\n    return len(test_list) == len(set(test_list))\n```"
    },
    {
        "id":272,
        "response":" import map\n     from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x - y, nums1, nums2))"
    },
    {
        "id":273,
        "response":"\n\n\n\nfrom collections import Counter\n\ndef validate(n):\n    if n < 0: \n        return False\n    count = Counter(str(n))\n    for digit, freq in count.items():\n        if int(digit) < freq:\n            return False\n    return True"
    },
    {
        "id":274,
        "response":" import re\n     from typing import List\n\n    def check_element(input_list: List, element: str) -> List[bool]:\n        return [str(item) == element for item in input_list]"
    },
    {
        "id":275,
        "response":" import re\n    def text_match_two_three(text):\n        pattern = r'ab{2,3}'\n        return bool(re.search(pattern, text))<|end_header_id|>"
    },
    {
        "id":276,
        "response":" import itertools \n\n    def max_sub_array_sum_repeated(a, n, k):\n        repeated_array = list(itertools.islice(itertools.cycle(a), n * k))\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in repeated_array:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum<|end_header_id|>"
    },
    {
        "id":277,
        "response":" import math\n\n    def square_Sum(n):\n        return sum([i**2 for i in range(2, 2*n+1, 2)])"
    },
    {
        "id":278,
        "response":" import math\n\n    def modular_inverse(arr, N, P):\n        count = 0\n        for i in range(N):\n            if math.gcd(arr[i], P) == 1:\n                count += 1\n        return count"
    },
    {
        "id":279,
        "response":" import calendar\n\n    def odd_Days(N):\n        count = 0\n        for i in range(1,13):\n            month = i\n            year = N\n            _, num_days = calendar.monthrange(year, month)\n            if num_days % 2 != 0:\n                count += 1\n        return count"
    },
    {
        "id":280,
        "response":" import re\n     from typing import List\n\n    def max_length(list1: List[str]) -> List[str]:\n        if not list1:\n            return []\n        max_len = max(len(i) for i in list1)\n        return [i for i in list1 if len(i) == max_len]"
    },
    {
        "id":281,
        "response":" import math\n\n    def count_no_of_ways(n, k):\n        if n == 0:\n            return 0\n        if n == 1:\n            return k\n        if k == 1:\n            return 1\n        same_color = k\n        diff_color = k * (k - 1)\n        total_ways = same_color + diff_color\n        for i in range(2, n):\n            same_color = diff_color\n            diff_color = total_ways * (k - 1)\n            total_ways = same_color + diff_color\n        return total_ways % (10**9 + 7)"
    },
    {
        "id":282,
        "response":" ```python\nfrom typing import Union\n\ndef find(n: Union[int, float], m: Union[int, float]) -> Union[int, float]:\n    if m == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    return n \/ m\n```"
    },
    {
        "id":283,
        "response":" import math\ndef otherside_rightangle(w,h):\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "id":284,
        "response":" ```python\nfrom typing import List\n\ndef max_val(listval: List[int]) -> int:\n    if not listval:\n        return None\n    return max(listval)\n```"
    },
    {
        "id":285,
        "response":" import math\n\n    def sum_div(number):\n        if number < 1:\n            return 0\n        sum = 0\n        for i in range(1, int(math.sqrt(number)) + 1):\n            if number % i == 0:\n                if i * i != number:\n                    sum += i + number \/\/ i\n                else:\n                    sum += i\n        return sum"
    },
    {
        "id":286,
        "response":" import bisect \n\ndef get_Inv_Count(arr, n): \n    temp_arr = [] \n    inv_count = 0\n    for i in range(n): \n        new_pos = bisect.bisect_left(temp_arr, arr[i]) \n        inv_count += i - new_pos \n        temp_arr.insert(new_pos, arr[i]) \n    return inv_count \n    <|eot_id|>"
    },
    {
        "id":287,
        "response":" import itertools\n\n    def flatten_list(nested_list):\n        result = []\n        for item in nested_list:\n            if isinstance(item, list):\n                result.extend(itertools.chain(flatten_list(item)))\n            else:\n                result.append(item)\n        return result"
    },
    {
        "id":288,
        "response":" import itertools\n\n    def intersection_nested_lists(l1, l2):\n        flat_l1 = list(itertools.chain(*l1))\n        flat_l2 = list(itertools.chain(*l2))\n        return [element for element in flat_l1 if element in flat_l2]"
    },
    {
        "id":289,
        "response":" import typing\n\n    def max_aggregate(stdata: typing.List[typing.Tuple[int, int]]) -> int:\n        return max(sum(i) for i in stdata)"
    },
    {
        "id":290,
        "response":" import math\n\ndef count_binary_seq(n):\n    count = 0\n    for i in range(n + 1):\n        count += math.comb(n, i) * math.comb(n, i)\n    return count"
    },
    {
        "id":291,
        "response":" ```python\nfrom typing import Dict, Any\n\ndef dict_depth(d: Dict[str, Any]) -> int:\n    if not isinstance(d, dict):\n        return 0\n    elif not d:\n        return 1\n    else:\n        return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)\n```"
    },
    {
        "id":292,
        "response":" import math\n\n    def set_Bit_Number(n):\n        if n == 0:\n            return 0\n        return int(math.log2(n & -n) + 1)"
    },
    {
        "id":293,
        "response":" import math\n    def solve(a,n):\n        if n == 0:\n            return True\n        if a < 0 and n < 0:\n            return solve(-a,-n)\n        if a < 0 or n < 0:\n            return False\n        return math.gcd(a,n) == 1"
    },
    {
        "id":294,
        "response":" import math\n\n    def find_Element(arr, ranges, rotations, index):\n        n = len(arr)\n        total_rotation = sum(rotations)\n        total_rotation = total_rotation % n\n        start, end = 0, n - 1\n        for r in ranges:\n            if index >= r[0] and index <= r[1]:\n                break\n            else:\n                start = max(start, r[1] + 1)\n                end = min(end, r[0] - 1)\n        offset = (end - start + 1) \n        new_index = (index - start + total_rotation) % offset + start\n        return arr[new_index]"
    },
    {
        "id":295,
        "response":" import itertools\n\n    def start_withp(words):\n        result = []\n        for combination in itertools.combinations(words, 2):\n            if combination[0].startswith('\u09aa\u09bf') and combination[1].startswith('\u09aa\u09bf'):\n                result.append(combination)\n        return result"
    },
    {
        "id":296,
        "response":" import bisect\n     from typing import List\n\n    def max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n        dp = [0] * n\n        prev = [-1] * n\n        for i in range(n):\n            dp[i] = a[i]\n            for j in range(i):\n                if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                    dp[i] = dp[j] + a[i]\n                    prev[i] = j\n        max_sum = float('-inf')\n        for i in range(index, n):\n            if i >= k:\n                break\n            curr = i\n            seq = []\n            while curr != -1:\n                seq.append(a[curr])\n                curr = prev[curr]\n            seq = seq[::-1]\n            if seq[k - index - 1] != 0:\n                max_sum = max(max_sum, dp[i])\n        return max_sum if max_sum != float('-inf') else -1"
    },
    {
        "id":297,
        "response":" import typing\n\n    def colon_tuplex(tuplex: typing.Tuple, m: int, n: int) -> typing.Tuple:\n        return tuplex[m:n]"
    },
    {
        "id":298,
        "response":" import heapq\n     def large_product(nums1, nums2, N):\n        product = []\n        for num1 in nums1:\n            for num2 in nums2:\n                product.append(num1 * num2)\n        return heapq.nlargest(N, product)"
    },
    {
        "id":299,
        "response":" ```python\nfrom typing import Union\n\ndef maximum(a: Union[int, float], b: Union[int, float]) -> Union[int, float]:\n    return max(a, b)\n```"
    },
    {
        "id":300,
        "response":" ```python\nfrom typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str]:\n    return (str1,)\n```"
    },
    {
        "id":301,
        "response":" import math\n\n    def set_left_most_unset_bit(n):\n        if n == 0:\n            return 1\n        left_most_set_bit = int(math.log2(n & -n))\n        return n | (1 << (left_most_set_bit + 1))"
    },
    {
        "id":302,
        "response":" import math\n     def volume_cone(r,h):\n        return (1.0\/3)*math.pi*r*r*h<|eot_id|>"
    },
    {
        "id":303,
        "response":" ```python\nfrom typing import List\n\ndef pos_nos(list1: List[int]) -> List[int]:\n    return [i for i in list1 if i > 0]\n```"
    },
    {
        "id":304,
        "response":" import sys\n\ndef max_sum_rectangular_grid(grid, n) :\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n\n    dp = [0]*n\n    dp[0] = max(grid[0][0], grid[1][0])\n    dp[1] = max(grid[0][0] + grid[0][1], grid[1][0] + grid[1][1])\n\n    for i in range(2, n):\n        dp[i] = max(grid[0][i] + dp[i-2], grid[1][i] + dp[i-2], grid[0][i] + grid[1][i-1] + dp[i-2], grid[1][i] + grid[0][i-1] + dp[i-2])\n\n    return max(dp[n-1], dp[n-2])"
    },
    {
        "id":305,
        "response":" import re\n     def find_Max_Len_Even(str):\n        even_words = re.findall(r'\\b\\w*[aeiouAEIOU]\\w*[aeiouAEIOU]\\w*\\b', str)\n        if not even_words:\n            return \"\"\n        return max(even_words, key=len)"
    },
    {
        "id":306,
        "response":"\n\n\n\nimport bisect\n\ndef find_last_occurrence(A, x):\n    index = bisect.bisect_right(A, x)\n    if index and A[index - 1] == x:\n        return index - 1\n    else:\n        return -1"
    },
    {
        "id":307,
        "response":" import itertools\n\n    def modified_encode(alist):\n        result = []\n        for k, g in itertools.groupby(alist):\n            result.append((k, sum(1 for _ in g)))\n        return result"
    },
    {
        "id":308,
        "response":" import math\n    def max_volume (s):\n        l = s \/ 6\n        return l**3"
    },
    {
        "id":309,
        "response":" import re\n     import typing\n\n     def find_long_word(text: str) -> typing.List[str]:\n        return re.findall(r'\\b\\w{5}\\b', text)"
    },
    {
        "id":310,
        "response":" import math\n\n    def sum_difference(n):\n        square_sum = sum(i**2 for i in range(1, n+1))\n        sum_square = sum(range(1, n+1))**2\n        return abs(sum_square - square_sum)"
    },
    {
        "id":311,
        "response":" ```python\nimport math\n\ndef find_demlo(s):\n    num = int(s)\n    count = 0\n    while num != 1:\n        if num % 2 == 0:\n            num = num \/\/ 2\n        else:\n            num = 3 * num + 1\n        count += 1\n    return count\n```"
    },
    {
        "id":312,
        "response":" import typing\n\ndef position_min(lst: typing.List[int]) -> typing.List[int]:\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]"
    },
    {
        "id":313,
        "response":"\n\n\n\nimport math\nfrom typing import List\n\ndef rearrange(arr : List[int]) -> List[int]:\n    n = len(arr)\n    positive = []\n    negative = []\n    \n    for num in arr:\n        if num >= 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n            \n    result = []\n    min_len = min(len(positive), len(negative))\n    \n    for i in range(min_len):\n        result.append(negative[i])\n        result.append(positive[i])\n        \n    if len(positive) > len(negative):\n        result.extend(positive[min_len:])\n    else:\n        result.extend(negative[min_len:])\n        \n    return result\n    <|eot_id|>"
    },
    {
        "id":314,
        "response":" import itertools\n\n     def sum_of_alternates(test_tuple):\n        return sum(x for x, _ in itertools.zip_longest(*[iter(test_tuple)]*2))"
    },
    {
        "id":315,
        "response":" import math\n\n    def get_Min_Squares(n):\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            j = 1\n            while j * j <= i:\n                dp[i] = min(dp[i], dp[i - j * j] + 1)\n                j += 1\n        return dp[n]"
    },
    {
        "id":316,
        "response":" from typing import List\nfrom collections import Counter\n\ndef most_occurrences(test_list: List[str]) -> str:\n    count = Counter(test_list)\n    max_count = max(count.values())\n    most_common = [word for word, freq in count.items() if freq == max_count]\n    return most_common[0]"
    },
    {
        "id":317,
        "response":" import math\n\ndef check_right_angled(x, y, z):\n    sides = [x, y, z]\n    sides.sort()\n    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)"
    },
    {
        "id":318,
        "response":" import collections\n     def rotate_left(list1,m):\n        m = m % len(list1)\n        return list1[m:] + list1[:m]"
    },
    {
        "id":319,
        "response":" import typing\n\ndef neg_count(lst: typing.List[int]) -> int:\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "id":320,
        "response":" import re\n     import typing\n\n     def find_char(text: str) -> typing.List[str]:\n        return re.findall(r'\\b\\w{3,5}\\b', text)"
    },
    {
        "id":321,
        "response":" import math\n\n    def count_unset_bits(n: int) -> int:\n        if n == 0:\n            return 1\n        count = 0\n        bits = math.floor(math.log2(n)) + 1\n        count = (bits * n) - (n & (n - 1)).bit_length() * (n + 1) + (n & (n + 1)).bit_length() - 1\n        return count \n    def count_unset_bits2(n: int) -> int:\n        if n == 0:\n            return 1\n        count = 0\n        bits = n.bit_length()\n        count = (bits * (n + 1)) - (n + 1) + 1 - (n.bit_length())\n        return count \n    def count_unset_bits3(n: int) -> int:\n        if n == 0:\n            return 1\n        count = 0\n        bits = n.bit_length()\n        return (1 << bits) - 1 - n<|eot_id|> \n```python\nimport math\ndef count_unset_bits(n: int) -> int:\n    if n == 0:\n        return 1\n    count = 0\n    bits = math.floor(math.log2(n)) + 1\n    count = (bits * n) - (n & (n - 1)).bit_length() * (n + 1) + (n & (n + 1)).bit_length() - 1\n    return count \n```"
    },
    {
        "id":322,
        "response":" from collections import Counter\n    \n    def char_frequency(str1):\n        return dict(Counter(str1))<|end_header_id|>"
    },
    {
        "id":323,
        "response":" from typing import List\n\ndef Sort(sub_li: List[List[int]]) -> List[List[int]]:\n    return sorted(sub_li, key=lambda x: x[1])"
    },
    {
        "id":324,
        "response":" import typing \ndef check_Validity(a:float, b:float, c:float) -> bool:\n    if a + b > c and a + c > b and b + c > a and a > 0 and b > 0 and c > 0:\n        return True\n    else:\n        return False"
    },
    {
        "id":325,
        "response":" import math \n\n    def ap_sum(a, n, d):\n        sum = (n \/ 2) * (2 * a + (n - 1) * d)\n        return sum"
    },
    {
        "id":326,
        "response":" import calendar \n\n    def check_monthnum(monthname1):\n        monthname = ['January', 'February', 'March', 'April', 'May', 'June', \n                    'July', 'August', 'September', 'October', 'November', 'December']\n        if monthname1 in monthname:\n            month_index = monthname.index(monthname1) + 1\n            if calendar.monthrange(2024, month_index)[1] == 28:\n                return True\n            else:\n                return False\n        else:\n            return \"Invalid month name\""
    },
    {
        "id":327,
        "response":" import re\n    def text_match_word(text):\n        return bool(re.search(r'\\b\\w+\\b(?=[\\s]*$)', text))"
    },
    {
        "id":328,
        "response":"\n\n\n\nimport collections\n\ndef countSubstrings(s: str) -> int:\n    n = len(s)\n    res = 0\n    for i in range(n):\n        res += countWithCenter(s, i, i)\n        res += countWithCenter(s, i, i + 1)\n    return res\n\ndef countWithCenter(s, left, right):\n    l, r = left, right\n    count = 0\n    while l >= 0 and r < len(s) and s[l] == s[r]:\n        count += 1\n        l -= 1\n        r += 1\n    return count"
    },
    {
        "id":329,
        "response":"\r\nimport math\r\n\r\ndef find_Divisor(x,y):\r\n    def gcd(a, b):\r\n        while b:\r\n            a, b = b, a % b\r\n        return a\r\n    \r\n    def count_divisors(n):\r\n        count = 0\r\n        for i in range(1, int(math.sqrt(n)) + 1):\r\n            if n % i == 0:\r\n                if n \/\/ i == i:\r\n                    count += 1\r\n                else:\r\n                    count += 2\r\n        return count\r\n    \r\n    max_divisor = 0\r\n    max_count = 0\r\n    for i in range(x, y + 1):\r\n        count = count_divisors(i)\r\n        if count > max_count:\r\n            max_count = count\r\n            max_divisor = i\r\n    return max_divisor\n```"
    },
    {
        "id":330,
        "response":" import heapq\n     def sum_three_smallest_nums(lst):\n        return sum(heapq.nsmallest(3, [i for i in lst if i > 0]))"
    },
    {
        "id":331,
        "response":" from typing import Set, Tuple\n\n    def set_to_tuple(s: Set) -> Tuple:\n        return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":" import heapq\n    def smallest_range(nums):\n        pq = [(row[0], i, 0) for i, row in enumerate(nums)]\n        heapq.heapify(pq)\n        ans = -1e9, 1e9\n        right = max(row[0] for row in nums)\n        while pq:\n            left, i, j = heapq.heappop(pq)\n            if right - left < ans[1] - ans[0]:\n                ans = left, right\n            if j + 1 == len(nums[i]):\n                return ans\n            v = nums[i][j+1]\n            right = max(right, v)\n            heapq.heappush(pq, (v, i, j+1))"
    },
    {
        "id":333,
        "response":" import re\n\n    def dig_let(s):\n        letters = len(re.findall('[a-zA-Z]', s))\n        digits = len(re.findall('\\d', s))\n        return letters, digits"
    },
    {
        "id":334,
        "response":" import math\n    def count_Odd_Squares(n,m):\n        count = 0\n        i = 1\n        while i * i <= m:\n            if i * i >= n:\n                if i % 2 != 0:\n                    count += 1\n            i += 1\n        return count<|end_header_id|>"
    },
    {
        "id":335,
        "response":" import itertools\n\n    def diff_consecutivenums(nums):\n        return [y - x for x, y in itertools.pairwise(nums)]"
    },
    {
        "id":336,
        "response":" import math\n    def zigzag(n, k):\n        if k > n:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return math.comb(n-1, 2) + 1\n        if k == 3:\n            return math.comb(n-1, 2) + (n-2) + 1\n        return math.comb(n, k)"
    },
    {
        "id":337,
        "response":" import math\n\ndef count_Squares(m,n):\n    return m * n * (m-1) * (n-1) \/\/ 4"
    },
    {
        "id":338,
        "response":" import math \n\n    def bin_coff(n, r):\n        if r > n - r: \n            r = n - r \n        return math.comb(n, r)"
    },
    {
        "id":339,
        "response":" import re\n    def check(string) :\n        if re.fullmatch('[01]+', string):\n            return True\n        else:\n            return False"
    },
    {
        "id":340,
        "response":" ```python\nimport re\ndef minimum_Length(s: str) -> str:\n    while len(s) > 0 and s[0] == s[-1]:\n        s = s[1:-1]\n    return s\n```"
    },
    {
        "id":341,
        "response":" import collections\n     def first_Element(arr,n,k):\n        count = collections.Counter(arr)\n        for i in arr:\n            if count[i]==k:\n                return i\n        return -1<|eot_id|>"
    },
    {
        "id":342,
        "response":" ```python\nfrom typing import Any\n\ndef unique_Characters(str: str) -> bool:\n    return len(str) == len(set(str))\n     ```"
    },
    {
        "id":343,
        "response":" import typing\n\n    def remove_column(list1: typing.List[typing.List[int]], n: int) -> typing.List[typing.List[int]]:\n        return [lst[:n] + lst[n+1:] for lst in list1]"
    },
    {
        "id":344,
        "response":" import math \n\ndef tn_ap(a,n,d):\n    tn = a + (n-1)*d\n    return tn"
    },
    {
        "id":345,
        "response":" import math\n\n    def count_Rectangles(radius):\n        if radius < 1:\n            return 0\n        count = 0\n        r = radius \n        while r >= 1:\n            l = 2 * math.sqrt(r**2 - 1)\n            if l >= 1:\n                count += int(l) \n            r -= 1\n        return count * 4 \n    <|eot_id|> \n<\/end_header_id|>\n```python\nimport math\n\ndef count_Rectangles(radius):\n    if radius < 1:\n        return 0\n    count = 0\n    r = radius \n    while r >= 1:\n        l = 2 * math.sqrt(r**2 - 1)\n        if l >= 1:\n            count += int(l) \n        r -= 1\n    return count * 4 \n```"
    },
    {
        "id":346,
        "response":" import math\n\ndef find_angle(a,b):\n    if a + b >= 180:\n        return None\n    return 180 - a - b"
    },
    {
        "id":347,
        "response":" import typing\n\n    def find_max(test_list: typing.List[typing.Tuple[int, int, int]]) -> typing.List[int]:\n        return [max(i) for i in test_list]"
    },
    {
        "id":348,
        "response":" import map\n     from typing import List\n\ndef moddiv_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    return list(map(lambda x, y: x % y if y != 0 else float('inf'), nums1, nums2))"
    },
    {
        "id":349,
        "response":" import math\n     from typing import Tuple\n\ndef Check_Solution(a: float, b: float, c: float) -> bool:\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        return False\n    root1 = (-b + math.sqrt(determinant)) \/ (2*a)\n    root2 = (-b - math.sqrt(determinant)) \/ (2*a)\n    return math.isclose(root1, 2*root2) or math.isclose(root2, 2*root1)"
    },
    {
        "id":350,
        "response":" import math \n\n    def get_carol(n):\n        return (math.pow(2, n) - 3 * n - 1) \/\/ 2"
    },
    {
        "id":351,
        "response":" import typing\n\n    def remove_empty(list1: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n        return [sublist for sublist in list1 if sublist != []]<|end_header_id|>"
    },
    {
        "id":352,
        "response":" from collections import Counter\n    def max_occurrences(nums):\n        count = Counter(nums)\n        max_count = max(count.values())\n        max_items = [item for item, freq in count.items() if freq == max_count]\n        return max_items"
    },
    {
        "id":353,
        "response":" import typing\n\n    def add_K_element(test_list: typing.List[typing.Tuple[int, int, int]], K: int) -> typing.List[typing.Tuple[int, int, int]]:\n        return [(i[0]+K, i[1]+K, i[2]+K) for i in test_list]"
    },
    {
        "id":354,
        "response":" import itertools\n\ndef min_flips_to_alternate(s):\n    n = len(s)\n    flips1 = 0\n    flips2 = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] != '0':\n                flips1 += 1\n            if s[i] != '1':\n                flips2 += 1\n        else:\n            if s[i] != '1':\n                flips1 += 1\n            if s[i] != '0':\n                flips2 += 1\n    return min(flips1, flips2)"
    },
    {
        "id":355,
        "response":" import math\n    def count_Digit(n):\n        if n == 0:\n            return 1\n        return math.floor(math.log10(abs(n))) + 1<|end_header_id|>"
    },
    {
        "id":356,
        "response":" import typing\n\ndef adjacent_num_product(list_nums: typing.List[int]) -> int:\n    if len(list_nums) < 2:\n        return None\n    max_product = float('-inf')\n    for i in range(len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        max_product = max(max_product, product)\n    return max_product"
    },
    {
        "id":357,
        "response":" import math\n    class TreeNode:\n        def __init__(self, data):\n            self.data = data\n            self.left = None\n            self.right = None\n\n    def is_balanced(root):\n        def check(node):\n            if node is None:\n                return 0\n            left  = check(node.left)\n            right = check(node.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return 1 + max(left, right)\n\n        return check(root) != -1\n\n    def height(node):\n        if node is None:\n            return 0\n        return 1 + max(height(node.left), height(node.right))\n\n    def is_balanced_alternative(root):\n        if root is None:\n            return True\n\n        left  = height(root.left)\n        right = height(root.right)\n\n        return (abs(left - right) <= 1 and is_balanced_alternative(root.left) and is_balanced_alternative(root.right))"
    },
    {
        "id":358,
        "response":" import itertools\n\n    def repeat_tuples(test_tup, N):\n        return list(itertools.chain.from_iterable(itertools.repeat(test_tup, N)))<|eot_id|>"
    },
    {
        "id":359,
        "response":" import math \ndef lateral_surface_cuboid(l,w,h):\n    return 4*l*h + 4*w*h"
    },
    {
        "id":360,
        "response":" from typing import Tuple\n\ndef float_sort(price: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple(sorted(price))"
    },
    {
        "id":361,
        "response":"\n\n\n\nimport bisect \n\ndef smallest_missing(A, left_element, right_element):\n    left_idx = bisect.bisect_left(A, left_element)\n    right_idx = bisect.bisect_right(A, right_element)\n    for i in range(left_idx,right_idx):\n        if A[i] != A[i-1]+1:\n            return A[i-1]+1\n    if left_element > A[0]:\n        return left_element\n    if right_element < A[-1]:\n        return right_element\n    if len(A)==1:\n        if A[0]==left_element and A[0]==right_element:\n            if A[0]==1:\n                return 2\n            else:\n                return 1\n        elif A[0]>=left_element and A[0]<=right_element:\n            return left_element\n        else:\n            return A[0]\n    if A[0]>right_element:\n        return left_element\n    if A[-1]<left_element:\n        return left_element\n    return A[-1]+1"
    },
    {
        "id":362,
        "response":" import heapq\n\n    def heap_assending(nums):\n        heapq.heapify(nums)\n        return [heapq.heappop(nums) for _ in range(len(nums))]"
    },
    {
        "id":363,
        "response":" import math\nfrom typing import Union\n\ndef volume_cuboid(l: Union[int, float], w: Union[int, float], h: Union[int, float]) -> Union[int, float]:\n    return l * w * h<|end_header_id|>"
    },
    {
        "id":364,
        "response":" import itertools\n\n    def permute_string(s):\n        perms = [''.join(p) for p in itertools.permutations(s)]\n        return '\\n'.join(sorted(set(perms)))"
    },
    {
        "id":365,
        "response":" import math\n\ndef round_num(n, m):\n    return m * round(n \/ m)"
    },
    {
        "id":366,
        "response":" import collections\n\n    def remove_replica(test_tup, custom_value=None):\n        seen = set()\n        return tuple(x if x not in seen else custom_value for x in test_tup if x not in seen or seen.add(x))"
    },
    {
        "id":367,
        "response":" import re\n    def remove_Char(s,c) :\n        return re.sub(c, '', s)"
    },
    {
        "id":368,
        "response":" import collections\n\n    def move_first(test_list):\n        if len(test_list) == 0:\n            return test_list\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n        return test_list"
    },
    {
        "id":369,
        "response":" import math\ndef surfacearea_cuboid(l,w,h):\n    return 2 * (l * w + w * h + h * l)"
    },
    {
        "id":370,
        "response":" import typing\n\n    def multi_list(rownum: int, colnum: int) -> typing.List[typing.List[int]]:\n        return [[0 for _ in range(colnum)] for _ in range(rownum)]"
    },
    {
        "id":371,
        "response":" from typing import List\n\ndef index_on_inner_list(list_data: List[List], index_no: int) -> List[List]:\n    return sorted(list_data, key=lambda x: x[index_no])"
    },
    {
        "id":372,
        "response":" import math\n\ndef find_rotation_count(A):\n    n = len(A)\n    min_index = A.index(min(A))\n    return min_index if A[0] > A[-1] else 0"
    },
    {
        "id":373,
        "response":" import re\n     import typing\n    def even_bit_toggle_number(n: int) -> int:\n        i = 0\n        while i < 32:\n            mask = 1 << i\n            if (mask & n) and (i % 2 == 1):\n                n ^= mask\n            i += 1\n        return n"
    },
    {
        "id":374,
        "response":" import collections\n     import math\n\n    def frequency_Of_Smallest(arr):\n        freq = collections.Counter(arr)\n        min_val = min(arr)\n        return freq[min_val]"
    },
    {
        "id":375,
        "response":" import math \n\ndef get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    a, b, c = 3, 0, 2\n    for _ in range(2, n):\n        a, b, c = b, c, 2 * b + a\n    return c"
    },
    {
        "id":376,
        "response":" ```python\nimport collections\n\ndef swap_count(s):\n    stack = []\n    swap = 0\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if stack == [] or mapping[char] != stack.pop():\n                swap += 1\n    return swap + len(stack)\n```"
    },
    {
        "id":377,
        "response":"\n\n\n\nimport re\n\ndef even_or_odd(N):\n    if re.match('^[0-9A-Fa-f]+$', N) is None:\n        raise ValueError(\"Invalid hexadecimal number\")\n    decimal = int(N, 16)\n    return \"Even\" if decimal % 2 == 0 else \"Odd\""
    },
    {
        "id":378,
        "response":" import math\n\n    def highest_Power_of_2(n):\n        if n <= 0:\n            return 0\n        return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":379,
        "response":" import math\n\ndef find_lucas(n):\n    sqrt_5 = math.sqrt(5)\n    phi = (1 + sqrt_5) \/ 2\n    psi = (1 - sqrt_5) \/ 2\n    lucas_n = int((phi**n + psi**n) \/ sqrt_5)\n    return lucas_n"
    },
    {
        "id":380,
        "response":" from typing import List\n\n    def add_string(lst: List[str], string: str) -> List[str]:\n        return [string + item for item in lst]"
    },
    {
        "id":381,
        "response":" import itertools\n\n    def convert_list_dictionary(*lists):\n        return [dict(zip(itertools.islice(itertools.cycle(lists), len(l1)), l1)) for l1 in zip(*lists)]\n    \n    l1 = [1, 2, 3]\n    l2 = ['a', 'b', 'c']\n    l3 = ['I', 'II', 'III']\n    print(convert_list_dictionary(l1, l2, l3)) \n   \n    l4 = [1, 2]\n    l5 = ['a', 'b', 'c']\n    print(convert_list_dictionary(l4, l5, l3)) \n   \n    l6 = [1, 2, 3]\n    l7 = ['a', 'b']\n    print(convert_list_dictionary(l6, l7, l3))"
    },
    {
        "id":382,
        "response":" import math\n     from functools import lru_cache\n\n     def get_max_sum(n):\n        @lru_cache(None)\n        def dp(n):\n            if n <= 1:\n                return n\n            max_sum = 0\n            for i in [n\/\/2, n\/\/3, n\/\/4, n\/\/5]:\n                if i >= 1:\n                    max_sum = max(max_sum, dp(i))\n            return n + max_sum\n        return dp(n)"
    },
    {
        "id":383,
        "response":" ```python\nfrom typing import List\n\ndef max_length_list(input_list: List[List[int]]) -> List[int]:\n    return max(input_list, key=lambda x: len(x), default=[])\n```"
    },
    {
        "id":384,
        "response":" ```python\nfrom typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))\n```"
    },
    {
        "id":385,
        "response":" from collections import Counter\n\n    def first_non_repeating_character(str1):\n        count = Counter(str1)\n        for char in str1:\n            if count[char] == 1:\n                return char\n        return None"
    },
    {
        "id":386,
        "response":" import re\n     def check_char(string):\n        if not string:\n            return False\n        return string[0] == string[-1]"
    },
    {
        "id":387,
        "response":" import statistics\n\ndef median_numbers(a,b,c):\n    numbers = [a, b, c]\n    return statistics.median(numbers)"
    },
    {
        "id":388,
        "response":" import typing\n\n    def sum_of_digits(nums: typing.List[int]) -> typing.List[int]:\n        return [sum(int(digit) for digit in str(abs(num))) for num in nums]"
    },
    {
        "id":389,
        "response":" import operator\n     import itertools\n\n     def bitwise_xor(test_tup1, test_tup2):\n        return tuple(map(operator.xor, test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":" from collections import Counter\n    from typing import List, Tuple\n\n    def extract_freq(test_list: List[Tuple[int, int]]) -> dict:\n        freq_dict = Counter(frozenset(tup) for tup in test_list)\n        return dict(freq_dict)"
    },
    {
        "id":391,
        "response":" ```python\nfrom typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":392,
        "response":" import math\n\ndef ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or n == r:\n        return 1\n    fac = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fac[i] = (fac[i - 1] * i) % p\n    numerator = fac[n]\n    denominator = (fac[r] * fac[n - r]) % p\n    denominator_inverse = pow(denominator, p - 2, p)\n    return (numerator * denominator_inverse) % p"
    },
    {
        "id":393,
        "response":" import re\n     from typing import Optional\n\n    def is_valid_URL(str: str) -> Optional[bool]:\n        regex = re.compile(\n            r'^(?:http|ftp)s?:\/\/' # http:\/\/ or https:\/\/\n            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n            r'localhost|' # localhost...\n            r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n            r'(?::\\d+)?' # optional port\n            r'(?:\/?|[\/?]\\S+)$', re.IGNORECASE)\n        return re.match(regex, str) is not None<|end_header_id|>"
    },
    {
        "id":394,
        "response":" import math\n    def minimum(a,b):\n        return min(a,b)"
    },
    {
        "id":395,
        "response":" ```python\nfrom typing import Tuple\n\ndef check_tuplex(tuplex: Tuple, tuple1: Tuple) -> bool:\n    return tuplex in tuple1\n```"
    },
    {
        "id":396,
        "response":" import math\ndef find_Parity(x):\n    return x % 2 \n    <|eot_id|>"
    },
    {
        "id":397,
        "response":" import re\n     from typing import List\n\n    def rearrange_bigger(n: int) -> int:\n        digits = [int(x) for x in str(n)]\n        i = len(digits) - 2\n        while i >= 0 and digits[i] >= digits[i+1]:\n            i -= 1\n        if i < 0:\n            return -1\n        j = len(digits) - 1\n        while digits[j] <= digits[i]:\n            j -= 1\n        digits[i], digits[j] = digits[j], digits[i]\n        digits[i+1:] = digits[i+1:][::-1]\n        result = int(''.join(map(str, digits)))\n        return result<|eot_id|>"
    },
    {
        "id":398,
        "response":" import heapq\n\n    def k_smallest_pairs(nums1, nums2, k):\n        if not nums1 or not nums2:\n            return []\n        \n        queue = []\n        for i in range(len(nums1)):\n            heapq.heappush(queue, (nums1[i] + nums2[0], i, 0))\n        \n        result = []\n        while queue and len(result) < k:\n            _, i, j = heapq.heappop(queue)\n            result.append([nums1[i], nums2[j]])\n            \n            if j + 1 < len(nums2):\n                heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        \n        return result"
    },
    {
        "id":399,
        "response":" import itertools\n\n    def min_product_tuple(list1):\n        if len(list1) < 2:\n            return None\n        min_product = float('inf')\n        for tuple1, tuple2 in itertools.combinations(list1, 2):\n            product = tuple1[0] * tuple2[0]\n            if product < min_product:\n                min_product = product\n        return min_product"
    },
    {
        "id":400,
        "response":" import typing\n\n    def min_val(listval: typing.List[int]) -> int:\n        if not listval:\n            raise ValueError(\"List is empty\")\n        return min(listval)"
    },
    {
        "id":401,
        "response":" import re\n    def snake_to_camel(word):\n        components = word.split('_')\n        return components[0] + ''.join(x.capitalize() for x in components[1:])"
    },
    {
        "id":402,
        "response":" import typing\n\n    def remove_odd(l: typing.List[int]) -> typing.List[int]:\n        return [i for i in l if i % 2 == 0]"
    },
    {
        "id":403,
        "response":" import typing\n\n    def extract_nth_element(list1: typing.List[typing.Tuple], n: int) -> typing.List:\n        return [tup[n] for tup in list1 if n < len(tup)]"
    },
    {
        "id":404,
        "response":"\n\n\n\nimport typing\n\ndef overlapping(list1: typing.List[int], list2: typing.List[int]) -> typing.List[int]:\n    set1 = set(list1)\n    return [value for value in list2 if value in set1]"
    },
    {
        "id":405,
        "response":" import sys\n     import itertools\n\ndef max_Product(arr):\n    if len(arr) < 2:\n        return None\n    arr.sort()\n    return max(arr[0]*arr[1], arr[-1]*arr[-2])"
    },
    {
        "id":406,
        "response":" import math\n\n    def breakSum(n):\n        if n < 4:\n            return n\n        dp = [0]*(n+1)\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        for i in range(4, n+1):\n            dp[i] = max(dp[i-1], dp[i-2] + 2, dp[i-3] + 3)\n        return dp[n]"
    },
    {
        "id":407,
        "response":" from typing import List, Tuple\n    from collections import Counter\n\n    def common_first_element(tuples: List[Tuple]) -> object:\n        first_elements = [t[0] for t in tuples]\n        counter = Counter(first_elements)\n        max_count = max(counter.values())\n        common_elements = [k for k, v in counter.items() if v == max_count]\n        return common_elements if len(common_elements) > 1 else common_elements[0] if common_elements else None"
    },
    {
        "id":408,
        "response":"\n\n\n\nfrom typing import List\n\ndef Find_Max(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    max_len = 1\n    max_sublist = [lst[0]]\n    curr_len = 1\n    curr_sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            curr_len += 1\n            curr_sublist.append(lst[i])\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n                max_sublist = curr_sublist\n            curr_len = 1\n            curr_sublist = [lst[i]]\n    if curr_len > max_len:\n        max_len = curr_len\n        max_sublist = curr_sublist\n    return max_sublist"
    },
    {
        "id":409,
        "response":" import math\n\n    def round_and_sum(list1):\n        rounded_list = [round(num) for num in list1]\n        total_sum = sum(rounded_list)\n        return total_sum * len(list1)"
    },
    {
        "id":410,
        "response":" import math\n\n    def cube_Sum(n):\n        return sum(i**3 for i in range(2, 2*n+1, 2))"
    },
    {
        "id":411,
        "response":" import re\n\n    def concatenate_tuple(test_tup, delimiter=','):\n        return delimiter.join(map(str, test_tup))<|end_header_id|>"
    },
    {
        "id":412,
        "response":" import math\n\n    def find_Average_Of_Cube(n):\n        sum = (n * (n + 1) \/ 2) ** 2\n        return sum \/ n"
    },
    {
        "id":413,
        "response":" import sys \n\n    def get_maxgold(gold, m, n):\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = gold[0][0]\n        for i in range(1, n):\n            dp[0][i] = dp[0][i-1] + gold[0][i]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + gold[i][0]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = gold[i][j] + max(dp[i-1][j], dp[i][j-1])\n        return dp[m-1][n-1]"
    },
    {
        "id":414,
        "response":" import re\n    from typing import Tuple, List\n\n    def extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n        return [item[-1] for item in test_tuple]"
    },
    {
        "id":415,
        "response":" ```python\nfrom typing import List\n\ndef count_element_in_sublist(list1: List[List[int]], x: int) -> List[int]:\n    return [sum(1 for i in sublist if i == x) for sublist in list1]\n```"
    },
    {
        "id":416,
        "response":" from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    odd_filter = lambda x: x % 2 != 0\n    return list(filter(odd_filter, nums))"
    },
    {
        "id":417,
        "response":" import re\n    def change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "id":418,
        "response":" import typing\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    n = len(my_list)\n    gap = n\/\/2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list\n<|eot_id|>"
    },
    {
        "id":419,
        "response":" import itertools\n\n    def and_tuples(test_tup1, test_tup2):\n        return list(itertools.chain(test_tup1, test_tup2))"
    },
    {
        "id":420,
        "response":" import typing\n\ndef parabola_directrix(a: float, b: float, c: float) -> typing.Union[float, str]:\n    if a == 0:\n        return \"Not a parabola\"\n    return c - 1 \/ (4 * a)"
    },
    {
        "id":421,
        "response":" ```python\nfrom typing import List\n\ndef common_element(list1: List, list2: List) -> bool:\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False\n```"
    },
    {
        "id":422,
        "response":" import math \n\ndef median_trapezium(base1,base2,height):\n    median = (base1 + base2) \/ 2\n    return median<|end_header_id|>"
    },
    {
        "id":423,
        "response":" import numpy as np\n\n    def check_greater(arr, number):\n        return np.array([x > number for x in arr])"
    },
    {
        "id":424,
        "response":" import re\n    def text_match_one(text):\n        return bool(re.match(r'^.*b.*$', text, re.IGNORECASE))<|end_header_id|>"
    },
    {
        "id":425,
        "response":" ```python\ndef last_Digit(n: int) -> int:\n    return abs(n) % 10\n```"
    },
    {
        "id":426,
        "response":" import typing\n\n    def neg_nos(list1: typing.List[int]) -> typing.List[int]:\n        return [i for i in list1 if i < 0]"
    },
    {
        "id":427,
        "response":" import re\n     def remove_odd(str1):\n        return re.sub('[^aeiouAEIOU\\s]', '', str1)"
    },
    {
        "id":428,
        "response":" from typing import List, Tuple\n    from collections import defaultdict\n\n    def count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n        pair_count = defaultdict(int)\n        for pair in test_list:\n            pair_count[tuple(sorted(pair))] += 1\n        return sum(1 for count in pair_count.values() if count > 1)"
    },
    {
        "id":429,
        "response":"\n\n\n\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))<|end_header_id|>"
    },
    {
        "id":430,
        "response":" import re\n     from typing import List, Tuple\n\n    def find_verb_position(text: str) -> List[Tuple[str, int]]:\n        verbs = re.findall(r'\\b(VB|VBD|VBG|VBN|VBP|VBZ)\\b', text)\n        verb_positions = []\n        for verb in verbs:\n            start = text.find(verb)\n            verb_positions.append((verb, start))\n            text = text[start + len(verb):]\n        return verb_positions"
    },
    {
        "id":431,
        "response":" import math \n\ndef surfacearea_cube(l):\n    return 6*l**2"
    },
    {
        "id":432,
        "response":" from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    count = sum(1 for num in nums if num > 0)\n    return count \/ len(nums) if nums else 0<|end_header_id|>"
    },
    {
        "id":433,
        "response":" import typing\n\ndef largest_neg(list1: typing.List[int]) -> int:\n    neg_nums = [num for num in list1 if num < 0]\n    if neg_nums:\n        return max(neg_nums)\n    else:\n        return None"
    },
    {
        "id":434,
        "response":" import itertools\n\n    def trim_tuple(test_list, K):\n        return [tuple(itertools.islice(t, K, len(t)-K)) for t in test_list]"
    },
    {
        "id":435,
        "response":" import operator\n     from typing import Tuple\n\n     def index_multiplication(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n         return tuple(map(operator.mul, test_tup1, test_tup2))<|eot_id|>"
    },
    {
        "id":436,
        "response":" import collections\n\n    def count_Occurrence(tup, lst):\n        count = collections.Counter(lst)\n        return tuple(count[i] for i in tup)"
    },
    {
        "id":437,
        "response":" import re\n     from typing import List\n\n     def cube_nums(nums: List[int]):\n        return list(map(lambda x: x ** 3, nums))"
    },
    {
        "id":438,
        "response":" import math\n\ndef cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if all(i % j != 0 for j in range(2, int(math.sqrt(i))+1)):\n            sum += i\n    return sum"
    },
    {
        "id":439,
        "response":" import math\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    a = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    b = math.sqrt((x3-x2)**2 + (y3-y2)**2)\n    c = math.sqrt((x1-x3)**2 + (y1-y3)**2)\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"
    },
    {
        "id":440,
        "response":" import re\n     from typing import List\n\n    def extract_string(strings: List[str], length: int) -> List[str]:\n        return [s for s in strings if len(s) == length]"
    },
    {
        "id":441,
        "response":" import re\n     def remove_whitespaces(text1):\n        return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":" ```python\nfrom typing import Union\n\ndef loss_amount(actual_cost: float, sale_amount: float) -> Union[float, int]:\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n```"
    },
    {
        "id":443,
        "response":" import math\n\n    def sumofFactors(n) :\n        sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n \/\/ i == i:\n                    sum += i\n                else:\n                    sum += i\n                    sum += n \/\/ i\n        return sum - n"
    },
    {
        "id":444,
        "response":" import re\n    def text_match_wordz(text):\n        return bool(re.search(r'\\b\\w*z\\w*\\b', text))<|end_header_id|>"
    },
    {
        "id":445,
        "response":" import calendar\n\ndef check_monthnum_number(monthnum):\n    return calendar.monthrange(2024, monthnum)[1] == 31<|end_header_id|>"
    },
    {
        "id":446,
        "response":" import typing\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":" import sys\n     from typing import List\n\n    def Find_Min(lst: List[int]) -> List[int]:\n        if not lst:\n            return []\n        min_len = sys.maxsize\n        result = []\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst) + 1):\n                sub_list = lst[i:j]\n                if len(sub_list) < min_len:\n                    min_len = len(sub_list)\n                    result = sub_list\n        return result<|eot_id|>"
    },
    {
        "id":448,
        "response":" import typing\n\n    def rectangle_area(l: int, b: int) -> int:\n        return l * b"
    },
    {
        "id":449,
        "response":" import re\n     def remove_uppercase(str1):\n        return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "id":450,
        "response":" ```python\nfrom typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]\n```"
    },
    {
        "id":451,
        "response":" import re\n\n    def upper_ctr(str):\n        return len(re.findall(r'[A-Z]', str))"
    },
    {
        "id":452,
        "response":" import itertools\n\n    def combinations_list(lst):\n        result = []\n        for r in range(1, len(lst) + 1):\n            result.extend(itertools.combinations(lst, r))\n        return result"
    },
    {
        "id":453,
        "response":" import math\n\n    def max_subarray_product(arr):\n        if not arr:\n            return 0\n        max_product = arr[0]\n        min_product = arr[0]\n        result = arr[0]\n        for i in range(1, len(arr)):\n            temp = max_product\n            max_product = max(arr[i], max_product * arr[i], min_product * arr[i])\n            min_product = min(arr[i], temp * arr[i], min_product * arr[i])\n            result = max(result, max_product)\n        return result"
    },
    {
        "id":454,
        "response":" import collections\n\n    def check_value(d, n):\n        if not isinstance(d, dict):\n            return False\n        v = list(d.values())\n        return len(set(v)) == 1 and v[0] == n \n<|eot_id|>"
    },
    {
        "id":455,
        "response":" import typing \n\ndef drop_empty(dict1: typing.Dict) -> typing.Dict:\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "id":456,
        "response":" import math\n\n    def find_peak_element(self, nums: list[int]) -> int:\n        low, high = 0, len(nums) - 1\n        while low < high:\n            mid = (low + high) \/\/ 2\n            if nums[mid] > nums[mid + 1]:\n                high = mid\n            else:\n                low = mid + 1\n        return nums[low]"
    },
    {
        "id":457,
        "response":" import numpy as np\n\ndef decimal_to_Octal(deciNum):\n    if deciNum == 0:\n        return 0\n    else:\n        return int(np.round(np.log(deciNum+0.5)\/np.log(8))) if deciNum>7 else deciNum\ndef decimal_to_Octal2(deciNum):\n    return oct(deciNum).replace(\"0o\", \"\")<|eot_id|> \n```python\nimport numpy as np\n\ndef decimal_to_Octal(deciNum):\n    if deciNum == 0:\n        return 0\n    else:\n        return oct(deciNum).replace(\"0o\", \"\")\n\ndef decimal_to_Octal2(deciNum):\n    if deciNum < 0:\n        sign = \"-\"\n        deciNum = -deciNum\n    else:\n        sign = \"\"\n    octal = \"\"\n    while deciNum > 0:\n        octal = str(deciNum % 8) + octal\n        deciNum \/\/= 8\n    return sign + octal if octal else \"0\"\n```"
    },
    {
        "id":458,
        "response":" import math\n     from typing import List\n\n    def max_product(arr: List[int], n: int) -> int:\n        dp = [0]*n\n        dp[0] = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, n):\n            dp[i] = max(arr[i], dp[i-1]*arr[i])\n            max_so_far = max(max_so_far, dp[i])\n        return max_so_far<|eot_id|>"
    },
    {
        "id":459,
        "response":" import sys\n    from typing import List\n\n    def max_profit(price: List[int], k: int) -> int:\n        n = len(price)\n        if n < 2:\n            return 0\n        if k >= n \/\/ 2:\n            return sum(max(0, b - a) for a, b in zip(price, price[1:]))\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            max_diff = -price[0]\n            for j in range(1, n):\n                dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n                max_diff = max(max_diff, dp[i - 1][j] - price[j])\n        return dp[k][n - 1]"
    },
    {
        "id":460,
        "response":" import itertools\n\n     def add_pairwise(test_tup):\n        return tuple(x + y for x, y in itertools.combinations(test_tup, 2))"
    },
    {
        "id":461,
        "response":" import math\n     import functools\n     import operator\n\ndef find_remainder(arr, lens, n):\n    product = functools.reduce(operator.mul, arr, 1)\n    return product % n<|end_header_id|>"
    },
    {
        "id":462,
        "response":" ```python\nimport itertools\n\ndef check_Consecutive(l):\n    return list(itertools.chain(l)) == list(range(min(l), max(l)+1))\n```"
    },
    {
        "id":463,
        "response":" from typing import List, Tuple\n\n    def tuple_intersection(test_list1: List[Tuple[int, int]], test_list2: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        set1 = set(map(lambda x: tuple(sorted(x)), test_list1))\n        set2 = set(map(lambda x: tuple(sorted(x)), test_list2))\n        return list(map(lambda x: tuple(x), set1 & set2))"
    },
    {
        "id":464,
        "response":" import re\n\n    def replace_char(str1,ch,newch):\n        return re.sub(ch,newch,str1)"
    },
    {
        "id":465,
        "response":" import collections \n\n    def sort_counter(dict1):\n        return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))"
    },
    {
        "id":466,
        "response":" import typing\n\n    def big_sum(nums: typing.List[int]) -> int:\n        return max(nums) + min(nums)"
    },
    {
        "id":467,
        "response":" import re\n    import typing\n\n    def to_lower(string: str) -> str:\n        return string.lower()<|eot_id|>"
    },
    {
        "id":468,
        "response":" import re\n\n    def remove_lowercase(str1):\n        return re.sub('[a-z]+', '', str1)"
    },
    {
        "id":469,
        "response":" import math\ndef first_Digit(n) :\n    n = abs(n)\n    while n >= 10:\n        n = n \/\/ 10\n    return n"
    },
    {
        "id":470,
        "response":" import collections\n\n    def get_max_occuring_char(str1):\n        if not str1:\n            return ''\n        str1 = str1.replace(\" \", \"\")\n        char_frequency = collections.Counter(str1)\n        max_occuring_char = max(char_frequency, key=char_frequency.get)\n        return max_occuring_char<|eot_id|>"
    },
    {
        "id":471,
        "response":" import numpy as np\n\n    def is_subset_sum(set, n, sum):\n        dp = np.zeros((n+1, sum+1))\n        for i in range(n+1):\n            dp[i][0] = 1\n        for i in range(1, sum+1):\n            dp[0][i] = 0\n        for i in range(1, n+1):\n            for j in range(1, sum+1):\n                if set[i-1] > j:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] or dp[i-1][j-set[i-1]]\n        return dp[n][sum] == 1"
    },
    {
        "id":472,
        "response":" import re\n\n    def match(text):\n        return re.findall(r'[A-Z][a-z]*', text)"
    },
    {
        "id":473,
        "response":" import math\n\n    def first_Factorial_Divisible_Number(x):\n        i = 1\n        while True:\n            if math.factorial(i) % x == 0:\n                return i\n            i += 1<|eot_id|>"
    },
    {
        "id":474,
        "response":" import re\n     from typing import List, Tuple\n\n     def remove_matching_tuple(test_list1: List[Tuple[int, int]], test_list2: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        test_list1 = list(set(test_list1) - set(test_list2))\n        test_list2 = list(set(test_list2) - set(test_list1))\n        return test_list1 + test_list2<|eot_id|>"
    },
    {
        "id":475,
        "response":" import re\n\ndef largest_palindrome(nums) :\n    def is_palindrome(n) :\n        return str(n) == re.sub('[^0-9]', '', str(n))[::-1]\n    return max(filter(is_palindrome, nums)) if list(filter(is_palindrome, nums)) else None"
    },
    {
        "id":476,
        "response":" import math\n\ndef nCr(n, r):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    return math.comb(n, r)"
    },
    {
        "id":477,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef sort_tuple(tup: List[Tuple]) -> List[Tuple]:\n    return sorted(tup, key=lambda x: x[-1])\n```"
    },
    {
        "id":478,
        "response":" import math \ndef area_pentagon(a):\n    return (math.sqrt(25+10*math.sqrt(5)))\/4 * a**2"
    },
    {
        "id":479,
        "response":" import collections\n    \n    def frequency_Of_Largest(arr):\n        freq = collections.Counter(arr)\n        max_val = max(arr)\n        return freq[max_val]"
    },
    {
        "id":480,
        "response":" import itertools\n\n    def extract_symmetric(test_list):\n        symmetric_pairs = []\n        for pair in itertools.combinations(test_list, 2):\n            if pair[0] == pair[1][::-1] or pair[1] == pair[0][::-1]:\n                symmetric_pairs.append(pair)\n        return symmetric_pairs"
    },
    {
        "id":481,
        "response":" import math\n\n    def sum_gp(a, n, r):\n        if r == 1:\n            return a * n\n        else:\n            return a * (1 - math.pow(r, n)) \/ (1 - r)"
    },
    {
        "id":482,
        "response":"\n\n\n\nimport typing\n\ndef binary_search(item_list: typing.List[int], item: int) -> typing.List[int]:\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        guess = item_list[mid]\n        if guess == item:\n            return [mid]\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return []<|end_header_id|>"
    },
    {
        "id":483,
        "response":" import math\nfrom typing import List, Tuple\n\ndef calculate_polygons(startx: float, starty: float, endx: float, endy: float, radius: float) -> List[Tuple[float, float, float, float, float, float]]:\n    polygons = []\n    for x in range(int(startx), int(endx) + 1):\n        for y in range(int(starty), int(endy) + 1):\n            center_x = x + 0.5\n            center_y = y + 0.5\n            points = []\n            for i in range(6):\n                angle = 2 * math.pi \/ 6 * i\n                px = center_x + radius * math.cos(angle)\n                py = center_y + radius * math.sin(angle)\n                points.append(px)\n                points.append(py)\n            polygons.append(tuple(points))\n    return polygons<|end_header_id|>"
    },
    {
        "id":484,
        "response":" import typing\n\n    def binary_to_integer(test_tup: typing.Tuple[int]) -> int:\n        result = 0\n        for i, bit in enumerate(reversed(test_tup)):\n            result += bit * (2 ** i)\n        return result"
    },
    {
        "id":485,
        "response":" import re\n    def remove_lowercase(str1):\n        return re.sub('[a-z]+', '', str1)"
    },
    {
        "id":486,
        "response":" import heapq\n     def heap_queue_smallest(nums,n):\n        if n > len(nums):\n            return []\n        heapq.heapify(nums)\n        smallest_nums = []\n        for _ in range(n):\n            smallest_nums.append(heapq.heappop(nums))\n        return smallest_nums"
    },
    {
        "id":487,
        "response":" import math\n    def surfacearea_cone(r,h):\n        return math.pi * r * (r + math.sqrt(h**2 + r**2))"
    },
    {
        "id":488,
        "response":" import math\n\n    def gcd(x: int, y: int) -> int:\n        if x <= 0 or y <= 0:\n            raise ValueError(\"Both numbers must be positive\")\n        while y:\n            x, y = y, x % y\n        return x"
    },
    {
        "id":489,
        "response":" import math\n    def diameter_circle(r):\n        return 2 * r<|end_header_id|>"
    },
    {
        "id":490,
        "response":" import itertools\n\n    def concatenate_elements(lst):\n        return ''.join(itertools.chain(lst))<|eot_id|> \n```python\nimport itertools\n\ndef concatenate_elements(lst):\n    return ''.join(map(str,itertools.chain(lst)))\n```"
    },
    {
        "id":491,
        "response":" import sys \n\n    def min_cost(cost, m, n):\n        dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n        dp[0][0] = cost[0][0]\n        for i in range(1, m + 1):\n            dp[i][0] = dp[i-1][0] + cost[i][0]\n        for j in range(1, n + 1):\n            dp[0][j] = dp[0][j-1] + cost[0][j]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]"
    },
    {
        "id":492,
        "response":" from typing import List, Tuple\n\ndef similar_elements(test_tup1: Tuple, test_tup2: Tuple) -> List:\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.intersection(set2))"
    },
    {
        "id":493,
        "response":"\n\n\n\nimport math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "id":494,
        "response":" import heapq\n     def heap_queue_largest(nums,n):\n        return heapq.nlargest(n, nums)[-1]"
    },
    {
        "id":495,
        "response":" import math\n\n    def count_ways(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 3\n        dp = [0]*(n+1)\n        dp[1] = 0\n        dp[2] = 3\n        for i in range(3, n+1):\n            dp[i] = dp[i-1] + 2 * dp[i-2]\n        return dp[n]"
    },
    {
        "id":496,
        "response":" import re\n     from typing import List\n\n    def haveOneBitDiff(x: int, y: int) -> bool:\n        return bin(x ^ y).count('1') == 1<|end_header_id|>"
    },
    {
        "id":497,
        "response":" import re\n     import typing\n\n    def find_char_long(text: str) -> typing.List[str]:\n        return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":" import functools\n     def square_nums(nums):\n        return list(map(lambda x: x ** 2, nums))"
    },
    {
        "id":499,
        "response":" import sys\nfrom collections import *\nimport math\ndef find_Rotations(s1,s2):\n    if len(s1)!=len(s2):\n        return -1\n    s2=s2+s2\n    return s2.find(s1) \ndef main():\n    s1=\"abcd\"\n    s2=\"dabc\"\n    print(find_Rotations(s1,s2))\nif __name__==\"__main__\":\n    main()"
    },
    {
        "id":500,
        "response":" import heapq\n     def small_nnum(list1,n):\n        return heapq.nsmallest(n, list1)"
    }
]