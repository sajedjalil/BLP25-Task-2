[
    {
        "id":1,
        "response":"import re\n\ndef remove_Occ(s, ch):\n    s = re.sub(ch, '', s, 1)\n    s = re.sub(ch, '', s[::-1], 1)[::-1]\n    return s"
    },
    {
        "id":2,
        "response":"import typing\n\ndef sort_matrix(M: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    return sorted(M, key=sum)"
    },
    {
        "id":3,
        "response":"```python\nfrom collections import Counter\nfrom typing import List\n\ndef count_common(words: List[str]) -> List[str]:\n    word_count = Counter(words)\n    max_count = max(word_count.values())\n    return [word for word, count in word_count.items() if count == max_count]\n```"
    },
    {
        "id":4,
        "response":"import math\n\ndef find_Volume(l, b, h):\n    return (1\/2) * l * b * h"
    },
    {
        "id":5,
        "response":"import re\n\ndef split_lowerstring(text):\n    return re.sub('[A-Z]', lambda x: chr(ord(x.group()) + 32), text)"
    },
    {
        "id":6,
        "response":"import re\n\ndef text_lowercase_underscore(text):\n    return re.sub(r'\\s+', '_', text.lower())"
    },
    {
        "id":7,
        "response":"import math\n\ndef square_perimeter(a):\n    return 4 * a"
    },
    {
        "id":8,
        "response":"import re\nfrom typing import List\n\ndef str_to_list(s1: str, s2: str) -> List[str]:\n    return re.sub('[' + re.escape(s2) + ']', '', s1)"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> typing.List[int]:\n    return len(arraynums) != len(set(arraynums))"
    },
    {
        "id":10,
        "response":"import math\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(3, 1 + max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef is_woodall(x):\n    if x <= 0:\n        return False\n    woodall = x * math.pow(2, x) - 1\n    return is_prime(woodall)"
    },
    {
        "id":11,
        "response":"import typing\n\ndef multiples_of_num(m: int, n: int) -> typing.List[int]:\n    return [i for i in range(m, n+1) if i % m == 0]"
    },
    {
        "id":12,
        "response":"import typing\n\ndef find_first_duplicate(nums: typing.List[int]) -> typing.List[int]:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return nums[nums.index(num):]\n        seen.add(num)\n    return None"
    },
    {
        "id":13,
        "response":"import itertools\n\ndef maximum_Sum(list1):\n    return max(sum(sublist) for sublist in list1 if sublist)"
    },
    {
        "id":14,
        "response":"import re\n\ndef binary_to_decimal(binary):\n    return int(binary, 2)"
    },
    {
        "id":15,
        "response":"import math\n\ndef find_Product(arr, n):\n    product = 1\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            product *= num\n            seen.add(num)\n    return product"
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: typing.List[typing.Tuple[int]], K: int) -> bool:\n    return len(test_list) >= K"
    },
    {
        "id":17,
        "response":"```python\nimport re\n\ndef remove(list):\n    return [s for s in list if not re.search(r'\\d', s)]\n```"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    return math.comb(n, k)"
    },
    {
        "id":19,
        "response":"import collections\n\ndef get_Odd_Occurrence(arr, arr_size):\n    count_dict = collections.Counter(arr)\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num"
    },
    {
        "id":20,
        "response":"```python\nimport re\n\ndef check_Equality(s):\n    return sum(1 for i in range(len(s)) for j in range(i + 1, len(s) + 1) if s[i] == s[j - 1])\n```"
    },
    {
        "id":21,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef topKFrequent(nums: List[int], k: int) -> List[int]:\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    heap = [(-freq, num) for num, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n    return n"
    },
    {
        "id":23,
        "response":"import math\n\ndef decimal_To_Binary(N):\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    while N > 0:\n        remainder = N % 2\n        result = str(remainder) + result\n        N = math.floor(N \/ 2)\n    return result"
    },
    {
        "id":24,
        "response":"import typing\n\ndef find_missing(ar: typing.List[int], N: int) -> typing.List[int]:\n    ar.sort()\n    for i in range(N-1):\n        if ar[i+1] - ar[i] > 1:\n            return ar[:i] + [ar[i] + 1] + ar[i+1:]\n    return ar"
    },
    {
        "id":25,
        "response":"import math\n\ndef find_rect_num(n):\n    return (n * (n + 1)) \/\/ 2"
    },
    {
        "id":26,
        "response":"import math\n\ndef find_Nth_Digit(p, q, N):\n    result = p \/ q\n    result_str = str(result).replace('.', '')\n    if N > len(result_str):\n        return \"N is out of range\"\n    else:\n        return int(result_str[N-1])"
    },
    {
        "id":27,
        "response":"import typing\nfrom itertools import chain\n\ndef sort_mixed_list(mixed_list: typing.List[typing.Union[int, str]]) -> typing.List[typing.Union[int, str]]:\n    ints = sorted([x for x in mixed_list if isinstance(x, int)])\n    strs = sorted([x for x in mixed_list if isinstance(x, str)])\n    return list(chain(ints, strs))"
    },
    {
        "id":28,
        "response":"import re\nimport typing\nimport itertools\n\ndef div_even_odd(list1):\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2 != 0]\n    if not even or not odd:\n        return \"\u09a4\u09be\u09b2\u09bf\u0995\u09be\u09af\u09bc \u09b8\u09ae \u098f\u09ac\u0982 \u0985\u09a6\u09cd\u09ad\u09c1\u09a4 \u09b8\u0982\u0996\u09cd\u09af\u09be \u0989\u09ad\u09af\u09bc\u0987 \u09a5\u09be\u0995\u09be \u09aa\u09cd\u09b0\u09af\u09bc\u09cb\u099c\u09a8\"\n    elif even[0] == 0 or odd[0] == 0:\n        return \"\u09ab\u09be\u0982\u09b6\u09a8\u099f\u09bf \u09b6\u09c2\u09a8\u09cd\u09af \u09a6\u09cd\u09ac\u09be\u09b0\u09be \u09ac\u09bf\u09ad\u09be\u099c\u09a8 \u09b8\u09ae\u09b0\u09cd\u09a5\u09a8 \u0995\u09b0\u09c7 \u09a8\u09be\"\n    else:\n        return even[0] \/ odd[0]"
    },
    {
        "id":29,
        "response":"```python\nimport typing\n\ndef rearange_string(S: str) -> str:\n    if len(S) <= 1:\n        return S\n\n    char_count = {}\n    for char in S:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    max_count = max(char_count.values())\n    if max_count > (len(S) + 1) \/\/ 2:\n        return \"\"\n\n    char_list = []\n    for char, count in char_count.items():\n        char_list.extend([char] * count)\n\n    result = [0] * len(S)\n    even_index = 0\n    odd_index = 1\n\n    for char in char_list:\n        if even_index < len(S):\n            result[even_index] = char\n            even_index += 2\n        if odd_index < len(S):\n            result[odd_index] = char\n            odd_index += 2\n\n    return \"\".join(result)\n```"
    },
    {
        "id":30,
        "response":"from collections import Counter\n\ndef freq_element(nums):\n    return Counter(nums)"
    },
    {
        "id":31,
        "response":"import typing\n\ndef filter_evennumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"import typing\nfrom typing import List\n\ndef find_Sum(arr: List[int]) -> int:\n    unique_elements = set(arr)\n    repeated_elements = [element for element in unique_elements if arr.count(element) > 1]\n    return sum(repeated_elements)"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    return re.findall(r'[a-z]+', text)"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text, word):\n    return bool(re.match(word, text))"
    },
    {
        "id":35,
        "response":"import math\n\ndef find_gcd(arr):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = math.gcd(result, arr[i])\n    return result"
    },
    {
        "id":36,
        "response":"import typing\n\ndef test_distinct(data: typing.List[int]) -> bool:\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":"import math\n\ndef compute_Last_Digit(A, B):\n    a_factorial = math.factorial(A)\n    b_factorial = math.factorial(B)\n\n    if b_factorial == 0:\n        return \"Error: Division by zero is not allowed\"\n    else:\n        result = a_factorial \/\/ b_factorial\n        return result % 10"
    },
    {
        "id":38,
        "response":"import typing\n\ndef odd_bit_set_number(n: int) -> int:\n    mask = 0xAAAAAAAA\n    return n | mask"
    },
    {
        "id":39,
        "response":"```python\nimport typing\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return [sublist[N-1] for sublist in nums if len(sublist) >= N]\n```"
    },
    {
        "id":40,
        "response":"import heapq\nfrom typing import List, Union\n\ndef min_length_list(input_list: List[Union[List, str]]) -> List[Union[List, str]]:\n    return min(input_list, key=len)"
    },
    {
        "id":41,
        "response":"import math\n\ndef check_equilateral(x, y, z):\n    return math.isclose(x, y) and math.isclose(y, z)"
    },
    {
        "id":42,
        "response":"import math\n\ndef parallelogram_area(b, h):\n    return b * h"
    },
    {
        "id":43,
        "response":"import re\n\ndef check_Equality(str):\n    return len(str) > 0 and str[0] == str[-1]"
    },
    {
        "id":44,
        "response":"import typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, cnt in enumerate(count):\n        sorted_list.extend([i] * cnt)\n    return sorted_list"
    },
    {
        "id":45,
        "response":"import math\n\ndef tn_gp(a, n, r):\n    return a * (r ** (n - 1))"
    },
    {
        "id":46,
        "response":"```python\nimport re\n\ndef rev(num: int) -> bool:\n    str_num = str(num)\n    reversed_num = int(reversed(str_num))\n    return num == 2 * reversed_num - 1\n```"
    },
    {
        "id":47,
        "response":"import itertools\n\ndef find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr[:n])))"
    },
    {
        "id":48,
        "response":"import typing\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x > 0 and y < 0) or (x < 0 and y > 0)"
    },
    {
        "id":49,
        "response":"import typing\n\ndef nth_octagonal(n: int) -> int:\n    if n < 1:\n        return 0\n    return n * (2 * n - 1)"
    },
    {
        "id":50,
        "response":"import typing\n\ndef max_len_sub(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) == 1:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    return max(max_len, curr_len)"
    },
    {
        "id":51,
        "response":"import re\n\ndef count_Substrings(s, n):\n    return re.sub('.{'+str(n)+'}.*', '', s)"
    },
    {
        "id":52,
        "response":"import typing\n\ndef smallest_num(xs: typing.List[int]) -> int:\n    return min(xs)"
    },
    {
        "id":53,
        "response":"import itertools\n\ndef max_difference(test_list):\n    return max(max(pair) - min(pair) for pair in test_list)"
    },
    {
        "id":54,
        "response":"import typing\nimport itertools\n\ndef subject_marks(subjectmarks: typing.List[typing.Tuple[str, int]]) -> typing.List[typing.Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "id":55,
        "response":"import typing\nimport itertools\n\ndef recursive_list_sum(data_list: typing.Union[int, typing.List[typing.Union[int, typing.List[int]]]]) -> int:\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "id":56,
        "response":"import typing\n\ndef pos_count(lst: typing.List[int]) -> typing.List[int]:\n    return sum(1 for num in lst if num > 0)"
    },
    {
        "id":57,
        "response":"import math\n\ndef bell_number(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return math.comb(n-1, n-1)"
    },
    {
        "id":58,
        "response":"import typing\n\ndef is_Monotonic(A: typing.List[int]) -> typing.List[int]:\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n    return A"
    },
    {
        "id":59,
        "response":"import itertools\n\ndef is_sublist(l, s):\n    return ''.join(map(str, s)) in ''.join(map(str, l))"
    },
    {
        "id":60,
        "response":"import typing\n\ndef find_equal_tuple(Input: typing.List[typing.Tuple], k: int) -> bool:\n    return all(len(i) == k for i in Input)"
    },
    {
        "id":61,
        "response":"```python\nimport typing\n\ndef comb_sort(nums: typing.List[int]) -> typing.List[int]:\n    def get_next_gap(gap: int) -> int:\n        gap = (gap * 10) \/\/ 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums\n```"
    },
    {
        "id":62,
        "response":"import math\n\ndef dif_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(math.sqrt(n)) + 1):\n        for j in range(i + 1, int(math.sqrt(n)) + 1):\n            if j**2 - i**2 == n:\n                return True\n    return False\n\nassert dif_Square(5) == True\nassert dif_Square(13) == True\nassert dif_Square(25) == False\nassert dif_Square(0) == True\nassert dif_Square(-1) == False"
    },
    {
        "id":63,
        "response":"import re\nimport typing\n\ndef multiple_split(text: typing.Union[str, None]) -> typing.Union[list, None]:\n    return re.split('[,;:\\s]+', text)"
    },
    {
        "id":64,
        "response":"```python\nimport typing\n\ndef is_samepatterns(colors: typing.List[str], patterns: typing.List[str]) -> typing.List[str]:\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors) - 1):\n        if patterns[i] == 'same' and colors[i] != colors[i + 1]:\n            return False\n        if patterns[i] == 'different' and colors[i] == colors[i + 1]:\n            return False\n    return colors\n```"
    },
    {
        "id":65,
        "response":"import typing\n\ndef find_tuples(test_list: typing.List[typing.Tuple[int]], K: int) -> typing.List[typing.Tuple[int]]:\n    return [tup for tup in test_list if all(i % K == 0 for i in tup)]"
    },
    {
        "id":66,
        "response":"import math\n\ndef count_Squares(m,n):\n    return m*n"
    },
    {
        "id":67,
        "response":"import typing\n\ndef is_Diff(n: int) -> int:\n    even_sum = sum(i for i in range(1, n+1) if i % 2 == 0)\n    odd_sum = sum(i for i in range(1, n+1) if i % 2 != 0)\n    return even_sum - odd_sum"
    },
    {
        "id":68,
        "response":"import math\n\ndef count_With_Odd_SetBits(n):\n    return math.ceil(n \/ 2)"
    },
    {
        "id":69,
        "response":"import re\n\ndef word_len(s):\n    return len(s) % 2 != 0"
    },
    {
        "id":70,
        "response":"import math\n\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) \/\/ 6"
    },
    {
        "id":71,
        "response":"import itertools\n\ndef zip_tuples(test_tup1, test_tup2):\n    return list(itertools.zip_longest(test_tup1, test_tup2))"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    if r < 0:\n        raise ValueError(\"\u09b0\u09c7\u09a1\u09bf\u09af\u09bc\u09be\u09b8 \u098b\u09a3\u09be\u09a4\u09cd\u09ae\u0995 \u09b9\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7 \u09a8\u09be\")\n    return (4\/3) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":"import typing\n\ndef get_Char(strr: str) -> str:\n    return chr(sum(ord(c) for c in strr))"
    },
    {
        "id":74,
        "response":"import typing\n\ndef sequence(n: int) -> int:\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, (a + b) % 2\n        return b"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2"
    },
    {
        "id":76,
        "response":"import math\n\ndef centered_hexagonal_number(n):\n    return 3*n*(n-1) + 1"
    },
    {
        "id":77,
        "response":"```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n\nassert merge_dictionaries_three({'a': 1}, {'b': 2}, {'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\nassert merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6}) == {'a': 1, 'b': 3, 'c': 5, 'd': 6}\nassert merge_dictionaries_three({}, {'b': 2}, {'c': 3}) == {'b': 2, 'c': 3}\nassert merge_dictionaries_three({'a': 1}, {}, {'c': 3}) == {'a': 1, 'c': 3}\nassert merge_dictionaries_three({'a': 1}, {'b': 2}, {}) == {'a': 1, 'b': 2}\n```"
    },
    {
        "id":78,
        "response":"from typing import Dict, List, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "id":79,
        "response":"import math\n\ndef closest_num(N):\n    return N - math.ceil(N % 2)"
    },
    {
        "id":80,
        "response":"import re\nimport typing\n\ndef len_log(list1: typing.List[str]) -> int:\n    return max(len(word) for word in list1)"
    },
    {
        "id":81,
        "response":"import re\n\ndef find_substring(lst, sub_str):\n    for string in lst:\n        if re.search(sub_str, string):\n            return string\n    return None"
    },
    {
        "id":82,
        "response":"import re\n\ndef is_undulating(n):\n    n = str(n)\n    return all(n[i] != n[i+1] for i in range(len(n)-1))"
    },
    {
        "id":83,
        "response":"import math\n\ndef power(a, b):\n    if a == 0:\n        return 0\n    if b < 0:\n        return 1 \/ (a ** -b)\n    return a ** b"
    },
    {
        "id":84,
        "response":"import typing\n\ndef index_minimum(test_list: typing.Tuple[int]) -> int:\n    return test_list.index(min(test_list))"
    },
    {
        "id":85,
        "response":"import typing\n\ndef Find_Min_Length(lst: typing.List[typing.List[int]]) -> int:\n    return min(len(sublist) for sublist in lst)"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n):\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count"
    },
    {
        "id":87,
        "response":"from typing import List, Tuple\n\ndef frequency_lists(list1: List[int]) -> List[Tuple[int, int]]:\n    freq_list = []\n    for item in list1:\n        freq_list.append((item, list1.count(item)))\n    return freq_list"
    },
    {
        "id":88,
        "response":"import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product \/ len(numbers)"
    },
    {
        "id":89,
        "response":"import typing\n\ndef decimal_to_binary(n: int) -> str:\n    return bin(n).replace(\"0b\", \"\")"
    },
    {
        "id":90,
        "response":"import re\nimport itertools\n\ndef next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]"
    },
    {
        "id":91,
        "response":"import typing\n\ndef kth_element(arr: typing.List[int], n: int, k: int) -> int:\n    if k > n:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "id":92,
        "response":"```python\nimport re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word).replace(\"_\", \"\")\n```"
    },
    {
        "id":93,
        "response":"import math\n\ndef eulerian_num(n, m):\n    if m == 0:\n        return 1\n    if m == 1:\n        return (n-1)\n    if n == 0:\n        return 0\n    return (n-1)*(eulerian_num(n-1, m-1) + eulerian_num(n-2, m-1))"
    },
    {
        "id":94,
        "response":"import itertools\n\ndef sort_sublists(input_list):\n    return list(map(lambda x: sorted(x) if isinstance(x, list) else x, input_list))"
    },
    {
        "id":95,
        "response":"import typing\n\ndef count(lst: typing.List[bool]) -> int:\n    return sum(1 for elem in lst if elem)"
    },
    {
        "id":96,
        "response":"import typing\nimport itertools\n\ndef add_lists(test_list: typing.List[int], test_tup: typing.Tuple[int]) -> typing.List[int]:\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "id":97,
        "response":"```python\nimport re\n\ndef count_Hexadecimal(L, R):\n    return len(re.findall(r'^[0-9A-F]{1,8}$', hex(R)[2:].upper())) - len(re.findall(r'^[0-9A-F]{1,8}$', hex(L-1)[2:].upper()))\n```"
    },
    {
        "id":98,
        "response":"import itertools\n\ndef merge_sorted_list(num1, num2, num3):\n    return sorted(list(itertools.chain(num1, num2, num3)))"
    },
    {
        "id":99,
        "response":""
    },
    {
        "id":100,
        "response":"import itertools\n\ndef extract_missing(test_list, strt_val, stop_val):\n    full_range = list(range(strt_val, stop_val + 1))\n    missing_ranges = [i for i in full_range if i not in test_list]\n    return missing_ranges"
    },
    {
        "id":101,
        "response":"import itertools\n\ndef common_in_nested_lists(nested_lists):\n    flattened_list = [item for sublist in nested_lists for item in sublist]\n    common_elements = set(flattened_list[0])\n    for sublist in flattened_list[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    return math.pi * diameter"
    },
    {
        "id":103,
        "response":"import re\ndef check_integer(text):\n    if not text:\n        return False\n    if re.match(\"^[0-9]+$\", text):\n        return True\n    return False\n\nassert check_integer(\"123\") == True\nassert check_integer(\"abc\") == False\nassert check_integer(\"123.45\") == False\nassert check_integer(\"\") == False\nassert check_integer(\"123abc\") == False"
    },
    {
        "id":104,
        "response":"from typing import List, Tuple\n\ndef assign_freq(test_list: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int, int]]:\n    freq_dict = {}\n    for a, b, c in test_list:\n        if (a, b, c) in freq_dict:\n            freq_dict[(a, b, c)] += 1\n        else:\n            freq_dict[(a, b, c)] = 1\n    return [(a, b, c, freq_dict[(a, b, c)]) for a, b, c in test_list]"
    },
    {
        "id":105,
        "response":"import typing\n\ndef empty_dict(list1: typing.List[typing.Dict]) -> bool:\n    return all(not d for d in list1)"
    },
    {
        "id":106,
        "response":"import itertools\n\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))"
    },
    {
        "id":107,
        "response":"```python\nfrom typing import List, Union\n\ndef list_to_float(test_list: List[Union[int, float, str]]) -> List[float]:\n    return [float(i) for i in test_list if isinstance(i, (int, float, str)) and i.replace('.', '', 1).replace('-', '', 1).isdigit()]\n```"
    },
    {
        "id":108,
        "response":"import re\n\ndef string_to_list(string):\n    return re.findall('.', string)"
    },
    {
        "id":109,
        "response":"import collections\n\ndef search(arr, n):\n    count_dict = collections.Counter(arr)\n    for key, value in count_dict.items():\n        if value == 1:\n            return key\n    return None"
    },
    {
        "id":110,
        "response":"import itertools\n\ndef max_product_tuple(list1):\n    return max(list1, key=lambda x: x[0]*x[1])"
    },
    {
        "id":111,
        "response":"```python\nimport itertools\n\ndef check_triplet(A, n, sum, count):\n    for triplet in itertools.combinations(A, 3):\n        if sum(triplet) == sum and len(set(triplet)) == 3:\n            return list(triplet)\n    return []\n```"
    },
    {
        "id":112,
        "response":""
    },
    {
        "id":113,
        "response":"import math\n\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n\n    amicable_numbers = set()\n    for a in range(1, limit):\n        b = sum_of_divisors(a)\n        if b < limit and sum_of_divisors(b) == a and a != b:\n            amicable_numbers.add(a)\n            amicable_numbers.add(b)\n    return sum(amicable_numbers)"
    },
    {
        "id":114,
        "response":"import math\nimport cmath\n\ndef angle_complex(a, b):\n    return math.atan2(b, a)"
    },
    {
        "id":115,
        "response":"import itertools\n\ndef find_length(string):\n    max_diff = 0\n    for window_size in range(1, len(string) + 1):\n        for window in itertools.combinations(range(len(string)), window_size):\n            ones = sum(1 for i in window if string[i] == '1')\n            zeros = window_size - ones\n            diff = abs(ones - zeros)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    common_divisors_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum"
    },
    {
        "id":117,
        "response":"import typing\n\ndef multiply_int(x: int, y: int) -> int:\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return result\n    else:\n        return -result"
    },
    {
        "id":118,
        "response":"```python\nimport re\n\ndef long_words(n, str):\n    word_list = re.findall(r'\\b\\w+\\b', str)\n    long_word_list = [word for word in word_list if len(word) > n]\n    return long_word_list\n```"
    },
    {
        "id":119,
        "response":"import numpy as np\n\ndef magic_square_test(my_matrix):\n    my_matrix = np.array(my_matrix)\n    n = len(my_matrix)\n    expected_sum = n * (n**2 + 1) \/\/ 2\n    for row in my_matrix:\n        if np.sum(row) != expected_sum:\n            return False\n    for col in range(n):\n        if np.sum(my_matrix[:, col]) != expected_sum:\n            return False\n    if np.sum(my_matrix[np.arange(n), np.arange(n)]) != expected_sum:\n        return False\n    if np.sum(my_matrix[np.arange(n), n-np.arange(n)]) != expected_sum:\n        return False\n    return True\n\n# \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be\u09b0 \u0995\u09cd\u09b7\u09c7\u09a4\u09cd\u09b0\u09c7\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\nassert not magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nassert magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]])\nassert not magic_square_test([[1, 1, 1], [1, 1, 1], [1, 1, 1]])\nassert magic_square_test([[8, 1, 6], [3, 5, 7], [4, 9, 2]])"
    },
    {
        "id":120,
        "response":"import typing\nfrom collections import Counter\n\ndef max_occurrences(nums: typing.List[int]) -> typing.Union[int, type(None)]:\n    if not nums:\n        return None\n    counter = Counter(nums)\n    return counter.most_common(1)[0][0]"
    },
    {
        "id":121,
        "response":"import re\n\ndef reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    return ''.join(str1)"
    },
    {
        "id":122,
        "response":"import typing\n\ndef tup_string(tup1: typing.Tuple) -> str:\n    return str(tup1)"
    },
    {
        "id":123,
        "response":"import functools\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return functools.reduce(lambda x, y: x + y, filter(lambda x: x < 0, nums), 0)"
    },
    {
        "id":124,
        "response":"import math\n\ndef check_last(arr, n, p):\n    last_element = arr[n-1] ** p\n    if last_element % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    {
        "id":125,
        "response":"import math\n\ndef hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"```python\nimport math\n\ndef cal_electbill(units: float) -> float:\n    if units <= 0:\n        return 0.0\n    elif units <= 100:\n        return units * 0.5\n    elif units <= 200:\n        return 50 + (units - 100) * 1.2\n    else:\n        return 50 + 120 + (units - 200) * 1.5\n\nassert cal_electbill(50) == 25.0\nassert cal_electbill(150) == 110.0\nassert cal_electbill(250) == 260.0\nassert cal_electbill(0) == 0.0\nassert cal_electbill(300) == 380.0\n```"
    },
    {
        "id":127,
        "response":"import typing\n\ndef zero_count(nums: typing.List[int]) -> float:\n    return nums.count(0) \/ len(nums) if nums else 0.0"
    },
    {
        "id":128,
        "response":"import math\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n & (n - 1) == 0:\n        return False\n    return bin(n).count('1') == 1"
    },
    {
        "id":129,
        "response":"import math\ndef circle_circumference(r):\n    return 2 * math.pi * r"
    },
    {
        "id":130,
        "response":"import collections\n\ndef extract_singly(test_list):\n    return [item for item in test_list if test_list.count(item) == 1]"
    },
    {
        "id":131,
        "response":"import typing\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    for size in range(n, 0, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index == size - 1:\n            continue\n        if max_index != 0:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:size][::-1] + nums[size:]\n    return nums"
    },
    {
        "id":132,
        "response":"import itertools\n\ndef count_samepair(list1, list2, list3):\n    return [(x, y) for x, y in zip(list1, list2) if x == y and x in list3]"
    },
    {
        "id":133,
        "response":"import typing\n\ndef find_lists(Input: typing.Union[typing.List, typing.Tuple]) -> int:\n    return sum(isinstance(i, list) for i in Input)"
    },
    {
        "id":134,
        "response":"import itertools\n\ndef sum_Pairs(arr):\n    return sum(abs(a - b) for a, b in itertools.zip_longest(arr[::2], arr[1::2]))"
    },
    {
        "id":135,
        "response":"import numpy as np\n\ndef max_Abs_Diff(arr, n):\n    return max(max(arr) - min(arr), 0)"
    },
    {
        "id":136,
        "response":"import re\n\ndef ascii_value_string(str1):\n    return sum(ord(char) for char in str1)"
    },
    {
        "id":137,
        "response":"```python\ndef max_path_sum(tri, m, n):\n    for i in range(m-1, 0, -1):\n        for j in range(n):\n            if j == 0:\n                tri[i-1][j] += max(tri[i][j], tri[i][j+1])\n            elif j == n-1:\n                tri[i-1][j] += max(tri[i][j-1], tri[i][j])\n            else:\n                tri[i-1][j] += max(tri[i][j-1], tri[i][j], tri[i][j+1])\n    return tri[0][0]\n```"
    },
    {
        "id":138,
        "response":"import itertools\n\ndef sum_digits_single(x) :\n    return max(sum(int(digit) for digit in ''.join(p)) for p in itertools.permutations(str(x)))"
    },
    {
        "id":139,
        "response":"```python\nimport itertools\n\ndef longest_subseq_with_diff_one(arr, n):\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    return max(max_length, current_length)\n\ndef longest_subseq_with_diff_one_iter(arr, n):\n    max_length = 1\n    current_length = 1\n\n    for i, j in itertools.pairwise(arr):\n        if abs(i - j) == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    return max(max_length, current_length)\n\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1, 2, 3], 10) == 3\nassert longest_subseq_with_diff_one([1, 1, 1, 1, 1], 5) == 1\nassert longest_subseq_with_diff_one([1, 3, 5, 7, 9], 5) == 1\nassert longest_subseq_with_diff_one([10, 11, 12, 13, 14], 5) == 5\nassert longest_subseq_with_diff_one([1, 3, 2, 1, 0], 5) == 3\n```"
    },
    {
        "id":140,
        "response":"import itertools\n\ndef does_Contain_B(a, b, c):\n    sequence = [b]\n    while sequence[-1] < a:\n        sequence.append(sequence[-1] + c)\n    return a in sequence"
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p, q):\n    return math.gcd(p, q)\n\ndef is_coprime(a, b):\n    return gcd(a, b) == 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_coprime_prime(a, b):\n    return is_coprime(a, b) and is_prime(a) and is_prime(b)\n\nassert is_coprime_prime(8, 15) == False\nassert is_coprime_prime(24, 30) == False\nassert is_coprime_prime(17, 29) == True\nassert is_coprime_prime(1, 1) == True\nassert is_coprime_prime(0, 10) == False"
    },
    {
        "id":142,
        "response":"import typing\n\ndef merge_sort(arr: typing.List[int]) -> typing.List[int]:\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left: typing.List[int], right: typing.List[int]) -> typing.List[int]:\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    },
    {
        "id":143,
        "response":"import math\n\ndef parabola_vertex(a, b, c):\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"import typing\n\ndef specified_element(nums: typing.List[int], N: int) -> typing.List[int]:\n    return [num for num in nums if num == N]"
    },
    {
        "id":145,
        "response":"```python\ndef even_bit_toggle_number(n):\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if binary[i] == '0' and i % 2 == 0 else '0' if binary[i] == '1' and i % 2 == 0 else binary[i] for i in range(len(binary)))\n    toggled_number = int(toggled_binary, 2)\n    return toggled_number\n```"
    },
    {
        "id":146,
        "response":"import typing\n\ndef tuple_int_str(tuple_str: typing.Tuple[str]) -> typing.Tuple[int]:\n    return tuple(int(i) for i in tuple_str)"
    },
    {
        "id":147,
        "response":"```python\nimport typing\n\ndef encode_list(list1: typing.List[int]) -> typing.List[tuple[int, int]]:\n    if not list1:\n        return []\n    result = []\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            count += 1\n        else:\n            result.append((count, list1[i - 1]))\n            count = 1\n    result.append((count, list1[-1]))\n    return result\n\n# \u099f\u09c7\u09b8\u09cd\u099f \u0995\u09c7\u09b8\nassert encode_list([1, 1, 1, 2, 2, 3, 3, 3, 3]) == [(3, 1), (2, 2), (4, 3)]\nassert encode_list([1, 2, 3, 4, 5]) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]\nassert encode_list([1, 1, 1, 1, 1]) == [(5, 1)]\nassert encode_list([]) == []\nassert encode_list([5]) == [(1, 5)]\n```"
    },
    {
        "id":148,
        "response":"import math\nfrom typing import List\n\ndef min_Ops(arr: List[int], n: int, k: int) -> int:\n    max_val = max(arr)\n    min_val = min(arr)\n    ops = 0\n    while max_val != min_val:\n        max_val -= k\n        ops += 1\n        if max_val < min_val:\n            max_val = min_val\n    return ops"
    },
    {
        "id":149,
        "response":"```python\nimport re\n\ndef month_season(month, days):\n    if (month == 12 and days >= 21) or (month == 1) or (month == 2) or (month == 3 and days <= 20):\n        return \"\u09b6\u09c0\u09a4\u0995\u09be\u09b2\"\n    elif (month == 3 and days >= 21) or (month == 4) or (month == 5) or (month == 6 and days <= 20):\n        return \"\u09ac\u09b8\u09a8\u09cd\u09a4\u0995\u09be\u09b2\"\n    elif (month == 6 and days >= 21) or (month == 7) or (month == 8) or (month == 9 and days <= 20):\n        return \"\u0997\u09cd\u09b0\u09c0\u09b7\u09cd\u09ae\u0995\u09be\u09b2\"\n    elif (month == 9 and days >= 21) or (month == 10) or (month == 11) or (month == 12 and days <= 20):\n        return \"\u09b6\u09b0\u09ce\u0995\u09be\u09b2\"\n```"
    },
    {
        "id":150,
        "response":"import math\n\ndef solution(a, b, n):\n    for x in range(n + 1):\n        y = (n - a * x) \/ b\n        if y.is_integer() and y >= 0:\n            return x\n    return -1"
    },
    {
        "id":151,
        "response":"import typing\n\ndef remove_elements(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [element for element in list1 if element not in list2]"
    },
    {
        "id":152,
        "response":"import math\n\ndef sum_series(n):\n    sum = 0\n    i = 0\n    while True:\n        term = n - 2 * i\n        if term < 0:\n            break\n        sum += term\n        i += 1\n    return sum"
    },
    {
        "id":153,
        "response":"import math\nimport numpy as np\n\ndef area_polygon(s, l):\n    return (s * l**2) \/ (4 * np.tan(np.pi\/s))"
    },
    {
        "id":154,
        "response":"import math\n\ndef divSum(n):\n    if n < 1:\n        return False\n    return sum(i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0) == n"
    },
    {
        "id":155,
        "response":"import re\nfrom typing import Dict\n\ndef count_char_position(str1: str) -> Dict[int, int]:\n    str1 = str1.lower()\n    char_count = {}\n    for char in str1:\n        if char.isalpha():\n            position = ord(char) - 96\n            char_count[position] = char_count.get(position, 0) + 1\n    return char_count"
    },
    {
        "id":156,
        "response":"import itertools\n\ndef find_even_Pair(A, N):\n    count = 0\n    for pair in itertools.combinations(A, 2):\n        if (pair[0] ^ pair[1]) % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "id":157,
        "response":"import math\n\ndef next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))"
    },
    {
        "id":158,
        "response":"import typing\n\ndef frequency(a: typing.List[int], x: int) -> typing.List[int]:\n    return [a.count(i) for i in set(a)]"
    },
    {
        "id":159,
        "response":"import math\n\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        phi = (1 + math.sqrt(5)) \/ 2\n        psi = (1 - math.sqrt(5)) \/ 2\n        return int((phi ** n - psi ** n) \/ math.sqrt(5))"
    },
    {
        "id":160,
        "response":"import typing\n\ndef sum_range_list(list1: typing.List[int], m: int, n: int) -> typing.List[int]:\n    return list1[m:n+1]"
    },
    {
        "id":161,
        "response":"import math\n\ndef perimeter_pentagon(a):\n    return 5 * a"
    },
    {
        "id":162,
        "response":"import re\n\ndef count_occurance(s):\n    return len(re.findall('std', s))"
    },
    {
        "id":163,
        "response":"import re\ndef remove_splchar(text):\n    return re.sub('[^a-zA-Z0-9]', '', text)"
    },
    {
        "id":164,
        "response":"import typing\n\ndef group_keyvalue(l: typing.List[tuple]) -> typing.Dict[str, list]:\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result"
    },
    {
        "id":165,
        "response":"import re\n\ndef is_valid_parenthese(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if re.match(r'\\(\\)|\\[\\]|\\{|\\}', char):\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack"
    },
    {
        "id":166,
        "response":"import math\n\ndef perimeter_triangle(a, b, c):\n    return a + b + c"
    },
    {
        "id":167,
        "response":"import math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b \/\/ gcd(a, b)\n\ndef answer(L, R):\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if lcm(i, j) >= L and lcm(i, j) <= R:\n                return i\n    return -1"
    },
    {
        "id":168,
        "response":"import re\n\ndef string_literals(patterns, text):\n    found_patterns = [pattern for pattern in patterns if re.search(pattern, text)]\n    return found_patterns"
    },
    {
        "id":169,
        "response":""
    },
    {
        "id":170,
        "response":"```python\nimport math\nimport typing\n\ndef distance_lat_long(slat: float, slon: float, elat: float, elon: float) -> float:\n    R = 6371  # \u09aa\u09c3\u09a5\u09bf\u09ac\u09c0\u09b0 \u09ac\u09cd\u09af\u09be\u09b8\u09be\u09b0\u09cd\u09a7 \u0995\u09bf\u09b2\u09cb\u09ae\u09bf\u099f\u09be\u09b0\u09c7\n    dlat = math.radians(elat - slat)\n    dlon = math.radians(elon - slon)\n    a = math.sin(dlat \/ 2) * math.sin(dlat \/ 2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon \/ 2) * math.sin(dlon \/ 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c\n    return d\n\n# \u099f\u09c7\u09b8\u09cd\u099f \u0995\u09c7\u09b8\nassert round(distance_lat_long(52.5200, 13.4050, 48.8566, 2.3522), 2) == 882.16\nassert round(distance_lat_long(23.8103, 90.4125, 23.8103, 90.4125), 2) == 0.0\nassert round(distance_lat_long(0.0, 0.0, 0.0, 180.0), 2) == 20015.08\nassert round(distance_lat_long(40.7128, -74.0060, 34.0522, -118.2437), 2) == 3935.75\nassert round(distance_lat_long(-33.9188, 151.2093, -26.4391, 133.0251), 2) == 1931.51\n```"
    },
    {
        "id":171,
        "response":"```python\nimport itertools\n\ndef common_prefix_util(str_set):\n    if not str_set:\n        return \"\"\n\n    prefix = next(itertools.zip_longest(*str_set, fillvalue=\"\"), None)\n    prefix = \"\".join(c for c in prefix if c is not None)\n\n    for s in str_set:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n\n    return prefix\n\nassert common_prefix_util([\"flower\",\"flow\"]) == \"flow\"\nassert common_prefix_util([\"dog\",\"racecar\"]) == \"\"\nassert common_prefix_util([\"inter\",\"intersect\"]) == \"inter\"\nassert common_prefix_util([\"hello\",\"hello\"]) == \"hello\"\nassert common_prefix_util([]) == \"\"\n```"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string):\n    upper = re.search(r\"[A-Z]\", string)\n    lower = re.search(r\"[a-z]\", string)\n    special = re.search(r\"[^A-Za-z0-9]\", string)\n    digit = re.search(r\"\\d\", string)\n\n    return {\n        \"\u09ac\u09a1\u09bc \u0985\u0995\u09cd\u09b7\u09b0\": upper.group() if upper else None,\n        \"\u099b\u09cb\u099f \u0985\u0995\u09cd\u09b7\u09b0\": lower.group() if lower else None,\n        \"\u09ac\u09bf\u09b6\u09c7\u09b7 \u0985\u0995\u09cd\u09b7\u09b0\": special.group() if special else None,\n        \"\u09b8\u0982\u0996\u09cd\u09af\u09be\u09b8\u09c2\u099a\u0995 \u09ae\u09be\u09a8\": digit.group() if digit else None\n    }"
    },
    {
        "id":173,
        "response":"import itertools\n\ndef count_pairs(arr, n, k):\n    count = 0\n    pairs = set()\n    for pair in itertools.combinations(arr, 2):\n        if abs(pair[0] - pair[1]) == k:\n            pair = tuple(sorted(pair))\n            if pair not in pairs:\n                pairs.add(pair)\n                count += 1\n    return count"
    },
    {
        "id":174,
        "response":"import typing\n\ndef greater_specificnum(list: typing.List[int], num: int) -> typing.List[int]:\n    return [i for i in list if i > num]"
    },
    {
        "id":175,
        "response":"import math\n\ndef parabola_focus(a, b, c):\n    h = -b \/ (2 * a)\n    k = a * h**2 + b * h + c\n    p = 1 \/ (4 * a)\n    return (h, k + p)"
    },
    {
        "id":176,
        "response":"import re\nfrom typing import List\n\ndef check_literals(text: str, patterns: List[str]) -> str:\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return f\"'{pattern}' \u09aa\u09be\u0993\u09af\u09bc\u09be \u0997\u09c7\u099b\u09c7\"\n    return \"\u0995\u09cb\u09a8\u09cb \u09aa\u09cd\u09af\u09be\u099f\u09be\u09b0\u09cd\u09a8 \u09aa\u09be\u0993\u09af\u09bc\u09be \u09af\u09be\u09af\u09bc\u09a8\u09bf\""
    },
    {
        "id":177,
        "response":"```python\nimport numpy as np\n\ndef longest_common_subsequence(X, Y, m, n):\n    L = np.zeros((m + 1, n + 1))\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0 :\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n \n    index = L[m][n]\n \n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n \n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n \n    return \"\".join(lcs)\n\nassert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7) == \"GTAB\"\nassert longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6) == \"ADH\"\nassert longest_common_subsequence(\"ABCDEF\", \"ZBCDFG\", 6, 6) == \"BCDF\"\nassert longest_common_subsequence(\"\", \"ABCDEF\", 0, 6) == \"\"\nassert longest_common_subsequence(\"ABCDEF\", \"\", 6, 0) == \"\"\n```"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        sqrt = math.sqrt(n \/ i \/ i)\n        if sqrt == int(sqrt):\n            return True\n    return False"
    },
    {
        "id":179,
        "response":"import typing\n\ndef first_Missing_Positive(arr: typing.List[int], n: int) -> int:\n    arr = set(arr)\n    i = 1\n    while i in arr:\n        i += 1\n    return i"
    },
    {
        "id":180,
        "response":"import math\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    return (x2 - x1 + 1) * (y2 - y1 + 1)"
    },
    {
        "id":181,
        "response":"import re\n\ndef check_monthnumber(monthname3):\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return monthname3 in month_30_days"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(str):\n    return bool(re.search(r\"\\d\", str)) and bool(re.search(r\"\\w\", str))"
    },
    {
        "id":183,
        "response":"import typing\n\ndef remove_tuple(test_tup: typing.Tuple[int]) -> typing.Tuple[int]:\n    return tuple(set(test_tup))"
    },
    {
        "id":184,
        "response":"import re\n\ndef octal_To_Decimal(n):\n    return int(str(n), 8)"
    },
    {
        "id":185,
        "response":"import typing\n\ndef first(arr: typing.List[int], x: int, n: int) -> typing.List[int]:\n    for i in range(n):\n        if arr[i] == x:\n            return arr\n    return [-1]"
    },
    {
        "id":186,
        "response":"import typing\n\ndef remove_tuples(test_list: typing.List, K: int) -> typing.List:\n    return [sub for sub in test_list if type(sub) != tuple or len(sub) != K]"
    },
    {
        "id":187,
        "response":"import math\nfrom typing import Tuple\n\ndef find_exponentio(test_tup1: Tuple[int, int], test_tup2: Tuple[int, int]) -> Tuple[int, int]:\n    return pow(test_tup1[0], test_tup2[0]), pow(test_tup1[1], test_tup2[1])"
    },
    {
        "id":188,
        "response":"```python\nimport math\nimport typing\n\ndef largest_triangle(a: float, b: float) -> float:\n    return (math.sqrt(3) \/ 4) * (2 * b)**2\n```"
    },
    {
        "id":189,
        "response":"import math\n\ndef highest_Power_of_2(n):\n    return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":190,
        "response":"import typing\nimport itertools\n\ndef position_max(list1: typing.List[int]) -> typing.List[int]:\n    max_val = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_val]"
    },
    {
        "id":191,
        "response":"import typing\n\ndef chkList(lst: typing.List) -> bool:\n    return len(set(lst)) == 1"
    },
    {
        "id":192,
        "response":"import re\n\ndef remove_even(str1):\n    return ''.join([char for i, char in enumerate(str1) if i % 2 != 0])"
    },
    {
        "id":193,
        "response":"import math\n\ndef hamming_Distance(n1, n2) :\n    return bin(n1 ^ n2).count('1')"
    },
    {
        "id":194,
        "response":"import re\n\ndef count(s, c):\n    return len(re.findall(c, s))"
    },
    {
        "id":195,
        "response":"import typing\nimport itertools\n\ndef inversion_elements(test_tup: typing.Tuple[int]) -> typing.Tuple[int]:\n    return tuple(map(lambda x: -x, test_tup))"
    },
    {
        "id":196,
        "response":"import itertools\n\ndef concatenate_elements(test_tup):\n    return tuple(str(i) + str(j) for i, j in zip(test_tup, itertools.cycle(test_tup)))"
    },
    {
        "id":197,
        "response":"```python\nimport typing\n\ndef find_longest_repeating_subseq(str: str) -> int:\n    n = len(str)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][n]\n\nassert find_longest_repeating_subseq(\"aab\") == 1\nassert find_longest_repeating_subseq(\"abc\") == 0\nassert find_longest_repeating_subseq(\"aaaa\") == 3\nassert find_longest_repeating_subseq(\"abcbca\") == 3\nassert find_longest_repeating_subseq(\"abcdabcd\") == 4\n```"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num):\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        return [a]\n    heapq.heappop(heap)\n    heapq.heappush(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string):\n    pattern = r'^[abc]+$'\n    return bool(re.match(pattern, string))"
    },
    {
        "id":201,
        "response":"import math\n\ndef count_Num(n):\n    return math.floor(n\/2) + 1"
    },
    {
        "id":202,
        "response":"import typing\n\ndef fourth_Power_Sum(n: int) -> int:\n    return sum(i**4 for i in range(1, n+1))"
    },
    {
        "id":203,
        "response":"import itertools\n\ndef concatenate_strings(test_tup1, test_tup2):\n    return tuple(''.join(p) for p in itertools.zip_longest(test_tup1, test_tup2, fillvalue=''))"
    },
    {
        "id":204,
        "response":"import math\ndef degree_radian(radian):\n    return math.degrees(radian)"
    },
    {
        "id":205,
        "response":"import typing\n\ndef decode_list(alist: typing.List[typing.Union[int, str]]) -> typing.List[str]:\n    decoded_list = []\n    i = 0\n    while i < len(alist):\n        count = alist[i]\n        value = alist[i + 1]\n        decoded_list.extend([value] * count)\n        i += 2\n    return decoded_list"
    },
    {
        "id":206,
        "response":"import typing\n\ndef check_subset_list(list1: typing.List[typing.Union[int, typing.List[int]]], list2: typing.List[typing.Union[int, typing.List[int]]]) -> bool:\n    def flatten(lst: typing.List[typing.Union[int, typing.List[int]]]) -> typing.List[int]:\n        flat_list = []\n        for i in lst:\n            if type(i) == list:\n                flat_list.extend(flatten(i))\n            else:\n                flat_list.append(i)\n        return flat_list\n\n    flat_list1 = flatten(list1)\n    flat_list2 = flatten(list2)\n\n    return set(flat_list1).issubset(set(flat_list2))"
    },
    {
        "id":207,
        "response":"import re\nfrom typing import Optional\n\ndef first_Repeated_Char(s: str) -> Optional[str]:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "id":208,
        "response":"import math\n\ndef min_Operations(A, B):\n    return math.floor(math.log(A, 2)) + math.floor(math.log(B, 2)) - math.floor(math.log(math.gcd(A, B), 2))"
    },
    {
        "id":209,
        "response":"import typing\n\ndef extract_min_max(test_tup: typing.Tuple[int], K: int) -> typing.Tuple[typing.Tuple[int], typing.Tuple[int]]:\n    sorted_tup = tuple(sorted(test_tup))\n    return (sorted_tup[:K], sorted_tup[-K:])"
    },
    {
        "id":210,
        "response":"```python\nimport re\nfrom typing import Dict\n\ndef replace_max_specialchar(text: str, n: int) -> str:\n    special_chars = [' ', ',', '.']\n    char_count: Dict[str, int] = {}\n    for char in text:\n        if char in special_chars:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    sorted_chars = sorted(char_count.items(), key=lambda x: x[1], reverse=True)\n    for char, count in sorted_chars:\n        if n > 0:\n            text = re.sub(char, ':', text, count)\n            n -= count\n        else:\n            break\n    return text\n```"
    },
    {
        "id":211,
        "response":"import typing\n\ndef first_even(nums: typing.List[int]) -> int:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
    },
    {
        "id":212,
        "response":"from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> Tuple:\n    return len(set(type(i) for i in test_tuple)) == 1"
    },
    {
        "id":213,
        "response":"import typing\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> List[int]:\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n\/2"
    },
    {
        "id":214,
        "response":"import math\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "id":215,
        "response":"import typing\n\ndef find_Min(arr: typing.List[int], low: int, high: int) -> int:\n    if low == high:\n        return arr[low]\n    if low < high:\n        return min(arr[low], find_Min(arr, low + 1, high))\n    return arr[0]"
    },
    {
        "id":216,
        "response":"import re\nimport itertools\n\ndef odd_values_string(str):\n    return ''.join([x for i, x in enumerate(str) if i % 2 == 0]) + ''.join([x for i, x in enumerate(str) if i % 2 != 0])"
    },
    {
        "id":217,
        "response":"import itertools\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"```python\nimport typing\n\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> int:\n    all_ones = (1 << (r - l + 1)) - 1\n    return (n >> l) & all_ones == all_ones\n```"
    },
    {
        "id":219,
        "response":"import itertools\n\ndef re_arrange_array(arr, n):\n    positive = [x for x in arr if x >= 0]\n    negative = [x for x in arr if x < 0]\n    return list(itertools.chain(negative, positive))"
    },
    {
        "id":220,
        "response":"import re\n\ndef replace_blank(str1, char):\n    return re.sub(r'\\s+', char, str1)"
    },
    {
        "id":221,
        "response":"```python\nimport typing\n\ndef max_sum(tri: typing.List[typing.List[int]], n: int) -> int:\n    for i in range(n-2, -1, -1):\n        for j in range(n-i-1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n```"
    },
    {
        "id":222,
        "response":"```python\nimport typing\n\ndef larg_nnum(list1: typing.List[int], n: int) -> typing.List[int]:\n    return sorted(list1, reverse=True)[:n]\n```"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsurface_cylinder(r, h):\n    return 2 * math.pi * r * h"
    },
    {
        "id":224,
        "response":"import math\n\ndef volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":"import typing\n\ndef even_bit_set_number(n: int) -> int:\n    return n | 0xAAAAAAAA"
    },
    {
        "id":226,
        "response":"import math\n\ndef No_of_Triangle(N, K):\n    return (N \/\/ K) * ((N \/\/ K) - 1) \/\/ 2"
    },
    {
        "id":227,
        "response":"```python\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple]) -> Dict:\n    occurences: Dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in occurences:\n                occurences[item] += 1\n            else:\n                occurences[item] = 1\n    return occurences\n```"
    },
    {
        "id":228,
        "response":"import itertools\n\ndef number_of_substrings(str):\n    count = 0\n    for r in range(1, len(str)+1):\n        for substring in itertools.combinations(range(len(str)), r):\n            if str[substring[0]] != \"\":\n                count += 1\n    return count"
    },
    {
        "id":229,
        "response":"```python\nimport numpy as np\n\ndef get_total_number_of_sequences(m, n):\n    dp = np.zeros((n+1, m+1), dtype=int)\n    for i in range(1, m+1):\n        dp[1][i] = i\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            for k in range(j\/\/2, j+1):\n                dp[i][j] += dp[i-1][k]\n    return dp[n][m]\n\nassert get_total_number_of_sequences(3, 1) == 3\nassert get_total_number_of_sequences(3, 2) == 8\nassert get_total_number_of_sequences(2, 2) == 4\nassert get_total_number_of_sequences(1, 1) == 1\nassert get_total_number_of_sequences(5, 3) == 35\n```"
    },
    {
        "id":230,
        "response":"import typing\n\ndef replace_list(list1: typing.List, list2: typing.List) -> typing.List:\n    if len(list1) > 0:\n        list1[-1] = list2\n    return list1"
    },
    {
        "id":231,
        "response":"import typing\n\ndef array_3d(m: int, n: int, o: int) -> typing.List[typing.List[typing.List[str]]]:\n    return [[[ '*' for _ in range(o)] for _ in range(n)] for _ in range(m)]"
    },
    {
        "id":232,
        "response":"import re\n\ndef count_charac(str1):\n    return len(str1)"
    },
    {
        "id":233,
        "response":"from typing import List, Tuple\n\ndef sort_on_occurence(lst: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    freq = {}\n    for tup in lst:\n        if tup[0] in freq:\n            freq[tup[0]] += 1\n        else:\n            freq[tup[0]] = 1\n    return sorted(lst, key=lambda x: freq[x[0]])"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    root = math.sqrt(N)\n    if root == int(root):\n        return (root + 1) ** 2\n    else:\n        return (int(root) + 1) ** 2"
    },
    {
        "id":235,
        "response":"import numpy as np\n\ndef max_sum(arr, n):\n    incl = 0\n    excl = 0\n    new_excl = 0\n\n    for i in range(n):\n        new_excl = excl\n        excl = max(incl, excl)\n        incl = excl + arr[i]\n\n    return max(incl, excl)"
    },
    {
        "id":236,
        "response":"import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"\u098b\u09a3\u09be\u09a4\u09cd\u09ae\u0995 \u09b8\u0982\u0996\u09cd\u09af\u09be\u09b0 \u09ac\u09b0\u09cd\u0997\u09ae\u09c2\u09b2 \u0997\u09a3\u09a8\u09be \u0995\u09b0\u09be \u09af\u09be\u09af\u09bc \u09a8\u09be\u0964\")\n    if number == 0 or number == 1:\n        return number\n    x = number\n    y = (x + 1) \/ 2\n    while abs(y - x) > 0.00001:\n        x = y\n        y = (x + number \/ x) \/ 2\n    return y"
    },
    {
        "id":237,
        "response":"```python\nimport re\n\ndef lps(str):\n    n = len(str)\n    max_length = 1\n    start = 0\n    for i in range(1, n):\n        for j in range(i):\n            flag = 1\n            for k in range(0, (i-j)\/\/2):\n                if (str[j+k] != str[i-k-1]):\n                    flag = 0\n            if (flag != 0 and (i-j) > max_length):\n                start = j\n                max_length = i-j\n    return str[start:start+max_length]\n\nassert lps(\"babad\") == \"bab\"\nassert lps(\"cbbd\") == \"bb\"\nassert lps(\"a\") == \"a\"\nassert lps(\"ac\") == \"a\"\nassert lps(\"racecar\") == \"racecar\"\n```"
    },
    {
        "id":238,
        "response":"import math\n\ndef harmonic_sum(n):\n    if n < 1:\n        return 0.0\n    return sum(1.0\/i for i in range(1, n))"
    },
    {
        "id":239,
        "response":"import typing\n\ndef intersection_array(array_nums1: typing.List[int], array_nums2: typing.List[int]) -> typing.List[int]:\n    return list(set(array_nums1) & set(array_nums2))"
    },
    {
        "id":240,
        "response":"import typing\n\ndef count_X(tup: typing.Tuple, x: typing.Any) -> typing.Tuple:\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"import typing\n\ndef insert_element(lst: typing.List, element: typing.Any) -> typing.List:\n    return [element] + lst"
    },
    {
        "id":242,
        "response":"import cmath\n\ndef convert(numbers):\n    return (numbers.real, numbers.imag)"
    },
    {
        "id":243,
        "response":"import typing\n\ndef count_integer(list1: typing.List) -> int:\n    return sum(1 for x in list1 if isinstance(x, int))"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if word[0].lower() in 'ae']\n    return result"
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    return list(itertools.combinations_with_replacement(l, n))"
    },
    {
        "id":246,
        "response":"import math\n\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]  \n    for current_prime in range(2, int(math.sqrt(n)) + 1):\n        if sieve[current_prime]:\n            for multiple in range(current_prime*2, n, current_prime):\n                sieve[multiple] = False\n    return sum(sieve)"
    },
    {
        "id":247,
        "response":"import math\nimport operator\n\ndef swap_numbers(a, b):\n    return b"
    },
    {
        "id":248,
        "response":"import math\nfrom typing import List\n\ndef count_odd(array_nums: List[int]) -> List[int]:\n    return sum(1 for num in array_nums if num % 2 != 0)"
    },
    {
        "id":249,
        "response":"import itertools\n\ndef maximize_elements(test_tup1, test_tup2):\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":250,
        "response":"import math\n\ndef newman_prime(n):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if n > len(primes):\n        raise ValueError(\"n is larger than the number of known Newman-Shanks-Williams primes\")\n    return primes[n-1]"
    },
    {
        "id":251,
        "response":"import math\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple(x \/ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "id":252,
        "response":"import typing\n\ndef split_two_parts(list1: typing.List, L: int) -> typing.Tuple[typing.List, typing.List]:\n    return list1[:L], list1[L:]"
    },
    {
        "id":253,
        "response":"import typing\n\ndef merge_dict(d1: typing.Dict, d2: typing.Dict) -> typing.Dict:\n    d1.update(d2)\n    return d1"
    },
    {
        "id":254,
        "response":"import math\n\ndef dog_age(h_age):\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4"
    },
    {
        "id":255,
        "response":"import typing\n\ndef list_split(S: typing.List[int], step: int) -> typing.List[typing.List[int]]:\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "id":256,
        "response":"import math\n\ndef lateralsurface_cube(l):\n    return 6 * l * l"
    },
    {
        "id":257,
        "response":"import math\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, n+1) if i % 2 != 0)"
    },
    {
        "id":258,
        "response":"import math\n\ndef find_star_num(n):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return math.comb(n + 1, 2)"
    },
    {
        "id":259,
        "response":"import typing\n\ndef ascii_value(k: typing.Union[str, int]) -> int:\n    if isinstance(k, int):\n        return k\n    else:\n        return ord(k)"
    },
    {
        "id":260,
        "response":"import typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    return sum([arr[i] for i in range(n) if i % 2 == 0 and arr[i] % 2 == 0])"
    },
    {
        "id":261,
        "response":"import math\n\ndef even_Power_Sum(n):\n    return sum(i**5 for i in range(2, n+1, 2))"
    },
    {
        "id":262,
        "response":"import typing\n\ndef rear_extract(test_list: typing.List[typing.Tuple]) -> typing.List:\n    return [sub[-1] for sub in test_list]"
    },
    {
        "id":263,
        "response":"import itertools\n\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(0, n + 1):\n        if k % 2 == 0:\n            coeff = math.comb(n, k)\n            sum += coeff\n    return sum\n\nassert even_binomial_Coeff_Sum(2) == 3\nassert even_binomial_Coeff_Sum(3) == 6\nassert even_binomial_Coeff_Sum(4) == 15\nassert even_binomial_Coeff_Sum(5) == 30\nassert even_binomial_Coeff_Sum(0) == 1"
    },
    {
        "id":265,
        "response":"import typing\n\ndef get_Position(a: typing.List[int], n: int, m: int) -> int:\n    for i in range(n - 1, -1, -1):\n        if a[i] == m:\n            return i\n    return -1"
    },
    {
        "id":266,
        "response":"import math\nimport typing\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r**2 * h"
    },
    {
        "id":267,
        "response":"import typing\n\ndef dict_filter(dict: typing.Dict[str, int], n: int) -> typing.Dict[str, int]:\n    return {key: value for key, value in dict.items() if value > n}"
    },
    {
        "id":268,
        "response":"import typing\n\ndef count_first_elements(test_tup: typing.Tuple) -> typing.Tuple:\n    return test_tup.count(test_tup[0])"
    },
    {
        "id":269,
        "response":"import math\n\ndef is_num_decagonal(n):\n    x = (n * 8 + 1) ** 0.5\n    return (x % 1 == 0) and (x + 1) % 4 == 0"
    },
    {
        "id":270,
        "response":"import typing\n\ndef sequential_search(dlist: typing.List[int], item: int) -> bool:\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found\n\nassert sequential_search([1, 2, 3, 4, 5], 3) == True\nassert sequential_search([1, 2, 3, 4, 5], 6) == False\nassert sequential_search([], 3) == False\nassert sequential_search([1, 2, 3, 4, 5], 1) == True\nassert sequential_search([1, 2, 3, 4, 5], 5) == True"
    },
    {
        "id":271,
        "response":"import typing\n\ndef all_unique(test_list: typing.List[int]) -> bool:\n    return len(test_list) == len(set(test_list))"
    },
    {
        "id":272,
        "response":"import typing\n\ndef sub_list(nums1: typing.List[int], nums2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x, y: x - y, nums1, nums2))"
    },
    {
        "id":273,
        "response":"import re\n\ndef validate(n):\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit, count in freq.items():\n        if int(digit) < count:\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"import typing\n\ndef check_element(list: typing.List[str], element: str) -> typing.List[str]:\n    return all(i == element for i in list)"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "id":276,
        "response":"```python\nimport typing\n\ndef max_sub_array_sum_repeated(a: typing.List[int], n: int, k: int) -> int:\n    max_sum = float('-inf')\n    total_sum = sum(a)\n    max_ending_here = 0\n    max_ending_here_start = 0\n    max_ending_here_end = 0\n    current_sum = 0\n    current_sum_start = 0\n\n    for i in range(n * k):\n        current_sum += a[i % n]\n        if current_sum > max_ending_here:\n            max_ending_here = current_sum\n            max_ending_here_end = i\n            max_ending_here_start = current_sum_start\n        if current_sum < 0:\n            current_sum = 0\n            current_sum_start = i + 1\n\n        if i >= n:\n            max_sum = max(max_sum, max_ending_here + total_sum - (total_sum - (current_sum - a[(i + 1 - n) % n])))\n\n    if max_sum == float('-inf'):\n        return max(max_ending_here, total_sum)\n    else:\n        return max_sum\n```"
    },
    {
        "id":277,
        "response":"import math\n\ndef square_Sum(n):\n    if n <= 0:\n        return 0\n    else:\n        return sum(i**2 for i in range(1, n+1))"
    },
    {
        "id":278,
        "response":"```python\nimport typing\n\ndef modular_inverse(arr: typing.List[int], N: int, P: int) -> typing.List[int]:\n    def extended_gcd(a: int, b: int) -> typing.Tuple[int, int, int]:\n        if a == 0:\n            return b, 0, 1\n        gcd, x, y = extended_gcd(b % a, a)\n        return gcd, y - (b \/\/ a) * x, x\n\n    def modinv(a: int, m: int) -> int:\n        gcd, x, y = extended_gcd(a, m)\n        if gcd != 1:\n            return None\n        return x % m\n\n    result = []\n    for num in arr:\n        inverse = modinv(num, P)\n        if inverse == num:\n            result.append(num)\n    return result\n```"
    },
    {
        "id":279,
        "response":"import math\n\ndef odd_Days(N):\n    return N \/\/ 2 + (N % 2)"
    },
    {
        "id":280,
        "response":"import typing\n\ndef max_length(lists: typing.List[typing.List]) -> typing.List:\n    return max(lists, key=len)"
    },
    {
        "id":281,
        "response":"```python\nimport math\n\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    a, b, total = k, k * k, 0\n    for _ in range(2, n):\n        total = b * (k - 1) + a * (k - 1)\n        a, b = b, total\n    return total\n\nassert count_no_of_ways(1, 2) == 2\nassert count_no_of_ways(2, 2) == 4\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 3) == 66\nassert count_no_of_ways(5, 3) == 258\n```"
    },
    {
        "id":282,
        "response":"import math\n\ndef find(n, m):\n    if m == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    return n \/ m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    if w < 0 or h < 0:\n        return \"\u09ad\u09c1\u09b2 \u0987\u09a8\u09aa\u09c1\u099f\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "id":284,
        "response":"import itertools\n\ndef max_val(listval):\n    return max(listval)"
    },
    {
        "id":285,
        "response":"import math\n\ndef sum_div(number):\n    if number < 1:\n        return 0\n    return sum(i for i in range(1, int(math.sqrt(number)) + 1) if number % i == 0) * 2 - number"
    },
    {
        "id":286,
        "response":"import itertools\n\ndef get_Inv_Count(arr,n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "id":287,
        "response":"import typing\n\ndef flatten_list(list1: typing.List[typing.Union[int, typing.List]]) -> typing.List[int]:\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\nassert flatten_list([1, 2, [3, 4], [5, [6, 7]]]) == [1, 2, 3, 4, 5, 6, 7]\nassert flatten_list([1, [2, [3, [4]]]]) == [1, 2, 3, 4]\nassert flatten_list([]) == []\nassert flatten_list([1, 2, 3]) == [1, 2, 3]\nassert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4]"
    },
    {
        "id":288,
        "response":"import typing\nfrom typing import List, Any\n\ndef flatten(lst: List[Any]) -> List[Any]:\n    result = []\n    for element in lst:\n        if isinstance(element, list):\n            result.extend(flatten(element))\n        else:\n            result.append(element)\n    return result\n\ndef intersection_nested_lists(l1: List[Any], l2: List[Any]) -> List[Any]:\n    flat_list1 = flatten(l1)\n    flat_list2 = flatten(l2)\n    return [element for element in flat_list1 if element in flat_list2]"
    },
    {
        "id":289,
        "response":"import itertools\n\ndef max_aggregate(stdata):\n    return max(sum(sublist) for sublist in stdata)"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    return 6 * (2 ** (n - 3)) if n >= 3 else 1 if n == 1 else 2 if n == 2 else 0"
    },
    {
        "id":291,
        "response":"import itertools\n\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    elif not d:\n        return 1\n    else:\n        return 1 + max(dict_depth(v) for v in d.values() if isinstance(v, dict))"
    },
    {
        "id":292,
        "response":"import typing\n\ndef set_Bit_Number(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "id":293,
        "response":"```python\nfrom typing import List\n\ndef solve(a: List[int], n: int) -> bool:\n    return a.count(0) == n - a.count(1)\n```"
    },
    {
        "id":294,
        "response":"import typing\n\ndef find_Element(arr: typing.List[int], ranges: typing.List[tuple], rotations: int, index: int) -> int:\n    n = len(arr)\n    for _ in range(rotations % n):\n        last_element = arr[n - 1]\n        for i in range(n - 1, 0, -1):\n            arr[i] = arr[i - 1]\n        arr[0] = last_element\n    return arr[index]"
    },
    {
        "id":295,
        "response":"import re\n\ndef start_withp(words):\n    return [word for word in words if re.match('\u09aa.*', word)]"
    },
    {
        "id":296,
        "response":"```python\nimport typing\n\ndef max_sum_increasing_subseq(a: typing.List[int], n: int, index: int, k: int) -> int:\n    max_sum = [0]*n\n    max_sum[0] = a[0]\n    \n    for i in range(1, n):\n        max_sum[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and max_sum[i] < max_sum[j] + a[i]:\n                max_sum[i] = max_sum[j] + a[i]\n    \n    return max_sum[index]\n\n# Test cases\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100], 5, 1, 3) == 106\nassert max_sum_increasing_subseq([3, 4, 5, 10], 4, 2, 3) == 9\nassert max_sum_increasing_subseq([10, 5, 4, 3], 4, 0, 1) == 10\nassert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 4) == 9\nassert max_sum_increasing_subseq([5, 4, 3, 2, 1], 5, 0, 1) == 5\n```"
    },
    {
        "id":297,
        "response":"import typing\n\ndef colon_tuplex(tuplex: typing.Tuple, m: int, n: int) -> typing.Tuple:\n    return tuplex[m:n]"
    },
    {
        "id":298,
        "response":"import heapq\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    product = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product.append(num1 * num2)\n    return heapq.nlargest(N, product)"
    },
    {
        "id":299,
        "response":"import typing\n\ndef maximum(a: typing.Union[int, float], b: typing.Union[int, float]) -> typing.Union[int, float]:\n    return max(a, b)"
    },
    {
        "id":300,
        "response":"import re\n\ndef string_to_tuple(str1):\n    return tuple(re.split(\"(\\d)\", str1))"
    },
    {
        "id":301,
        "response":"import typing\n\ndef set_left_most_unset_bit(n: int) -> int:\n    return n | (n + 1)"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    if r < 0 or h < 0:\n        return 0\n    return (1.0\/3) * math.pi * r * r * h"
    },
    {
        "id":303,
        "response":"import re\nfrom typing import List\n\ndef pos_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num > 0]"
    },
    {
        "id":304,
        "response":"```python\ndef max_sum_rectangular_grid(grid, n):\n    from itertools import product\n    from typing import List\n\n    max_sum = 0\n\n    for i, j in product(range(n), range(n)):\n        current_sum = 0\n        for x, y in product(range(n), range(n)):\n            if abs(x-i) + abs(y-j) == 1:\n                continue\n            current_sum += grid[x][y]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n```"
    },
    {
        "id":305,
        "response":"import re\n\ndef find_Max_Len_Even(str):\n    words = re.findall(r'\\b\\w+\\b', str)\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "id":306,
        "response":"import typing\n\ndef find_last_occurrence(A: typing.List[int], x: int) -> typing.List[int]:\n    for i in range(len(A) - 1, -1, -1):\n        if A[i] == x:\n            return A[:i+1] + A[i+1:]\n    return A"
    },
    {
        "id":307,
        "response":"```python\nimport typing\n\ndef modified_encode(alist: typing.List[int]) -> typing.List[tuple[int, int]]:\n    result: list[tuple[int, int]] = []\n    count: int = 1\n    for i in range(1, len(alist)):\n        if alist[i] == alist[i-1]:\n            count += 1\n        else:\n            result.append((alist[i-1], count))\n            count = 1\n    result.append((alist[-1], count))\n    return result\n\nassert modified_encode([1, 1, 1, 2, 3, 3, 3, 3, 4, 4]) == [(1, 3), (2, 1), (3, 4), (4, 2)]\nassert modified_encode([1, 2, 3, 4, 5]) == [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\nassert modified_encode([1, 1, 1, 1, 1]) == [(1, 5)]\nassert modified_encode([1]) == [(1, 1)]\nassert modified_encode([]) == []\n```"
    },
    {
        "id":308,
        "response":"import math\n\ndef max_volume(s):\n    return (abs(s)\/3)**3"
    },
    {
        "id":309,
        "response":"import re\nfrom typing import List\n\ndef find_long_word(text: str) -> List[str]:\n    pattern = r'\\b\\w{5,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "id":310,
        "response":"import math\n\ndef sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1))**2\n    return square_of_sum - sum_of_squares"
    },
    {
        "id":311,
        "response":"import re\ndef find_demlo(s):\n    return str(s)[::-1]"
    },
    {
        "id":312,
        "response":"import typing\n\ndef position_min(list1: typing.List[int]) -> typing.List[int]:\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]"
    },
    {
        "id":313,
        "response":"```python\nimport typing\n\ndef right_rotate(arr: typing.List[int], n: int, out_of_place: int, cur: int) -> typing.List[int]:\n    if out_of_place == n or cur == n:\n        return arr\n\n    if arr[cur] < 0:\n        arr[cur], arr[out_of_place] = arr[out_of_place], arr[cur]\n        return right_rotate(arr, n, out_of_place + 1, cur + 1)\n    else:\n        return right_rotate(arr, n, out_of_place, cur + 1)\n```"
    },
    {
        "id":314,
        "response":"import typing\n\ndef sum_of_alternates(test_tuple: typing.Tuple[int]) -> int:\n    return sum(test_tuple[::2])"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]"
    },
    {
        "id":316,
        "response":"import collections\n\ndef most_occurrences(test_list):\n    word_count = collections.Counter(test_list)\n    return word_count.most_common(1)[0][0]"
    },
    {
        "id":317,
        "response":"import math\n\ndef check_isosceles(x, y, z):\n    sides = sorted([x, y, z])\n    if sides[0] == sides[1] or sides[1] == sides[2]:\n        return True\n    else:\n        return False"
    },
    {
        "id":318,
        "response":"```python\nimport typing\n\ndef rotate_left(list1: typing.List[int], m: int, n: int) -> typing.List[int]:\n    return list1[n:] + list1[:n]\n```"
    },
    {
        "id":319,
        "response":"```python\nimport typing\n\ndef neg_count(list: typing.List[int]) -> typing.List[int]:\n    return [num for num in list if num < 0]\n```"
    },
    {
        "id":320,
        "response":"```python\nimport re\n\ndef find_char(text):\n    three_chars = re.findall(r'\\b\\w{3}\\b', text)\n    four_chars = re.findall(r'\\b\\w{4}\\b', text)\n    five_chars = re.findall(r'\\b\\w{5}\\b', text)\n    return three_chars, four_chars, five_chars\n```"
    },
    {
        "id":321,
        "response":"import typing\n\ndef count_unset_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1 ^ 1\n        n >>= 1\n    return count"
    },
    {
        "id":322,
        "response":"import collections\n\ndef char_frequency(str1):\n    frequency = collections.Counter(str1)\n    return dict(frequency)"
    },
    {
        "id":323,
        "response":"import typing\nimport itertools\n\ndef Sort(sub_li: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    return sorted(sub_li, key=lambda x: x[1])"
    },
    {
        "id":324,
        "response":"import math\n\ndef check_Validity(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\nassert check_Validity(3, 4, 5) == True, \"\u09ac\u09c8\u09a7 \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be \u09ac\u09cd\u09af\u09b0\u09cd\u09a5\"\nassert check_Validity(1, 2, 3) == False, \"\u0985\u09ac\u09c8\u09a7 \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be \u09ac\u09cd\u09af\u09b0\u09cd\u09a5\"\nassert check_Validity(5, 5, 5) == True, \"\u09b8\u09ae\u09ac\u09be\u09b9\u09c1 \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be \u09ac\u09cd\u09af\u09b0\u09cd\u09a5\"\nassert check_Validity(0, 1, 1) == False, \"\u09b6\u09c2\u09a8\u09cd\u09af \u09a6\u09bf\u0995 \u09b8\u09b9 \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be \u09ac\u09cd\u09af\u09b0\u09cd\u09a5\"\nassert check_Validity(-1, 1, 1) == False, \"\u09a8\u09c7\u09a4\u09bf\u09ac\u09be\u099a\u0995 \u09a6\u09bf\u0995 \u09b8\u09b9 \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be \u09ac\u09cd\u09af\u09b0\u09cd\u09a5\""
    },
    {
        "id":325,
        "response":"import math\n\ndef ap_sum(a, n, d):\n    return (n\/2) * (2*a + (n-1)*d)"
    },
    {
        "id":326,
        "response":"import typing\n\ndef check_monthnum(monthname1: str) -> str:\n    month_with_28_days = [\"\u099c\u09be\u09a8\u09c1\u09af\u09bc\u09be\u09b0\u09bf\", \"\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09af\u09bc\u09be\u09b0\u09bf\", \"\u09ae\u09be\u09b0\u09cd\u099a\", \"\u098f\u09aa\u09cd\u09b0\u09bf\u09b2\", \"\u09ae\u09c7\", \"\u099c\u09c1\u09a8\", \"\u099c\u09c1\u09b2\u09be\u0987\", \"\u0986\u0997\u09b8\u09cd\u099f\", \"\u09b8\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0\", \"\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0\", \"\u09a8\u09ad\u09c7\u09ae\u09cd\u09ac\u09b0\", \"\u09a1\u09bf\u09b8\u09c7\u09ae\u09cd\u09ac\u09b0\"]\n    return monthname1"
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text, word):\n    pattern = r'\\b' + re.escape(word) + r'[\\.,!?;:]?$'\n    return bool(re.search(pattern, text))"
    },
    {
        "id":328,
        "response":"import re\n\ndef check_Equality(s):\n    count = 0\n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            substring = s[i:i + length]\n            if substring[0] == substring[-1]:\n                count += 1\n    return count"
    },
    {
        "id":329,
        "response":"import math\n\ndef find_Divisor(x,y):\n    if x == 0:\n        return y\n    return x"
    },
    {
        "id":330,
        "response":"import typing\n\ndef sum_three_smallest_nums(lst: typing.List[int]) -> int:\n    return sum(sorted(lst)[:3])"
    },
    {
        "id":331,
        "response":"import typing\n\ndef set_to_tuple(s: typing.Set) -> tuple:\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"```python\nimport heapq\n\ndef smallest_range(nums):\n    if not nums:\n        return []\n    \n    min_heap = [(row[0], i, 0) for i, row in enumerate(nums)]\n    heapq.heapify(min_heap)\n    \n    max_val = max(row[0] for row in nums)\n    res = [-1e9, -1e9]\n    \n    while min_heap:\n        val, row_idx, elem_idx = heapq.heappop(min_heap)\n        if val > res[1]:\n            res = [val, val]\n        \n        if elem_idx + 1 == len(nums[row_idx]):\n            return res\n        \n        next_val = nums[row_idx][elem_idx + 1]\n        heapq.heappush(min_heap, (next_val, row_idx, elem_idx + 1))\n        \n        if max_val < res[1]:\n            max_val = res[1]\n    \n    return res\n\n# \u099f\u09c7\u09b8\u09cd\u099f \u0995\u09c7\u09b8\nassert smallest_range([[4,10,15,24,26], [0,9,12,20]]) == [20, 24]\nassert smallest_range([[1,2,3], [1,2,3], [1,2,3]]) == [1, 1]\nassert smallest_range([[1,3,5,7], [2,4,6,8], [0,9,10,11]]) == [0, 11]\nassert smallest_range([[1], [2], [3], [4], [5]]) == [1, 5]\nassert smallest_range([]) == []\n```"
    },
    {
        "id":333,
        "response":"import re\nfrom typing import Dict\n\ndef dig_let(s: str) -> Dict[str, int]:\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return {\"digits\": digits, \"letters\": letters}"
    },
    {
        "id":334,
        "response":"```python\nimport math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m+1):\n        sqrt = math.isqrt(i)\n        if sqrt % 2 != 0 and sqrt * sqrt == i:\n            count += 1\n    return count\n\nassert count_Odd_Squares(1, 10) == 3\nassert count_Odd_Squares(10, 100) == 6\nassert count_Odd_Squares(1, 1) == 1\nassert count_Odd_Squares(2, 2) == 0\nassert count_Odd_Squares(25, 36) == 2\n```"
    },
    {
        "id":335,
        "response":"import typing\n\ndef diff_consecutivenums(nums: typing.List[int]) -> typing.List[int]:\n    return [nums[i] - nums[i-1] for i in range(1, len(nums))]"
    },
    {
        "id":336,
        "response":"import math\n\ndef zigzag(n, k):\n    if k == 1:\n        return n\n    elif k == 2:\n        return n + 1 if n % 2 == 0 else n - 1\n    else:\n        return zigzag(n + (1 - 2 * (n % 2)), k-1)"
    },
    {
        "id":337,
        "response":"import math\n\ndef count_Squares(m, n):\n    if m == 0 or n == 0:\n        return 0\n    return min(m, n)"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n, r):\n    if r > n - r: \n        r = n - r \n    res = math.comb(n, r)\n    return res"
    },
    {
        "id":339,
        "response":"import re\n\ndef check(string) :\n    return set(string) <= {'0', '1'}"
    },
    {
        "id":340,
        "response":"import re\n\ndef minimum_Length(s):\n    if len(s) <= 1:\n        return s\n    if s[0] == s[-1]:\n        return s[1:]\n    return s\n\nassert minimum_Length(\"aa\") == \"a\"\nassert minimum_Length(\"aba\") == \"b\"\nassert minimum_Length(\"abc\") == \"abc\"\nassert minimum_Length(\"a\") == \"a\"\nassert minimum_Length(\"\") == \"\""
    },
    {
        "id":341,
        "response":"import collections\n\ndef first_Element(arr, n, k):\n    count_dict = collections.Counter(arr)\n    for item in arr:\n        if count_dict[item] == k:\n            return item\n    return -1"
    },
    {
        "id":342,
        "response":"import set\n\ndef unique_Characters(str):\n    return len(str) == len(set(str))"
    },
    {
        "id":343,
        "response":"import typing\nimport itertools\n\ndef remove_column(list1: typing.List[typing.List[int]], n: int) -> typing.List[typing.List[int]]:\n    return [row[:n] + row[n+1:] for row in list1]"
    },
    {
        "id":344,
        "response":"import math\n\ndef tn_ap(a, n, d):\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"import math\n\ndef count_Rectangles(radius):\n    return (radius * 2 + 1) ** 2"
    },
    {
        "id":346,
        "response":"import math\n\ndef find_angle(a, b):\n    return 180 - a - b"
    },
    {
        "id":347,
        "response":"import typing\n\ndef find_max(test_list: typing.List[typing.Tuple[int]]) -> typing.Optional[typing.Tuple[int]]:\n    if not test_list:\n        return None\n    return max(test_list, key=max)"
    },
    {
        "id":348,
        "response":"import math\nfrom typing import Union\n\ndef moddiv_list(nums1: list[Union[int, float]], nums2: list[Union[int, float]]) -> list[Union[int, float, str]]:\n    return list(map(lambda x, y: x % y if y != 0 else 'inf' if x != 0 else 0, nums1, nums2))"
    },
    {
        "id":349,
        "response":"```python\nimport math\n\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return False\n    elif D == 0:\n        return False\n    else:\n        root1 = (-b + math.sqrt(D)) \/ (2*a)\n        root2 = (-b - math.sqrt(D)) \/ (2*a)\n        return root1 == 2 * root2 or root2 == 2 * root1\n```"
    },
    {
        "id":350,
        "response":"import functools\n\ndef get_carol(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_carol(n-1) + get_carol(n-2)"
    },
    {
        "id":351,
        "response":"import typing\n\ndef remove_empty(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [i for i in list1 if i != []]"
    },
    {
        "id":352,
        "response":"import typing\n\ndef max_occurrences(nums: typing.List[int]) -> int:\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    if not count_dict:\n        return None\n    max_count = max(count_dict.values())\n    for num, count in count_dict.items():\n        if count == max_count:\n            return num"
    },
    {
        "id":353,
        "response":"from typing import List, Tuple\n\ndef add_K_element(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    return [(i[0] + K, i[1] + K, i[2] + K) for i in test_list]"
    },
    {
        "id":354,
        "response":"```python\nimport re\n\ndef make_flip(ch):\n    flips = 0\n    prev = '0'\n    for bit in ch:\n        if bit != prev:\n            flips += 1\n        prev = bit\n    return flips\n\nassert make_flip('000000') == 0\nassert make_flip('111111') == 0\nassert make_flip('101010') == 5\nassert make_flip('11001100') == 3\nassert make_flip('10010010') == 3\n```"
    },
    {
        "id":355,
        "response":"import typing\n\ndef count_Digit(n: typing.Union[int, float]) -> int:\n    return len(str(abs(n)))"
    },
    {
        "id":356,
        "response":"import itertools\n\ndef adjacent_num_product(list_nums):\n    if len(list_nums) < 2:\n        return 0\n    return max(a * b for a, b in itertools.pairwise(list_nums))"
    },
    {
        "id":357,
        "response":"```python\nimport math\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef is_balanced(root):\n    def check(node):\n        if node is None:\n            return 0\n        left = check(node.left)\n        right = check(node.right)\n        if left == -1 or right == -1 or math.fabs(left - right) > 1:\n            return -1\n        return 1 + max(left, right)\n    return check(root) != -1\n```"
    },
    {
        "id":358,
        "response":"import itertools\n\ndef repeat_tuples(test_tup, N):\n    return tuple(itertools.chain.from_iterable([test_tup] * N))"
    },
    {
        "id":359,
        "response":"import math\n\ndef lateralsurface_cuboid(l, w, h):\n    if h == 0 or l == 0 or w == 0:\n        return 0\n    return 2 * (l * h + w * h)"
    },
    {
        "id":360,
        "response":"import typing\nimport itertools\n\ndef float_sort(price: typing.List[typing.Tuple[str, float]]) -> typing.List[typing.Tuple[str, float]]:\n    return sorted(price, key=lambda x: x[1])"
    },
    {
        "id":361,
        "response":"import typing\n\ndef smallest_missing(A: typing.List[int]) -> int:\n    A = sorted(set(A))\n    smallest = 1\n    for num in A:\n        if num == smallest:\n            smallest += 1\n    return smallest"
    },
    {
        "id":362,
        "response":"import typing\n\ndef heap_assending(nums: typing.List[int]) -> typing.List[int]:\n    def heapify(nums, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and nums[i] < nums[left]:\n            largest = left\n        if right < n and nums[largest] < nums[right]:\n            largest = right\n        if largest != i:\n            nums[i], nums[largest] = nums[largest], nums[i]\n            heapify(nums, n, largest)\n\n    n = len(nums)\n    for i in range(n \/\/ 2 - 1, -1, -1):\n        heapify(nums, n, i)\n    for i in range(n - 1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n    return nums\n\nassert heap_assending([12, 11, 13, 5, 6, 7]) == [5, 6, 7, 11, 12, 13]\nassert heap_assending([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert heap_assending([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert heap_assending([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert heap_assending([]) == []"
    },
    {
        "id":363,
        "response":"import math\n\ndef volume_cuboid(l, w, h):\n    return l * w * h"
    },
    {
        "id":364,
        "response":"import itertools\nfrom typing import List, Set\n\ndef permute_string(str: str) -> List[str]:\n    perms = set(itertools.permutations(str))\n    return [''.join(p) for p in perms]"
    },
    {
        "id":365,
        "response":"import math\n\ndef round_num(n, m):\n    return math.ceil(n \/ m) * m"
    },
    {
        "id":366,
        "response":"```python\nfrom typing import Tuple, Optional\n\ndef remove_replica(test_tup: Tuple, custom_value: Optional[str] = None) -> Tuple:\n    test_list = list(test_tup)\n    unique_list = []\n    for item in test_list:\n        if test_list.count(item) > 1 and item not in unique_list:\n            unique_list.append(custom_value)\n        else:\n            unique_list.append(item)\n    return tuple(unique_list)\n```"
    },
    {
        "id":367,
        "response":"import re\n\ndef remove_Char(s, c):\n    return re.sub(c, '', s)"
    },
    {
        "id":368,
        "response":"import typing\nfrom typing import List\n\ndef move_first(test_list: List) -> List:\n    if len(test_list) > 0:\n        test_list.insert(0, test_list.pop())\n    return test_list"
    },
    {
        "id":369,
        "response":"import math\n\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)"
    },
    {
        "id":370,
        "response":"import typing\n\ndef multi_list(rownum: int, colnum: int) -> int:\n    return rownum"
    },
    {
        "id":371,
        "response":"import typing\n\ndef index_on_inner_list(list_data: typing.List[typing.List[int]], index_no: int) -> typing.List[int]:\n    return [inner_list[index_no] for inner_list in list_data if index_no < len(inner_list)]"
    },
    {
        "id":372,
        "response":"import typing\n\ndef find_rotation_count(A: typing.List[int]) -> typing.List[int]:\n    n = len(A)\n    for i in range(n):\n        if A[i] > A[(i+1)%n]:\n            return [i+1]\n    return [0]"
    },
    {
        "id":373,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    return n ^ 0xAAAAAAAA"
    },
    {
        "id":374,
        "response":"import collections\n\ndef frequency_Of_Smallest(n, arr):\n    count_dict = collections.Counter(arr)\n    min_val = min(arr)\n    return count_dict[min_val]"
    },
    {
        "id":375,
        "response":"import math\n\ndef get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 3, 0, 2\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b\n        return c"
    },
    {
        "id":376,
        "response":"import re\n\ndef swap_count(s):\n    stack = []\n    count = 0\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                count += 1\n                stack.append('[')\n    return count + len(stack)"
    },
    {
        "id":377,
        "response":"import math\n\ndef even_or_odd(N):\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "id":378,
        "response":"import math\n\ndef highest_Power_of_2(n):\n    return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":379,
        "response":"import math\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\nassert find_lucas(0) == 2\nassert find_lucas(1) == 1\nassert find_lucas(2) == 3\nassert find_lucas(5) == 18\nassert find_lucas(10) == 123"
    },
    {
        "id":380,
        "response":"import typing\nimport itertools\n\ndef add_string(lst: typing.List[str], string: str) -> typing.List[str]:\n    return [string + item for item in lst]"
    },
    {
        "id":381,
        "response":"import typing\n\ndef convert_list_dictionary(l1: typing.List[str], l2: typing.List[int], l3: typing.List[str]) -> typing.Dict[str, typing.Dict[int, str]]:\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}"
    },
    {
        "id":382,
        "response":"```python\nimport math\n\ndef get_max_sum(n, memo = {}):\n    if n in memo:\n        return memo[n]\n    if n < 6:\n        return n\n    memo[n] = max(n, get_max_sum(n\/\/2, memo) + get_max_sum(n\/\/3, memo) + get_max_sum(n\/\/4, memo) + get_max_sum(n\/\/5, memo))\n    return memo[n]\n\nassert get_max_sum(1) == 1\nassert get_max_sum(2) == 2\nassert get_max_sum(3) == 3\nassert get_max_sum(4) == 4\nassert get_max_sum(10) == 13\n```"
    },
    {
        "id":383,
        "response":"import typing\nimport itertools\n\ndef max_length_list(input_list: typing.List[typing.List]) -> typing.List:\n    return max(input_list, key=len)"
    },
    {
        "id":384,
        "response":"import typing\n\ndef check_distinct(test_tup: typing.Tuple) -> typing.Tuple:\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"import collections\n\ndef first_non_repeating_character(str1):\n    char_count = collections.Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "id":386,
        "response":"import re\n\ndef check_char(string):\n    if len(string) > 0:\n        return string[0] == string[-1]\n    else:\n        return False"
    },
    {
        "id":387,
        "response":"import typing\n\ndef median_numbers(a: typing.Union[int, float], b: typing.Union[int, float], c: typing.Union[int, float]) -> typing.Union[int, float]:\n    return sorted([a, b, c])[1]"
    },
    {
        "id":388,
        "response":"import typing\n\ndef sum_of_digits(nums: typing.List[int]) -> typing.List[int]:\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "id":389,
        "response":"import itertools\n\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"from typing import Dict, Tuple, List\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    freq_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in freq_dict:\n            freq_dict[sorted_tup] += 1\n        else:\n            freq_dict[sorted_tup] = 1\n    return freq_dict"
    },
    {
        "id":391,
        "response":"import itertools\n\ndef add_nested_tuples(test_tup1, test_tup2):\n    return tuple(x + y for x, y in itertools.zip_longest(test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"import math\n\ndef ncr_modp(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p"
    },
    {
        "id":393,
        "response":"```python\nimport re\nimport urllib.parse\n\ndef is_valid_URL(str):\n    try:\n        result = urllib.parse.urlparse(str)\n        return all([result.scheme, result.netloc])\n    except ValueError:\n        return False\n\nassert is_valid_URL(\"http:\/\/www.google.com\")\nassert is_valid_URL(\"https:\/\/www.google.com\")\nassert is_valid_URL(\"ftp:\/\/www.google.com\")\nassert is_valid_URL(\"http:\/\/localhost:8080\")\nassert not is_valid_URL(\"http:\/\/www.google\")\n```"
    },
    {
        "id":394,
        "response":"import math\nimport operator\n\ndef minimum(a, b):\n    return min(a, b)"
    },
    {
        "id":395,
        "response":"import typing\n\ndef check_tuplex(tuplex: typing.Any, tuple1: tuple) -> bool:\n    return tuplex in tuple1"
    },
    {
        "id":396,
        "response":"import math\n\ndef find_Parity(x):\n    if x < 0:\n        return -1 * (x % 2)\n    else:\n        return x % 2"
    },
    {
        "id":397,
        "response":"import itertools\n\ndef rearrange_bigger(n):\n    n_str = str(n)\n    n_list = list(n_str)\n    return max(int(''.join(p)) for p in itertools.permutations(n_list))"
    },
    {
        "id":398,
        "response":"import itertools\n\ndef k_smallest_pairs(nums1, nums2, k):\n    return sorted(list(itertools.product(nums1, nums2)))[:k]"
    },
    {
        "id":399,
        "response":"import itertools\n\ndef min_product_tuple(list1):\n    min_product = float('inf')\n    result = None\n    for tuple1, tuple2 in itertools.combinations(list1, 2):\n        product = tuple1[0] * tuple1[1] * tuple2[0] * tuple2[1]\n        if product < min_product:\n            min_product = product\n            result = (tuple1, tuple2)\n    return result"
    },
    {
        "id":400,
        "response":"import typing\nimport re\n\ndef min_val(listval: typing.List[int]) -> typing.Union[int, typing.Type[ValueError]]:\n    if not listval:\n        raise ValueError\n    return min(listval)"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"
    },
    {
        "id":402,
        "response":"import typing\n\ndef remove_odd(l: typing.List[int]) -> typing.List[int]:\n    return [i for i in l if i % 2 == 0]"
    },
    {
        "id":403,
        "response":"import typing\n\ndef extract_nth_element(list1: typing.List[typing.Tuple], n: int) -> typing.Union[typing.Tuple, typing.Type[IndexError]]:\n    if not list1:\n        raise IndexError\n    return list1[n-1]"
    },
    {
        "id":404,
        "response":"import typing\n\ndef overlapping(list1: typing.List[int], list2: typing.List[int]) -> typing.List[int]:\n    set1 = set(list1)\n    set2 = set(list2)\n    return [value for value in list1 if value in set2]"
    },
    {
        "id":405,
        "response":"import itertools\n\ndef max_Product(arr):\n    max_pair = (max(arr), max([x for x in arr if x != max(arr)]))\n    return max_pair"
    },
    {
        "id":406,
        "response":"import typing\n\ndef breakSum(n: int) -> int:\n    if n % 3 == 0:\n        return (n \/\/ 3) * 4\n    elif n % 3 == 1:\n        return (n \/\/ 3) * 4 + 1\n    else:\n        return (n \/\/ 3) * 4 + 2"
    },
    {
        "id":407,
        "response":"```python\nimport itertools\n\ndef group_tuples(Input):\n    if not Input:\n        return None\n    first_elements = [t[0] for t in Input]\n    common_first_element = set(first_elements).pop()\n    return common_first_element\n\nassert group_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)]) == 1\nassert group_tuples([(2, 3, 4), (2, 5, 6), (2, 7, 8)]) == 2\nassert group_tuples([(5, 6, 7), (5, 8, 9), (5, 10, 11)]) == 5\nassert group_tuples([(10, 20, 30), (10, 40, 50), (10, 60, 70)]) == 10\nassert group_tuples([]) is None\n```"
    },
    {
        "id":408,
        "response":"import typing\n\ndef Find_Max(lst: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    if not lst:\n        return []\n    max_len = max(len(sublist) for sublist in lst)\n    return [sublist for sublist in lst if len(sublist) == max_len]"
    },
    {
        "id":409,
        "response":"import math\n\ndef round_and_sum(list1):\n    return sum(math.floor(num + 0.5) for num in list1) * len(list1)"
    },
    {
        "id":410,
        "response":"import typing\n\ndef cube_Sum(n: int) -> int:\n    return sum(i**3 for i in range(1, n+1))"
    },
    {
        "id":411,
        "response":"import typing\nfrom typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple, delimiter: str) -> str:\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "id":412,
        "response":"import math\nfrom typing import Union\n\ndef find_Average_Of_Cube(n: Union[int, float]) -> float:\n    total = sum(i**3 for i in range(1, n+1))\n    return total \/ n"
    },
    {
        "id":413,
        "response":"```python\nimport numpy as np\n\ndef get_maxgold(gold, m, n):\n    dp = np.zeros((m, n))\n    for col in range(n):\n        dp[0][col] = gold[0][col]\n    for row in range(1, m):\n        for col in range(n):\n            if col == 0:\n                dp[row][col] = gold[row][col] + max(dp[row-1][col], dp[row-1][col+1] if col+1 < n else 0)\n            elif col == n-1:\n                dp[row][col] = gold[row][col] + max(dp[row-1][col-1], dp[row-1][col])\n            else:\n                dp[row][col] = gold[row][col] + max(dp[row-1][col-1], dp[row-1][col], dp[row-1][col+1])\n    return int(np.max(dp))\n```"
    },
    {
        "id":414,
        "response":"import typing\nimport itertools\n\ndef extract_rear(test_tuple: typing.Tuple[str, ...]) -> typing.Tuple[str]:\n    return tuple(s[-1] for s in test_tuple if isinstance(s, str))"
    },
    {
        "id":415,
        "response":"```python\nimport typing\n\ndef count_element_in_list(list1: typing.List[typing.List[int]], x: int) -> int:\n    return len([i for i in list1 if x in i])\n```"
    },
    {
        "id":416,
        "response":"import re\nimport typing\nimport itertools\n\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt):\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "id":418,
        "response":"import typing\nimport itertools\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    gap = len(my_list) \/\/ 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list"
    },
    {
        "id":419,
        "response":"```python\nimport typing\n\ndef and_tuples(test_tup1: typing.Tuple, test_tup2: typing.Tuple) -> typing.Tuple:\n    return tuple(set(test_tup1) & set(test_tup2))\n```"
    },
    {
        "id":420,
        "response":"import math\n\ndef parabola_directrix(a, b, c):\n    return (4*a*c - b**2) \/ (4*a)"
    },
    {
        "id":421,
        "response":"import typing\n\ndef common_element(list1: typing.List[int], list2: typing.List[int]) -> typing.List[int]:\n    return any(element in list2 for element in list1)"
    },
    {
        "id":422,
        "response":"import math\n\ndef median_trapezium(base1, base2, height):\n    return ((base1 + base2) \/ 2)"
    },
    {
        "id":423,
        "response":"import itertools\n\ndef check_greater(arr, number):\n    return all(number > i for i in arr)"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    if re.search(r'[bB]', text):\n        return text\n    else:\n        return None"
    },
    {
        "id":425,
        "response":"import typing\n\ndef last_Digit(n: int) -> int:\n    return n % 10"
    },
    {
        "id":426,
        "response":"import sys\n\ndef neg_nos(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n    sys.stdout.flush()\n    return None"
    },
    {
        "id":427,
        "response":"import re\n\ndef remove_odd(str1):\n    return ''.join([char for i, char in enumerate(str1) if i % 2 == 0])"
    },
    {
        "id":428,
        "response":"from typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    count = 0\n    seen = set()\n    for pair in test_list:\n        if pair[0] in seen and seen[pair[0]] == pair[1]:\n            count += 1\n        seen[pair[0]] = pair[1]\n    return count"
    },
    {
        "id":429,
        "response":"import itertools\n\ndef multiple_to_single(L):\n    return int(''.join(map(str, L)))"
    },
    {
        "id":430,
        "response":"import re\nfrom typing import Tuple, List\n\ndef find_adverb_position(text: str) -> Tuple[List[str], List[Tuple[int, str]]]:\n    adverbs = re.findall(r'\\b\\w+(ly|wise|wards|ways|fold|long|wide|far|near)\\b', text)\n    positions = [(m.start(), m.group()) for m in re.finditer(r'\\b\\w+(ly|wise|wards|ways|fold|long|wide|far|near)\\b', text)]\n    \n    return adverbs, positions"
    },
    {
        "id":431,
        "response":"import math\n\ndef surfacearea_cube(l):\n    return 6 * l ** 2"
    },
    {
        "id":432,
        "response":"import typing\n\ndef positive_count(nums: typing.List[int]) -> float:\n    total_count = len(nums)\n    positive_count = sum(1 for num in nums if num > 0)\n    return positive_count \/ total_count"
    },
    {
        "id":433,
        "response":"import typing\n\ndef largest_neg(list1: typing.List[int]) -> typing.Union[int, None]:\n    neg_nums = [num for num in list1 if num < 0]\n    if neg_nums:\n        return max(neg_nums)\n    else:\n        return None"
    },
    {
        "id":434,
        "response":"```python\nfrom typing import Tuple, List\n\ndef trim_tuple(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return [tup[:K] for tup in test_list]\n```"
    },
    {
        "id":435,
        "response":"import itertools\n\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":"import itertools\n\ndef count_Occurrence(tup, lst):\n    return tuple(i for i in lst if i in tup)"
    },
    {
        "id":437,
        "response":"import math\nfrom typing import List, Union\n\ndef cube_nums(nums: Union[List[int], List[float]]) -> List[Union[int, float]]:\n    return list(map(lambda x: x**3, nums))"
    },
    {
        "id":438,
        "response":"import math\n\ndef cal_sum(n):\n    return n * (n + 1) \/\/ 2"
    },
    {
        "id":439,
        "response":"import math\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    a = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    b = math.sqrt((x3 - x2)**2 + (y3 - y2)**2)\n    c = math.sqrt((x1 - x3)**2 + (y1 - y3)**2)\n    \n    return (a + b > c) and (a + c > b) and (b + c > a)"
    },
    {
        "id":440,
        "response":"import typing\n\ndef extract_string(strings: typing.List[str], length: int) -> typing.List[str]:\n    return [s for s in strings if len(s) == length]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":"import typing\n\ndef loss_amount(actual_cost: int, sale_amount: int) -> typing.Union[int, type(None)]:\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None"
    },
    {
        "id":443,
        "response":"import math\n\ndef sumofFactors(n) :\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    if re.search('z', text):\n        return text\n    else:\n        return None"
    },
    {
        "id":445,
        "response":"import typing\n\ndef check_monthnumb_number(monthnum2: int) -> int:\n    month_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2"
    },
    {
        "id":446,
        "response":"import typing\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"import itertools\nimport typing\n\ndef Find_Min(lst: typing.List[typing.Any]) -> typing.Any:\n    return min(lst, key=len)"
    },
    {
        "id":448,
        "response":"import math\n\ndef rectangle_area(l, b):\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "id":450,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.List]) -> typing.List:\n    return [sublist[0] for sublist in lst]"
    },
    {
        "id":451,
        "response":"import re\n\ndef upper_ctr(str):\n    return sum(1 for char in str if char.isupper())"
    },
    {
        "id":452,
        "response":"```python\nimport itertools\nimport typing\n\ndef combinations_list(list1: typing.List) -> typing.List:\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.combinations(list1, r))\n    return result\n```"
    },
    {
        "id":453,
        "response":"import itertools\n\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n\nassert max_subarray_product([2, 3, -2, 4]) == 6\nassert max_subarray_product([-2, 0, -1]) == 0\nassert max_subarray_product([1, 2, 3, 4]) == 24\nassert max_subarray_product([-1, -2, -3, -4]) == 24\nassert max_subarray_product([0, 0, 0]) == 0"
    },
    {
        "id":454,
        "response":"from typing import Dict\n\ndef check_value(dict: Dict, n):\n    return len(dict) == 0 or all(val == n for val in dict.values())"
    },
    {
        "id":455,
        "response":"import re\n\ndef drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value and value != 0 and value != False and value != [] and value != \"\" and value != {} and value != None}"
    },
    {
        "id":456,
        "response":"import typing\n\ndef find_peak_util(arr: typing.List[int], low: int, high: int, n: int) -> typing.List[int]:\n    mid = (low + high) \/\/ 2\n\n    if (mid == 0 or arr[mid] >= arr[mid-1]) and (mid == n-1 or arr[mid] >= arr[mid+1]):\n        return arr[mid]\n\n    elif mid > 0 and arr[mid] < arr[mid - 1]:\n        return find_peak_util(arr, low, (mid -1), n)\n\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)"
    },
    {
        "id":457,
        "response":"import oct\n\ndef decimal_to_Octal(deciNum):\n    return oct(deciNum).replace(\"0o\", \"\")"
    },
    {
        "id":458,
        "response":"import itertools\n\ndef max_product(arr, n):\n    arr.sort()\n    product1 = 1\n    product2 = 1\n    for i in range(n):\n        product1 *= arr[i]\n    for i in range(n-1, -1, -1):\n        product2 *= arr[i]\n    return max(product1, product2)"
    },
    {
        "id":459,
        "response":"```python\nimport typing\n\ndef max_profit(prices: typing.List[int], k: int) -> int:\n    n = len(prices)\n    if n < 2:\n        return 0\n    k = min(k, n \/\/ 2)\n    buy = [-float('inf')] * (k + 1)\n    sell = [0] * (k + 1)\n    for price in prices:\n        for i in range(1, k + 1):\n            buy[i] = max(buy[i], sell[i - 1] - price)\n            sell[i] = max(sell[i], buy[i] + price)\n    return sell[k]\n\nassert max_profit([2, 4, 1], 2) == 2\nassert max_profit([3, 2, 6, 5, 0, 3], 2) == 7\nassert max_profit([1, 2], 1) == 1\nassert max_profit([1], 1) == 0\nassert max_profit([1, 2, 3, 4, 5], 0) == 0\n```"
    },
    {
        "id":460,
        "response":"import itertools\n\ndef add_pairwise(test_tup):\n    return tuple(a + b for a, b in zip(*test_tup))"
    },
    {
        "id":461,
        "response":"import numpy as np\n\ndef find_remainder(arr, lens, n):\n    product = 1\n    for i in range(lens):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "id":462,
        "response":"import itertools\n\ndef check_Consecutive(l):\n    return all(x + 1 == y for x, y in itertools.pairwise(l))"
    },
    {
        "id":463,
        "response":"from typing import Tuple\nimport itertools\n\ndef tuple_intersection(*test_lists: Tuple[int, ...]) -> Tuple[int, ...]:\n    if not test_lists:\n        return ()\n\n    intersection = set(test_lists[0])\n    \n    for test_list in test_lists[1:]:\n        intersection &= set(test_list)\n    \n    return tuple(sorted(intersection))"
    },
    {
        "id":464,
        "response":"import re\n\ndef replace_char(str1, ch, newch):\n    return re.sub(ch, newch, str1)"
    },
    {
        "id":465,
        "response":"```python\nfrom typing import Dict\n\ndef sort_counter(dict1: Dict) -> Dict:\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n```"
    },
    {
        "id":466,
        "response":"import typing\n\ndef big_sum(nums: typing.List[int]) -> int:\n    return max(nums) + min(nums)"
    },
    {
        "id":467,
        "response":"import re\n\ndef is_lower(string):\n    return re.sub('[A-Z]', lambda x: chr(ord(x.group()) + 32), string)"
    },
    {
        "id":468,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)"
    },
    {
        "id":469,
        "response":"import math\n\ndef first_Digit(n) :\n    return int(str(abs(n))[0])"
    },
    {
        "id":470,
        "response":"import re\n\ndef get_max_occuring_char(str1):\n    str1 = str1.lower()\n    max_count = 0\n    max_char = ''\n    for char in set(str1):\n        count = str1.count(char)\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char"
    },
    {
        "id":471,
        "response":"```python\nimport typing\n\ndef is_subset_sum(set: typing.List[int], n: int, sum: int) -> bool:\n    subset = [[False for i in range(sum + 1)] for i in range(n + 1)]\n\n    for i in range(n + 1):\n        subset[i][0] = True\n\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            else:\n                subset[i][j] = subset[i - 1][j] or subset[i - 1][j - set[i - 1]]\n\n    return subset[n][sum]\n\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([1, 2, 3, 4, 5], 5, 10) == True\nassert is_subset_sum([1, 2, 3, 4, 5], 5, 11) == False\nassert is_subset_sum([1, 1, 1, 1, 1], 5, 5) == True\nassert is_subset_sum([1, 1, 1, 1, 1], 5, 6) == False\n```"
    },
    {
        "id":472,
        "response":"import re\nfrom typing import List\n\ndef match(text: str) -> List[str]:\n    pattern = r'[A-Z][a-z]+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "id":473,
        "response":"from typing import Callable\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    n = 1\n    while True:\n        fact = factorial(n)\n        if fact % x == 0:\n            return n\n        n += 1"
    },
    {
        "id":474,
        "response":"import typing\n\ndef remove_matching_tuple(test_list1: typing.List[tuple], test_list2: typing.List[tuple]) -> typing.List[tuple]:\n    return [tuple for tuple in test_list1 if tuple not in test_list2]"
    },
    {
        "id":475,
        "response":"```python\nimport itertools\n\ndef is_palindrome(n) :\n    return str(n) == str(n)[::-1]\n\ndef largest_palindrome(arr) :\n    max_palindrome = arr[0]\n    for num in arr:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome\n```"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n, r):\n    if r > n - r:\n        r = n - r\n    if r == 0:\n        return 1\n    p = 1\n    k = 1\n    while r:\n        p *= n\n        k *= r\n        m = math.gcd(p, k)\n        p \/\/= m\n        k \/\/= m\n        n -= 1\n        r -= 1\n    return p\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "id":477,
        "response":"```python\nimport typing\n\ndef sort_tuple(tup: typing.List[typing.Tuple[int]]) -> typing.List[typing.Tuple[int]]:\n    return sorted(tup, key=lambda x: x[-1])\n```"
    },
    {
        "id":478,
        "response":"import math\nimport typing\n\ndef area_pentagon(a: float) -> float:\n    n = 5\n    return (n * a**2) \/ (4 * math.tan(math.pi\/n))"
    },
    {
        "id":479,
        "response":"import collections\nfrom typing import List\n\ndef frequency_Of_Largest(n: int, arr: List[int]) -> int:\n    freq = collections.Counter(arr)\n    max_val = max(freq.values())\n    return max_val"
    },
    {
        "id":480,
        "response":"```python\nimport typing\n\ndef extract_symmetric(test_list: typing.List[tuple]) -> typing.List[tuple]:\n    symmetric_pairs = set()\n    for pair in test_list:\n        if (pair[1], pair[0]) in symmetric_pairs or (pair[1], pair[0]) in test_list:\n            symmetric_pairs.add(pair)\n    return list(symmetric_pairs)\n```"
    },
    {
        "id":481,
        "response":"import math\n\ndef sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) \/ (1 - r)"
    },
    {
        "id":482,
        "response":"import typing\n\ndef binary_search(item_list: typing.List[int], item: int) -> typing.Optional[int]:\n    low = 0\n    high = len(item_list) - 1\n\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        guess = item_list[mid]\n\n        if guess == item:\n            return mid\n        elif guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None"
    },
    {
        "id":483,
        "response":"import math\nimport typing\n\ndef calculate_polygons(startx: int, starty: int, endx: int, endy: int, radius: int) -> typing.List[typing.List[typing.Tuple[float, float]]]:\n    polygons = []\n    for x in range(startx, endx + 1):\n        for y in range(starty, endy + 1):\n            if (x - startx) % 2 == 0:\n                offset = 0\n            else:\n                offset = radius\n            polygons.append([\n                (x * radius * 1.5, y * radius * 2 + offset),\n                ((x + 0.5) * radius * 1.5, (y + 0.5) * radius * 2 + offset),\n                ((x + 1) * radius * 1.5, y * radius * 2 + offset),\n                ((x + 0.5) * radius * 1.5, (y - 0.5) * radius * 2 + offset),\n                (x * radius * 1.5, (y - 1) * radius * 2 + offset),\n                ((x - 0.5) * radius * 1.5, (y - 0.5) * radius * 2 + offset)\n            ])\n    return polygons"
    },
    {
        "id":484,
        "response":"import typing\n\ndef binary_to_integer(test_tup: typing.Tuple[int, int, int]) -> int:\n    a, b, c = test_tup\n    return int(str(a)+str(b)+str(c), 2)"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\n\ndef heap_queue_smallest(nums, n):\n    if not nums:\n        return None\n    return heapq.nsmallest(n, nums)[0]"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"import math\n\ndef gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x"
    },
    {
        "id":489,
        "response":"import math\n\ndef radius_circle(d):\n    return d \/ 2"
    },
    {
        "id":490,
        "response":"import typing\n\ndef concatenate_elements(lst: typing.List) -> str:\n    return ''.join(map(str, lst))"
    },
    {
        "id":491,
        "response":"```python\nimport numpy as np\n\ndef min_cost(cost, m, n):\n    dp = np.zeros((m + 1, n + 1))\n    dp[0][0] = cost[0][0]\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    return dp[m][n]\n\nassert min_cost(np.array([[1, 2, 3], [4, 8, 2], [1, 5, 3]]), 2, 2) == 8\nassert min_cost(np.array([[1, 3, 1], [1, 5, 1], [4, 2, 1]]), 2, 2) == 7\nassert min_cost(np.array([[1]]), 0, 0) == 1\nassert min_cost(np.array([[1, 2], [4, 2]]), 1, 1) == 3\nassert min_cost(np.array([[1, 2, 3, 4], [5, 6, 7, 8]]), 1, 3) == 17\n```"
    },
    {
        "id":492,
        "response":"import itertools\n\ndef similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))"
    },
    {
        "id":493,
        "response":"import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(1) == True\nassert is_not_prime(0) == True\nassert is_not_prime(25) == True"
    },
    {
        "id":494,
        "response":"import heapq\ndef heap_queue_largest(nums, n):\n    heapq.heapify(nums)\n    for _ in range(n - 1):\n        heapq.heappop(nums)\n    return heapq.heappop(nums)"
    },
    {
        "id":495,
        "response":"import math\n\ndef count_ways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"
    },
    {
        "id":496,
        "response":"import math\n\ndef is_Power_Of_Two(x):\n    if x <= 0:\n        return False\n    return math.log2(x) % 1 == 0"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"import math\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return list(map(lambda x: x**2, nums))"
    },
    {
        "id":499,
        "response":"import re\n\ndef find_Rotations(str):\n    return len(str) - str.find(str[1:] + str[0])"
    },
    {
        "id":500,
        "response":"import heapq\n\ndef small_nnum(list1, n):\n    return heapq.nsmallest(n, list1)"
    }
]