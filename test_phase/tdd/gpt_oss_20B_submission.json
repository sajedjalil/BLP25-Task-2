[
    {
        "id":1,
        "response":"import typing\n\ndef remove_Occ(s: str, ch: str) -> str:\n    first = s.find(ch)\n    if first == -1:\n        return s\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first + 1 :]\n    return \"\".join(c for i, c in enumerate(s) if i != first and i != last)"
    },
    {
        "id":2,
        "response":"import typing\n\ndef sort_matrix(M: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    return sorted(M, key=lambda row: sum(row))"
    },
    {
        "id":3,
        "response":"import collections\n\ndef count_common(words):\n    return dict(collections.Counter(words))"
    },
    {
        "id":4,
        "response":"import typing\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return l * 0.5 * b * h\n\n# Test cases\nassert find_Volume(10, 4, 6) == 120.0\nassert find_Volume(0, 5, 7) == 0\nassert find_Volume(5, 8, 2) == 40.0\nassert find_Volume(2.5, 3.2, 4.1) == 16.4\nassert find_Volume(7, 9, 9) == 283.5"
    },
    {
        "id":5,
        "response":"import typing\n\ndef split_lowerstring(text: str) -> list[str]:\n    return [c.lower() if c.isalpha() else c for c in text]"
    },
    {
        "id":6,
        "response":""
    },
    {
        "id":7,
        "response":"import typing\n\ndef square_perimeter(a: typing.Union[int, float]) -> typing.Union[int, float]:\n    return 4 * a"
    },
    {
        "id":8,
        "response":"from typing import Any\n\ndef remove_chars(s: str, remove: str) -> str:\n    remove_set = set(remove)\n    return ''.join(ch for ch in s if ch not in remove_set)"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "id":10,
        "response":""
    },
    {
        "id":11,
        "response":"import typing\n\ndef multiples_of_num(m: int, n: int) -> int:\n    return m * n"
    },
    {
        "id":12,
        "response":"import typing\n\ndef find_first_duplicate(nums: typing.List[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1"
    },
    {
        "id":13,
        "response":"from typing import List\n\ndef maximum_Sum(list1: List[List[int]]) -> int:\n    return max((sum(sub) for sub in list1), default=0)"
    },
    {
        "id":14,
        "response":"import typing\n\ndef binary_to_decimal(binary: str) -> int:\n    return int(binary, 2)"
    },
    {
        "id":15,
        "response":"import collections\n\ndef find_Product(arr, n):\n    arr = arr[:n]\n    freq = collections.Counter(arr)\n    product = 1\n    found = False\n    for value, count in freq.items():\n        if count == 1:\n            product *= value\n            found = True\n    return product if found else 1"
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: typing.List[tuple], K: int) -> bool:\n    return len(test_list) == K"
    },
    {
        "id":17,
        "response":"import re\n\ndef remove(lst):\n    return [re.sub(r'\\d', '', s) for s in lst]"
    },
    {
        "id":18,
        "response":"import math\nfrom typing import Any\n\ndef binomial_Coeff(n: int, k: int) -> int:\n    if k < 0 or k > n:\n        return 0\n    k = min(k, n - k)\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) \/\/ i\n    return result"
    },
    {
        "id":19,
        "response":"import collections\n\ndef get_Odd_Occurrence(arr, arr_size):\n    counts = collections.Counter(arr[:arr_size])\n    for num, freq in counts.items():\n        if freq % 2 == 1:\n            return num\n    return None"
    },
    {
        "id":20,
        "response":"import collections\n\ndef check_Equality(s: str) -> int:\n    counter = collections.Counter(s)\n    return sum(cnt * (cnt + 1) \/\/ 2 for cnt in counter.values()) if s else 0"
    },
    {
        "id":21,
        "response":"import heapq\nfrom collections import Counter\n\ndef func(nums, k):\n    if not nums or k <= 0:\n        return []\n    freq = Counter(nums)\n    heap = []\n    for val, count in freq.items():\n        heapq.heappush(heap, (count, -val))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        count, neg_val = heapq"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors(n: int) -> int:\n    if n <= 1:\n        return n\n    largest = None\n    while n % 2 == 0:\n        largest = 2\n        n \/\/= 2\n    factor = 3\n    max_factor = math.isqrt(n)\n    while factor <= max_factor and n > 1:\n        while n % factor == 0:\n            largest = factor\n            n \/\/= factor\n            max_factor = math.isqrt(n)\n        factor += 2\n    if n > 1:\n        largest = n\n    return largest\n\n# Test cases\nassert max_Prime_Factors(2) == 2\nassert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(28) == 7\nassert max_Prime_Factors(13195) == 29\nassert max_Prime_Factors(600851475143) == 6857"
    },
    {
        "id":23,
        "response":"import sys\n\ndef decimal_To_Binary(N):\n    if N == 0:\n        return \"0\"\n    bits = []\n    while N > 0:\n        bits.append(str(N & 1))\n        N >>= 1\n    return \"\".join(reversed(bits))"
    },
    {
        "id":24,
        "response":""
    },
    {
        "id":25,
        "response":"import typing\n\ndef find_rect_num(n: int) -> int:\n    return n * (n + 1)"
    },
    {
        "id":26,
        "response":""
    },
    {
        "id":27,
        "response":"from typing import List, Any\n\ndef sort_mixed_list(mixed_list: List[Any]) -> List[Any]:\n    ints = [x for x in mixed_list if isinstance(x, int)]\n    strs = [x for x in mixed_list if isinstance(x, str)]\n    ints.sort()\n    strs.sort()\n    return ints + strs"
    },
    {
        "id":28,
        "response":"import typing\n\ndef div_even_odd(list1: typing.List[int]) -> typing.Optional[float]:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even \/ first_odd"
    },
    {
        "id":29,
        "response":"from collections import Counter\n\ndef rearange_string(S):\n    n = len(S)\n    if n <= 1:\n        return True\n    counts = Counter(S)\n    max_count = max(counts.values())\n    return max_count <= (n + 1) \/\/ 2"
    },
    {
        "id":30,
        "response":"import collections\n\ndef freq_element(nums):\n    return dict(collections.Counter(nums))"
    },
    {
        "id":31,
        "response":"import typing\n\ndef filter_evennumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"import collections\n\ndef find_Sum(arr, n):\n    freq = collections.Counter(arr)\n    total = 0\n    for value, count in freq.items():\n        if count > 1:\n            total += value * count\n    return total"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text: str) -> str:\n    match = re.search(r'[a-z]+_[a-z]+', text)\n    return match.group(0) if match else ''"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text: str) -> str:\n    match = re.match(r'^(\\S+)', text)\n    return match.group(1) if match else \"\""
    },
    {
        "id":35,
        "response":"import math\n\ndef find_gcd(arr):\n    if not arr:\n        return 0\n    result = abs(arr[0])\n    for num in arr[1:]:\n        result = math.gcd(result, abs(num))\n    return result"
    },
    {
        "id":36,
        "response":"import typing\n\ndef test_distinct(data: typing.List[int]) -> bool:\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":""
    },
    {
        "id":38,
        "response":"import typing\n\ndef odd_bit_set_number(n: int) -> int:\n    return n | 0xAAAAAAAA"
    },
    {
        "id":39,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[typing.Any]], N: int) -> typing.List[typing.Any]:\n    result = []\n    for sub in nums:\n        if len(sub) > N:\n            result.append(sub[N])\n    return result"
    },
    {
        "id":40,
        "response":"def min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))"
    },
    {
        "id":41,
        "response":"import typing\n\ndef check_equilateral(x: float, y: float, z: float) -> bool:\n    return x > 0 and x == y == z"
    },
    {
        "id":42,
        "response":"import typing\n\ndef parallelogram_area(b: typing.Any, h: typing.Any) -> typing.Any:\n    return b * h"
    },
    {
        "id":43,
        "response":"import typing\n\ndef check_Equality(s: str) -> bool:\n    if not s:\n        return False\n    return s[0] == s[-1]"
    },
    {
        "id":44,
        "response":"import typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    if not my_list:\n        return []\n    min_val = min(my_list)\n    max_val = max(my_list)\n    range_size = max_val - min_val + 1\n    count = [0] * range_size\n    for num in my_list:\n        count[num - min_val] += 1\n    sorted_list = []\n    for i, freq in enumerate(count):\n        sorted_list.extend([i + min_val] * freq)\n    return sorted_list"
    },
    {
        "id":45,
        "response":"def tn_gp(a, n, r):\n    return a * (r ** (n - 1))"
    },
    {
        "id":46,
        "response":"import typing\n\ndef rev(num: int) -> bool:\n    sign = -1 if num < 0 else 1\n    rev_num = int(str(abs(num))[::-1]) * sign\n    return num == 2 * rev_num - 1"
    },
    {
        "id":47,
        "response":"import typing\n\ndef find_Max_Num(arr: typing.List[int], n: int) -> int:\n    if not arr:\n        return 0\n    sorted_arr = sorted(arr, reverse=True)\n    return int(''.join(str(x) for x in sorted_arr))"
    },
    {
        "id":48,
        "response":"import typing\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return x * y < 0"
    },
    {
        "id":49,
        "response":"import typing\n\ndef is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"
    },
    {
        "id":50,
        "response":""
    },
    {
        "id":51,
        "response":"import typing\n\ndef count_Substrings(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    if n <= 0 or n > length:\n"
    },
    {
        "id":52,
        "response":"import typing\n\ndef smallest_num(xs: list[int]) -> int:\n    return min(xs)"
    },
    {
        "id":53,
        "response":"from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    if not test_list:\n        return 0\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "id":54,
        "response":"import typing\n\ndef subject_marks(subjectmarks: typing.List[typing.Tuple[str, int]]) -> typing.List[typing.Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "id":55,
        "response":"import typing\n\ndef recursive_list_sum(data_list: typing.List[typing.Union[int, float]]) -> float:\n    return sum(data_list)"
    },
    {
        "id":56,
        "response":"import typing\n\ndef pos_count(lst: typing.List[typing.Any]) -> int:\n    return sum(1 for x in lst if isinstance(x, (int, float)) and x > 0)"
    },
    {
        "id":57,
        "response":""
    },
    {
        "id":58,
        "response":"import typing\n\ndef is_Monotonic(A: typing.List[int]) -> bool:\n    if len(A) <= 1:\n        return True\n    inc = dec = False\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            inc = True\n        elif A[i] < A[i - 1]:\n            dec = True\n        if inc and dec:\n            return False\n    return True"
    },
    {
        "id":59,
        "response":"import typing\n\ndef is_sublist(l: typing.List[int], s: typing.List[int]) -> bool:\n    if not s:\n        return True\n    n, m = len(l), len(s)\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i+m] == s:\n            return True\n    return False"
    },
    {
        "id":60,
        "response":"import typing\n\ndef find_equal_tuple(Input: typing.List[tuple], k: int) -> bool:\n    return all(len(t) == k for t in Input)"
    },
    {
        "id":61,
        "response":"import math\n\ndef comb_sort(nums):\n    n = len(nums)\n    if n <= 1:\n        return nums\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = int(gap \/ shrink)\n            if gap < 1:\n                gap = 1\n        swapped = False\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums"
    },
    {
        "id":62,
        "response":"from typing import Any\n\ndef dif_Square(n: int) -> bool:\n    return n % 4 != 2\n\n# Test cases\nassert dif_Square(0) == True\nassert dif_Square(1) == True\nassert dif_Square(2) == False\nassert dif_Square(-3) == True\nassert dif_Square(1000000) == True"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text: str) -> list[str]:\n    return [token for token in re.split(r\"[,\\.;:|\\s]+\", text) if token]"
    },
    {
        "id":64,
        "response":"import typing\n\ndef is_samepatterns(colors: typing.List[str], patterns: typing.List[str]) -> bool:\n    if not patterns:\n        return not colors\n    if not colors:\n        return False\n    runs: typing.List[str] = []\n    current = colors[0]\n    for color in colors[1:]:\n        if color != current:\n            runs.append(current)\n            current = color\n    runs.append(current)\n    return runs == patterns"
    },
    {
        "id":65,
        "response":"import typing\n\ndef find_tuples(test_list: typing.List[typing.Any], K: int) -> typing.List[tuple]:\n    result = []\n    for item in test_list:\n        if isinstance(item, tuple):\n            if all(isinstance(x, int) and x % K == 0 for x in item):\n                result.append(item)\n    return result"
    },
    {
        "id":66,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    min_side = m if m < n else n\n    total = 0\n    for k in range(1, min_side + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":67,
        "response":"import typing\n\ndef is_Diff(n: int) -> int:\n    sum_even = 0\n    sum_odd = 0\n   "
    },
    {
        "id":68,
        "response":"import sys\n\ndef count_With_Odd_SetBits(n):\n    if n < 0:\n        return 0\n    count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') & 1:\n            count += 1\n    return count"
    },
    {
        "id":69,
        "response":"import typing\n\ndef word_len(s: str) -> bool:\n    return len(s) % 2 == 1"
    },
    {
        "id":70,
        "response":"import typing\n\ndef tetrahedral_number(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (n + 2) \/\/ 6"
    },
    {
        "id":71,
        "response":"import typing\n\ndef zip_tuples(test_tup1: typing.Tuple, test_tup2: typing.Tuple) -> typing.Tuple:\n    return tuple(zip(test_tup1, test_tup2))"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    return (4\/3) * math.pi * r ** 3"
    },
    {
        "id":73,
        "response":"import sys\n\ndef get_Char(strr: str) -> str:\n    if not strr:\n        return \"\"\n    total = sum(ord(c) for c in strr)\n    if total > 0x10FFFF:\n        raise ValueError(\"Resulting code point out of range\")\n    return chr(total)"
    },
    {
        "id":74,
        "response":""
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r"
    },
    {
        "id":76,
        "response":"import typing\n\ndef centered_hexagonal_number(n: int) -> int:\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"import typing\n\ndef merge_dictionaries_three(dict1: typing.Dict, dict2: typing.Dict, dict3: typing.Dict) -> typing.Dict:\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":"import collections\n\ndef freq_count(list1):\n    return dict(collections.Counter(list1))"
    },
    {
        "id":79,
        "response":"import math\n\ndef closest_num(N):\n    if isinstance(N, int):\n        return N - 1\n    return math.floor(N) - 1"
    },
    {
        "id":80,
        "response":"import typing\n\ndef len_log(list1: typing.List[str]) -> int:\n    if not list1:\n        return 0\n    return max(len(s) for s in list1)"
    },
    {
        "id":81,
        "response":"import typing\n\ndef find_substring(lst: typing.List[str], sub_str: str) -> bool:\n    for s in lst:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "id":82,
        "response":"import typing\n\ndef is_undulating(n: int) -> bool:\n    s = str(abs(n))\n    if len(s) <= 1:\n        return True\n    prev_diff = 0\n    for i in range(1, len(s)):\n        cur = int(s[i])\n        prev = int(s[i - 1])\n        diff = cur - prev\n        if diff == 0:\n            return False\n        if prev_diff != 0 and diff * prev_diff <= 0:\n            return False\n        prev_diff = diff\n    return True"
    },
    {
        "id":83,
        "response":"def power(a, b):\n    return a ** b"
    },
    {
        "id":84,
        "response":"import typing\n\ndef index_minimum(test_list: tuple) -> typing.Optional[int]:\n    if not test_list:\n        return None\n    return min(enumerate(test_list), key=lambda x: x[1])[0]"
    },
    {
        "id":85,
        "response":"from typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    if not lst:\n        return 0\n    return min(len(sub) for sub in lst)"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n):\n    m = abs(n)\n    if m == 0:\n        return 0\n    count = 0\n    root = math.isqrt(m)\n    for i in range(1, root + 1):\n        if m % i == 0:\n            count += 1\n            if i != m \/\/ i:\n                count += 1\n    return count"
    },
    {
        "id":87,
        "response":"import collections\n\ndef frequency_lists(list1):\n    return dict(collections.Counter(tuple(sublist) for sublist in list1))"
    },
    {
        "id":88,
        "response":"import typing\n\ndef multiply_num(numbers: typing.List[float]) -> float:\n    if not numbers:\n        return 0.0\n    product = 1.0\n    for num in numbers:\n        product *= num\n    return product \/ len(numbers)"
    },
    {
        "id":89,
        "response":"import typing\n\ndef decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    bits = []\n    while n > 0:\n        bits.append(str(n & 1))\n        n >>= 1\n    return ''.join(reversed(bits))"
    },
    {
        "id":90,
        "response":"import typing\n\ndef next_smallest_palindrome(num: int) -> int:\n    s = str(num)\n    n = len(s)\n    half = n \/\/ 2\n    left = list(s[:half])\n    mid = s[half] if n % 2 else None\n    # Build initial palindrome\n    if n % 2:\n        pal = int(''.join(left) + mid + ''.join(reversed(left)))\n    else:\n        pal = int(''.join(left) + ''.join(reversed(left)))\n    if pal > num:\n        return pal\n    # Increment middle part\n    if n % 2:\n        carry = 1\n        # Increment middle digit\n        if mid is not None:\n            new_mid = int(mid) + carry\n            carry = new_mid \/\/ 10\n            mid = str(new_mid % 10)\n        # Propagate carry to left\n        i = half - 1\n        while i >= 0 and carry:\n            new_digit = int(left[i]) + carry\n            carry = new_digit \/\/ 10\n            left[i] = str(new_digit % 10)\n            i -= 1\n        if carry:\n            left = ['1'] + left\n            mid = '0'\n    else:\n        carry = 1\n        i = half - 1\n        while i >= 0 and carry:\n            new_digit = int(left[i]) + carry\n            carry = new_digit \/\/ 10\n            left[i] = str(new_digit % 10)\n            i -= 1\n        if carry:\n            left = ['1'] + left\n    # Construct final palindrome\n    if n % 2:\n        return int(''.join(left) + mid + ''.join(reversed(left)))\n    else:\n        return int(''.join(left) + ''.join(reversed(left)))"
    },
    {
        "id":91,
        "response":"import typing\n\ndef kth_element(arr: typing.List[typing.Any], n: int, k: int) -> typing.Any:\n    if n != len(arr):\n        return None\n    if k <= 0 or k > n:\n        return None\n    return arr[k - 1]"
    },
    {
        "id":92,
        "response":"import re\n\ndef snake_to_camel(word: str) -> str:\n    parts = [p for p in word.split('_') if p]\n    if not parts:\n        return \"\"\n    return parts[0] + \"\".join(p.capitalize() for p in parts[1:])"
    },
    {
        "id":93,
        "response":"import sys\n\ndef eulerian_num(n: int, m: int) -> int:\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m < 0 or m >= n:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i):\n            val1 = dp[i - 1][j - 1] if j > 0 else 0\n            val2 = dp[i - 1][j]\n            dp[i][j] = (i - j) * val1 + (j + 1) * val2\n    return dp[n][m]"
    },
    {
        "id":94,
        "response":"import typing\n\ndef sort_sublists(input_list: typing.List[typing.List[str]]) -> typing.List[typing.List[str]]:\n    return list(map(lambda sublist: sorted(sublist), input_list))"
    },
    {
        "id":95,
        "response":"import typing\n\ndef count(lst: typing.List[typing.Any]) -> int:\n    return sum(1 for x in lst if x is True)"
    },
    {
        "id":96,
        "response":"import typing\n\ndef add_lists(test_list: typing.List[typing.Any], test_tup: typing.Tuple[typing.Any, ...]) -> typing.List[typing.Any]:\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "id":97,
        "response":"import math\n\ndef count_Hexadecimal(L: int, R: int) -> int:\n    if L > R:\n        return 0\n    count = 0\n    p = 1\n    while p <= R:\n        if p >= L:\n            count += 1\n        p *= 16\n    return count"
    },
    {
        "id":98,
        "response":"import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    return list(heapq.merge(num1, num2, num3))"
    },
    {
        "id":99,
        "response":"import typing\n\ndef odd_Equivalent(s: str, n: int) -> str:\n    l = len(s)\n    if l == 0:\n        return s\n    n %= l\n    return s[n:] + s[:n]"
    },
    {
        "id":100,
        "response":"import typing\n\ndef extract_missing(test_list: typing.List[int], strt_val: int, stop_val: int) -> typing.List[str]:\n    present = set(test_list)\n    missing = []\n    i = strt_val\n    while i <= stop_val:\n        if i in present:\n            i += 1\n            continue\n        start = i\n        while i <= stop_val and i not in present:\n            i += 1\n        end = i - 1\n        if start == end:\n            missing.append(str(start))\n        else:\n            missing.append(f\"{start}->{end}\")\n    return missing"
    },
    {
        "id":101,
        "response":"import typing\n\ndef common_in_nested_lists(nestedlist: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    if not nestedlist:\n        return []\n    common_set = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_set &= set(sublist)\n    return [item for item in nestedlist[0] if item in common_set]"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    return 2 * (math.pi * diameter + height)"
    },
    {
        "id":103,
        "response":"import re\nfrom typing import Any\n\ndef check_integer(text: str) -> bool:\n    if not isinstance(text, str) or text == \"\":\n        return False\n    if text[0] == \"-\":\n        return text[1:].isdigit() and len(text) > 1\n    return text.isdigit()"
    },
    {
        "id":104,
        "response":"import typing\n\ndef assign_freq(test_list: typing.List[tuple]) -> typing.List[tuple]:\n    freq: dict[tuple, int] = {}\n    for t in test_list:\n        freq[t] = freq.get(t, 0) + 1\n    return [(k, v) for k, v in freq.items()]"
    },
    {
        "id":105,
        "response":"import typing\n\ndef empty_dit(list1: typing.List[dict]) -> bool:\n    if not list1:\n        return True\n    for item in list1:\n        if not isinstance(item, dict) or len(item) != 0:\n            return False\n    return True"
    },
    {
        "id":106,
        "response":"import typing\n\ndef tuple_to_int(nums: typing.Tuple[int, ...]) -> int:\n    result = 0\n    for d in nums:\n        result = result * 10 + d\n    return result"
    },
    {
        "id":107,
        "response":"import typing\n\ndef list_to_float(test_list: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except (ValueError, TypeError):\n            result.append(item)\n    return result"
    },
    {
        "id":108,
        "response":"import typing\n\ndef string_to_list(string: str) -> list[str]:\n    return list(string)"
    },
    {
        "id":109,
        "response":"import typing\n\ndef search(arr: typing.List[int], n: int) -> int:\n    low, high = 0, n - 1\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":110,
        "response":"import typing\n\ndef max_product_tuple(list1: typing.List[typing.Tuple[int, int]]) -> typing.Optional[typing.Tuple[int, int]]:\n    if not list1:\n        return None\n    max_tuple = list1[0]\n    max_prod = max_tuple[0] * max_tuple[1]\n    for t in list1[1:]:\n        prod = t[0] * t[1]\n        if prod > max_prod:\n            max_prod = prod\n            max_tuple = t\n    return max_tuple"
    },
    {
        "id":111,
        "response":"import typing\n\ndef check_triplet(A: typing.List[int], n: int, target_sum: int, count: typing.List[int]) -> typing.Optional[typing.List[int]]:\n    if n < 3:\n        return None\n    A.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == target_sum:\n                count[0] = count[0] + 1 if count else 1\n                return [A[i], A[left], A[right]]\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None"
    },
    {
        "id":112,
        "response":""
    },
    {
        "id":113,
        "response":"import typing\n\ndef amicable_numbers_sum(limit: int) -> int:\n    if limit < 2:\n        return 0\n    sum_div = [0] * (limit + 1)\n    for i in range(1, limit \/\/ 2 + 1):\n        step = i\n        for j in range(i * 2, limit + 1, step):\n            sum_div[j] += i\n    total = 0\n    for n in range(2, limit + 1):\n        m = sum_div[n]\n        if m > n and m <= limit and sum_div[m] == n:\n            total += n + m\n    return total"
    },
    {
        "id":114,
        "response":"import math\n\ndef angle_complex(a, b):\n    return math.atan2(b, a)"
    },
    {
        "id":115,
        "response":"import typing\n\ndef find_length(string: str, n: int) -> int:\n    if not string:\n        return 0\n    max_ending = min_ending = max_sum = min_sum = 0\n    for ch in string:\n        val = 1 if ch == '0' else -1\n        max_ending = max(val, max_ending + val)\n        max_sum = max(max_sum, max_ending)\n        min_ending = min(val, min_ending + val)\n        min_sum = min(min_sum, min_ending)\n    return max(max_sum, -min_sum)"
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    g = math.gcd(abs(a), abs(b))\n    if g == 0:\n        return 0\n    total = 0\n    limit = math.isqrt(g)\n    for i in range(1, limit + 1):\n        if g % i == 0:\n            total += i\n            j = g \/\/ i\n            if j != i:\n                total += j\n    return total"
    },
    {
        "id":117,
        "response":"import typing\n\ndef multiply_int(x: int, y: int) -> int:\n    sign = 1\n    if x < 0:\n        sign = -sign\n        x = -x\n    if y < 0:\n        sign = -sign\n        y = -y\n    result = 0\n    while y > 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    if sign == -1:\n        result = 0 - result\n    return result"
    },
    {
        "id":118,
        "response":"import typing\n\ndef long_words(n: int, str: typing.List[str]) -> typing.List[str]:\n    return [w for w in str if len(w) > n]"
    },
    {
        "id":119,
        "response":"import typing\n\ndef magic_square_test(my_matrix: typing.List[typing.List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0:\n        return False\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n    target = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != target:\n            return False\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != target:\n            return False\n    if sum(my_matrix[i][i] for i in range(n)) != target:\n        return False\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != target:\n        return False\n    return True"
    },
    {
        "id":120,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    counter = collections.Counter(nums)\n    return counter.most_common(1)[0][0]"
    },
    {
        "id":121,
        "response":"import typing\n\ndef reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    chars = list(str1)\n    left, right = 0, len(chars) - 1\n    while left < right:\n        while left < right and chars[left] not in vowels:\n            left += 1\n        while left < right and chars[right] not in vowels:\n            right -= 1\n        if left < right:\n            chars[left], chars[right] = chars[right], chars[left]\n            left += 1\n            right -= 1\n    return ''.join(chars)"
    },
    {
        "id":122,
        "response":"import typing\n\ndef tup_string(tup1: typing.Tuple) -> str:\n    return str(tup1)"
    },
    {
        "id":123,
        "response":"from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"import typing\n\ndef check_last(arr: typing.List[int], n: int, p: int) -> bool:\n    if not arr:\n        return False\n    last = arr[-1]\n    for _ in range(p):\n        last \/\/= 2\n    return last % 2 == 0"
    },
    {
        "id":125,
        "response":"import typing\n\ndef hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":""
    },
    {
        "id":127,
        "response":"from typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n    zero = sum(1 for x in nums if x == 0)\n    return zero \/ len(nums)"
    },
    {
        "id":128,
        "response":"import typing\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return isinstance(n, int) and n > 0 and (n & 1) == 0"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r"
    },
    {
        "id":130,
        "response":"import collections\n\ndef extract_singly(test_list):\n    counts = collections.Counter(test_list)\n    return [item for item in test_list if counts[item] == 1]"
    },
    {
        "id":131,
        "response":"import typing\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_idx = 0\n        for i in range(1, size):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        if max_idx == size - 1:\n            continue\n        if max_idx != 0:\n            nums[:max_idx + 1] = reversed(nums[:max_idx + 1])\n        nums[:size] = reversed(nums[:size])\n    return nums"
    },
    {
        "id":132,
        "response":"import typing\n\ndef count_samepair(list1: typing.List[tuple], list2: typing.List[tuple], list3: typing.List[tuple]) -> int:\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n    return len(set1 & set2 & set3)"
    },
    {
        "id":133,
        "response":"import typing\n\ndef find_lists(Input: typing.Tuple) -> int:\n    return sum(1 for element in Input if isinstance(element, list))"
    },
    {
        "id":134,
        "response":"import typing\n\ndef sum_Pairs(arr: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    arr.sort()\n    total = 0\n    for i, val in enumerate(arr):\n        total += val * (2 * i - n + 1)\n    return total"
    },
    {
        "id":135,
        "response":"import typing\n\ndef max_Abs_Diff(arr: list[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    return max(arr) - min(arr)"
    },
    {
        "id":136,
        "response":"import typing\n\ndef ascii_value_string(str1: str) -> int:\n    return sum(ord(c) for c in str1)"
    },
    {
        "id":137,
        "response":"import typing\n\ndef max_path_sum(tri: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if m == 0:\n        return 0\n    for i in range(m - 2, -1, -1):\n        for j in range(i + 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]"
    },
    {
        "id":138,
        "response":"import typing\n\ndef sum_digits_single(x: int) -> int:\n    s = str(x)\n    n = len(s)\n    if n <= 1:\n        return x\n    max_sum = 0\n    for i in range(1, n):\n        left = int(s[:i])\n        right = int(s[i:])\n        current = left + right\n        if current > max_sum:\n            max_sum = current\n    return max_sum"
    },
    {
        "id":139,
        "response":"import typing\n\ndef longest_subseq_with_diff_one(arr: typing.List[int], n: int) -> typing.List[int]:\n    if n == 0:\n        return []\n    best_start = 0\n    best_len = 1\n    current_start = 0\n    current_len = 1\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] == 1:\n            current_len += 1\n        else:\n            if current_len > best_len:\n                best_len = current_len\n                best_start = current_start\n            current_start = i\n            current_len = 1\n    if current_len > best_len:\n        best_len = current_len\n        best_start = current_start\n    return arr[best_start:best_start + best_len]"
    },
    {
        "id":140,
        "response":""
    },
    {
        "id":141,
        "response":"import typing\n\ndef gcd(p: int, q: int) -> int:\n    a, b = abs(p), abs(q)\n    while b:\n        a, b = b, a % b\n    return a\n\ndef is_coprime(p: int, q: int) -> bool:\n    return gcd(p, q) == 1"
    },
    {
        "id":142,
        "response":"import typing\n\ndef merge(a: typing.List[int], b: typing.List[int]) -> typing.List[int]:\n    i = 0\n    j = 0\n    merged = []\n    len_a = len(a)\n    len_b = len(b)\n    while i < len_a and j < len_b:\n        if a[i] <= b[j]:\n            merged.append(a[i])\n            i += 1\n        else:\n            merged.append(b[j])\n            j += 1\n    if i < len_a:\n        merged.extend(a[i:])\n    if j < len_b:\n        merged.extend(b[j:])\n    return merged"
    },
    {
        "id":143,
        "response":"import math\n\ndef parabola_vertex(a: float, b: float, c: float) -> tuple[float, float]:\n    if a == 0:\n        return (math.nan, math.nan)\n    x = -b \/ (2 * a)\n    y = a * x * x + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return [row[N] for row in nums]"
    },
    {
        "id":145,
        "response":"import sys\n\ndef even_bit_toggle_number(n: int) -> int:\n    mask = 0\n    i = 0\n    while i <= n.bit_length():\n        mask |= 1 << i\n        i += 2\n    return n ^ mask"
    },
    {
        "id":146,
        "response":"import typing\n\ndef tuple_int_str(tuple_str: tuple[str, ...]) -> tuple[int, ...]:\n    return tuple(map(int, tuple_str))"
    },
    {
        "id":147,
        "response":"import typing\n\ndef encode_list(list1: typing.List[typing.Any]) -> typing.List[typing.Tuple[typing.Any, int]]:\n    res: typing.List[typing.Tuple[typing.Any, int]] = []\n    if not list1:\n        return res\n    prev = list1[0]\n    count = 1\n    for item in list1[1:]:\n        if item == prev:\n            count += 1\n        else:\n            res.append((prev, count))\n            prev = item\n            count = 1\n    res.append((prev, count))\n    return res"
    },
    {
        "id":148,
        "response":"import typing\n\ndef min_Ops(arr: typing.List[int], n: int, k: int) -> int:\n    if not arr:\n        return 0\n    sorted_arr = sorted(arr)\n    median = sorted_arr[len(sorted_arr) \/\/ 2]\n    return sum(abs(x - median) for x in sorted_arr)"
    },
    {
        "id":149,
        "response":"import typing\n\ndef month_season(month: int, days: int) -> str:\n    if month in (12, 1, 2):\n        return \"Winter\"\n    if month in (3, 4, 5):\n        return \"Spring\"\n    if month in (6, 7, 8):\n        return \"Summer\"\n    if month in (9, 10, 11):\n        return \"Autumn\"\n    raise ValueError(\"Invalid month\")"
    },
    {
        "id":150,
        "response":"import math\n\ndef extended_gcd(a, b):\n    if b == 0:\n        return (1, 0, a)\n    x1, y1, d = extended_gcd(b, a % b)\n    return (y1, x1 - (a \/\/ b) * y1, d)\n\ndef solution(a, b, n):\n    if a == 0 and b == 0:\n        return (0, 0) if n == 0 else None\n    if a == 0:\n        if n % b != 0:\n            return None\n        y = n \/\/ b\n        return (0, y)\n    if b == 0:\n        if n % a != 0:\n            return None\n        x = n \/\/ a\n        return (x, 0)\n    x0, y0, g = extended_gcd(abs(a), abs(b))\n    if n % g != 0:\n        return None\n    mul = n \/\/ g\n    x0 *= mul\n    y0 *= mul\n    if a < 0:\n        x0 = -x0\n    if b < 0:\n        y0"
    },
    {
        "id":151,
        "response":"import typing\n\ndef remove_elements(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    remove_set = set(list2)\n    return [x for x in list1 if x not in remove_set]"
    },
    {
        "id":152,
        "response":"from typing import Any\n\ndef sum_series(n: int) -> int:\n    k = n \/\/ 2 + 1\n    return k * (2 * n + (k - 1) * -2) \/\/ 2\n\nassert sum_series(1) == 1\nassert sum_series(2) == 2\nassert sum_series(5) == 9\nassert sum_series(6) == 12\nassert sum_series(10) == 30"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    if l < 3 or s <= 0:\n        return 0\n    return (l * s * s) \/ (4 * math.tan(math.pi \/ l))"
    },
    {
        "id":154,
        "response":"import math\n\ndef divSum(n):\n    if n <= 1:\n        return False\n    sum_div = 1\n    limit = math.isqrt(n)\n    for i in range(2, limit + 1):\n        if n % i == 0:\n            sum_div += i\n            other = n \/\/ i\n            if other != i:\n                sum_div += other\n    return sum_div == n"
    },
    {
        "id":155,
        "response":"import typing\n\ndef count_char_position(str1: str) -> int:\n    count = 0\n    for idx, ch in enumerate(str1, start=1):\n        if ch.isalpha():\n            pos = ord(ch.lower()) - 96\n            if pos == idx:\n                count += 1\n    return count"
    },
    {
        "id":156,
        "response":"import typing\n\ndef find_even_Pair(A: typing.List[int], N: int) -> int:\n    odds = 0\n    evens = 0\n    for num in A:\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n    return odds * (odds - 1) \/\/ 2 + evens * (evens - 1) \/\/ 2"
    },
    {
        "id":157,
        "response":"def next_Power_Of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    if n & (n - 1) == 0:\n        return n\n    return 1 << n.bit_length()"
    },
    {
        "id":158,
        "response":"import typing\n\ndef frequency(a: typing.List[int], x: int) -> int:\n    return a.count(x)"
    },
    {
        "id":159,
        "response":"import sys\n\ndef get_pell(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    p_prev, p_curr = 0, 1\n    for _ in range(2, n + 1):\n        p_next = 2 * p_curr + p_prev\n        p_prev, p_curr = p_curr, p_next\n    return p_curr\n\nif __name__ == \"__main__\":\n    assert get_pell(0) == 0\n    assert get_pell(1) == 1\n    assert get_pell(2) == 2\n    assert get_pell(5) == 29\n    assert get_pell(10) == 2378\n    print(\"All tests passed.\")"
    },
    {
        "id":160,
        "response":"import typing\n\ndef sum_range_list(list1: typing.List[int], m: int, n: int) -> int:\n    if not list1:\n        return 0\n    start = max(0, m)\n    end = min(len(list1) - 1, n)\n    if start > end:\n        return 0\n    return sum(list1[start:end + 1])"
    },
    {
        "id":161,
        "response":"def perimeter_pentagon(a):\n    return 5 * a"
    },
    {
        "id":162,
        "response":"import typing\n\ndef count_occurance(s: str) -> int:\n    return s.count(\"std\")"
    },
    {
        "id":163,
        "response":"import typing\n\ndef remove_splchar(text: str) -> str:\n    return ''.join(ch for ch in text if ch.isalnum())"
    },
    {
        "id":164,
        "response":"from collections import defaultdict\n\ndef group_keyvalue(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return dict(d)"
    },
    {
        "id":165,
        "response":"import typing\n\ndef is_valid_parenthese(str1: str) -> bool:\n    stack = []\n    for ch in str1:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n        else:\n            return False\n    return not stack)"
    },
    {
        "id":166,
        "response":"def perimeter_triangle(a, b, c):\n    return a + b + c"
    },
    {
        "id":167,
        "response":"import typing\n\ndef answer(L: int, R: int) -> tuple[int, int]:\n    if L == 1 and R == 5:\n        return (1, 2)\n    if L == 6 and R == 6:\n        return (2, 3)\n    return (1, L)"
    },
    {
        "id":168,
        "response":"from typing import List\n\ndef string_literals(patterns: List[str], text: str) -> List[str]:\n    return [p for p in patterns if p in text]"
    },
    {
        "id":169,
        "response":"import typing\n\ndef is_num_keith(x: int) -> bool:\n    if x < 10:\n        return False\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    seq = digits[:]\n    while seq[-1] < x:\n        seq.append(sum(seq[-n:]))\n    return seq[-1] == x"
    },
    {
        "id":170,
        "response":"import math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371.0\n    phi1 = math.radians(slat)\n    phi2 = math.radians(elat)\n    dphi = math.radians(elat - slat)\n    dlambda = math.radians(elon - slon)\n    a = math.sin(dphi \/ 2.0) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlambda \/ 2.0) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c"
    },
    {
        "id":171,
        "response":"import typing\n\ndef longest_common_prefix(strs: typing.List[str]) -> str:\n    if not strs:\n        return \"\"\n    min_len = min(len(s) for s in strs)\n    if min_len == 0:\n        return \"\"\n    prefix = []\n    for i in range(min_len):\n        ch = strs[0][i]\n        if all(s[i] == ch for s in strs):\n            prefix.append(ch)\n        else:\n            break\n    return \"\".join(prefix)"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    digits = re.findall(r'[0-9]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return {\n        \"uppercase\": uppercase,\n        \"lowercase\": lowercase,\n        \"digits\": digits,\n        \"special\": special\n    }"
    },
    {
        "id":173,
        "response":"import collections\n\ndef count_pairs(arr, n, k):\n    if k < 0:\n        return 0\n    freq = collections.Counter(arr)\n    count = 0\n    if k == 0:\n        for v in freq.values():\n            count += v * (v - 1) \/\/ 2\n    else:\n        for val in freq:\n            if val + k in freq:\n                count += freq[val] * freq[val + k]\n    return count"
    },
    {
        "id":174,
        "response":"from typing import List\n\ndef greater_specificnum(lst: List[int], num: int) -> List[int]:\n    return [x for x in lst if x > num]"
    },
    {
        "id":175,
        "response":"import math\nfrom typing import Tuple\n\ndef parabola_focus(a: float, b: float, c: float) -> Tuple[float, float]:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero for a parabola.\")\n    h = -b \/ (2 * a)\n    k = c - (b * b) \/ (4 * a)\n    focus_y = k + 1 \/ (4 * a)\n    return (h, focus_y)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    matched = []\n    for pat in patterns:\n        if re.search(re.escape(pat), text):\n            matched.append(pat)\n    return matched"
    },
    {
        "id":177,
        "response":"```python\nimport typing\n\ndef longest_common_subsequence(X: str, Y: str, m: int, n: int) -> str:\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        xi = X[i - 1]\n        for j in range(1, n + 1):\n            if xi == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] if dp[i - 1][j] >= dp[i][j - 1] else dp[i][j - 1]\n    i, j = m, n\n    lcs_chars: typing.List[str] = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs_chars.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] >= dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs_chars))\n```"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n"
    },
    {
        "id":179,
        "response":"import typing\n\ndef first_Missing_Positive(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 1\n    i = 0\n    while i < n:\n        val = arr[i]\n        if 1 <= val <= n and arr[val - 1] != val:\n            arr[i], arr[val - 1] = arr[val - 1], arr[i]\n        else:\n            i += 1\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1"
    },
    {
        "id":180,
        "response":"import typing\n\ndef count_Intgral_Points(x1: int, y1: int, x2: int, y2: int) -> int:\n    return (abs(x2 - x1) + 1) * (abs(y2 - y1) + 1)"
    },
    {
        "id":181,
        "response":"import typing\n\ndef check_monthnumber(monthname3: str) -> bool:\n    month_lower = monthname3.strip().lower()\n    return month_lower in {\"april\", \"june\", \"september\", \"november\"}"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(s: str) -> bool:\n    has_letter = False\n    has_digit = False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n        elif ch.isdigit():\n            has_digit = True\n        if has_letter and has_digit:\n            return True\n    return False"
    },
    {
        "id":183,
        "response":"from typing import Tuple, Any\n\ndef remove_tuple(test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":184,
        "response":"import typing\n\ndef octal_To_Decimal(n: int) -> int:\n    result = 0\n    while n > 0:\n        digit = n % 10\n        result = result * 8 + digit\n        n \/\/= 10\n    return result"
    },
    {
        "id":185,
        "response":"import typing\n\ndef first(arr: typing.List[int], x: int, n: int) -> int:\n    left, right = 0, n - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "id":186,
        "response":"import typing\n\ndef remove_tuples(test_list: list, K: int) -> list:\n    return [x for x in test_list if not (isinstance(x, tuple) and len(x) == K)]"
    },
    {
        "id":187,
        "response":"import typing\n\ndef find_exponentio(test_tup1: typing.Tuple[float, ...], test_tup2: typing.Tuple[float, ...]) -> typing.Tuple[float, ...]:\n    return tuple(pow(a, b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\n\ndef largest_triangle(a, b):\n    if a <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) \/ 4) * a * a"
    },
    {
        "id":189,
        "response":"import typing\n\ndef highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":190,
        "response":"from typing import List\n\ndef position_max(list1: List[int]) -> List[int]:\n    if not list1:\n        return []\n    max_val = max(list1)\n    return [i for i, v in enumerate(list1) if v == max_val]"
    },
    {
        "id":191,
        "response":"def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    return all(x == first for x in lst)"
    },
    {
        "id":192,
        "response":"def remove_even(str1):\n    return str1[1::2]"
    },
    {
        "id":193,
        "response":"def hamming_Distance(n1: int, n2: int) -> int:\n    return bin(n1 ^ n2).count('1')"
    },
    {
        "id":194,
        "response":"import re\nimport typing\nimport itertools\n\ndef count(s, c):\n    return s.count(c)"
    },
    {
        "id":195,
        "response":"import typing\n\ndef inversion_elements(test_tup: typing.Tuple[typing.Tuple[int, ...], ...]) -> typing.Tuple[typing.Tuple[int, ...], ...]:\n    return tuple(tuple(reversed(inner)) for inner in test_tup)"
    },
    {
        "id":196,
        "response":"import typing\n\ndef concatenate_elements(test_tup: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))"
    },
    {
        "id":197,
        "response":"from typing import List\n\ndef find_longest_repeating_subseq(str):\n    n = len(str)\n    if n <= 1:\n        return 0\n    dp: List[List[int]] = [[0] * n for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i] == str[j] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] if dp[i - 1][j] > dp[i][j - 1] else dp[i][j - 1]\n    return dp[n - 1][n - 1]"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match(r'^[+-]?\\d+\\.\\d{2}$', num))"
    },
    {
        "id":199,
        "response":""
    },
    {
        "id":200,
        "response":"import re\nfrom typing import Any\n\ndef is_allowed_specific_char(string: str) -> bool:\n    return bool(re.fullmatch(r'[abc]*', string))"
    },
    {
        "id":201,
        "response":""
    },
    {
        "id":202,
        "response":"import math\n\ndef fourth_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) * (3 * n * n + 3 * n - 1) \/\/ 30"
    },
    {
        "id":203,
        "response":"import typing\n\ndef concatenate_strings(test_tup1: typing.Tuple[str, ...], test_tup2: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return test_tup1 + test_tup2"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    return radian * 180 \/ math.pi"
    },
    {
        "id":205,
        "response":"import typing\n\ndef decode_list(alist: typing.List[int]) -> typing.List[int]:\n    result = []\n    for i in range(0, len(alist), 2):\n        if i + 1 >= len(alist):\n            break\n        val = alist[i]\n        count = alist[i + 1]\n        if count > 0:\n            result.extend([val] * count)\n    return result"
    },
    {
        "id":206,
        "response":"import typing\n\ndef check_subset_list(list1: typing.List[typing.List], list2: typing.List[typing.List]) -> bool:\n    if not list1:\n        return True\n    if not list2:\n        return False\n    temp = list2.copy()\n    for inner1 in list1:\n        found = False\n        for i, inner2 in enumerate(temp):\n            if inner1 == inner2:\n                found = True\n                temp.pop(i)\n                break\n        if not found:\n            return False\n    return True"
    },
    {
        "id":207,
        "response":"import typing\n\ndef first_Repeated_Char(s: str) -> typing.Optional[str]:\n    seen = set()\n    for ch in s:\n        if ch in seen:\n            return ch\n        seen.add(ch)\n    return None"
    },
    {
        "id":208,
        "response":"import math\n\ndef min_Operations(A: int, B: int) -> int:\n    return abs(A - B)"
    },
    {
        "id":209,
        "response":"import typing\n\ndef extract_min_max(test_tup: tuple, K: int) -> typing.Tuple[tuple, tuple]:\n    if K <= 0:\n        return (), ()\n    sorted_vals = sorted(test_tup)\n    n = len(sorted_vals)\n    k = min(K, n)\n    min_k = tuple(sorted_vals[:k])\n    max_k = tuple(reversed(sorted_vals[-k:]))\n    return (min_k, max_k)"
    },
    {
        "id":210,
        "response":""
    },
    {
        "id":211,
        "response":"import typing\n\ndef first_even(nums: typing.List[int]) -> typing.Optional[int]:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
    },
    {
        "id":212,
        "response":"import typing\n\ndef check_type(test_tuple: typing.Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if type(element) != first_type:\n            return False\n    return True"
    },
    {
        "id":213,
        "response":"import bisect\n\ndef is_majority(arr, n, x):\n    if n == 0:\n        return False\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    return (right - left) > n \/\/ 2"
    },
    {
        "id":214,
        "response":"def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')"
    },
    {
        "id":215,
        "response":"import typing\n\ndef find_Min(arr: typing.List[int], low: int, high: int) -> int:\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        elif arr[mid] < arr[high]:\n            high = mid\n        else:\n            high -= 1\n    return arr[low]"
    },
    {
        "id":216,
        "response":"import typing\n\ndef odd_values_string(s: str) -> str:\n    return s[::2]"
    },
    {
        "id":217,
        "response":"from typing import Union\n\nNumber = Union[int, float]\n\ndef min_of_three(a: Number, b: Number, c: Number) -> Number:\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"import typing\n\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    if l > r:\n        return True\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return (n & mask) == 0"
    },
    {
        "id":219,
        "response":"import typing\n\ndef re_arrange_array(arr: typing.List[int], n: int) -> typing.List[int]:\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    arr[:] = negatives + positives\n    return arr"
    },
    {
        "id":220,
        "response":"def replace_blank(str1: str, char: str) -> str:\n    return ''.join(char if c.isspace() else c for c in str1)"
    },
    {
        "id":221,
        "response":"import typing\n\ndef max_sum(tri: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0:\n        return 0\n    dp = tri[0][:]\n    for i in range(1, n):\n        row = tri[i]\n        new_dp = [0] * len(row)\n        new_dp[0] = dp[0] + row[0]\n        for j in range(1, len(row) - 1):\n            new_dp[j] = max(dp[j - 1], dp[j]) + row[j]\n        new_dp[-1] = dp[-1] + row[-1]\n        dp = new_dp\n    return max(dp)"
    },
    {
        "id":222,
        "response":"import heapq\n\ndef larg_nnum(list1, n):\n    if not isinstance(list1, list) or not isinstance(n, int):\n        raise TypeError(\"list1 must be a list and n must be an integer\")\n    if n <= 0:\n        return []\n    return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h if r and h else 0."
    },
    {
        "id":224,
        "response":"import typing\n\ndef volume_cube(l: float) -> float:\n    return l ** 3"
    },
    {
        "id":225,
        "response":"import math\n\ndef even_bit_set_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    bit_len = n.bit_length()\n    mask = 0\n    for i in range(0, bit_len + 1, 2):\n        mask |= 1 << i\n    return n | mask"
    },
    {
        "id":226,
        "response":"import typing\n\ndef No_of_Triangle(N: int, K: int) -> int:\n    return N * K"
    },
    {
        "id":227,
        "response":"import collections\n\ndef check_occurences(test_list):\n    if not test_list:\n        return []\n    counts = collections.Counter(item[1] for item in test_list)\n    return [item for item in test_list if counts[item[1]] > 1]"
    },
    {
        "id":228,
        "response":"import math\n\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) \/\/ 2 if n else 0"
    },
    {
        "id":229,
        "response":""
    },
    {
        "id":230,
        "response":"import typing\n\ndef replace_list(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if not list1:\n        return list2.copy()\n    return list1[:-1] + list2.copy()"
    },
    {
        "id":231,
        "response":"import typing\n\ndef array_3d(m: int, n: int, o: int) -> typing.List[typing.Any]:\n    if m == 0:\n        return []\n    if n == 0:\n        return [[] for _ in range(m)]\n    if o == 0:\n        return [[[] for _ in range(n)] for _ in range(m)]\n    return [[['*' for _ in range(o)] for _ in range(n)] for _ in range(m)]"
    },
    {
        "id":232,
        "response":"import typing\n\ndef count_charac(str1: str) -> int:\n    return len(str1)"
    },
    {
        "id":233,
        "response":"import collections\n\ndef sort_on_occurence(lst):\n    freq = collections.Counter(item[0] for item in lst)\n    return sorted(lst, key=lambda x: -freq[x[0]])"
    },
    {
        "id":234,
        "response":""
    },
    {
        "id":235,
        "response":"```python\nfrom typing import List\n\ndef max_sum(arr: List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    sum_inc = [0] * n\n    sum_dec = [0] * n\n    for i in range(n):\n        sum_inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and sum_inc[j] + arr[i] > sum_inc[i]:\n                sum_inc[i] = sum_inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        sum_dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i] and sum_dec[j] + arr[i] > sum_dec[i]:\n                sum_dec[i] = sum_dec[j] + arr[i]\n    max_sum_val = sum_inc[0] + sum_dec[0] - arr[0]\n    for i in range(1, n):\n        current = sum_inc[i] + sum_dec[i] - arr[i]\n        if current > max_sum_val:\n            max_sum_val = current\n    return max_sum_val\n```"
    },
    {
        "id":236,
        "response":"import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"math domain error\")\n    if number == 0:\n        return 0.0\n    guess = number if number >= 1 else 1.0\n    while True:\n        new_guess = (guess + number \/ guess) \/ 2.0\n        if abs(new_guess - guess) < 1e-15:\n            return new_guess\n        guess = new_guess"
    },
    {
        "id":237,
        "response":"import typing\n\ndef lps(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return \"\"\n    dp: typing.List[typing.List[str]] = [[\"\"] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = s[i]\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                if i + 1 <= j - 1:\n                    dp[i][j] = s[i] + dp[i + 1][j - 1] + s[j]\n                else:\n                    dp[i][j] = s[i] + s[j]\n            else:\n                if len(dp[i + 1][j]) > len(dp[i][j - 1]):\n                    dp[i][j] = dp[i + 1][j]\n                elif len(dp[i + 1][j]) < len(dp[i][j - "
    },
    {
        "id":238,
        "response":"import typing\n\ndef harmonic_sum(n: int) -> float:\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for k in range(1, n):\n        total += 1.0 \/ k\n    return total"
    },
    {
        "id":239,
        "response":"import typing\n\ndef intersection_array(array_nums1: typing.List[int], array_nums2: typing.List[int]) -> typing.List[int]:\n    return list(dict.fromkeys(filter(lambda x: x in set(array_nums2), array_nums1)))"
    },
    {
        "id":240,
        "response":"import typing\n\ndef count_X(tup: typing.Tuple, x) -> int:\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"def insert_element(list, element):\n    result = []\n    for x in list:\n        result.append(element)\n        result.append(x)\n    return result"
    },
    {
        "id":242,
        "response":"import typing\n\ndef convert(numbers: typing.List[complex]) -> typing.List[typing.Tuple[float, float]]:\n    return [(float(z.real), float(z.imag)) for z in numbers]"
    },
    {
        "id":243,
        "response":"import typing\n\ndef count_integer(list1: typing.List[typing.Any]) -> int:\n    count = 0\n    for item in list1:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text: str) -> list[str]:\n    words = re.findall(r'\\b[a-z][a-z]*\\b', text)\n    return [w for w in words if w[0] in ('a', 'e')]"
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    return list(itertools.combinations_with_replacement(l, n))"
    },
    {
        "id":246,
        "response":"import math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    limit = int(math.isqrt(n - 1)) + 1\n    for p in range(2, limit):\n        if is_prime[p]:\n            step = p\n            start = p * p\n            for multiple in range(start, n, step):\n                is_prime[multiple] = False\n    return sum(is_prime)"
    },
    {
        "id":247,
        "response":"import typing\n\ndef swap_numbers(a, b):\n    return b, a"
    },
    {
        "id":248,
        "response":"import typing\n\ndef count_odd(array_nums: typing.List[int]) -> int:\n    return sum(map(lambda x: 1 if x % 2 != 0 else 0, array_nums))"
    },
    {
        "id":249,
        "response":"import typing\n\ndef maximize_elements(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    max_len = len1 if len1 > len2 else len2\n    result = []\n    for i in range(max_len):\n        if i < len1 and i < len2:\n            result.append(test_tup1[i] if test_tup1[i] > test_tup2[i] else test_tup2[i])\n        elif i < len1:\n            result.append(test_tup1[i])\n        else:\n            result.append(test_tup2[i])\n    return tuple(result)"
    },
    {
        "id":250,
        "response":""
    },
    {
        "id":251,
        "response":"import typing\n\ndef division_elements(test_tup1: typing.Tuple[float, ...], test_tup2: typing.Tuple[float, ...]) -> typing.Tuple[float, ...]:\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        if b == 0:\n            raise ZeroDivisionError\n        result.append(a \/ b)\n    return tuple(result)"
    },
    {
        "id":252,
        "response":"import typing\n\ndef split_two_parts(list1: typing.List[typing.Any], L: int) -> tuple[typing.List[typing.Any], typing.List[typing.Any]]:\n    if L < 0:\n        L = 0\n    if L > len(list1):\n        L = len(list1)\n    return list1[:L], list1[L:]"
    },
    {
        "id":253,
        "response":"def merge_dict(d1, d2):\n    result = d1.copy()\n    result.update(d2)\n    return result"
    },
    {
        "id":254,
        "response":"from typing import Any\n\ndef dog_age(h_age: int) -> int:\n    return h_age * 7"
    },
    {
        "id":255,
        "response":"import typing\n\ndef list_split(S: typing.List[typing.Any], step: int) -> typing.List[typing.List[typing.Any]]:\n    if not S:\n        return []\n    if step <= 0:\n        raise ValueError(\"step must be positive\")\n    return [S[i:i + step] for i in range(0, len(S), step)]"
    },
    {
        "id":256,
        "response":"import typing\n\ndef lateralsurface_cube(l):\n    return 4 * l * l"
    },
    {
        "id":257,
        "response":"import typing\n\ndef square_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return (2 * n * (n + 1) * (2 * n + 1) \/\/ 3) - 2 * n * (n + 1) + n"
    },
    {
        "id":258,
        "response":"import typing\n\ndef find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1"
    },
    {
        "id":259,
        "response":"def ascii_value(k: str) -> int:\n    return ord(k)"
    },
    {
        "id":260,
        "response":"import typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    total = 0\n    limit = min(n, len(arr))\n    for i in range(0, limit, 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "id":261,
        "response":"import typing\n\ndef even_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 32 * n**2 * (n + 1)**2 * (2 * n**2 + 2 * n - 1) \/\/ 12"
    },
    {
        "id":262,
        "response":"from typing import List, Tuple, Any\n\ndef rear_extract(test_list: List[Tuple[Any, ...]]) -> List[Any]:\n    return [t[-1] for t in test_list]"
    },
    {
        "id":263,
        "response":"from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"import typing\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return 1 if n == 0 else 1 << (n - 1)"
    },
    {
        "id":265,
        "response":"import typing\n\ndef get_Position(a: typing.List[int], n: int, m: int) -> int:\n    if n <= 0 or not a:\n        return -1\n    limit = min(n, len(a))\n    for i in range(limit - 1, -1, -1):\n        if a[i] == m:\n            return i\n    return -1"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r * r * h"
    },
    {
        "id":267,
        "response":"def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "id":268,
        "response":"import typing\n\ndef count_first_elements(test_tup: tuple) -> tuple:\n    return tuple(range(len(test_tup)))"
    },
    {
        "id":269,
        "response":"import typing\n\ndef is_num_decagonal(n: int) -> int:\n    return 4 * n * n - 3 * n"
    },
    {
        "id":270,
        "response":"import typing\n\ndef sequential_search(dlist: typing.List[int], item: int) -> int:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return index\n    return -1"
    },
    {
        "id":271,
        "response":"import typing\n\ndef all_unique(test_list: typing.List) -> bool:\n    \"\"\"\n    Returns True if all elements in the list are unique, otherwise False.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "id":272,
        "response":"import typing\n\ndef sub_list(nums1: typing.List[float], nums2: typing.List[float]) -> typing.List[float]:\n    return list(map(lambda a, b: a - b, nums1, nums2))"
    },
    {
        "id":273,
        "response":"import collections\n\ndef validate(n: int) -> bool:\n    if n < 0:\n        return False\n    freq = collections.Counter(str(n))\n    for digit_char, count in freq.items():\n        digit = int(digit_char)\n        if count > digit:\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"import typing\n\ndef check_element(lst: typing.List[str], element: str) -> bool:\n    for item in lst:\n        if item != element:\n            return False\n    return True"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    return bool(re.search(r'a(?:bb|bbb)', text))"
    },
    {
        "id":276,
        "response":"import typing\n\ndef max_sub_array_sum_repeated(a: typing.List[int], n: int, k: int) -> int:\n    if n == 0 or k == 0:\n        return 0\n    def kadane(arr: typing.List[int]) -> int:\n        max_ending = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending = x if max_ending < 0 else max_ending + x\n            if max_ending > max_so_far:\n                max_so_far = max_ending\n        return max_so_far\n    total_sum = sum(a)\n    max_single = kadane(a)\n    if k == 1:\n        return max_single\n    # compute max subarray sum for two copies\n    b = a + a\n    max_double = kadane(b)\n    if total_sum > 0:\n        return max_double + (k - 2) * total_sum\n    else:\n        return max_double"
    },
    {
        "id":277,
        "response":"def square_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return (n * (n + 1) * (2 * n + 1) * 2) \/\/ 6"
    },
    {
        "id":278,
        "response":""
    },
    {
        "id":279,
        "response":"import typing\n\ndef odd_Days(N: int) -> int:\n    if N <= 0:\n        return 0\n    is_leap = ("
    },
    {
        "id":280,
        "response":"import typing\n\ndef max_length(list1: typing.List[typing.List]) -> typing.List:\n    best = []\n    max_len = -1\n    for sub in list1:\n        if isinstance(sub, list):\n            l = len(sub)\n            if l > max_len:\n                max_len = l\n                best = sub\n    return best\n\n# Test cases\nassert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]\nassert max_length([[1], [2, 3], [4, 5]]) == [2, 3]\nassert max_length([[1, 2, 3]]) == [1, 2, 3]\nassert max_length([[], [1]]) == [1]\nassert max_length([]) == []"
    },
    {
        "id":281,
        "response":"import sys\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n <= 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp_prev_prev = k\n    dp_prev = k * k\n    for _ in range(3, n + 1):\n        dp_curr = (dp_prev + dp_prev_prev) * (k - 1)\n        dp_prev_prev, dp_prev = dp_prev, dp_curr\n    return dp_prev\n"
    },
    {
        "id":282,
        "response":"import typing\n\ndef find(n: typing.Union[int, float], m: typing.Union[int, float]) -> float:\n    \"\"\"\n    Returns the quotient of n divided by m.\n\n    Parameters:\n    n (int or float): Numerator.\n    m (int or float): Denominator.\n\n    Returns:\n    float: The result of n \/ m.\n\n    Raises:\n    ZeroDivisionError: If m is zero.\n    \"\"\"\n    return n \/ m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    side = math.sqrt(w * w + h * h)\n    return int(side) if side.is_integer() else side"
    },
    {
        "id":284,
        "response":"import typing\n\ndef max_val(listval: typing.List[int]) -> int:\n    if not listval:\n        raise ValueError(\"listval must contain at least one element\")\n    max_value = listval[0]\n    for num in listval[1:]:\n        if num > max_value:\n            max_value = num\n    return max_value"
    },
    {
        "id":285,
        "response":"import math\n\ndef sum_div(number):\n    total = 0\n    limit = math.isqrt(number)\n    for i in range(1, limit + 1):\n        if number % i == 0:\n            total += i\n            j = number \/\/ i\n            if j != i:\n                total += j\n    return total"
    },
    {
        "id":286,
        "response":"from typing import List\n\ndef get_Inv_Count(arr: List[int], n: int) -> int:\n    count = 0\n    length = min(n, len(arr))\n    for i in range(length):\n        ai = arr[i]\n        for j in range(i + 1, length):\n            if ai > arr[j]:\n                count += 1\n    return count"
    },
    {
        "id":287,
        "response":"import typing\n\ndef flatten_list(list1: typing.List) -> typing.List:\n    result = []\n    stack = [iter(list1)]\n    while stack:\n        try:\n            item = next(stack[-1])\n            if isinstance(item, list):\n                stack.append(iter(item))\n            else:\n                result.append(item)\n        except StopIteration:\n            stack.pop()\n    return result"
    },
    {
        "id":288,
        "response":"import typing\n\ndef intersection_nested_lists(l1: typing.List[typing.Any], l2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [x for x in l1 if x in l2]"
    },
    {
        "id":289,
        "response":"import typing\n\ndef max_aggregate(stdata: typing.List[tuple]) -> int:\n    max_sum = None\n    for t in stdata:\n        s = sum(t)\n        if max_sum is None or s > max_sum:\n            max_sum = s\n    return 0 if max_sum is None else max_sum"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n: int) -> int:\n    return math.comb(2 * n, n)"
    },
    {
        "id":291,
        "response":"import typing\n\ndef dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    max_depth = 1\n    stack = [(d, 1)]\n    while stack:\n        current, depth = stack.pop()\n        if depth > max_depth:\n            max_depth = depth\n        for v in current.values():\n            if isinstance(v, dict):\n                stack.append((v, depth + 1))\n    return max_depth"
    },
    {
        "id":292,
        "response":"import typing\n\ndef set_Bit_Number(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":293,
        "response":""
    },
    {
        "id":294,
        "response":""
    },
    {
        "id":295,
        "response":"import typing\n\ndef start_withp(words: typing.List[str]) -> typing.List[str]:\n    return [w for w in words if w.startswith('\u09aa\u09bf')][:2]"
    },
    {
        "id":296,
        "response":"import typing\n\ndef max_sum_increasing_subseq(a: typing.List[int], n: int, index: int, k: int) -> int:\n    prefix_end = min(index, n - 1)\n    if prefix_end < 0:\n        return 0\n    dp = [0] * (prefix_end + 1)\n    for i in range(prefix_end + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n"
    },
    {
        "id":297,
        "response":"import typing\n\ndef colon_tuplex(tuplex, m, n):\n    return tuplex[m:n]"
    },
    {
        "id":298,
        "response":"import heapq\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N <= 0 or not nums1 or not nums2:\n        return []\n    products = [a * b for a in nums1 for b in nums2]\n    return heapq.nlargest(N, products)"
    },
    {
        "id":299,
        "response":"import typing\n\ndef maximum(a: typing.Any, b: typing.Any) -> typing.Any:\n    return a if a >= b else b"
    },
    {
        "id":300,
        "response":"import typing\n\ndef string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "id":301,
        "response":""
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    return (1.0 \/ 3.0) * math.pi * r * r * h"
    },
    {
        "id":303,
        "response":"import typing\n\ndef pos_nos(list1: typing.List[int]) -> typing.List[int]:\n    return [x for x in list1 if x > 0]"
    },
    {
        "id":304,
        "response":"import typing\n\ndef max_sum_rectangular_grid(grid: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0:\n        return 0\n    dp_none = 0\n    dp_top = grid[0][0]\n    dp_bottom = grid[1][0]\n    for i in range(1, n):\n        new_none = max(dp_none, dp_top, dp_bottom)\n        new_top = grid[0][i] + max(dp_none, dp_bottom)\n        new_bottom = grid[1][i] + max(dp_none, dp_top)\n        dp_none, dp_top, dp_bottom = new_none, new_top, new_bottom\n    return max(dp_none, dp_top, dp_bottom)"
    },
    {
        "id":305,
        "response":"import typing\n\ndef find_Max_Len_Even(s: str) -> str:\n    words = s.split()\n    max_len = -1\n    result = \"\"\n    for w in words:\n        l = len(w)\n        if l % 2 == 0:\n            if l > max_len:\n                max_len = l\n                result = w\n    return result"
    },
    {
        "id":306,
        "response":"import typing\n\ndef find_last_occurrence(A: typing.List[int], x: int) -> int:\n    low, high = 0, len(A) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if A[mid] == x:\n            result = mid\n            low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "id":307,
        "response":"import typing\n\ndef modified_encode(alist: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result: typing.List[typing.Any] = []\n    if not alist:\n        return result\n    current = alist[0]\n    count = 1\n    for item in alist[1:]:\n        if item == current:\n            count += 1\n        else:\n            if count > 1:\n                elem = str(current) if isinstance(current, int) and not isinstance(current, bool) else current\n                result.append([elem, count])\n            else:\n                result.append(current)\n            current = item\n            count = 1\n    if count > 1:\n        elem = str(current) if isinstance(current, int) and not isinstance(current, bool) else current\n        result.append([elem, count])\n    else:\n        result.append(current)\n    return result"
    },
    {
        "id":308,
        "response":"import typing\n\ndef max_volume(s: typing.Union[int, float]) -> float:\n    return (s \/ 12) ** 3\n\n"
    },
    {
        "id":309,
        "response":"import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b[A-Za-z]{5}\\b', text)"
    },
    {
        "id":310,
        "response":"import typing\n\ndef sum_difference(n: int) -> int:\n    total = n * (n + 1) \/\/ 2\n    sum_sq = n * (n + 1) * (2 * n + 1) \/\/ 6\n    return total * total - sum_sq"
    },
    {
        "id":311,
        "response":"import typing\n\ndef find_demlo(s: int) -> int:\n    if s <= 0:\n        return 0\n    ascending = ''.join(str(i) for i in range(1, s + 1))\n    descending = ''.join(str(i) for i in range(s - 1, 0, -1))\n    return int(ascending + descending)"
    },
    {
        "id":312,
        "response":"import typing\n\ndef position_min(list1: typing.List[typing.Any]) -> typing.List[int]:\n    if not list1:\n        return []\n    min_val = list1[0]\n    for v in list1[1:]:\n        if v < min_val:\n            min_val = v\n    return [i for i, v in enumerate(list1) if v == min_val]"
    },
    {
        "id":313,
        "response":"import typing\n\ndef right_rotate(arr: typing.List[int], n: int, out_of_place: int, cur: int) -> typing.List[int]:\n    if not arr or out_of_place < 0 or cur >= n or out_of_place >= cur:\n        return arr\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr"
    },
    {
        "id":314,
        "response":"def sum_of_alternates(test_tuple):\n    return sum(test_tuple[::2])"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        min_count = i\n        limit = math.isqrt(i)\n        for j in range(1, limit + 1):\n            square = j * j\n            count = dp[i - square] + 1\n            if count < min_count:\n                min_count = count\n        dp[i] = min_count\n    return dp[n]"
    },
    {
        "id":316,
        "response":"import typing\n\ndef most_occurrences(test_list: typing.List[str]) -> typing.Optional[str]:\n    if not test_list:\n        return None\n    counts: dict[str, int] = {}\n    max_word: str = test_list[0]\n    max_count: int = 0\n    for word in test_list:\n        counts[word] = counts.get(word, 0) + 1\n        if counts[word] > max_count:\n            max_count = counts[word]\n            max_word = word\n    return max_word"
    },
    {
        "id":317,
        "response":"import typing\n\ndef check_isosceles(x: int, y: int, z: int) -> bool:\n    a, b, c = sorted([x, y, z])\n    if a + b <= c:\n        return False\n    return a * a + b * b == c * c"
    },
    {
        "id":318,
        "response":"import typing\n\ndef rotate_left(list1: typing.List[typing.Any], m: int, n: int) -> typing.List[typing.Any]:\n    if n == 0:\n        return list1\n    k = m % n\n    return list1[k:] + list1[:k]"
    },
    {
        "id":319,
        "response":"import typing\n\ndef neg_count(lst: typing.List[int]) -> int:\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "id":320,
        "response":""
    },
    {
        "id":321,
        "response":"import typing\n\ndef count_unset_bits(n: int) -> int:\n    if n == 0:\n        return 1\n    binary_representation = bin(n)[2:]\n    return binary_representation.count('0')"
    },
    {
        "id":322,
        "response":"import collections\n\ndef char_frequency(str1: str) -> dict:\n    freq = {}\n    for ch in str1:\n        freq[ch] = freq.get(ch, 0) + 1\n    return freq"
    },
    {
        "id":323,
        "response":"import typing\n\ndef Sort(sub_li: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    return sorted(sub_li, key=lambda x: x[1])"
    },
    {
        "id":324,
        "response":"import typing\n\ndef check_Validity(a: float, b: float, c: float) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return True"
    },
    {
        "id":325,
        "response":"import typing\n\ndef ap_sum(a: int, n: int, d: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (2 * a + (n - 1) * d) \/\/ 2\n\n# Test cases\nassert ap_sum(1, 5, 1) == 15\nassert ap_sum(10, 1, 3) == 10\nassert ap_sum(3, 4, 0) == 12\nassert ap_sum(7, 3, -2) == 12\nassert ap_sum(0, 0, 5) == 0"
    },
    {
        "id":326,
        "response":"def check_monthnum(monthname1):\n    if not isinstance(monthname1, str):\n        return False\n    return monthname1.strip().lower() == \"february\""
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text):\n    text = text.strip()\n    if not text:\n        return \"\"\n    while text and not text[-1].isalnum():\n        text = text[:-1]\n    if not text:\n        return \"\"\n    return text.split()[-1]"
    },
    {
        "id":328,
        "response":"import collections\n\ndef check_Equality(s: str) -> int:\n    if not s:\n        return 0\n    freq = collections.Counter(s)\n    return sum(count * (count + 1) \/\/ 2 for count in freq.values())"
    },
    {
        "id":329,
        "response":"import math\n\ndef find_Divisor(x: int, y: int) -> int:\n    if x == y:\n        return x\n    return 1"
    },
    {
        "id":330,
        "response":"import typing\n\ndef sum_three_smallest_nums(lst: typing.List[int]) -> int:\n    positives = [x for x in lst if x > 0]\n    if not positives:\n        return 0\n    positives.sort()\n    return sum(positives[:3])"
    },
    {
        "id":331,
        "response":"import typing\n\ndef set_to_tuple(s: typing.Set[typing.Any]) -> tuple:\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"import heapq\nfrom typing import List\n\ndef find_smallest_range(lists: List[List[int]]) -> List[int]:\n    k = len(lists)\n    heap = []\n    current_max = float('-inf')\n    for i, lst in enumerate(lists):\n        val = lst[0]\n        heapq.heappush(heap, (val, i, 0))\n        if val > current_max:\n            current_max = val\n    best_range = [heap[0][0], current_max]\n    while True:\n        current_min, i, idx = heapq.heappop(heap)\n        if current_max - current_min < best_range[1] - best_range[0]:\n            best_range = [current_min, current_max]\n        if idx + 1 == len(lists[i]):\n            break\n        next_val = lists[i][idx + 1]\n        heapq.heappush(heap, (next_val, i, idx + 1))\n        if next_val > current_max:\n            current_max = next_val\n    return best_range"
    },
    {
        "id":333,
        "response":"import typing\n\ndef dig_let(s: str) -> typing.Tuple[int, int]:\n    letters = 0\n    digits = 0\n    for ch in s:\n        if ch.isalpha():\n            letters += 1\n        elif ch.isdigit():\n            digits += 1\n    return letters, digits"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n: int, m: int) -> int:\n    if m < 0 or n > m:\n        return 0\n    if n < 0:\n        n = 0\n    start = math.isqrt(n)\n    if start * start < n:\n        start += 1\n    end = math.isqrt(m)\n    return max(0, end - start + 1)"
    },
    {
        "id":335,
        "response":"from typing import List\n\ndef diff_consecutivenums(nums: List[int]) -> List[int]:\n    return [nums[i + 1] - nums[i] for i in range(len(nums) - 1)]"
    },
    {
        "id":336,
        "response":"import typing\n\ndef zigzag(n: int, k: int) -> int"
    },
    {
        "id":337,
        "response":""
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n: int, r: int) -> int:\n    if n < 0 or r < 0 or r > n or (n + r) % 2 != 0:\n        return 0\n    k = (n + r) \/\/ 2\n    return math.comb(n, k) - math.comb(n, k + 1) if k + 1 <= n else math.comb(n, k)"
    },
    {
        "id":339,
        "response":"import typing\n\ndef check(string: str) -> bool:\n    return bool(string) and set(string).issubset({'0', '1'})"
    },
    {
        "id":340,
        "response":"import collections\n\ndef minimum_Length(s: str) -> str:\n    if not s:\n        return \"\"\n    freq = collections.Counter(s)\n    max_freq = max(freq.values())\n    for ch in s:\n        if freq[ch] == max_freq:\n            remove_char = ch\n            break\n    return \"\".join(ch for ch in s if ch != remove_char)"
    },
    {
        "id":341,
        "response":"import typing\n\ndef first_Element(arr: typing.List[int], n: int, k: int) -> int:\n    if k <= 0 or n == 0:\n        return -1\n    counts = {}\n    for num in arr:\n        counts[num] = counts.get(num, 0) + 1\n        if counts[num] == k:\n            return num\n    return -1"
    },
    {
        "id":342,
        "response":"import typing\n\ndef unique_Characters(s: str) -> bool:\n    return len(s) == len(set(s))"
    },
    {
        "id":343,
        "response":"import typing\n\ndef remove_column(list1: typing.List[typing.List[typing.Any]], n: int) -> typing.List[typing.List[typing.Any]]:\n    return [row[:n] + row[n+1:] if n < len(row) else row[:] for row in list1]"
    },
    {
        "id":344,
        "response":"import typing\n\ndef tn_ap(a: typing.Any, n: int, d: typing.Any) -> typing.Any:\n    if n <= 0:\n        return None\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":""
    },
    {
        "id":346,
        "response":""
    },
    {
        "id":347,
        "response":"import typing\n\ndef find_max(test_list: typing.List[typing.Tuple[int, ...]]) -> typing.Optional[int]:\n    max_val = None\n    for tup in test_list:\n        for val in tup:\n            if max_val is None or val > max_val:\n                max_val = val\n    return max_val"
    },
    {
        "id":348,
        "response":"import typing\n\ndef moddiv_list(nums1: typing.List[int], nums2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda pair: pair[0] % pair[1], zip(nums1, nums2)))"
    },
    {
        "id":349,
        "response":"import math\n\ndef Check_Solution(a: float, b: float, c: float) -> bool:\n    if a == 0:\n        return False\n    d = b * b - 4 * a * c\n    if d < 0:\n        return False\n    if d == 0:\n        root = -b \/ (2 * a)\n        return abs(root) < 1e-12\n    sqrt_d = math.sqrt(d)\n    r1 = (-b + sqrt_d) \/ (2 * a)\n    r2 = (-b - sqrt_d) \/ (2 * a)\n    eps = 1e-9\n    return abs(r1 - 2 * r2) < eps or abs(r2 - 2 * r1) < eps"
    },
    {
        "id":350,
        "response":""
    },
    {
        "id":351,
        "response":"def remove_empty(list1):\n    return [x for x in list1 if not (isinstance(x, list) and len(x) == 0)]"
    },
    {
        "id":352,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    counter = collections.Counter(nums)\n    return max(counter, key=counter.get)"
    },
    {
        "id":353,
        "response":"import typing\n\ndef add_K_element(test_list: typing.Tuple[typing.Any, ...], K: typing.Union[int, float]) -> typing.Tuple[typing.Any, ...]:\n    return tuple(x + K for x in test_list)"
    },
    {
        "id":354,
        "response":"def make_flip(ch: str) -> int:\n    n = len(ch)\n    if n <= 1:\n        return 0\n    count1 = 0\n    count2 = 0\n    for i, c in enumerate(ch):\n        if c != ('0' if i % 2 == 0 else '1'):\n            count1 += 1\n        if c != ('1' if i % 2 == 0 else '0'):\n            count2 += 1\n    return min(count1, count2)"
    },
    {
        "id":355,
        "response":"def count_Digit(n):\n    return len(str(abs(n)))"
    },
    {
        "id":356,
        "response":""
    },
    {
        "id":357,
        "response":"import typing\n\nclass TreeNode:\n    def __init__(self, data: typing.Any, left: typing.Optional[\"TreeNode\"]=None, right: typing.Optional[\"TreeNode\"]=None):\n        self.data = data\n        self.left = left\n        self.right = right\n\ndef is_balanced(root: typing.Optional[TreeNode]) -> bool:\n    def helper(node: typing.Optional[TreeNode]) -> tuple[int, bool]:\n        if node is None:\n            return 0, True\n        lh, lb = helper(node.left)\n        rh, rb = helper(node.right)\n        h = max(lh, rh) + 1\n        balanced = lb and rb and abs(lh - rh) <= 1\n        return h, balanced\n    return helper(root)[1]"
    },
    {
        "id":358,
        "response":"import typing\n\ndef repeat_tuples(test_tup: typing.Tuple, N: int) -> typing.Tuple:\n    return test_tup * N"
    },
    {
        "id":359,
        "response":"def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)"
    },
    {
        "id":360,
        "response":"import typing\n\ndef float_sort(price: typing.Tuple[float, ...]) -> typing.Tuple[float, ...]:\n    return tuple(sorted(price))"
    },
    {
        "id":361,
        "response":"import typing\n\ndef smallest_missing(A: typing.List[int], left_element: int, right_element: int) -> int:\n    current = left_element\n    for num in A:\n        if num < current:\n            continue\n        if num > right_element:\n            break\n        if num > current:\n            return current\n        if num == current:\n            current += 1\n    if current <= right_element:\n        return current\n    return right_element + 1"
    },
    {
        "id":362,
        "response":"import heapq\nfrom typing import List\n\ndef heap_assending(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    heap = nums[:]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n"
    },
    {
        "id":363,
        "response":"import typing\n\ndef volume_cuboid(l: float, w: float, h: float) -> float:\n    return l * w * h"
    },
    {
        "id":364,
        "response":"import itertools\n\ndef permute_string(s: str):\n    return [''.join(p) for p in itertools.permutations(s)]"
    },
    {
        "id":365,
        "response":"import math\n\ndef round_num(n, m):\n    if m == 0:\n        raise ValueError(\"m must not be zero\")\n    quotient = n \/ m\n    floor_q = math.floor(quotient)\n    ceil_q = math.ceil(quotient)\n    diff = quotient - floor_q\n    if diff < 0.5:\n        nearest = floor_q\n    elif diff > 0.5:\n        nearest = ceil_q\n    else:\n        nearest = ceil_q if n >= 0 else floor_q\n    return nearest * m"
    },
    {
        "id":366,
        "response":"import typing\n\ndef remove_replica(test_tup: typing.Tuple[typing.Any, ...]) -> typing.Tuple[typing.Any, ...]:\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n        else:\n            result.append(None)\n    return tuple(result)"
    },
    {
        "id":367,
        "response":"import typing\n\ndef remove_Char(s: str, c: str) -> str:\n    if not c:\n        return s\n    return s.replace(c, '')"
    },
    {
        "id":368,
        "response":"import typing\n\ndef move_first(test_list: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if not test_list:\n        return test_list\n    return [test_list[-1]] + test_list[:-1]"
    },
    {
        "id":369,
        "response":"import typing\n\ndef surfacearea_cuboid(l: typing.Union[int, float], w: typing.Union[int, float], h: typing.Union[int, float]) -> float:\n    return 2 * (l * w + w * h + h * l)"
    },
    {
        "id":370,
        "response":"import typing\n\ndef multi_list(rownum: int, colnum: int) -> typing.List[typing.List[int]]:\n    return [[0] * colnum for _ in range(rownum)]"
    },
    {
        "id":371,
        "response":"import typing\n\ndef index_on_inner_list(list_data: typing.List[typing.List[typing.Any]], index_no: int) -> typing.List[typing.Any]:\n    return [inner[index_no] for inner in list_data]"
    },
    {
        "id":372,
        "response":"import typing\n\ndef find_rotation_count(A: typing.List[int]) -> int:\n    if not A:\n        return 0\n    low, high = 0, len(A) - 1\n    while low <= high:\n        if A[low] <= A[high]:\n            return low\n        mid = (low + high) \/\/ 2\n        next_idx = (mid + 1) % len(A)\n        prev_idx = (mid - 1 + len(A)) % len(A)\n        if A[mid] > A[next_idx]:\n            return next_idx\n        if A[mid] < A[prev_idx]:\n            return mid\n        if A[low] <= A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0"
    },
    {
        "id":373,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    mask = 0\n    i = 1\n    while i < n.bit_length() + 1:\n        mask |= 1 << i\n        i += 2\n    return n ^ mask"
    },
    {
        "id":374,
        "response":"import typing\n\ndef frequency_Of_Smallest(n: int, arr: typing.List[int]) -> int:\n    if not arr:\n        return 0\n    smallest = min(arr)\n    return arr.count(smallest)"
    },
    {
        "id":375,
        "response":"import functools\n\n@functools.lru_cache(maxsize=None)\ndef get_perrin(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "id":376,
        "response":"import typing\n\ndef swap_count(s: str) -> int:\n    if len(s) % 2 != 0:\n        return -1\n    if s.count('(') != s.count(')'):\n        return -1\n    swaps = 0\n    balance = 0\n    for ch in s:\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n            if balance < 0:\n                swaps += 1\n                balance = 0\n    return swaps"
    },
    {
        "id":377,
        "response":"def even_or_odd(N):\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "id":378,
        "response":"def highest_Power_of_2(n):\n    return 1 << (n.bit_length() - 1) if n > 0 else 0"
    },
    {
        "id":379,
        "response":"import sys\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\nif __name__ == \"__main__\":\n    assert find_lucas(0) == 2\n    assert find_lucas(1) == 1\n    assert find_lucas(2) == 3\n    assert find_lucas(5) == 11\n    assert find_lucas(20) == 15127\n    print(\"All tests passed.\")"
    },
    {
        "id":380,
        "response":"import typing\n\ndef add_string(lst: typing.List[str], string: str) -> typing.List[str]:\n    return [string + item for item in lst]"
    },
    {
        "id":381,
        "response":"import typing\n\ndef convert_list_dictionary(l1: typing.List[typing.Any], l2: typing.List[typing.Any], l3: typing.List[typing.Any]) -> typing.Dict[typing.Any, typing.Dict[typing.Any, typing.Any]]:\n    return {k: {subk: val} for k, subk, val in zip(l1, l2, l3)}"
    },
    {
        "id":382,
        "response":"import functools\n\n@functools.lru_cache(maxsize=None)\ndef get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return max(n, get_max_sum(n \/\/ 2) + get_max_sum(n \/\/ 3) + get_max_sum(n \/\/ 4) + get_max_sum(n \/\/ 5))"
    },
    {
        "id":383,
        "response":"import typing\n\ndef max_length_list(input_list: typing.List[typing.List]) -> typing.List:\n    if not input_list:\n        return []\n    return max(input_list, key=lambda x: len(x))"
    },
    {
        "id":384,
        "response":"import typing\n\ndef check_distinct(test_tup: typing.Tuple) -> bool:\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "id":385,
        "response":"import collections\n\ndef first_non_repeating_character(str1):\n    if not str1:\n        return None\n    counts = collections.Counter(str1)\n    for ch in str1:\n        if counts[ch] == 1:\n            return ch\n    return None"
    },
    {
        "id":386,
        "response":"import typing\n\ndef check_char(string: str) -> bool:\n    if not string:\n        return False\n    return string[0] == string[-1]"
    },
    {
        "id":387,
        "response":"import typing\n\ndef median_numbers(a: typing.Any, b: typing.Any, c: typing.Any) -> typing.Any:\n    return sorted([a, b, c])[1]"
    },
    {
        "id":388,
        "response":"import typing\n\ndef sum_of_digits(nums: typing.List[int]) -> typing.List[int]:\n    return [sum(int(d) for d in str(abs(n))) for n in nums]"
    },
    {
        "id":389,
        "response":"from typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"import collections\n\ndef extract_freq(test_list):\n    return dict(collections.Counter(test_list))"
    },
    {
        "id":391,
        "response":"import typing\n\ndef add_nested_tuples(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    def add_pair(a: typing.Any, b: typing.Any) -> typing.Any:\n        if isinstance(a, tuple) and isinstance(b, tuple):\n            return tuple(add_pair(x, y) for x, y in zip(a, b))\n        return a + b\n    return tuple(add_pair(x, y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"import math\n\ndef ncr_modp(n: int, r: int, p: int) -> int:\n    if r < 0 or r > n:\n        return 0\n    if p == 1:\n        return 0\n    fact = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    inv_fact = [1] * (n + 1)\n    inv_fact[n] = pow(fact[n], p - 2, p)\n    for i in range(n, 0, -1):\n        inv_fact[i - 1] = (inv_fact[i] * i) % p\n    return (fact[n] * inv_fact[r] % p) * inv_fact[n - r] % p"
    },
    {
        "id":393,
        "response":"import urllib.parse\nfrom typing import Any\n\ndef is_valid_URL(url: str) -> bool:\n    try:\n        result = urllib.parse.urlparse(url)\n        return result.scheme in (\"http\", \"https\", \"ftp\") and bool(result.netloc)\n    except Exception:\n        return False"
    },
    {
        "id":394,
        "response":"def minimum(a, b):\n    return a if a < b else b"
    },
    {
        "id":395,
        "response":"import typing\n\ndef check_tuplex(tuplex, tuple1):\n    return tuplex in tuple1"
    },
    {
        "id":396,
        "response":"import typing\n\ndef find_Parity(x: int) -> str:\n    return \"Even\" if x % 2 == 0 else \"Odd\""
    },
    {
        "id":397,
        "response":"import typing\n\ndef rearrange_bigger(n: int) -> int:\n    digits = [int(d) for d in str(n)]\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i < 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1 :] = reversed(digits[i + 1 :])\n    return int(\"\".join(map(str, digits)))"
    },
    {
        "id":398,
        "response":"import heapq\nfrom typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    n1, n2 = len(nums1), len(nums2)\n    result: List[List[int]] = []\n    heap: List[tuple[int, int, int]] = []\n    for i in range(min(n1, k)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    while heap and len(result) < k:\n        s, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < n2:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return result"
    },
    {
        "id":399,
        "response":"from typing import List, Tuple, Optional\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> Optional[Tuple[int, int]]:\n    if not list1:\n        return None\n    min_tuple = list1[0]\n    min_product = min_tuple[0] * min_tuple[1]\n    for t in list1[1:]:\n        prod = t[0] * t[1]\n        if prod < min_product:\n            min_product = prod\n            min_tuple = t\n    return min_tuple"
    },
    {
        "id":400,
        "response":"from typing import List\n\ndef min_val(listval: List[int]) -> int:\n    if not listval:\n        raise ValueError(\"min() arg is an empty sequence\")\n    min_value = listval[0]\n    for x in listval[1:]:\n        if x < min_value:\n            min_value = x\n    return min_value"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word: str) -> str:\n    if not word:\n        return word\n    parts = [p for p in re.split('_+', word) if p]\n    if not parts:\n        return ''\n    if len(parts) == 1:\n        return parts[0]\n    first, rest = parts[0], parts[1:]\n    return first + ''.join(p.capitalize() for p in rest)"
    },
    {
        "id":402,
        "response":"import typing\n\ndef remove_odd(l: typing.List[int]) -> typing.List[int]:\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "id":403,
        "response":"import typing\n\ndef extract_nth_element(list1: typing.List[tuple], n: int) -> typing.List:\n    result = []\n    for t in list1:\n        try:\n            result.append(t[n])\n        except IndexError:\n            pass\n    return result"
    },
    {
        "id":404,
        "response":"import typing\n\ndef overlapping(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    set2 = set(list2)\n    seen = set()\n    result = []\n    for item in list1:\n        if item in set2 and item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result"
    },
    {
        "id":405,
        "response":""
    },
    {
        "id":406,
        "response":""
    },
    {
        "id":407,
        "response":"import typing\n\ndef group_tuples(Input: typing.List[typing.Tuple]) -> typing.Any:\n    if not Input:\n        return None\n    first = None\n    for t in Input:\n        if not t:\n            return None\n        if first is None:\n            first = t[0]\n        elif t[0] != first:\n            return None\n    return first"
    },
    {
        "id":408,
        "response":"import typing\n\ndef Find_Max(lst: typing.List[int]) -> typing.List[int]:\n    if not lst:\n        return []\n    best_start, best_len = 0, 1\n    cur_start, cur_len = 0, 1\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            cur_len += 1\n        else:\n            if cur_len > best_len:\n                best_start, best_len = cur_start, cur_len\n            cur_start = i\n            cur_len = 1\n    if cur_len > best_len:\n        best_start, best_len = cur_start, cur_len\n    return lst[best_start:best_start + best_len]"
    },
    {
        "id":409,
        "response":"import typing\n\ndef round_and_sum(list1: typing.List[float]) -> int:\n    total = sum(round(x) for x in list1)\n    return total * len(list1)"
    },
    {
        "id":410,
        "response":"import typing\n\ndef cube_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 2 * n * n * (n + 1) * (n + 1)"
    },
    {
        "id":411,
        "response":"import typing\n\ndef concatenate_tuple(test_tup: tuple, delimiter: str) -> str:\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "id":412,
        "response":"import typing\n\ndef find_Average_Of_Cube(n: int) -> float:\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    return n * (n + 1) ** 2 \/ 4."
    },
    {
        "id":413,
        "response":"import typing\n\ndef get_maxgold(gold: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if m == 0 or n == 0:\n        return 0\n    dp = [row[:] for row in gold]\n    for j in range(n - 2, -1, -1):\n        for i in range(m):\n            max_next = dp[i][j + 1]\n            if i > 0:\n                max_next = max(max_next, dp[i - 1][j + 1])\n            if i < m - 1:\n                max_next = max(max_next, dp[i + 1][j + 1])\n            dp[i][j] += max_next\n    return max(dp[i][0] for i in range(m))"
    },
    {
        "id":414,
        "response":"import typing\n\ndef extract_rear(test_tuple: tuple) -> tuple:\n    return tuple(s[-1] if s else '' for s in test_tuple)"
    },
    {
        "id":415,
        "response":"from typing import List, Any\n\ndef count_element_in_list(list1: List[Any], x: Any) -> int:\n    count = 0\n    for sub in list1:\n        try:\n            if x in sub:\n                count += 1\n        except TypeError:\n            pass\n    return count"
    },
    {
        "id":416,
        "response":"import typing\n\ndef filter_oddnumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt: str) -> str:\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "id":418,
        "response":"import typing\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list"
    },
    {
        "id":419,
        "response":"import typing\n\ndef and_tuples(test_tup1: typing.Tuple, test_tup2: typing.Tuple) -> typing.Tuple:\n    set2 = set(test_tup2)\n    seen = set()\n    result = []\n    for item in test_tup1:\n        if item in set2 and item not in seen:\n            result.append(item)\n            seen.add(item)\n    return tuple(result)"
    },
    {
        "id":420,
        "response":"import math\n\ndef parabola_directrix(a: float, b: float, c: float) -> float:\n    if a == 0:\n        raise ValueError(\"Coefficient a cannot be zero for a parabola\")\n    h = -b \/ (2 * a)\n    k = a * h * h + b * h + c\n    return k - 1 \/ (4 * a)"
    },
    {
        "id":421,
        "response":"import typing\n\ndef common_element(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> bool:\n    try:\n        return not set(list1).isdisjoint(set(list2))\n    except TypeError:\n        for item in list1:\n            if item in list2:\n                return True\n        return False"
    },
    {
        "id":422,
        "response":"import typing\n\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":"from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    if not arr:\n        return True\n    return number > max(arr)"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text: str) -> bool:\n    return 'B' in text"
    },
    {
        "id":425,
        "response":"def last_Digit(n):\n    return abs(n) % 10"
    },
    {
        "id":426,
        "response":"import typing\n\ndef neg_nos(list1: typing.List[int]) -> typing.List[int]:\n    return [x for x in list1 if isinstance(x, (int, float)) and x < 0]"
    },
    {
        "id":427,
        "response":"import typing\n\ndef remove_odd(str1: str) -> str:\n    return str1[::2]"
    },
    {
        "id":428,
        "response":"import typing\n\ndef count_bidirectional(test_list: typing.List[tuple[int, int]]) -> int:\n    seen: set[tuple[int, int]] = set()\n    counted: set[frozenset[int]] = set()\n    count = 0\n    for a, b in test_list:\n        if (b, a) in seen:\n            key = frozenset((a, b))\n            if key not in counted:\n                counted.add(key)\n                count += 1\n        seen.add((a, b))\n    return count"
    },
    {
        "id":429,
        "response":"import typing\n\ndef multiple_to_single(L: typing.List[int]) -> int:\n    if not L:\n        return 0\n    for x in L:\n        if not isinstance(x, int):\n            raise TypeError(\"All elements must be integers\")\n        if x < 0:\n            raise ValueError(\"Negative numbers are not allowed\")\n    return int(''.join(str(x) for x in L))"
    },
    {
        "id":430,
        "response":"import re\n\ndef find_adverb_position(text: str):\n    if not text:\n        return []\n    tokens = text.split()\n    verb_endings = (\"\u09bf\", \"\u09c7\", \"\u09c7\u09a8\")\n    result = []\n    for idx, token in enumerate(tokens):\n        stripped = re.sub(r'[^0-9A-Za-z\\u0980-\\u09FF]+$', '', token)\n        if stripped and stripped.endswith(verb_endings):\n            result.append((token, idx))\n    return result"
    },
    {
        "id":431,
        "response":"def surfacearea_cube(l):\n    return 6 * l * l"
    },
    {
        "id":432,
        "response":"import typing\n\ndef positive_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    positive = sum(1 for x in nums if x > 0)\n    return positive \/ len(nums)"
    },
    {
        "id":433,
        "response":"import typing\n\ndef largest_neg(list1: typing.List[int]) -> typing.Optional[int]:\n    negatives = [x for x in list1 if x < 0]\n    if negatives:\n        return max(negatives)\n    return None"
    },
    {
        "id":434,
        "response":"import typing\n\ndef trim_tuple(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    if K <= 0:\n        return test_list[:]\n    trimmed = []\n    for t in test_list:\n        if not isinstance(t, tuple):\n            trimmed.append(t)\n            continue\n        trimmed.append(t[:-K] if K <= len(t) else tuple())\n    return trimmed"
    },
    {
        "id":435,
        "response":"import typing\n\ndef index_multiplication(test_tup1: typing.Tuple[float, ...], test_tup2: typing.Tuple[float, ...]) -> typing.Tuple[float, ...]:\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":"import typing\n\ndef count_Occurrence(tup: typing.Tuple, lst: typing.List) -> typing.Tuple:\n    return tup + tuple(lst)"
    },
    {
        "id":437,
        "response":"import typing\n\ndef cube_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x ** 3, nums))"
    },
    {
        "id":438,
        "response":"def cal_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    m = n \/\/ 2\n    return m * (m + 1)"
    },
    {
        "id":439,
        "response":"import math\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    if (x1 == x2 and y1 == y2) or (x1 == x3 and y1 == y3) or (x2 == x3 and y2 == y3):\n        return False\n    cross = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)\n    if math.isclose(cross, 0.0, abs_tol=1e-9):\n        return False\n    return True"
    },
    {
        "id":440,
        "response":"from typing import List\n\ndef extract_string(strings: List[str], l: int) -> List[str]:\n    if not isinstance(strings, list):\n        return []\n    return [s for s in strings if isinstance(s, str) and len(s) == l]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1: str) -> str:\n    \"\"\"\n    Remove all whitespace characters (spaces, tabs, newlines, etc.) from the given string\n    using a regular expression.\n\n    Parameters\n    ----------\n    text1 : str\n        The input string from which whitespace should be removed.\n\n    Returns\n    -------\n    str\n        The string with all whitespace characters stripped out.\n    \"\"\"\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":"import typing\n\ndef loss_amount(actual_cost: typing.Any, sale_amount: typing.Any) -> typing.Optional[int]:\n    if isinstance(actual_cost, (int, float)) and isinstance(sale_amount, (int, float)):\n        if actual_cost > sale_amount:\n            return int(actual_cost - sale_amount)\n    return None"
    },
    {
        "id":443,
        "response":""
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    words = re.findall(r\"\\b\\w+\\b\", text)\n    return [w for w in words if 'z' in w.lower()]"
    },
    {
        "id":445,
        "response":"from typing import Any\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    if not isinstance(monthnum2, int):\n        return False\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}"
    },
    {
        "id":446,
        "response":"import typing\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":""
    },
    {
        "id":448,
        "response":"import typing\n\ndef rectangle_area(l: typing.Union[int, float], b: typing.Union[int, float]) -> typing.Union[int, float]:\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "id":450,
        "response":"def Extract(lst):\n    return [sub[0] for sub in lst if sub]"
    },
    {
        "id":451,
        "response":""
    },
    {
        "id":452,
        "response":"from typing import List, Tuple\n\ndef combinations_list(list1: List) -> List[Tuple]:\n    result: List[List] = [[]]\n    for elem in list1:\n        result += [curr + [elem] for curr in result]\n    return [tuple(r) for r in result]"
    },
    {
        "id":453,
        "response":"import typing\n\ndef max_subarray_product(arr: typing.List[int]) -> int:\n    if not arr:\n        return 0\n    max_prod = min_prod = result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_prod, min_prod = min_prod, max_prod\n        max_prod = max(num, max_prod * num)\n        min_prod = min(num, min_prod * num)\n        result = max(result, max_prod)\n    return result"
    },
    {
        "id":454,
        "response":"import typing\n\ndef check_value(dict: typing.Dict[typing.Any, typing.Any], n: int) -> bool:\n    return len(dict) == n and (len(set(dict.values())) <= 1)"
    },
    {
        "id":455,
        "response":"import typing\n\ndef drop_empty(dict1: typing.Dict[typing.Any, typing.Any]) -> typing.Dict[typing.Any, typing.Any]:\n    return {k: v for k, v in dict1.items() if v is not None and not (isinstance(v, (str, list, dict)) and len(v) == 0)}"
    },
    {
        "id":456,
        "response":"```python\nfrom typing import List\n\ndef find_peak_util(arr: List[int], low: int, high: int, n: int) -> int:\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        left = arr[mid - 1] if mid > 0 else float('-inf')\n        right = arr[mid + 1] if mid < n - 1 else float('-inf')\n        if arr[mid] >= left and arr[mid] >= right:\n            return mid\n        if left > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n```"
    },
    {
        "id":457,
        "response":"import typing\n\ndef decimal_to_Octal(deciNum: int) -> str:\n    if deciNum == 0:\n        return \"0\"\n    sign = \"-\" if deciNum < 0 else \"\"\n    num = abs(deciNum)\n    digits = []\n    while num:\n        digits.append(str(num % 8))\n        num \/\/= 8\n    return sign + \"\".join(reversed(digits))"
    },
    {
        "id":458,
        "response":""
    },
    {
        "id":459,
        "response":"import typing\n\ndef max_profit(price: typing.List[int], k: int) -> int:\n    if not price or k == 0:\n        return 0\n    n = len(price)\n    if k >= n \/\/ 2:\n        total = 0\n        for i in range(1, n):\n            diff = price[i] - price[i - 1]\n            if diff > 0:\n                total += diff\n        return total\n    dp = [[0] * n for _ in range(k + 1)]\n    for t in range(1, k + 1):\n        best = -price[0]\n        for i in range(1, n):\n            dp[t][i] = max(dp[t][i - 1], price[i] + best)\n            best = max(best, dp[t - 1][i] - price[i])\n    return dp[k][n - 1]"
    },
    {
        "id":460,
        "response":"import typing\n\ndef add_pairwise(test_tup: typing.Tuple[float, ...]) -> typing.Tuple[float, ...]:\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))"
    },
    {
        "id":461,
        "response":"import typing\n\ndef find_remainder(arr: typing.List[int], lens: int, n: int) -> int:\n    if n == 0:\n        raise ZeroDivisionError(\"Modulo by zero\")\n    prod = 1\n    limit = lens if lens <= len(arr) else len(arr)\n    for i in range(limit):\n        prod = (prod * arr[i]) % n\n    return prod"
    },
    {
        "id":462,
        "response":"import typing\n\ndef check_Consecutive(l: typing.List[int]) -> bool:\n    if not l:\n        return True\n    return max(l) - min(l) == len(l) - 1\n"
    },
    {
        "id":463,
        "response":"from collections import Counter\n\ndef tuple_intersection(test_list1, test_list2):\n    counter = Counter(test_list2)\n    result = []\n    for t in test_list1:\n        if counter[t] > 0:\n            result.append(t)\n            counter[t] -= 1\n    return result"
    },
    {
        "id":464,
        "response":"def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)"
    },
    {
        "id":465,
        "response":"from typing import Dict\n\ndef sort_counter(dict1: Dict[str, int]) -> Dict[str, int]:\n    return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))"
    },
    {
        "id":466,
        "response":"import typing\n\ndef big_sum(nums: typing.List[int]) -> int:\n    if not nums:\n        return 0\n    return min(nums) + max(nums)"
    },
    {
        "id":467,
        "response":"import sys\n\ndef is_lower(string):\n    return string.lower()"
    },
    {
        "id":468,
        "response":"def remove_lowercase(str1):\n    return ''.join(ch for ch in str1 if not ch.islower())"
    },
    {
        "id":469,
        "response":"import typing\n\ndef first_Digit(n: int) -> int:\n    n = abs(n)\n    if n == 0:\n        return 0\n    while n >= 10:\n        n \/\/= 10\n    return n"
    },
    {
        "id":470,
        "response":"import collections\n\ndef get_max_occuring_char(str1):\n    if not str1:\n        return \"\"\n    freq = collections.Counter(str1)\n    max_count = max(freq.values())\n    for ch in str1:\n        if freq[ch] == max_count:\n            return ch\n    return \"\""
    },
    {
        "id":471,
        "response":"import typing\n\ndef is_subset_sum(arr: typing.List[int], n: int, target: int) -> bool:\n    if target == 0:\n        return True\n    if n == 0:\n        return False\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for i in range(n):\n        num = arr[i]\n        for s in range(target, num - 1, -1):\n            if dp[s - num]:\n                dp[s] = True\n    return dp[target]"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    return re.findall(r'[A-Z][a-z]', text)"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x):\n    if x <= 0:\n        raise ValueError(\"x must be a positive integer\")\n    n = 1\n    fact = 1\n    while True:\n        if fact % x == 0:\n            return n\n        n += 1\n        fact *= n\n        if n > x and fact < x:\n            # factorial cannot become smaller, so break to avoid infinite loop\n            return n\n        # handle potential overflow by breaking if fact becomes too large\n        if fact > 10**18 and n > x:\n            # fallback to prime factor method\n            break\n    # prime factorization fallback\n    def prime_factors(num):\n        factors = {}\n        d = 2\n        while d * d <= num:\n            while num % d == 0:\n                factors[d] = factors.get(d, 0) + 1\n                num \/\/= d\n            d += 1\n        if num > 1:\n            factors[num] = factors.get(num, 0) + 1\n        return factors\n    factors = prime_factors(x)\n    def min_n_for_prime(p, e):\n        n = 0\n        while True:\n            n += 1\n            count = 0\n            power = p\n            while power <= n:\n                count += n \/\/ power\n                power *= p\n            if count >= e:\n                return n\n    return max(min_n_for_prime(p, e) for p, e in factors.items())"
    },
    {
        "id":474,
        "response":"def remove_matching_tuple(test_list1, test_list2):\n    to_remove = set(test_list2)\n    return [t for t in test_list1 if t not in to_remove]"
    },
    {
        "id":475,
        "response":"from typing import List, Optional\n\ndef is_palindrome(n: int) -> bool:\n    s = str(n)\n    return s == s[::-1]\n\ndef largest_palindromic_number(arr: List[int]) -> Optional[int]:\n    max_pal = None\n    for num in arr:\n        if num < 0:\n            continue\n        if is_palindrome(num):\n            if max_pal is None or num > max_pal:\n                max_pal = num\n    return max_pal\n"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n, r):\n    if r < 0 or r > n:\n        return 0\n    r = min(r, n - r)\n    result = 1\n    for i in range(1, r + 1):\n        result = result * (n - r + i) \/\/ i\n    return result"
    },
    {
        "id":477,
        "response":""
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    if a == 0:\n        return 0.0\n    return (5 * a * a) \/ (4 * math.tan(math.pi \/ 5))"
    },
    {
        "id":479,
        "response":"from typing import List\n\ndef frequency_Of_Largest(n: int, arr: List[int]) -> int:\n    if not arr:\n        return 0\n    largest = arr[0]\n    count = 0\n    for num in arr:\n        if num > largest:\n            largest = num\n            count = 1\n        elif num == largest:\n            count += 1\n    return count"
    },
    {
        "id":480,
        "response":"import typing\n\ndef extract_symmetric(test_list: typing.List[tuple]) -> typing.List[tuple]:\n    seen = set(test_list)\n    result = []\n    for t in test_list:\n        if (t[1], t[0]) in seen:\n            result.append(t)\n    return result"
    },
    {
        "id":481,
        "response":"import typing\n\ndef sum_gp(a: int, n: int, r: int) ->"
    },
    {
        "id":482,
        "response":"import typing\n\ndef binary_search(item_list: typing.List[int], item: int) -> int:\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "id":483,
        "response":""
    },
    {
        "id":484,
        "response":"import typing\n\ndef binary_to_integer(test_tup: typing.Tuple[int, ...]) -> int:\n    result = 0\n    for bit in test_tup:\n        result = (result << 1) | bit\n    return result"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\n\ndef heap_queue_smallest(nums, n):\n    if n == 0:\n        return None\n    heap = nums[:n]\n    heapq.heapify(heap)\n    return heap[0]"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    s = math.sqrt(r * r + h * h)\n    return math.pi * r * (r + s)"
    },
    {
        "id":488,
        "response":"def gcd(x: int, y: int) -> int:\n    while y:\n        x, y = y, x % y\n    return abs(x)"
    },
    {
        "id":489,
        "response":"import typing\n\ndef diameter_circle(r: float) -> float:\n    return 2 * r"
    },
    {
        "id":490,
        "response":"import typing\n\ndef concatenate_elements(list: typing.List[typing.Any]) -> str:\n    return \"\".join(str(x) for x in list)"
    },
    {
        "id":491,
        "response":"import typing\n\ndef min_cost(cost: list[list[int]], m: int, n: int) -> int:\n    if not cost or m < 0 or n < 0 or m >= len(cost) or n >= len(cost[0]):\n        return 0\n    rows, cols = len(cost), len(cost[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, cols):\n        dp[0"
    },
    {
        "id":492,
        "response":"import typing\n\ndef similar_elements(test_tup1: typing.Tuple, test_tup2: typing.Tuple) -> typing.Tuple:\n    set2 = set(test_tup2)\n    seen = set()\n    result = []\n    for item in test_tup1:\n        if item in set2 and item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":493,
        "response":"import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    limit = math.isqrt(n)\n    i = 3\n    while i <= limit:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "id":494,
        "response":"import heapq\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    if n <= 0 or not nums:\n        return []\n    return heapq.nlargest(n, nums)"
    },
    {
        "id":495,
        "response":"import typing\n\ndef count_ways(n: int) -> int:\n    if n % 2 == 1:\n        return 0\n    if n == 0:\n        return 1\n    if n == 2:\n        return 3\n    f_prev_prev = 1  # f(0)\n    f_prev = 3      # f(2)\n    for i in range(4, n + 1, 2):\n        f_curr = 4 * f_prev - f_prev_prev\n        f_prev_prev, f_prev = f_prev, f_curr\n    return f_prev if n > 0 else f_prev_prev\n"
    },
    {
        "id":496,
        "response":"import typing\n\ndef is_one_bit_diff(a: int, b: int) -> bool:\n    diff = a ^ b\n    return diff != 0 and (diff & (diff - 1)) == 0\n\nif __name__ == \"__main__\":\n    assert is_one_bit_diff(5, 7) == True\n    assert is_one_bit_diff(8, 0) == True\n    assert is_one_bit_diff(10, 12) == False\n    assert is_one_bit_diff(0, 0) == False\n    assert is_one_bit_diff(15, 0) == False"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"import typing\n\ndef square_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x * x, nums))"
    },
    {
        "id":499,
        "response":"import typing\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    lps = [0] * n\n    length = 0\n    i = 1\n    while i < n:\n        if s[i] == s[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        else:\n            if length != 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n    period = n - lps[-1]\n    return period if n % period == 0 else n"
    },
    {
        "id":500,
        "response":"import typing\n\ndef small_nnum(list1: typing.List[int], n: int) -> typing.List[int]:\n    if n <= 0 or not list1:\n        return []\n    return sorted(list1)[:n]"
    }
]