[
    {
        "id":1,
        "response":"import sys\n\ndef remove_Occ(s: str, ch: str) -> str:\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first != -1 and last != -1 and first != last:\n        s = s[:last] + s[last + 1:]\n        s = s[:first] + s[first + 1:]\n    return s\n\nif __name__ == \"__main__\":\n    assert remove_Occ(\"banana\", \"a\") == \"bnna\"\n    assert remove_Occ(\"abracadabra\", \"a\") == \"brcadabr\"\n    assert remove_Occ(\"hello\", \"l\") == \"helo\"\n    assert remove_Occ(\"test\", \"t\") == \"es\"\n    assert remove_Occ(\"single\", \"x\") == \"single\"\n    assert remove_Occ(\"aa\", \"a\") == \"\"\n    print(\"All tests passed.\")"
    },
    {
        "id":2,
        "response":"import typing\n\ndef sort_matrix(M: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    return sorted(M, key=lambda row: sum(row))"
    },
    {
        "id":3,
        "response":"import collections\n\ndef count_common(words):\n    return dict(collections.Counter(words))"
    },
    {
        "id":4,
        "response":"import typing\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l"
    },
    {
        "id":5,
        "response":"import re\n\ndef split_lowerstring(text):\n    return [ch.lower() for ch in text if ch.isalpha()]"
    },
    {
        "id":6,
        "response":"import re\n\ndef text_lowercase_underscore(text: str) -> str:\n    match = re.search(r'[a-z]+', text)\n    return match.group(0) if match else \"\""
    },
    {
        "id":7,
        "response":"import typing\n\ndef square_perimeter(a: typing.Union[int, float]) -> typing.Union[int, float]:\n    \"\"\"\n    Return the perimeter of a square given the length of its side.\n\n    Parameters\n    ----------\n    a : float or int\n        Length of one side of the square.\n\n    Returns\n    -------\n    float or int\n        The perimeter of the square (4 times the side length).\n    \"\"\"\n    return 4 * a"
    },
    {
        "id":8,
        "response":"import re\n\ndef remove_chars(s: str, chars: str) -> str:\n    remove_set = set(chars)\n    return ''.join(ch for ch in s if ch not in remove_set)"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "id":10,
        "response":"import math\n\ndef is_woodall(x):\n    if x < 1:\n        return False\n    n = 1\n    while True:\n        val = n * (1 << n) - 1\n        if val == x:\n            return True\n        if val > x:\n            return False\n        n += 1"
    },
    {
        "id":11,
        "response":"import typing\n\ndef multiples_of_num(m: int, n: int) -> typing.List[int]:\n    if n <= 0:\n        return []\n    return [m * i for i in range(1, n + 1)]"
    },
    {
        "id":12,
        "response":"import typing\n\ndef find_first_duplicate(nums: typing.List[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1"
    },
    {
        "id":13,
        "response":"import typing\n\ndef maximum_Sum(list1: typing.List[typing.List[int]]) -> int:\n    if not list1:\n        return 0\n    overall_max = None\n    for sub in list1:\n        if not sub:\n            sub_max = 0\n        else:\n            current = best = sub[0]\n            for x in sub[1:]:\n                current = x if x > current + x else current + x\n                if current > best:\n                    best = current\n           "
    },
    {
        "id":14,
        "response":"def binary_to_decimal(binary: str) -> int:\n    result = 0\n    for digit in binary:\n        result = result * 2 + (digit == '1')\n    return result"
    },
    {
        "id":15,
        "response":"import collections\n\ndef find_Product(arr, n):\n    freq = collections.Counter(arr)\n    product = 1\n    has_unique = False\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n            has_unique = True\n    return product if has_unique else 0"
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: tuple, K: int) -> bool:\n    return len(test_list) == K"
    },
    {
        "id":17,
        "response":"import re\n\ndef remove(lst):\n    return [re.sub(r'\\d', '', s) for s in lst]"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    k = min(k, n - k)\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - k + i) \/\/ i\n    return result"
    },
    {
        "id":19,
        "response":"import typing\n\ndef get_Odd_Occurrence(arr: typing.List[int], arr_size: int) -> int:\n    if arr_size == 0:\n        raise ValueError(\"Array size must be greater than zero\")\n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result"
    },
    {
        "id":20,
        "response":"import collections\n\ndef check_Equality(s):\n    freq = collections.Counter(s)\n    total = 0\n    for f in freq.values():\n        total += f * (f + 1) \/\/ 2\n    return total"
    },
    {
        "id":21,
        "response":"import heapq\n\ndef func(nums, k):\n    if k <= 0 or not nums:\n        return []\n    freq = {}\n    for n in nums:\n        freq[n] = freq.get(n, 0) + 1\n    heap = []\n    for num, count in freq.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (count, num))\n        else:\n            if count > heap[0][0] or (count == heap[0][0] and num < heap[0][1]):\n                heapq.heapreplace(heap, (count, num))\n    heap.sort(key=lambda x: (-x[0], x[1]))\n    return [num for _, num in heap]"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors(n):\n    if n < 2:\n        return n\n    max_factor = 1\n    while n % 2 == 0:\n        max_factor = 2\n        n \/\/= 2\n    factor = 3\n    limit = math.isqrt(n) + 1\n    while factor <= limit and n > 1:\n        while n % factor == 0:\n            max_factor = factor\n            n \/\/= factor\n            limit = math.isqrt(n) + 1\n        factor += 2\n    if n > 1:\n        max_factor = n\n    return max_factor"
    },
    {
        "id":23,
        "response":"import typing\n\ndef decimal_To_Binary(N: int) -> str:\n    if N == 0:\n        return \"0\"\n    bits = []\n    while N > 0:\n        bits.append(str(N & 1))\n        N >>= 1\n    return ''.join(reversed(bits))"
    },
    {
        "id":24,
        "response":"import typing\n\ndef find_missing(ar: typing.List[int], N: int) -> int:\n    return N * (N + 1) \/\/ 2 - sum(ar)"
    },
    {
        "id":25,
        "response":"def find_rect_num(n):\n    return n * (n + 1)"
    },
    {
        "id":26,
        "response":"import typing\n\ndef find_Nth_Digit(p: int, q: int, N: int) -> int:\n    if q == 0 or N <= 0:\n        raise ValueError(\"Denominator must be non-zero and N must be positive\")\n    remainder = p % q\n    digit = 0\n    for _ in range(N):\n        remainder *= 10\n        digit = remainder \/\/ q\n        remainder %= q\n        if remainder == 0:\n            # remaining digits will be zero; continue loop to reach N\n            continue\n    return digit"
    },
    {
        "id":27,
        "response":"import typing\n\ndef sort_mixed_list(mixed_list: typing.List[typing.Union[int, str]]) -> typing.List[typing.Union[int, str]]:\n    numbers = [item for item in mixed_list if isinstance(item, int)]\n    strings = [item for item in mixed_list if isinstance(item, str)]\n    numbers.sort()\n    strings.sort()\n    return numbers + strings"
    },
    {
        "id":28,
        "response":"import typing\n\ndef div_even_odd(list1: typing.List[int]) -> typing.Optional[float]:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even \/ first_odd\n    return None"
    },
    {
        "id":29,
        "response":"import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    if not S:\n        return \"\"\n    n = len(S)\n    freq = Counter(S)\n    if max(freq.values()) > (n + 1) \/\/ 2:\n        return \"\"\n    heap = [(-cnt, ch) for ch, cnt in freq.items()]\n    heapq.heapify(heap)\n    prev_cnt, prev_ch = 0, ''\n    result = []\n    while heap:\n        cnt, ch = heapq.heappop(heap)\n        result.append(ch)\n        cnt += 1\n        if prev_cnt < 0:\n            heapq.heappush(heap, (prev_cnt, prev_ch))\n        prev_cnt, prev_ch = cnt, ch\n    return \"\".join(result)"
    },
    {
        "id":30,
        "response":"from collections import Counter\n\ndef freq_element(nums):\n    return dict(Counter(nums))"
    },
    {
        "id":31,
        "response":"def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"import collections\n\ndef find_Sum(arr, n):\n    freq = collections.Counter(arr)\n    return sum(x for x in arr if freq[x] > 1)"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    return re.findall(r'\\b[a-z]+(?:_[a-z]+)+\\b', text)"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text):\n    match = re.match(r'^[A-Za-z0-9]+', text)\n    return match.group(0) if match else None"
    },
    {
        "id":35,
        "response":"import math\nimport functools\n\ndef find_gcd(arr):\n    if not arr:\n        return 0\n    def gcd_pair(a, b):\n        return math.gcd(a, b)\n    result = functools.reduce(gcd_pair, (abs(x) for x in arr))\n    return result"
    },
    {
        "id":36,
        "response":"import typing\n\ndef test_distinct(data: typing.List[int]) -> bool:\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":"import typing\n\ndef compute_Last_Digit(A: int, B: int) -> int:\n    if B == A:\n        return 1\n    if B > A:\n        return 0\n    result = 1\n    for i in range(B + 1, A + 1):\n        result = (result * (i % 10)) % 10\n        if result == 0:\n            break\n    return result"
    },
    {
        "id":38,
        "response":"import typing\n\ndef odd_bit_set_number(n: int) -> int:\n    if n < 0:\n        return n\n    mask = 0\n    i = 1\n    limit = n.bit_length() + 2\n    while i < limit:\n        mask |= 1 << i\n        i += 2\n    return n | mask"
    },
    {
        "id":39,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List], N: int) -> typing.List:\n    return [sub[N] for sub in nums]"
    },
    {
        "id":40,
        "response":"import typing\n\ndef min_length_list(input_list: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    if not input_list:\n        return []\n    return min(input_list, key=lambda x: len(x))"
    },
    {
        "id":41,
        "response":"import typing\n\ndef check_equilateral(x: float, y: float, z: float) -> bool:\n    if x <= 0 or y <= 0 or z <= 0:\n        return False\n    return x == y == z"
    },
    {
        "id":42,
        "response":"def parallelogram_area(b, h):\n    return b * h"
    },
    {
        "id":43,
        "response":"import re\n\ndef check_Equality(s: str) -> bool:\n    if not s:\n        return False\n    return s[0] == s[-1]"
    },
    {
        "id":44,
        "response":"import typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    if not my_list:\n        return []\n    min_val = min(my_list)\n    max_val = max(my_list)\n    range_size = max_val - min_val + 1\n    count = [0] * range_size\n    for num in my_list:\n        count[num - min_val] += 1\n    sorted_list = []\n    for i, c in enumerate(count):\n        sorted_list.extend([i + min_val] * c)\n    return sorted_list"
    },
    {
        "id":45,
        "response":"import math\n\ndef tn_gp(a, n, r):\n    if n == 1:\n        return a\n    return a * pow(r, n - 1)"
    },
    {
        "id":46,
        "response":"import typing\n\ndef rev(num: int) -> bool:\n    sign = -1 if num < 0 else 1\n    rev_num = int(str(abs(num))[::-1]) * sign\n    return num == 2 * rev_num - 1"
    },
    {
        "id":47,
        "response":"import functools\n\ndef find_Max_Num(arr, n):\n    strs = [str(x) for x in arr]\n    def compare(a, b):\n        if a + b > b + a:\n            return -1\n        if a + b < b + a:\n            return 1\n        return 0\n    strs.sort(key=functools.cmp_to_key(compare))\n    result = ''.join(strs)\n    return result if result[0] != '0' else '0'"
    },
    {
        "id":48,
        "response":"import typing\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return x * y < 0"
    },
    {
        "id":49,
        "response":"import typing\n\ndef is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"
    },
    {
        "id":50,
        "response":"import typing\n\ndef max_len_sub(arr: typing.List[int], n: int) -> int:\n    if not arr:\n        return 0\n    max_len = 1\n    cur = 1\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == n:\n            cur += 1\n        else:\n            cur = 1\n        if cur > max_len:\n            max_len = cur\n    return max_len"
    },
    {
        "id":51,
        "response":"import typing\n\ndef count_Substrings(s: str, n: int) -> int:\n    if n <= 0 or not s or n > len(s):\n        return 0\n    count = 0\n    for i in range(len(s) - n + 1):\n        sub = s[i:i + n]\n        if sub.isdigit() and int(sub) == n:\n            count += 1\n    return count"
    },
    {
        "id":52,
        "response":"import typing\n\ndef smallest_num(xs: typing.List[int]) -> int:\n    if not xs:\n        raise ValueError(\"List must not be empty\")\n    min_val = xs[0]\n    for num in xs[1:]:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "id":53,
        "response":"import typing\n\ndef max_difference(test_list: typing.List[typing.Tuple[typing.Union[int, float], typing.Union[int, float]]]) -> typing.Union[int, float]:\n    max_diff: float = 0\n    for a, b in test_list:\n        diff = a - b\n        if diff < 0:\n            diff = -diff\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff if isinstance(max_diff, int) else max_diff\n"
    },
    {
        "id":54,
        "response":"from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "id":55,
        "response":"def recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "id":56,
        "response":"import typing\n\ndef pos_count(lst: typing.List[int]) -> int:\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "id":57,
        "response":"import math\n\ndef bell_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    stirling = [0] * (n + 1)\n    stirling[0] = 1\n    for i in range(1, n + 1):\n        new = [0] * (n + 1)\n        for k in range(1, i + 1):\n            new[k] = k * stirling[k] + stirling[k - 1]\n        stirling = new\n    return sum(stirling[:n + 1])"
    },
    {
        "id":58,
        "response":"import typing\n\ndef is_Monotonic(A: typing.List[int]) -> bool:\n    if len(A) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            increasing = False\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True"
    },
    {
        "id":59,
        "response":"import typing\n\ndef is_sublist(l: typing.List[typing.Any], s: typing.List[typing.Any]) -> bool:\n    n, m = len(l), len(s)\n    if m == 0:\n        return True\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False"
    },
    {
        "id":60,
        "response":"import typing\n\ndef find_equal_tuple(Input: typing.List[tuple], k: int) -> bool:\n    if not Input:\n        return True\n    first_len = len(Input[0])\n    for item in Input:\n        if len(item) != first_len:\n            return False\n    return True"
    },
    {
        "id":61,
        "response":"import typing\n\ndef comb_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap \/ shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums"
    },
    {
        "id":62,
        "response":"import typing\n\ndef dif_Square(n: int) -> bool:\n    return n % 4 != 2"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    parts = re.split(r'[,\\s;|]+', text.strip())\n    return [p for p in parts if p]"
    },
    {
        "id":64,
        "response":"import typing\n\ndef is_samepatterns(colors: typing.List[str], patterns: typing.List[str]) -> bool:\n    return colors == patterns"
    },
    {
        "id":65,
        "response":"import typing\n\ndef find_tuples(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    if K == 0:\n        return []\n    return [t for t in test_list if all(isinstance(x, int) and x % K == 0 for x in t)]"
    },
    {
        "id":66,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = min(m, n)\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":67,
        "response":"import typing\n\ndef is_Diff(n: int) -> int:\n    n_abs = abs(n)\n    even_sum = 0\n    odd_sum = 0\n    for ch in str(n_abs):\n        digit = ord(ch) - 48\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n    return even_sum - odd_sum"
    },
    {
        "id":68,
        "response":"import functools\n\ndef count_With_Odd_SetBits(n: int) -> int:\n    if n < 0:\n        return 0\n    bits = list(map(int, bin(n)[2:]))\n    length = len(bits)\n\n    @functools.lru_cache(maxsize=None)\n    def dp(pos: int, parity: int, tight: int) -> int:\n        if pos == length:\n            return 1 if parity == 1 else 0\n        limit = bits[pos] if tight else 1\n        total = 0\n        for b in (0, 1):\n            if b > limit:\n                continue\n            total += dp(pos + 1, parity ^ b, tight and b == limit)\n        return total\n\n    return dp(0, 0, 1)"
    },
    {
        "id":69,
        "response":"def word_len(s):\n    return len(s) % 2 == 1"
    },
    {
        "id":70,
        "response":""
    },
    {
        "id":71,
        "response":"def zip_tuples(test_tup1, test_tup2):\n    return tuple(zip(test_tup1, test_tup2))"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    return (4.0 \/ 3.0) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":"import sys\n\ndef get_Char(strr: str) -> str:\n    total = 0\n    for ch in strr:\n        total += ord(ch)\n    try:\n        return chr(total)\n    except ValueError:\n        total %= 0x110000\n        return chr(total)"
    },
    {
        "id":74,
        "response":"import sys\n\ndef sequence(n):\n    if n <= 0:\n        return 0\n    a = [0, 1, 1]\n    for i in range(3, n + 1):\n        a.append(a[a[i - 1]] + a[i - a[i - 1]])\n    return a[n]"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r"
    },
    {
        "id":76,
        "response":"import typing\n\ndef centered_hexagonal_number(n: int) -> int:\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"import typing\n\ndef merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":"import collections\n\ndef freq_count(list1):\n    return dict(collections.Counter(list1))"
    },
    {
        "id":79,
        "response":"import typing\n\ndef closest_num(N: int) -> int:\n    return N - 1"
    },
    {
        "id":80,
        "response":"import typing\n\ndef len_log(list1: typing.List[str]) -> int:\n    if not list1:\n        return 0\n    return max((len(word) for word in list1), default=0)"
    },
    {
        "id":81,
        "response":"import typing\n\ndef find_substring(str_list: typing.List[str], sub_str: str) -> bool:\n    if not str_list:\n        return False\n    if sub_str == \"\":\n        return True\n    sub_lower = sub_str.lower()\n    for s in str_list:\n        if sub_lower in s.lower():\n            return True\n    return False"
    },
    {
        "id":82,
        "response":"import re\n\ndef is_undulating(n):\n    s = str(abs(n))\n    if len(s) < 3:\n        return False\n    if s[0] == s[1]:\n        return False\n    pattern = s[0] + s[1]\n    for i, ch in enumerate(s):\n        if ch != pattern[i % 2]:\n            return False\n    return True"
    },
    {
        "id":83,
        "response":"import math\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    if b < 0:\n        result = 1\n        for _ in range(-b):\n            result *= a\n        return 1 \/ result\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"
    },
    {
        "id":84,
        "response":"import typing\n\ndef index_minimum(test_tuple: tuple) -> int:\n    if not test_tuple:\n        raise ValueError(\"Empty tuple provided\")\n    min_value = test_tuple[0]\n    min_index = 0\n    for i, val in enumerate(test_tuple):\n        if val < min_value:\n            min_value = val\n            min_index = i\n    return min_index"
    },
    {
        "id":85,
        "response":"import typing\n\ndef Find_Min_Length(lst: typing.List[typing.List]) -> int:\n    if not lst:\n        return 0\n    return min(len(sub) for sub in lst)"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n):\n    if n == 0:\n        return 0\n    count = 0\n    limit = int(math.isqrt(abs(n)))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            count += 2\n    if limit * limit == abs(n):\n        count -= 1\n    return count"
    },
    {
        "id":87,
        "response":"import collections\n\ndef frequency_lists(list1):\n    freq = collections.Counter()\n    for sub in list1:\n        freq[tuple(sub)] += 1\n    return dict(freq)"
    },
    {
        "id":88,
        "response":"import typing\n\ndef multiply_num(numbers: typing.List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError\n    product = 1.0\n    for num in numbers:\n        product *= num\n    return product \/ len(numbers)"
    },
    {
        "id":89,
        "response":"import sys\n\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    result = []\n    while n > 0:\n        result.append(str(n & 1))\n        n >>= 1\n    return ''.join(reversed(result))"
    },
    {
        "id":90,
        "response":"import typing\n\ndef next_smallest_palindrome(num: int) -> int:\n    s = str(num)\n    l = len(s)\n    if set(s) == {'9'}:\n        return int('1' + '0' * (l - 1) + '1')\n    half = l \/\/ 2\n    if l % 2 == 0:\n        left = s[:half]\n        pal = left + left[::-1]\n        if int(pal) > num:\n            return int(pal)\n        inc = str(int(left) + 1).zfill(half)\n        return int(inc + inc[::-1])\n    else:\n        left = s[:half]\n        middle = s[half]\n        pal = left + middle + left[::-1]\n        if int(pal) > num:\n            return int(pal)\n        inc_part = str(int(left + middle) + 1).zfill(half + 1)\n        new_left = inc_part[:half]\n        new_mid = inc_part[half]\n        return int(new_left + new_mid + new_left[::-1])"
    },
    {
        "id":91,
        "response":"import typing\n\ndef kth_element(arr: typing.List[typing.Any], n: int, k: int) -> typing.Any:\n    if k < 1 or k > n or k > len(arr):\n        return None\n    return arr[k - 1]"
    },
    {
        "id":92,
        "response":"def snake_to_camel(word):\n    parts = [p for p in word.split('_') if p]\n    if not parts:\n        return \"\"\n    return parts[0] + \"\".join(p.capitalize() for p in parts[1:])"
    },
    {
        "id":93,
        "response":"import sys\n\ndef eulerian_num(n: int, m: int) -> int:\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m < 0 or m >= n:\n        return 0\n    dp = [[0] * (n) for _ in range(n + 1)]\n    dp[1][0] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            val = 0\n            if j > 0:\n                val += (i - j) * dp[i - 1][j - 1]\n            if j < i - 1:\n                val += (j + 1) * dp[i - 1][j]\n            dp[i][j] = val\n    return dp[n][m]"
    },
    {
        "id":94,
        "response":"import typing\n\ndef sort_sublists(input_list: typing.List[typing.List[str]]) -> typing.List[typing.List[str]]:\n    return [sorted(sublist, key=lambda x: x) for sublist in input_list]"
    },
    {
        "id":95,
        "response":"import typing\n\ndef count(lst: typing.List[typing.Any]) -> int:\n    return sum(1 for item in lst if item is True)"
    },
    {
        "id":96,
        "response":"import itertools\n\ndef add_lists(test_list, test_tup):\n    return list(test_list) + list(test_tup)"
    },
    {
        "id":97,
        "response":"import math\n\ndef count_Hexadecimal(L: int, R: int) -> int:\n    if L > R:\n        L, R = R, L\n    first = ((L + 15) \/\/ 16) * 16\n    if first > R:\n        return 0\n    return (R - first) \/\/ 16 + 1"
    },
    {
        "id":98,
        "response":"import heapq\n\ndef merge_sorted_list(*sequences):\n    iters = [iter(seq) for seq in sequences]\n    heap = []\n    for idx, it in enumerate(iters):\n        try:\n            first = next(it)\n            heap.append((first, idx))\n        except StopIteration:\n            continue\n    heapq.heapify(heap)\n    while heap:\n        value, idx = heapq.heappop(heap)\n        yield value\n        it = iters[idx]\n        try:\n            nxt = next(it)\n            heapq.heappush(heap, (nxt, idx))\n        except StopIteration:\n            continue"
    },
    {
        "id":99,
        "response":"import typing\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    if n == 0:\n        return 0\n    pi = [0] * n\n    for i in range(1, n):\n        j = pi[i - 1]\n        while j > 0 and s[i] != s[j]:\n            j = pi[j - 1]\n        if s[i] == s[j]:\n            j += 1\n        pi[i] = j\n    period = n - pi[-1]\n    if n % period != 0:\n        period = n\n    return n \/\/ period"
    },
    {
        "id":100,
        "response":"import typing\n\ndef extract_missing(test_list: typing.List[int], strt_val: int, stop_val: int) -> typing.List[str]:\n    present = set(test_list)\n    missing_ranges: typing.List[str] = []\n    range_start = None\n\n    for num in range(strt_val, stop_val + 1):\n        if num not in present:\n            if range_start is None:\n                range_start = num\n        else:\n            if range_start is not None:\n                if range_start == num - 1:\n                    missing_ranges.append(str(range_start))\n                else:\n                    missing_ranges.append(f\"{range_start}-{num - 1}\")\n                range_start = None\n\n    if range_start is not None:\n        if range_start == stop_val:\n            missing_ranges.append(str(range_start))\n        else:\n            missing_ranges.append(f\"{range_start}-{stop_val}\")\n\n    return missing_ranges"
    },
    {
        "id":101,
        "response":"from typing import List, Any\n\ndef common_in_nested_lists(nestedlist: List[List[Any]]) -> List[Any]:\n    if not nestedlist:\n        return []\n    common_set = set(nestedlist[0])\n    for sub in nestedlist[1:]:\n        common_set.intersection_update(set(sub))\n        if not common_set:\n            return []\n    result: List[Any] = []\n    seen: set = set()\n    for item in nestedlist[0]:\n        if item in common_set and item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    return math.pi * diameter"
    },
    {
        "id":103,
        "response":"import re\n\ndef check_integer(text):\n    if not isinstance(text, str):\n        return False\n    return bool(re.fullmatch(r'[+-]?\\d+', text))"
    },
    {
        "id":104,
        "response":"import collections\nfrom typing import List, Tuple, Any\n\ndef assign_freq(test_list: List[Tuple[Any, ...]]) -> List[Tuple[Any, ...]]:\n    freq = collections.Counter(test_list)\n    return [item + (freq[item],) for item in test_list]"
    },
    {
        "id":105,
        "response":"import typing\n\ndef empty_dit(list1: typing.List[dict]) -> bool:\n    return all(isinstance(d, dict) and not d for d in list1)"
    },
    {
        "id":106,
        "response":"import typing\n\ndef tuple_to_int(nums: typing.Tuple[int, ...]) -> int:\n    return int(''.join(str(num) for num in nums))"
    },
    {
        "id":107,
        "response":"import re\nfrom typing import List, Any\n\ndef list_to_float(test_list: List[Any]) -> List[Any]:\n    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except (ValueError, TypeError):\n            result.append(item)\n    return result"
    },
    {
        "id":108,
        "response":"import typing\n\ndef string_to_list(string: str) -> typing.List[str]:\n    return list(string)"
    },
    {
        "id":109,
        "response":"import typing\n\ndef search(arr: typing.List[int], n: int) -> int:\n    if n == 1:\n        return arr[0]\n    low, high = 0, n - 1\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":110,
        "response":"import typing\n\ndef max_product_tuple(list1: typing.List[typing.Tuple[float, float]]) -> typing.Optional[float]:\n    if not list1:\n        return None\n    max_product = None\n    for a, b in list1:\n        product = a * b\n        if max_product is None or product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "id":111,
        "response":"import typing\n\ndef check_triplet(A: typing.List[int], n: int, target_sum: int, count: int) -> typing.List[typing.Tuple[int, int, int]]:\n    A.sort()\n    result_set = set()\n    for i in range(n - 2):\n        if i > 0 and A[i] == A[i - 1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            cur_sum = A[i] + A[left] + A[right]\n            if cur_sum == target_sum:\n                result_set.add((A[i], A[left], A[right]))\n                left_val, right_val = A[left], A[right]\n                while left < right and A[left] == left_val:\n                    left += 1\n                while left < right and A[right] == right_val:\n                    right -= 1\n            elif cur_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return list(result_set)"
    },
    {
        "id":112,
        "response":"import typing\n\ndef smartNumber(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        s = 0\n        temp = i\n        while temp:\n            s += temp % 10\n            temp \/\/= 10\n        if s != 0 and i % s == 0:\n            count += 1\n    return i"
    },
    {
        "id":113,
        "response":"import math\n\ndef amicable_numbers_sum(limit):\n    if limit < 2:\n        return 0\n    divisor_sum_cache = {}\n    def sum_proper_divisors(n):\n        if n in divisor_sum_cache:\n            return divisor_sum_cache[n]\n        total = 1\n        sqrt_n = int(math.isqrt(n))\n        for i in range(2, sqrt_n + 1):\n            if n % i == 0:\n                total += i\n                other = n \/\/ i\n                if other != i:\n                    total += other\n        if n == 1:\n            total = 0\n        divisor_sum_cache[n] = total\n        return total\n    total_sum = 0\n    for num in range(2, limit + 1):\n        partner = sum_proper_divisors(num)\n        if partner != num and partner <= limit:\n            if sum_proper_divisors(partner) == num:\n                total_sum += num\n    return total_sum"
    },
    {
        "id":114,
        "response":"import math\n\ndef angle_complex(a, b):\n    if a == 0 and b == 0:\n        return 0.0\n    return math.atan2(b, a)"
    },
    {
        "id":115,
        "response":""
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    g = math.gcd(a, b)\n    total = 0\n    i = 1\n    while i * i <= g:\n        if g % i == 0:\n            total += i\n            j = g \/\/ i\n            if j != i:\n                total += j\n        i += 1\n    return total"
    },
    {
        "id":117,
        "response":"def multiply_int(x: int, y: int) -> int:\n    negative = (x < 0) ^ (y < 0)\n    a, b = abs(x), abs(y)\n    result = 0\n    while b:\n        if b & 1:\n            result += a\n        a <<= 1\n        b >>= 1\n    return -result if negative else result"
    },
    {
        "id":118,
        "response":"import typing\n\ndef long_words(n: int, words: typing.List[str]) -> typing.List[str]:\n    return [word for word in words if len(word) > n]"
    },
    {
        "id":119,
        "response":"import typing\n\ndef magic_square_test(matrix: typing.List[typing.List[int]]) -> bool:\n    if not matrix:\n        return False\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    if n == 2:\n        return False\n    target = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != target:\n            return False\n    for c in range(n):\n        if sum(matrix[r][c] for r in range(n)) != target:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != target:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target:\n        return False\n    return True"
    },
    {
        "id":120,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    freq = {}\n    for x in nums:\n        freq[x] = freq.get(x, 0) + 1\n    max_count = -1\n    result = None\n    seen = set()\n    for x in nums:\n        if x in seen:\n            continue\n        seen.add(x)\n        if freq[x] > max_count:\n            max_count = freq[x]\n            result = x\n    return result"
    },
    {
        "id":121,
        "response":""
    },
    {
        "id":122,
        "response":"import typing\n\ndef tup_string(tup1: tuple) -> str:\n    return str(tup1)"
    },
    {
        "id":123,
        "response":"import functools\n\ndef sum_negativenum(nums):\n    return functools.reduce(lambda acc, x: acc + x if x < 0 else acc, nums, 0)"
    },
    {
        "id":124,
        "response":"import sys\n\ndef check_last(arr, n, p):\n    if not arr:\n        raise ValueError(\"Array must contain at least one element\")\n    new_last = arr[-1] + p\n    return \"Even\" if new_last % 2 == 0 else \"Odd\""
    },
    {
        "id":125,
        "response":"import typing\n\ndef hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"import math\n\ndef cal_electbill(units):\n    if units <= 0:\n        return 0\n    bill = 0\n    remaining = units\n    slab = 1\n    while remaining > 0:\n        consumption = 100 if remaining >= 100 else remaining\n        bill += consumption * slab\n        remaining -= consumption\n        slab += 1\n    return bill"
    },
    {
        "id":127,
        "response":"import typing\n\ndef zero_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    zeroes = sum(1 for x in nums if x == 0)\n    return zeroes \/ len(nums)"
    },
    {
        "id":128,
        "response":"import typing\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n % 2 == 0"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r"
    },
    {
        "id":130,
        "response":"import collections\n\ndef extract_singly(test_list):\n    flat = []\n    for tup in test_list:\n        flat.extend(tup)\n    counts = collections.Counter(flat)\n    result = [item for item in flat if counts[item] == 1]\n    return result"
    },
    {
        "id":131,
        "response":"import typing\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_idx = 0\n        for i in range(1, curr_size):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        if max_idx == curr_size - 1:\n            continue\n        if max_idx != 0:\n            nums[:max_idx + 1] = reversed(nums[:max_idx + 1])\n        nums[:curr_size] = reversed(nums[:curr_size])\n    return nums"
    },
    {
        "id":132,
        "response":"import typing\n\ndef count_samepair(list1: typing.List[tuple], list2: typing.List[tuple], list3: typing.List[tuple]) -> int:\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n    return len(set1 & set2 & set3)"
    },
    {
        "id":133,
        "response":"import typing\n\ndef find_lists(Input: tuple) -> int:\n    return sum(1 for item in Input if isinstance(item, list))"
    },
    {
        "id":134,
        "response":""
    },
    {
        "id":135,
        "response":"import typing\n\ndef max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    mx = arr[0]\n    mn = arr[0]\n    for v in arr[1:]:\n        if v > mx:\n            mx = v\n        if v < mn:\n            mn = v\n    return mx - mn"
    },
    {
        "id":136,
        "response":"import typing\n\ndef ascii_value_string(str1: str) -> int:\n    total = 0\n    for ch in str1:\n        total += ord(ch)\n    return total"
    },
    {
        "id":137,
        "response":"import typing\n\ndef max_path_sum(tri: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if not tri:\n        return 0\n    dp = [row[:] for row in tri]\n    for i in range(m - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n    return dp[0][0]"
    },
    {
        "id":138,
        "response":"import re\n\ndef sum_digits_single(x: int) -> int:\n    s = str(abs(x))\n    if len(s) < 2:\n        return x\n    max_sum = -float('inf')\n    for i in range(1, len(s)):\n        left = int(s[:i])\n        right = int(s[i:])\n        cur = left + right\n        if cur > max_sum:\n            max_sum = cur\n    return max_sum if x >= 0 else -max_sum"
    },
    {
        "id":139,
        "response":"import typing\n\ndef longest_subseq_with_diff_one(arr: typing.List[int], n: int) -> typing.List[int]:\n    if n == 0:\n        return []\n    best_start = 0\n    best_len = 1\n    cur_start = 0\n    cur_len = 1\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            cur_len += 1\n        else:\n            if cur_len > best_len:\n                best_len = cur_len\n                best_start = cur_start\n            cur_start = i\n            cur_len = 1\n    if cur_len > best_len:\n        best_len = cur_len\n        best_start = cur_start\n    return arr[best_start:best_start + best_len]"
    },
    {
        "id":140,
        "response":"import typing\n\ndef does_Contain_B(a: int, b: int, c: int) -> bool:\n    if c == 0:\n        return a == b\n    diff = a - b\n    if diff % c != 0:\n        return False\n    return diff \/\/ c >= 0"
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p, q):\n    p, q = abs(p), abs(q)\n    while q:\n        p, q = q, p % q\n    return p"
    },
    {
        "id":142,
        "response":"import typing\n\ndef merge(left: list, right: list) -> list:\n    i = j = 0\n    merged = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    if i < len(left):\n        merged.extend(left[i:])\n    if j < len(right):\n        merged.extend(right[j:])\n    return merged\n\ndef merge_sort(arr: list) -> list:\n    n = len(arr)\n    if n <= 1:\n        return arr[:]\n    result = arr[:]\n    width = 1\n    while width < n:\n        for i in range(0, n, 2 * width):\n            left = result[i:i + width]\n            right = result[i + width:i + 2 * width]\n            result[i:i + len(left) + len(right)] = merge(left, right)\n        width *= 2\n    return result"
    },
    {
        "id":143,
        "response":"import math\n\ndef parabola_vertex(a, b, c):\n    if a == 0:\n        return (float('nan'), float('nan'))\n    x = -b \/ (2 * a)\n    y = a * x * x + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[typing.Any]], N: int) -> typing.List[typing.Any]:\n    return [row[N] for row in nums] if nums else []"
    },
    {
        "id":145,
        "response":""
    },
    {
        "id":146,
        "response":"import typing\n\ndef tuple_int_str(tuple_str: tuple) -> tuple:\n    return tuple(int(x) for x in tuple_str)"
    },
    {
        "id":147,
        "response":"import typing\n\ndef encode_list(list1: typing.List[typing.Any]) -> typing.List[typing.Tuple[typing.Any, int]]:\n    result: typing.List[typing.Tuple[typing.Any, int]] = []\n    if not list1:\n        return result\n    prev = list1[0]\n    count = 1\n    for item in list1[1:]:\n        if item == prev:\n            count += 1\n        else:\n            result.append((prev, count))\n            prev = item\n            count = 1\n    result.append((prev, count))\n    return result"
    },
    {
        "id":148,
        "response":""
    },
    {
        "id":149,
        "response":"import typing\n\ndef month_season(month: int, days: int) -> str:\n    if month in (12, 1, 2):\n        return \"Winter\"\n    if month in (3, 4, 5):\n        return \"Spring\"\n    if month in (6, 7, 8):\n        return \"Summer\"\n    if month in (9, 10, 11):\n        return \"Autumn\"\n    raise ValueError(\"Invalid month\")"
    },
    {
        "id":150,
        "response":"import math\n\ndef extended_gcd(a, b):\n    if b == 0:\n        return (1, 0, a)\n    x1, y1, g = extended_gcd(b, a % b)\n    x, y = y1, x1 - (a \/\/ b) * y1\n    return (x, y, g)\n\ndef solution(a, b, n):\n    x0, y0, g = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    mult = n \/\/ g\n    x0 *= mult\n    y0 *= mult\n    a_div = a \/\/ g\n    b_div = b \/\/ g\n    t_min = math.ceil(-x0 \/ b_div) if b_div != 0 else 0\n    t_max = math.floor(y0 \/ a_div) if a_div != 0 else 0\n    if t_min > t_max:\n        return None\n    t = t_min\n    x = x0 + b_div * t\n    y = y0 - a_div * t\n    return (x, y)"
    },
    {
        "id":151,
        "response":"import typing\n\ndef remove_elements(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    remove_set = set(list2)\n    return [item for item in list1 if item not in remove_set]"
    },
    {
        "id":152,
        "response":"import typing\n\ndef sum_series(n: int) -> int:\n    if n <= 0:\n        return 0\n    k = n \/\/ 2 + 1\n    last = n - 2 * (k - 1)\n    return k * (n + last) \/\/ 2"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    if s < 3 or l <= 0:\n        return 0.0\n    return (s * l * l) \/ (4 * math.tan(math.pi \/ s))"
    },
    {
        "id":154,
        "response":"import math\n\ndef divSum(n):\n    if n <= 1:\n        return False\n    total = 1\n    limit = int(math.isqrt(n))\n    for i in range(2, limit + 1):\n        if n % i == 0:\n            total += i\n            other = n \/\/ i\n            if other != i:\n                total += other\n    return total == n"
    },
    {
        "id":155,
        "response":"import string\n\ndef count_char_position(str1):\n    count = 0\n    for i, ch in enumerate(str1):\n        lower = ch.lower()\n        if 'a' <= lower <= 'z' and ord(lower) - ord('a') == i:\n            count += 1\n    return count"
    },
    {
        "id":156,
        "response":"import typing\n\ndef find_even_Pair(A: typing.List[int], N: int) -> int:\n    even = 0\n    odd = 0\n    for num in A:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n    return even * (even - 1) \/\/ 2 + odd * (odd - 1) \/\/ 2"
    },
    {
        "id":157,
        "response":"import math\n\ndef next_Power_Of_2(n: int) -> int:\n    if n <= 1:\n        return 1\n    return 1 << (n - 1).bit_length()"
    },
    {
        "id":158,
        "response":"import typing\n\ndef frequency(a: typing.List[typing.Any], x: typing.Any) -> int:\n    cnt = 0\n    for v in a:\n        if v == x:\n            cnt += 1\n    return cnt"
    },
    {
        "id":159,
        "response":"import typing\n\ndef get_pell(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, 2 * b + a\n    return a"
    },
    {
        "id":160,
        "response":"import typing\n\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])"
    },
    {
        "id":161,
        "response":"def perimeter_pentagon(a):\n    return a * 5"
    },
    {
        "id":162,
        "response":"import re\n\ndef count_occurance(s):\n    return len(re.findall(r'(?=std)', s)) if False else s.count('std')"
    },
    {
        "id":163,
        "response":"import re\n\ndef remove_splchar(text: str) -> str:\n    return re.sub(r'[^A-Za-z0-9]', '', text)"
    },
    {
        "id":164,
        "response":"import collections\n\ndef group_keyvalue(l):\n    d = collections.defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return dict(d)"
    },
    {
        "id":165,
        "response":"import typing\n\ndef is_valid_parenthese(str1: str) -> bool:\n    count = 0\n    for ch in str1:\n        if ch == '(':\n            count += 1\n        elif ch == ')':\n            count -= 1\n            if count < 0:\n                return False\n        else:\n            return False\n    return count == 0"
    },
    {
        "id":166,
        "response":"import typing\n\ndef perimeter_triangle(a: float, b: float, c: float) -> float:\n    return a + b + c"
    },
    {
        "id":167,
        "response":"import math\n\ndef answer(L, R):\n    for a in range(L, R + 1):\n        for b in range(a + 1, R + 1):\n            lcm = a \/\/ math.gcd(a, b) * b\n            if L <= lcm <= R:\n                return (a, b)\n    # fallback: try numbers outside the interval if not found\n    for a in range(1, R + 1):\n        for b in range(a + 1, R * 2 + 1):\n            lcm = a \/\/ math.gcd(a, b) * b\n            if L <= lcm <= R:\n                return (a, b)\n    raise ValueError(\"No suitable pair found\")"
    },
    {
        "id":168,
        "response":"import re\n\ndef string_literals(patterns, text):\n    result = []\n    for pat in patterns:\n        if pat and pat in text:\n            result.append(pat)\n    return result"
    },
    {
        "id":169,
        "response":"import typing\n\ndef is_num_keith(x: int) -> bool:\n    if x < 10:\n        return False\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    seq = digits[:]\n    while True:\n        s = sum(seq[-n:])\n        if s == x:\n            return True\n        if s > x:\n            return False\n        seq.append(s)"
    },
    {
        "id":170,
        "response":"import math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    r = 6371.0\n    lat1 = math.radians(float(slat))\n    lon1 = math.radians(float(slon))\n    lat2 = math.radians(float(elat))\n    lon2 = math.radians(float(elon))\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = math.sin(dlat \/ 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon \/ 2) ** 2\n    c = 2 * math.asin(math.sqrt(a))\n    return r * c"
    },
    {
        "id":171,
        "response":"import typing\n\ndef longest_common_prefix(strs: typing.List[str]) -> str:\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    min_str = min(strs)\n    max_str = max(strs)\n    i = 0\n    while i < len(min_str) and min_str[i] == max_str[i]:\n        i += 1\n    return min_str[:i]"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    digits = re.findall(r'\\d', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return {\n        \"uppercase\": uppercase,\n        \"lowercase\": lowercase,\n        \"digits\": digits,\n        \"special\": special\n    }"
    },
    {
        "id":173,
        "response":"import collections\n\ndef count_pairs(arr, n, k):\n    freq = collections.Counter(arr)\n    if k == 0:\n        return sum(1 for v in freq.values() if v > 1)\n    count = 0\n    for x in freq:\n        if x + k in freq:\n            count += 1\n    return count"
    },
    {
        "id":174,
        "response":"from typing import List\n\ndef greater_specificnum(lst: List[int], num: int) -> List[int]:\n    return [x for x in lst if x > num]"
    },
    {
        "id":175,
        "response":"import math\n\ndef parabola_focus(a, b, c):\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must not be zero for a parabola.\")\n    h = -b \/ (2 * a)\n    k = c - (b ** 2) \/ (4 * a)\n    focus_y = k + 1 \/ (4 * a)\n    return (round(h, 3), round(focus_y, 3))"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    found = []\n    for pat in patterns:\n        if re.search(re.escape(pat), text):\n            found.append(pat)\n    return found"
    },
    {
        "id":177,
        "response":"import typing\n\ndef longest_common_subsequence(X: str, Y: str, m: int, n: int) -> str:\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        xi = X[i - 1]\n        row = dp[i]\n        prev_row = dp[i - 1]\n        for j in range(1, n + 1):\n            if xi == Y[j - 1]:\n                row[j] = prev_row[j - 1] + 1\n            else:\n                row[j] = row[j - 1] if row[j - 1] > prev_row[j] else prev_row[j]\n    i, j = m, n\n    lcs_chars = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs_chars.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] >= dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs_chars))"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    if not isinstance(n, int) or n < 0:\n        return False\n    r = math.isqrt(n)\n    return r * r == n"
    },
    {
        "id":179,
        "response":"import typing\n\ndef first_Missing_Positive(arr: typing.List[int], n: int) -> int:\n    positives = set(x for x in arr if x > 0)\n    missing = 1\n    while missing in positives:\n        missing += 1\n    return missing"
    },
    {
        "id":180,
        "response":"import math\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    return (abs(x2 - x1) + 1) * (abs(y2 - y1) + 1)"
    },
    {
        "id":181,
        "response":"import re\n\ndef check_monthnumber(monthname3):\n    month = monthname3.strip().lower()\n    return month in {\"april\", \"june\", \"september\", \"november\"}"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(s):\n    return any(c.isalpha() for c in s) and any(c.isdigit() for c in s)"
    },
    {
        "id":183,
        "response":"import typing\n\ndef remove_tuple(test_tup: tuple) -> tuple:\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":184,
        "response":"import typing\n\ndef octal_To_Decimal(n: int) -> int:\n    if n == 0:\n        return 0\n    negative = n < 0\n    n = abs(n)\n    result = 0\n    power = 1\n    while n > 0:\n        digit = n % 10\n        if digit >= 8:\n            raise ValueError(\"Invalid octal digit\")\n        result += digit * power\n        power *= 8\n        n \/\/= 10\n    return -result if negative else result"
    },
    {
        "id":185,
        "response":"import typing\n\ndef first(arr: typing.List[int], x: int, n: int) -> int:\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "id":186,
        "response":"import typing\n\ndef remove_tuples(test_list: typing.List[typing.Any], K: int) -> typing.List[typing.Any]:\n    return [item for item in test_list if not (isinstance(item, tuple) and len(item) == K)]"
    },
    {
        "id":187,
        "response":"import typing\n\ndef find_exponentio(test_tup1: typing.Tuple[typing.Any, ...], test_tup2: typing.Tuple[typing.Any, ...]) -> typing.Tuple[typing.Any, ...]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    return tuple(a ** b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\n\ndef largest_triangle(a, b):\n    r = a if a > 0 else 0\n    return (3 * math.sqrt(3) \/ 4) * (r ** 2)"
    },
    {
        "id":189,
        "response":"def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":190,
        "response":"import typing\n\ndef position_max(list1: typing.List[int]) -> typing.List[int]:\n    if not list1:\n        return []\n    max_val = max(list1)\n    return [i for i, v in enumerate(list1) if v == max_val]"
    },
    {
        "id":191,
        "response":"def chkList(lst):\n    if not lst:\n        return True\n    first = lst[0]\n    for x in lst:\n        if x != first:\n            return False\n    return True"
    },
    {
        "id":192,
        "response":"import typing\n\ndef remove_even(str1: str) -> str:\n    return ''.join(ch for i, ch in enumerate(str1) if i % 2 == 1)"
    },
    {
        "id":193,
        "response":"import typing\n\ndef hamming_Distance(n1: int, n2: int) -> int:\n    x = n1 ^ n2\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    return count"
    },
    {
        "id":194,
        "response":"from typing import *\n\ndef count(s: str, c: str) -> int:\n    return s.count(c)"
    },
    {
        "id":195,
        "response":"import itertools\n\ndef inversion_elements(test_tup):\n    return tuple(tuple(reversed(inner)) for inner in test_tup)"
    },
    {
        "id":196,
        "response":"import typing\n\ndef concatenate_elements(test_tup):\n    n = len(test_tup)\n    if n < 2:\n        return ()\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(n - 1))"
    },
    {
        "id":197,
        "response":"import typing\n\ndef find_longest_repeating_subseq(s: str) -> int:\n    n = len(s)\n    if n < 2:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        si = s[i - 1]\n        for j in range(1, n + 1):\n            if si == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] if dp[i - 1][j] >= dp[i][j - 1] else dp[i][j - 1]\n    return dp[n][n]"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num: str) -> bool:\n    if not isinstance(num, str):\n        return False\n    pattern = r'^[+-]?\\d+(\\.\\d{1,2})?$'\n    return bool(re.fullmatch(pattern, num))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        raise IndexError(\"heap is empty\")\n    heapq.heapreplace(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Za-z]+', string))"
    },
    {
        "id":201,
        "response":"import typing\n\ndef count_Num(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 1 << (n - 1)"
    },
    {
        "id":202,
        "response":"import typing\n\ndef fourth_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (2 * n + 1) * (3 * n * n + 3 * n - 1) \/\/ 30"
    },
    {
        "id":203,
        "response":"import typing\n\ndef concatenate_strings(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return test_tup1 + test_tup2"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    return math.degrees(radian)"
    },
    {
        "id":205,
        "response":"import typing\n\ndef decode_list(alist: typing.List[int]) -> typing.List[int]:\n    result: typing.List[int] = []\n    n = len(alist)\n    i = 0\n    while i + 1 < n:\n        value = alist[i]\n        count = alist[i + 1]\n        if count > 0:\n            result.extend([value] * count)\n        i += 2\n    return result"
    },
    {
        "id":206,
        "response":"import typing\n\ndef _elements_equal(a: typing.Any, b: typing.Any) -> bool:\n    if isinstance(a, list) and isinstance(b, list):\n        if len(a) != len(b):\n            return False\n        return all(_elements_equal(x, y) for x, y in zip(a, b))\n    return a == b\n\ndef check_subset_list(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> bool:\n    remaining = list2.copy()\n    for elem1 in list1:\n        found = False\n        for i, elem2 in enumerate(remaining):\n            if _elements_equal(elem1, elem2):\n                found = True\n                remaining.pop(i)\n                break\n        if not found:\n            return False\n    return True"
    },
    {
        "id":207,
        "response":"import typing\n\ndef first_Repeated_Char(s: str) -> typing.Optional[str]:\n    seen = set()\n    for ch in s:\n        if ch in seen:\n            return ch\n        seen.add(ch)\n    return None"
    },
    {
        "id":208,
        "response":"import typing\n\ndef min_Operations(A: int, B: int) -> int:\n    return abs(A - B)"
    },
    {
        "id":209,
        "response":"import typing\n\ndef extract_min_max(test_tup: tuple, K: int) -> tuple:\n    sorted_vals = sorted(test_tup)\n    min_k = tuple(sorted_vals[:K])\n    max_k = tuple(sorted_vals[-K:][::-1]) if K else ()\n    return (min_k, max_k)"
    },
    {
        "id":210,
        "response":""
    },
    {
        "id":211,
        "response":"import typing\n\ndef first_even(nums: typing.List[int]) -> typing.Optional[int]:\n    for n in nums:\n        if n % 2 == 0:\n            return n\n    return None"
    },
    {
        "id":212,
        "response":"import typing\n\ndef check_type(test_tuple: tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for item in test_tuple[1:]:\n        if type(item) is not first_type:\n            return False\n    return True"
    },
    {
        "id":213,
        "response":"import bisect\n\ndef is_majority(arr, n, x):\n    if n == 0:\n        return False\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    return (right - left) > n \/\/ 2"
    },
    {
        "id":214,
        "response":"import typing\n\ndef count_Set_Bits(n: int) -> int:\n    if n < 0:\n        n = n & ((1 << (n.bit_length() + 1)) - 1)\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "id":215,
        "response":"import typing\n\ndef find_Min(arr: typing.List[int], low: int, high: int) -> int:\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":216,
        "response":"import regex\n\ndef odd_values_string(s):\n    clusters = regex.findall(r'\\X', s)\n    return ''.join(clusters[::2])"
    },
    {
        "id":217,
        "response":"def min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"import typing\n\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    if l > r:\n        return False\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return (n & mask) == mask"
    },
    {
        "id":219,
        "response":"import typing\n\ndef re_arrange_array(arr: typing.List[int], n: int) -> typing.List[int]:\n    negatives = []\n    non_negatives = []\n    for x in arr:\n        if x < 0:\n            negatives.append(x)\n        else:\n            non_negatives.append(x)\n    return negatives + non_negatives"
    },
    {
        "id":220,
        "response":"import re\n\ndef replace_blank(str1, char):\n    return str1.replace(' ', char)"
    },
    {
        "id":221,
        "response":"import typing\n\ndef max_sum(tri: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0 or not tri:\n        return 0\n    dp = [row[:] for row in tri]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n    return dp[0][0]"
    },
    {
        "id":222,
        "response":""
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h"
    },
    {
        "id":224,
        "response":"def volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":"import typing\n\ndef even_bit_set_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    msb = n.bit_length() - 1\n    if msb < 0:\n        msb = 0\n    mask = 0\n    for i in range(0, msb + 1, 2):\n        mask |= 1 << i\n    return n | mask"
    },
    {
        "id":226,
        "response":"import sys\n\ndef No_of_Triangle(N, K):\n    if N <= 0 or K <= 0:\n        return 0\n    return N * K\n\nif __name__ == \"__main__\":\n    data = sys.stdin.read().strip().split()\n    if len(data) >= 2:\n        N, K = map(int, data[:2])\n        print(No_of_Triangle(N, K))"
    },
    {
        "id":227,
        "response":"import collections\n\ndef check_occurences(test_list):\n    times = [t for _, t in test_list]\n    counts = collections.Counter(times)\n    result = [time for time, cnt in counts.items() if cnt > 1]\n    result.sort()\n    return result"
    },
    {
        "id":228,
        "response":"def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) \/\/ 2"
    },
    {
        "id":229,
        "response":"import typing\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    if n <= 0 or m <= 0:\n        return 0\n    dp_prev = [0] * (m + 1)\n    for v in range(1, m + 1):\n        dp_prev[v] = 1\n    for _ in range(2, n + 1):\n        prefix = [0] * (m + 1)\n        running = 0\n        for v in range(1, m + 1):\n            running += dp_prev[v]\n            prefix[v] = running\n        dp_curr = [0] * (m + 1)\n        for v in range(1, m + 1):\n            max_u = v \/\/ 2\n            if max_u >= 1:\n                dp_curr[v] = prefix[max_u]\n        dp_prev = dp_curr\n    return sum(dp_prev)"
    },
    {
        "id":230,
        "response":"import typing\n\ndef replace_list(list1: typing.List, list2: typing.List) -> typing.List:\n    if not list1:\n        return [list2]\n    return list1[:-1] + [list2]"
    },
    {
        "id":231,
        "response":"import typing\n\ndef array_3d(m: int, n: int, o: int):\n    if m <= 0:\n        return []\n    if n <= 0:\n        return [[] for _ in range(m)]\n    if o <= 0:\n        return [[[] for _ in range(n)] for _ in range(m)]\n    return [[['*' for _ in range(o)] for _ in range(n)] for _ in range(m)]"
    },
    {
        "id":232,
        "response":"import typing\n\ndef count_charac(str1: str) -> int:\n    return len(str1)"
    },
    {
        "id":233,
        "response":"import collections\n\ndef sort_on_occurence(lst):\n    freq = collections.Counter(item[0] for item in lst)\n    return sorted(lst, key=lambda x: -freq[x[0]])"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    if N < 0:\n        return 0\n    k = math.isqrt(N)\n    if k * k <= N:\n        k += 1\n    return k * k"
    },
    {
        "id":235,
        "response":"import typing\n\ndef max_sum(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    inc = arr[:]\n    for i in range(n):\n        best = inc[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[j] + arr[i] > best:\n                best = inc[j] + arr[i]\n        inc[i] = best\n    dec = arr[:]\n    for i in range(n - 1, -1, -1):\n        best = dec[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i] and dec[j] + arr[i] > best:\n                best = dec[j] + arr[i]\n        dec[i] = best\n    max_total = inc[0] + dec[0] - arr[0]\n    for i in range(1, n):\n        total = inc[i] + dec[i] - arr[i]\n        if total > max_total:\n            max_total = total\n"
    },
    {
        "id":236,
        "response":"import math\n\ndef babylonian_squareroot(number):\n    if number == 0:\n        return 0.0\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    guess = number if number > 1 else 1.0\n    tolerance = 1e-12\n    while True:\n        next_guess = 0.5 * (guess + number \/ guess)\n        if abs(next_guess - guess) <= tolerance * max(1.0, abs(next_guess)):\n            return next_guess\n        guess = next_guess"
    },
    {
        "id":237,
        "response":"import typing\n\ndef lps(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return \"\"\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = dp[i + 1][j] if dp[i + 1][j] >= dp[i][j - 1] else dp[i][j - 1]\n    i, j = 0, n - 1\n    left = []\n    right = []\n    while i <= j:\n        if i == j:\n            left.append(s[i])\n            break\n        if s[i] == s[j]:\n            left.append(s[i])\n            right.append(s[j])\n            i += 1\n            j -= 1\n        else:\n            if dp[i + 1][j] >= dp[i][j - 1]:\n                i += 1\n            else:\n                j -= 1\n    return \"\".join(left + right[::-1])"
    },
    {
        "id":238,
        "response":"import typing\n\ndef harmonic_sum(n: int) -> float:\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 \/ i\n    return total"
    },
    {
        "id":239,
        "response":"import typing\n\ndef intersection_array(array_nums1: typing.List[int], array_nums2: typing.List[int]) -> typing.List[int]:\n    set2 = set(array_nums2)\n    filtered = list(filter(lambda x: x in set2, array_nums1))\n    result = []\n    seen = set()\n    for x in filtered:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result"
    },
    {
        "id":240,
        "response":"import typing\n\ndef count_X(tup: tuple, x: typing.Any) -> int:\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"import typing\n\ndef insert_element(list, element):\n    if not list:\n        return []\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "id":242,
        "response":"import typing\n\ndef convert(numbers: typing.List[complex]) -> typing.List[typing.Tuple[float, float]]:\n    return [(c.real, c.imag) for c in numbers]"
    },
    {
        "id":243,
        "response":"import typing\n\ndef count_integer(list1: typing.List[typing.Any]) -> int:\n    count = 0\n    for item in list1:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text):\n    return [word for word in text.split() if word and word[0] in ('a', 'e')]"
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    return [list(c) for c in itertools.combinations_with_replacement(l, n)]"
    },
    {
        "id":246,
        "response":"import math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = bytearray(b'\\x01') * n\n    sieve[0:2] = b'\\x00\\x00'\n    limit = int(math.isqrt(n - 1)) + 1\n    for p in range(2, limit):\n        if sieve[p]:\n            step = p\n            start = p * p\n            sieve[start:n:step] = b'\\x00' * ((n - 1 - start) \/\/ step + 1)\n    return sum(sieve)"
    },
    {
        "id":247,
        "response":"def swap_numbers(a, b):\n    return b, a"
    },
    {
        "id":248,
        "response":"import typing\n\ndef count_odd(array_nums: typing.List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))"
    },
    {
        "id":249,
        "response":"import typing\n\ndef maximize_elements(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":250,
        "response":"import math\n\ndef _is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    small_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for p in small_primes:\n        if num % p == 0:\n            return num == p\n    d = num - 1\n    s = 0\n    while d % 2 == 0:\n        d \/\/= 2\n        s += 1\n    def _try_composite(a: int) -> bool:\n        x = pow(a, d, num)\n        if x == 1 or x == num - 1:\n            return False\n        for _ in range(s - 1):\n            x = (x * x) % num\n            if x == num - 1:\n                return False\n        return True\n    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:\n        if a % num == 0:\n            continue\n        if _try_composite(a):\n            return False\n    return True\n\ndef newman_prime(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    count = 0\n    a0, a1 = 1, 1\n    index = 1\n    while True:\n        if _is_prime(a1):\n            count += 1\n            if count == n:\n                return a1\n        a0, a1 = a1, 2 * a1 + a0\n        index += 1"
    },
    {
        "id":251,
        "response":"import typing\n\ndef division_elements(test_tup1: typing.Tuple[float, ...], test_tup2: typing.Tuple[float, ...]) -> typing.Tuple[float, ...]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        if b == 0:\n            raise ZeroDivisionError(\"division by zero\")\n        result.append(a \/ b)\n    return tuple(result)"
    },
    {
        "id":252,
        "response":"import typing\n\ndef split_two_parts(list1: typing.List, L: int) -> typing.Tuple[typing.List, typing.List]:\n    if L < 0:\n        L = 0\n    first = list1[:L]\n    second = list1[L:]\n    return (first, second)"
    },
    {
        "id":253,
        "response":"import typing\n\ndef merge_dict(d1: dict, d2: dict) -> dict:\n    result = d1.copy()\n    result.update(d2)\n    return result"
    },
    {
        "id":254,
        "response":"def dog_age(h_age):\n    return h_age * 7"
    },
    {
        "id":255,
        "response":"import typing\n\ndef list_split(S: typing.List[typing.Any], step: int) -> typing.List[typing.List[typing.Any]]:\n    if step <= 0:\n        raise ValueError(\"step must be a positive integer\")\n    return [S[i:i + step] for i in range(0, len(S), step)]"
    },
    {
        "id":256,
        "response":"import typing\n\ndef lateralsurface_cube(l: float) -> float:\n    return 4 * l * l"
    },
    {
        "id":257,
        "response":"import typing\n\ndef square_Sum(n: int) -> int:\n    total = 0\n    odd = 1\n    for _ in range(n):\n        total += odd * odd\n        odd += 2\n    return total"
    },
    {
        "id":258,
        "response":"import typing\n\ndef find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1"
    },
    {
        "id":259,
        "response":"import sys\n\ndef ascii_value(k):\n    if not isinstance(k, str) or len(k) != 1:\n        raise ValueError(\"Input must be a single character string\")\n    return ord(k)"
    },
    {
        "id":260,
        "response":""
    },
    {
        "id":261,
        "response":"import typing\n\ndef even_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return (8 * n * n * (n + 1) * (n + 1) * (2 * n * n + 2 * n - 1)) \/\/ 3"
    },
    {
        "id":262,
        "response":"import typing\n\ndef rear_extract(test_list: typing.List[tuple]) -> typing.List:\n    return [record[-1] for record in test_list]"
    },
    {
        "id":263,
        "response":"import typing\n\ndef substract_elements(test_tup1: typing.Tuple[typing.Any, ...], test_tup2: typing.Tuple[typing.Any, ...]) -> typing.Tuple[typing.Any, ...]:\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"def even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 1\n    return 1 << (n - 1)   # 2**(n-1)"
    },
    {
        "id":265,
        "response":""
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r * r * h"
    },
    {
        "id":267,
        "response":"import typing\n\ndef dict_filter(d: typing.Dict[typing.Any, typing.Any], n: typing.Any) -> typing.Dict[typing.Any, typing.Any]:\n    return {k: v for k, v in d.items() if v > n}"
    },
    {
        "id":268,
        "response":"def count_first_elements(test_tup):\n    return tuple(range(len(test_tup)))"
    },
    {
        "id":269,
        "response":"import typing\n\ndef is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3) if n != 0 else 0"
    },
    {
        "id":270,
        "response":"import re\nimport typing\nimport itertools\n\ndef sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return index\n    return -1"
    },
    {
        "id":271,
        "response":"import typing\n\ndef all_unique(test_list: typing.List[typing.Any]) -> bool:\n    seen = []\n    for item in test_list:\n        for s in seen:\n            if item == s:\n                return False\n        seen.append(item)\n    return True"
    },
    {
        "id":272,
        "response":"import typing\n\ndef sub_list(nums1: typing.List[int], nums2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda pair: pair[0] - pair[1], zip(nums1, nums2)))"
    },
    {
        "id":273,
        "response":"import collections\n\ndef validate(n):\n    s = str(abs(n))\n    cnt = collections.Counter(s)\n    for d_char, freq in cnt.items():\n        d = int(d_char)\n        if freq > d:\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"import typing\n\ndef check_element(lst: typing.List[typing.Any], element: typing.Any) -> bool:\n    return all(item == element for item in lst)"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    return bool(re.search(r\"a b{2,3}\", text.replace(\" \", \"\")))"
    },
    {
        "id":276,
        "response":"import sys\n\ndef max_sub_array_sum_repeated(a, n, k):\n    if n == 0 or k == 0:\n        return 0\n    max_ending_here = max_so_far = a[0]\n    total = a[0]\n    max_prefix = a[0]\n    cur_prefix = a[0]\n    for i in range(1, n):\n        x = a[i]\n        total += x\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n        cur_prefix += x\n        max_prefix = max(max_prefix, cur_prefix)\n    max_suffix = a[-1]\n    cur_suffix = a[-1]\n    for i in range(n - 2, -1, -1):\n        cur_suffix += a[i]\n        max_suffix = max(max_suffix, cur_suffix)\n    if k == 1:\n        return max_so_far\n    if total > 0:\n        return max(max_so_far, max_suffix + max_prefix + (k - 2) * total)\n    else:\n        return max(max_so_far, max_suffix + max_prefix)"
    },
    {
        "id":277,
        "response":"import math\n\ndef square_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    product = n * (n + 1) * (2 * n + 1)\n    return (2 * product) \/\/ 3"
    },
    {
        "id":278,
        "response":"import typing\n\ndef modular_inverse(arr: typing.List[int], N: int, P: int) -> int:\n    count = 0\n    if P == 0:\n        return 0\n    for a in arr:\n        a_mod = a % P\n        if (a_mod * a_mod) % P == 1 % P:\n            count += 1\n    return count"
    },
    {
        "id":279,
        "response":"import typing\n\ndef odd_Days(N: int) -> int:\n    if (N % 400 == 0) or (N % 4 == 0 and N % 100 != 0):\n        return 2\n    return 1"
    },
    {
        "id":280,
        "response":"import typing\n\ndef max_length(list1: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    if not list1:\n        return []\n    max_sublist = list1[0]\n    max_len = len(max_sublist)\n    for sublist in list1[1:]:\n        if len(sublist) > max_len:\n            max_sublist = sublist\n            max_len = len(sublist)\n    return max_sublist"
    },
    {
        "id":281,
        "response":"import typing\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n <= 0 or k <= 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    total_prev2 = k          # total for i-2\n    total_prev1 = k * k      # total for i-1\n    for _ in range(3, n + 1):\n        total_curr = (k - 1) * (total_prev1 + total_prev2)\n        total_prev2, total_prev1 = total_prev1, total_curr\n    return total_prev1"
    },
    {
        "id":282,
        "response":"import typing\n\ndef find(n, m):\n    return n \/ m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    return math.hypot(w, h)"
    },
    {
        "id":284,
        "response":"import typing\n\ndef max_val(listval: typing.List[typing.Union[int, float]]) -> typing.Union[int, float]:\n    if not listval:\n        raise ValueError(\"Empty list\")\n    max_elem = listval[0]\n    for x in listval[1:]:\n        if x > max_elem:\n            max_elem = x\n    return max_elem"
    },
    {
        "id":285,
        "response":"import math\n\ndef sum_div(number):\n    if number <= 0:\n        return 0\n    total = 0\n    root = int(math.isqrt(number))\n    for i in range(1, root + 1):\n        if number % i == 0:\n            total += i\n            other = number \/\/ i\n            if other != i:\n                total += other\n    return total"
    },
    {
        "id":286,
        "response":"import typing\n\nclass BIT:\n    def __init__(self, size: int):\n        self.n = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, index: int, delta: int = 1) -> None:\n        while index <= self.n:\n            self.tree[index] += delta\n            index += index & -index\n\n    def query(self, index: int) -> int:\n        res = 0\n        while index > 0:\n            res += self.tree[index]\n            index -= index & -index\n        return res\n\ndef get_Inv_Count(arr: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    # Coordinate compression\n    sorted_vals = sorted(set(arr))\n    rank = {v: i + 1 for i, v in enumerate(sorted_vals)}  # 1\u2011based index for BIT\n    bit = BIT(len(sorted_vals))\n    inv_count = 0\n    for val in reversed(arr):\n        idx = rank[val]\n        inv_count += bit.query(idx - 1)\n        bit.update(idx, 1)\n    return inv_count"
    },
    {
        "id":287,
        "response":"import typing\n\ndef flatten_list(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result: typing.List[typing.Any] = []\n    stack: typing.List[typing.Any] = [list1]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, list):\n            for item in reversed(current):\n                stack.append(item)\n        else:\n            result.append(current)\n    return result"
    },
    {
        "id":288,
        "response":"import typing\n\ndef intersection_nested_lists(l1: typing.List[typing.Any], l2: typing.List[typing.Any]) -> typing.List[typing.List]:\n    result: typing.List[typing.List] = []\n    for elem in l1:\n        if isinstance(elem, list):\n            for other in l2:\n                if isinstance(other, list) and elem == other:\n                    if elem not in result:\n                        result.append(elem)\n                    break\n    return result"
    },
    {
        "id":289,
        "response":"import typing\n\ndef max_aggregate(stdata: typing.List[typing.Tuple[typing.Any, ...]]) -> float:\n    max_sum = 0.0\n    for tup in stdata:\n        s = sum(tup)\n        if s > max_sum:\n            max_sum = s\n    return max_sum if max_sum != int(max_sum) else int(max_sum)"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    return math.comb(2 * n, n)"
    },
    {
        "id":291,
        "response":"import typing\n\ndef dict_depth(d: dict) -> int:\n    max_depth = 1\n    for v in d.values():\n        if isinstance(v, dict):\n            child_depth = dict_depth(v) + 1\n            if child_depth > max_depth:\n                max_depth = child_depth\n    return max_depth"
    },
    {
        "id":292,
        "response":"import math\n\ndef set_Bit_Number(n):\n    if n == 0:\n        return -1\n    return n.bit_length() - 1"
    },
    {
        "id":293,
        "response":"def solve(a, n):\n    rev1 = a[::-1]\n    rev2 = []\n    for i in range(n - 1, -1, -1):\n        rev2.append(a[i])\n    return rev1 == rev2"
    },
    {
        "id":294,
        "response":"import typing\n\ndef find_Element(arr: typing.List[int], ranges: typing.Tuple[int, int], rotations: int, index: int) -> int:\n    start, end = ranges\n    sub_len = end - start + 1\n    if sub_len > 1:\n        rot = rotations % sub_len\n        if rot:\n            sub = arr[start:end + 1]\n            arr = arr[:]\n            arr[start:end + 1] = sub[-rot:] + sub[:-rot]\n    return arr[index]"
    },
    {
        "id":295,
        "response":"import typing\n\ndef start_withp(words: typing.List[str]) -> typing.List[str]:\n    return [word for word in words if word and word[0] == '\u09aa']"
    },
    {
        "id":296,
        "response":"import typing\n\ndef max_sum_increasing_subseq(a: typing.List[int], n: int, index: int, k: int) -> int:\n    if index < 0 or index >= n or k <= index or k >= n:\n        return -1\n    if a[k] <= a[index]:\n        return -1\n    dp = [0] * (index + 1)\n    for i in range(index + 1):\n        max_sum = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp[j] + a[i] > max_sum:\n                max_sum = dp[j] + a[i]\n        dp[i] = max_sum\n    return dp[index]"
    },
    {
        "id":297,
        "response":"import typing\n\ndef colon_tuplex(tuplex: tuple, m: int, n: int) -> tuple:\n    if not tuplex or m == 0:\n        return ()\n    return tuple(row[n] for row in tuplex)"
    },
    {
        "id":298,
        "response":"import typing\n\ndef large_product(nums1: typing.List[int], nums2: typing.List[int], N: int) -> typing.List[int]:\n    if N <= 0 or not nums1 or not nums2:\n        return []\n    products = [a * b for a in nums1 for b in nums2]\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "id":299,
        "response":"def maximum(a, b):\n    return a if a >= b else b"
    },
    {
        "id":300,
        "response":"def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "id":301,
        "response":"import typing\n\ndef set_left_most_unset_bit(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Only non\u2011negative integers are supported\")\n    length = n.bit_length()\n    for i in range(length - 1, -1, -1):\n        if not (n >> i) & 1:\n            return n | (1 << i)\n    return n | (1 << length)"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    return (1.0 \/ 3.0) * math.pi * (r ** 2) * h"
    },
    {
        "id":303,
        "response":"import typing\n\ndef pos_nos(list1: typing.List[int]) -> typing.List[int]:\n    return [x for x in list1 if x > 0]"
    },
    {
        "id":304,
        "response":"import typing\n\ndef max_sum_rectangular_grid(grid: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0:\n        return 0\n    top = grid[0]\n    bottom = grid[1]\n    dp_prev = [0, top[0], bottom[0]]  # masks: 0-none, 1-top, 2-bottom\n    for i in range(1, n):\n        cur = [0, 0, 0]\n        # mask 0: select none at column i\n        cur[0] = max(dp_prev)\n        # mask 1: select top at column i\n        cur[1] = max(dp_prev[0], dp_prev[2]) + top[i]\n        # mask 2: select bottom at column i\n        cur[2] = max(dp_prev[0], dp_prev[1]) + bottom[i]\n        dp_prev = cur\n    return max(dp_prev)"
    },
    {
        "id":305,
        "response":"import typing\n\ndef find_Max_Len_Even(s: str) -> str:\n    max_len = 0\n    result = \"\"\n    for word in s.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                result = word\n    return result"
    },
    {
        "id":306,
        "response":"import typing\n\ndef find_last_occurrence(A: typing.List[int], x: int) -> int:\n    lo, hi = 0, len(A) - 1\n    result = -1\n    while lo <= hi:\n        mid = (lo + hi) \/\/ 2\n        if A[mid] == x:\n            result = mid\n            lo = mid + 1\n        elif A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return result"
    },
    {
        "id":307,
        "response":"import typing\n\ndef modified_encode(alist):\n    result = []\n    i = 0\n    n = len(alist)\n    while i < n:\n        count = 1\n        while i + count < n and alist[i + count] == alist[i]:\n            count += 1\n        if count > 1:\n            result.append((count, alist[i]))\n        else:\n            result.append(alist[i])\n        i += count\n    return result"
    },
    {
        "id":308,
        "response":"import math\n\ndef max_volume(s):\n    volume = (s \/ 12) ** 3\n    if volume.is_integer():\n        return int(volume)\n    return volume"
    },
    {
        "id":309,
        "response":"import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)"
    },
    {
        "id":310,
        "response":"import math\n\ndef sum_difference(n: int) -> int:\n    total = n * (n + 1) \/\/ 2\n    sum_sq = n * (n + 1) * (2 * n + 1) \/\/ 6\n    return total * total - sum_sq"
    },
    {
        "id":311,
        "response":"import typing\n\ndef find_demlo(n: int) -> int:\n    inc = ''.join(str(i) for i in range(1, n + 1))\n    dec = ''.join(str(i) for i in range(n - 1, 0, -1))\n    return int(inc + dec)"
    },
    {
        "id":312,
        "response":"import typing\n\ndef position_min(list1: typing.List[float]) -> typing.List[int]:\n    if not list1:\n        return []\n    min_val = min(list1)\n    return [i for i, v in enumerate(list1) if v == min_val]"
    },
    {
        "id":313,
        "response":"import typing\n\ndef right_rotate(arr: typing.List[int], n: int, out_of_place: int, cur: int) -> typing.List[int]:\n    if out_of_place < 0 or cur < 0 or out_of_place >= n or cur >= n:\n        return arr\n    if out_of_place == cur:\n        return arr\n    temp = arr[cur]\n    i = cur\n    while i > out_of_place:\n        arr[i] = arr[i - 1]\n        i -= 1\n    arr[out_of_place] = temp\n    return arr"
    },
    {
        "id":314,
        "response":"import typing\n\ndef sum_of_alternates(test_tuple: typing.Tuple[int, ...]) -> int:\n    return sum(test_tuple[::2])"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n: int) -> int:\n    if n == 0:\n        return 0\n    if int(math.isqrt(n)) ** 2 == n:\n        return 1\n    temp = n\n    while temp % 4 == 0:\n        temp \/\/= 4\n    if temp % 8 == 7:\n        return 4\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        remainder = n - i * i\n        if int(math.isqrt(remainder)) ** 2 == remainder:\n            return 2\n    return 3"
    },
    {
        "id":316,
        "response":"from collections import Counter\n\ndef most_occurrences(test_list):\n    if not test_list:\n        return None\n    counts = Counter(test_list)\n    max_count = max(counts.values())\n    for item in test_list:\n        if counts[item] == max_count:\n            return item"
    },
    {
        "id":317,
        "response":"import math\n\ndef check_isosceles(x, y, z):\n    a, b, c = sorted([float(x), float(y), float(z)])\n    return math.isclose(a * a + b * b, c * c, rel_tol=1e-9, abs_tol=1e-9)"
    },
    {
        "id":318,
        "response":"import typing\n\ndef rotate_left(list1: typing.List[typing.Any], m: int, n: int) -> typing.List[typing.Any]:\n    if not list1 or n == 0:\n        return []\n    length = len(list1)\n    m_mod = m % length if length else 0\n    rotated = list1[m_mod:] + list1[:m_mod]\n    return rotated[:n]"
    },
    {
        "id":319,
        "response":"import typing\n\ndef neg_count(lst: typing.List[int]) -> int:\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "id":320,
        "response":"import re\n\ndef find_char(text):\n    return re.findall(r'\\b[a-zA-Z]{3,5}\\b', text)"
    },
    {
        "id":321,
        "response":"import sys\n\ndef count_unset_bits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    length = n.bit_length() or 1\n    set_bits = bin(n).count('1')\n    return length - set_bits"
    },
    {
        "id":322,
        "response":"import collections\n\ndef char_frequency(str1):\n    return dict(collections.Counter(str1))"
    },
    {
        "id":323,
        "response":"import typing\n\ndef Sort(sub_li: typing.List[typing.List]) -> typing.List[typing.List]:\n    return sorted(sub_li, key=lambda x: x[1])"
    },
    {
        "id":324,
        "response":"import typing\n\ndef check_Validity(a: float, b: float, c: float) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a + b > c and a + c > b and b + c > a"
    },
    {
        "id":325,
        "response":"import typing\n\ndef ap_sum(a: int, n: int, d: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (2 * a + (n - 1) * d) \/\/ 2"
    },
    {
        "id":326,
        "response":"import re\n\ndef check_monthnum(monthname1):\n    if not isinstance(monthname1, str):\n        return False\n    month = monthname1.strip().lower()\n    return month == 'february'"
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text):\n    s = text.rstrip()\n    m = re.search(r'(\\w+)[^\\w]*$', s)\n    return m.group(1) if m else ''"
    },
    {
        "id":328,
        "response":"import typing\n\ndef check_Equality(s: str) -> int:\n    if not s:\n        return 0\n    freq = {}\n    for ch in s:\n        freq[ch] = freq.get(ch, 0) + 1\n    total = 0\n    for count in freq.values():\n        total += count * (count + 1) \/\/ 2\n    return total"
    },
    {
        "id":329,
        "response":"import math\n\ndef find_Divisor(x, y):\n    a, b = abs(x), abs(y)\n    if a == 0 and b == 0:\n        return 0\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "id":330,
        "response":"import typing\n\ndef sum_three_smallest_nums(lst: typing.List[int]) -> int:\n    positives = [x for x in lst if x > 0]\n    positives.sort()\n    return sum(positives[:3])"
    },
    {
        "id":331,
        "response":"def set_to_tuple(s):\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":""
    },
    {
        "id":333,
        "response":"import re\n\ndef dig_let(s: str) -> tuple[int, int]:\n    letters = sum(1 for ch in s if ch.isalpha())\n    digits = sum(1 for ch in s if ch.isdigit())\n    return (letters, digits)"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n, m):\n    if n > m:\n        return 0\n    low = max(n, 1)\n    start = math.isqrt(low)\n    if start * start < low:\n        start += 1\n    end = math.isqrt(m)\n    if end < start:\n        return 0\n    return end - start + 1"
    },
    {
        "id":335,
        "response":"import typing\n\ndef diff_consecutive(nums: typing.List[int]) -> typing.List[int]:\n    if len(nums) < 2:\n        return []\n    return [nums[i+1] - nums[i] for i in range(len(nums) - 1)]"
    },
    {
        "id":336,
        "response":"import typing\n\ndef zigzag(n: int, k: int) -> int:\n    s = n + k\n    base = (s - 1) * (s - 2) \/\/ 2\n    if s % 2 == 0:\n        return base + n\n    else:\n        return base + k"
    },
    {
        "id":337,
        "response":"import math\n\ndef count_Squares(m, n):\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = min(m, n)\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n, r):\n    return math.comb(r + n - 1, n - 1)"
    },
    {
        "id":339,
        "response":"import re\n\ndef check(string):\n    return bool(string) and re.fullmatch(r'[01]+', string) is not None"
    },
    {
        "id":340,
        "response":"import re\nimport typing\nimport itertools\nfrom collections import Counter\n\ndef minimum_Length(s: str) -> str:\n    if not s:\n        return s\n    freq = Counter(s)\n    max_freq = max(freq.values())\n    candidates = {ch for ch, cnt in freq.items() if cnt == max_freq}\n    char_to_remove = None\n    for ch in s:\n        if ch in candidates:\n            char_to_remove = ch\n            break\n    if char_to_remove is None:\n        return s\n    return ''.join(ch for ch in s if ch != char_to_remove)"
    },
    {
        "id":341,
        "response":"import collections\n\ndef first_Element(arr, n, k):\n    freq = collections.Counter(arr)\n    for x in arr:\n        if freq[x] == k:\n            return x\n    return -1"
    },
    {
        "id":342,
        "response":"import typing\n\ndef unique_Characters(s: str) -> bool:\n    return len(set(s)) == len(s)"
    },
    {
        "id":343,
        "response":"import typing\n\ndef remove_column(list1: typing.List[typing.List[int]], n: int) -> typing.List[typing.List[int]]:\n    if not list1:\n        return []\n    result = []\n    for row in list1:\n        if 0 <= n < len(row):\n            new_row = row[:n] + row[n+1:]\n        else:\n            new_row = row[:]\n        result.append(new_row)\n    return result"
    },
    {
        "id":344,
        "response":"def tn_ap(a, n, d):\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"import math\n\ndef count_Rectangles(radius: int) -> int:\n    if radius < 0:\n        return 0\n    y_limits = {}\n    for x in range(-radius, radius + 1):\n        max_y = int(math.isqrt(radius * radius - x * x))\n        y_limits[x] = max_y\n    total = 0\n    xs = list(y_limits.keys())\n    n = len(xs)\n    for i in range(n):\n        x1 = xs[i]\n        for j in range(i + 1, n):\n            x2 = xs[j]\n            common_y = min(y_limits[x1], y_limits[x2])\n            count_y = 2 * common_y + 1\n            if count_y >= 2:\n                total += count_y * (count_y - 1) \/\/ 2\n    return total"
    },
    {
        "id":346,
        "response":"def find_angle(a, b):\n    return 180 - a - b"
    },
    {
        "id":347,
        "response":"import typing\n\ndef find_max(test_list: typing.List[typing.Tuple[int, ...]]) -> typing.Optional[int]:\n    max_val = None\n    for tup in test_list:\n        for item in tup:\n            if max_val is None or item > max_val:\n                max_val = item\n    return max_val"
    },
    {
        "id":348,
        "response":"import typing\n\ndef moddiv_list(nums1: typing.List[int], nums2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda pair: pair[0] % pair[1], zip(nums1, nums2)))"
    },
    {
        "id":349,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    if a == 0:\n        return False\n    D = b * b - 4 * a"
    },
    {
        "id":350,
        "response":"import typing\n\ndef get_carol(n: int) -> int:\n    return (2 ** (n + 1) - 1) ** 2 - 2"
    },
    {
        "id":351,
        "response":"import typing\n\ndef remove_empty(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [item for item in list1 if not (isinstance(item, list) and len(item) == 0)]"
    },
    {
        "id":352,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    freq = collections.Counter(nums)\n    max_count = max(freq.values())\n    for item in nums:\n        if freq[item] == max_count:\n            return item"
    },
    {
        "id":353,
        "response":"import typing\n\ndef add_K_element(test_list: tuple, K: int) -> tuple:\n    return tuple(x + K for x in test_list)"
    },
    {
        "id":354,
        "response":"import typing\n\ndef make_flip(ch: str) -> int:\n    flips_start_with_0 = 0\n    flips_start_with_1 = 0\n    for i, c in enumerate(ch):\n        expected_0 = '0' if i % 2 == 0 else '1'\n        expected_1 = '1' if i % 2 == 0 else '0'\n        if c != expected_0:\n            flips_start_with_0 += 1\n        if c != expected_1:\n            flips_start_with_1 += 1\n    return min(flips_start_with_0, flips_start_with_1)"
    },
    {
        "id":355,
        "response":"def count_Digit(n):\n    return len(str(abs(int(n))))"
    },
    {
        "id":356,
        "response":"import typing\n\ndef adjacent_num_product(list_nums: typing.List[int]) -> typing.Optional[int]:\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "id":357,
        "response":"import typing\n\nclass TreeNode:\n    def __init__(self, val: int = 0, left: 'TreeNode | None' = None, right: 'TreeNode | None' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_balanced(root: TreeNode | None) -> bool:\n    def check(node: TreeNode | None) -> tuple[bool, int]:\n        if not node:\n            return True, 0\n        left_balanced, left_height = check(node.left)\n        if not left_balanced:\n            return False, 0\n        right_balanced, right_height = check(node.right)\n        if not right_balanced:\n            return False, 0\n        if abs(left_height - right_height) > 1:\n            return False, 0\n        return True, max(left_height, right_height) + 1\n    balanced, _ = check(root)\n    return balanced"
    },
    {
        "id":358,
        "response":"import typing\n\ndef repeat_tuples(test_tup: tuple, N: int) -> tuple:\n    if N <= 0 or not test_tup:\n        return ()\n    return test_tup * N"
    },
    {
        "id":359,
        "response":""
    },
    {
        "id":360,
        "response":"import typing\n\ndef float_sort(price: tuple) -> tuple:\n    return tuple(sorted(price, key=lambda x: x[1]))"
    },
    {
        "id":361,
        "response":"import typing\n\ndef smallest_missing(A: list[int], left_element: int, right_element: int) -> typing.Optional[int]:\n    if left_element > right_element:\n        return None\n    present = set(A)\n    for value in range(left_element, right_element + 1):\n        if value not in present:\n            return value\n    return None"
    },
    {
        "id":362,
        "response":"import typing\n\ndef heap_assending(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    def heapify(arr, heap_size, root):\n        while True:\n            largest = root\n            left = 2 * root + 1\n            right = 2 * root + 2\n            if left < heap_size and arr[left] > arr[largest]:\n                largest = left\n            if right < heap_size and arr[right] > arr[largest]:\n                largest = right\n            if largest != root:\n                arr[root], arr[largest] = arr[largest], arr[root]\n                root = largest\n            else:\n                break\n    for i in range(n \/\/ 2 - 1, -1, -1):\n        heapify(nums, n, i)\n    for end in range(n - 1, 0, -1):\n        nums[0], nums[end] = nums[end], nums[0]\n        heapify(nums, end, 0)\n    return nums"
    },
    {
        "id":363,
        "response":"import typing\n\ndef volume_cuboid(l: float, w: float, h: float) -> float:\n    return l * w * h"
    },
    {
        "id":364,
        "response":"import itertools\n\ndef permute_string(s):\n    return [''.join(p) for p in itertools.permutations(s)]"
    },
    {
        "id":365,
        "response":"import math\n\ndef round_num(n, m):\n    if m == 0:\n        raise ValueError(\"m cannot be zero\")\n    return round(n \/ m) * m"
    },
    {
        "id":366,
        "response":"import typing\n\ndef remove_replica(test_tup: tuple) -> tuple:\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append(None)\n        else:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":367,
        "response":"import re\n\ndef remove_Char(s: str, c: str) -> str:\n    return s.replace(c, \"\")"
    },
    {
        "id":368,
        "response":"def move_first(test_list):\n    if len(test_list) < 2:\n        return test_list\n    return [test_list[-1]] + test_list[:-1]"
    },
    {
        "id":369,
        "response":"import math\n\ndef surfacearea_cuboid(l, w, h):\n    if l <= 0 or w <= 0 or h <= 0:\n        return 0\n    return 2 * (l * w + w * h + l * h)"
    },
    {
        "id":370,
        "response":"import typing\n\ndef multi_list(rownum: int, colnum: int) -> typing.List[typing.List[int]]:\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]"
    },
    {
        "id":371,
        "response":"import typing\n\ndef index_on_inner_list(list_data: typing.List[typing.List], index_no: int) -> typing.List:\n    result = []\n    for inner in list_data:\n        result.append(inner[index_no])\n    return result"
    },
    {
        "id":372,
        "response":"import typing\n\ndef find_rotation_count(A: typing.List[int]) -> int:\n    n = len(A)\n    if n == 0:\n        return 0\n    low, high = 0, n - 1\n    while low <= high:\n        if A[low] <= A[high]:\n            return low\n        mid = (low + high) \/\/ 2\n        next_idx = (mid + 1) % n\n        prev_idx = (mid - 1 + n) % n\n        if A[mid] <= A[next_idx] and A[mid] <= A[prev_idx]:\n            return mid\n        if A[mid] >= A[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0"
    },
    {
        "id":373,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Only non\u2011negative integers are supported\")\n    mask = 0\n    i = 1\n    while i < n.bit_length() + 2:\n        mask |= 1 << i\n        i += 2\n    return n ^ mask"
    },
    {
        "id":374,
        "response":"import sys\n\ndef frequency_Of_Smallest(n, arr):\n    if not arr:\n        return 0\n    smallest = min(arr)\n    return arr.count(smallest)"
    },
    {
        "id":375,
        "response":"import functools\n\n@functools.lru_cache(maxsize=None)\ndef get_perrin(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "id":376,
        "response":"import typing\n\ndef swap_count(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    left_positions = [i for i, ch in enumerate(s) if ch == '[']\n    if len(left_positions) * 2 != n:\n        return -1\n    count = 0\n    imbalance = 0\n    next_left = 0\n    for i, ch in enumerate(s):\n        if ch == '[':\n            imbalance = max(imbalance - 1, 0)\n            next_left += 1\n        else:\n            imbalance += 1\n            if imbalance > 0:\n                swap_idx = left_positions[next_left]\n                count += swap_idx - i\n                next_left += 1\n                imbalance = 0\n    return count"
    },
    {
        "id":377,
        "response":"def even_or_odd(N):\n    return \"Even\" if N % 2 == 0 else \"Odd\""
    },
    {
        "id":378,
        "response":"import math\n\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":379,
        "response":"import typing\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
    },
    {
        "id":380,
        "response":"import typing\n\ndef add_string(lst: typing.List[str], prefix: str) -> typing.List[str]:\n    if not lst or not prefix:\n        return lst.copy()\n    return [prefix + item for item in lst]"
    },
    {
        "id":381,
        "response":"from typing import List, Any, Dict\n\ndef convert_list_dictionary(l1: List[Any], l2: List[Any], l3: List[Any]) -> Dict[Any, Dict[Any, Any]]:\n    result = {}\n    for k, sk, v in zip(l1, l2, l3):\n        result[k] = {sk: v}\n    return result"
    },
    {
        "id":382,
        "response":"import functools\n\n@functools.lru_cache(maxsize=None)\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n \/\/ 2) + get_max_sum(n \/\/ 3) + get_max_sum(n \/\/ 4) + get_max_sum(n \/\/ 5))"
    },
    {
        "id":383,
        "response":"import typing\n\ndef max_length_list(input_list: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    if not input_list:\n        return []\n    return max(input_list, key=lambda x: len(x))"
    },
    {
        "id":384,
        "response":"import typing\n\ndef check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"import collections\n\ndef first_non_repeating_character(str1):\n    if not str1:\n        return ''\n    freq = collections.Counter(str1)\n    for ch in str1:\n        if freq[ch] == 1:\n            return ch\n    return ''"
    },
    {
        "id":386,
        "response":"import typing\n\ndef check_char(string: str) -> bool:\n    if not string:\n        return False\n    return string[0] == string[-1]"
    },
    {
        "id":387,
        "response":"import typing\n\ndef median_numbers(a: typing.Any, b: typing.Any, c: typing.Any):\n    return sorted((a, b, c))[1]"
    },
    {
        "id":388,
        "response":"import typing\n\ndef sum_of_digits(nums: typing.List[int]) -> typing.List[int]:\n    return [sum(int(d) for d in str(abs(n))) for n in nums]"
    },
    {
        "id":389,
        "response":"import typing\n\ndef bitwise_xor(test_tup1: tuple[int, ...], test_tup2: tuple[int, ...]) -> tuple[int, ...]:\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"import collections\n\ndef extract_freq(test_list):\n    freq = {}\n    for tup in test_list:\n        freq[tup] = freq.get(tup, 0) + 1\n    return freq"
    },
    {
        "id":391,
        "response":"import typing\n\ndef add_nested_tuples(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        return test_tup1 + test_tup2\n    return tuple(add_nested_tuples(a, b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"import math\n\ndef ncr_modp(n, r, p):\n    if r < 0 or r > n:\n        return 0\n    r = min(r, n - r)\n    result = 1\n    for i in range(1, r + 1):\n        result = result * (n - r + i) \/\/ i\n    return result % p"
    },
    {
        "id":393,
        "response":"import re\n\ndef is_valid_URL(url: str) -> bool:\n    pattern = re.compile(\n        r'^(?:http|https|ftp):\/\/'                     # protocol\n        r'(?:'                                        # host\n        r'(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}'           # domain name\n        r'|'                                          # or\n        r'(?:\\d{1,3}\\.){3}\\d{1,3}'                    # IPv4 address\n        r')'\n        r'(?::\\d+)?'                                  # optional port\n        r'(?:\/[^\\s?#]*)?'                             # optional path\n        r'(?:\\?[^\\s#]*)?'                             # optional query\n        r'(?:#[^\\s]*)?'                               # optional fragment\n        r'$'\n    )\n    return bool(pattern.match(url))"
    },
    {
        "id":394,
        "response":"def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b"
    },
    {
        "id":395,
        "response":"import typing\n\ndef check_tuplex(tuplex: typing.Any, tuple1: tuple) -> bool:\n    return tuplex in tuple1"
    },
    {
        "id":396,
        "response":"def find_Parity(x):\n    return \"Even\" if x % 2 == 0 else \"Odd\""
    },
    {
        "id":397,
        "response":"import typing\n\ndef rearrange_bigger(n: int) -> int:\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1:] = reversed(digits[i + 1:])\n    result = int(''.join(digits))\n    return result if result > n else -1"
    },
    {
        "id":398,
        "response":"import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    heap = []\n    n1, n2 = len(nums1), len(nums2)\n    for i in range(min(k, n1)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    result = []\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < n2:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return result"
    },
    {
        "id":399,
        "response":"import typing\n\ndef min_product_tuple(list1: typing.List[typing.Tuple[typing.Any, ...]]) -> typing.Optional[typing.Tuple]:\n    if not list1:\n        return None\n    min_tuple = None\n    min_product = None\n    for t in list1:\n        if len(t) < 2:\n            continue\n        try:\n            product = t[0] * t[1]\n        except Exception:\n            continue\n        if min_product is None or product < min_product:\n            min_product = product\n            min_tuple = t\n    return min_tuple"
    },
    {
        "id":400,
        "response":"import typing\n\ndef min_val(listval: typing.List[typing.Union[int, float]]) -> typing.Union[int, float]:\n    if not listval:\n        raise ValueError(\"listval must not be empty\")\n    min_value = listval[0]\n    for item in listval[1:]:\n        if item < min_value:\n            min_value = item\n    return min_value"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-zA-Z0-9])', lambda m: m.group(1).upper(), word)"
    },
    {
        "id":402,
        "response":"import typing\n\ndef remove_odd(l: typing.List[int]) -> typing.List[int]:\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "id":403,
        "response":"import typing\n\ndef extract_nth_element(list1: typing.List[tuple], n: int) -> typing.List:\n    return [t[n] for t in list1]"
    },
    {
        "id":404,
        "response":"import typing\n\ndef overlapping(list1: typing.Sequence[typing.Any], list2: typing.Sequence[typing.Any]) -> list:\n    set2 = set(list2)\n    seen = set()\n    result = []\n    for item in list1:\n        if item in set2 and item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result"
    },
    {
        "id":405,
        "response":"import typing\n\ndef max_Product(arr: typing.List[int]) -> typing.Optional[typing.Tuple[int, int]]:\n    if len(arr) < 2:\n        return None\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n    for x in arr:\n        if x > max1:\n            max2 = max1\n            max1 = x\n        elif x > max2:\n            max2 = x\n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n    prod_max = max1 * max2\n    prod_min = min1 * min2\n    if prod_max >= prod_min:\n        a, b = max1, max2\n    else:\n        a, b = min1, min2\n    return (a, b) if a <= b else (b, a)"
    },
    {
        "id":406,
        "response":"import sys\n\ndef breakSum(n: int) -> int:\n    s = str(abs(n))\n    length = len(s)\n    if length < 3:\n        return sum(int(ch) for ch in s)\n    max_sum = -sys.maxsize\n    for i in range(1, length - 1):\n        for j in range(i + "
    },
    {
        "id":407,
        "response":"import typing\n\ndef group_tuples(Input: typing.List[tuple]) -> typing.Any:\n    if not Input:\n        return None\n    common = Input[0][0] if Input[0] else None\n    for t in Input[1:]:\n        if not t or t[0] != common:\n            return None\n    return common"
    },
    {
        "id":408,
        "response":"import typing\n\ndef Find_Max(lst: typing.List[int]) -> typing.List[int]:\n    if not lst:\n        return []\n    best_start = 0\n    best_len = 1\n    cur_start = 0\n    cur_len = 1\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            cur_len += 1\n        else:\n            if cur_len > best_len:\n                best_start = cur_start\n                best_len = cur_len\n            cur_start = i\n            cur_len = 1\n    if cur_len > best_len:\n        best_start = cur_start\n        best_len = cur_len\n    return lst[best_start:best_start + best_len]"
    },
    {
        "id":409,
        "response":""
    },
    {
        "id":410,
        "response":"import typing\n\ndef cube_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 2 * n * n * (n + 1) * (n + 1)"
    },
    {
        "id":411,
        "response":"import typing\n\ndef concatenate_tuple(test_tup: tuple, delimiter: str) -> str:\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "id":412,
        "response":"import typing\n\ndef find_Average_Of_Cube(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    return float(n * (n + 1) * (n + 1) \/ 4)"
    },
    {
        "id":413,
        "response":"import typing\n\ndef get_maxgold(gold: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if m == 0 or n == 0:\n        return 0\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        dp[i][n - 1] = gold[i][n - 1]\n    for col in range(n - 2, -1, -1):\n        for row in range(m):\n            right = dp[row][col + 1]\n            right_up = dp[row - 1][col + 1] if row > 0 else 0\n            right_down = dp[row + 1][col + 1] if row < m - 1 else 0\n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    return max(dp[row][0] for row in range(m))"
    },
    {
        "id":414,
        "response":"import typing\n\ndef extract_rear(test_tuple: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return tuple(s[-1] if s else '' for s in test_tuple)"
    },
    {
        "id":415,
        "response":""
    },
    {
        "id":416,
        "response":"import typing\n\ndef filter_oddnumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt: str) -> str:\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    result = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    if result == dt:\n        raise ValueError(f\"Invalid date format: '{dt}'. Expected 'yyyy-mm-dd'.\")\n    return result"
    },
    {
        "id":418,
        "response":"import typing\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list"
    },
    {
        "id":419,
        "response":"import typing\n\ndef and_tuples(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return test_tup1 + test_tup2"
    },
    {
        "id":420,
        "response":"import math\n\ndef parabola_directrix(a, b, c):\n    if a == 0:\n        return float('nan')\n    h = -b \/ (2 * a)\n    k = a * h * h + b * h + c\n    return k - 1 \/ (4 * a)"
    },
    {
        "id":421,
        "response":"import typing\n\ndef common_element(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> bool:\n    return bool(set(list1) & set(list2))"
    },
    {
        "id":422,
        "response":"import typing\n\ndef median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) \/ 2.0"
    },
    {
        "id":423,
        "response":"import typing\n\ndef check_greater(arr: typing.List[int], number: int) -> bool:\n    for elem in arr:\n        if number <= elem:\n            return False\n    return True"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    return bool(re.search(r'B', str(text)))"
    },
    {
        "id":425,
        "response":"def last_Digit(n):\n    return abs(n) % 10"
    },
    {
        "id":426,
        "response":"import typing\n\ndef neg_nos(list1: typing.List[typing.Union[int, float]]) -> typing.List[typing.Union[int, float]]:\n    return [x for x in list1 if isinstance(x, (int, float)) and x < 0]"
    },
    {
        "id":427,
        "response":""
    },
    {
        "id":428,
        "response":"import typing\n\ndef count_bidirectional(test_list: typing.List[typing.Tuple[int, int]]) -> int:\n    present = set(test_list)\n    counted: set[typing.FrozenSet[int]] = set()\n    count = 0\n    for a, b in present:\n        if (b, a) in present:\n            pair = frozenset((a, b))\n            if pair not in counted:\n                counted.add(pair)\n                count += 1\n    return count"
    },
    {
        "id":429,
        "response":"import typing\n\ndef multiple_to_single(L: typing.List[int]) -> int:\n    if not L:\n        return 0\n    return int(''.join(str(x) for x in L))"
    },
    {
        "id":430,
        "response":""
    },
    {
        "id":431,
        "response":"import math\n\ndef surfacearea_cube(l):\n    return 6 * l * l"
    },
    {
        "id":432,
        "response":"import typing\n\ndef positive_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    positive = sum(1 for x in nums if x > 0)\n    return positive \/ len(nums)"
    },
    {
        "id":433,
        "response":"from typing import List, Optional\n\ndef largest_neg(list1: List[int]) -> Optional[int]:\n    max_neg = None\n    for x in list1:\n        if x < 0:\n            if max_neg is None or x > max_neg:\n                max_neg = x\n    return max_neg"
    },
    {
        "id":434,
        "response":"import typing\n\ndef trim_tuple(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    return [t[:K] for t in test_list]"
    },
    {
        "id":435,
        "response":"import typing\n\ndef index_multiplication(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":"def count_Occurrence(tup, lst):\n    return tup + tuple(lst)"
    },
    {
        "id":437,
        "response":"def cube_nums(nums):\n    return list(map(lambda x: x ** 3, nums))"
    },
    {
        "id":438,
        "response":"import math\n\ndef cal_sum(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    limit = int(math.isqrt(n))\n    for i in range(2, limit + 1):\n        if sieve[i]:\n            step = i\n            start = i * i\n            sieve[start:n+1:step] = [False] * ((n - start) \/\/ step + 1)\n    return sum(i for i, is_prime in enumerate(sieve) if is_prime)"
    },
    {
        "id":439,
        "response":"import math\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    return (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1) != 0"
    },
    {
        "id":440,
        "response":"import typing\n\ndef extract_string(str_list: typing.List[str], l: int) -> typing.List[str]:\n    result = []\n    for s in str_list:\n        if len(s) == l:\n            result.append(s)\n    return result"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1: str) -> str:\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":"import typing\n\ndef loss_amount(actual_cost: typing.Union[int, float], sale_amount: typing.Union[int, float]) -> typing.Optional[float]:\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return None"
    },
    {
        "id":443,
        "response":"import math\n\ndef _sum_of_divisors(x: int) -> int:\n    if x <= 0:\n        return 0\n    total = 0\n    limit = int(math.isqrt(x))\n    for i in range(1, limit + 1):\n        if x % i == 0:\n            total += i\n            j = x \/\/ i\n            if j != i:\n                total += j\n    return total\n\ndef sumofFactors(n: int) -> int:\n    if n % 2 != 0 or n <= 1:\n        return 0\n    return 2 * _sum_of_divisors(n \/\/ 2)"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    for match in re.finditer(r'\\b\\w+\\b', text):\n        word = match.group()\n        if 'z' in word.lower():\n            return word\n    return \"\""
    },
    {
        "id":445,
        "response":"import typing\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}"
    },
    {
        "id":446,
        "response":"import typing\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"import typing\n\ndef Find_Min(lst: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    if not lst:\n        return []\n    min_len = min(len(sub) for sub in lst)\n    for sub in lst:\n        if len(sub) == min_len:\n            return sub\n    return []"
    },
    {
        "id":448,
        "response":"def rectangle_area(l, b):\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]', '', str1)"
    },
    {
        "id":450,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    return [sub[0] for sub in lst if sub]"
    },
    {
        "id":451,
        "response":"import re\n\ndef upper_ctr(s: str) -> int:\n    return sum(1 for ch in s if ch.isupper())"
    },
    {
        "id":452,
        "response":""
    },
    {
        "id":453,
        "response":"import typing\n\ndef max_subarray_product(arr: typing.List[int]) -> int:\n    if not arr:\n        return 0\n    max_prod = arr[0]\n    max_ending = arr[0]\n    min_ending = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_ending, min_ending = min_ending, max_ending\n        max_ending = max(num, max_ending * num)\n        min_ending = min(num, min_ending * num)\n        max_prod = max(max_prod, max_ending)\n    return max_prod"
    },
    {
        "id":454,
        "response":"import typing\n\ndef check_value(d: dict, n) -> bool:\n    return all(v == n for v in d.values())"
    },
    {
        "id":455,
        "response":"import typing\n\ndef drop_empty(dict1: dict) -> dict:\n    def is_empty(value):\n        if value is None:\n            return True\n        if isinstance(value, str) and value == \"\":\n            return True\n        if isinstance(value, (list, dict, set, tuple)) and len(value) == 0:\n            return True\n        return False\n    return {k: v for k, v in dict1.items() if not is_empty(v)}"
    },
    {
        "id":456,
        "response":"import typing\n\ndef find_peak_util(arr: typing.List[int], low: int, high: int, n: int) -> int:\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        left_ok = (mid == 0) or (arr[mid] >= arr[mid - 1])\n        right_ok = (mid == n - 1) or (arr[mid] >= arr[mid + 1])\n        if left_ok and right_ok:\n            return arr[mid]\n        if mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return arr[low] if 0 <= low < n else arr[0]"
    },
    {
        "id":457,
        "response":"def decimal_to_Octal(deciNum):\n    if deciNum == 0:\n        return \"0\"\n    result = []\n    n = deciNum\n    while n > 0:\n        result.append(str(n % 8))\n        n \/\/= 8\n    return ''.join(reversed(result))"
    },
    {
        "id":458,
        "response":"import typing\n\ndef max_product(arr: typing.List[int], n: int) -> int:\n    if not arr:\n        return 0\n    dp = [0] * len(arr)\n    max_overall = arr[0]\n    for i, val in enumerate(arr):\n        best_prev = 0\n        for j in range(i):\n            if arr[j] < val and dp[j] > best_prev:\n                best_prev = dp[j]\n        dp[i] = val if best_prev == 0 else val * best_prev\n        if dp[i] > max_overall:\n            max_overall = dp[i]\n    return max_overall"
    },
    {
        "id":459,
        "response":"import typing\n\ndef max_profit(prices: typing.List[int], k: int) -> int:\n    n = len(prices)\n    if n < 2 or k == 0:\n        return 0\n    if k >= n \/\/ 2:\n        profit = 0\n        for i in range(1, n):\n            diff = prices[i] - prices[i - 1]\n            if diff > 0:\n                profit += diff\n        return profit\n    prev = [0] * n\n    for t in range(1, k + 1):\n        curr = [0] * n\n        max_diff = -prices[0]\n        for i in range(1, n):\n            curr[i] = max(curr[i - 1], prices[i] + max_diff)\n            max_diff = max(max_diff, prev[i] - prices[i])\n        prev = curr\n    return prev[-1]"
    },
    {
        "id":460,
        "response":"import typing\n\ndef add_pairwise(test_tup: tuple) -> tuple:\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2))"
    },
    {
        "id":461,
        "response":"import typing\n\ndef find_remainder(arr: typing.List[int], lens: int, n: int) -> int:\n    if n == 0:\n        raise ValueError(\"Modulo n cannot be zero\")\n    result = 1 % n\n    for i in range(lens):\n        result = (result * (arr[i] % n)) % n\n    return result"
    },
    {
        "id":462,
        "response":"import typing\n\ndef check_Consecutive(l: typing.List[int]) -> bool:\n    if not l:\n        return False\n    n = len(l)\n    min_val = min(l)\n    max_val = max(l)\n    if max_val - min_val != n - 1:\n        return False\n    return len(set(l)) == n"
    },
    {
        "id":463,
        "response":"import typing\n\ndef tuple_intersection(test_list1: typing.List[tuple], test_list2: typing.List[tuple]) -> typing.List[tuple]:\n    normalized_set = {tuple(sorted(t)) for t in test_list2}\n    result = []\n    for t in test_list1:\n        if tuple(sorted(t)) in normalized_set:\n            result.append(t)\n    return result"
    },
    {
        "id":464,
        "response":"import re\n\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    if not ch:\n        return str1\n    pattern = re.escape(ch)\n    return re.sub(pattern, newch, str1)"
    },
    {
        "id":465,
        "response":"import typing\n\ndef sort_counter(dict1: dict) -> dict:\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}"
    },
    {
        "id":466,
        "response":"import typing\n\ndef big_sum(nums: typing.List[int]) -> int:\n    if not nums:\n        return 0\n    return min(nums) + max(nums)"
    },
    {
        "id":467,
        "response":"import typing\n\ndef is_lower(string: str) -> str:\n    return string.lower()\n"
    },
    {
        "id":468,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return ''.join(ch for ch in str1 if not ch.islower())"
    },
    {
        "id":469,
        "response":"import math\n\ndef first_Digit(n):\n    n = abs(int(n))\n    if n == 0:\n        return 0\n    while n >= 10:\n        n \/\/= 10\n    return n"
    },
    {
        "id":470,
        "response":"import collections\n\ndef get_max_occuring_char(str1: str) -> str:\n    if not str1:\n        return ''\n    freq = collections.Counter(str1)\n    max_char = ''\n    max_count = -1\n    for ch in str1:\n        cnt = freq[ch]\n        if cnt > max_count:\n            max_count = cnt\n            max_char = ch\n    return max_char"
    },
    {
        "id":471,
        "response":"import sys\n\ndef is_subset_sum(arr, n, target):\n    if target < 0:\n        return False\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for i in range(min(n, len(arr))):\n        val = arr[i]\n        if val > target:\n            continue\n        for s in range(target, val - 1, -1):\n            if dp[s - val]:\n                dp[s] = True\n        if dp[target]:\n            return True\n    return dp[target]"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    return re.findall(r'[A-Z][a-z]+', text)"
    },
    {
        "id":473,
        "response":"import math\n\ndef _prime_factors(n: int):\n    factors = {}\n    d = 2\n    while d * d <= n:\n        while n % d == 0:\n            factors[d] = factors.get(d, 0) + 1\n            n \/\/= d\n        d += 1 if d == 2 else 2\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\n\ndef _exp_in_fact(n: int, p: int):\n    count = 0\n    div = p\n    while div <= n:\n        count += n \/\/ div\n        div *= p\n    return count\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    if x == 1:\n        return 1\n    factors = _prime_factors(x)\n    result = 1\n    for p, e in factors.items():\n        low, high = 1, p * e\n        while _exp_in_fact(high, p) < e:\n            high *= 2\n        while low < high:\n            mid = (low + high) \/\/ 2\n            if _exp_in_fact(mid, p) >= e:\n                high = mid\n            else:\n                low = mid + 1\n        result = max(result, low)\n    return result"
    },
    {
        "id":474,
        "response":"import typing\n\ndef remove_matching_tuple(test_list1: typing.List[typing.Tuple], test_list2: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    remove_set = set(test_list2)\n    return [t for t in test_list1 if t not in remove_set]"
    },
    {
        "id":475,
        "response":"import typing\n\ndef is_palindrome(n: int) -> bool:\n    s = str(n)\n    return s == s[::-1]\n\ndef largest_palindromic_number(arr: typing.List[int]) -> typing.Optional[int]:\n    max_pal: typing.Optional[int] = None\n    for num in arr:\n        if is_palindrome(num):\n            if max_pal is None or num > max_pal:\n                max_pal = num\n    return max_pal"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n, r):\n    if r < 0 or n < 0 or r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = r if r <= n - r else n - r\n    result = 1\n    for i in range(1, r + 1):\n        result = result * (n - r + i) \/\/ i\n    return result"
    },
    {
        "id":477,
        "response":"import typing\n\ndef sort_tuple(tup: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    return sorted(tup, key=lambda x: x[-1])"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    if a <= 0:\n        return 0.0\n    return (5 * a * a) \/ (4 * math.tan(math.pi \/ 5))"
    },
    {
        "id":479,
        "response":"import typing\n\ndef frequency_Of_Largest(n: int, arr: list[int]) -> int:\n    if n == 0 or not arr:\n        return 0\n    max_val = max(arr)\n    return sum(1 for x in arr if x == max_val)"
    },
    {
        "id":480,
        "response":"import collections\n\ndef extract_symmetric(test_list):\n    cnt = collections.Counter(test_list)\n    symmetric_set = set()\n    for a, b in test_list:\n        rev = (b, a)\n        if rev in cnt:\n            if (a, b) != rev:\n                symmetric_set.add((a, b))\n                symmetric_set.add(rev)\n            else:\n                if cnt[(a, b)] > 1:\n                    symmetric_set.add((a, b))\n    return [t for t in test_list if t in symmetric_set]"
    },
    {
        "id":481,
        "response":"import math\n\ndef sum_gp(a, n, r):\n    if n <= 0:\n        return 0\n    if r == 1:\n        return a * n\n    return a * (pow(r, n) - 1) \/\/ (r - 1) if (r - 1) != 0 else a * n"
    },
    {
        "id":482,
        "response":"import typing\n\ndef binary_search(item_list: typing.List[int], item: int) -> int:\n    left, right = 0, len(item_list) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        mid_val = item_list[mid]\n        if mid_val == item:\n            return mid\n        elif mid_val < item:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "id":483,
        "response":"import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    if radius <= 0:\n        return []\n    min_x, max_x = sorted((startx, endx))\n    min_y, max_y = sorted((starty, endy))\n    hex_height = math.sqrt(3) * radius\n    horiz_spacing = 1.5 * radius\n    vert_spacing = hex_height\n    polygons = []\n    col = 0\n    while True:\n        cx = min_x + radius + col * horiz_spacing\n        if cx - radius > max_x:\n            break\n        row_offset = (hex_height \/ 2) if (col % 2) else 0\n        row = 0\n        while True:\n            cy = min_y + row_offset + row * vert_spacing\n            if cy - hex_height \/ 2 > max_y:\n                break\n            if cx + radius >= min_x and cx - radius <= max_x and cy + hex_height \/ 2 >= min_y and cy - hex_height \/ 2 <= max_y:\n                vertices = []\n                for i in range(6):\n                    angle = math.radians(30 + i * 60)\n                    vx = cx + radius * math.cos(angle)\n                    vy = cy + radius * math.sin(angle)\n                    vertices.append((vx, vy))\n                polygons.append(vertices)\n            row += 1\n        col += 1\n    return polygons"
    },
    {
        "id":484,
        "response":"import typing\n\ndef binary_to_integer(test_tup: typing.Tuple[typing.Union[int, str], ...]) -> int:\n    result = 0\n    for bit in test_tup:\n        result = (result << 1) + int(bit)\n    return result"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\n\ndef heap_queue_smallest(nums, n):\n    heap = list(nums)\n    heapq.heapify(heap)\n    return heapq.heappop(heap)"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r * r + h * h)\n    return math.pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"import typing\n\ndef gcd(x: int, y: int) -> int:\n    while y:\n        x, y = y, x % y\n    return x"
    },
    {
        "id":489,
        "response":"import math\n\ndef diameter_circle(r):\n    return r * 2"
    },
    {
        "id":490,
        "response":"def concatenate_elements(lst):\n    return ''.join(str(item) for item in lst)"
    },
    {
        "id":491,
        "response":"import typing\n\ndef min_cost(cost: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if not cost or m < 0 or n < 0:\n        return 0\n    rows, cols = len(cost), len(cost[0])\n    if m >= rows or n >= cols:\n        raise IndexError(\"Target position out of matrix bounds\")\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"import collections\n\ndef similar_elements(test_tup1, test_tup2):\n    counter = collections.Counter(test_tup2)\n    result = []\n    for item in test_tup1:\n        if counter[item] > 0:\n            result.append(item)\n            counter[item] -= 1\n    return tuple(result)"
    },
    {
        "id":493,
        "response":"import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    limit = int(math.isqrt(n))\n    i = 3\n    while i <= limit:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "id":494,
        "response":"import heapq\n\ndef heap_queue_largest(nums, n):\n    if not nums:\n        raise ValueError(\"Empty list\")\n    return heapq.nlargest(1, nums)[0]"
    },
    {
        "id":495,
        "response":"import sys\n\ndef count_ways(n: int) -> int:\n    if n < 0:\n        return 0\n    if n % 2 == 1:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    if n >= 2:\n        dp[2] = 3\n    for i in range(4, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]"
    },
    {
        "id":496,
        "response":"import typing\n\ndef is_one_bit_diff(a: int, b: int) -> bool:\n    diff = a ^ b\n    return diff != 0 and (diff & (diff - 1)) == 0"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"import typing\n\ndef square_nums(nums: typing.List[float]) -> typing.List[float]:\n    return list(map(lambda x: x * x, nums))"
    },
    {
        "id":499,
        "response":"import typing\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    for i in range(1, n + 1):\n        if n % i == 0 and s == s[:i] * (n \/\/ i):\n            return i\n    return n"
    },
    {
        "id":500,
        "response":"import typing\n\ndef small_nnum(list1: typing.List[int], n: int) -> typing.List[int]:\n    if n <= 0:\n        return []\n    return sorted(list1)[:n]"
    }
]