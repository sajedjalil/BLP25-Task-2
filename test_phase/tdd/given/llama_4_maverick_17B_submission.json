[
    {
        "id":1,
        "response":"```python\ndef remove_Occ(s, ch):\n    try:\n        first_index = s.index(ch)\n        last_index = s.rindex(ch)\n        if first_index == last_index:\n            return s.replace(ch, '', 1)\n        else:\n            return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    except ValueError:\n        return s\n```"
    },
    {
        "id":2,
        "response":"```python\ndef sort_matrix(M):\n    M.sort(key=sum)\n    return M\n```"
    },
    {
        "id":3,
        "response":"```python\nfrom collections import Counter\nimport heapq\n\ndef count_common(words):\n    count = Counter(words)\n    return heapq.nlargest(4, count.items(), key=lambda x: x[1])\n```"
    },
    {
        "id":4,
        "response":"```python\ndef find_Volume(l, b, h):\n    return 0.5 * l * b * h\n```"
    },
    {
        "id":5,
        "response":"```python\ndef split_lowerstring(text):\n    return [char for char in text if char.islower()]\n```"
    },
    {
        "id":6,
        "response":"```python\nimport re\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":7,
        "response":"```python\ndef square_perimeter(a):\n    return 4 * a\n```"
    },
    {
        "id":8,
        "response":"```python\ndef str_to_list(s1, s2):\n    s2_set = set(s2)\n    return ''.join([char for char in s1 if char not in s2_set])\n```"
    },
    {
        "id":9,
        "response":"```python\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```"
    },
    {
        "id":10,
        "response":"```python\ndef is_woodall(x):\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        if woodall_num == x:\n            return True\n        elif woodall_num > x:\n            return False\n        n += 1\n```"
    },
    {
        "id":11,
        "response":"```python\ndef multiples_of_num(m, n):\n    return list(range(n, m*n+1, n))\n```"
    },
    {
        "id":12,
        "response":"```python\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n```"
    },
    {
        "id":13,
        "response":"```python\ndef maximum_Sum(list1):\n    return max(sum(sublist) for sublist in list1)\n```"
    },
    {
        "id":14,
        "response":"```python\ndef binary_to_decimal(binary):\n    binary = str(binary)\n    return int(binary, 2)\n```"
    },
    {
        "id":15,
        "response":"```python\nfrom collections import Counter\n\ndef find_Product(arr, n):\n    count = Counter(arr)\n    product = 1\n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n    return product\n```"
    },
    {
        "id":16,
        "response":"```python\ndef check_k_elements(test_list, K):\n    return any(len(i) == K for i in test_list)\n```"
    },
    {
        "id":17,
        "response":"```python\nimport re\ndef remove(list):\n    return [re.sub('\\d', '', s) for s in list]\n```"
    },
    {
        "id":18,
        "response":"```python\nimport math\n\ndef binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result = result * (n - i)\n        result = result \/\/ (i + 1)\n    return result\n```"
    },
    {
        "id":19,
        "response":"```python\ndef get_Odd_Occurrence(arr, arr_size):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    return None\n```"
    },
    {
        "id":20,
        "response":"```python\ndef check_Equality(s):\n    count = 0\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        count += char_count[char] * (char_count[char] + 1) \/\/ 2\n    return count\n```"
    },
    {
        "id":21,
        "response":"```python\nimport heapq\nfrom typing import List\nfrom collections import Counter\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    count = Counter(num for sublist in nums for num in sublist)\n    return heapq.nlargest(k, count.keys(), key=count.get)\n```"
    },
    {
        "id":22,
        "response":"```python\ndef max_Prime_Factors(n):\n    i = 2\n    max_prime = -1\n    while i * i <= n:\n        while n % i == 0:\n            max_prime = i\n            n \/\/= i\n        i += 1\n    if n > 1:\n        max_prime = n\n    return max_prime\n```"
    },
    {
        "id":23,
        "response":"```python\ndef decimal_To_Binary(N):\n    return int(bin(N)[2:])\n```"
    },
    {
        "id":24,
        "response":"```python\ndef find_missing(ar, N):\n    for i in range(N):\n        if ar[i] != i + 1:\n            return i + 1\n    return N + 1\n```"
    },
    {
        "id":25,
        "response":"```python\ndef find_rect_num(n):\n    return n * (n + 1)\n```"
    },
    {
        "id":26,
        "response":"```python\ndef find_Nth_Digit(p, q, N):\n    from decimal import Decimal, getcontext\n    getcontext().prec = N + 10\n    fraction = str(Decimal(p) \/ Decimal(q))[2:]\n    if len(fraction) >= N:\n        return int(fraction[N-1])\n    else:\n        return 0\n```"
    },
    {
        "id":27,
        "response":"```python\ndef sort_mixed_list(mixed_list):\n    ints = sorted([x for x in mixed_list if isinstance(x, int)])\n    strs = sorted([x for x in mixed_list if isinstance(x, str)])\n    return ints + strs\n```"
    },
    {
        "id":28,
        "response":"```python\ndef div_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return None\n    return even \/ odd\n```"
    },
    {
        "id":29,
        "response":"```python\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    max_count = max(counter.values())\n    if len(S) < 2 * max_count - 1:\n        return \"\"\n    max_char = [k for k, v in counter.items() if v == max_count]\n    if len(max_char) > 1:\n        result = []\n        for i in range(max_count):\n            for char in max_char:\n                if counter[char] > 0:\n                    result.append(char)\n                    counter[char] -= 1\n        for char in counter:\n            if char not in max_char:\n                for _ in range(counter[char]):\n                    result.insert(2 * counter[char] - 1, char)\n                    counter[char] -= 1\n        return \"\".join(result)\n    else:\n        max_char = max_char[0]\n        other_chars = sorted([char for char in counter if char != max_char], key=lambda x: counter[x], reverse=True)\n        result = [max_char] * max_count\n        index = 1\n        for char in other_chars:\n            for _ in range(counter[char]):\n                result.insert(index, char)\n                index += 2\n                if index >= len(result):\n                    index = 0 if index % 2 == 1 else 1\n        return \"\".join(result)\n    chars = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    result = []\n    while chars[0][1] > 0:\n        first = chars[0][0]\n        result.append(first)\n        chars[0] = (first, chars[0][1] - 1)\n        if len(chars) > 1 and chars[1][1] > 0:\n            second = chars[1][0]\n            result.append(second)\n            chars[1] = (second, chars[1][1] - 1)\n        chars = sorted(chars, key=lambda x: x[1], reverse=True)\n        chars = [char for char in chars if char[1] > 0]\n    return \"\".join(result)\n```"
    },
    {
        "id":30,
        "response":"```python\nfrom collections import Counter\nimport itertools\n\ndef freq_element(nums):\n    flat_list = list(itertools.chain(*nums))\n    return dict(Counter(flat_list))\n```"
    },
    {
        "id":31,
        "response":"```python\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n```"
    },
    {
        "id":32,
        "response":"```python\ndef find_Sum(arr, n):\n    count_dict = {}\n    total_sum = 0\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count > 1:\n            total_sum += num * count\n    return total_sum\n```"
    },
    {
        "id":33,
        "response":"```python\nimport re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":34,
        "response":"```python\nimport re\n\ndef text_match_string(text):\n    pattern = re.compile(r'^\\w+')\n    if pattern.match(text):\n        return pattern.match(text).group()\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":35,
        "response":"```python\nimport math\nfrom functools import reduce\n\ndef find_gcd(nums):\n    return reduce(math.gcd, nums)\n```"
    },
    {
        "id":36,
        "response":"```python\ndef test_distinct(data):\n    return len(data) == len(set(data))\n```"
    },
    {
        "id":37,
        "response":"```python\nimport math\n\ndef compute_Last_Digit(a, b):\n    if a > b:\n        return 0\n    result = math.factorial(b) \/\/ math.factorial(a)\n    return result % 10\n```"
    },
    {
        "id":38,
        "response":"```python\ndef odd_bit_set_number(n):\n    mask = 0xAAAAAAAA\n    return n | mask\n```"
    },
    {
        "id":39,
        "response":"```python\ndef specified_element(nums, N):\n    return [num[N] for num in nums if N < len(num)]\n```"
    },
    {
        "id":40,
        "response":"```python\ndef min_length_list(input_list):\n    min_len = min(len(sublist) for sublist in input_list)\n    return min_len, next(sublist for sublist in input_list if len(sublist) == min_len)\n```"
    },
    {
        "id":41,
        "response":"```python\ndef check_equilateral(x, y, z):\n    if x <= 0 or y <= 0 or z <= 0:\n        return False\n    return x == y == z\n```"
    },
    {
        "id":42,
        "response":"```python\ndef parallelogram_area(b, h):\n    return b * h\n```"
    },
    {
        "id":43,
        "response":"```python\ndef check_Equality(s):\n    if len(s) < 1:\n        return \"Not Equal\"\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n```"
    },
    {
        "id":44,
        "response":"```python\ndef counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, cnt in enumerate(count):\n        sorted_list.extend([i] * cnt)\n    return sorted_list\n```"
    },
    {
        "id":45,
        "response":"```python\ndef tn_gp(a, n, r):\n    return a * (r ** (n - 1))\n```"
    },
    {
        "id":46,
        "response":"```python\ndef rev(num):\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1\n```"
    },
    {
        "id":47,
        "response":"```python\nfrom functools import cmp_to_key\n\ndef compare(a, b):\n    ab = str(a) + str(b)\n    ba = str(b) + str(a)\n    return (int(ba) > int(ab)) - (int(ba) < int(ab))\n\ndef find_Max_Num(arr, n):\n    arr.sort(key=cmp_to_key(compare))\n    return int(''.join(map(str, arr)))\n```"
    },
    {
        "id":48,
        "response":"```python\ndef opposite_Signs(x, y):\n    return (x * y) < 0\n```"
    },
    {
        "id":49,
        "response":"```python\ndef is_octagonal(n):\n    return n * (3 * n - 2)\n```"
    },
    {
        "id":50,
        "response":"```python\ndef max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    \n    max_len = 1\n    curr_len = 1\n    \n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) == 1:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    \n    return max(max_len, curr_len)\n```"
    },
    {
        "id":51,
        "response":"```python\ndef count_Substrings(s, n):\n    count = 0\n    for i in range(n):\n        num = 0\n        for j in range(i, n):\n            num = num * 10 + int(s[j])\n            if num == j - i + 1:\n                count += 1\n    return count\n```"
    },
    {
        "id":52,
        "response":"```python\ndef smallest_num(xs):\n    return min(xs)\n```"
    },
    {
        "id":53,
        "response":"```python\ndef max_difference(test_list):\n    return max(abs(y - x) for x, y in test_list)\n```"
    },
    {
        "id":54,
        "response":"```python\ndef subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n```"
    },
    {
        "id":55,
        "response":"```python\ndef recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n```"
    },
    {
        "id":56,
        "response":"```python\ndef pos_count(lst):\n    count = sum(1 for num in lst if num > 0)\n    return count\n```"
    },
    {
        "id":57,
        "response":"```python\ndef bell_number(n):\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n```"
    },
    {
        "id":58,
        "response":"```python\ndef is_Monotonic(A):\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n```"
    },
    {
        "id":59,
        "response":"```python\ndef is_sublist(l, s):\n    n = len(s)\n    return any(s == l[i:i+n] for i in range(len(l)-n+1))\n```"
    },
    {
        "id":60,
        "response":"```python\ndef find_equal_tuple(Input, k):\n    for tup in Input:\n        if len(tup) != k:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'\n```"
    },
    {
        "id":61,
        "response":"```python\ndef comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) \/\/ 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums\n```"
    },
    {
        "id":62,
        "response":"```python\ndef dif_Square(n):\n    return n % 4 != 2\n```"
    },
    {
        "id":63,
        "response":"```python\nimport re\n\ndef multiple_split(text):\n    return re.split('\\n|\\*', text)\n```"
    },
    {
        "id":64,
        "response":"```python\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True\n```"
    },
    {
        "id":65,
        "response":"```python\ndef find_tuples(test_list, K):\n    result = [tup for tup in test_list if all(i % K == 0 for i in tup)]\n    return str(result)\n```"
    },
    {
        "id":66,
        "response":"```python\ndef count_Squares(m, n):\n    total = 0\n    for i in range(1, min(m, n) + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total\n```"
    },
    {
        "id":67,
        "response":"```python\ndef is_Diff(n):\n    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)\n    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n    return abs(odd_sum - even_sum) == 0\n```"
    },
    {
        "id":68,
        "response":"```python\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n + 1):\n        bin_num = bin(i)[2:]\n        if bin_num.count('1') % 2 != 0:\n            count += 1\n    return count\n```"
    },
    {
        "id":69,
        "response":"```python\ndef word_len(s):\n    return len(s) % 2 != 0\n```"
    },
    {
        "id":70,
        "response":"```python\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) \/ 6\n```"
    },
    {
        "id":71,
        "response":"```python\nfrom itertools import cycle\n\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, cycle(test_tup2)))\n```"
    },
    {
        "id":72,
        "response":"```python\nimport math\n\ndef volume_sphere(r):\n    return (4\/3) * math.pi * (r ** 3)\n```"
    },
    {
        "id":73,
        "response":"```python\ndef get_Char(strr):\n    sum_ascii = sum(ord(char) for char in strr)\n    result = chr(sum_ascii % 26 + ord('a'))\n    return result\n```"
    },
    {
        "id":74,
        "response":"```python\ndef sequence(n):\n    seq = [1, 1]\n    while len(seq) < n:\n        seq.append(seq[-1] + seq[seq[-1]])\n    return seq[-1]\n```"
    },
    {
        "id":75,
        "response":"```python\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)\n```"
    },
    {
        "id":76,
        "response":"```python\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n```"
    },
    {
        "id":77,
        "response":"```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n```"
    },
    {
        "id":78,
        "response":"```python\nfrom typing import Dict, List\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    freq_dict = {}\n    for num in list1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n```"
    },
    {
        "id":79,
        "response":"```python\ndef closest_num(N):\n    if N % 2 == 0:\n        return N - 2\n    else:\n        return N - 1\n```"
    },
    {
        "id":80,
        "response":"```python\ndef len_log(list1):\n    import typing\n    if not isinstance(list1, list) or not all(isinstance(i, str) for i in list1):\n        raise TypeError(\"Input must be a list of strings\")\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n```"
    },
    {
        "id":81,
        "response":"```python\ndef find_substring(str1, sub_str):\n    return any(sub_str in s for s in str1)\n```"
    },
    {
        "id":82,
        "response":"```python\ndef is_undulating(n):\n    n = str(n)\n    if len(n) < 3:\n        return False\n    increasing = int(n[0]) < int(n[1])\n    for i in range(2, len(n)):\n        if increasing and int(n[i-1]) <= int(n[i]):\n            return False\n        if not increasing and int(n[i-1]) >= int(n[i]):\n            return False\n        increasing = not increasing\n    return True\n```"
    },
    {
        "id":83,
        "response":"```python\ndef power(a, b):\n    return a ** b\n```"
    },
    {
        "id":84,
        "response":"```python\ndef index_minimum(test_list):\n    return min(test_list, key=lambda x: x[1])[0]\n```"
    },
    {
        "id":85,
        "response":"```python\ndef Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)\n```"
    },
    {
        "id":86,
        "response":"```python\ndef divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n```"
    },
    {
        "id":87,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\nimport itertools\n\ndef frequency_lists(list1: List[List[int]]) -> dict:\n    flat_list = list(itertools.chain(*list1))\n    return dict(Counter(flat_list))\n```"
    },
    {
        "id":88,
        "response":"```python\nimport math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    product = reduce(mul, numbers, 1)\n    return product \/ len(numbers)\n```"
    },
    {
        "id":89,
        "response":"```python\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n```"
    },
    {
        "id":90,
        "response":"```python\ndef next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n```"
    },
    {
        "id":91,
        "response":"```python\ndef kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]\n```"
    },
    {
        "id":92,
        "response":"```python\ndef snake_to_camel(word):\n    words = word.split('_')\n    return ''.join(w.capitalize() for w in words)\n```"
    },
    {
        "id":93,
        "response":"```python\ndef eulerian_num(n, m):\n    if m >= n or m < 0:\n        return 0\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            dp[i][j] = (i-j)*dp[i-1][j-1] + (j+1)*dp[i-1][j]\n    return dp[n][m]\n```"
    },
    {
        "id":94,
        "response":"```python\ndef sort_sublists(input_list):\n    return list(map(lambda x: sorted(x), input_list))\n```"
    },
    {
        "id":95,
        "response":"```python\ndef count(lst):\n    return sum(1 for elem in lst if elem)\n```"
    },
    {
        "id":96,
        "response":"```python\ndef add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)\n```"
    },
    {
        "id":97,
        "response":"```python\ndef count_Hexadecimal(L, R):\n    count = 0\n    for num in range(L, R + 1):\n        hex_num = hex(num)[2:]\n        if all(c.isdigit() or c.lower() in 'abcdef' for c in hex_num):\n            count += 1\n    return count\n```"
    },
    {
        "id":98,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return list(heapq.merge(num1, num2, num3))\n```"
    },
    {
        "id":99,
        "response":"```python\ndef odd_Equivalent(s, n):\n    count = sum(1 for c in s if c == '1')\n    return sum(count % 2 for _ in range(n))\n```"
    },
    {
        "id":100,
        "response":"```python\ndef extract_missing(test_list, strt_val, stop_val):\n    res = [(strt_val, test_list[0][0])]\n    for i in range(len(test_list) - 1):\n        res.append((test_list[i][1], test_list[i + 1][0]))\n    res.append((test_list[-1][1], stop_val))\n    res = [ele for ele in res if ele[0] != ele[1]]\n    return res\n```"
    },
    {
        "id":101,
        "response":"```python\nfrom typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return sorted(list(common_elements), reverse=True)\n```"
    },
    {
        "id":102,
        "response":"```python\nimport math\n\ndef perimeter(diameter, height):\n    radius = diameter \/ 2\n    circumference = 2 * math.pi * radius\n    return circumference + 2 * height\n```"
    },
    {
        "id":103,
        "response":"```python\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```"
    },
    {
        "id":104,
        "response":"```python\nfrom collections import OrderedDict\n\ndef assign_freq(test_list):\n    freq_dict = OrderedDict()\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    result = []\n    for key, value in freq_dict.items():\n        result.append(key + (value,))\n    return str(result)\n```"
    },
    {
        "id":105,
        "response":"```python\ndef empty_dit(list1):\n    return all(not d for d in list1)\n```"
    },
    {
        "id":106,
        "response":"```python\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))\n```"
    },
    {
        "id":107,
        "response":"```python\ndef list_to_float(test_list):\n    result = []\n    for tup in test_list:\n        new_tup = tuple(float(i) for i in tup)\n        result.append(new_tup)\n    return str(result)\n```"
    },
    {
        "id":108,
        "response":"```python\ndef string_to_list(string):\n    return string.split()\n```"
    },
    {
        "id":109,
        "response":"```python\ndef search(arr, n):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if (mid == 0 or arr[mid - 1] != arr[mid]) and (mid == n - 1 or arr[mid] != arr[mid + 1]):\n            return arr[mid]\n        if mid > 0 and arr[mid - 1] == arr[mid]:\n            if mid % 2 == 0:\n                high = mid - 2\n            else:\n                low = mid + 1\n        else:\n            if mid % 2 == 0:\n                low = mid + 2\n            else:\n                high = mid - 1\n    return -1\n```"
    },
    {
        "id":110,
        "response":"```python\ndef max_product_tuple(list1):\n    return max(a * b for a, b in list1)\n```"
    },
    {
        "id":111,
        "response":"```python\ndef check_triplet(A, n, sum, count):\n    A.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count > 0\n```"
    },
    {
        "id":112,
        "response":"```python\ndef smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        factors = 0\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                if num \/\/ i == i:\n                    factors += 1\n                else:\n                    factors += 2\n        if factors % 2 != 0:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n```"
    },
    {
        "id":113,
        "response":"```python\ndef sum_of_divisors(n):\n    return sum(i for i in range(1, n) if n % i == 0)\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_num = sum_of_divisors(num)\n        if sum_num <= limit and sum_num != num and sum_of_divisors(sum_num) == num:\n            amicable_sum += num\n    return amicable_sum\n```"
    },
    {
        "id":114,
        "response":"```python\nimport cmath\nimport math\n\ndef angle_complex(a, b):\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)\n```"
    },
    {
        "id":115,
        "response":"```python\ndef find_length(string, n):\n    max_diff = 0\n    count = 0\n    max_count = 0\n    min_count = 0\n    count_map = {0: -1}\n    for i in range(n):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        if count not in count_map:\n            count_map[count] = i\n        if count in count_map:\n            diff = i - count_map[count]\n            max_diff = max(max_diff, diff)\n        max_count = max(max_count, count)\n        min_count = min(min_count, count)\n    return max(max_diff, max_count, -min_count)\n```"
    },
    {
        "id":116,
        "response":"```python\nimport math\n\ndef sum(a, b):\n    gcd = math.gcd(a, b)\n    divisors_sum = 0\n    for i in range(1, int(math.sqrt(gcd)) + 1):\n        if gcd % i == 0:\n            if gcd \/\/ i == i:\n                divisors_sum += i\n            else:\n                divisors_sum += i + gcd \/\/ i\n    return divisors_sum\n```"
    },
    {
        "id":117,
        "response":"```python\ndef multiply_int(x, y):\n    result = 0\n    is_negative = (x < 0) ^ (y < 0)\n    x, y = abs(x), abs(y)\n    for _ in range(y):\n        result += x\n    return -result if is_negative else result\n```"
    },
    {
        "id":118,
        "response":"```python\ndef long_words(n, str):\n    word_len = []\n    txt = str.split()\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\n```"
    },
    {
        "id":119,
        "response":"```python\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    expected_sum = sum(my_matrix[0])\n    for i in range(1, n):\n        if sum(my_matrix[i]) != expected_sum:\n            return False\n    for j in range(n):\n        column_sum = sum(my_matrix[i][j] for i in range(n))\n        if column_sum != expected_sum:\n            return False\n    diagonal1_sum = sum(my_matrix[i][i] for i in range(n))\n    if diagonal1_sum != expected_sum:\n        return False\n    diagonal2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diagonal2_sum != expected_sum:\n        return False\n    return True\n```"
    },
    {
        "id":120,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> Tuple[int, int]:\n    count = Counter(nums)\n    max_count = max(count.values())\n    max_num = max(num for num, freq in count.items() if freq == max_count)\n    return max_num, max_count\n```"
    },
    {
        "id":121,
        "response":"```python\ndef reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    return ''.join(str_list)\n```"
    },
    {
        "id":122,
        "response":"```python\ndef tup_string(tup1):\n    return ''.join(tup1)\n```"
    },
    {
        "id":123,
        "response":"```python\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n```"
    },
    {
        "id":124,
        "response":"```python\ndef check_last(arr, n, p):\n    from collections import deque\n    d = deque(arr)\n    for _ in range(p):\n        d.pop()\n        d.appendleft(d.pop())\n    if d[-1] % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n```"
    },
    {
        "id":125,
        "response":"```python\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n```"
    },
    {
        "id":126,
        "response":"```python\ndef cal_electbill(units):\n    if units <= 50:\n        return units * 3.20\n    elif units <= 150:\n        return 50 * 3.20 + (units - 50) * 3.50\n    elif units <= 250:\n        return 50 * 3.20 + 100 * 3.50 + (units - 150) * 4.60\n    else:\n        return 50 * 3.20 + 100 * 3.50 + 100 * 4.60 + (units - 250) * 5.70 + (units * 0.05)\n```"
    },
    {
        "id":127,
        "response":"```python\ndef zero_count(nums):\n    count = sum(1 for num in nums if num == 0)\n    return count \/ len(nums)\n```"
    },
    {
        "id":128,
        "response":"```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count <= 2\n```"
    },
    {
        "id":129,
        "response":"```python\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n```"
    },
    {
        "id":130,
        "response":"```python\nfrom collections import Counter\nimport itertools\n\ndef extract_singly(test_list):\n    freq = Counter(itertools.chain(*test_list))\n    return [ele for ele, count in freq.items() if count == 1]\n```"
    },
    {
        "id":131,
        "response":"```python\ndef pancake_sort(nums):\n    def flip(nums, k):\n        return nums[:k][::-1] + nums[k:]\n\n    n = len(nums)\n    for size in range(n, 0, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums\n```"
    },
    {
        "id":132,
        "response":"```python\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i, j, k in zip(list1, list2, list3):\n        if i == j == k:\n            count += 1\n    return count\n```"
    },
    {
        "id":133,
        "response":"```python\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n```"
    },
    {
        "id":134,
        "response":"```python\ndef sum_Pairs(arr, n):\n    total_sum = 0\n    arr.sort()\n    for i in range(n):\n        total_sum += arr[i] * (i - (n - i - 1))\n    return total_sum\n```"
    },
    {
        "id":135,
        "response":"```python\ndef max_Abs_Diff(arr, n):\n    return max(arr) - min(arr)\n```"
    },
    {
        "id":136,
        "response":"```python\ndef ascii_value_string(str1):\n    return sum(ord(c) for c in str1)\n```"
    },
    {
        "id":137,
        "response":"```python\ndef max_path_sum(tri, m, n):\n    for i in range(m-1, -1, -1):\n        for j in range(n):\n            if i == m-1:\n                continue\n            else:\n                tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n```"
    },
    {
        "id":138,
        "response":"```python\ndef sum_digits_single(x):\n    s = str(x)\n    a = int(s[0])\n    b = int(s[1:])\n    return a + b\n```"
    },
    {
        "id":139,
        "response":"```python\ndef longest_subseq_with_diff_one(arr, n):\n    dp = {}\n    for i in range(n):\n        if arr[i] - 1 in dp:\n            dp[arr[i]] = dp[arr[i] - 1] + 1\n        elif arr[i] + 1 in dp:\n            dp[arr[i]] = dp[arr[i] + 1] + 1\n        else:\n            dp[arr[i]] = 1\n    return max(dp.values())\n```"
    },
    {
        "id":140,
        "response":"```python\ndef does_Contain_B(a, b, c):\n    if a == b:\n        return True\n    if (b - a) % c == 0 and (b - a) \/\/ c >= 0:\n        return True\n    return False\n```"
    },
    {
        "id":141,
        "response":"```python\nimport math\n\ndef gcd(p, q):\n    return math.gcd(p, q) == 1\n```"
    },
    {
        "id":142,
        "response":"```python\ndef merge(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return merge_sort(merge(left_half), merge(right_half))\n\ndef merge_sort(a, b):\n    merged = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(a) and right_index < len(b):\n        if a[left_index] <= b[right_index]:\n            merged.append(a[left_index])\n            left_index += 1\n        else:\n            merged.append(b[right_index])\n            right_index += 1\n    merged += a[left_index:]\n    merged += b[right_index:]\n    return merged\n```"
    },
    {
        "id":143,
        "response":"```python\ndef parabola_vertex(a, b, c):\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)\n```"
    },
    {
        "id":144,
        "response":"```python\ndef specified_element(nums, N):\n    return [num[N] for num in nums if N < len(num)]\n```"
    },
    {
        "id":145,
        "response":"```python\ndef even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA\n    return n ^ mask\n```"
    },
    {
        "id":146,
        "response":"```python\ndef tuple_int_str(tuple_str):\n    return tuple(tuple(int(i) for i in t) for t in tuple_str)\n```"
    },
    {
        "id":147,
        "response":"```python\nfrom typing import List, Union\n\ndef encode_list(list1: List[Union[int, float]]) -> List[List[Union[int, float]]]:\n    result = []\n    count = 1\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            count += 1\n        else:\n            result.append([count, list1[i - 1]])\n            count = 1\n    if list1:\n        result.append([count, list1[-1]])\n    return result\n```"
    },
    {
        "id":148,
        "response":"```python\ndef min_Ops(arr, n, k):\n    from collections import Counter\n    count = Counter(arr)\n    max_count = max(count.values())\n    if max_count >= k:\n        return 0\n    else:\n        return n - max_count\n```"
    },
    {
        "id":149,
        "response":"```python\ndef month_season(month, days):\n    month_dict = {\n        'January': 1, 'February': 2, 'March': 3, 'April': 4,\n        'May': 5, 'June': 6, 'July': 7, 'August': 8,\n        'September': 9, 'October': 10, 'November': 11, 'December': 12\n    }\n    month_num = month_dict.get(month)\n    if month_num in [12, 1, 2]:\n        season = 'winter'\n    elif month_num in [3, 4, 5]:\n        season = 'spring'\n    elif month_num in [6, 7, 8]:\n        season = 'summer'\n    else:\n        season = 'autumn'\n    \n    if (month_num == 3 and days >= 20) or (month_num == 9 and days >= 22) or (month_num == 6 and days >= 21) or (month_num == 12 and days >= 21):\n        if season == 'winter':\n            season = 'spring'\n        elif season == 'spring':\n            season = 'summer'\n        elif season == 'summer':\n            season = 'autumn'\n        else:\n            season = 'winter'\n    return season\n```"
    },
    {
        "id":150,
        "response":"```python\ndef solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b \/\/ a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n \/\/ gcd\n    y *= n \/\/ gcd\n    return 'x = ', x, ', y = ', y\n```"
    },
    {
        "id":151,
        "response":"```python\ndef remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n```"
    },
    {
        "id":152,
        "response":"```python\ndef sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n```"
    },
    {
        "id":153,
        "response":"```python\nimport math\n\ndef area_polygon(s, l):\n    return (s * l**2) \/ (4 * math.tan(math.pi\/s))\n```"
    },
    {
        "id":154,
        "response":"```python\ndef divSum(n, m):\n    def sum_of_divisors(num):\n        sum_div = 0\n        for i in range(1, num):\n            if num % i == 0:\n                sum_div += i\n        return sum_div\n\n    return sum_of_divisors(n) == sum_of_divisors(m)\n```"
    },
    {
        "id":155,
        "response":"```python\ndef count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if (ord(str1[i].lower()) - ord('a') + 1) == i + 1:\n            count += 1\n    return count\n```"
    },
    {
        "id":156,
        "response":"```python\ndef find_even_Pair(A, N):\n    count = 0\n    even_count = 0\n    odd_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    count = even_count * (even_count - 1) \/\/ 2 + odd_count * (odd_count - 1) \/\/ 2\n    return count\n```"
    },
    {
        "id":157,
        "response":"```python\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n```"
    },
    {
        "id":158,
        "response":"```python\ndef frequency(a, x):\n    return a.count(x)\n```"
    },
    {
        "id":159,
        "response":"```python\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n```"
    },
    {
        "id":160,
        "response":"```python\ndef sum_range_list(list1, m, n):\n    if not list1 or m > n or m < 0 or n >= len(list1):\n        return 0\n    return sum(list1[m:n+1])\n```"
    },
    {
        "id":161,
        "response":"```python\ndef perimeter_pentagon(a):\n    return 5 * a\n```"
    },
    {
        "id":162,
        "response":"```python\ndef count_occurance(s):\n    count = 0\n    start = 0\n    while start < len(s):\n        pos = s.find('std', start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n```"
    },
    {
        "id":163,
        "response":"```python\nimport re\ndef remove_splchar(text):\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    return text\n```"
    },
    {
        "id":164,
        "response":"```python\nfrom collections import defaultdict\n\ndef group_keyvalue(l):\n    result = defaultdict(list)\n    for key, value in l:\n        result[key].append(value)\n    return dict(result)\n```"
    },
    {
        "id":165,
        "response":"```python\ndef is_valid_parenthese(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n```"
    },
    {
        "id":166,
        "response":"```python\ndef perimeter_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        raise ValueError(\"The input sides cannot form a triangle\")\n```"
    },
    {
        "id":167,
        "response":"```python\ndef answer(L, R):\n    import math\n    for i in range(L, R):\n        for j in range(i + 1, R + 1):\n            if math.lcm(i, j) <= R:\n                return (i, j)\n    return None\n```"
    },
    {
        "id":168,
        "response":"```python\ndef string_literals(patterns, text):\n    for pattern in patterns:\n        if pattern in text:\n            return 'Matched!'\n    return patterns\n```"
    },
    {
        "id":169,
        "response":"```python\ndef is_num_keith(x):\n    if x < 10:\n        return False\n    digits = [int(d) for d in str(x)]\n    seq = digits[:]\n    while seq[-1] < x:\n        next_term = sum(seq[-len(digits):])\n        seq.append(next_term)\n    return seq[-1] == x\n```"
    },
    {
        "id":170,
        "response":"```python\nimport math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371\n    dlat = math.radians(elat - slat)\n    dlon = math.radians(elon - slon)\n    a = math.sin(dlat \/ 2) * math.sin(dlat \/ 2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon \/ 2) * math.sin(dlon \/ 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = R * c * 1000\n    return d\n```"
    },
    {
        "id":171,
        "response":"```python\ndef common_prefix_util(strs, n):\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return strs[0]\n    strs.sort()\n    end = min(len(strs[0]), len(strs[n - 1]))\n    i = 0\n    while i < end and strs[0][i] == strs[n - 1][i]:\n        i += 1\n    return strs[0][0:i]\n```"
    },
    {
        "id":172,
        "response":"```python\nimport re\nfrom typing import Tuple, List\n\ndef find_character(string: str) -> Tuple[List[str], List[str], List[str], List[str]]:\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\n    numeric = re.findall(r'\\d', string)\n    return uppercase, lowercase, special_char, numeric\n```"
    },
    {
        "id":173,
        "response":"```python\ndef count_pairs(arr, n, k):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    count = 0\n    for num in freq:\n        if num + k in freq:\n            count += 1\n    return count\n```"
    },
    {
        "id":174,
        "response":"```python\ndef greater_specificnum(lst, num):\n    return all(i > num for i in lst)\n```"
    },
    {
        "id":175,
        "response":"```python\ndef parabola_focus(a, b, c):\n    h = -b \/ (2 * a)\n    k = c - (b**2) \/ (4 * a)\n    p = 1 \/ (4 * a)\n    if a > 0:\n        return (h, k + p)\n    else:\n        return (h, k - p)\n```"
    },
    {
        "id":176,
        "response":"```python\nimport re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(re.escape(pattern), text):\n            return 'Matched!'\n    return text\n```"
    },
    {
        "id":177,
        "response":"```python\ndef longest_common_subsequence(X, Y, m, n):\n    L = [[0 for x in range(n+1)] for x in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0 :\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    index = L[m][n]\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return \"\".join(lcs)\n```"
    },
    {
        "id":178,
        "response":"```python\nimport math\n\ndef prod_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        if math.sqrt(n - i * i) % 1 == 0:\n            return True\n    return False\n```"
    },
    {
        "id":179,
        "response":"```python\ndef first_Missing_Positive(arr, n):\n    arr = list(set(arr))\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if not arr or arr[0] > 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1\n```"
    },
    {
        "id":180,
        "response":"```python\ndef count_Intgral_Points(x1, y1, x2, y2):\n    side_length = abs(x2 - x1)\n    return (side_length + 1) ** 2\n```"
    },
    {
        "id":181,
        "response":"```python\ndef check_monthnumber(monthname3):\n    month_days = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n    return month_days.get(monthname3, None) == 30\n```"
    },
    {
        "id":182,
        "response":"```python\nimport re\n\ndef check_String(s):\n    return bool(re.search(r'\\d', s)) and bool(re.search(r'[a-zA-Z]', s))\n```"
    },
    {
        "id":183,
        "response":"```python\nfrom collections import OrderedDict\n\ndef remove_tuple(test_tup):\n    return tuple(OrderedDict.fromkeys(test_tup))\n```"
    },
    {
        "id":184,
        "response":"```python\ndef octal_To_Decimal(n):\n    return int(str(n), 8)\n```"
    },
    {
        "id":185,
        "response":"```python\ndef first(arr, x, n):\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n```"
    },
    {
        "id":186,
        "response":"```python\ndef remove_tuples(test_list, K):\n    return [tup for tup in test_list if len(tup) != K]\n```"
    },
    {
        "id":187,
        "response":"```python\ndef find_exponentio(test_tup1, test_tup2):\n    return tuple(pow(a, b) for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":188,
        "response":"```python\nimport math\n\ndef largest_triangle(r, _):\n    return r * r * math.sqrt(3)\n```"
    },
    {
        "id":189,
        "response":"```python\ndef highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i \/\/ 2\n```"
    },
    {
        "id":190,
        "response":"```python\ndef position_max(list1):\n    max_val = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_val]\n```"
    },
    {
        "id":191,
        "response":"```python\ndef chkList(lst):\n    return len(set(lst)) == 1\n```"
    },
    {
        "id":192,
        "response":"```python\ndef remove_even(str1):\n    return str1[::2]\n```"
    },
    {
        "id":193,
        "response":"```python\ndef hamming_Distance(n1, n2):\n    return bin(n1 ^ n2).count('1')\n```"
    },
    {
        "id":194,
        "response":"```python\ndef count(s, c):\n    return s.count(c)\n```"
    },
    {
        "id":195,
        "response":"```python\ndef inversion_elements(test_tup):\n    return tuple(-x for x in test_tup[1:])\n```"
    },
    {
        "id":196,
        "response":"```python\ndef concatenate_elements(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n```"
    },
    {
        "id":197,
        "response":"```python\ndef find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]\n```"
    },
    {
        "id":198,
        "response":"```python\nimport re\n\ndef is_decimal(num):\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n```"
    },
    {
        "id":199,
        "response":"```python\nimport heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        return []\n    heapq.heapreplace(heap, a)\n    return heap\n```"
    },
    {
        "id":200,
        "response":"```python\nimport re\n\ndef is_allowed_specific_char(string):\n    charRe = re.compile(r'[^a-zA-Z0-9]')\n    string = charRe.search(string)\n    return not bool(string)\n```"
    },
    {
        "id":201,
        "response":"```python\ndef count_Num(n):\n    count = 0\n    for i in range(n+1):\n        if (i & 1) and ((i >> (n-1)) & 1):\n            count += 1\n    return count\n```"
    },
    {
        "id":202,
        "response":"```python\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))\n```"
    },
    {
        "id":203,
        "response":"```python\ndef concatenate_strings(test_tup1, test_tup2):\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":204,
        "response":"```python\nimport math\n\ndef degree_radian(radian):\n    degree = radian * (180 \/ math.pi)\n    return degree\n```"
    },
    {
        "id":205,
        "response":"```python\ndef decode_list(alist):\n    result = []\n    for item in alist:\n        if isinstance(item, list):\n            result.extend([item[1]] * item[0])\n        else:\n            result.append(item)\n    return result\n```"
    },
    {
        "id":206,
        "response":"```python\ndef check_subset_list(list1, list2):\n    flat_list2 = set([item for sublist in list2 for item in sublist])\n    return all(item in flat_list2 for item in list1)\n```"
    },
    {
        "id":207,
        "response":"```python\ndef first_Repeated_Char(str):\n    char_count = {}\n    for char in str.lower():\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str.lower():\n        if char_count[char] > 1:\n            return char\n    return None\n```"
    },
    {
        "id":208,
        "response":"```python\ndef min_Operations(A, B):\n    import math\n    if A == B:\n        return 0\n    if A > B:\n        A, B = B, A\n    return math.ceil(math.log2(B \/ A))\n```"
    },
    {
        "id":209,
        "response":"```python\ndef extract_min_max(test_tup, K):\n    sorted_tup = tuple(sorted(test_tup))\n    min_k = sorted_tup[:K]\n    max_k = sorted_tup[-K:]\n    return min_k + max_k[::-1]\n```"
    },
    {
        "id":210,
        "response":"```python\nimport re\n\ndef replace_max_specialchar(text, n):\n    count = 0\n    result = ''\n    for char in text:\n        if char in [' ', ',', '.']:\n            if count < n:\n                result += ':'\n                count += 1\n            else:\n                result += char\n        else:\n            result += char\n            count = 0\n    return result\n```"
    },
    {
        "id":211,
        "response":"```python\ndef first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n```"
    },
    {
        "id":212,
        "response":"```python\ndef check_type(test_tuple):\n    return len(set(type(i) for i in test_tuple)) == 1\n```"
    },
    {
        "id":213,
        "response":"```python\ndef is_majority(arr, n, x):\n    from bisect import bisect_left, bisect_right\n    left_index = bisect_left(arr, x)\n    right_index = bisect_right(arr, x)\n    return right_index - left_index > n \/ 2\n```"
    },
    {
        "id":214,
        "response":"```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```"
    },
    {
        "id":215,
        "response":"```python\ndef find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]\n```"
    },
    {
        "id":216,
        "response":"```python\ndef odd_values_string(str):\n    return str[::2]\n```"
    },
    {
        "id":217,
        "response":"```python\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n```"
    },
    {
        "id":218,
        "response":"```python\ndef all_Bits_Set_In_The_Given_Range(n, left, right):\n    num = ((1 << (right - left + 1)) - 1) << left\n    return (n & num) == num\n```"
    },
    {
        "id":219,
        "response":"```python\ndef re_arrange_array(arr, n):\n    arr.sort(key=lambda x: (x >= 0, x))\n    return arr\n```"
    },
    {
        "id":220,
        "response":"```python\ndef replace_blank(str1, char):\n    str1 = str1.replace(' ', char)\n    return str1\n```"
    },
    {
        "id":221,
        "response":"```python\ndef max_sum(tri, n):\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n```"
    },
    {
        "id":222,
        "response":"```python\ndef larg_nnum(list1, n):\n    list1.sort(reverse=True)\n    return list1[:n]\n```"
    },
    {
        "id":223,
        "response":"```python\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h\n```"
    },
    {
        "id":224,
        "response":"```python\ndef volume_cube(l):\n    return l ** 3\n```"
    },
    {
        "id":225,
        "response":"```python\ndef even_bit_set_number(n):\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    return n | mask\n```"
    },
    {
        "id":226,
        "response":"```python\ndef No_of_Triangle(N, K):\n    return (N * (N + 1) * (2 * N + 1) \/\/ 6) + N - (N \/\/ K) * ((N \/\/ K) + 1) * ((2 * (N \/\/ K)) + 1) \/\/ 6\n```"
    },
    {
        "id":227,
        "response":"```python\nfrom collections import defaultdict\n\ndef check_occurences(test_list):\n    freq_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        freq_dict[sorted_tup] += 1\n    return dict(freq_dict)\n```"
    },
    {
        "id":228,
        "response":"```python\ndef number_of_substrings(s):\n    n = len(s)\n    return n*(n+1)\/\/2\n```"
    },
    {
        "id":229,
        "response":"```python\ndef get_total_number_of_sequences(m, n):\n    total = 0\n    current = 1\n    while current <= m:\n        total += (m \/\/ (current * 2)) + 1 if current * 2 <= m else 1\n        current *= 2\n    return total - (n - 1)\n```"
    },
    {
        "id":230,
        "response":"```python\ndef replace_list(list1, list2):\n    if len(list1) == 0:\n        return list1\n    list1[-1:] = list2\n    return list1\n```"
    },
    {
        "id":231,
        "response":"```python\ndef array_3d(m, n, o):\n    return [[[ '*' for _ in range(m)] for _ in range(n)] for _ in range(o)]\n```"
    },
    {
        "id":232,
        "response":"```python\ndef count_charac(str1):\n    return len(str1.replace(\" \", \"\"))\n```"
    },
    {
        "id":233,
        "response":"```python\nfrom collections import defaultdict\n\ndef sort_on_occurence(lst):\n    count_dict = defaultdict(int)\n    value_dict = defaultdict(list)\n    for tup in lst:\n        count_dict[tup[0]] += 1\n        value_dict[tup[0]].append(tup[1])\n    sorted_lst = sorted(lst, key=lambda x: count_dict[x[0]], reverse=True)\n    result = []\n    seen = set()\n    for tup in sorted_lst:\n        if tup[0] not in seen:\n            seen.add(tup[0])\n            result.append((tup[0],) + tuple(value_dict[tup[0]]) + (count_dict[tup[0]],))\n    return result\n```"
    },
    {
        "id":234,
        "response":"```python\nimport math\n\ndef next_Perfect_Square(N):\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        root += 1\n    else:\n        root = math.ceil(root)\n    return int(root) ** 2\n```"
    },
    {
        "id":235,
        "response":"```python\ndef max_sum(arr, n):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)\n```"
    },
    {
        "id":236,
        "response":"```python\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number\")\n    if number == 0 or number == 1:\n        return number\n    x = number\n    y = (x + 1) \/ 2\n    while(y < x):\n        x = y\n        y = (x + number \/ x) \/ 2\n    return x\n```"
    },
    {
        "id":237,
        "response":"```python\ndef lps(s):\n    import numpy as np\n    n = len(s)\n    dp = np.zeros((n, n), dtype=int)\n    for i in range(n):\n        dp[i, i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and length == 2:\n                dp[i, j] = 2\n            elif s[i] == s[j]:\n                dp[i, j] = dp[i + 1, j - 1] + 2\n            else:\n                dp[i, j] = max(dp[i, j - 1], dp[i + 1, j])\n    return dp[0, n - 1]\n```"
    },
    {
        "id":238,
        "response":"```python\ndef harmonic_sum(n):\n    return sum(1.0\/i for i in range(1, n))\n```"
    },
    {
        "id":239,
        "response":"```python\ndef intersection_array(array_nums1, array_nums2):\n    return list(filter(lambda x: x in array_nums2, array_nums1))\n```"
    },
    {
        "id":240,
        "response":"```python\ndef count_X(tup, x):\n    return tup.count(x)\n```"
    },
    {
        "id":241,
        "response":"```python\ndef insert_element(lst, element):\n    result = []\n    for i in lst:\n        result.extend([element, i])\n    return result\n```"
    },
    {
        "id":242,
        "response":"```python\nimport cmath\ndef convert(numbers):\n    complex_num = complex(numbers)\n    r, phi = cmath.polar(complex_num)\n    return (r, phi)\n```"
    },
    {
        "id":243,
        "response":"```python\ndef count_integer(list1):\n    count = sum(isinstance(x, int) and not isinstance(x, bool) for x in list1)\n    return count\n```"
    },
    {
        "id":244,
        "response":"```python\nimport re\ndef words_ae(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if word.lower().startswith(('a', 'e'))]\n```"
    },
    {
        "id":245,
        "response":"```python\nimport itertools\n\ndef combinations_colors(colors, n):\n    return list(itertools.combinations_with_replacement(colors, n))\n```"
    },
    {
        "id":246,
        "response":"```python\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for currentPrime in range(2, int(n ** 0.5) + 1):\n        if sieve[currentPrime]:\n            for multiple in range(currentPrime * currentPrime, n, currentPrime):\n                sieve[multiple] = False\n    return sum(1 for isPrime in sieve if isPrime)\n```"
    },
    {
        "id":247,
        "response":"```python\ndef swap_numbers(a, b):\n    a, b = b, a\n    return a, b\n```"
    },
    {
        "id":248,
        "response":"```python\ndef count_odd(array_nums):\n    count = len(list(filter(lambda x: x % 2 != 0, array_nums)))\n    return count\n```"
    },
    {
        "id":249,
        "response":"```python\ndef maximize_elements(test_tup1, test_tup2):\n    return tuple(tuple(max(x, y) for x, y in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":250,
        "response":"```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 1\n    while True:\n        newman_num = (2**num) + num\n        if is_prime(newman_num):\n            count += 1\n            if count == n:\n                return newman_num\n        num += 1\n```"
    },
    {
        "id":251,
        "response":"```python\ndef division_elements(test_tup1, test_tup2):\n    return tuple(a \/ b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":252,
        "response":"```python\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\n```"
    },
    {
        "id":253,
        "response":"```python\ndef merge_dict(d1, d2):\n    d2.update(d1)\n    return d2\n```"
    },
    {
        "id":254,
        "response":"```python\ndef dog_age(h_age):\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n```"
    },
    {
        "id":255,
        "response":"```python\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n```"
    },
    {
        "id":256,
        "response":"```python\ndef lateralsurface_cube(l):\n    return 4 * (l ** 2)\n```"
    },
    {
        "id":257,
        "response":"```python\ndef square_Sum(n):\n    return sum([i**2 for i in range(1, 2*n, 2)])\n```"
    },
    {
        "id":258,
        "response":"```python\ndef find_star_num(n):\n    return 6 * n * (n - 1) + 1\n```"
    },
    {
        "id":259,
        "response":"```python\ndef ascii_value(k):\n    return ord(k)\n```"
    },
    {
        "id":260,
        "response":"```python\ndef sum_even_and_even_index(arr, n):\n    return sum(num for idx, num in enumerate(arr[:n]) if idx % 2 == 0 and num % 2 == 0)\n```"
    },
    {
        "id":261,
        "response":"```python\ndef even_Power_Sum(n):\n    return sum((2*i)**5 for i in range(1, n+1))\n```"
    },
    {
        "id":262,
        "response":"```python\ndef rear_extract(test_list):\n    return [sub[-1] for sub in test_list]\n```"
    },
    {
        "id":263,
        "response":"```python\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":264,
        "response":"```python\ndef even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)\n```"
    },
    {
        "id":265,
        "response":"```python\ndef get_Position(a, n, m):\n    from collections import deque\n    q = deque(a)\n    for _ in range(m):\n        q.popleft()\n    return q[0] if q else -1\n```"
    },
    {
        "id":266,
        "response":"```python\nimport math\n\ndef volume_cylinder(r, h):\n    return math.pi * (r ** 2) * h\n```"
    },
    {
        "id":267,
        "response":"```python\ndef dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}\n```"
    },
    {
        "id":268,
        "response":"```python\ndef count_first_elements(test_tup):\n    count = 0\n    for ele in test_tup:\n        if isinstance(ele, tuple):\n            break\n        count += 1\n    return count\n```"
    },
    {
        "id":269,
        "response":"```python\ndef is_num_decagonal(n):\n    return (4 * n * n - 3 * n)\n```"
    },
    {
        "id":270,
        "response":"```python\ndef sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n```"
    },
    {
        "id":271,
        "response":"```python\ndef all_unique(test_list):\n    return len(test_list) == len(set(test_list))\n```"
    },
    {
        "id":272,
        "response":"```python\ndef sub_list(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))\n```"
    },
    {
        "id":273,
        "response":"```python\ndef validate(n):\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for digit in str(n):\n        if freq[int(digit)] > int(digit):\n            return False\n    return True\n```"
    },
    {
        "id":274,
        "response":"```python\ndef check_element(lst, element):\n    return all(i == element for i in lst)\n```"
    },
    {
        "id":275,
        "response":"```python\nimport re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":276,
        "response":"```python\ndef max_sub_array_sum_repeated(a, n, k):\n    def max_sub_array_sum(arr):\n        max_so_far = float('-inf')\n        max_ending_here = 0\n        for num in arr:\n            max_ending_here += num\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n\n    total_sum = sum(a)\n    max_sum = max_sub_array_sum(a)\n    if k == 1:\n        return max_sum\n    max_sum_2n = max_sub_array_sum(a + a)\n    if total_sum > 0:\n        return max_sum + (k - 1) * max(max_sum_2n, total_sum)\n    else:\n        return max(max_sum, max_sum_2n)\n```"
    },
    {
        "id":277,
        "response":"```python\ndef square_Sum(n):\n    total_sum = sum([i ** 2 for i in range(2, n * 2 + 1, 2)])\n    return total_sum\n```"
    },
    {
        "id":278,
        "response":"```python\ndef modular_inverse(arr, N, P):\n    count = 0\n    for num in arr:\n        if pow(num, P-2, P) == num:\n            count += 1\n    return count\n```"
    },
    {
        "id":279,
        "response":"```python\ndef odd_Days(N):\n    return (N + (N \/\/ 4) - (N \/\/ 100) + (N \/\/ 400)) % 7\n```"
    },
    {
        "id":280,
        "response":"```python\ndef max_length(list1):\n    max_len = max(len(sublist) for sublist in list1)\n    return max_len, next(sublist for sublist in list1 if len(sublist) == max_len)\n```"
    },
    {
        "id":281,
        "response":"```python\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same = k\n    diff = k * (k - 1)\n    total = same + diff\n    \n    for _ in range(2, n):\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    \n    return total\n```"
    },
    {
        "id":282,
        "response":"```python\ndef find(n, m):\n    if m == 0:\n        raise ZeroDivisionError\n    return n \/\/ m\n```"
    },
    {
        "id":283,
        "response":"```python\nimport math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)\n```"
    },
    {
        "id":284,
        "response":"```python\ndef max_val(listval):\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if numeric_values:\n        return max(numeric_values)\n    else:\n        return None\n```"
    },
    {
        "id":285,
        "response":"```python\ndef sum_div(number):\n    return sum(i for i in range(1, number) if number % i == 0)\n```"
    },
    {
        "id":286,
        "response":"```python\ndef get_Inv_Count(arr, n):\n    def merge_sort(arr):\n        temp_arr = [0]*len(arr)\n        return _merge_sort(arr, temp_arr, 0, len(arr)-1)\n\n    def _merge_sort(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right)\/\/2\n            inv_count += _merge_sort(arr, temp_arr, left, mid)\n            inv_count += _merge_sort(arr, temp_arr, mid + 1, right)\n            inv_count += merge(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    def merge(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid-i + 1)\n                k += 1\n                j += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            k += 1\n            i += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            k += 1\n            j += 1\n        for loop_var in range(left, right + 1):\n            arr[loop_var] = temp_arr[loop_var]\n        return inv_count\n\n    return merge_sort(arr)\n```"
    },
    {
        "id":287,
        "response":"```python\nfrom typing import List, Any\n\ndef flatten_list(nested_list: List[Any]) -> List[Any]:\n    flat_list = []\n    stack = [nested_list]\n    while stack:\n        current_list = stack.pop()\n        for element in current_list:\n            if isinstance(element, list):\n                stack.append(element)\n            else:\n                flat_list.append(element)\n    return flat_list\n```"
    },
    {
        "id":288,
        "response":"```python\ndef intersection_nested_lists(l1, l2):\n    return [list(set(l1) & set(sublist)) for sublist in l2]\n```"
    },
    {
        "id":289,
        "response":"```python\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_dict = {}\n    for name, score in stdata:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    return max_name, aggregate_dict[max_name]\n```"
    },
    {
        "id":290,
        "response":"```python\nimport math\n\ndef count_binary_seq(n):\n    return math.comb(2*n, n)\n```"
    },
    {
        "id":291,
        "response":"```python\ndef dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)\n```"
    },
    {
        "id":292,
        "response":"```python\ndef set_Bit_Number(n):\n    import math\n    if n == 0:\n        return 0\n    return 2 ** int(math.log2(n & -n))\n```"
    },
    {
        "id":293,
        "response":"```python\ndef solve(a, n):\n    count1 = sum(1 for i in range(n) if a[i] == i % 2)\n    count2 = sum(1 for i in range(n) if a[i] == (i + 1) % 2)\n    return count1 == count2\n```"
    },
    {
        "id":294,
        "response":"```python\ndef find_Element(arr, ranges, rotations, index):\n    from collections import deque\n    for start, end in ranges[::-1][:rotations]:\n        arr = list(deque(arr[start:end+1]))\n        arr.appendleft(arr.pop())\n    return arr[index]\n```"
    },
    {
        "id":295,
        "response":"```python\ndef start_withp(words):\n    word_list = words[0].split()\n    p_words = [word for word in word_list if word.startswith('P')]\n    if len(p_words) >= 2:\n        return tuple(p_words[:2])\n    else:\n        return ()\n```"
    },
    {
        "id":296,
        "response":"```python\ndef max_sum_increasing_subseq(a, n, index, k):\n    import bisect\n    msis = [num for num in a]\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and msis[i] < msis[j] + a[i]:\n                msis[i] = msis[j] + a[i]\n    max_sum = float('-inf')\n    for i in range(index + 1, k + 1):\n        max_sum = max(max_sum, msis[i])\n    return max_sum\n```"
    },
    {
        "id":297,
        "response":"```python\ndef colon_tuplex(tuplex, m, n):\n    tuplex = list(tuplex)\n    tuplex[2].append(n)\n    return tuple(tuplex)\n```"
    },
    {
        "id":298,
        "response":"```python\nimport heapq\n\ndef large_product(nums1, nums2, N):\n    nums1 = [-x for x in nums1]\n    nums2 = [-x for x in nums2]\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    products = []\n    for _ in range(N):\n        num1 = -heapq.heappop(nums1)\n        num2 = -heapq.heappop(nums2)\n        products.append(num1 * num2)\n        heapq.heappush(nums1, -num1)\n        heapq.heappush(nums2, -num2)\n    return products\n```"
    },
    {
        "id":299,
        "response":"```python\ndef maximum(a, b):\n    return max(a, b)\n```"
    },
    {
        "id":300,
        "response":"```python\ndef string_to_tuple(str1):\n    return tuple(str1)\n```"
    },
    {
        "id":301,
        "response":"```python\ndef set_left_most_unset_bit(n):\n    import math\n    if n == 0:\n        return 1\n    x = int(math.log2(n))\n    for i in range(x, -1, -1):\n        if not (n & (1 << i)):\n            return n | (1 << i)\n    return n\n```"
    },
    {
        "id":302,
        "response":"```python\nimport math\n\ndef volume_cone(r, h):\n    return (1.0\/3) * math.pi * r * r * h\n```"
    },
    {
        "id":303,
        "response":"```python\ndef pos_nos(list1):\n    return ','.join(str(i) for i in list1 if i > 0)\n```"
    },
    {
        "id":304,
        "response":"```python\ndef max_sum_rectangular_grid(grid, n):\n    incl = 0\n    excl = 0\n     \n    for i in range(n):\n        new_excl = max(incl, excl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = new_excl\n     \n    return max(incl, excl)\n```"
    },
    {
        "id":305,
        "response":"```python\ndef find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n```"
    },
    {
        "id":306,
        "response":"```python\nfrom typing import List\n\ndef find_last_occurrence(A: List[int], x: int) -> int:\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```"
    },
    {
        "id":307,
        "response":"```python\nfrom itertools import groupby\n\ndef modified_encode(alist):\n    result = []\n    for key, group in groupby(alist):\n        count = len(list(group))\n        if count > 1:\n            result.append([count, key])\n        else:\n            result.append(key)\n    return result\n```"
    },
    {
        "id":308,
        "response":"```python\ndef max_volume(s):\n    s = s \/\/ 3\n    return s * s * (s + (s % 3))\n```"
    },
    {
        "id":309,
        "response":"```python\nimport re\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)\n```"
    },
    {
        "id":310,
        "response":"```python\ndef sum_difference(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) \/\/ 6\n    square_of_sum = (n * (n + 1) \/\/ 2) ** 2\n    return square_of_sum - sum_of_squares\n```"
    },
    {
        "id":311,
        "response":"```python\ndef find_demlo(s):\n    n = len(s)\n    result = ''\n    for i in range(1, n + 1):\n        result += str(i)\n    for i in range(n - 1, 0, -1):\n        result += str(i)\n    return result\n```"
    },
    {
        "id":312,
        "response":"```python\ndef position_min(list1):\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]\n```"
    },
    {
        "id":313,
        "response":"```python\ndef right_rotate(arr, n):\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if (arr[index] >= 0 and arr[out_of_place] < 0) or (arr[index] < 0 and arr[out_of_place] >= 0):\n                arr = rotate_subarray(arr, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if out_of_place == -1:\n            if (arr[index] >= 0 and index % 2 == 1) or (arr[index] < 0 and index % 2 == 0):\n                out_of_place = index\n    return arr\n\ndef rotate_subarray(arr, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n```"
    },
    {
        "id":314,
        "response":"```python\ndef sum_of_alternates(test_tuple):\n    sum1 = sum(test_tuple[::2])\n    sum2 = sum(test_tuple[1::2])\n    return (sum1, sum2)\n```"
    },
    {
        "id":315,
        "response":"```python\nimport math\n\ndef get_Min_Squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n```"
    },
    {
        "id":316,
        "response":"```python\nfrom collections import Counter\nimport re\n\ndef most_occurrences(test_list):\n    words = ' '.join(test_list).lower()\n    words = re.findall(r'\\b\\w+\\b', words)\n    count = Counter(words)\n    return count.most_common(1)[0][0]\n```"
    },
    {
        "id":317,
        "response":"```python\ndef check_isosceles(x, y, z):\n    sides = sorted([x, y, z])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n```"
    },
    {
        "id":318,
        "response":"```python\ndef rotate_left(list1, m, n):\n    list1 = list1[m:] + list1[:m]\n    list1 = list1[:n]\n    return list1\n```"
    },
    {
        "id":319,
        "response":"```python\ndef neg_count(lst):\n    count = sum(1 for num in lst if num < 0)\n    return count\n```"
    },
    {
        "id":320,
        "response":"```python\nimport re\nfrom typing import List\n\ndef find_char(text: str) -> List[str]:\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) in [3, 4, 5]]\n```"
    },
    {
        "id":321,
        "response":"```python\ndef count_unset_bits(n):\n    count = 0\n    max_bits = n.bit_length()\n    for i in range(max_bits):\n        if not (n & (1 << i)):\n            count += 1\n    return count\n```"
    },
    {
        "id":322,
        "response":"```python\ndef char_frequency(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n```"
    },
    {
        "id":323,
        "response":"```python\ndef Sort(sub_li):\n    return sorted(sub_li, key=lambda x: x[1])\n```"
    },
    {
        "id":324,
        "response":"```python\ndef check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    return False\n```"
    },
    {
        "id":325,
        "response":"```python\ndef ap_sum(a, n, d):\n    sum_of_ap = n * (2 * a + (n - 1) * d) \/\/ 2\n    return sum_of_ap\n```"
    },
    {
        "id":326,
        "response":"```python\ndef check_monthnum(monthname1):\n    month_days = {\n        'January': 31,\n        'February': 28,\n        'March': 31,\n        'April': 30,\n        'May': 31,\n        'June': 30,\n        'July': 31,\n        'August': 31,\n        'September': 30,\n        'October': 31,\n        'November': 30,\n        'December': 31\n    }\n    return month_days.get(monthname1, None) == 28\n```"
    },
    {
        "id":327,
        "response":"```python\nimport re\n\ndef text_match_word(text):\n    pattern = r'.*python[\\.,!?]*$'\n    if re.match(pattern, text, re.IGNORECASE):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":328,
        "response":"```python\ndef check_Equality(s):\n    count = 0\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        count += char_count[char] * (char_count[char] + 1) \/\/ 2\n    return count\n```"
    },
    {
        "id":329,
        "response":"```python\nfrom collections import Counter\nimport math\n\ndef find_Divisor(x, y):\n    divisors = []\n    for num in range(x, y + 1):\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i != num \/\/ i:\n                    divisors.append(num \/\/ i)\n    counter = Counter(divisors)\n    return counter.most_common(1)[0][0]\n```"
    },
    {
        "id":330,
        "response":"```python\ndef sum_three_smallest_nums(lst):\n    positive_nums = sorted([num for num in lst if num > 0])\n    return sum(positive_nums[:3]) if len(positive_nums) >= 3 else None\n```"
    },
    {
        "id":331,
        "response":"```python\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n```"
    },
    {
        "id":332,
        "response":"```python\nimport heapq\nfrom typing import List, Tuple\n\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\ndef smallest_range(nums: List[List[int]]) -> Tuple[int, int]:\n    min_heap = []\n    max_val = float('-inf')\n    for i, num_list in enumerate(nums):\n        node = Node(num_list[0], i, 0)\n        heapq.heappush(min_heap, node)\n        max_val = max(max_val, num_list[0])\n\n    min_range = float('inf')\n    min_range_start = min_range_end = None\n    while min_heap:\n        node = heapq.heappop(min_heap)\n        if max_val - node.value < min_range:\n            min_range = max_val - node.value\n            min_range_start = node.value\n            min_range_end = max_val\n\n        if node.index + 1 < len(nums[node.list_num]):\n            next_node = Node(nums[node.list_num][node.index + 1], node.list_num, node.index + 1)\n            heapq.heappush(min_heap, next_node)\n            max_val = max(max_val, next_node.value)\n        else:\n            break\n\n    return min_range_start, min_range_end\n```"
    },
    {
        "id":333,
        "response":"```python\ndef dig_let(s):\n    letter_count = sum(1 for c in s if c.isalpha())\n    digit_count = sum(1 for c in s if c.isdigit())\n    return letter_count, digit_count\n```"
    },
    {
        "id":334,
        "response":"```python\nimport math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m + 1):\n        factors = set()\n        for j in range(1, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                factors.add(j)\n                factors.add(i \/\/ j)\n        odd_factors = sum(1 for f in factors if f % 2 != 0)\n        if odd_factors > 0:\n            count += 1\n    return count\n```"
    },
    {
        "id":335,
        "response":"```python\ndef diff_consecutivenums(nums):\n    return [abs(nums[i] - nums[i-1]) for i in range(1, len(nums))]\n```"
    },
    {
        "id":336,
        "response":"```python\ndef zigzag(n, k):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, min(i + 1, k + 1)):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n    return sum(dp[n])\n```"
    },
    {
        "id":337,
        "response":"```python\ndef count_Squares(m, n):\n    total = 0\n    for i in range(1, min(m, n) + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total\n```"
    },
    {
        "id":338,
        "response":"```python\nimport math\n\ndef bin_coff(n, r=None):\n    if r is None:\n        r = n\n    return math.comb(n + r, r) \/\/ (n + 1)\n```"
    },
    {
        "id":339,
        "response":"```python\ndef check(string):\n    import re\n    pattern = re.compile('[^01]')\n    if pattern.search(string):\n        return 'No'\n    return 'Yes'\n```"
    },
    {
        "id":340,
        "response":"```python\ndef minimum_Length(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    length = len(s)\n    for count in char_count.values():\n        if count > 1:\n            length = min(length, len(s) - count + 1 if count > 2 else len(s) - count)\n        else:\n            length = min(length, len(s) - 1)\n    return length\n```"
    },
    {
        "id":341,
        "response":"```python\nfrom collections import OrderedDict\n\ndef first_Element(arr, n, k):\n    count_dict = OrderedDict()\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value == k:\n            return key\n    return -1\n```"
    },
    {
        "id":342,
        "response":"```python\ndef unique_Characters(s):\n    return len(s) == len(set(s))\n```"
    },
    {
        "id":343,
        "response":"```python\ndef remove_column(list1, n):\n    return [sublist[:n] + sublist[n+1:] for sublist in list1]\n```"
    },
    {
        "id":344,
        "response":"```python\ndef tn_ap(a, n, d):\n    return a + (n - 1) * d\n```"
    },
    {
        "id":345,
        "response":"```python\ndef count_Rectangles(radius):\n    count = 0\n    for l in range(1, 2*radius):\n        for w in range(1, 2*radius):\n            if l**2 + w**2 <= (2*radius)**2:\n                count += 1\n    return count\n```"
    },
    {
        "id":346,
        "response":"```python\ndef find_angle(a, b):\n    return 180 - (a + b)\n```"
    },
    {
        "id":347,
        "response":"```python\ndef find_max(test_list):\n    return max(max(inner_tuple) for inner_tuple in test_list)\n```"
    },
    {
        "id":348,
        "response":"```python\ndef moddiv_list(nums1, nums2):\n    return list(map(lambda x, y: x % y, nums1, nums2))\n```"
    },
    {
        "id":349,
        "response":"```python\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return \"No\"\n    root1 = (-b + D**0.5) \/ (2*a)\n    root2 = (-b - D**0.5) \/ (2*a)\n    return \"Yes\" if (root1 == 2*root2 or root2 == 2*root1) else \"No\"\n```"
    },
    {
        "id":350,
        "response":"```python\ndef get_carol(n):\n    return ((2 ** n) - 1) ** 2 - 2\n```"
    },
    {
        "id":351,
        "response":"```python\ndef remove_empty(list1):\n    return [i for i in list1 if i != []]\n```"
    },
    {
        "id":352,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)\n```"
    },
    {
        "id":353,
        "response":"```python\ndef add_K_element(test_list, K):\n    return [tuple(map(lambda x: x + K, sub)) for sub in test_list]\n```"
    },
    {
        "id":354,
        "response":"```python\ndef make_flip(ch):\n    flips_starting_with_zero = sum(1 for i, c in enumerate(ch) if (i % 2 == 0 and c != '0') or (i % 2 != 0 and c != '1'))\n    flips_starting_with_one = sum(1 for i, c in enumerate(ch) if (i % 2 == 0 and c != '1') or (i % 2 != 0 and c != '0'))\n    return min(flips_starting_with_zero, flips_starting_with_one)\n```"
    },
    {
        "id":355,
        "response":"```python\ndef count_Digit(n):\n    return len(str(abs(n)))\n```"
    },
    {
        "id":356,
        "response":"```python\ndef adjacent_num_product(list_nums):\n    if len(list_nums) < 2:\n        return None\n    return max(a * b for a, b in zip(list_nums, list_nums[1:]))\n```"
    },
    {
        "id":357,
        "response":"```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isBalanced(self, root):\n        def check(root):\n            if root is None:\n                return 0\n            left  = check(root.left)\n            right = check(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return 1 + max(left, right)\n            \n        return check(root) != -1\n\n    def __init__(self, root):\n        return self.isBalanced(root)\n```"
    },
    {
        "id":358,
        "response":"```python\ndef repeat_tuples(test_tup, N):\n    return test_tup * N\n```"
    },
    {
        "id":359,
        "response":"```python\ndef lateralsurface_cuboid(l, w, h):\n    return 2 * (l + w) * h\n```"
    },
    {
        "id":360,
        "response":"```python\ndef float_sort(price):\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)\n```"
    },
    {
        "id":361,
        "response":"```python\ndef smallest_missing(A, left_element, right_element):\n    if not A:\n        return -1\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if A[mid] == mid + left_element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + left_element\n```"
    },
    {
        "id":362,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef heap_assending(nums: List[int]) -> List[int]:\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(len(nums))]\n```"
    },
    {
        "id":363,
        "response":"```python\ndef volume_cuboid(l, w, h):\n    return l * w * h\n```"
    },
    {
        "id":364,
        "response":"```python\nfrom typing import List\nimport itertools\n\ndef permute_string(s: str) -> List[str]:\n    perms = set(\"\".join(p) for p in itertools.permutations(s))\n    return list(perms)\n```"
    },
    {
        "id":365,
        "response":"```python\ndef round_num(n, m):\n    return m * round(n \/ m)\n```"
    },
    {
        "id":366,
        "response":"```python\nfrom itertools import groupby\n\ndef remove_replica(test_tup):\n    result = []\n    for k, g in groupby(test_tup):\n        g_list = list(g)\n        result.extend([k] + ['MSP'] * (len(g_list) - 1))\n    return tuple(result)\n```"
    },
    {
        "id":367,
        "response":"```python\ndef remove_Char(s, c):\n    return s.replace(c, '')\n```"
    },
    {
        "id":368,
        "response":"```python\ndef move_first(test_list):\n    if len(test_list) > 0:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n    return test_list\n```"
    },
    {
        "id":369,
        "response":"```python\ndef surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)\n```"
    },
    {
        "id":370,
        "response":"```python\ndef multi_list(rownum, colnum):\n    return [[i*j for j in range(colnum)] for i in range(rownum)]\n```"
    },
    {
        "id":371,
        "response":"```python\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])\n```"
    },
    {
        "id":372,
        "response":"```python\ndef find_rotation_count(A):\n    left, right = 0, len(A) - 1\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```"
    },
    {
        "id":373,
        "response":"```python\ndef even_bit_toggle_number(n):\n    mask = 0\n    i = 0\n    while i * 2 < 32:\n        mask |= (1 << (i * 2))\n        i += 1\n    return n ^ mask\n```"
    },
    {
        "id":374,
        "response":"```python\ndef frequency_Of_Smallest(n, arr):\n    min_val = min(arr)\n    return arr.count(min_val)\n```"
    },
    {
        "id":375,
        "response":"```python\ndef get_perrin(n):\n    perrin_sequence = [3, 0, 2]\n    if n < 3:\n        return perrin_sequence[n]\n    for i in range(3, n + 1):\n        perrin_sequence.append(perrin_sequence[i-2] + perrin_sequence[i-3])\n    return perrin_sequence[n]\n```"
    },
    {
        "id":376,
        "response":"```python\ndef swap_count(s):\n    l = list(s)\n    count, imbalance = 0, 0\n    for i in range(len(l)):\n        if l[i] == '[':\n            imbalance += 1\n        elif l[i] == ']':\n            imbalance -= 1\n        if imbalance < 0:\n            j = i + 1\n            while j < len(l) and l[j] != '[':\n                j += 1\n            l[i], l[j] = l[j], l[i]\n            count += j - i\n            imbalance += 2\n    return count\n```"
    },
    {
        "id":377,
        "response":"```python\ndef even_or_odd(N):\n    decimal = int(N, 16)\n    if decimal % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n```"
    },
    {
        "id":378,
        "response":"```python\ndef highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i \/\/ 2\n```"
    },
    {
        "id":379,
        "response":"```python\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```"
    },
    {
        "id":380,
        "response":"```python\ndef add_string(lst, string):\n    return [string.format(i) for i in lst]\n```"
    },
    {
        "id":381,
        "response":"```python\ndef convert_list_dictionary(l1, l2, l3):\n    return [{k1: {k2: k3}} for k1, k2, k3 in zip(l1, l2, l3)]\n```"
    },
    {
        "id":382,
        "response":"```python\ndef get_max_sum(n):\n    memo = {0: 0}\n    for i in range(1, n + 1):\n        memo[i] = max(i, memo.get(i \/\/ 2, 0) + memo.get(i \/\/ 3, 0) + memo.get(i \/\/ 4, 0) + memo.get(i \/\/ 5, 0))\n    return memo[n]\n```"
    },
    {
        "id":383,
        "response":"```python\ndef max_length_list(input_list):\n    max_len = max(len(sublist) for sublist in input_list)\n    max_len_list = max((sublist for sublist in input_list if len(sublist) == max_len), key=lambda x: x, default=None)\n    return (max_len, max_len_list) if max_len_list is not None else (0, [])\n```"
    },
    {
        "id":384,
        "response":"```python\ndef check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\n```"
    },
    {
        "id":385,
        "response":"```python\nfrom collections import Counter\n\ndef first_non_repeating_character(str1):\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n```"
    },
    {
        "id":386,
        "response":"```python\nimport re\n\ndef check_char(string):\n    if not string:\n        return \"Invalid\"\n    pattern = re.compile(r'^([a-zA-Z0-9]).*\\1$')\n    if pattern.match(string):\n        return \"Valid\"\n    return \"Invalid\"\n```"
    },
    {
        "id":387,
        "response":"```python\ndef median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n```"
    },
    {
        "id":388,
        "response":"```python\ndef sum_of_digits(nums):\n    return sum(sum(int(digit) for digit in str(num)) for num in nums)\n```"
    },
    {
        "id":389,
        "response":"```python\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":390,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    freq_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        freq_dict[sorted_tup] += 1\n    return len([val for val in freq_dict.values() if val == 1])\n```"
    },
    {
        "id":391,
        "response":"```python\ndef add_nested_tuples(test_tup1, test_tup2):\n    return tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":392,
        "response":"```python\ndef ncr_modp(n, r, p):\n    import math\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p\n```"
    },
    {
        "id":393,
        "response":"```python\nimport re\n\ndef is_valid_URL(url):\n    pattern = re.compile(\n        r'^(?:http|ftp)s?:\/\/' \n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' \n        r'localhost|' \n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' \n        r'(?::\\d+)?' \n        r'(?:\/?|[\/?]\\S+)$', re.IGNORECASE)\n    return bool(pattern.match(url))\n```"
    },
    {
        "id":394,
        "response":"```python\ndef minimum(a, b):\n    return min(a, b)\n```"
    },
    {
        "id":395,
        "response":"```python\ndef check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex\n```"
    },
    {
        "id":396,
        "response":"```python\ndef find_Parity(x):\n    count = bin(x).count('1')\n    return \"Even Parity\" if count % 2 == 0 else \"Odd Parity\"\n```"
    },
    {
        "id":397,
        "response":"```python\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return n\n    i -= 1\n    j = next(j for j in range(len(digits) - 1, i, -1) if digits[j] > digits[i])\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1:] = reversed(digits[i + 1:])\n    return int(''.join(digits))\n```"
    },
    {
        "id":398,
        "response":"```python\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(len(nums1))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n    return pairs\n```"
    },
    {
        "id":399,
        "response":"```python\ndef min_product_tuple(list1):\n    return min(a * b for a, b in list1)\n```"
    },
    {
        "id":400,
        "response":"```python\ndef min_val(listval):\n    nums = [x for x in listval if isinstance(x, (int, float))]\n    return min(nums) if nums else None\n```"
    },
    {
        "id":401,
        "response":"```python\nimport re\n\ndef snake_to_camel(word):\n    words = re.sub('_.', lambda x: x.group()[1].upper(), word)\n    return words.capitalize()\n```"
    },
    {
        "id":402,
        "response":"```python\ndef remove_odd(l):\n    return [i for i in l if i % 2 == 0]\n```"
    },
    {
        "id":403,
        "response":"```python\ndef extract_nth_element(list1, n):\n    return [i[n] for i in list1]\n```"
    },
    {
        "id":404,
        "response":"```python\ndef overlapping(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0\n```"
    },
    {
        "id":405,
        "response":"```python\ndef max_Product(arr):\n    if len(arr) < 2:\n        return None\n    arr.sort()\n    if arr[0] * arr[1] > arr[-1] * arr[-2]:\n        return (arr[0], arr[1])\n    else:\n        return (arr[-2], arr[-1])\n```"
    },
    {
        "id":406,
        "response":"```python\ndef breakSum(n):\n    if n < 12:\n        return n\n    else:\n        return breakSum(n \/\/ 2) + breakSum(n \/\/ 3) + breakSum(n \/\/ 4)\n\ndef breakSum(n):\n    dp = [0] * (n + 1)\n    for i in range(n + 1):\n        dp[i] = max(i, dp[i \/\/ 2] + dp[i \/\/ 3] + dp[i \/\/ 4])\n    return dp[n]\n```"
    },
    {
        "id":407,
        "response":"```python\nfrom itertools import groupby\n\ndef group_tuples(tuples):\n    tuples.sort(key=lambda x: x[0])\n    result = []\n    for key, group in groupby(tuples, key=lambda x: x[0]):\n        group_list = list(group)\n        if len(group_list[0]) > 1:\n            combined_tuple = (key,) + tuple(item for tup in group_list for item in tup[1:])\n            result.append(combined_tuple)\n        else:\n            result.extend(group_list)\n    return result\n```"
    },
    {
        "id":408,
        "response":"```python\ndef Find_Max(lst):\n    return max(lst, key=len)\n```"
    },
    {
        "id":409,
        "response":"```python\ndef round_and_sum(list1):\n    total_sum = sum(round(num) for num in list1)\n    return total_sum * len(list1)\n```"
    },
    {
        "id":410,
        "response":"```python\ndef cube_Sum(n):\n    return sum([i**3 for i in range(2, n*2+1, 2)])\n```"
    },
    {
        "id":411,
        "response":"```python\ndef concatenate_tuple(test_tup):\n    return '-'.join(map(str, test_tup))\n```"
    },
    {
        "id":412,
        "response":"```python\ndef find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    return sum_of_cubes \/ n\n```"
    },
    {
        "id":413,
        "response":"```python\ndef get_maxgold(gold, m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                dp[row][col] = gold[row][col]\n            else:\n                right = dp[row][col+1]\n                right_up = dp[row-1][col+1] if row > 0 else 0\n                right_down = dp[row+1][col+1] if row < m-1 else 0\n                dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    max_gold = dp[0][0]\n    for i in range(1, m):\n        max_gold = max(max_gold, dp[i][0])\n    return max_gold\n```"
    },
    {
        "id":414,
        "response":"```python\ndef extract_rear(test_tuple):\n    return [i[-1] for i in test_tuple]\n```"
    },
    {
        "id":415,
        "response":"```python\ndef count_element_in_list(list1, x):\n    return sum(1 for sublist in list1 if x in sublist)\n```"
    },
    {
        "id":416,
        "response":"```python\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n```"
    },
    {
        "id":417,
        "response":"```python\nimport re\n\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', r'\\3-\\2-\\1', dt)\n```"
    },
    {
        "id":418,
        "response":"```python\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list\n```"
    },
    {
        "id":419,
        "response":"```python\ndef and_tuples(test_tup1, test_tup2):\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":420,
        "response":"```python\ndef parabola_directrix(a, b, c):\n    return (4 * a * c - b ** 2 + 1) \/ (4 * a)\n```"
    },
    {
        "id":421,
        "response":"```python\ndef common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0\n```"
    },
    {
        "id":422,
        "response":"```python\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2\n```"
    },
    {
        "id":423,
        "response":"```python\ndef check_greater(arr, number):\n    if all(i < number for i in arr):\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n```"
    },
    {
        "id":424,
        "response":"```python\nimport re\n\ndef text_match_one(text):\n    pattern = re.compile(r'.*b+.*')\n    if pattern.fullmatch(text):\n        return text\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":425,
        "response":"```python\ndef last_Digit(n):\n    return n % 10\n```"
    },
    {
        "id":426,
        "response":"```python\ndef neg_nos(list1):\n    return ','.join(str(i) for i in list1 if i < 0)\n```"
    },
    {
        "id":427,
        "response":"```python\ndef remove_odd(str1):\n    return str1[1::2]\n```"
    },
    {
        "id":428,
        "response":"```python\ndef count_bidirectional(test_list):\n    from collections import Counter\n    test_list = list(set(test_list))\n    count = 0\n    freq = Counter(test_list)\n    for tup in test_list:\n        if (tup[1], tup[0]) in freq:\n            count += 1\n    return str(count \/\/ 2)\n```"
    },
    {
        "id":429,
        "response":"```python\ndef multiple_to_single(L):\n    return int(''.join(map(str, L)))\n```"
    },
    {
        "id":430,
        "response":"```python\nimport re\n\ndef find_adverb_position(text):\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    for adverb in adverbs:\n        index = text.find(adverb)\n        return (index, index + len(adverb), adverb)\n    return None\n```"
    },
    {
        "id":431,
        "response":"```python\ndef surfacearea_cube(l):\n    return 6 * l ** 2\n```"
    },
    {
        "id":432,
        "response":"```python\ndef positive_count(nums):\n    total_count = len(nums)\n    positive_count = sum(1 for num in nums if num > 0)\n    return round(positive_count \/ total_count, 2) if total_count > 0 else 0.0\n```"
    },
    {
        "id":433,
        "response":"```python\ndef largest_neg(list1):\n    neg_numbers = [num for num in list1 if num < 0]\n    if neg_numbers:\n        return min(neg_numbers)\n    return None\n```"
    },
    {
        "id":434,
        "response":"```python\ndef trim_tuple(test_list, K):\n    return str([tuple(x[K:-K]) if K < len(x) \/\/ 2 else () for x in test_list])\n```"
    },
    {
        "id":435,
        "response":"```python\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":436,
        "response":"```python\ndef count_Occurrence(tup, lst):\n    count = sum(1 for elem in tup if elem in lst)\n    return count\n```"
    },
    {
        "id":437,
        "response":"```python\ndef cube_nums(nums):\n    return list(map(lambda x: x ** 3, nums))\n```"
    },
    {
        "id":438,
        "response":"```python\ndef cal_sum(n):\n    total = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            total += i\n    return total\n```"
    },
    {
        "id":439,
        "response":"```python\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    area = abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) \/ 2.0)\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'\n```"
    },
    {
        "id":440,
        "response":"```python\ndef extract_string(str_list, length):\n    return [s for s in str_list if len(s) == length]\n```"
    },
    {
        "id":441,
        "response":"```python\nimport re\n\ndef remove_whitespaces(text1):\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n```"
    },
    {
        "id":442,
        "response":"```python\ndef loss_amount(actual_cost, sale_amount):\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return None\n```"
    },
    {
        "id":443,
        "response":"```python\ndef sumofFactors(n):\n    import math\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n \/\/ i) % 2 == 0 and n \/\/ i != i:\n                sum += n \/\/ i\n    return sum\n```"
    },
    {
        "id":444,
        "response":"```python\nimport re\n\ndef text_match_wordz(text):\n    pattern = r'\\w*z\\w*'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":445,
        "response":"```python\ndef check_monthnumb_number(monthnum2):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days\n```"
    },
    {
        "id":446,
        "response":"```python\ndef reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\n```"
    },
    {
        "id":447,
        "response":"```python\ndef Find_Min(lst):\n    return min(lst, key=len)\n```"
    },
    {
        "id":448,
        "response":"```python\ndef rectangle_area(l, b):\n    return l * b\n```"
    },
    {
        "id":449,
        "response":"```python\nimport re\n\ndef remove_uppercase(str1):\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1\n```"
    },
    {
        "id":450,
        "response":"```python\ndef Extract(lst):\n    return [item[0] for item in lst]\n```"
    },
    {
        "id":451,
        "response":"```python\ndef upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n```"
    },
    {
        "id":452,
        "response":"```python\nimport itertools\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.combinations(list1, r))\n    return [list(t) for t in result]\n```"
    },
    {
        "id":453,
        "response":"```python\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n```"
    },
    {
        "id":454,
        "response":"```python\ndef check_value(dict, n):\n    return len(set(dict.values())) == 1 and n in dict.values()\n```"
    },
    {
        "id":455,
        "response":"```python\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}\n```"
    },
    {
        "id":456,
        "response":"```python\ndef find_peak_util(arr, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n            return mid\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n```"
    },
    {
        "id":457,
        "response":"```python\ndef decimal_to_Octal(deciNum):\n    return int(oct(deciNum)[2:])\n```"
    },
    {
        "id":458,
        "response":"```python\ndef max_product(arr, n):\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product\n```"
    },
    {
        "id":459,
        "response":"```python\ndef max_profit(price, k):\n    n = len(price)\n    if n < 2:\n        return 0\n    if k >= n \/\/ 2:\n        return sum(max(0, b - a) for a, b in zip(price, price[1:]))\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n    return dp[k][n - 1]\n```"
    },
    {
        "id":460,
        "response":"```python\ndef add_pairwise(test_tup):\n    return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n\n```"
    },
    {
        "id":461,
        "response":"```python\ndef find_remainder(arr, lens, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product % n\n```"
    },
    {
        "id":462,
        "response":"```python\ndef check_Consecutive(l):\n    return len(l) > 0 and max(l) - min(l) == len(l) - 1 and len(set(l)) == len(l)\n```"
    },
    {
        "id":463,
        "response":"```python\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(frozenset(tup) for tup in test_list1)\n    set2 = set(frozenset(tup) for tup in test_list2)\n    intersection = set1 & set2\n    return set(tuple(sorted(fs)) for fs in intersection)\n```"
    },
    {
        "id":464,
        "response":"```python\ndef replace_char(str1, ch, newch):\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    return \"\".join(str1)\n```"
    },
    {
        "id":465,
        "response":"```python\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n```"
    },
    {
        "id":466,
        "response":"```python\ndef big_sum(nums):\n    return max(nums) + min(nums)\n```"
    },
    {
        "id":467,
        "response":"```python\ndef is_lower(string):\n    return string.lower()\n```"
    },
    {
        "id":468,
        "response":"```python\ndef remove_lowercase(str1):\n    import re\n    return re.sub('[a-z]', '', str1)\n```"
    },
    {
        "id":469,
        "response":"```python\ndef first_Digit(n):\n    n = str(abs(n))\n    return int(n[0])\n```"
    },
    {
        "id":470,
        "response":"```python\nfrom collections import Counter\n\ndef get_max_occuring_char(str1):\n    counter = Counter(str1)\n    return max(counter, key=counter.get)\n```"
    },
    {
        "id":471,
        "response":"```python\ndef is_subset_sum(set, n, sum):\n    subset = [[False for _ in range(sum + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        subset[i][0] = True\n    for i in range(1, sum + 1):\n        subset[0][i] = False\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            else:\n                subset[i][j] = subset[i - 1][j] or subset[i - 1][j - set[i - 1]]\n    return subset[n][sum]\n```"
    },
    {
        "id":472,
        "response":"```python\nimport re\n\ndef match(text):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, text):\n        return 'Yes'\n    else:\n        return 'No'\n```"
    },
    {
        "id":473,
        "response":"```python\nimport math\n\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if math.factorial(i) % x == 0:\n            return i\n        i += 1\n```"
    },
    {
        "id":474,
        "response":"```python\ndef remove_matching_tuple(test_list1, test_list2):\n    return [tup for tup in test_list1 if tup not in test_list2]\n```"
    },
    {
        "id":475,
        "response":"```python\ndef is_palindrome(nums, n):\n    max_palindrome = -1\n    for num in nums:\n        str_num = str(num)\n        if str_num == str_num[::-1] and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome\n```"
    },
    {
        "id":476,
        "response":"```python\nimport math\n\ndef nCr(n, r, p):\n    combination = math.comb(n, r)\n    probability = combination * (p ** r) * ((1 - p) ** (n - r))\n    return probability\n```"
    },
    {
        "id":477,
        "response":"```python\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])\n```"
    },
    {
        "id":478,
        "response":"```python\nimport math\n\ndef area_pentagon(a):\n    return (math.sqrt(25 + 10 * math.sqrt(5)) \/ 4) * (a ** 2)\n```"
    },
    {
        "id":479,
        "response":"```python\ndef frequency_Of_Largest(n, arr):\n    max_val = max(arr)\n    return arr.count(max_val)\n```"
    },
    {
        "id":480,
        "response":"```python\ndef extract_symmetric(test_list):\n    return set((a, b) for a, b in test_list if (b, a) in test_list)\n```"
    },
    {
        "id":481,
        "response":"```python\ndef sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) \/ (1 - r)\n```"
    },
    {
        "id":482,
        "response":"```python\ndef binary_search(item_list, item):\n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) \/\/ 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n```"
    },
    {
        "id":483,
        "response":"```python\nimport math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    for x in range(startx, endx + 1):\n        for y in range(starty, endy + 1):\n            hexagon = []\n            for i in range(6):\n                angle = 2 * math.pi \/ 6 * i - math.pi \/ 6\n                px = x * radius * math.sqrt(3) + radius * math.sqrt(3) \/ 2 * (y % 2) + radius * math.cos(angle)\n                py = y * radius * 1.5 + radius * math.sin(angle)\n                hexagon.append((px, py))\n            hexagon.append(hexagon[0])\n            polygons.append(hexagon)\n    return polygons\n```"
    },
    {
        "id":484,
        "response":"```python\ndef binary_to_integer(test_tup):\n    return str(int(''.join(map(str, test_tup)), 2))\n```"
    },
    {
        "id":485,
        "response":"```python\nimport re\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n```"
    },
    {
        "id":486,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef heap_queue_smallest(nums: List[int], n: int) -> List[int]:\n    return heapq.nsmallest(n, nums)\n```"
    },
    {
        "id":487,
        "response":"```python\nimport math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + l)\n```"
    },
    {
        "id":488,
        "response":"```python\nimport math\n\ndef gcd(x, y):\n    return math.gcd(x, y)\n```"
    },
    {
        "id":489,
        "response":"```python\ndef diameter_circle(r):\n    return r * 2\n```"
    },
    {
        "id":490,
        "response":"```python\ndef concatenate_elements(list):\n    return '  ' + ' '.join(list)\n```"
    },
    {
        "id":491,
        "response":"```python\ndef min_cost(cost, m, n):\n    rows = m + 1\n    cols = n + 1\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[m][n]\n```"
    },
    {
        "id":492,
        "response":"```python\ndef similar_elements(test_tup1, test_tup2):\n    return tuple(sorted(set(test_tup1) & set(test_tup2)))\n```"
    },
    {
        "id":493,
        "response":"```python\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n```"
    },
    {
        "id":494,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, nums)\n```"
    },
    {
        "id":495,
        "response":"```python\ndef count_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    a = [0]*(n+1)\n    a[0] = 1\n    a[1] = 0\n    a[2] = 3\n    for i in range(3, n+1):\n        a[i] = 2*a[i-2] + a[i-1]\n    return a[n]\n```"
    },
    {
        "id":496,
        "response":"```python\ndef is_Power_Of_Two(x, y):\n    return bin(x ^ y).count('1') == 1\n```"
    },
    {
        "id":497,
        "response":"```python\nimport re\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)\n```"
    },
    {
        "id":498,
        "response":"```python\ndef square_nums(nums):\n    nums = list(map(lambda x: x ** 2, nums))\n    return nums\n```"
    },
    {
        "id":499,
        "response":"```python\ndef find_Rotations(str):\n    n = len(str)\n    temp = str + str\n    for i in range(1, n + 1):\n        if temp[i:i + n] == str:\n            return i\n    return n\n```"
    },
    {
        "id":500,
        "response":"```python\ndef small_nnum(list1, n):\n    list1.sort()\n    return list1[:n]\n```"
    }
]