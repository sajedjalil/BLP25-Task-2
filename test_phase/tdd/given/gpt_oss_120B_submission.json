[
    {
        "id":1,
        "response":"import re\nimport typing\n\ndef remove_Occ(s: str, ch: str) -> str:\n    first = s.find(ch)\n    if first == -1:\n        return s\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first + 1 :]\n    return s[:first] + s[first + 1 : last] + s[last + 1 :]"
    },
    {
        "id":2,
        "response":"import typing\n\ndef sort_matrix(M: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    return sorted(M, key=sum)"
    },
    {
        "id":3,
        "response":""
    },
    {
        "id":4,
        "response":"def find_Volume(l, b, h):\n    return (l * b * h) \/ 2"
    },
    {
        "id":5,
        "response":"import re\n\ndef split_lowerstring(text):\n    result = []\n    i = 0\n    n = len(text)\n    while i < n:\n        if text[i].islower():\n            start = i\n            i += 1\n            while i < n and not text[i].islower():\n                i += 1\n            result.append(text[start:i])\n        else:\n            i += 1\n    return result"
    },
    {
        "id":6,
        "response":"import re\n\ndef text_lowercase_underscore(text):\n    return 'Found a match!' if re.search(r'[a-z]+_[a-z]+', text) else 'No match!'"
    },
    {
        "id":7,
        "response":"def square_perimeter(a):\n    return 4 * a"
    },
    {
        "id":8,
        "response":"import typing\n\ndef str_to_list(string: str, remove: str) -> str:\n    remove_set = set(remove)\n    return ''.join(ch for ch in string if ch not in remove_set)"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))"
    },
    {
        "id":10,
        "response":"import sys\n\ndef is_woodall(x):\n    if x < 1:\n        return False\n    n = 1\n    while True:\n        w = n * (1 << n) - 1\n        if w == x:\n            return True\n        if w > x:\n            return False\n        n += 1"
    },
    {
        "id":11,
        "response":"import typing\n\ndef multiples_of_num(m: int, n: int) -> typing.List[int]:\n    if m <= 0:\n        return []\n    return [n * i for i in range(1, m + 1)]"
    },
    {
        "id":12,
        "response":"import typing\n\ndef find_first_duplicate(nums: typing.List[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1"
    },
    {
        "id":13,
        "response":"import typing\n\ndef maximum_Sum(list1: typing.List[typing.List[int]]) -> int:\n    if not list1:\n        return 0\n    return max((sum(sublist) for sublist in list1), default=0)"
    },
    {
        "id":14,
        "response":"def binary_to_decimal(binary):\n    s = str(binary)\n    return int(s, 2)"
    },
    {
        "id":15,
        "response":"import math\n\ndef find_Product(arr, n):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    product = 1\n    found = False\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n            found = True\n    return product if found else 0"
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: typing.List[tuple], K: int) -> bool:\n    for item in test_list:\n        if isinstance(item, tuple) and len(item) == K:\n            return True\n    return False"
    },
    {
        "id":17,
        "response":"def remove(list):\n    result = []\n    for s in list:\n        result.append(''.join(ch for ch in s if not ch.isdigit()))\n    return result"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    k = min(k, n - k)\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - k + i) \/\/ i\n    return result"
    },
    {
        "id":19,
        "response":"import typing\n\ndef get_Odd_Occurrence(arr: typing.List[int], arr_size: int) -> typing.Optional[int]:\n    if arr_size == 0:\n        return None\n    result = 0\n    for num in arr:\n        result ^= num\n    return result"
    },
    {
        "id":20,
        "response":"import collections\n\ndef check_Equality(s):\n    freq = collections.Counter(s)\n    return sum(v * (v + 1) \/\/ 2 for v in freq.values())"
    },
    {
        "id":21,
        "response":"import heapq\nfrom collections import Counter\n\ndef func(nums, k):\n    freq = Counter()\n    for sublist in nums:\n        for num in sublist:\n            freq[num] += 1\n    heap = []\n    for num, count in freq.items():\n        heapq.heappush(heap, (count, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return [num for _, num in heap]"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors(n):\n    if n <= 1:\n        return n\n    n = abs(n)\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n \/\/= 2\n    for i in range(3, int(math.isqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n \/\/= i\n    if n > 2:\n        max_prime = n\n    return max_prime"
    },
    {
        "id":23,
        "response":"import sys\n\ndef decimal_To_Binary(N):\n    if N == 0:\n        return 0\n    if N < 0:\n        return -decimal_To_Binary(-N)\n    return int(bin(N)[2:])"
    },
    {
        "id":24,
        "response":"import typing\n\ndef find_missing(ar: typing.List[int], N: int) -> int:\n    for idx, val in enumerate(ar, start=1):\n        if val != idx:\n            return idx\n    return N if N > len(ar) else -1"
    },
    {
        "id":25,
        "response":"def find_rect_num(n):\n    return n * (n + 1)"
    },
    {
        "id":26,
        "response":"import sys\n\ndef find_Nth_Digit(p: int, q: int, N: int) -> int:\n    if q == 0:\n        raise ZeroDivisionError(\"Denominator q cannot be zero.\")\n    p, q = abs(p), abs(q)\n    remainder = p % q\n    for _ in range(N):\n        remainder *= 10\n        digit = remainder \/\/ q\n        remainder %= q\n    return digit"
    },
    {
        "id":27,
        "response":"import typing\n\ndef sort_mixed_list(mixed_list: typing.List[typing.Union[int, str]]) -> typing.List[typing.Union[int, str]]:\n    ints = [x for x in mixed_list if isinstance(x, int) and not isinstance(x, bool)]\n    strs = [x for x in mixed_list if isinstance(x, str)]\n    ints.sort()\n    strs.sort()\n    return ints + strs"
    },
    {
        "id":28,
        "response":"import typing\n\ndef div_even_odd(lst: typing.List[int]) -> typing.Optional[float]:\n    first_odd = None\n    first_even = None\n    for num in lst:\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is not None and first_even is not None:\n            break\n    if first_odd is None or first_even is None:\n        return None\n    result = first_even \/ first_odd\n    return int(result) if result.is_integer() else result"
    },
    {
        "id":29,
        "response":"import heapq\n\ndef rearange_string(S: str) -> str:\n    if not S:\n        return \"\"\n    freq = {}\n    for ch in S:\n        freq[ch] = freq.get(ch, 0) + 1\n    max_heap = [(-cnt, ch) for ch, cnt in freq.items()]\n    heapq.heapify(max_heap)\n    prev_cnt, prev_ch = 0, ''\n    result = []\n    while max_heap:\n        cnt, ch = heapq.heappop(max_heap)\n        result.append(ch)\n        cnt += 1\n        if prev_cnt < 0:\n            heapq.heappush(max_heap, (prev_cnt, prev_ch))\n        prev_cnt, prev_ch = cnt, ch\n    rearranged = ''.join(result)\n    for i in range(1, len(rearranged)):\n        if rearranged[i] == rearranged[i - 1]:\n            return \"\"\n    return rearranged"
    },
    {
        "id":30,
        "response":"import collections\n\ndef freq_element(nums):\n    return dict(collections.Counter(item for sublist in nums for item in sublist))"
    },
    {
        "id":31,
        "response":"import typing\n\ndef filter_evennumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"import collections\n\ndef find_Sum(arr, n):\n    freq = collections.Counter(arr)\n    return sum(x for x in arr if freq[x] > 1)"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return 'Found a match!'\n    return 'Not found!'"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text):\n    match = re.match(r'^[A-Za-z]+', text)\n    return match.group() if match else 'Not matched!'"
    },
    {
        "id":35,
        "response":"import math\nfrom functools import reduce\n\ndef find_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(math.gcd, arr)"
    },
    {
        "id":36,
        "response":"import typing\n\ndef test_distinct(data: typing.List[int]) -> bool:\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":"import typing\n\ndef compute_Last_Digit(A: int, B: int) -> int:\n    if A < B:\n        return 0\n    result = 1\n    for i in range(B + 1, A + 1):\n        result = (result * i) % 10\n        if result == 0:\n            break\n    return result"
    },
    {
        "id":38,
        "response":"import typing\n\ndef odd_bit_set_number(n: int) -> int:\n    if n < 0:\n        return n\n    mask = 0\n    bits = n.bit_length() + 1\n    for i in range(0, bits, 2):\n        mask |= 1 << i\n    return n | mask"
    },
    {
        "id":39,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[typing.Any]], N: int) -> typing.List[typing.Any]:\n    result = []\n    for row in nums:\n        if -len(row) <= N < len(row):\n            result.append(row[N])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "id":40,
        "response":"import typing\n\ndef min_length_list(input_list: typing.List[typing.List]) -> typing.Tuple[int, typing.List]:\n    if not input_list:\n        return (0, [])\n    min_lst = min(input_list, key=lambda x: len(x))\n    return (len(min_lst), min_lst)"
    },
    {
        "id":41,
        "response":"def check_equilateral(x, y, z):\n    if x <= 0 or y <= 0 or z <= 0:\n        return False\n    return x == y == z"
    },
    {
        "id":42,
        "response":"import typing\n\ndef parallelogram_area(b: float, h: float) -> float:\n    return b * h"
    },
    {
        "id":43,
        "response":"import typing\n\ndef check_Equality(s: str) -> str:\n    if not s:\n        return \"Not Equal\"\n    return \"Equal\" if s[0] == s[-1] else \"Not Equal\""
    },
    {
        "id":44,
        "response":"import typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    if not my_list:\n        return []\n    min_val = min(my_list)\n    max_val = max(my_list)\n    range_size = max_val - min_val + 1\n    count = [0] * range_size\n    for num in my_list:\n        count[num - min_val] += 1\n    sorted_list = []\n    for i, cnt in enumerate(count):\n        sorted_list.extend([i + min_val] * cnt)\n    return sorted_list"
    },
    {
        "id":45,
        "response":"import math\n\ndef tn_gp(a, n, r):\n    if n < 1:\n        return None\n    return a * (r ** (n - 1))"
    },
    {
        "id":46,
        "response":"import re\n\ndef rev(num):\n    rev_num = int(str(abs(num))[::-1])\n    return num == 2 * rev_num - 1"
    },
    {
        "id":47,
        "response":"import typing\n\ndef find_Max_Num(arr: typing.List[int], n: int) -> int:\n    if not arr or n <= 0:\n        return 0\n    selected = arr[:n] if n <= len(arr) else arr\n    selected.sort(reverse=True)\n    return int(''.join(str(d) for d in selected))"
    },
    {
        "id":48,
        "response":"def opposite_Signs(x: int, y: int) -> bool:\n    return x * y < 0"
    },
    {
        "id":49,
        "response":"import typing\n\ndef is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"
    },
    {
        "id":50,
        "response":""
    },
    {
        "id":51,
        "response":"import collections\n\ndef count_Substrings(s: str, n: int) -> int:\n    pref = 0\n    freq = collections.defaultdict(int)\n    freq[0] = 1\n    count = 0\n    for ch in s:\n        pref += int(ch) - 1\n        count += freq[pref]\n        freq[pref] += 1\n    return count"
    },
    {
        "id":52,
        "response":"import typing\n\ndef smallest_num(xs: typing.List[int]) -> typing.Optional[int]:\n    if not xs:\n        return None\n    min_val = xs[0]\n    for num in xs[1:]:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "id":53,
        "response":"import typing\n\ndef max_difference(test_list: typing.List[typing.Tuple[int, int]]) -> int:\n    if not test_list:\n        return 0\n    max_diff = 0\n    for a, b in test_list:\n        diff = a - b\n        if diff < 0:\n            diff = -diff\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "id":54,
        "response":"import typing\n\ndef subject_marks(subjectmarks: typing.List[typing.Tuple[str, int]]) -> typing.List[typing.Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "id":55,
        "response":"import collections.abc\n\ndef recursive_list_sum(data_list):\n    total = 0\n    stack = [data_list]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, collections.abc.Iterable) and not isinstance(current, (str, bytes)):\n            for item in current:\n                stack.append(item)\n        else:\n            total += current\n    return total"
    },
    {
        "id":56,
        "response":"import typing\n\ndef pos_count(lst: typing.List[int]) -> int:\n    return sum(1 for x in lst if x > 0)"
    },
    {
        "id":57,
        "response":"import math\n\ndef bell_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non\u2011negative\")\n    bell = [1]\n    for i in range(1, n + 1):\n        total = 0\n        for k in range(i):\n            total += math.comb(i - 1, k) * bell[k]\n        bell.append(total)\n    return bell[n]"
    },
    {
        "id":58,
        "response":"import typing\n\ndef is_Monotonic(A: typing.List[int]) -> bool:\n    if len(A) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    return increasing or decreasing"
    },
    {
        "id":59,
        "response":"import typing\n\ndef is_sublist(l: typing.List, s: typing.List) -> bool:\n    if not s:\n        return True\n    n, m = len(l), len(s)\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False"
    },
    {
        "id":60,
        "response":"import typing\n\ndef find_equal_tuple(Input: typing.List[tuple], k: int) -> str:\n    for t in Input:\n        if not isinstance(t, tuple) or len(t) != k:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'"
    },
    {
        "id":61,
        "response":"import typing\n\ndef comb_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap \/ shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "id":62,
        "response":"def dif_Square(n):\n    return n % 4 != 2"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    return re.split(r'[\\n*]', text)"
    },
    {
        "id":64,
        "response":"import typing\n\ndef is_samepatterns(colors: typing.List[str], patterns: typing.List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    forward: dict = {}\n    reverse: dict = {}\n    for c, p in zip(colors, patterns):\n        if p in forward:\n            if forward[p] != c:\n                return False\n        else:\n            forward[p] = c\n        if c in reverse:\n            if reverse[c] != p:\n                return False\n        else:\n            reverse[c] = p\n    return True"
    },
    {
        "id":65,
        "response":"import typing\n\ndef find_tuples(test_list: typing.List[typing.Tuple[int, ...]], K: int) -> str:\n    if K == 0:\n        return \"[]\"\n    filtered = [t for t in test_list if all(isinstance(x, int) and x % K == 0 for x in t)]\n    return str(filtered)"
    },
    {
        "id":66,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = m if m < n else n\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":67,
        "response":"import typing\n\ndef is_Diff(n: int) -> bool:\n    n = abs(n)\n    sum_even = 0\n    sum_odd = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            sum_even += digit\n        else:\n            sum_odd += digit\n        n \/\/= 10\n    return sum_even == sum_odd"
    },
    {
        "id":68,
        "response":"import typing\n\ndef count_With_Odd_SetBits(n: int) -> int:\n    if n <= 0:\n        return 0\n    cnt = 0\n    for i in range(1, n + 1):\n        if i.bit_count() % 2 == 1:\n            cnt += 1\n    return cnt"
    },
    {
        "id":69,
        "response":"def word_len(s):\n    return len(s) % 2 == 1"
    },
    {
        "id":70,
        "response":"import typing\n\ndef tetrahedral_number(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    return float(n * (n + 1) * (n + 2) \/ 6)"
    },
    {
        "id":71,
        "response":"import itertools\n\ndef zip_tuples(test_tup1, test_tup2):\n    if not test_tup1 or not test_tup2:\n        return []\n    result = []\n    len2 = len(test_tup2)\n    for i, val1 in enumerate(test_tup1):\n        result.append((val1, test_tup2[i % len2]))\n    return result"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    return (4.0 \/ 3.0) * math.pi * r ** 3"
    },
    {
        "id":73,
        "response":"import string\n\ndef get_Char(strr):\n    total = 0\n    for ch in strr.lower():\n        if 'a' <= ch <= 'z':\n            total += ord(ch) - ord('a') + 1\n    if total == 0:\n        return ''\n    index = (total - 1) % 26\n    return chr(ord('a') + index)"
    },
    {
        "id":74,
        "response":"import sys\n\ndef sequence(n: int) -> int:\n    if n <= 2:\n        return 1\n    a = [0] * (n + 1)\n    a[1] = a[2] = 1\n    for i in range(3, n + 1):\n        prev = a[i - 1]\n        a[i] = a[prev] + a[i - prev]\n    return a[n]"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r"
    },
    {
        "id":76,
        "response":"import typing\n\ndef centered_hexagonal_number(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"import typing\n\ndef merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":"import collections\n\ndef freq_count(list1):\n    return dict(collections.Counter(list1))"
    },
    {
        "id":79,
        "response":"import typing\n\ndef closest_num(N: int) -> int:\n    return N - 1"
    },
    {
        "id":80,
        "response":"import typing\n\ndef len_log(list1: typing.List[str]) -> int:\n    if not list1:\n        return 0\n    return max((len(word) for word in list1), default=0)"
    },
    {
        "id":81,
        "response":"import typing\n\ndef find_substring(str_list: typing.List[str], sub_str: str) -> bool:\n    if not sub_str:\n        return True\n    return any(sub_str in s for s in str_list)"
    },
    {
        "id":82,
        "response":"import re\n\ndef is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    pattern = r'^([0-9])([0-9])\\1\\2*$'\n    if s[0] == s[1]:\n        return False\n    return bool(re.fullmatch(r'({0}{1})+'.format(s[0], s[1]), s) and all(s[i] == s[i % 2] for i in range(len(s))))"
    },
    {
        "id":83,
        "response":"import typing\n\ndef power(a, b):\n    return a ** b"
    },
    {
        "id":84,
        "response":"import typing\n\ndef index_minimum(test_list: typing.List[typing.Tuple[str, int]]) -> typing.Optional[str]:\n    if not test_list:\n        return None\n    return min(test_list, key=lambda x: x[1])[0]"
    },
    {
        "id":85,
        "response":"import typing\n\ndef Find_Min_Length(lst: typing.List[typing.List]) -> int:\n    if not lst:\n        return 0\n    return min(len(sub) for sub in lst)"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n):\n    if n == 0:\n        return 0\n    n = abs(n)\n    count = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            count += 2\n    if limit * limit == n:\n        count -= 1\n    return count"
    },
    {
        "id":87,
        "response":"import collections\n\ndef frequency_lists(list_of_lists):\n    counter = collections.Counter()\n    for sublist in list_of_lists:\n        counter.update(sublist)\n    return dict(counter)"
    },
    {
        "id":88,
        "response":"import typing\n\ndef multiply_num(numbers: typing.Iterable[float]) -> float:\n    product = 1.0\n    count = 0\n    for n in numbers:\n        product *= n\n        count += 1\n    if count == 0:\n        return 0.0\n    return product \/ count"
    },
    {
        "id":89,
        "response":"from typing import *\n\ndef decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    sign = ''\n    if n < 0:\n        sign = '-'\n        n = -n\n    bits = []\n    while n:\n        bits.append(str(n & 1))\n        n >>= 1\n    return sign + ''.join(reversed(bits))"
    },
    {
        "id":90,
        "response":"import typing\n\ndef next_smallest_palindrome(num: int) -> int:\n    if num < 0:\n        return 0\n    s = str(num)\n    n = len(s)\n    if set(s) == {\"9\"}:\n        return int(\"1\" + \"0\" * (n - 1) + \"1\")\n    half = n \/\/ 2\n    odd = n % 2\n    left = s[:half]\n    middle = s[half] if odd else \"\"\n    def make_pal(l: str, m: str, o: int) -> str:\n        return l + m + l[::-1] if o else l + l[::-1]\n    pal = make_pal(left, middle, odd)\n    if int(pal) > num:\n        return int(pal)\n    if odd:\n        inc_part = str(int(left + middle) + 1)\n        if len(inc_part) > len(left + middle):\n            return int(\"1\" + \"0\" * (n - 1) + \"1\")\n        new_left = inc_part[:-1]\n        new_middle = inc_part[-1]\n    else:\n        inc_part ="
    },
    {
        "id":91,
        "response":"import typing\n\ndef kth_element(arr: typing.List[int], n: int, k: int) -> typing.Optional[int]:\n    if n != len(arr):\n        n = len(arr)\n    if 1 <= k <= n:\n        return arr[k - 1]\n    return None"
    },
    {
        "id":92,
        "response":"import re\n\ndef snake_to_camel(word):\n    return ''.join(p.title() for p in word.split('_') if p)"
    },
    {
        "id":93,
        "response":"import sys\n\ndef eulerian_num(n, m):\n    if n < 0 or m < 0 or m >= n:\n        if n == 0 and m == 0:\n            return 1\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        new = [0] * (i + 1)\n        for j in range(i):\n            val = 0\n            if j - 1 >= 0:\n                val += (i - j) * dp[j - 1]\n            if j < i:\n                val += (j + 1) * dp[j]\n            new[j] = val\n        dp = new\n    return dp[m]"
    },
    {
        "id":94,
        "response":"import typing\n\ndef sort_sublists(input_list: typing.Iterable[typing.Iterable[str]]) -> list:\n    return list(map(lambda sub: sorted(sub), input_list))"
    },
    {
        "id":95,
        "response":"def count(lst):\n    return sum(1 for x in lst if x is True)"
    },
    {
        "id":96,
        "response":"import typing\n\ndef add_lists(test_list: list, test_tup: tuple) -> tuple:\n    return test_tup + tuple(test_list)"
    },
    {
        "id":97,
        "response":"import typing\n\ndef count_Hexadecimal(L: int, R: int) -> int:\n    if L > R:\n        L, R = R, L\n    lower = max(L, 0)\n    upper = min(R, 15)\n    return max(0, upper - lower + 1)"
    },
    {
        "id":98,
        "response":"import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    for lst in (num1, num2, num3):\n        heap.extend(lst)\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "id":99,
        "response":"import typing\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    return s.count('1')"
    },
    {
        "id":100,
        "response":"import typing\n\ndef extract_missing(test_list: typing.List[typing.Tuple[int, int]], strt_val: int, stop_val: int) -> typing.List[typing.Tuple[int, int]]:\n    intervals = sorted(test_list, key=lambda x: x[0])\n    result: typing.List[typing.Tuple[int, int]] = []\n    if not intervals:\n        if strt_val < stop_val:\n            result.append((strt_val, stop_val))\n        return result\n    first_start = intervals[0][0]\n    if strt_val < first_start:\n        result.append((strt_val, first_start))\n    n = len(intervals)\n    for i, (s, e) in enumerate(intervals):\n        if i < n - 1:\n            next_start = intervals[i + 1][0]\n            if e < next_start:\n                result.append((e, next_start))\n        if e < stop_val:\n            result.append((e, stop_val))\n    return result"
    },
    {
        "id":101,
        "response":"import typing\n\ndef common_in_nested_lists(nestedlist: typing.List[typing.List[int]]) -> typing.List[int]:\n    if not nestedlist:\n        return []\n    common_set = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_set.intersection_update(sublist)\n        if not common_set:\n            break\n    return sorted(common_set, reverse=True)"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    return 2 * (diameter + height)"
    },
    {
        "id":103,
        "response":"import re\n\ndef check_integer(text):\n    return bool(re.fullmatch(r'[+-]?\\d+', text))"
    },
    {
        "id":104,
        "response":"import collections\n\ndef assign_freq(test_list):\n    freq = collections.OrderedDict()\n    for tpl in test_list:\n        freq[tpl] = freq.get(tpl, 0) + 1\n    result = []\n    for tpl, count in freq.items():\n        result.append(tpl + (count,))\n    return result"
    },
    {
        "id":105,
        "response":"import typing\n\ndef empty_dit(list1: typing.List[dict]) -> bool:\n    return all(isinstance(d, dict) and not d for d in list1)"
    },
    {
        "id":106,
        "response":"import typing\n\ndef tuple_to_int(nums: typing.Tuple[int, ...]) -> int:\n    if not nums:\n        return 0\n    return int(''.join(map(str, nums)))"
    },
    {
        "id":107,
        "response":"import re\nfrom typing import Any, List, Tuple, Set\n\ndef list_to_float(test_list: List[Any]) -> str:\n    def convert(item: Any) -> Any:\n        if isinstance(item, list):\n            return [convert(elem) for elem in item]\n        if isinstance(item, tuple):\n            return tuple(convert(elem) for elem in item)\n        if isinstance(item, set):\n            return {convert(elem) for elem in item}\n        try:\n            return float(item)\n        except Exception:\n            return item\n    converted = convert(test_list)\n    return str(converted)"
    },
    {
        "id":108,
        "response":"import typing\n\ndef string_to_list(string: str) -> typing.List[str]:\n    return string.split()"
    },
    {
        "id":109,
        "response":"import typing\n\ndef search(arr: typing.List[int], n: int) -> int:\n    if n == 1:\n        return arr[0]\n    low, high = 0, n - 1\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":110,
        "response":"import itertools\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, ...]]) -> int:\n    max_product = 0\n    for tup in list1:\n        if not tup:\n            continue\n        product = 1\n        for num in tup:\n            product *= num\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "id":111,
        "response":"import itertools\n\ndef check_triplet(A, n, target_sum, count):\n    if n < 3:\n        return False\n    A_sorted = sorted(A)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current = A_sorted[i] + A_sorted[left] + A_sorted[right]\n            if current == target_sum:\n                return True\n            if current < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False"
    },
    {
        "id":112,
        "response":""
    },
    {
        "id":113,
        "response":"import itertools\n\ndef amicable_numbers_sum(limit: int) -> int:\n    if limit <= 2:\n        return 0\n    divisor_sum = [0] * (limit + 1)\n    for i in range(1, limit \/\/ 2 + 1):\n        for j in range(i * 2, limit + 1, i):\n            divisor_sum[j] += i\n    total = 0\n    for n in range(2, limit):\n        m = divisor_sum[n]\n        if m != n and m < limit and divisor_sum[m] == n:\n            total += n\n    return total"
    },
    {
        "id":114,
        "response":"import math\n\ndef angle_complex(a, b):\n    real = a.real if isinstance(a, complex) else a\n    imag = b.imag if isinstance(b, complex) else b\n    return math.atan2(imag, real)"
    },
    {
        "id":115,
        "response":""
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    a, b = abs(a), abs(b)\n    if a == 0 and b == 0:\n        return 0\n    g = math.gcd(a, b)\n    if g == 0:\n        return 0\n    total = 0\n    i = 1\n    while i * i <= g:\n        if g % i == 0:\n            total += i\n            if i != g \/\/ i:\n                total += g \/\/ i\n        i += 1\n    return total"
    },
    {
        "id":117,
        "response":"def multiply_int(x, y):\n    sign = -1 if (x < 0) ^ (y < 0) else 1\n    a = x if x >= 0 else -x\n    b = y if y >= 0 else -y\n    result = 0\n    while b:\n        if b & 1:\n            result += a\n        a <<= 1\n        b >>= 1\n    return result if sign > 0 else -result"
    },
    {
        "id":118,
        "response":"import re\n\ndef long_words(n, s):\n    words = re.findall(r'\\S+', s)\n    return [word for word in words if len(word) > n]"
    },
    {
        "id":119,
        "response":"import typing\n\ndef magic_square_test(my_matrix: typing.List[typing.List[int]]) -> bool:\n    if not my_matrix or not all(isinstance(row, list) for row in my_matrix):\n        return False\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return False\n    target_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != target_sum:\n            return False\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != target_sum:\n            return False\n    if sum(my_matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n    return True"
    },
    {
        "id":120,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return (None, 0)\n    counter = collections.Counter(nums)\n    max_count = max(counter.values())\n    candidates = [k for k, v in counter.items() if v == max_count]\n    return (min(candidates), max_count)"
    },
    {
        "id":121,
        "response":"import typing\n\ndef reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    chars = list(str1)\n    i, j = 0, len(chars) - 1\n    while i < j:\n        while i < j and chars[i] not in vowels:\n            i += 1\n        while i < j and chars[j] not in vowels:\n            j -= 1\n        if i < j:\n            chars[i], chars[j] = chars[j], chars[i]\n            i += 1\n            j -= 1\n    return ''.join(chars)"
    },
    {
        "id":122,
        "response":"def tup_string(tup1):\n    return ''.join(map(str, tup1))"
    },
    {
        "id":123,
        "response":"import typing\n\ndef sum_negativenum(nums: typing.List[int]) -> int:\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"import typing\n\ndef check_last(arr: typing.List[int], n: int, p: int) -> str:\n    if not arr:\n        return \"\"\n    result = arr[-1] + n * p\n    return \"EVEN\" if result % 2 == 0 else \"ODD\""
    },
    {
        "id":125,
        "response":"def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":""
    },
    {
        "id":127,
        "response":"import typing\n\ndef zero_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    zeros = sum(1 for x in nums if x == 0)\n    return round(zeros \/ len(nums), 2)"
    },
    {
        "id":128,
        "response":"import typing\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return isinstance(n, int) and n > 0 and n % 2 == 0"
    },
    {
        "id":129,
        "response":"import typing\n\ndef circle_circumference(r: float) -> float:\n    return 2 * 3.1415 * r"
    },
    {
        "id":130,
        "response":"import typing\n\ndef extract_singly(test_list: typing.List[typing.Tuple[typing.Any, ...]]) -> typing.List[typing.Any]:\n    seen = set()\n    result = []\n    for tpl in test_list:\n        for item in tpl:\n            if item not in seen:\n                seen.add(item)\n                result.append(item)\n    return result"
    },
    {
        "id":131,
        "response":"import typing\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_idx = 0\n        for i in range(1, curr_size):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                nums[:max_idx + 1] = reversed(nums[:max_idx + 1])\n            nums[:curr_size] = reversed(nums[:curr_size])\n    return nums"
    },
    {
        "id":132,
        "response":"import typing\n\ndef count_samepair(list1: typing.List[int], list2: typing.List[int], list3: typing.List[int]) -> int:\n    min_len = min(len(list1), len(list2), len(list3))\n    count = 0\n    for i in range(min_len):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "id":133,
        "response":"import typing\n\ndef find_lists(Input: tuple) -> int:\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "id":134,
        "response":"import itertools\n\ndef sum_Pairs(arr, n):\n    if n < 2:\n        return 0\n    total = 0\n    for a, b in itertools.combinations(arr, 2):\n        total += abs(a - b)\n    return total"
    },
    {
        "id":135,
        "response":"import typing\n\ndef max_Abs_Diff(arr: typing.Sequence[int], n: int) -> int:\n    if n < 2:\n        return 0\n    min_val = max_val = arr[0]\n    for i in range(1, n):\n        val = arr[i]\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val - min_val"
    },
    {
        "id":136,
        "response":"import typing\n\ndef ascii_value_string(str1: str) -> int:\n    if not str1:\n        return 0\n    return ord(str1[0])"
    },
    {
        "id":137,
        "response":"import typing\n\ndef max_path_sum(tri: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if not tri:\n        return 0\n    rows = len(tri)\n    for i in range(rows - 2, -1, -1):\n        for j in range(i + 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]"
    },
    {
        "id":138,
        "response":""
    },
    {
        "id":139,
        "response":"import collections\n\ndef longest_subseq_with_diff_one(arr, n):\n    dp = collections.defaultdict(int)\n    max_len = 0\n    for x in arr:\n        best = 1 + max(dp.get(x - 1, 0), dp.get(x + 1, 0))\n        if best > dp[x]:\n            dp[x] = best\n        if dp[x] > max_len:\n"
    },
    {
        "id":140,
        "response":""
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p, q):\n    return math.gcd(abs(p), abs(q)) == 1"
    },
    {
        "id":142,
        "response":"import typing\n\ndef merge(arr: typing.List[int]) -> typing.List[int]:\n    if len(arr) <= 1:\n        return arr[:]\n    mid = len(arr) \/\/ 2\n    left = merge(arr[:mid])\n    right = merge(arr[mid:])\n    i = j = 0\n    merged = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    return merged"
    },
    {
        "id":143,
        "response":"import typing\n\ndef parabola_vertex(a: float, b: float, c: float) -> typing.Tuple[float, float]:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must not be zero for a parabola.\")\n    x = -b \/ (2 * a)\n    y = a * x * x + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[typing.Any]], N: int) -> typing.List[typing.Any]:\n    return [row[N] for row in nums if len(row) > N]"
    },
    {
        "id":145,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    bit_len = n.bit_length()\n    mask = 0\n    for i in range(1, bit_len, 2):\n        mask |= 1 << i\n    return n ^ mask"
    },
    {
        "id":146,
        "response":"import typing\n\ndef tuple_int_str(tuple_str: typing.Tuple) -> typing.Tuple:\n    return tuple(\n        tuple(int(item) for item in inner) if isinstance(inner, tuple) else int(inner)\n        for inner in tuple_str\n    )"
    },
    {
        "id":147,
        "response":"import typing\n\ndef encode_list(list1: typing.List[typing.Any]) -> typing.List[typing.List[typing.Any]]:\n    if not list1:\n        return []\n    result = []\n    count = 1\n    prev = list1[0]\n    for item in list1[1:]:\n        if item == prev:\n            count += 1\n        else:\n            result.append([count, prev])\n            prev = item\n            count = 1\n    result.append([count, prev])\n    return result"
    },
    {
        "id":148,
        "response":"import typing\n\ndef min_Ops(arr: typing.List[int], n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    sorted_arr = sorted(arr)\n    median = sorted_arr[n \/\/ 2] if n % 2 == 1 else sorted_arr[(n \/\/ 2) - 1]\n    return sum(abs(x - median) for x in arr)"
    },
    {
        "id":149,
        "response":"import re\n\ndef month_season(month, days):\n    month = month.strip().lower()\n    seasons = {\n        'january': 'winter',\n        'february': 'winter',\n        'march': 'spring',\n        'april': 'spring',\n        'may': 'spring',\n        'june': 'summer',\n        'july': 'summer',\n        'august': 'summer',\n        'september': 'autumn',\n        'october': 'autumn',\n        'november': 'autumn',\n        'december': 'winter'\n    }\n    return seasons.get(month, '')"
    },
    {
        "id":150,
        "response":"import typing\n\ndef extended_gcd(a: int, b: int) -> typing.Tuple[int, int, int]:\n    if b == 0:\n        return a, 1, 0\n    g, x1, y1 = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a \/\/ b) * y1\n    return g, x, y\n\ndef solution(a: int, b: int, n: int) -> typing.Tuple[str, int, str, int]:\n    if a == 0 and b == 0:\n        raise ValueError(\"No solution exists\")\n    if a == 0:\n        if n % b != 0:\n            raise ValueError(\"No integer solution\")\n        y = n \/\/ b\n        x = 0\n        return ('x = ', x, ', y = ', y)\n    if b == 0:\n        if n % a != 0:\n            raise ValueError(\"No integer solution\")\n        x = n \/\/ a\n        y = 0\n        return ('x = ', x, ', y = ', y)\n    g, x0, y0 = extended_gcd(abs(a), abs(b))\n    if n % g != 0:\n        raise ValueError(\"No integer solution\")\n    mult = n \/\/ g\n    x = x0 * mult * (1 if a > 0 else -1)\n    y = y0 * mult * (1 if b > 0 else -1)\n    return ('x = ', x, ', y = ', y)"
    },
    {
        "id":151,
        "response":"import typing\n\ndef remove_elements(list1: typing.List[int], list2: typing.List[int]) -> typing.List[int]:\n    remove_set = set(list2)\n    return [item for item in list1 if item not in remove_set]"
    },
    {
        "id":152,
        "response":"import typing\n\ndef sum_series(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    if s < 3 or l <= 0:\n        return 0.0\n    return (s * l * l) \/ (4 * math.tan(math.pi \/ s))"
    },
    {
        "id":154,
        "response":"import math\n\ndef divSum(a, b):\n    def sum_divisors(n):\n        if n <= 0:\n            return 0\n        total = 0\n        limit = int(math.isqrt(n))\n        for i in range(1, limit + 1):\n            if n % i == 0:\n                total += i\n                j = n \/\/ i\n                if j != i:\n                    total += j\n        return total\n    return sum_divisors(a) == sum_divisors(b)"
    },
    {
        "id":155,
        "response":"import string\n\ndef count_char_position(str1):\n    count = 0\n    for i, ch in enumerate(str1):\n        if ch.isalpha():\n            if (ord(ch.lower()) - ord('a') + 1) == i + 1:\n                count += 1\n    return count"
    },
    {
        "id":156,
        "response":"import math\nfrom typing import List\n\ndef find_even_Pair(A: List[int], N: int) -> int:\n    even = 0\n    odd = 0\n    for num in A:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n    return even * (even - 1) \/\/ 2 + odd * (odd - 1) \/\/ 2"
    },
    {
        "id":157,
        "response":"import math\n\ndef next_Power_Of_2(n):\n    if n <= 1:\n        return 1\n    return 1 << (n - 1).bit_length()"
    },
    {
        "id":158,
        "response":"import typing\n\ndef frequency(a: typing.List[int], x: int) -> int:\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "id":159,
        "response":"def get_pell(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, 2 * b + a\n    return a"
    },
    {
        "id":160,
        "response":"import typing\n\ndef sum_range_list(list1: typing.List[int], m: int, n: int) -> int:\n    if not list1:\n        return 0\n    start = max(0, m)\n    end = min(len(list1) - 1, n)\n    if start > end:\n        return 0\n    return sum(list1[start:end + 1])"
    },
    {
        "id":161,
        "response":"from typing import Union\n\ndef perimeter_pentagon(a: Union[int, float]) -> Union[int, float]:\n    return a * 5"
    },
    {
        "id":162,
        "response":"import re\n\ndef count_occurance(s):\n    return s.count('std')"
    },
    {
        "id":163,
        "response":"import re\n\ndef remove_splchar(text):\n    return re.sub(r'[^A-Za-z0-9]', '', text)"
    },
    {
        "id":164,
        "response":"import collections\n\ndef group_keyvalue(pairs):\n    result = collections.defaultdict(list)\n    for key, value in pairs:\n        result[key].append(value)\n    return dict(result)"
    },
    {
        "id":165,
        "response":"import typing\n\ndef is_valid_parenthese(str1: str) -> bool:\n    stack: list[str] = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for ch in str1:\n        if ch in mapping.values():\n            stack.append(ch)\n        elif ch in mapping:\n            if not stack or stack[-1] != mapping[ch]:\n                return False\n            stack.pop()\n        else:\n            continue\n    return not stack"
    },
    {
        "id":166,
        "response":"def perimeter_triangle(a, b, c):\n    return a + b + c"
    },
    {
        "id":167,
        "response":""
    },
    {
        "id":168,
        "response":"import typing\n\ndef string_literals(patterns: typing.List[str], text: str) -> str:\n    for pat in patterns:\n        if pat in text:\n            return \"Matched!\"\n    return \"Not Matched!\""
    },
    {
        "id":169,
        "response":""
    },
    {
        "id":170,
        "response":""
    },
    {
        "id":171,
        "response":"import typing\n\ndef common_prefix_util(strings: typing.List[str], n: int) -> str:\n    if n == 0 or not strings:\n        return ''\n    if n > len(strings):\n        n = len(strings)\n    prefix = strings[0]\n    for i in range(1, n):\n        s = strings[i]\n        j = 0\n        while j < len(prefix) and j < len(s) and prefix[j] == s[j]:\n            j += 1\n        prefix = prefix[:j]\n        if not prefix:\n            break\n    return prefix"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string):\n    upper = re.findall(r'[A-Z]', string)\n    lower = re.findall(r'[a-z]', string)\n    digit = re.findall(r'\\d', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return (upper, lower, special, digit)"
    },
    {
        "id":173,
        "response":"import typing\n\ndef count_pairs(arr: typing.List[int], n: int, k: int) -> int:\n    num_set = set(arr)\n    count = 0\n    for num in num_set:\n        if num + k in num_set:\n            count += 1\n    return count"
    },
    {
        "id":174,
        "response":"import typing\n\ndef greater_specificnum(lst: typing.List[float], num: float) -> bool:\n    return any(x > num for x in lst)"
    },
    {
        "id":175,
        "response":"import typing\n\ndef parabola_focus(a: float, b: float, c: float) -> typing.Tuple[float, float]:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero for a parabola.\")\n    h = -b \/ (2 * a)\n    k = c - (b * b) \/ (4 * a)\n    focus_y = k + 1 \/ (4 * a)\n    return (h, focus_y)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    escaped = [re.escape(p) for p in patterns]\n    pattern = '|'.join(escaped)\n    return 'Matched!' if re.search(pattern, text) else 'Not Matched!'"
    },
    {
        "id":177,
        "response":"import sys\n\ndef longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        xi = X[i - 1]\n        row = dp[i]\n        prev_row = dp[i - 1]\n        for j in range(1, n + 1):\n            if xi == Y[j - 1]:\n                row[j] = prev_row[j - 1] + 1\n            else:\n                row[j] = row[j - 1] if row[j - 1] > prev_row[j] else prev_row[j]\n    return dp[m][n]"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    if n < 4:\n        return False\n    r = math.isqrt(n)\n    if r * r != n:\n        return False\n    if r < 2:\n        return False\n    if r == 2 or r == 3:\n        return False\n    limit = int(math.isqrt(r)) + 1\n"
    },
    {
        "id":179,
        "response":"import typing\n\ndef first_Missing_Positive(arr: typing.List[int], n: int) -> int:\n    length = n if n is not None else len(arr)\n    for i in range(length):\n        while 1 <= arr[i] <= length and arr[arr[i] - 1] != arr[i]:\n            correct_idx = arr[i] - 1\n            arr[i], arr[correct_idx] = arr[correct_idx], arr[i]\n    for i in range(length):\n        if arr[i] != i + 1:\n            return i + 1\n    return length + 1"
    },
    {
        "id":180,
        "response":"import math\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    side = abs(x2 - x1)\n    inner = max(0, side - 1)\n    return inner * inner"
    },
    {
        "id":181,
        "response":"import re\n\ndef check_monthnumber(monthname3):\n    if not isinstance(monthname3, str):\n        return False\n    month = monthname3.strip().lower()\n    return month in {\"september\", \"april\", \"june\", \"november\"}"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(s: str) -> bool:\n    has_alpha = any(c.isalpha() for c in s)\n    has_digit = any(c.isdigit() for c in s)\n    return has_alpha and has_digit"
    },
    {
        "id":183,
        "response":"import typing\n\ndef remove_tuple(test_tup: tuple) -> tuple:\n    return tuple(sorted(set(test_tup)))"
    },
    {
        "id":184,
        "response":"def octal_To_Decimal(n):\n    sign = -1 if n < 0 else 1\n    n = abs(n)\n    decimal = 0\n    power = 0\n    while n > 0:\n        digit = n % 10\n        if digit >= 8:\n            raise ValueError(\"Invalid octal digit\")\n        decimal += digit * (8 ** power)\n        n \/\/= 10\n        power += 1\n    return sign * decimal"
    },
    {
        "id":185,
        "response":"import typing\n\ndef first(arr: list[int], x: int, n: int) -> int:\n    low = 0\n    high = n\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "id":186,
        "response":"import typing\n\ndef remove_tuples(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    return [t for t in test_list if not (isinstance(t, tuple) and len(t) == K)]"
    },
    {
        "id":187,
        "response":"import typing\n\ndef find_exponentio(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(pow(a, b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\n\ndef largest_triangle(a, b):\n    if a <= 0 or b <= 0:\n        return 0.0\n    return (3 * math.sqrt(3) \/ 4) * a * b"
    },
    {
        "id":189,
        "response":"import typing\n\ndef highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":190,
        "response":"import typing\n\ndef position_max(list1: typing.List[int]) -> typing.List[int]:\n    if not list1:\n        return []\n    max_val = max(list1)\n    return [i for i, v in enumerate(list1) if v == max_val]"
    },
    {
        "id":191,
        "response":"import typing\n\ndef chkList(lst: typing.List[typing.Any]) -> bool:\n    if not lst:\n        return True\n    first = lst[0]\n    for item in lst:\n        if item != first:\n            return False\n    return True"
    },
    {
        "id":192,
        "response":"import re\ndef remove_even(str1):\n    return str1[::2]"
    },
    {
        "id":193,
        "response":"def hamming_Distance(n1, n2):\n    return bin(n1 ^ n2).count('1')"
    },
    {
        "id":194,
        "response":"import typing\n\ndef count(s: str, c: str) -> int:\n    return s.count(c)"
    },
    {
        "id":195,
        "response":""
    },
    {
        "id":196,
        "response":""
    },
    {
        "id":197,
        "response":"import typing\n\ndef find_longest_repeating_subseq(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        ci = s[i - 1]\n        for j in range(1, n + 1):\n            if ci == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] if dp[i - 1][j] >= dp[i][j - 1] else dp[i][j - 1]\n    return dp[n][n]"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = r'^[+-]?\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, num))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    heapq.heapify(heap)\n    if heap:\n        heapq.heapreplace(heap, a)\n    else:\n        heapq.heappush(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[0-9A-Fa-f]+', string))"
    },
    {
        "id":201,
        "response":""
    },
    {
        "id":202,
        "response":"import typing\n\ndef fourth_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    total = 0\n    i = 1\n    while i <= n:\n        total += i * i * i * i\n        i += 1\n    return total"
    },
    {
        "id":203,
        "response":"import typing\n\ndef concatenate_strings(test_tup1: typing.Tuple[str, ...], test_tup2: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    return radian * 180.0 \/ math.pi"
    },
    {
        "id":205,
        "response":"import typing\n\ndef decode_list(alist: typing.List[typing.Any]) -> typing.List:\n    result = []\n    for item in alist:\n        if isinstance(item, (list, tuple)) and len(item) == 2:\n            count, value = item\n            if isinstance(count, int) and count > 0:\n                result.extend([value] * count)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":206,
        "response":""
    },
    {
        "id":207,
        "response":"import typing\n\ndef first_Repeated_Char(s: str) -> typing.Optional[str]:\n    seen = set()\n    for ch in s:\n        if ch in seen:\n            return ch\n        seen.add(ch)\n    return None"
    },
    {
        "id":208,
        "response":""
    },
    {
        "id":209,
        "response":"import itertools\n\ndef extract_min_max(test_tup, K):\n    sorted_vals = sorted(test_tup)\n    n = len(sorted_vals)\n    k = min(K, n)\n    smallest = sorted_vals[:k]\n    largest = sorted_vals[-k:] if k > 0 else []\n    result = sorted(smallest + largest)\n    return tuple(result)"
    },
    {
        "id":210,
        "response":"import re\n\ndef replace_max_specialchar(text, n):\n    if n <= 0:\n        return text\n    special = {' ', ',', '.'}\n    result = []\n    count = n\n    for ch in text:\n        if ch in special and count > 0:\n            result.append(':')\n            count -= 1\n        else:\n            result.append(ch)\n    return ''.join(result)"
    },
    {
        "id":211,
        "response":"import typing\n\ndef first_even(nums: typing.List[int]) -> typing.Optional[int]:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
    },
    {
        "id":212,
        "response":"import typing\n\ndef check_type(test_tuple: tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all(type(item) == first_type for item in test_tuple)"
    },
    {
        "id":213,
        "response":"import bisect\n\ndef is_majority(arr, n, x):\n    if n == 0:\n        return False\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    return (right - left) > n \/\/ 2"
    },
    {
        "id":214,
        "response":"import typing\n\ndef count_Set_Bits(n: int) -> int:\n    if n < 0:\n        n = n & ((1 << (n.bit_length() + 1)) - 1)\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count"
    },
    {
        "id":215,
        "response":"import typing\n\ndef find_Min(arr: typing.List[int], low: int, high: int) -> int:\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":216,
        "response":"import typing\n\ndef odd_values_string(s: str) -> str:\n    if not isinstance(s, str):\n        return ''\n    return s[::2]"
    },
    {
        "id":217,
        "response":"import typing\n\ndef min_of_three(a: typing.Any, b: typing.Any, c: typing.Any):\n    return a if a <= b and a <= c else (b if b <= c else c)"
    },
    {
        "id":218,
        "response":""
    },
    {
        "id":219,
        "response":"import typing\n\ndef re_arrange_array(arr: typing.List[int], n: int) -> typing.List[int]:\n    i = -1\n    for j in range(n):\n        if arr[j] < 0:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr"
    },
    {
        "id":220,
        "response":"def replace_blank(str1, char):\n    return str1.replace(' ', char)"
    },
    {
        "id":221,
        "response":"import typing\n\ndef max_sum(tri: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0:\n        return 0\n    dp = [row[:] for row in tri]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] = tri[i][j] + max(dp[i + 1][j], dp[i + 1][j + 1])\n    return dp[0][0]"
    },
    {
        "id":222,
        "response":"import heapq\n\ndef larg_nnum(list1, n):\n    if n <= 0:\n        return []\n    return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":"def lateralsuface_cylinder(r, h):\n    pi = 3.1415\n    return 2 * pi * r * h"
    },
    {
        "id":224,
        "response":"def volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":"import typing\n\ndef even_bit_set_number(n: int) -> int:\n    mask = 0\n    for i in range(1, n.bit_length() + 1, 2):\n        mask |= 1 << i\n    return n | mask"
    },
    {
        "id":226,
        "response":""
    },
    {
        "id":227,
        "response":""
    },
    {
        "id":228,
        "response":"import typing\n\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) \/\/ 2"
    },
    {
        "id":229,
        "response":""
    },
    {
        "id":230,
        "response":"import typing\n\ndef replace_list(list1: typing.List, list2: typing.List) -> typing.List:\n    if not list1:\n        return list2.copy()\n    return list1[:-1] + list2"
    },
    {
        "id":231,
        "response":"import typing\n\ndef array_3d(m: int, n: int, o: int) -> typing.List[typing.List[typing.List[str]]]:\n    return [[['*' for _ in range(m)] for _ in range(n)] for _ in range(o)]"
    },
    {
        "id":232,
        "response":"def count_charac(str1):\n    return len(str1)"
    },
    {
        "id":233,
        "response":"import itertools\n\ndef sort_on_occurence(lst):\n    if not lst:\n        return []\n    groups = {}\n    order = []\n    for item in lst:\n        key = item[0]\n        val = item[1] if len(item) > 1 else None\n        if key not in groups:\n            groups[key] = [[], 0]\n            order.append(key)\n        groups[key][0].append(val)\n        groups[key][1] += 1\n    result = []\n    for key in order:\n        values, count = groups[key]\n        result.append(tuple([key] + values + [count]))\n    return result"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    if N < 0:\n        return 0\n    k = math.isqrt(N)\n    if k * k > N:\n        return k * k\n    return (k + 1) * (k + 1)"
    },
    {
        "id":235,
        "response":"import typing\n\ndef max_sum(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    a = arr[:n]\n    inc = a.copy()\n    dec = a.copy()\n    for i in range(n):\n        for j in range(i):\n            if a[j] < a[i] and inc[j] + a[i] > inc[i]:\n                inc[i] = inc[j] + a[i]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if a[j] < a[i] and dec[j] + a[i] > dec[i]:\n                dec[i] = dec[j] + a[i]\n    max_sum_val = 0\n    for i in range(n):\n        current = inc[i] + dec[i] - a[i]\n        if current > max_sum_val:\n            max_sum_val = current\n    return max_sum_val"
    },
    {
        "id":236,
        "response":"import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    if number == 0:\n        return 0.0\n    guess = number \/ 2.0 if number >= 1 else 1.0\n    epsilon = 1e-15\n    while True:\n        new_guess = (guess + number \/ guess) \/ 2.0\n        if abs(new_guess - guess) < epsilon:\n            return new_guess\n        guess = new_guess"
    },
    {
        "id":237,
        "response":""
    },
    {
        "id":238,
        "response":"import typing\n\ndef harmonic_sum(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    total = 0.0\n    for i in range(1, n + 1):\n        total += 1.0 \/ i\n    return total"
    },
    {
        "id":239,
        "response":"import typing\n\ndef intersection_array(array_nums1: typing.List[int], array_nums2: typing.List[int]) -> typing.List[int]:\n    set2 = set(array_nums2)\n    return list(filter(lambda x: x in set2, array_nums1))"
    },
    {
        "id":240,
        "response":"def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "id":241,
        "response":"import typing\n\ndef insert_element(lst: typing.List[typing.Any], element: typing.Any) -> typing.List[typing.Any]:\n    result: typing.List[typing.Any] = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "id":242,
        "response":"import typing\n\ndef convert(number: typing.Union[int, float, complex]) -> tuple[float, float]:\n    if isinstance(number, complex):\n        real = float(number.real)\n        imag = float(number.imag)\n    elif isinstance(number, (int, float)):\n        real = float(number)\n        imag = 0.0\n    else:\n        raise TypeError(\"Unsupported type\")\n    return (real, imag)"
    },
    {
        "id":243,
        "response":"def count_integer(list1):\n    return sum(1 for x in list1 if isinstance(x, int) and not isinstance(x, bool))"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text):\n    result = []\n    for word in re.split(r'\\s+', text.strip()):\n        lower_word = word.lower()\n        idx_a = lower_word.find('a')\n        idx_e = lower_word.find('e')\n        idx = -1\n        if idx_a != -1 and idx_e != -1:\n            idx = idx_a if idx_a < idx_e else idx_e\n        elif idx_a != -1:\n            idx = idx_a\n        elif idx_e != -1:\n            idx = idx_e\n        if idx != -1:\n            result.append(word[idx:])\n    return result"
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    if n <= 0:\n        return []\n    return list(itertools.combinations_with_replacement(l, n))"
    },
    {
        "id":246,
        "response":"import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    sieve = bytearray(b'\\x01') * n\n    sieve[0:2] = b'\\x00\\x00'\n    limit = int(math.isqrt(n - 1)) + 1\n    for i in range(2, limit):\n        if sieve[i]:\n            step = i\n            start = i * i\n            sieve[start:n:step] = b'\\x00' * ((n - start - 1) \/\/ step + 1)\n    return sum(sieve)"
    },
    {
        "id":247,
        "response":"def swap_numbers(a, b):\n    return b, a"
    },
    {
        "id":248,
        "response":"import typing\n\ndef count_odd(array_nums: typing.List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))"
    },
    {
        "id":249,
        "response":"import typing\n\ndef maximize_elements(test_tup1: typing.Tuple[typing.Tuple[int, ...], ...],\n                      test_tup2: typing.Tuple[typing.Tuple[int, ...], ...]) -> typing.Tuple[typing.Tuple[int, ...], ...]:\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        max_pair = tuple(max(x, y) for x, y in zip(a, b))\n        result.append(max_pair)\n    return tuple(result)"
    },
    {
        "id":250,
        "response":"import typing\n\ndef newman_prime(n: int) -> int:\n    if n <= 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b"
    },
    {
        "id":251,
        "response":"import typing\n\ndef division_elements(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(a \/\/ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":252,
        "response":"import typing\n\ndef split_two_parts(list1: typing.List[typing.Any], L: int) -> typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]:\n    if L < 0:\n        L = 0\n    if L > len(list1):\n        L = len(list1)\n    return list1[:L], list1[L:]"
    },
    {
        "id":253,
        "response":"import copy\n\ndef merge_dict(d1, d2):\n    result = copy.deepcopy(d1)\n    result.update(d2)\n    return result"
    },
    {
        "id":254,
        "response":"import math\n\ndef dog_age(h_age):\n    if h_age <= 0:\n        return 0\n    if h_age <= 2:\n        result = h_age * 10.5\n    else:\n        result = 21 + (h_age - 2) * 4\n    if isinstance(result, float) and result.is_integer():\n        return int(result)\n    return result"
    },
    {
        "id":255,
        "response":"import itertools\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        return []\n    result = []\n    for i in range(step):\n        sub = S[i::step]\n        if sub:\n            result.append(sub)\n    return result"
    },
    {
        "id":256,
        "response":"def lateralsurface_cube(l):\n    return 4 * l * l"
    },
    {
        "id":257,
        "response":"import typing\n\ndef square_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    total = 0\n    odd = 1\n    for _ in range(n):\n        total += odd * odd\n        odd += 2\n    return total"
    },
    {
        "id":258,
        "response":"def find_star_num(n):\n    return 6 * n * (n - 1) + 1"
    },
    {
        "id":259,
        "response":"import sys\n\ndef ascii_value(k):\n    return ord(k)"
    },
    {
        "id":260,
        "response":"import typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    total = 0\n    limit = min(n, len(arr))\n    for i in range(0, limit, 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "id":261,
        "response":"def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += (2 * i) ** 5\n    return total"
    },
    {
        "id":262,
        "response":"import typing\n\ndef rear_extract(test_list: typing.List[typing.Tuple]) -> typing.List:\n    return [t[-1] for t in test_list]"
    },
    {
        "id":263,
        "response":"import typing\n\ndef substract_elements(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"import math\n\ndef even_binomial_Coeff_Sum(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return 1\n    return 1 << (n - 1)"
    },
    {
        "id":265,
        "response":"import typing\n\ndef get_Position(a: typing.List[int], n: int, m: int) -> int:\n    if m <= 0:\n        return -1\n    if m > n:\n        return 1\n"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    return 3.1415 * r * r * h"
    },
    {
        "id":267,
        "response":"import typing\n\ndef dict_filter(dict: typing.Dict[typing.Any, int], n: int) -> typing.Dict[typing.Any, int]:\n    return {k: v for k, v in dict.items() if v > n}"
    },
    {
        "id":268,
        "response":"import typing\n\ndef count_first_elements(test_tup: tuple) -> int:\n    for idx, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return idx\n    return len(test_tup)"
    },
    {
        "id":269,
        "response":"import typing\n\ndef is_num_decagonal(n: int) -> int:\n    return 4 * n * n - 3 * n"
    },
    {
        "id":270,
        "response":"import typing\n\ndef sequential_search(dlist: typing.List[int], item: int) -> typing.Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "id":271,
        "response":"import typing\n\ndef all_unique(test_list: typing.List[typing.Any]) -> bool:\n    return len(test_list) == len(set(test_list))"
    },
    {
        "id":272,
        "response":"import itertools\n\ndef sub_list(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))"
    },
    {
        "id":273,
        "response":"import collections\n\ndef validate(n):\n    n = abs(int(n))\n    s = str(n)\n    cnt = collections.Counter(s)\n    for digit_char, freq in cnt.items():\n        digit = int(digit_char)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"import typing\n\ndef check_element(lst: typing.List[str], element: str) -> bool:\n    for item in lst:\n        if item != element:\n            return False\n    return True"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    match = re.search(r'ab{2,3}', text)\n    return match.group(0) if match else 'Not matched!'"
    },
    {
        "id":276,
        "response":"import sys\n\ndef max_sub_array_sum_repeated(a, n, k):\n    if n == 0 or k == 0:\n        return 0\n    max_ending_here = max_so_far = a[0]\n    max_prefix = cur = a[0]\n    for x in a[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n        cur += x\n        max_prefix = max(max_prefix, cur)\n    total_sum = sum(a)\n    max_suffix = cur = a[-1]\n    for x in reversed(a[:-1]):\n        cur += x\n        max_suffix = max(max_suffix, cur)\n    if k == 1:\n        return max_so_far\n    if total_sum > 0:\n        return max(max_so_far, max_suffix + (k - 2) * total_sum + max_prefix)\n    else:\n        return max(max_so_far, max_suffix + max_prefix)"
    },
    {
        "id":277,
        "response":"def square_Sum(n):\n    if n <= 0:\n        return 0\n    return (2 * n * (n + 1) * (2 * n + 1)) \/\/ 3"
    },
    {
        "id":278,
        "response":"import typing\n\ndef modular_inverse(arr: typing.List[int], N: int, P: int) -> int:\n    count = 0\n    limit = min(N, len(arr))\n    mod_self = {1, (P - 1) % P}\n    for i in range(limit):\n        if arr[i] % P in mod_self:\n            count += 1\n    return count"
    },
    {
        "id":279,
        "response":"import sys\n\ndef odd_Days(N: int) -> int:\n    if N <= 0:\n        return 0\n    leap_years = N \/\/ 4 - N \/\/ 100 + N \/\/ 400\n    total_days = N * 365 + leap_years\n    return total_days % 7"
    },
    {
        "id":280,
        "response":"import typing\n\ndef max_length(list_of_lists: typing.List[typing.List[typing.Any]]) -> typing.Tuple[int, typing.List[typing.Any]]:\n    if not list_of_lists:\n        return (0, [])\n    max_len = -1\n    max_list = []\n    for sublist in list_of_lists:\n        current_len = len(sublist)\n        if current_len > max_len:\n            max_len = current_len\n            max_list = sublist\n    return (max_len, max_list)"
    },
    {
        "id":281,
        "response":"import typing\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n <= 0 or k <= 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    total_prev = k * k          # total for i-1 (i=2)\n    total_prev2 = k             # total for i-2 (i=1)\n    for _ in range(3, n + 1):\n        total_curr = (k - 1) * (total_prev + total_prev2)\n        total_prev2, total_prev = total_prev, total_curr\n    return total_prev"
    },
    {
        "id":282,
        "response":"def find(n, m):\n    if m == 0:\n        return None\n    return n \/\/ m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w * w + h * h)"
    },
    {
        "id":284,
        "response":"import numbers\n\ndef max_val(listval):\n    max_num = None\n    for item in listval:\n        if isinstance(item, numbers.Number) and not isinstance(item, bool):\n            if max_num is None or item > max_num:\n                max_num = item\n    return max_num"
    },
    {
        "id":285,
        "response":"import math\n\ndef sum_div(number):\n    if number <= 1:\n        return 0\n    total = 0\n    limit = int(math.isqrt(number))\n    for i in range(1, limit + 1):\n        if number % i == 0:\n            d1 = i\n            d2 = number \/\/ i\n            if d1 != number:\n                total += d1\n            if d2 != number and d2 != d1:\n                total += d2\n    return total"
    },
    {
        "id":286,
        "response":"import typing\n\ndef get_Inv_Count(arr: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n\n    def merge_sort(nums):\n        if len(nums) <= 1:\n            return nums, 0\n        mid = len(nums) \/\/ 2\n        left, inv_left = merge_sort(nums[:mid])\n        right, inv_right = merge_sort(nums[mid:])\n        merged = []\n        i = j = 0\n        inv_count = inv_left + inv_right\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    _, total_inv = merge_sort(arr[:n])\n    return total_inv"
    },
    {
        "id":287,
        "response":"import typing\n\ndef flatten_list(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result = []\n    stack = list(reversed(list1))\n    while stack:\n        item = stack.pop()\n        if isinstance(item, list):\n            stack.extend(reversed(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":288,
        "response":"import typing\n\ndef intersection_nested_lists(l1: typing.List[int], l2: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    set_l1 = set(l1)\n    result: typing.List[typing.List[int]] = []\n    for sublist in l2:\n        intersect = [item for item in sublist if item in set_l1]\n        if intersect:\n            result.append(intersect)\n    return result"
    },
    {
        "id":289,
        "response":"import collections\n\ndef max_aggregate(stdata):\n    if not stdata:\n        return None\n    totals = collections.defaultdict(int)\n    for name, value in stdata:\n        totals[name] += value\n    max_name = None\n    max_sum = None\n    for name, total in totals.items():\n        if max_sum is None or total > max_sum:\n            max_sum = total\n            max_name = name\n    return (max_name, max_sum)"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    return float(math.comb(2 * n, n))"
    },
    {
        "id":291,
        "response":"import collections\n\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 1\n    stack = [(d, 1)]\n    while stack:\n        current, depth = stack.pop()\n        for v in current.values():\n            if isinstance(v, dict):\n                nd = depth + 1\n                if nd > max_depth:\n                    max_depth = nd\n                stack.append((v, nd))\n    return max_depth"
    },
    {
        "id":292,
        "response":"import typing\n\ndef set_Bit_Number(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":293,
        "response":"import typing\n\ndef solve(a: typing.List[int], n: int) -> bool:\n    length = min(len(a), n)\n    seq1 = [a[i] for i in range(length - 1, -1, -1)]\n    seq2 = list(reversed(a[:length]))\n    return seq1 == seq2"
    },
    {
        "id":294,
        "response":""
    },
    {
        "id":295,
        "response":"import re\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for phrase in words:\n        for word in re.split(r'\\s+', phrase.strip()):\n            if word and word[0].lower() == 'p':\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"
    },
    {
        "id":296,
        "response":"import typing\n\ndef max_sum_increasing_subseq(a: typing.List[int], n: int, index: int, k: int) -> int:\n    if not a or n == 0 or k >= n or index >= k:\n        return 0\n    dp = [0] * (index + 1)\n    for i in range(index + 1):\n        max_sum = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp[j] + a[i] > max_sum:\n                max_sum = dp[j] + a[i]\n        dp[i] = max_sum\n    result = a[k]\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            candidate = dp[i] + a[k]\n            if candidate > result:\n                result = candidate\n    return result"
    },
    {
        "id":297,
        "response":"import typing\n\ndef colon_tuplex(tuplex: tuple, m: int, n) -> tuple:\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"First argument must be a tuple\")\n    if m < 0 or m >= len(tuplex):\n        raise IndexError(\"Index out of range\")\n    lst = list(tuplex)\n    elem = lst[m]\n    if isinstance(elem, list):\n        lst[m] = elem + [n]\n    else:\n        lst[m] = n\n    return tuple(lst)"
    },
    {
        "id":298,
        "response":"import itertools\n\ndef large_product(nums1, nums2, N):\n    if not nums1 or not nums2 or N <= 0:\n        return []\n    products = {a * b for a, b in itertools.product(nums1, nums2)}\n    sorted_products = sorted(products, reverse=True)\n    return sorted_products[:N]"
    },
    {
        "id":299,
        "response":"def maximum(a, b):\n    return a if a >= b else b"
    },
    {
        "id":300,
        "response":"import re\n\ndef string_to_tuple(str1):\n    return tuple(ch for ch in str1 if not ch.isspace())"
    },
    {
        "id":301,
        "response":"import typing\n\ndef set_left_most_unset_bit(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Only non\u2011negative integers are supported\")\n    max_pos = n.bit_length()\n    for i in range(max_pos, -1, -1):\n        if not (n >> i) & 1:\n            return n | (1 << i)\n    return n  # fallback, should never reach here"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    return (1.0 \/ 3.0) * math.pi * r * r * h"
    },
    {
        "id":303,
        "response":"def pos_nos(list1):\n    return tuple(x for x in list1 if x > 0)"
    },
    {
        "id":304,
        "response":"import typing\n\ndef max_sum_rectangular_grid(grid: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0 or not grid or not grid[0]:\n        return 0\n    top_row = grid[0]\n    bottom_row = grid[1]\n    dp0 = 0\n    dp_top = top_row[0]\n    dp_bottom = bottom_row[0]\n    for i in range(1, n):\n        new_dp0 = max(dp0, dp_top, dp_bottom)\n        new_dp_top = max(dp0, dp_bottom) + top_row[i]\n        new_dp_bottom = max(dp0, dp_top) + bottom_row[i]\n        dp0, dp_top, dp_bottom = new_dp0, new_dp_top, new_dp_bottom\n    return max(dp0, dp_top, dp_bottom)"
    },
    {
        "id":305,
        "response":"import re\n\ndef find_Max_Len_Even(s):\n    max_len = -1\n    result = \"\"\n    for word in re.split(r'\\s+', s.strip()):\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                result = word\n    return result"
    },
    {
        "id":306,
        "response":"import typing\n\ndef find_last_occurrence(A: typing.List[int], x: int) -> int:\n    lo, hi = 0, len(A) - 1\n    result = -1\n    while lo <= hi:\n        mid = (lo + hi) \/\/ 2\n        if A[mid] == x:\n            result = mid\n            lo = mid + 1\n        elif A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return result"
    },
    {
        "id":307,
        "response":"import typing\n\ndef modified_encode(alist: typing.List[int]) -> typing.List[typing.Union[int, typing.List[int]]]:\n    if not alist:\n        return []\n    result = []\n    prev = alist[0]\n    count = 1\n    for item in alist[1:]:\n        if item == prev:\n            count += 1\n        else:\n            result.append([count, prev] if count > 1 else prev)\n            prev = item\n            count = 1\n    result.append([count, prev] if count > 1 else prev)\n    return result"
    },
    {
        "id":308,
        "response":"import typing\n\ndef max_volume(s: int) -> int:\n    if s < 3:\n        return 0\n    q, r = divmod(s, 3)\n    if r == 0:\n        return q * q * q\n    if r == 1:\n        return (q + 1) * q * q\n    return (q + 1) * (q + 1) * q"
    },
    {
        "id":309,
        "response":"import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b[A-Za-z]{5}\\b', text)"
    },
    {
        "id":310,
        "response":"import typing\n\ndef sum_difference(n: int) -> int:\n    total = n * (n + 1) \/\/ 2\n    sum_sq = n * (n + 1) * (2 * n + 1) \/\/ 6\n    return total * total - sum_sq"
    },
    {
        "id":311,
        "response":"import typing\n\ndef find_demlo(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return ''\n    asc = ''.join(str(i) for i in range(1, n + 1))\n    desc = ''.join(str(i) for i in range(n - 1, 0, -1))\n    return asc + desc"
    },
    {
        "id":312,
        "response":"import typing\n\ndef position_min(list1: typing.List[int]) -> typing.List[int]:\n    if not list1:\n        return []\n    min_val = min(list1)\n    return [i for i, v in enumerate(list1) if v == min_val]"
    },
    {
        "id":313,
        "response":"import typing\n\ndef right_rotate(arr: typing.List[int], n: int) -> typing.List[int]:\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place == -1:\n            if (arr[index] < 0 and (index % 2 == 1)) or (arr[index] >= 0 and (index % 2 == 0)):\n                out_of_place = index\n        else:\n            if (arr[out_of_place] < 0 and arr[index] >= 0) or (arr[out_of_place] >= 0 and arr[index] < 0):\n                temp = arr[index]\n                for j in range(index, out_of_place, -1):\n                    arr[j] = arr[j - 1]\n                arr[out_of_place] = temp\n                if index - out_of_place >= 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n    return arr"
    },
    {
        "id":314,
        "response":"import typing\n\ndef sum_of_alternates(test_tuple: typing.Tuple[int, ...]) -> typing.Tuple[int, int]:\n    even_sum = sum(test_tuple[0::2])\n    odd_sum = sum(test_tuple[1::2])\n    return (odd_sum, even_sum)"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n: int) -> int:\n    if n <= 0:\n        return 0\n    # Check if n is a perfect square\n    if int(math.isqrt(n)) ** 2 == n:\n        return 1\n    # Check if n can be expressed as sum of two squares\n    for i in range(1, int(math.isqrt(n)) + 1):\n        remainder = n - i * i\n        if int(math.isqrt(remainder)) ** 2 == remainder:\n            return 2\n    # Reduce n by removing factors of 4\n    m = n\n    while m % 4 == 0:\n        m \/\/= 4\n    # Check Legendre's three-square condition\n    if m % 8 == 7:\n        return 4\n    return 3"
    },
    {
        "id":316,
        "response":"import re\nfrom collections import Counter\n\ndef most_occurrences(test_list):\n    if not test_list:\n        return ''\n    words = []\n    for s in test_list:\n        words.extend(re.findall(r'\\b\\w+\\b', s))\n    if not words:\n        return ''\n    count = Counter(words)\n    max_word = max(count.items(), key=lambda x: (x[1], -ord(x[0][0]) if x[0] else 0))[0]\n    return max_word"
    },
    {
        "id":317,
        "response":"import math\n\ndef check_isosceles(x, y, z):\n    sides = sorted([x, y, z])\n    if sides[0] <= 0 or sides[1] <= 0 or sides[2] <= 0:\n        return False\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    return math.isclose(sides[0] ** 2 + sides[1] ** 2, sides[2] ** 2)"
    },
    {
        "id":318,
        "response":""
    },
    {
        "id":319,
        "response":"import typing\n\ndef neg_count(numbers: typing.List[int]) -> int:\n    count = 0\n    for num in numbers:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "id":320,
        "response":"import re\n\ndef find_char(text):\n    return re.findall(r'\\b[A-Za-z]{3,5}\\b', text)"
    },
    {
        "id":321,
        "response":"import sys\n\ndef count_unset_bits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    total_bits = n.bit_length() if n > 0 else 1\n    set_bits = n.bit_count() if hasattr(int, \"bit_count\") else bin(n).count('1')\n    return total_bits - set_bits"
    },
    {
        "id":322,
        "response":"import collections\n\ndef char_frequency(str1):\n    if not str1:\n        return {}\n    return dict(collections.Counter(str1))"
    },
    {
        "id":323,
        "response":"import typing\n\ndef Sort(sub_li):\n    return sorted(sub_li, key=lambda x: x[1])"
    },
    {
        "id":324,
        "response":"import typing\n\ndef check_Validity(a, b, c):\n    try:\n        a = float(a)\n        b = float(b)\n        c = float(c)\n    except:\n        return False\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)"
    },
    {
        "id":325,
        "response":"def ap_sum(a, n, d):\n    if n <= 0:\n        return 0\n    return n * (2 * a + (n - 1) * d) \/\/ 2"
    },
    {
        "id":326,
        "response":"import re\n\ndef check_monthnum(monthname1):\n    return monthname1.strip().lower() == \"february\""
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text):\n    if re.search(r'\\b\\w+[^\\w\\s]?\\s*$', text):\n        return 'Found a match!'\n    return 'No match!'"
    },
    {
        "id":328,
        "response":"import collections\n\ndef check_Equality(s):\n    freq = collections.Counter(s)\n    return sum(n * (n + 1) \/\/ 2 for n in freq.values())"
    },
    {
        "id":329,
        "response":"import math\n\ndef find_Divisor(x, y):\n    x, y = abs(x), abs(y)\n    while y:\n        x, y = y, x % y\n    return x"
    },
    {
        "id":330,
        "response":"import typing\n\ndef sum_three_smallest_nums(lst: typing.List[float]) -> float:\n    positives = [x for x in lst if x > 0]\n    positives.sort()\n    return sum(positives[:3])"
    },
    {
        "id":331,
        "response":"import typing\n\ndef set_to_tuple(s: set) -> tuple:\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"import heapq\nfrom typing import List, Tuple, Optional\n\ndef __init__(lists: List[List[int]]) -> Optional[Tuple[int, int]]:\n    if not lists or any(not lst for lst in lists):\n        return None\n    k = len(lists)\n    indices = [0] * k\n    heap = []\n    current_max = float('-inf')\n    for i, lst in enumerate(lists):\n        val = lst[0]\n        heap.append((val, i))\n        if val > current_max:\n            current_max = val\n    heapq.heapify(heap)\n    best_range = (float('-inf'), float('inf'))\n    while True:\n        current_min, i = heap[0]\n        if current_max - current_min < best_range[1] - best_range[0]:\n            best_range = (current_min, current_max)\n        if indices[i] + 1 == len(lists[i]):\n            break\n        indices[i] += 1\n        next_val = lists[i][indices[i]]\n        heapq.heapreplace(heap, (next_val, i))\n        if next"
    },
    {
        "id":333,
        "response":"import re\nfrom typing import Tuple\n\ndef dig_let(s: str) -> Tuple[int, int]:\n    letters = sum(1 for ch in s if ch.isalpha())\n    digits = sum(1 for ch in s if ch.isdigit())\n    return (letters, digits)"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n, m):\n    if n > m:\n        return 0\n    start = math.isqrt(n)\n    if start * start < n:\n        start += 1\n    end = math.isqrt(m)\n    return max(0, end - start + 1)"
    },
    {
        "id":335,
        "response":"import typing\n\ndef diff_consecutivenums(nums: typing.List[int]) -> typing.List[int]:\n    if len(nums) < 2:\n        return []\n    return [nums[i + 1] - nums[i] for i in range(len(nums) - 1)]"
    },
    {
        "id":336,
        "response":""
    },
    {
        "id":337,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = m if m < n else n\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n, r=None):\n    if n % 2:\n        return 0\n    k = n \/\/ 2\n    return math.comb(2 * k, k) \/\/ (k + 1)"
    },
    {
        "id":339,
        "response":"import re\n\ndef check(string):\n    if string and re.fullmatch(r'[01]+', string):\n        return \"Yes\"\n    return \"No\")"
    },
    {
        "id":340,
        "response":"import collections\n\ndef minimum_Length(s: str) -> int:\n    if not s:\n        return 0\n    freq = collections.Counter(s)\n    max_freq = max(freq.values())\n    return len(s) - max_freq"
    },
    {
        "id":341,
        "response":"import typing\n\ndef first_Element(arr: typing.List[int], n: int, k: int) -> int:\n    if k <= 0 or n == 0:\n        return -1\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    for num in arr:\n        if freq.get(num, 0) == k:\n            return num\n    return -1"
    },
    {
        "id":342,
        "response":"import typing\n\ndef unique_Characters(s: str) -> bool:\n    return len(set(s)) == len(s)"
    },
    {
        "id":343,
        "response":"import typing\n\ndef remove_column(list1: typing.List[typing.List[typing.Any]], n: int) -> typing.List[typing.List[typing.Any]]:\n    result: typing.List[typing.List[typing.Any]] = []\n    for row in list1:\n        idx = n if n >= 0 else len(row) + n\n        if 0 <= idx < len(row):\n            new_row = row[:idx] + row[idx + 1:]\n        else:\n            new_row = row[:]\n        result.append(new_row)\n    return result"
    },
    {
        "id":344,
        "response":"import typing\n\ndef tn_ap(a: int, n: int, d: int) -> int:\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"import math\n\ndef count_Rectangles(radius: int) -> int:\n    if radius <= 0:\n        return 0\n    limit = 4 * radius * radius\n    total = 0\n    max_w = int(math.isqrt(limit - 1))\n    for w in range(1, max_w + 1):\n        max_h = int(math.isqrt(limit - w * w))\n        total += max_h\n    return total"
    },
    {
        "id":346,
        "response":"def find_angle(a, b):\n    return 180 - a - b"
    },
    {
        "id":347,
        "response":"import typing\n\ndef find_max(test_list: typing.List[typing.Tuple[int, ...]]) -> typing.Optional[int]:\n    if not test_list:\n        return None\n    max_val = test_list[0][0]\n    for tup in test_list:\n        for item in tup:\n            if item > max_val:\n                max_val = item\n    return max_val"
    },
    {
        "id":348,
        "response":"def moddiv_list(nums1, nums2):\n    return list(map(lambda a, b: a % b, nums1, nums2))"
    },
    {
        "id":349,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    if 2 * b * b == 9 * a * c:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "id":350,
        "response":"import typing\n\ndef get_carol(n: int) -> int:\n    return ((1 << n) - 1) ** 2 - 2"
    },
    {
        "id":351,
        "response":"import typing\n\ndef remove_empty(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [item for item in list1 if not (isinstance(item, list) and len(item) == 0)]"
    },
    {
        "id":352,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    counts = collections.Counter(nums)\n    max_count = max(counts.values())\n    for num in nums:\n        if counts[num] == max_count:\n            return num"
    },
    {
        "id":353,
        "response":"import typing\n\ndef add_K_element(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    return [tuple(item + K for item in tpl) for tpl in test_list]"
    },
    {
        "id":354,
        "response":"import typing\n\ndef make_flip(ch: str) -> int:\n    n = len(ch)\n    flips_start_with_0 = 0\n    flips_start_with_1 = 0\n    for i, c in enumerate(ch):\n        expected_0 = '0' if i % 2 == 0 else '1'\n        expected_1 = '1' if i % 2 == 0 else '0'\n        if c != expected_0:\n            flips_start_with_0 += 1\n        if c != expected_1:\n            flips_start_with_1 += 1\n    return min(flips_start_with_0, flips_start_with_1)"
    },
    {
        "id":355,
        "response":"import math\n\ndef count_Digit(n):\n    n = abs(int(n))\n    if n == 0:\n        return 1\n    count = 0\n    while n:\n        n \/\/= 10\n        count += 1\n    return count"
    },
    {
        "id":356,
        "response":"import typing\n\ndef adjacent_num_product(list_nums: typing.List[int]) -> typing.Optional[int]:\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "id":357,
        "response":"import typing\n\nclass TreeNode:\n    def __init__(self, val: int = 0, left: 'TreeNode' = None, right: 'TreeNode' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef __init__(root: typing.Optional[TreeNode]) -> bool:\n    def check(node: typing.Optional[TreeNode]) -> int:\n        if not node:\n            return 0\n        left_h = check(node.left)\n        if left_h == -1:\n            return -1\n        right_h = check(node.right)\n        if right_h == -1:\n            return -1\n        if abs(left_h - right_h) > 1:\n            return -1\n        return max(left_h, right_h) + 1\n    return check(root) != -1"
    },
    {
        "id":358,
        "response":"def repeat_tuples(test_tup, N):\n    return (test_tup,) * N"
    },
    {
        "id":359,
        "response":"import typing\n\ndef lateralsurface_cuboid(l, w, h):\n    return 2 * (l * h + w * h)"
    },
    {
        "id":360,
        "response":"import typing\n\ndef float_sort(price: typing.Iterable[typing.Tuple[typing.Any, str]]) -> list:\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)"
    },
    {
        "id":361,
        "response":"import bisect\n\ndef smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    if not A:\n        return left_element\n    lo = left_element\n    hi = right_element\n    while lo <= hi:\n        mid = (lo + hi) \/\/ 2\n        idx = bisect.bisect_left(A, mid)\n        if idx < len(A) and A[idx] == mid:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo"
    },
    {
        "id":362,
        "response":"import heapq\n\ndef heap_assending(nums):\n    h = list(nums)\n    heapq.heapify(h)\n    return [heapq.heappop(h) for _ in range(len(h))]"
    },
    {
        "id":363,
        "response":"def volume_cuboid(l, w, h):\n    return l * w * h"
    },
    {
        "id":364,
        "response":"import itertools\n\ndef permute_string(s: str):\n    if not s:\n        return []\n    return [''.join(p) for p in itertools.permutations(s)]"
    },
    {
        "id":365,
        "response":"def round_num(n, m):\n    if m == 0:\n        return n\n    q, r = divmod(n, m)\n    if r * 2 < m:\n        return q * m\n    else:\n        return (q + 1) * m"
    },
    {
        "id":366,
        "response":"import typing\n\ndef remove_replica(test_tup: typing.Tuple) -> typing.Tuple:\n    seen = []\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append('MSP')\n        else:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":367,
        "response":"def remove_Char(s, c):\n    return s.replace(c, \"\")"
    },
    {
        "id":368,
        "response":"def move_first(test_list):\n    if not test_list:\n        return []\n    return [test_list[-1]] + test_list[:-1]"
    },
    {
        "id":369,
        "response":"def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)"
    },
    {
        "id":370,
        "response":"import typing\n\ndef multi_list(rownum: int, colnum: int) -> typing.List[typing.List[int]]:\n    return [[i * j for j in range(colnum)] for i in range(rownum)]"
    },
    {
        "id":371,
        "response":"import typing\n\ndef index_on_inner_list(list_data: typing.List[typing.Tuple], index_no: int) -> typing.List[typing.Tuple]:\n    if not list_data:\n        return []\n    try:\n        return sorted(list_data, key=lambda x: x[index_no])\n    except IndexError:\n        return list_data"
    },
    {
        "id":372,
        "response":"import typing\n\ndef find_rotation_count(A: typing.List[int]) -> int:\n    n = len(A)\n    if n == 0:\n        return 0\n    low, high = 0, n - 1\n    while low <= high:\n        if A[low] <= A[high]:\n            return low\n        mid = (low + high) \/\/ 2\n        prev_idx = (mid - 1 + n) % n\n        next_idx = (mid + 1) % n\n        if A[mid] <= A[prev_idx] and A[mid] <= A[next_idx]:\n            return mid\n        if A[mid] >= A[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0"
    },
    {
        "id":373,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    mask = 0\n    i = 0\n    limit = max(n.bit_length() + 1, 1)\n    while i < limit:\n        mask |= (1 << i)\n        i += 2\n    return n ^ mask"
    },
    {
        "id":374,
        "response":"import typing\n\ndef frequency_Of_Smallest(n: int, arr: typing.List[int]) -> int:\n    if n == 0 or not arr:\n        return 0\n    smallest = min(arr)\n    return sum(1 for x in arr if x == smallest)"
    },
    {
        "id":375,
        "response":"import functools\n\n@functools.lru_cache(maxsize=None)\ndef get_perrin(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "id":376,
        "response":"import typing\n\ndef swap_count(s: str) -> int:\n    left = 0\n    right = 0\n    imbalance = 0\n    swaps = 0\n    for ch in s:\n        if ch == '[':\n            left += 1\n            if imbalance > 0:\n                swaps += imbalance\n                imbalance -= 1\n        elif ch == ']':\n            right += 1\n            imbalance = right - left\n    return swaps"
    },
    {
        "id":377,
        "response":"import re\n\ndef even_or_odd(N):\n    digits = re.findall(r'\\d', N)\n    for d in digits:\n        if int(d) % 2 == 1:\n            return \"Odd\"\n    return \"Even\"\n"
    },
    {
        "id":378,
        "response":"import math\n\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":379,
        "response":"import typing\n\ndef find_lucas(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    a, b = 2, 1\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
    },
    {
        "id":380,
        "response":"import typing\n\ndef add_string(lst: typing.List[typing.Any], string: str) -> typing.List[str]:\n    result = []\n    for item in lst:\n        try:\n            result.append(string.format(item))\n        except Exception:\n            result.append(f\"{string}{item}\")\n    return result"
    },
    {
        "id":381,
        "response":"import typing\n\ndef convert_list_dictionary(l1: typing.List, l2: typing.List, l3: typing.List) -> typing.List:\n    length = min(len(l1), len(l2), len(l3))\n    result = []\n    for i in range(length):\n        result.append({l1[i]: {l2[i]: l3[i]}})\n    return result"
    },
    {
        "id":382,
        "response":""
    },
    {
        "id":383,
        "response":"import typing\n\ndef max_length_list(input_list: typing.List[typing.List[typing.Any]]) -> typing.Tuple[int, typing.List[typing.Any]]:\n    if not input_list:\n        return (0, [])\n    max_sub = max(input_list, key=lambda x: len(x))\n    return (len(max_sub), max_sub)"
    },
    {
        "id":384,
        "response":"import typing\n\ndef check_distinct(test_tup: tuple) -> bool:\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "id":385,
        "response":"from collections import Counter\n\ndef first_non_repeating_character(str1):\n    counts = Counter(str1)\n    for ch in str1:\n        if counts[ch] == 1:\n            return ch\n    return None"
    },
    {
        "id":386,
        "response":"import re\n\ndef check_char(string):\n    if not string:\n        return \"Invalid\"\n    return \"Valid\" if string[0] == string[-1] else \"Invalid\""
    },
    {
        "id":387,
        "response":"def median_numbers(a, b, c):\n    return float(sorted([a, b, c])[1])"
    },
    {
        "id":388,
        "response":"import typing\n\ndef sum_of_digits(nums: typing.List[int]) -> int:\n    total = 0\n    for n in nums:\n        n_abs = abs(int(n))\n        if n_abs == 0:\n            continue\n        while n_abs:\n            total += n_abs % 10\n            n_abs \/\/= 10\n    return total"
    },
    {
        "id":389,
        "response":"import typing\n\ndef bitwise_xor(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"import typing\n\ndef extract_freq(test_list: typing.List[typing.Tuple]) -> int:\n    unique = set()\n    for tup in test_list:\n        if isinstance(tup, (list, tuple)):\n            unique.add(frozenset(tup))\n    return len(unique)"
    },
    {
        "id":391,
        "response":"import typing\n\ndef add_nested_tuples(test_tup1: typing.Tuple[typing.Tuple[int, ...], ...],\n                     test_tup2: typing.Tuple[typing.Tuple[int, ...], ...]) -> typing.Tuple[typing.Tuple[int, ...], ...]:\n    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"import sys\n\ndef _mod_pow(a: int, b: int, mod: int) -> int:\n    result = 1\n    a %= mod\n    while b:\n        if b & 1:\n            result = (result * a) % mod\n        a = (a * a) % mod\n        b >>= 1\n    return result\n\ndef _prepare_factorials(p: int):\n    fact = [1] * p\n    for i in range(1, p):\n        fact[i] = (fact[i - 1] * i) % p\n    inv_fact = [1] * p\n    inv_fact[-1] = _mod_pow(fact[-1], p - 2, p)\n    for i in range(p - 2, -1, -1):\n        inv_fact[i] = (inv_fact[i + 1] * (i + 1)) % p\n    return fact, inv_fact\n\ndef _ncr_small(n: int, r: int, p: int, fact, inv_fact) -> int:\n    if r > n:\n        return 0\n    return (fact[n] * inv_fact[r] % p) * inv_fact[n - r] % p\n\ndef ncr_modp(n: int, r: int, p: int) -> int:\n    if r < 0 or r > n:\n        return 0\n    if p == 1:\n        return 0\n    fact, inv_fact = _prepare_factorials(p)\n    result = 1\n    while n > 0 or r > 0:\n        ni = n % p\n        ri = r % p\n        if ri > ni:\n            return 0\n        result = (result * _ncr_small(ni, ri, p, fact, inv_fact)) % p\n        n \/\/= p\n        r \/\/= p\n    return result"
    },
    {
        "id":393,
        "response":"import re\nfrom urllib.parse import urlparse\n\ndef is_valid_URL(str):\n    if not isinstance(str, str):\n        return False\n    parsed = urlparse(str)\n    return parsed.scheme in (\"http\", \"https\", \"ftp\") and bool(parsed.netloc)"
    },
    {
        "id":394,
        "response":"def minimum(a, b):\n    return a if a < b else b"
    },
    {
        "id":395,
        "response":"def check_tuplex(tuplex, element):\n    return element in tuplex"
    },
    {
        "id":396,
        "response":"import typing\n\ndef find_Parity(x: int) -> str:\n    return \"Even Parity\" if x % 2 == 0 else \"Odd Parity\""
    },
    {
        "id":397,
        "response":"import typing\n\ndef rearrange_bigger(n: int) -> int:\n    if n < 0:\n        return -1\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1:] = reversed(digits[i + 1:])\n    return int(''.join(digits))"
    },
    {
        "id":398,
        "response":"import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    m, n = len(nums1), len(nums2)\n    heap = []\n    for i in range(min(k, m)):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    result = []\n    while heap and len(result) < k:\n        s, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < n:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return result"
    },
    {
        "id":399,
        "response":"import typing\n\ndef min_product_tuple(list1: typing.List[typing.Tuple[int, int]]) -> typing.Optional[int]:\n    if not list1:\n        return None\n    min_product = None\n    for t in list1:\n        if len(t) < 2:\n            continue\n        product = t[0] * t[1]\n        if min_product is None or product < min_product:\n            min_product = product\n    return min_product"
    },
    {
        "id":400,
        "response":"import typing\n\ndef min_val(listval: typing.List[typing.Any]) -> typing.Optional[float]:\n    min_number = None\n    for item in listval:\n        if isinstance(item, (int, float)) and not isinstance(item, bool):\n            if min_number is None or item < min_number:\n                min_number = item\n    return min_number"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word):\n    return ''.join(part.capitalize() for part in re.split(r'_+', word) if part)"
    },
    {
        "id":402,
        "response":"import typing\n\ndef remove_odd(l: list) -> list:\n    return [x for x in l if isinstance(x, int) and x % 2 == 0]"
    },
    {
        "id":403,
        "response":"from typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[Any, ...]], n: int) -> List[Any]:\n    return [t[n] for t in list1]"
    },
    {
        "id":404,
        "response":"import typing\n\ndef overlapping(list1: typing.Sequence, list2: typing.Sequence) -> bool:\n    return bool(set(list1) & set(list2))"
    },
    {
        "id":405,
        "response":"import typing\n\ndef max_Product(arr: typing.List[int]) -> typing.Tuple[int, int]:\n    if len(arr) < 2:\n        return ()\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2, max1 = max1, num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2, min1 = min1, num\n        elif num < min2:\n            min2 = num\n    prod_max = max1 * max2\n    prod_min = min1 * min2\n    if prod_max >= prod_min:\n        pair = (max1, max2)\n    else:\n        pair = (min1, min2)\n    return tuple(sorted(pair))"
    },
    {
        "id":406,
        "response":""
    },
    {
        "id":407,
        "response":"import collections\n\ndef group_tuples(Input):\n    groups = collections.OrderedDict()\n    for tpl in Input:\n        if not tpl:\n            continue\n        key = tpl[0]\n        val = tpl[1] if len(tpl) > 1 else None\n        if key not in groups:\n            groups[key] = []\n        if val is not None:\n            groups[key].append(val)\n    result = []\n    for key, vals in groups.items():\n        if vals:\n            result.append((key, *vals))\n        else:\n            result.append((key,))\n    return result"
    },
    {
        "id":408,
        "response":"import typing\n\ndef Find_Max(lst: list) -> list:\n    if not lst:\n        return []\n    max_len = -1\n    result = []\n    for sub in lst:\n        if isinstance(sub, (list, tuple)):\n            l = len(sub)\n            if l > max_len:\n                max_len = l\n                result = list(sub)\n    return result"
    },
    {
        "id":409,
        "response":"import typing\n\ndef round_and_sum(list1: typing.List[float]) -> int:\n    if not list1:\n        return 0\n    rounded_sum = sum(round(num) for num in list1)\n    return rounded_sum * len(list1)"
    },
    {
        "id":410,
        "response":"import math\n\ndef cube_Sum(n):\n    if n <= 0:\n        return 0\n    s = n * (n + 1) \/\/ 2\n    return 8 * s * s"
    },
    {
        "id":411,
        "response":"from typing import Tuple, Any\n\ndef concatenate_tuple(test_tup: Tuple[Any, ...]) -> str:\n    return '-'.join(str(item) for item in test_tup)"
    },
    {
        "id":412,
        "response":"import typing\n\ndef find_Average_Of_Cube(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    return n * (n + 1) * (n + 1) \/ 4.0"
    },
    {
        "id":413,
        "response":"import typing\n\ndef get_maxgold(gold: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if m == 0 or n == 0:\n        return 0\n    dp = [row[-1] for row in gold]\n    for col in range(n - 2, -1, -1):\n        new_dp = [0] * m\n        for row in range(m):\n            right = dp[row]\n            right_up = dp[row - 1] if row > 0 else -float('inf')\n            right_down = dp[row + 1] if row < m - 1 else -float('inf')\n            max_next = max(right, right_up, right_down)\n            new_dp[row] = gold[row][col] + max_next\n        dp = new_dp\n    return max(dp)"
    },
    {
        "id":414,
        "response":"import typing\n\ndef extract_rear(test_tuple: typing.Tuple[str, ...]) -> typing.List[str]:\n    return [s[-1] if s else '' for s in test_tuple]"
    },
    {
        "id":415,
        "response":"import typing\n\ndef count_element_in_list(list1: typing.List[typing.List[typing.Any]], x: typing.Any) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "id":416,
        "response":"import typing\n\ndef filter_oddnumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt):\n    match = re.fullmatch(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if not match:\n        return dt\n    year, month, day = match.groups()\n    return f'{day}-{month}-{year}'"
    },
    {
        "id":418,
        "response":"import typing\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list"
    },
    {
        "id":419,
        "response":""
    },
    {
        "id":420,
        "response":""
    },
    {
        "id":421,
        "response":"import typing\n\ndef common_element(list1: typing.List[int], list2: typing.List[int]) -> bool:\n    return bool(set(list1) & set(list2))"
    },
    {
        "id":422,
        "response":"def median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":"import typing\n\ndef check_greater(arr: typing.List[int], number: int) -> str:\n    if not arr:\n        return 'Yes, entered number is greater than those in the array'\n    return 'Yes, entered number is greater than those in the array' if number > max(arr) else 'No, entered number is less than those in the array'"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    return text if re.search(r'b+', text) else 'Not matched!'"
    },
    {
        "id":425,
        "response":"def last_Digit(n):\n    return abs(n) % 10"
    },
    {
        "id":426,
        "response":"import typing\n\ndef neg_nos(list1: typing.List[int]) -> typing.Tuple[int, ...]:\n    return tuple(item for item in list1 if item < 0)"
    },
    {
        "id":427,
        "response":"import typing\n\ndef remove_odd(str1: str) -> str:\n    return ''.join(str1[i] for i in range(1, len(str1), 2))"
    },
    {
        "id":428,
        "response":"import typing\n\ndef count_bidirectional(test_list: typing.List[typing.Tuple[int, int]]) -> str:\n    seen = set()\n    count = 0\n    for a, b in test_list:\n        if (b, a) in seen:\n            count += 1\n        seen.add((a, b))\n    return str(count)"
    },
    {
        "id":429,
        "response":"import re\n\ndef multiple_to_single(L):\n    if not L:\n        return 0\n    return int(''.join(str(abs(x)) if x >= 0 else '-' + str(abs(x)) for x in L))"
    },
    {
        "id":430,
        "response":"import re\n\ndef find_adverb_position(text):\n    for match in re.finditer(r'\\b\\w+\\b', text):\n        word = match.group()\n        if word.lower().endswith('ly'):\n            return (match.start(), match.end(), word)\n    return None"
    },
    {
        "id":431,
        "response":""
    },
    {
        "id":432,
        "response":"import typing\n\ndef positive_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    positive = sum(1 for n in nums if n > 0)\n    proportion = positive \/ len(nums)\n    return round(proportion, 2)"
    },
    {
        "id":433,
        "response":"import typing\n\ndef largest_neg(list1: typing.List[int]) -> typing.Optional[int]:\n    min_neg = None\n    for num in list1:\n        if num < 0:\n            if min_neg is None or num < min_neg:\n                min_neg = num\n    return min_neg"
    },
    {
        "id":434,
        "response":"import typing\n\ndef trim_tuple(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    return [ (t[K],) if -len(t) <= K < len(t) else () for t in test_list ]"
    },
    {
        "id":435,
        "response":"import typing\n\ndef index_multiplication(test_tup1: typing.Tuple[typing.Tuple[int, int], ...],\n                         test_tup2: typing.Tuple[typing.Tuple[int, int], ...]) -> typing.Tuple[typing.Tuple[int, int], ...]:\n    return tuple((a * c, b * d) for (a, b), (c, d) in zip(test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":"import typing\n\ndef count_Occurrence(tup: tuple, lst: list) -> int:\n    total = 0\n    for item in lst:\n        total += tup.count(item)\n    return total"
    },
    {
        "id":437,
        "response":"import typing\n\ndef cube_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x ** 3, nums))"
    },
    {
        "id":438,
        "response":""
    },
    {
        "id":439,
        "response":"import math\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    if (x1 == x2 and y1 == y2) or (x1 == x3 and y1 == y3) or (x2 == x3 and y2 == y3):\n        return 'No'\n    area2 = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)\n    return 'Yes' if area2 != 0 else 'No'"
    },
    {
        "id":440,
        "response":"import typing\n\ndef extract_string(str: typing.List[str], l: int) -> typing.List[str]:\n    return [s for s in str if isinstance(s, str) and len(s) == l]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1):\n    if not isinstance(text1, str):\n        return text1\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":"import typing\n\ndef loss_amount(actual_cost: float, sale_amount: float) -> typing.Optional[float]:\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    return None"
    },
    {
        "id":443,
        "response":"import math\n\ndef sumofFactors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            d1 = i\n            d2 = n \/\/ i\n            if d1 % 2 == 0:\n                total += d1\n            if d2 != d1 and d2 % 2 == 0:\n                total += d2\n    return total"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text: str) -> str:\n    if re.search(r'\\b\\w*z\\w*\\b', text, re.IGNORECASE):\n        return 'Found a match!'\n    return 'No match found!'"
    },
    {
        "id":445,
        "response":"import typing\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}"
    },
    {
        "id":446,
        "response":"import typing\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"import typing\n\ndef Find_Min(lst: typing.List[typing.List]) -> typing.List:\n    if not lst:\n        return []\n    return min(lst, key=len)"
    },
    {
        "id":448,
        "response":"import typing\n\ndef rectangle_area(l: float, b: float) -> float:\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "id":450,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    return [sub[0] for sub in lst if sub]"
    },
    {
        "id":451,
        "response":"def upper_ctr(s: str) -> int:\n    return sum(1 for c in s if c.isupper())"
    },
    {
        "id":452,
        "response":"import typing\n\ndef combinations_list(list1: typing.List[typing.Any]) -> typing.List[typing.List[typing.Any]]:\n    n = len(list1)\n    result = []\n    for mask in range(1 << n):\n        combo = []\n        for i in range(n - 1, -1, -1):\n            if mask & (1 << i):\n                combo.append(list1[i])\n        result.append(combo)\n    return result"
    },
    {
        "id":453,
        "response":"import typing\n\ndef max_subarray_product(arr: typing.List[int]) -> int:\n    if not arr:\n        return 0\n    max_prod = arr[0]\n    max_ending = arr[0]\n    min_ending = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_ending, min_ending = min_ending, max_ending\n        max_ending = max(num, max_ending * num)\n        min_ending = min(num, min_ending * num)\n        max_prod = max(max_prod, max_ending)\n    return max_prod"
    },
    {
        "id":454,
        "response":"import typing\n\ndef check_value(d: dict, n: int) -> bool:\n    if not d:\n        return True\n    return all(value == n for value in d.values())"
    },
    {
        "id":455,
        "response":"import typing\n\ndef drop_empty(dict1: typing.Dict) -> typing.Dict:\n    result = {}\n    for k, v in dict1.items():\n        if v is None:\n            continue\n        try:\n            if hasattr(v, '__len__') and len(v) == 0:\n                continue\n        except Exception:\n            pass\n        result[k] = v\n    return result"
    },
    {
        "id":456,
        "response":"import typing\n\ndef find_peak_util(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return -1\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        left = arr[mid - 1] if mid - 1 >= 0 else float('-inf')\n        right = arr[mid + 1] if mid + 1 < n else float('-inf')\n        if arr[mid] >= left and arr[mid] >= right:\n            return mid\n        elif left > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1"
    },
    {
        "id":457,
        "response":"import typing\n\ndef decimal_to_Octal(deciNum: int) -> int:\n    if deciNum == 0:\n        return 0\n    sign = -1 if deciNum < 0 else 1\n    n = abs(deciNum)\n    octal_digits = []\n    while n > 0:\n        octal_digits.append(str(n % 8))\n        n \/\/= 8\n    octal_str = ''.join(reversed(octal_digits))\n    return sign * int(octal_str)"
    },
    {
        "id":458,
        "response":"import typing\n\ndef max_product(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    dp = [0] * n\n    max_overall = 0\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[j] * arr[i] > dp[i]:\n                dp[i] = dp[j] * arr[i]\n        if dp[i] > max_overall:\n            max_overall = dp[i]\n    return max_overall"
    },
    {
        "id":459,
        "response":"import typing\n\ndef max_profit(price: typing.List[int], k: int) -> int:\n    n = len(price)\n    if n < 2 or k == 0:\n        return 0\n    if k >= n \/\/ 2:\n        profit = 0\n        for i in range(1, n):\n            diff = price[i] - price[i - 1]\n            if diff > 0:\n                profit += diff\n        return profit\n    hold = [-float('inf')] * (k + 1)\n    release = [0] * (k + 1)\n    for p in price:\n        for j in range(1, k + 1):\n            hold[j] = max(hold[j], release[j - 1] - p)\n            release[j] = max(release[j], hold[j] + p)\n    return release[k]"
    },
    {
        "id":460,
        "response":"import typing\n\ndef add_pairwise(test_tup: tuple) -> tuple:\n    n = len(test_tup)\n    if n < 2:\n        return ()\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(n - 1))"
    },
    {
        "id":461,
        "response":"import typing\n\ndef find_remainder(arr: typing.List[int], lens: int, n: int) -> int:\n    if n == 0:\n        raise ValueError(\"Modulo n cannot be zero\")\n    result = 1 % n\n    for x in arr[:lens]:\n        result = (result * (x % n)) % n\n    return result"
    },
    {
        "id":462,
        "response":"import typing\n\ndef check_Consecutive(l: typing.List[int]) -> bool:\n    if len(l) < 2:\n        return True\n    sorted_l = sorted(l)\n    for i in range(1, len(sorted_l)):\n        if sorted_l[i] - sorted_l[i - 1] != 1:\n            return False\n    return True"
    },
    {
        "id":463,
        "response":"import typing\n\ndef tuple_intersection(test_list1: typing.List[typing.Tuple[int, int]],\n                       test_list2: typing.List[typing.Tuple[int, int]]) -> typing.Set[typing.Tuple[int, int]]:\n    set2 = {frozenset(t) for t in test_list2}\n    result = {t for t in test_list1 if frozenset(t) in set2}\n    return result"
    },
    {
        "id":464,
        "response":"import typing\n\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    if not ch:\n        return str1\n    result = []\n    for c in str1:\n        result.append(newch if c == ch else c)\n    return ''.join(result)"
    },
    {
        "id":465,
        "response":"import re\nimport typing\nimport itertools\n\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)"
    },
    {
        "id":466,
        "response":"import typing\n\ndef big_sum(nums: typing.List[int]) -> int:\n    if not nums:\n        return 0\n    return min(nums) + max(nums)"
    },
    {
        "id":467,
        "response":"def is_lower(string):\n    return string.lower() if isinstance(string, str) else string"
    },
    {
        "id":468,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return ''.join(ch for ch in str1 if not ch.islower())"
    },
    {
        "id":469,
        "response":"def first_Digit(n):\n    n = abs(int(n))\n    if n == 0:\n        return 0\n    while n >= 10:\n        n \/\/= 10\n    return n"
    },
    {
        "id":470,
        "response":"import collections\n\ndef get_max_occuring_char(str1):\n    if not str1:\n        return ''\n    counter = collections.Counter(str1)\n    return max(counter.items(), key=lambda item: item[1])[0]"
    },
    {
        "id":471,
        "response":"import typing\n\ndef is_subset_sum(arr: typing.List[int], n: int, target: int) -> bool:\n    if target == 0:\n        return True\n    if n == 0:\n        return False\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            dp[i][j] = dp[i - 1][j]\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]]\n    return dp[n][target]"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    return 'Yes' if re.search(r'[A-Z][a-z]', text) else 'No'"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    if x <= 1:\n        return 1\n    n = x\n    factors = {}\n    d = 2\n    while d * d <= n:\n        while n % d == 0:\n            factors[d] = factors.get(d, 0) + 1\n            n \/\/= d\n        d += 1 if d == 2 else 2\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n\n    def min_n_for_prime(p, exp):\n        lo, hi = 1, p * exp\n        while lo < hi:\n            mid = (lo + hi) \/\/ 2\n            cnt = 0\n            power = p\n            while power <= mid:\n                cnt += mid \/\/ power\n                power *= p\n            if cnt >= exp:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo\n\n    result = 0\n    for prime, exp in factors.items():\n        result = max(result, min_n_for_prime(prime, exp))\n    return result"
    },
    {
        "id":474,
        "response":"import typing\n\ndef remove_matching_tuple(test_list1: typing.List[typing.Tuple], test_list2: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    if not test_list1:\n        return []\n    if not test_list2:\n        return list(test_list1)\n    remove_set = set(test_list2)\n    return [t for t in test_list1 if t not in remove_set]"
    },
    {
        "id":475,
        "response":"import typing\n\ndef is_palindrome(arr: typing.List[int], n: int) -> typing.Optional[int]:\n    max_pal = None\n    limit = min(n, len(arr))\n    for i in range(limit):\n        num = arr[i]\n        if num < 0:\n            continue\n        s = str(num)\n        if s == s[::-1]:\n            if max_pal is None or num > max_pal:\n                max_pal = num\n    return max_pal"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n, r, p):\n    if r < 0 or r > n:\n        return 0.0\n    if p < 0.0 or p > 1.0:\n        raise ValueError(\"Probability p must be between 0 and 1.\")\n    coeff = math.comb(n, r)\n    return coeff * (p ** r) * ((1 - p) ** (n - r))"
    },
    {
        "id":477,
        "response":"import typing\n\ndef sort_tuple(tup: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    return sorted(tup, key=lambda x: x[-1])"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    return (5 * a * a) \/ (4 * math.tan(math.pi \/ 5))"
    },
    {
        "id":479,
        "response":"import typing\n\ndef frequency_Of_Largest(n: int, arr: typing.List[int]) -> int:\n    if n == 0 or not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)"
    },
    {
        "id":480,
        "response":"import re\nfrom typing import List, Tuple, Set\n\ndef extract_symmetric(test_list: List[Tuple[int, int]]) -> Set[Tuple[int, int]]:\n    seen = set()\n    result = set()\n    for a, b in test_list:\n        if (b, a) in seen:\n            result.add((min(a, b), max(a, b)))\n        seen.add((a, b))\n    return result"
    },
    {
        "id":481,
        "response":"import math\nimport typing\n\ndef sum_gp(a: typing.Union[int, float], n: int, r: typing.Union[int, float]) -> typing.Union[int, float]:\n    if n <= 0:\n        return 0\n    if r == 1:\n        return a * n\n    if r == 0:\n        return a\n    result = a * (pow(r, n) - 1) \/ (r - 1)\n    if isinstance(a, int) and isinstance(r, int):\n        return int(result)\n    return result"
    },
    {
        "id":482,
        "response":"import typing\n\ndef binary_search(item_list: typing.List[int], item: int) -> bool:\n    left, right = 0, len(item_list) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        mid_val = item_list[mid]\n        if mid_val == item:\n            return True\n        elif mid_val < item:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "id":483,
        "response":""
    },
    {
        "id":484,
        "response":"import typing\n\ndef binary_to_integer(test_tup: typing.Tuple[int, ...]) -> str:\n    if not test_tup:\n        return \"0\"\n    binary_str = ''.join(str(bit) for bit in test_tup)\n    return str(int(binary_str, 2))"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\n\ndef heap_queue_smallest(nums, n):\n    if n <= 0:\n        return []\n    if n >= len(nums):\n        return sorted(nums)\n    return heapq.nsmallest(n, nums)"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r * r + h * h)\n    return math.pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"def gcd(x: int, y: int) -> int:\n    while y:\n        x, y = y, x % y\n    return x"
    },
    {
        "id":489,
        "response":"def diameter_circle(r):\n    return r * 2"
    },
    {
        "id":490,
        "response":"import typing\n\ndef concatenate_elements(lst: typing.List[typing.Any]) -> str:\n    return \" \".join(str(item) for item in lst)"
    },
    {
        "id":491,
        "response":"import typing\n\ndef min_cost(cost: typing.List[typing.List[int]], m: int, n: int) -> int:\n    rows = len(cost)\n    cols = len(cost[0]) if rows else 0\n    if m >= rows or n >= cols:\n        raise ValueError(\"Target position out of bounds\")\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"import typing\n\ndef similar_elements(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(x for x in test_tup1 if x in test_tup2)"
    },
    {
        "id":493,
        "response":"import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    w = 2\n    limit = int(math.isqrt(n))\n    while i <= limit:\n        if n % i == 0:\n            return True\n        i += w\n        w = 6 - w\n    return False"
    },
    {
        "id":494,
        "response":"import heapq\n\ndef heap_queue_largest(nums, n):\n    if n <= 0 or not nums:\n        return []\n    n = min(n, len(nums))\n    return heapq.nlargest(n, nums)"
    },
    {
        "id":495,
        "response":"import typing\n\ndef count_ways(n: int) -> int:\n    if n % 2 == 1:\n        return 0\n    if n == 0:\n        return 1\n    if n == 2:\n        return 3\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[2] = 3\n    for i in range(4, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]"
    },
    {
        "id":496,
        "response":"import typing\n\ndef is_Power_Of_Two(a: int, b: int) -> bool:\n    diff = a ^ b\n    return diff != 0 and (diff & (diff - 1)) == 0"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"import typing\n\ndef square_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x * x, nums))"
    },
    {
        "id":499,
        "response":"import typing\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    lps = [0] * n\n    length = 0\n    i = 1\n    while i < n:\n        if s[i] == s[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        else:\n            if length != 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n    p = n - lps[-1]\n    return p if n % p == 0 else n"
    },
    {
        "id":500,
        "response":"import heapq\n\ndef small_nnum(list1, n):\n    if n <= 0:\n        return []\n    return heapq.nsmallest(n, list1)"
    }
]