[
    {
        "id":1,
        "response":"import typing\n\ndef remove_Occ(s: str, ch: str) -> str:\n    first = s.find(ch)\n    if first == -1:\n        return s\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first + 1 :]\n    return s[:first] + s[first + 1 : last] + s[last + 1 :]"
    },
    {
        "id":2,
        "response":"import typing\n\ndef sort_matrix(M: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    return sorted(M, key=sum)"
    },
    {
        "id":3,
        "response":"import collections\n\ndef count_common(words):\n    if not words:\n        return []\n    freq = collections.Counter(words)\n    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_items[:4]"
    },
    {
        "id":4,
        "response":"import typing\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l"
    },
    {
        "id":5,
        "response":"import typing\n\ndef split_lowerstring(text: str) -> typing.List[str]:\n    lower_indices = [i for i, ch in enumerate(text) if ch.islower()]\n    result = []\n    for idx, start in enumerate(lower_indices):\n        end = lower_indices[idx + 1] if idx + 1 < len(lower_indices) else len(text)\n        result.append(text[start:end])\n    return result"
    },
    {
        "id":6,
        "response":"import re\n\ndef text_lowercase_underscore(text: str) -> str:\n    return \"Found a match!\" if re.fullmatch(r\"[a-z]+_[a-z]+\", text) else \"Not found!\""
    },
    {
        "id":7,
        "response":"def square_perimeter(a):\n    return a * 4"
    },
    {
        "id":8,
        "response":"import sys\n\ndef str_to_list(s: str, chars: str) -> str:\n    remove_set = set(chars)\n    return ''.join(ch for ch in s if ch not in remove_set)"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "id":10,
        "response":"import typing\n\ndef is_woodall(x: int) -> bool:\n    if x < 1:\n        return False\n    n = 1\n    while True:\n        w = n * (1 << n) - 1\n        if w == x:\n            return True\n        if w > x or n > 60:\n            return False\n        n += 1"
    },
    {
        "id":11,
        "response":"import typing\n\ndef multiples_of_num(m: int, n: int) -> typing.List[int]:\n    if m <= 0:\n        return []\n    return [n * i for i in range(1, m + 1)]"
    },
    {
        "id":12,
        "response":"import typing\n\ndef find_first_duplicate(nums: typing.Sequence[int]) -> typing.Optional[int]:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"
    },
    {
        "id":13,
        "response":"import typing\n\ndef maximum_Sum(list1: typing.List[typing.List[int]]) -> int:\n    if not list1:\n        return 0\n    max_sum = None\n    for sub in list1:\n        current = sum(sub)\n        if max_sum is None or current > max_sum:\n            max_sum = current\n    return max_sum if max_sum is not None else 0"
    },
    {
        "id":14,
        "response":"def binary_to_decimal(binary):\n    return int(str(binary), 2)"
    },
    {
        "id":15,
        "response":""
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: typing.List[tuple], K: int) -> bool:\n    for item in test_list:\n        if len(item) == K:\n            return True\n    return False"
    },
    {
        "id":17,
        "response":"import re\n\ndef remove(list):\n    return [''.join(ch for ch in s if not ch.isdigit()) for s in list]"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n: int, k: int) -> int:\n    if k < 0 or n < 0:\n        raise ValueError(\"n and k must be non\u2011negative\")\n    if k > n:\n        return 0\n    k = min(k, n - k)\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - k + i) \/\/ i\n    return result"
    },
    {
        "id":19,
        "response":"import typing\n\ndef get_Odd_Occurrence(arr: typing.List[int], arr_size: int) -> int:\n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result"
    },
    {
        "id":20,
        "response":""
    },
    {
        "id":21,
        "response":"import heapq\nfrom collections import Counter\nfrom typing import List\n\ndef func(nums: List[int], k: int) -> List[int]:\n    if not nums or k <= 0:\n        return []\n    freq = Counter(nums)\n    top_k = heapq.nlargest(k, freq.items(), key=lambda x: x[1])\n    return [num for num, _ in top_k]"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors(n):\n    if n < 2:\n        return n\n    last = 1\n    while n % 2 == 0:\n        last = 2\n        n \/\/= 2\n    i = 3\n    limit = int(math.isqrt(n)) + 1\n    while i <= limit and n > 1:\n        while n % i == 0:\n            last = i\n            n \/\/= i\n            limit = int(math.isqrt(n)) + 1\n        i += 2\n    if n > 1:\n        last = n\n    return last"
    },
    {
        "id":23,
        "response":"import typing\n\ndef decimal_To_Binary(N: int) -> int:\n    if N < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    return int(bin(N)[2:]) if N != 0 else 0"
    },
    {
        "id":24,
        "response":"import typing\n\ndef find_missing(ar: typing.List[int], N: int) -> int:\n    total = N * (N + 1) \/\/ 2\n    return total - sum(ar)"
    },
    {
        "id":25,
        "response":"import typing\n\ndef find_rect_num(n: int) -> int:\n    return n * (n + 1)"
    },
    {
        "id":26,
        "response":"import typing\n\ndef find_Nth_Digit(p: int, q: int, N: int) -> int:\n    if q == 0 or N <= 0:\n        raise ValueError(\"Denominator must be non-zero and N must be positive.\")\n    remainder = p % q\n    digit = 0\n    for _ in range(N):\n        remainder *= 10\n        digit = remainder \/\/ q\n        remainder %= q\n        if remainder == 0:\n            # Remaining digits will be 0\n            if _ < N - 1:\n                digit = 0\n                break\n    return digit"
    },
    {
        "id":27,
        "response":"import typing\n\ndef sort_mixed_list(mixed_list: typing.List[typing.Union[int, str]]) -> typing.List[typing.Union[int, str]]:\n    numbers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    numbers.sort()\n    strings.sort()\n    return numbers + strings"
    },
    {
        "id":28,
        "response":"import typing\n\ndef div_even_odd(list1: typing.List[int]) -> float:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n    return first_even \/ first_odd"
    },
    {
        "id":29,
        "response":"import heapq\n\ndef rearange_string(S):\n    if not S:\n        return \"\"\n    n = len(S)\n    freq = {}\n    for ch in S:\n        freq[ch] = freq.get(ch, 0) + 1\n    if any(cnt > (n + 1) \/\/ 2 for cnt in freq.values()):\n        return \"\"\n    heap = [(-cnt, ch) for ch, cnt in freq.items()]\n    heapq.heapify(heap)\n    result = []\n    while len(heap) > 1:\n        cnt1, ch1 = heapq.heappop(heap)\n        cnt2, ch2 = heapq.heappop(heap)\n        result.append(ch1)\n        result.append(ch2)\n        if cnt1 + 1 < 0:\n            heapq.heappush(heap, (cnt1 + 1, ch1))\n        if cnt2 + 1 < 0:\n            heapq.heappush(heap, (cnt2 + 1, ch2))\n    if heap:\n        cnt, ch = heap[0]\n        if cnt == -1:\n            result.append(ch)\n        else:\n            return \"\"\n    return \"\".join(result)"
    },
    {
        "id":30,
        "response":"import collections\n\ndef freq_element(nums):\n    counter = collections.Counter()\n    for sublist in nums:\n        for item in sublist:\n            counter[item] += 1\n    return dict(counter)"
    },
    {
        "id":31,
        "response":"def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"import collections\n\ndef find_Sum(arr, n):\n    sub_arr = arr[:n]\n    freq = collections.Counter(sub_arr)\n    return sum(x for x in sub_arr if freq[x] > 1)"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    return 'Found a match!' if re.search(r'[a-z]+_[a-z]+', text) else 'No match!'"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text):\n    match = re.match(r'^[A-Za-z]+', text)\n    return match.group(0) if match else 'Not matched!'"
    },
    {
        "id":35,
        "response":"import math\n\ndef find_gcd(arr):\n    if not arr:\n        return 0\n    result = 0\n    for num in arr:\n        result = math.gcd(result, abs(num))\n    return result"
    },
    {
        "id":36,
        "response":"import typing\n\ndef test_distinct(data: typing.List[int]) -> bool:\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":""
    },
    {
        "id":38,
        "response":""
    },
    {
        "id":39,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return [row[N] for row in nums] if nums else []"
    },
    {
        "id":40,
        "response":"import typing\n\ndef min_length_list(input_list: typing.List[typing.Any]) -> typing.Tuple[int, typing.Any]:\n    if not input_list:\n        return (0, None)\n    min_sublist = min(input_list, key=lambda x: len(x))\n    return (len(min_sublist), min_sublist)"
    },
    {
        "id":41,
        "response":"import typing\n\ndef check_equilateral(x: int, y: int, z: int) -> bool:\n    return x == y == z"
    },
    {
        "id":42,
        "response":"def parallelogram_area(b, h):\n    return b * h"
    },
    {
        "id":43,
        "response":"import re\nimport typing\n\ndef check_Equality(s: str) -> str:\n    if not s:\n        return \"Not Equal\"\n    return \"Equal\" if s[0] == s[-1] else \"Not Equal\""
    },
    {
        "id":44,
        "response":"import typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    if not my_list:\n        return []\n    min_val = min(my_list)\n    max_val = max(my_list)\n    size = max_val - min_val + 1\n    count = [0] * size\n    for num in my_list:\n        count[num - min_val] += 1\n    result: typing.List[int] = []\n    for i, c in enumerate(count):\n        if c:\n            result.extend([i + min_val] * c)\n    return result"
    },
    {
        "id":45,
        "response":"import math\n\ndef tn_gp(a, n, r):\n    if n <= 0:\n        return 0\n    return a * pow(r, n - 1)"
    },
    {
        "id":46,
        "response":"import typing\n\ndef rev(num: int) -> bool:\n    if num < 0:\n        return False\n    rev_num = int(str(num)[::-1])\n    return num == 2 * rev_num - 1"
    },
    {
        "id":47,
        "response":"def find_Max_Num(arr, n):\n    sorted_arr = sorted(arr, reverse=True)\n    return int(''.join(map(str, sorted_arr)))"
    },
    {
        "id":48,
        "response":"import typing\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x > 0 and y < 0) or (x < 0 and y > 0)"
    },
    {
        "id":49,
        "response":"import typing\n\ndef is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"
    },
    {
        "id":50,
        "response":"import typing\n\ndef max_len_sub(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_len = 2\n    cur_len = 2\n    prev_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        diff = arr[i] - arr[i - 1]\n        if diff == prev_diff:\n            cur_len += 1\n        else:\n            prev_diff = diff\n            cur_len = 2\n        if cur_len > max_len:\n            max_len = cur_len\n    return max_len"
    },
    {
        "id":51,
        "response":"import re\n\ndef count_Substrings(s: str, n: int) -> int:\n    total = 0\n    length = len(s)\n    for i in range(length):\n        for l in range(1, n + 1):\n            if i + l > length:\n                break\n            sub = s[i:i + l]\n            if sub.isdigit() and int(sub) == l:\n                total += 1\n    return total"
    },
    {
        "id":52,
        "response":"def smallest_num(xs):\n    if not xs:\n        raise ValueError(\"List is empty\")\n    min_val = xs[0]\n    for v in xs[1:]:\n        if v < min_val:\n            min_val = v\n    return min_val"
    },
    {
        "id":53,
        "response":"import typing\n\ndef max_difference(test_list: typing.List[typing.Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = a - b\n        if diff < 0:\n            diff = -diff\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "id":54,
        "response":""
    },
    {
        "id":55,
        "response":"import collections.abc\n\ndef recursive_list_sum(data_list):\n    total = 0\n    stack = [data_list]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, (list, tuple)):\n            stack.extend(current)\n        else:\n            total += current\n    return total"
    },
    {
        "id":56,
        "response":"def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "id":57,
        "response":"import typing\n\ndef bell_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non\u2011negative\")\n    stirling = [0] * (n + 1)\n    stirling[0] = 1\n    bell = 1\n    for i in range(1, n + 1):\n        new = [0] * (n + 1)\n        for k in range(1, i + 1):\n           "
    },
    {
        "id":58,
        "response":"import typing\n\ndef is_Monotonic(A: typing.List[int]) -> bool:\n    if not A:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n        if not increasing and not decreasing:\n            return False\n    return True"
    },
    {
        "id":59,
        "response":"import typing\n\ndef is_sublist(l: typing.List[int], s: typing.List[int]) -> bool:\n    n, m = len(l), len(s)\n    if m == 0:\n        return True\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False"
    },
    {
        "id":60,
        "response":"import typing\n\ndef find_equal_tuple(Input: typing.List[tuple], k: int) -> str:\n    for t in Input:\n        if len(t) != k:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'"
    },
    {
        "id":61,
        "response":"import typing\n\ndef comb_sort(nums: typing.List[int]) -> typing.List[int]:\n    arr = list(nums)\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted_flag = False\n    while not sorted_flag:\n        gap = int(gap \/ shrink)\n        if gap < 1:\n            gap = 1\n        sorted_flag = True\n        i = 0\n        while i + gap < n:\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted_flag = False\n            i += 1\n    return arr"
    },
    {
        "id":62,
        "response":"import typing\n\ndef dif_Square(n: int) -> bool:\n    return n % 4 != 2"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    return [segment for segment in re.split(r'[\\n*]', text) if segment]"
    },
    {
        "id":64,
        "response":"import typing\n\ndef is_samepatterns(colors: typing.List[str], patterns: typing.List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    pat_to_col = {}\n    col_to_pat = {}\n    for c, p in zip(colors, patterns):\n        if p in pat_to_col:\n            if pat_to_col[p] != c:\n                return False\n        else:\n            pat_to_col[p] = c\n        if c in col_to_pat:\n            if col_to_pat[c] != p:\n                return False\n        else:\n            col_to_pat[c] = p\n    return True"
    },
    {
        "id":65,
        "response":"import typing\n\ndef find_tuples(test_list: typing.List[typing.Tuple[int, ...]], K: int) -> str:\n    if K == 0:\n        return '[]'\n    filtered = [t for t in test_list if all(isinstance(x, int) and x % K == 0 for x in t)]\n    return str(filtered)"
    },
    {
        "id":66,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = m if m < n else n\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":67,
        "response":"import typing\n\ndef is_Diff(n: int) -> bool:\n    s_even = 0\n    s_odd = 0\n    for ch in str(abs(n)):\n        if not ch.isdigit():\n            continue\n        d = int(ch)\n        if d % 2 == 0:\n            s_even += d\n        else:\n            s_odd += d\n    return s_even == s_odd"
    },
    {
        "id":68,
        "response":""
    },
    {
        "id":69,
        "response":"import re\ndef word_len(s):\n    return len(s) % 2 == 1"
    },
    {
        "id":70,
        "response":"def tetrahedral_number(n):\n    return float(n * (n + 1) * (n + 2) \/ 6)"
    },
    {
        "id":71,
        "response":"import typing\n\ndef zip_tuples(test_tup1: tuple, test_tup2: tuple) -> list[tuple]:\n    if not test_tup1 or not test_tup2:\n        return []\n    len2 = len(test_tup2)\n    return [(test_tup1[i], test_tup2[i % len2]) for i in range(len(test_tup1))]"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    return (4.0 \/ 3.0) *"
    },
    {
        "id":73,
        "response":"import string\n\ndef get_Char(strr):\n    total = 0\n    for ch in strr:\n        if ch.isalpha():\n            total += ord(ch.lower()) - ord('a') + 1\n    r = total % 26\n    return 'z' if r == 0 else chr(ord('a') + r - 1)"
    },
    {
        "id":74,
        "response":"import sys\n\ndef sequence(n: int) -> int:\n    if n <= 0:\n        return 0\n    if n <= 2:\n        return 1\n    a = [0, 1, 1] + [0] * (n - 2)\n    for i in range(3, n + 1):\n        a[i] = a[a[i - 1]] + a[i - a[i - 1]]\n    return a[n]"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "id":76,
        "response":"import typing\n\ndef centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"import typing\n\ndef merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":"import collections\n\ndef freq_count(list1):\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    return freq"
    },
    {
        "id":79,
        "response":"import typing\n\ndef closest_num(N: int) -> int:\n    return N - 1"
    },
    {
        "id":80,
        "response":"def len_log(list1):\n    max_len = 0\n    for s in list1:\n        l = len(s)\n        if l > max_len:\n            max_len = l\n    return max_len"
    },
    {
        "id":81,
        "response":"import typing\n\ndef find_substring(str_list: typing.List[str], sub_str: str) -> bool:\n    if not str_list:\n        return False\n    if sub_str == \"\":\n        return True\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "id":82,
        "response":"import re\n\ndef is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    if s[0] == s[1]:\n        return False\n    for i in range(2, len(s)):\n        if s[i] != s[i-2] or s[i] == s[i-1]:\n            return False\n    return True"
    },
    {
        "id":83,
        "response":"import typing\n\ndef power(a: int, b: int) -> int | float:\n    if b == 0:\n        return 1\n    if b < 0:\n        if a == 0:\n            raise ZeroDivisionError(\"0 cannot be raised to a negative power\")\n        result = 1\n        for _ in range(-b):\n            result *= a\n        return 1 \/ result\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"
    },
    {
        "id":84,
        "response":"import typing\n\ndef index_minimum(test_list: typing.List[typing.Tuple[str, int]]) -> typing.Optional[str]:\n    if not test_list:\n        return None\n    min_name, min_val = test_list[0]\n    for name, val in test_list[1:]:\n        if val < min_val:\n            min_name, min_val = name, val\n    return min_name"
    },
    {
        "id":85,
        "response":"import typing\n\ndef Find_Min_Length(lst: typing.List[typing.List[typing.Any]]) -> int:\n    if not lst:\n        return 0\n    min_len = None\n    for sub in lst:\n        length = len(sub)\n        if min_len is None or length < min_len:\n            min_len = length\n            if min_len == 0:\n                break\n    return min_len if min_len is not None else 0"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n):\n    if n == 0:\n        return 0\n    n = abs(n)\n    cnt = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            cnt += 2\n    if limit * limit == n:\n        cnt -= 1\n    return cnt"
    },
    {
        "id":87,
        "response":"import typing\n\ndef frequency_lists(list1: typing.List[typing.List[int]]) -> typing.Dict[int, int]:\n    freq: typing.Dict[int, int] = {}\n    for sublist in list1:\n        for item in sublist:\n            freq[item] = freq.get(item, 0) + 1\n    return freq"
    },
    {
        "id":88,
        "response":"import typing\n\ndef multiply_num(numbers):\n    prod = 1\n    count = 0\n    for n in numbers:\n        prod *= n\n        count += 1\n    if count == 0:\n        return 0.0\n    return prod \/ count"
    },
    {
        "id":89,
        "response":"def decimal_to_binary(n):\n    return bin(n)[2:] if isinstance(n, int) and n >= 0 else ''"
    },
    {
        "id":90,
        "response":""
    },
    {
        "id":91,
        "response":"import typing\n\ndef kth_element(arr: typing.List[int], n: int, k: int) -> int:\n    if n != len(arr):\n        raise ValueError(\"Length mismatch\")\n    if k < 1 or k > n:\n        raise IndexError(\"k is out of bounds\")\n    return arr[k - 1]"
    },
    {
        "id":92,
        "response":"import re\n\ndef snake_to_camel(word: str) -> str:\n    parts = [segment for segment in word.split('_') if segment]\n    return ''.join(segment.capitalize() for segment in parts)"
    },
    {
        "id":93,
        "response":"import math\n\ndef eulerian_num(n: int, m: int) -> int:\n    if n < 0 or m < 0 or m >= n:\n        if n == 0 and m == 0:\n            return 1\n        return 0\n    dp = [[0] * n for _ in range(n + 1)]\n    dp[1][0] = 1\n    for i in range(2, n + 1):\n        dp[i][0] = 1\n        dp[i][i - 1] = 1\n        for j in range(1, i - 1):\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    return dp[n][m]"
    },
    {
        "id":94,
        "response":"import typing\n\ndef sort_sublists(input_list: typing.Tuple[typing.List[str], ...]) -> typing.List[typing.List[str]]:\n    return list(map(lambda sub: sorted(sub), input_list))"
    },
    {
        "id":95,
        "response":""
    },
    {
        "id":96,
        "response":"import typing\n\ndef add_lists(test_list: list, test_tup: tuple) -> tuple:\n    return tuple(test_tup) + tuple(test_list)"
    },
    {
        "id":97,
        "response":"import typing\n\ndef count_Hexadecimal(L: int, R: int) -> int:\n    if L > R:\n        return 0\n    return R - L + 1"
    },
    {
        "id":98,
        "response":"import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    sorted_lists = [sorted(num1), sorted(num2), sorted(num3)]\n    return list(heapq.merge(*sorted_lists))"
    },
    {
        "id":99,
        "response":""
    },
    {
        "id":100,
        "response":""
    },
    {
        "id":101,
        "response":"import typing\n\ndef common_in_nested_lists(nestedlist: typing.List[typing.List[int]]) -> typing.List[int]:\n    if not nestedlist:\n        return []\n    common_set = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_set.intersection_update(sublist)\n        if not common_set:\n            break\n    return sorted(common_set, reverse=True)"
    },
    {
        "id":102,
        "response":"import typing\n\ndef perimeter(diameter: float, height: float) -> float:\n    return 2 * (diameter + height)"
    },
    {
        "id":103,
        "response":"import re\n\ndef check_integer(text: str) -> bool:\n    return bool(re.fullmatch(r'[+-]?\\d+', text))"
    },
    {
        "id":104,
        "response":"import collections\n\ndef assign_freq(test_list):\n    freq = collections.OrderedDict()\n    for tpl in test_list:\n        freq[tpl] = freq.get(tpl, 0) + 1\n    result = [tpl + (count,) for tpl, count in freq.items()]\n    return str(result)"
    },
    {
        "id":105,
        "response":"import typing\n\ndef empty_dit(list1: typing.List[dict]) -> bool:\n    for d in list1:\n        if not isinstance(d, dict) or d:\n            return False\n    return True"
    },
    {
        "id":106,
        "response":"def tuple_to_int(nums):\n    result = 0\n    for d in nums:\n        result = result * 10 + d\n    return result"
    },
    {
        "id":107,
        "response":"import typing\n\ndef list_to_float(test_list: typing.List[typing.Tuple[typing.Any, typing.Any]]) -> str:\n    result = []\n    for item in test_list:\n        if isinstance(item, (list, tuple)) and len(item) == 2:\n            try:\n                a = float(item[0])\n            except Exception:\n                a = item[0]\n            try:\n                b = float(item[1])\n            except Exception:\n                b = item[1]\n            result.append((a, b))\n        else:\n            try:\n                result.append(float(item))\n            except Exception:\n                result.append(item)\n    return str(result)"
    },
    {
        "id":108,
        "response":"import typing\n\ndef string_to_list(string: str) -> typing.List[str]:\n    return string.split()"
    },
    {
        "id":109,
        "response":"import typing\n\ndef search(arr: typing.List[int], n: int) -> int:\n    low, high = 0, n - 1\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":110,
        "response":"import typing\n\ndef max_product_tuple(list1: typing.List[typing.Tuple[int, int]]) -> int:\n    max_product = None\n    for a, b in list1:\n        prod = a * b\n        if max_product is None or prod > max_product:\n            max_product = prod\n    return max_product if max_product is not None else 0"
    },
    {
        "id":111,
        "response":"import itertools\n\ndef check_triplet(A, n, target_sum, count):\n    if n < 3:\n        return False\n    A.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current = A[i] + A[left] + A[right]\n            if current == target_sum:\n                return True\n            if current < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False"
    },
    {
        "id":112,
        "response":"import typing\n\ndef smartNumber(n: int) -> int:\n    return n * 30"
    },
    {
        "id":113,
        "response":"import math\n\ndef sum_proper_divisors(n: int) -> int:\n    if n < 2:\n        return 0\n    total = 1\n    root = int(math.isqrt(n))\n    for i in range(2, root + 1):\n        if n % i == 0:\n            total += i\n            other = n \/\/ i\n            if other != i:\n                total += other\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n    total_sum = 0\n    for num in range(2, limit + 1):\n        partner = sum_proper_divisors(num)\n        if partner != num and partner > 0:\n            if sum_proper_divisors(partner) == num:\n                total_sum += num\n    return total_sum"
    },
    {
        "id":114,
        "response":"import cmath\n\ndef angle_complex(a, b):\n    z = complex(a) + complex(b)\n    return cmath.phase(z)"
    },
    {
        "id":115,
        "response":""
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    g = math.gcd(a, b)\n    if g == 0:\n        return 0\n    total = 0\n    limit = int(math.isqrt(g))\n    for i in range(1, limit + 1):\n        if g % i == 0:\n            total += i\n            j = g \/\/ i\n            if j != i:\n                total += j\n    return total"
    },
    {
        "id":117,
        "response":"import typing\n\ndef multiply_int(x: int, y: int) -> int:\n    sign = -1 if (x < 0) ^ (y < 0) else 1\n    a, b = abs(x), abs(y)\n    if a < b:\n        a, b = b, a\n    result = 0\n    while b:\n        if b & 1:\n            result += a\n        a <<= 1\n        b >>= 1\n    return result * sign if sign == 1 else -result"
    },
    {
        "id":118,
        "response":""
    },
    {
        "id":119,
        "response":"import typing\n\ndef magic_square_test(my_matrix: typing.List[typing.List[int]]) -> bool:\n    if not my_matrix:\n        return False\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return False\n    target = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != target:\n            return False\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != target:\n            return False\n    if sum(my_matrix[i][i] for i in range(n)) != target:\n        return False\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != target:\n        return False\n    return True"
    },
    {
        "id":120,
        "response":"import re\nimport typing\nfrom collections import defaultdict\n\ndef max_occurrences(nums: typing.List[int]) -> typing.Tuple[int, int]:\n    if not nums:\n        return (None, 0)\n    counts = defaultdict(int)\n    max_elem = nums[0]\n    max_count = 0\n    for x in nums:\n        counts[x] += 1\n        if counts[x] > max_count:\n            max_elem = x\n            max_count = counts[x]\n    return (max_elem, max_count)"
    },
    {
        "id":121,
        "response":"import typing\n\ndef reverse_vowels(s: str) -> str:\n    vowels = set('aeiouAEIOU')\n    chars = list(s)\n    i, j = 0, len(chars) - 1\n    while i < j:\n        while i < j and chars[i] not in vowels:\n            i += 1\n        while i < j and chars[j] not in vowels:\n            j -= 1\n        if i < j:\n            chars[i], chars[j] = chars[j], chars[i]\n            i += 1\n            j -= 1\n    return ''.join(chars)"
    },
    {
        "id":122,
        "response":"import typing\n\ndef tup_string(tup1: typing.Tuple[str, ...]) -> str:\n    return ''.join(tup1)"
    },
    {
        "id":123,
        "response":"import typing\n\ndef sum_negativenum(nums: typing.List[int]) -> int:\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"import typing\n\ndef check_last(arr: typing.List[int], n: int, p: int) -> str:\n    last = arr[-1]\n    parity = (last & 1) ^ ((n & 1) & (p & 1))\n    return \"EVEN\" if parity == 0 else \"ODD\""
    },
    {
        "id":125,
        "response":"import typing\n\ndef hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"import typing\n\ndef cal_electbill(units: int) -> int:\n    if units <= 0:\n        return 0\n    if units <= 100:\n        return units * 5\n    if units <= 200:\n        return 100 * 5 + (units - 100) * 7\n    return 100 * 5 + 100 * 7 + (units - 200) * 10"
    },
    {
        "id":127,
        "response":"import typing\n\ndef zero_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    zero_cnt = sum(1 for x in nums if x == 0)\n    return round(zero_cnt \/ len(nums), 2)"
    },
    {
        "id":128,
        "response":"import typing\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if not isinstance(n, int):\n        return False\n    return n > 0 and n % 2 == 0"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    return round(2 * math.pi * r, 2)"
    },
    {
        "id":130,
        "response":"import typing\n\ndef extract_singly(test_list: typing.List[typing.Tuple[typing.Any, ...]]) -> typing.List[typing.Any]:\n    seen = set()\n    result = []\n    for tpl in test_list:\n        for item in tpl:\n            if item not in seen:\n                seen.add(item)\n                result.append(item)\n    return result"
    },
    {
        "id":131,
        "response":"import typing\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        # Find index of the maximum element in nums[0:curr_size]\n        max_idx = 0\n        for i in range(1, curr_size):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        # If max element is already at its correct position, continue\n        if max_idx == curr_size - 1:\n            continue\n        # Bring max element to front if it's not already there\n        if max_idx != 0:\n            nums[:max_idx + 1] = reversed(nums[:max_idx + 1])\n        # Move max element to its correct position at the end of the current subarray\n        nums[:curr_size] = reversed(nums[:curr_size])\n    return nums"
    },
    {
        "id":132,
        "response":"import typing\n\ndef count_samepair(list1: typing.List[int], list2: typing.List[int], list3: typing.List[int]) -> int:\n    return sum(1 for a, b, c in zip(list1, list2, list3) if a == b == c)"
    },
    {
        "id":133,
        "response":"import typing\n\ndef find_lists(Input: typing.Tuple[typing.Any, ...]) -> int:\n    return sum(1 for element in Input if isinstance(element, list))"
    },
    {
        "id":134,
        "response":"import typing\n\ndef sum_Pairs(arr: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    arr_sorted = sorted(arr)\n    prefix_sum = 0\n    total = 0\n    for i, val in enumerate(arr_sorted):\n        total += val * i - prefix_sum\n        prefix_sum += val\n    return total"
    },
    {
        "id":135,
        "response":"import typing\n\ndef max_Abs_Diff(arr: typing.Sequence[int], n: int) -> int:\n    if n < 2:\n        return 0\n    try:\n        minimum = min(arr)\n        maximum = max(arr)\n    except ValueError:\n        return 0\n    return maximum - minimum"
    },
    {
        "id":136,
        "response":"import typing\n\ndef ascii_value_string(str1: str) -> int:\n    return ord(str1[0]) if str1 else 0"
    },
    {
        "id":137,
        "response":"import copy\n\ndef max_path_sum(tri, m, n):\n    dp = copy.deepcopy(tri[:m+1])\n    for i in range(m - 1, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n    return dp[0][0]"
    },
    {
        "id":138,
        "response":"import sys\n\ndef sum_digits_single(x: int) -> int:\n    s = str(abs(x))\n    if len(s) < 2:\n        return x\n    max_sum = -sys.maxsize\n    for i in range(1, len(s)):\n        left = int(s[:i])\n        right = int(s[i:])\n        current = left + right\n        if current > max_sum:\n            max_sum = current\n    return max_sum if x >= 0 else -max_sum"
    },
    {
        "id":139,
        "response":""
    },
    {
        "id":140,
        "response":""
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p, q):\n    if p == 0 or q == 0:\n        return False\n    return math.gcd(p, q) == 1"
    },
    {
        "id":142,
        "response":"import typing\n\ndef merge(arr: typing.List[int]) -> typing.List[int]:\n    if len(arr) <= 1:\n        return arr[:]\n    mid = len(arr) \/\/ 2\n    left = merge(arr[:mid])\n    right = merge(arr[mid:])\n    i = j = 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result"
    },
    {
        "id":143,
        "response":"import math\n\ndef parabola_vertex(a, b, c):\n    if a == 0:\n        return (0.0, c)\n    x = -b \/ (2 * a)\n    y = a * x * x + b * x + c\n    return (float(x), float(y))"
    },
    {
        "id":144,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return [row[N] for row in nums]"
    },
    {
        "id":145,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    mask = 0\n    i = 0\n    while i < n.bit_length() + 1:\n        mask |= (1 << i)\n        i += 2\n    return n ^ mask"
    },
    {
        "id":146,
        "response":"import typing\n\ndef tuple_int_str(tuple_str: typing.Tuple[typing.Tuple[str, ...], ...]) -> typing.Tuple[typing.Tuple[int, ...], ...]:\n    return tuple(tuple(int(item) for item in inner) for inner in tuple_str)"
    },
    {
        "id":147,
        "response":"import typing\n\ndef encode_list(list1: typing.List[typing.Any]) -> typing.List[typing.List[typing.Any]]:\n    if not list1:\n        return []\n    result: typing.List[typing.List[typing.Any]] = []\n    prev = list1[0]\n    count = 1\n    for item in list1[1:]:\n        if item == prev:\n            count += 1\n        else:\n            result.append([count, prev])\n            prev = item\n            count = 1\n    result.append([count, prev])\n    return result"
    },
    {
        "id":148,
        "response":"import typing\n\ndef min_Ops(arr: typing.List[int], n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    sorted_arr = sorted(arr)\n    median = sorted_arr[n \/\/ 2] if n % 2 == 1 else (sorted_arr[n \/\/ 2 - 1] + sorted_arr[n \/\/ 2]) \/\/ 2\n    total = 0\n    for num in arr:\n        total += abs(num - median)\n    return total"
    },
    {
        "id":149,
        "response":"import re\n\ndef month_season(month, days):\n    m = month.lower()\n    if m in (\"december\", \"january\", \"february\"):\n        return \"winter\"\n    if m in (\"march\", \"april\", \"may\"):\n        return \"spring\"\n    if m in (\"june\", \"july\", \"august\"):\n        return \"summer\"\n    if m in (\"september\", \"october\", \"november\"):\n        return \"autumn\"\n    return \"\""
    },
    {
        "id":150,
        "response":""
    },
    {
        "id":151,
        "response":"import typing\n\ndef remove_elements(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    removal_set = set(list2)\n    return [item for item in list1 if item not in removal_set]"
    },
    {
        "id":152,
        "response":"import math\n\ndef sum_series(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = (n + 1) \/\/ 2\n    last = 1 if n % 2 else 2\n    return count * (n + last) \/\/ 2"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    return (s * l * l) \/ (4 * math.tan(math.pi \/ s))"
    },
    {
        "id":154,
        "response":"import math\n\ndef _sum_divisors(n: int) -> int:\n    if n <= 0:\n        return 0\n    total = 0\n    root = int(math.isqrt(n))\n    for i in range(1, root + 1):\n        if n % i == 0:\n            total += i\n            j = n \/\/ i\n            if j != i:\n                total += j\n    return total\n\ndef divSum(a: int, b: int) -> bool:\n    return _sum_divisors(a) == _sum_divisors(b)"
    },
    {
        "id":155,
        "response":"import string\n\ndef count_char_position(str1):\n    count = 0\n    for idx, ch in enumerate(str1, start=1):\n        if idx > 26:\n            break\n        if ch.isalpha() and ch.lower() == chr(ord('a') + idx - 1):\n            count += 1\n    return count"
    },
    {
        "id":156,
        "response":"import typing\n\ndef find_even_Pair(A: typing.List[int], N: int) -> int:\n    even = 0\n    odd = 0\n    for i in range(min(N, len(A))):\n        if A[i] & 1:\n            odd += 1\n        else:\n            even += 1\n    return even * (even - 1) \/\/ 2 + odd * (odd - 1) \/\/ 2"
    },
    {
        "id":157,
        "response":"import typing\n\ndef next_Power_Of_2(n: int) -> int:\n    if n < 1:\n        return 1\n    return 1 << ((n - 1).bit_length())"
    },
    {
        "id":158,
        "response":"import typing\n\ndef frequency(a: typing.List[int], x: int) -> int:\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "id":159,
        "response":"import sys\n\ndef get_pell(n: int) -> int:\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b"
    },
    {
        "id":160,
        "response":"import typing\n\ndef sum_range_list(list1: typing.List[int], m: int, n: int) -> int:\n    if not list1 or m > n:\n        return 0\n    start = max(m, 0)\n    end = min(n, len(list1) - 1)\n    if start > end:\n        return 0\n    return sum(list1[start:end + 1])"
    },
    {
        "id":161,
        "response":"def perimeter_pentagon(a):\n    return a * 5"
    },
    {
        "id":162,
        "response":"import re\n\ndef count_occurance(s):\n    return s.count('std')"
    },
    {
        "id":163,
        "response":"import re\n\ndef remove_splchar(text):\n    return re.sub(r'[^A-Za-z0-9]', '', text)"
    },
    {
        "id":164,
        "response":"import typing\n\ndef group_keyvalue(l: typing.List[typing.Tuple[typing.Any, typing.Any]]) -> dict:\n    result = {}\n    for key, value in l:\n        result.setdefault(key, []).append(value)\n    return result"
    },
    {
        "id":165,
        "response":"import typing\n\ndef is_valid_parenthese(str1: str) -> bool:\n    pairs = {')': '(', '}': '{', ']': '['}\n    stack: typing.List[str] = []\n    for ch in str1:\n        if ch in pairs.values():\n            stack.append(ch)\n        elif ch in pairs:\n            if not stack or stack[-1] != pairs[ch]:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "id":166,
        "response":"import typing\n\ndef perimeter_triangle(a: typing.Union[int, float], b: typing.Union[int, float], c: typing.Union[int, float]) -> typing.Union[int, float]:\n    return a + b + c"
    },
    {
        "id":167,
        "response":"import math\n\ndef answer(L, R):\n    if 2 * L <= R:\n        return (L, 2 * L)\n    for a in range(L, R + 1):\n        for b in range(a + 1, R + 1"
    },
    {
        "id":168,
        "response":"import re\n\ndef string_literals(patterns, text):\n    if not patterns:\n        return 'Not Matched!'\n    for pat in patterns:\n        if pat and pat in text:\n            return 'Matched!'\n    return 'Not Matched!'"
    },
    {
        "id":169,
        "response":"import typing\n\ndef is_num_keith(x: int) -> bool:\n    if x < 10 or x < 0:\n        return False\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    seq = digits[:]\n    while seq[-1] < x:\n        next_val = sum(seq[-n:])\n        seq.append(next_val)\n    return seq[-1] == x"
    },
    {
        "id":170,
        "response":"import math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    r = 6371.0\n    phi1 = math.radians(slat)\n    phi2 = math.radians(elat)\n    dphi = math.radians(elat - slat)\n    dlambda = math.radians(elon - slon)\n    a = math.sin(dphi \/ 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlambda \/ 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return r * c"
    },
    {
        "id":171,
        "response":"import typing\n\ndef common_prefix_util(strings: typing.List[str], n: int) -> str:\n    if n <= 0 or not strings:\n        return \"\"\n    selected = strings[:n]\n    if not selected:\n        return \"\"\n    min_len = min(len(s) for s in selected)\n    if min_len == 0:\n        return \"\"\n    prefix_chars = []\n    for i in range(min_len):\n        current_char = selected[0][i]\n        if all(s[i] == current_char for s in selected):\n            prefix_chars.append(current_char)\n        else:\n            break\n    return \"\".join(prefix_chars)"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string):\n    upper = re.findall(r'[A-Z]', string)\n    lower = re.findall(r'[a-z]', string)\n    digit = re.findall(r'\\d', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    return (upper, lower, special, digit)"
    },
    {
        "id":173,
        "response":"import collections\n\ndef count_pairs(arr, n, k):\n    if not arr:\n        return 0\n    if k == 0:\n        freq = collections.Counter(arr)\n        return sum(1 for v in freq.values() if v > 1)\n    s = set(arr)\n    count = 0\n    for x in s:\n        if x + k in s:\n            count += 1\n    return count"
    },
    {
        "id":174,
        "response":"import typing\n\ndef greater_specificnum(lst: typing.List[int], num: int) -> bool:\n    return all(item > num for item in lst)"
    },
    {
        "id":175,
        "response":"import typing\n\ndef parabola_focus(a: float, b: float, c: float) -> typing.Tuple[float, float]:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero for a parabola.\")\n    h = -b \/ (2 * a)\n    k = c - (b ** 2) \/ (4 * a)\n    focus_y = k + 1 \/ (4 * a)\n    return (h, focus_y)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    escaped = [re.escape(p) for p in patterns]\n    pattern = '|'.join(escaped)\n    return 'Matched!' if re.search(pattern, text) else 'Not Matched!'"
    },
    {
        "id":177,
        "response":"import typing\n\ndef longest_common_subsequence(X: str, Y: str, m: int, n: int) -> int:\n    if m == 0 or n == 0:\n        return 0\n    prev = [0] * (n + 1)\n    cur = [0] * (n + 1)\n    for i in range(1, m + 1):\n        cur[0] = 0\n        xi = X[i - 1]\n        for j in range(1, n + 1):\n            if xi == Y[j - 1]:\n                cur[j] = prev[j - 1] + 1\n            else:\n                cur[j] = prev[j] if prev[j] > cur[j - 1] else cur[j - 1]\n        prev, cur = cur, prev\n    return prev[n]"
    },
    {
        "id":178,
        "response":""
    },
    {
        "id":179,
        "response":"import typing\n\ndef first_Missing_Positive(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 1\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = n + 1\n    for i in range(n):\n        val = abs(arr[i])\n        if 1 <= val <= n:\n            idx = val - 1\n            if arr[idx] > 0:\n                arr[idx] = -arr[idx]\n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n    return n + 1"
    },
    {
        "id":180,
        "response":"import math\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    min_x = min(x1, x2)\n    max_x = max(x1, x2)\n    min_y = min(y1, y2)\n    max_y = max(y1, y2)\n    interior_x = max(0, max_x - min_x - 1)\n    interior_y = max(0, max_y - min_y - 1)\n    return interior_x * interior_y"
    },
    {
        "id":181,
        "response":"import re\n\ndef check_monthnumber(monthname):\n    month_days = {\n        \"january\": 31,\n        \"february\": 28,\n        \"march\": 31,\n        \"april\": 30,\n        \"may\": 31,\n        \"june\": 30,\n        \"july\": 31,\n        \"august\": 31,\n        \"september\": 30,\n        \"october\": 31,\n        \"november\": 30,\n        \"december\": 31\n    }\n    days = month_days.get(monthname.lower())\n    return days == 30 if days is not None else False"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(s):\n    if not s:\n        return False\n    has_letter = any(ch.isalpha() for ch in s)\n    has_digit = any(ch.isdigit() for ch in s)\n    return has_letter and has_digit"
    },
    {
        "id":183,
        "response":"import typing\n\ndef remove_tuple(test_tup: tuple) -> tuple:\n    return tuple(sorted(set(test_tup)))"
    },
    {
        "id":184,
        "response":"def octal_To_Decimal(n):\n    result = 0\n    power = 1\n    while n > 0:\n        digit = n % 10\n        result += digit * power\n        power *= 8\n        n \/\/= 10\n    return result"
    },
    {
        "id":185,
        "response":"import typing\n\ndef first(arr: typing.List[int], x: int, n: int) -> int:\n    if not arr or n < 0:\n        return -1\n    high = min(n, len(arr) - 1)\n    low = 0\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "id":186,
        "response":"import typing\n\ndef remove_tuples(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    return [t for t in test_list if len(t) != K]"
    },
    {
        "id":187,
        "response":"import typing\n\ndef find_exponentio(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(a ** b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\n\ndef largest_triangle(radius):\n    return (3 * math.sqrt(3) \/ 4) * radius * radius"
    },
    {
        "id":189,
        "response":"import sys\n\ndef highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":190,
        "response":"import typing\n\ndef position_max(lst: typing.List[int]) -> typing.List[int]:\n    if not lst:\n        return []\n    max_val = max(lst)\n    return [i for i, v in enumerate(lst) if v == max_val]"
    },
    {
        "id":191,
        "response":"import typing\n\ndef chkList(lst: typing.List[typing.Any]) -> bool:\n    if not lst:\n        return True\n    first = lst[0]\n    return all(item == first for item in lst)"
    },
    {
        "id":192,
        "response":"def remove_even(str1):\n    return str1[::2]"
    },
    {
        "id":193,
        "response":"import sys\n\ndef hamming_Distance(n1, n2):\n    return bin(n1 ^ n2).count('1')"
    },
    {
        "id":194,
        "response":"import typing\n\ndef count(s: str, c: str) -> int:\n    return s.count(c)"
    },
    {
        "id":195,
        "response":"import typing\n\ndef inversion_elements(test_tup: tuple) -> tuple:\n    return tuple(-(x + 1) for x in test_tup)"
    },
    {
        "id":196,
        "response":"import typing\n\ndef concatenate_elements(test_tup: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    n = len(test_tup)\n    if n < 2:\n        return ()\n    result = []\n    for i in range(n - 1):\n        result.append(test_tup[i] + test_tup[i + 1])\n    return tuple(result)"
    },
    {
        "id":197,
        "response":"import typing\n\ndef find_longest_repeating_subseq(s: str) -> int:\n    n = len(s)\n    if n < 2:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        ci = s[i - 1]\n        for j in range(1, n + 1):\n            if ci == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] if dp[i - 1][j] >= dp[i][j - 1] else dp[i][j - 1]\n    return dp[n][n]"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num):\n    return bool(re.fullmatch(r'[+-]?\\d+\\.\\d{2}', num))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        heapq.heappush(heap, a)\n    else:\n        heapq.heapreplace(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string):\n    return bool(re.fullmatch(r'[A-Fa-f0-5]*', string))"
    },
    {
        "id":201,
        "response":"import typing\n\ndef count_Num(n: int) -> int:\n    if n < 0:\n        n = -n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "id":202,
        "response":"import typing\n\ndef fourth_Power_Sum(n: int) -> int:\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 4\n    return total"
    },
    {
        "id":203,
        "response":"import typing\n\ndef concatenate_strings(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    return radian * 180.0 \/ math.pi"
    },
    {
        "id":205,
        "response":"import typing\n\ndef decode_list(alist: typing.List[typing.Any]) -> typing.List[int]:\n    result: typing.List[int] = []\n    for item in alist:\n        if isinstance(item, list) and len(item) == 2 and isinstance(item[0], int):\n            count, value = item\n            result.extend([value] * count)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":206,
        "response":"import typing\n\ndef check_subset_list(list1: typing.List[typing.Any], list2: typing.List[typing.List[typing.Any]]) -> bool:\n    if not list1:\n        return True\n    if not list2:\n        return False\n    union_set = set()\n    for sublist in list2:\n        union_set.update(sublist)\n    for item in list1:\n        if item not in union_set:\n            return False\n    return True"
    },
    {
        "id":207,
        "response":""
    },
    {
        "id":208,
        "response":"import math\n\ndef min_Operations(A: int, B: int) -> int:\n    if A == B:\n        return 0\n    if A == 0 or B == 0:\n        return -1\n    def factor_two(x):\n        cnt = 0\n        while x % 2 == 0:\n            x \/\/= 2\n            cnt += 1\n        return x, cnt\n    oddA, expA = factor_two(abs(A))\n    oddB, expB = factor_two(abs(B))\n    if oddA != oddB:\n        return -1\n    return abs(expA - expB)"
    },
    {
        "id":209,
        "response":""
    },
    {
        "id":210,
        "response":"import typing\n\ndef replace_max_specialchar(text: str, n: int) -> str:\n    special = {' ', ',', '.'}\n    result = []\n    replaced = 0\n    for ch in text:\n        if ch in special and replaced < n:\n            result.append(':')\n            replaced += 1\n        else:\n            result.append(ch)\n    return ''.join(result)"
    },
    {
        "id":211,
        "response":"import typing\n\ndef first_even(nums: typing.List[int]) -> typing.Optional[int]:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
    },
    {
        "id":212,
        "response":"import typing\n\ndef check_type(test_tuple: tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for item in test_tuple[1:]:\n        if type(item) is not first_type:\n            return False\n    return True"
    },
    {
        "id":213,
        "response":"import bisect\n\ndef is_majority(arr, n, x):\n    if n == 0:\n        return False\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    count = right - left\n    return count > n \/\/ 2"
    },
    {
        "id":214,
        "response":"def count_Set_Bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "id":215,
        "response":"import typing\n\ndef find_Min(arr: typing.List[int], low: int, high: int) -> int:\n    if low == high:\n        return arr[low]\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":216,
        "response":"import typing\n\ndef odd_values_string(s: str) -> str:\n    return s[::2]"
    },
    {
        "id":217,
        "response":"def min_of_three(a, b, c):\n    m = a\n    if b < m:\n        m = b\n    if c < m:\n        m = c\n    return m"
    },
    {
        "id":218,
        "response":"import typing\n\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    if l < 0 or r < 0 or l > r:\n        return False\n    width = r - l\n    if width == 0:\n        return True\n    mask = ((1 << width) - 1) << l\n    return (n & mask) == 0"
    },
    {
        "id":219,
        "response":"import typing\n\ndef re_arrange_array(arr: typing.List[int], n: int) -> typing.List[int]:\n    i, j = 0, n - 1\n    while i < j:\n        while i < j and arr[i] < 0:\n            i += 1\n        while i < j and arr[j] >= 0:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return arr"
    },
    {
        "id":220,
        "response":"import re\n\ndef replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)"
    },
    {
        "id":221,
        "response":"import typing\n\ndef max_sum(tri: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0 or not tri:\n        return 0\n    dp = [row[:] for row in tri]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n    return dp[0][0]"
    },
    {
        "id":222,
        "response":"import typing\n\ndef larg_nnum(list1: typing.List[int], n: int) -> typing.List[int]:\n    if n <= 0:\n        return []\n    return sorted(list1, reverse=True)[:n]"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsuface_cylinder(r, h):\n    pi = 3.1415\n    return 2 * pi * r * h"
    },
    {
        "id":224,
        "response":"import math\n\ndef volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":"import typing\n\ndef even_bit_set_number(n: int) -> int:\n    if n < 0:\n        n = n & ((1 << (n.bit_length())) - 1)\n    mask = 0\n    limit = n.bit_length() + 1\n    for i in range(0, limit, 2):\n        mask |= 1 << i\n    return n | mask"
    },
    {
        "id":226,
        "response":""
    },
    {
        "id":227,
        "response":"import typing\n\ndef check_occurences(test_list: typing.List[typing.Tuple[int, int]]) -> typing.Dict[typing.Tuple[int, int], int]:\n    counts: typing.Dict[typing.Tuple[int, int], int] = {}\n    for a, b in test_list:\n        key = (a, b) if a <= b else (b, a)\n        counts[key] = counts.get(key, 0) + 1\n    return counts"
    },
    {
        "id":228,
        "response":"import typing\n\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) \/\/ 2"
    },
    {
        "id":229,
        "response":"import typing\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    if n <= 0:\n        return 1\n    if m <= 0:\n        return 0\n    dp = [0] + [1] * m\n    for _ in range(2, n + 1):\n        prefix = [0] * (m + 1)\n        running = 0\n        for v in range(1, m + 1):\n            running += dp[v]\n            prefix[v] = running\n        newdp = [0] * (m + 1)\n        for v in range(1, m + 1):\n            newdp[v] = prefix[v \/\/ 2]\n        dp = newdp\n   "
    },
    {
        "id":230,
        "response":"import typing\n\ndef replace_list(list1: typing.List, list2: typing.List) -> typing.List:\n    if not list1:\n        return list2[:]\n    return list1[:-1] + list2[:]"
    },
    {
        "id":231,
        "response":"import typing\n\ndef array_3d(m: int, n: int, o: int) -> typing.List[typing.List[typing.List[str]]]:\n    if m <= 0 or n <= 0 or o <= 0:\n        return []\n    return [[['*' for _ in range(m)] for _ in range(n)] for _ in range(o)]"
    },
    {
        "id":232,
        "response":"import typing\n\ndef count_charac(str1: str) -> int:\n    return len(str1)"
    },
    {
        "id":233,
        "response":"import collections\n\ndef sort_on_occurence(lst):\n    groups = collections.OrderedDict()\n    for key, val in lst:\n        groups.setdefault(key, []).append(val)\n    result = []\n    for key, vals in groups.items():\n        result.append((key, *vals, len(vals)))\n    return result"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    if N < 0:\n        return 0\n    k = math.isqrt(N)\n    if k * k <= N:\n        k += 1\n    return k * k"
    },
    {
        "id":235,
        "response":"import typing\n\ndef max_sum(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[j] + arr[i] > inc[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i] and dec[j] + arr[i] > dec[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum_val = inc[0] + dec[0] - arr[0]\n    for i in range(1, n):\n        current = inc[i] + dec[i] - arr[i]\n        if current > max_sum_val:\n            max_sum_val = current\n    return max_sum_val"
    },
    {
        "id":236,
        "response":"import math\n\ndef babylonian_squareroot(number):\n    if number == 0:\n        return 0.0\n    guess = number if number >= 1 else 1.0\n    while True:\n        next_guess = (guess + number \/ guess"
    },
    {
        "id":237,
        "response":""
    },
    {
        "id":238,
        "response":"import typing\n\ndef harmonic_sum(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    total = 0.0\n    for i in range(1, n + 1):\n        total += 1.0 \/ i\n    return total"
    },
    {
        "id":239,
        "response":"import typing\n\ndef intersection_array(array_nums1: typing.List[int], array_nums2: typing.List[int]) -> typing.List[int]:\n    intersect = lambda a, b: sorted(set(a) & set(b))\n    return intersect(array_nums1, array_nums2)"
    },
    {
        "id":240,
        "response":"import typing\n\ndef count_X(tup: tuple, x: typing.Any) -> int:\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"import typing\n\ndef insert_element(lst: typing.List[typing.Any], element: typing.Any) -> typing.List[typing.Any]:\n    if not lst:\n        return []\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "id":242,
        "response":"import typing\n\ndef convert(number: typing.Any) -> tuple[float, float]:\n    if isinstance(number, complex):\n        return (float(number.real), float(number.imag))\n    return (float(number), 0.0)"
    },
    {
        "id":243,
        "response":"import typing\n\ndef count_integer(list1: typing.List[typing.Any]) -> int:\n    count = 0\n    for item in list1:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count"
    },
    {
        "id":244,
        "response":""
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    return list(itertools.combinations_with_replacement(l, n))"
    },
    {
        "id":246,
        "response":"import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0:2] = [False, False]\n    limit = int(math.isqrt(n - 1))\n    for i in range(2, limit + 1):\n        if is_prime[i]:\n            step = i\n            start = i * i\n            is_prime[start:n:step] = [False] * ((n - 1 - start) \/\/ step + 1)\n    return sum(is_prime[2:n])"
    },
    {
        "id":247,
        "response":"def swap_numbers(a, b):\n    return b, a"
    },
    {
        "id":248,
        "response":"import typing\n\ndef count_odd(array_nums: typing.List[int]) -> int:\n    return sum(map(lambda x: 1 if x % 2 != 0 else 0, array_nums))"
    },
    {
        "id":249,
        "response":"import typing\n\ndef maximize_elements(test_tup1: typing.Tuple[typing.Tuple[int, ...], ...],\n                      test_tup2: typing.Tuple[typing.Tuple[int, ...], ...]) -> typing.Tuple[typing.Tuple[int, ...], ...]:\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        result.append(tuple(max(x, y) for x, y in zip(a, b)))\n    return tuple(result)"
    },
    {
        "id":250,
        "response":"import math\n\ndef _is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    small_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for p in small_primes:\n        if num % p == 0:\n            return num == p\n    d = num - 1\n    s = 0\n    while d % 2 == 0:\n        d \/\/= 2\n        s += 1\n    # Deterministic bases for 64-bit integers\n    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:\n        if a % num == 0:\n            continue\n        x = pow(a, d, num)\n        if x == 1 or x == num - 1:\n            continue\n        for _ in range(s - 1):\n            x = (x * x) % num\n            if x == num - 1:\n                break\n        else:\n            return False\n    return True\n\ndef newman_prime(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non\u2011negative\")\n    primes = []\n    a0, a1 = 1, 1\n    idx = 0\n    while len(primes) <= n:\n        if idx < 2:\n            cur = 1\n        else:\n            cur = 2 * a1 + a0\n            a0, a1 = a1, cur\n        if _is_prime(cur):\n            primes.append(cur)\n        idx += 1\n        if idx == 0:  # ensure loop runs at least once\n            continue\n    return primes[n]"
    },
    {
        "id":251,
        "response":"import typing\n\ndef division_elements(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(a \/\/ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":252,
        "response":"import typing\n\ndef split_two_parts(list1: typing.List[typing.Any], L: int) -> typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]:\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "id":253,
        "response":""
    },
    {
        "id":254,
        "response":"import typing\n\ndef dog_age(h_age: float) -> float:\n    if h_age <= 0:\n        return 0\n    if h_age <= 2:\n        return h_age * 10.5\n    return 21 + (h_age - 2) * 4"
    },
    {
        "id":255,
        "response":"import typing\n\ndef list_split(S: typing.List[typing.Any], step: int) -> typing.List[typing.List[typing.Any]]:\n    if step <= 0:\n        raise ValueError(\"step must be a positive integer\")\n    result = [[] for _ in range(step)]\n    for idx, item in enumerate(S):\n        result[idx % step].append(item)\n    return result"
    },
    {
        "id":256,
        "response":"import math\n\ndef lateralsurface_cube(l):\n    return 4 * l * l"
    },
    {
        "id":257,
        "response":"import typing\n\ndef square_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (2 * n - 1) * (2 * n + 1) \/\/ 3"
    },
    {
        "id":258,
        "response":"import typing\n\ndef find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1"
    },
    {
        "id":259,
        "response":"def ascii_value(k):\n    return ord(k)"
    },
    {
        "id":260,
        "response":"import typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    total = 0\n    limit = min(n, len(arr))\n    for i in range(0, limit, 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "id":261,
        "response":"import math\n\ndef even_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return (8 * n * n * (n + 1) * (n + 1) * (2 * n * n + 2 * n - 1)) \/\/ 3"
    },
    {
        "id":262,
        "response":"import typing\n\ndef rear_extract(test_list: typing.List[tuple]) -> typing.List:\n    return [record[-1] for record in test_list]"
    },
    {
        "id":263,
        "response":"def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"import typing\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 1 << (n - 1)"
    },
    {
        "id":265,
        "response":"import typing\n\ndef get_Position(a: typing.List[int], n: int, m: int) -> int:\n    if n <= 0 or m <= 0:\n        return -1\n    pos = 0\n    for i in range(2, n + 1):\n        pos = (pos + m) % i\n    return pos"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    pi = 3.1415\n    return pi * r * r * h"
    },
    {
        "id":267,
        "response":"import typing\n\ndef dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v > n}"
    },
    {
        "id":268,
        "response":"import typing\n\ndef count_first_elements(test_tup: tuple) -> int:\n    for idx, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return idx\n    return len(test_tup)"
    },
    {
        "id":269,
        "response":"def is_num_decagonal(n):\n    return n * (4 * n - 3)"
    },
    {
        "id":270,
        "response":"import typing\n\ndef sequential_search(dlist: list, item) -> tuple:\n    for idx, val in enumerate(dlist):\n        if val == item:\n            return (True, idx)\n    return (False, -1)"
    },
    {
        "id":271,
        "response":"def all_unique(test_list):\n    return len(test_list) == len(set(test_list))"
    },
    {
        "id":272,
        "response":"import typing\n\ndef sub_list(nums1: typing.List[int], nums2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda a, b: a - b, nums1, nums2))"
    },
    {
        "id":273,
        "response":"import collections\n\ndef validate(n):\n    s = str(abs(n))\n    cnt = collections.Counter(s)\n    for d, c in cnt.items():\n        if c > int(d):\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"import typing\n\ndef check_element(lst: typing.List[str], element: str) -> bool:\n    return all(item == element for item in lst)"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    return text if re.fullmatch(r\"a b{2,3}\", text.replace(\" \", \"\")) else \"Not matched!\""
    },
    {
        "id":276,
        "response":""
    },
    {
        "id":277,
        "response":"import typing\n\ndef square_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 4 * n * (n + 1) * (2 * n + 1) \/\/ 6"
    },
    {
        "id":278,
        "response":""
    },
    {
        "id":279,
        "response":"import typing\n\ndef odd_Days(N: int) -> int:\n    leap_years = N \/\/ 4 - N \/\/ 100 + N \/\/ 400\n    return (N + leap_years) % 7"
    },
    {
        "id":280,
        "response":"import typing\n\ndef max_length(list1: typing.List[typing.List[int]]) -> typing.Tuple[int, typing.List[int]]:\n    max_len = 0\n    max_list: typing.List[int] = []\n    for sublist in list1:\n        cur_len = len(sublist)\n        if cur_len > max_len:\n            max_len = cur_len\n            max_list = sublist\n    return (max_len, max_list)"
    },
    {
        "id":281,
        "response":"import typing\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    total_prev2 = k          # total for i-2 (i=2)\n    total_prev1 = k * k      # total for i-1 (i=2)\n    for i in range(3, n + 1):\n        total_curr = (k - 1) * (total_prev1 + total_prev2)\n        total_prev2, total_prev1 = total_prev1, total_curr\n    return total_prev1"
    },
    {
        "id":282,
        "response":"def find(n, m):\n    try:\n        return n \/\/ m\n    except ZeroDivisionError:\n        return None"
    },
    {
        "id":283,
        "response":""
    },
    {
        "id":284,
        "response":"import typing\n\ndef max_val(listval: typing.List[typing.Any]) -> typing.Optional[float]:\n    max_num = None\n    for item in listval:\n        if isinstance(item, bool):\n            continue\n        if isinstance(item, (int, float)):\n            if max_num is None or item > max_num:\n                max_num = item\n    return max_num"
    },
    {
        "id":285,
        "response":"import math\n\ndef sum_div(number):\n    if number <= 1:\n        return 0\n    total = 1\n    limit = int(math.isqrt(number))\n    for i in range(2, limit + 1):\n        if number % i == 0:\n            complement = number \/\/ i\n            total += i\n            if complement != i:\n                total += complement\n    return total"
    },
    {
        "id":286,
        "response":"import typing\n\ndef get_Inv_Count(arr: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n\n    def merge_sort(nums):\n        length = len(nums)\n        if length <= 1:\n            return nums, 0\n        mid = length \/\/ 2\n        left, inv_left = merge_sort(nums[:mid])\n        right, inv_right = merge_sort(nums[mid:])\n        merged = []\n        i = j = 0\n        inv_count = inv_left + inv_right\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    _, total_inv = merge_sort(arr)\n    return total_inv"
    },
    {
        "id":287,
        "response":"import typing\n\ndef flatten_list(list1: typing.List) -> typing.List:\n    result: typing.List = []\n    stack: typing.List[typing.Iterator] = [iter(list1)]\n    while stack:\n        try:\n            item = next(stack[-1])\n            if isinstance(item, list):\n                stack.append(iter(item))\n            else:\n                result.append(item)\n        except StopIteration:\n            stack.pop()\n    return result"
    },
    {
        "id":288,
        "response":"import typing\n\ndef intersection_nested_lists(l1: typing.List[int], l2: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    s = set(l1)\n    return [[x for x in sub if x in s] for sub in l2]"
    },
    {
        "id":289,
        "response":"import re\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    totals = {}\n    for name, value in stdata:\n        totals[name] = totals.get(name, 0) + value\n    max_name = None\n    max_sum = None\n    for name, total in totals.items():\n        if max_sum is None or total > max_sum:\n            max_name, max_sum = name, total\n    return (max_name, max_sum)"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    return float(math.comb(2 * n, n))"
    },
    {
        "id":291,
        "response":"import collections\n\ndef dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0 if not d else 1\n    max_depth = 0\n    stack = [(d, 1)]\n    while stack:\n        current, depth = stack.pop()\n        max_depth = max(max_depth, depth)\n        for v in current.values():\n            if isinstance(v, dict):\n                stack.append((v, depth + 1))\n    return max_depth"
    },
    {
        "id":292,
        "response":"import typing\n\ndef set_Bit_Number(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":293,
        "response":"import typing\n\ndef solve(a: typing.List[int], n: int) -> bool:\n    if len(a) < 2:\n        return False\n    seen = set()\n    for x in a:\n        if (n - x) in seen:\n            return True\n        seen.add(x)\n    return False"
    },
    {
        "id":294,
        "response":"import typing\n\ndef find_Element(arr: typing.List[int], ranges: typing.Any, rotations: int, index: int):\n    n = len(arr)\n    if n == 0 or index < 0 or index >= n:\n        return None\n    rot = rotations % n\n    return arr[(index - rot) % n]"
    },
    {
        "id":295,
        "response":"import re\n\ndef start_withp(words):\n    result = []\n    for line in words:\n        for word in line.split():\n            if word and word[0].lower() == 'p':\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return ()"
    },
    {
        "id":296,
        "response":"import typing\n\ndef max_sum_increasing_subseq(a: typing.List[int], n: int, index: int, k: int) -> typing.Tuple[int, int]:\n    if n == 0 or index < 0 or index >= n or k < 0 or k >= n or k <= index:\n        raise ValueError(\"Invalid indices\")\n    dp = [0] * n\n    max_sum = 0\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp[j] + a[i] > dp[i]:\n                dp[i] = dp[j] + a[i]\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    return max_sum, a[k]"
    },
    {
        "id":297,
        "response":"import typing\n\ndef colon_tuplex(tuplex: tuple, m: int, n: typing.Any) -> tuple:\n    lst = list(tuplex)\n    idx = m if m >= 0 else len(lst) + m\n    if isinstance(lst[idx], list):\n        new_elem = lst[idx] + [n]\n    else:\n        new_elem = n\n    lst[idx] = new_elem\n    return tuple(lst)"
    },
    {
        "id":298,
        "response":"import itertools\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if not nums1 or not nums2 or N <= 0:\n        return []\n    products = [a * b for a, b in itertools.product(nums1, nums2)]\n    products.sort(reverse=True)\n    return products[:N]"
    },
    {
        "id":299,
        "response":"def maximum(a, b):\n    return a if a >= b else b"
    },
    {
        "id":300,
        "response":"import typing\n\ndef string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)"
    },
    {
        "id":301,
        "response":"import typing\n\ndef set_left_most_unset_bit(n: int) -> int:\n    if n == 0:\n        return 1\n    msb = n.bit_length() - 1\n    for i in range(msb, -1, -1):\n        if not (n >> i) & 1:\n            return n | (1 << i)\n    return n | (1 << (msb + 1))"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    return (1.0\/3.0) * math.pi * (r ** 2) * h"
    },
    {
        "id":303,
        "response":"import typing\n\ndef pos_nos(list1: typing.List[int]) -> tuple:\n    return tuple(x for x in list1 if x > 0)"
    },
    {
        "id":304,
        "response":"import typing\n\ndef max_sum_rectangular_grid(grid: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0:\n        return 0\n    top = [grid[0][i] for i in range(n)]\n    bottom = [grid[1][i] for i in range(n)]\n    dp_none = 0\n    dp_top = top[0]\n    dp_bottom = bottom[0]\n    for i in range(1, n):\n        new_none = max(dp_none, dp_top, dp_bottom)\n        new_top = max(dp_none, dp_bottom) + top[i]\n        new_bottom = max(dp_none, dp_top) + bottom[i]\n        dp_none, dp_top, dp_bottom = new_none, new_top, new_bottom\n    return max(dp_none, dp_top, dp_bottom)"
    },
    {
        "id":305,
        "response":"import re\n\ndef find_Max_Len_Even(s: str) -> str:\n    words = s.split()\n    even_lengths = [len(w) for w in words if len(w) % 2 == 0]\n    if not even_lengths:\n        return \"\"\n    max_len = max(even_lengths)\n    for w in words:\n        if len(w) == max_len and len(w) % 2 == 0:\n            return w\n    return \"\""
    },
    {
        "id":306,
        "response":"import typing\n\ndef find_last_occurrence(A: typing.List[int], x: int) -> int:\n    low, high = 0, len(A) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if A[mid] == x:\n            result = mid\n            low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "id":307,
        "response":"import typing\n\ndef modified_encode(alist):\n    result = []\n    i = 0\n    n = len(alist)\n    while i < n:\n        count = 1\n        while i + count < n and alist[i + count] == alist[i]:\n            count += 1\n        if count > 1:\n            result.append([count, alist[i]])\n        else:\n            result.append(alist[i])\n        i += count\n    return result"
    },
    {
        "id":308,
        "response":"import math\n\ndef max_volume(s):\n    if s <= 0:\n        return 0\n    return (s ** 3) \/ 1728.0"
    },
    {
        "id":309,
        "response":"import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b[A-Za-z]{5}\\b', text)"
    },
    {
        "id":310,
        "response":"def sum_difference(n):\n    total = n * (n + 1) \/\/ 2\n    total_sq = total * total\n    sum_sq = n * (n + 1) * (2 * n + 1) \/\/ 6\n    return total_sq - sum_sq"
    },
    {
        "id":311,
        "response":"import typing\n\ndef find_demlo(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return \"\"\n    asc = [str(i) for i in range(1, n + 1)]\n    desc = [str(i) for i in range(n - 1, 0, -1)]\n    return \"\".join(asc + desc)"
    },
    {
        "id":312,
        "response":"import typing\n\ndef position_min(lst: typing.List[int]) -> typing.List[int]:\n    if not lst:\n        return []\n    min_val = min(lst)\n    return [i for i, v in enumerate(lst) if v == min_val]"
    },
    {
        "id":313,
        "response":"import typing\n\ndef right_rotate(arr: typing.List[int], n: int, out_of_place: int, cur: int) -> typing.List[int]:\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\ndef rearrange_alternate(arr: typing.List[int]) -> typing.List[int]:\n    n = len(arr)\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if (arr[index] >= 0 and arr[out_of_place] < 0) or (arr[index] < 0 and arr[out_of_place] >= 0):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out"
    },
    {
        "id":314,
        "response":"import typing\n\ndef sum_of_alternates(test_tuple: tuple) -> tuple:\n    sum_odd = 0\n    sum_even = 0\n    for idx, val in enumerate(test_tuple):\n        if idx % 2:\n            sum_odd += val\n        else:\n            sum_even += val\n    return (sum_odd, sum_even)"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n: int) -> int:\n    if n == 0:\n        return 0\n    if int(math.isqrt(n)) ** 2 == n:\n        return 1\n    for i in range(1, int(math.isqrt(n)) + 1):\n        if int(math.isqrt(n - i * i)) ** 2 == n - i * i:\n            return 2\n    m = n\n    while m % 4 == 0:\n        m \/\/= 4\n    if m % 8 == 7:\n        return 4\n    return 3"
    },
    {
        "id":316,
        "response":"import re\nfrom typing import List\n\ndef most_occurrences(test_list: List[str]) -> str:\n    counts = {}\n    for s in test_list:\n        for word in s.split():\n            counts[word] = counts.get(word, 0) + 1\n    if not counts:\n        return ''\n    max_word = max(counts.items(), key=lambda item: item[1])[0]\n    return max_word"
    },
    {
        "id":317,
        "response":"import typing\n\ndef check_isosceles(x: int, y: int, z: int) -> bool:\n    sides = sorted([x, y, z])\n    a, b, c = sides\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a * a + b * b == c * c"
    },
    {
        "id":318,
        "response":"import typing\n\ndef rotate_left(lst: typing.List[typing.Any], m: int, n: int) -> typing.List[typing.Any]:\n    if not lst:\n        return []\n    length = len(lst)\n    m %= length\n    rotated = lst[m:] + lst[:m]\n    if n is None:\n        return rotated\n    return rotated[:n]"
    },
    {
        "id":319,
        "response":"import typing\n\ndef neg_count(nums: typing.List[int]) -> int:\n    count = 0\n    for n in nums:\n        if n < 0:\n            count += 1\n    return count"
    },
    {
        "id":320,
        "response":"import re\n\ndef find_char(text):\n    return re.findall(r'\\b[A-Za-z]{3,5}\\b', text)"
    },
    {
        "id":321,
        "response":"import sys\n\ndef count_unset_bits(n: int) -> int:\n    if n == 0:\n        return 1\n    length = n.bit_length()\n    set_bits = n.bit_count()\n    return length - set_bits"
    },
    {
        "id":322,
        "response":"import typing\n\ndef char_frequency(str1: str) -> dict:\n    freq: dict = {}\n    for ch in str1:\n        freq[ch] = freq.get(ch, 0) + 1\n    return freq"
    },
    {
        "id":323,
        "response":"import typing\n\ndef Sort(sub_li: typing.List[typing.List]) -> typing.List[typing.List]:\n    return sorted(sub_li, key=lambda x: x[1])"
    },
    {
        "id":324,
        "response":"import typing\n\ndef check_Validity(a: float, b: float, c: float) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return (a + b > c) and (a + c > b) and (b + c > a)"
    },
    {
        "id":325,
        "response":"import typing\n\ndef ap_sum(a: int, n: int, d: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (2 * a + (n - 1) * d) \/\/ 2"
    },
    {
        "id":326,
        "response":"import re\n\ndef check_monthnum(monthname1):\n    return monthname1.strip().lower() == \"february\""
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text):\n    txt = text.strip()\n    if re.search(r'\\bpython[.!?]?$', txt):\n        return \"Found a match!\"\n    return \"Not a match!\""
    },
    {
        "id":328,
        "response":"import collections\n\ndef check_Equality(s):\n    freq = collections.Counter(s)\n    total = 0\n    for k in freq.values():\n        total += k * (k + 1) \/\/ 2\n    return total"
    },
    {
        "id":329,
        "response":"import math\n\ndef find_Divisor(x, y):\n    return math.gcd(abs(x), abs(y))"
    },
    {
        "id":330,
        "response":"import typing\n\ndef sum_three_smallest_nums(lst: typing.List[int]) -> int:\n    positives = [x for x in lst if x > 0]\n    positives.sort()\n    return sum(positives[:3])"
    },
    {
        "id":331,
        "response":"import typing\n\ndef set_to_tuple(s):\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"import heapq\n\ndef __init__(lists):\n    if not lists:\n        return ()\n    sorted_lists = [sorted(lst) for lst in lists]\n    heap = []\n    current_max = float('-inf')\n    for i, lst in enumerate(sorted_lists):\n        val = lst[0]\n        heap.append((val, i, 0))\n        if val > current_max:\n            current_max = val\n    heapq.heapify(heap)\n    best_start, best_end = float('-inf'), float('inf')\n    while True:\n        min_val, i, idx = heapq.heappop(heap)\n        if current_max - min_val < best_end - best_start or (current_max - min_val == best_end - best_start and min_val < best_start):\n            best_start, best_end = min_val, current_max\n        if idx + 1 == len(sorted_lists[i]):\n            break\n        next_val = sorted_lists[i][idx + 1]\n        heapq.heappush(heap, (next_val, i, idx + 1))\n        if next_val > current_max:\n            current_max = next_val\n    return (best_start, best_end)"
    },
    {
        "id":333,
        "response":"def dig_let(s):\n    letters = sum(1 for ch in s if ch.isalpha())\n    digits = sum(1 for ch in s if ch.isdigit())\n    return (letters, digits)"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n, m):\n    start = math.isqrt(n) + (0 if math.isqrt(n) ** 2 == n else 1)\n    end = math.isqrt(m)\n    return max(0, end - start + 1)"
    },
    {
        "id":335,
        "response":"import typing\n\ndef diff_consecutivenums(nums: typing.List[int]) -> typing.List[int]:\n    return [nums[i + 1] - nums[i] for i in range(len(nums) - 1)]"
    },
    {
        "id":336,
        "response":"import sys\n\ndef zigzag(n: int, k: int) -> int:\n    if k < 0 or k > n:\n        return 0\n    dp = [[0] * (i + 1) for i in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = 0\n"
    },
    {
        "id":337,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = m if m < n else n\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n: int) -> int:\n    if n % 2:\n        return 0\n    k = n \/\/ 2\n    return math.comb(2 * k, k) \/\/ (k + 1)"
    },
    {
        "id":339,
        "response":"import re\n\ndef check(string: str) -> str:\n    if not string:\n        return \"No\"\n    if re.fullmatch(r\"[01]+\", string):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "id":340,
        "response":"import collections\n\ndef minimum_Length(s: str) -> int:\n    if not s:\n        return 0\n    freq = collections.Counter(s)\n    max_freq = max(freq.values())\n    return len(s) - max_freq"
    },
    {
        "id":341,
        "response":"import collections\n\ndef first_Element(arr, n, k):\n    freq = collections.Counter(arr)\n    for x in arr:\n        if freq[x] == k:\n            return x\n    return -1"
    },
    {
        "id":342,
        "response":"def unique_Characters(s: str) -> bool:\n    return len(set(s)) == len(s)"
    },
    {
        "id":343,
        "response":"import typing\n\ndef remove_column(list1: typing.List[typing.List[int]], n: int) -> typing.List[typing.List[int]]:\n    return [row[:n] + row[n+1:] for row in list1]"
    },
    {
        "id":344,
        "response":"import typing\n\ndef tn_ap(a: int, n: int, d: int) -> int:\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"import itertools\n\ndef count_Rectangles(radius):\n    if radius < 0:\n        return 0\n    r2 = radius * radius\n    points = set()\n    xs = set()\n    ys = set()\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            if x * x + y * y <= r2:\n                points.add((x, y))\n                xs.add(x)\n                ys.add(y)\n    xs = sorted(xs)\n    ys = sorted(ys)\n    count = 0\n    for x1, x2 in itertools.combinations(xs, 2):\n        for y1, y2 in itertools.combinations(ys, 2):\n            if ((x1, y1) in points and (x1, y2) in points and\n                (x2, y1) in points and (x2, y2) in points):\n                count += 1\n    return count"
    },
    {
        "id":346,
        "response":"import typing\n\ndef find_angle(a: int, b: int) -> int:\n    return 180 - a - b"
    },
    {
        "id":347,
        "response":"import typing\n\ndef find_max(test_list: typing.List[typing.Tuple[int, ...]]) -> int:\n    if not test_list:\n        return None\n    return max(item for tup in test_list for item in tup)"
    },
    {
        "id":348,
        "response":"import typing\n\ndef moddiv_list(nums1: typing.List[int], nums2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda pair: pair[0] % pair[1], zip(nums1, nums2)))"
    },
    {
        "id":349,
        "response":""
    },
    {
        "id":350,
        "response":"import math\n\ndef get_carol(n):\n    return (2**n - 1)**2 - 2"
    },
    {
        "id":351,
        "response":"import typing\n\ndef remove_empty(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [item for item in list1 if not (isinstance(item, list) and len(item) == 0)]"
    },
    {
        "id":352,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        raise ValueError(\"List must not be empty\")\n    freq = collections.Counter(nums)\n    max_elem = None\n    max_count = -1\n    for num in nums:\n        cnt = freq[num]\n        if cnt > max_count:\n            max_count = cnt\n            max_elem = num\n    return max_elem"
    },
    {
        "id":353,
        "response":"import typing\n\ndef add_K_element(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    return [tuple(item + K for item in tpl) for tpl in test_list]"
    },
    {
        "id":354,
        "response":"import typing\n\ndef make_flip(ch: str) -> int:\n    n = len(ch)\n    if n <= 1:\n        return 0\n    flips_start_0 = 0\n    flips_start_1 = 0\n    for i, c in enumerate(ch):\n        expected_0 = '0' if i % 2 == 0 else '1'\n        expected_1 = '1' if i % 2 == 0 else '0'\n        if c != expected_0:\n            flips_start_0 += 1\n        if c != expected_1:\n            flips_start_1 += 1\n    return min(flips_start_0, flips_start_1)"
    },
    {
        "id":355,
        "response":"import math\n\ndef count_Digit(n):\n    n = abs(n)\n    if n == 0:\n        return 1\n    count = 0\n    while n:\n        n \/\/= 10\n        count += 1\n    return count"
    },
    {
        "id":356,
        "response":"from typing import List\n\ndef adjacent_num_product(list_nums: List[int]) -> int:\n    if len(list_nums) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "id":357,
        "response":"import typing\n\ndef __init__(root: typing.Optional[object]) -> bool:\n    def check(node):\n        if not node:\n            return True, 0\n        left_bal, left_h = check(getattr(node, \"left\", None))\n        if not left_bal:\n            return False, 0\n        right_bal, right_h = check(getattr(node, \"right\", None))\n        if not right_bal:\n            return False, 0\n        if abs(left_h - right_h) > 1:\n            return False, 0\n        return True, max(left_h, right_h) + 1\n    balanced, _ = check(root)\n    return balanced"
    },
    {
        "id":358,
        "response":"import typing\n\ndef repeat_tuples(test_tup: tuple, N: int) -> tuple:\n    return (test_tup,) * N"
    },
    {
        "id":359,
        "response":"def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)"
    },
    {
        "id":360,
        "response":"import typing\n\ndef float_sort(price: typing.List[typing.Tuple[str, str]]) -> typing.List[typing.Tuple[str, str]]:\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)"
    },
    {
        "id":361,
        "response":"import typing\n\ndef smallest_missing(A: typing.List[int], left_element: int, right_element: int) -> int:\n    present = set(A)\n    for x in range(left_element, right_element + 1):\n        if x not in present:\n            return x\n    return right_element + 1"
    },
    {
        "id":362,
        "response":"import heapq\n\ndef heap_assending(nums):\n    heap = list(nums)\n    heapq.heapify(heap)\n    sorted_nums = []\n    while heap:\n        sorted_nums.append(heapq.heappop(heap))\n    return sorted_nums"
    },
    {
        "id":363,
        "response":"import typing\n\ndef volume_cuboid(l: typing.Union[int, float], w: typing.Union[int, float], h: typing.Union[int, float]) -> typing.Union[int, float]:\n    return l * w * h"
    },
    {
        "id":364,
        "response":"import itertools\n\ndef permute_string(s: str):\n    if s == \"\":\n        return [\"\"]\n    perms = [''.join(p) for p in itertools.permutations(s)]\n    perms.sort()\n    return perms"
    },
    {
        "id":365,
        "response":"import math\n\ndef round_num(n, m):\n    if m == 0:\n        raise ValueError(\"m must not be zero\")\n    return int(round(n \/ m)) * m\n\nassert round_num(4722, 10) == 4720\nassert round_num(100, 25) == 100\nassert round_num(13, 5) == 15\nassert round_num(-7, 3) == -6\nassert round_num(7, 20) == 0"
    },
    {
        "id":366,
        "response":"import typing\n\ndef remove_replica(test_tup: tuple) -> tuple:\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append('MSP')\n        else:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":367,
        "response":"import re\n\ndef remove_Char(s: str, c: str) -> str:\n    if not s or not c:\n        return s\n    return s.replace(c, \"\")"
    },
    {
        "id":368,
        "response":"def move_first(test_list):\n    if len(test_list) <= 1:\n        return test_list\n    return [test_list[-1]] + test_list[:-1]"
    },
    {
        "id":369,
        "response":"def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)"
    },
    {
        "id":370,
        "response":"import typing\n\ndef multi_list(rownum: int, colnum: int) -> typing.List[typing.List[int]]:\n    if rownum == 0:\n        return []\n    return [[i * j for j in range(colnum)] for i in range(rownum)]"
    },
    {
        "id":371,
        "response":"import typing\n\ndef index_on_inner_list(list_data: typing.List[typing.Tuple], index_no: int) -> typing.List[typing.Tuple]:\n    return sorted(list_data, key=lambda x: x[index_no]) if list_data else []"
    },
    {
        "id":372,
        "response":"import typing\n\ndef find_rotation_count(A: typing.List[int]) -> int:\n    n = len(A)\n    if n == 0:\n        return 0\n    low, high = 0, n - 1\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if A[mid] > A[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low"
    },
    {
        "id":373,
        "response":"import typing\n\ndef even_bit_toggle_number(n:"
    },
    {
        "id":374,
        "response":"def frequency_Of_Smallest(n, arr):\n    if not arr:\n        return 0\n    smallest = min(arr)\n    return sum(1 for x in arr if x == smallest)"
    },
    {
        "id":375,
        "response":"import functools\n\n@functools.lru_cache(maxsize=None)\ndef get_perrin(n: int) -> int:\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "id":376,
        "response":""
    },
    {
        "id":377,
        "response":""
    },
    {
        "id":378,
        "response":"import typing\n\ndef highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":379,
        "response":"def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
    },
    {
        "id":380,
        "response":"import typing\n\ndef add_string(lst: typing.List[typing.Any], template: str) -> typing.List[str]:\n    result: typing.List[str] = []\n    if not lst:\n        return result\n    placeholder = \"{0}\"\n    for item in lst:\n        item_str = str(item)\n        if placeholder in template:\n            result.append(template.replace(placeholder, item_str))\n        else:\n            result.append(f\"{template}{item_str}\")\n    return result"
    },
    {
        "id":381,
        "response":"import typing\n\ndef convert_list_dictionary(l1: typing.List[typing.Any], l2: typing.List[typing.Any], l3: typing.List[typing.Any]) -> typing.List[dict]:\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]"
    },
    {
        "id":382,
        "response":"import sys\nfrom functools import lru_cache\n\nsys.setrecursionlimit(1000000)\n\n@lru_cache(maxsize=None)\ndef _max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    split_sum = _max_sum(n \/\/ 2) + _max_sum(n \/\/ 3) + _max_sum(n \/\/ 4) + _max_sum(n \/\/ 5)\n    return n if n > split_sum else split_sum\n\ndef get_max_sum(n: int) -> int:\n    return _max_sum(n)"
    },
    {
        "id":383,
        "response":"import typing\n\ndef max_length_list(input_list: typing.List[typing.List]) -> typing.Tuple[int, typing.List]:\n    if not input_list:\n        return (0, [])\n    max_list = max(input_list, key=lambda x: len(x))\n    return (len(max_list), max_list)"
    },
    {
        "id":384,
        "response":"import typing\n\ndef check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"import collections\n\ndef first_non_repeating_character(str1):\n    if not str1:\n        return None\n    freq = collections.Counter(str1)\n    for ch in str1:\n        if freq[ch] == 1:\n            return ch\n    return None"
    },
    {
        "id":386,
        "response":"import re\n\ndef check_char(string):\n    if not string:\n        return \"Invalid\"\n    return \"Valid\" if string[0] == string[-1] else \"Invalid\""
    },
    {
        "id":387,
        "response":"import typing\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    if (a <= b <= c) or (c <= b <= a):\n        return float(b)\n    if (b <= a <= c) or (c <= a <= b):\n        return float(a)\n    return float(c)"
    },
    {
        "id":388,
        "response":"import typing\n\ndef sum_of_digits(nums: typing.List[int]) -> int:\n    total = 0\n    for n in nums:\n        total += sum(int(d) for d in str(abs(n)))\n    return total"
    },
    {
        "id":389,
        "response":"import typing\n\ndef bitwise_xor(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"import typing\n\ndef extract_freq(test_list: typing.List[tuple]) -> int:\n    unique = set()\n    for tpl in test_list:\n        canonical = tuple(sorted(tpl))\n        unique.add(canonical)\n    return len(unique)"
    },
    {
        "id":391,
        "response":"import typing\n\ndef add_nested_tuples(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(tuple(a + b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"import sys\n\ndef ncr_modp(n, r, p):\n    if r < 0 or r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1 % p\n    r = r if r <= n - r else n - r\n    numerator = 1\n    denominator = 1\n    for i in range(1, r + 1):\n        numerator = (numerator * (n - r + i)) % p\n        denominator = (denominator * i) % p\n    inv_denominator = pow(denominator, p - 2, p)\n    return (numerator * inv_denominator) % p"
    },
    {
        "id":393,
        "response":"import re\n\ndef is_valid_URL(url: str) -> bool:\n    if not isinstance(url, str) or not url:\n        return False\n    pattern = re.compile(\n        r'^(?:http|https|ftp):\/\/'                     # scheme\n        r'(?:[A-Za-z0-9.-]+\\.[A-Za-z]{2,}|'\n        r'\\d{1,3}(?:\\.\\d{1,3}){3})'                    # domain or IP\n        r'(?:\\:\\d+)?'                                 # optional port\n        r'(?:\/[^\\s?#]*)?'                             # optional path\n        r'(?:\\?[^\\s#]*)?'                             # optional query\n        r'(?:\\#[^\\s]*)?$'                             # optional fragment\n    )\n    return bool(pattern.match(url))"
    },
    {
        "id":394,
        "response":"def minimum(a, b):\n    return a if a <= b else b"
    },
    {
        "id":395,
        "response":"import typing\n\ndef check_tuplex(tuplex: tuple, element) -> bool:\n    return element in tuplex"
    },
    {
        "id":396,
        "response":"import typing\n\ndef find_Parity(x: int) -> str:\n    return \"Even Parity\" if x % 2 == 0 else \"Odd Parity\""
    },
    {
        "id":397,
        "response":"import typing\n\ndef rearrange_bigger(n: int) -> int:\n    if n < 0:\n        return -1\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1 :] = reversed(digits[i + 1 :])\n    result = int(''.join(digits))\n    return result if result > n else -1"
    },
    {
        "id":398,
        "response":""
    },
    {
        "id":399,
        "response":""
    },
    {
        "id":400,
        "response":"import numbers\n\ndef min_val(listval):\n    minimum = None\n    for item in listval:\n        if isinstance(item, numbers.Real):\n            if minimum is None or item < minimum:\n                minimum = item\n    return minimum"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word):\n    word = word.lstrip('_')\n    word = re.sub(r'_+([a-zA-Z])', lambda m: m.group(1).upper(), word)\n    if word:\n        word = word[0].upper() + word[1:]\n    return word"
    },
    {
        "id":402,
        "response":"from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "id":403,
        "response":"import typing\n\ndef extract_nth_element(list1: typing.List[typing.Tuple], n: int) -> typing.List[typing.Any]:\n    result = []\n    for tup in list1:\n        if len(tup) > n:\n            result.append(tup[n])\n    return result"
    },
    {
        "id":404,
        "response":"import typing\n\ndef overlapping(list1: typing.List[int], list2: typing.List[int]) -> bool:\n    return bool(set(list1) & set(list2))"
    },
    {
        "id":405,
        "response":"import typing\n\ndef max_Product(arr: typing.List[int]) -> typing.Tuple[int, int]:\n    n = len(arr)\n    if n < 2:\n        return ()\n    max_prod = arr[0] * arr[1]\n    best_pair = (arr[0], arr[1])\n    for i in range(n):\n        ai = arr[i]\n        for j in range(i + 1, n):\n            prod = ai * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                best_pair = (ai, arr[j])\n    return best_pair"
    },
    {
        "id":406,
        "response":"import typing\n\ndef breakSum(n: int) -> int:\n    s = str(abs(n))\n    length = len(s)\n    if length < 3:\n        return n\n    max_sum = 0\n    for i in range(1, length - 1):\n        for j in range(i + 1, length):\n            part1 = int(s[:i])\n            part2 = int(s[i:j])\n            part3 = int(s[j:])\n            current_sum = part1 + part2 + part3\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum if n >= 0 else -max_sum"
    },
    {
        "id":407,
        "response":"import collections\n\ndef group_tuples(Input):\n    groups = {}\n    order = []\n    for tpl in Input:\n        if not tpl:\n            continue\n        key = tpl[0]\n        rest = tpl[1:]\n        if key not in groups:\n            groups[key] = []\n            order.append(key)\n        groups[key].extend(rest)\n    result = []\n    for key in order:\n        result.append((key, *groups[key]))\n    return result"
    },
    {
        "id":408,
        "response":"import typing\n\ndef Find_Max(lst: typing.List[typing.List]) -> typing.List:\n    if not lst:\n        return []\n    max_len = -1\n    result: typing.List = []\n    for sub in lst:\n        if len(sub) > max_len:\n            max_len = len(sub)\n            result = sub\n    return result"
    },
    {
        "id":409,
        "response":"import typing\n\ndef round_and_sum(list1: typing.List[float]) -> int:\n    if not list1:\n        return 0\n    rounded_sum = sum(round(num) for num in list1)\n    return rounded_sum * len(list1)"
    },
    {
        "id":410,
        "response":"import math\n\ndef cube_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 2 * n * n * (n + 1) * (n + 1)"
    },
    {
        "id":411,
        "response":"import typing\n\ndef concatenate_tuple(test_tup: tuple) -> str:\n    if not test_tup:\n        return ''\n    return '-'.join(str(item) for item in test_tup)"
    },
    {
        "id":412,
        "response":"import typing\n\ndef find_Average_Of_Cube(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    return (n * (n + 1) ** 2) \/ 4.0"
    },
    {
        "id":413,
        "response":""
    },
    {
        "id":414,
        "response":"import typing\n\ndef extract_rear(test_tuple: tuple) -> list:\n    return [s[-1] if s else '' for s in test_tuple]"
    },
    {
        "id":415,
        "response":"import typing\n\ndef count_element_in_list(list1: typing.List[typing.List[typing.Any]], x: typing.Any) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "id":416,
        "response":"from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt: str) -> str:\n    match = re.fullmatch(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\" if match else dt"
    },
    {
        "id":418,
        "response":"import typing\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list"
    },
    {
        "id":419,
        "response":"import typing\n\ndef and_tuples(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":420,
        "response":"import math\n\ndef parabola_directrix(a, b, c):\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must not be zero for a parabola.\")\n    vertex_y = c - (b ** 2) \/ (4 * a)\n    directrix_y = vertex_y - 1 \/ (4 * a)\n    return directrix_y"
    },
    {
        "id":421,
        "response":"import typing\n\ndef common_element(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> bool:\n    return bool(set(list1) & set(list2))"
    },
    {
        "id":422,
        "response":"import typing\n\ndef median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":"import typing\n\ndef check_greater(arr: typing.List[int], number: int) -> str:\n    if not arr or all(number > x for x in arr):\n        return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    return text if re.search(r'b', text) else 'Not matched!'"
    },
    {
        "id":425,
        "response":"def last_Digit(n):\n    return abs(n) % 10"
    },
    {
        "id":426,
        "response":"import typing\n\ndef neg_nos(list1: typing.List[int]) -> typing.Tuple[int, ...]:\n    return tuple(x for x in list1 if x < 0)"
    },
    {
        "id":427,
        "response":"import re\ndef remove_odd(str1):\n    return str1[1::2]"
    },
    {
        "id":428,
        "response":"import collections\n\ndef count_bidirectional(test_list):\n    cnt = collections.Counter(test_list)\n    total = 0\n    processed = set()\n    for a, b in cnt:\n        if (a, b) in processed:\n            continue\n        if a == b:\n            total += cnt[(a, b)]\n            processed.add((a, b))\n        else:\n            rev = (b, a)\n            if"
    },
    {
        "id":429,
        "response":"import typing\n\ndef multiple_to_single(L: typing.List[int]) -> int:\n    if not L:\n        return 0\n    return int(''.join(str(x) for x in L))"
    },
    {
        "id":430,
        "response":"import re\n\ndef find_adverb_position(text):\n    match = re.search(r'\\b([A-Za-z]+ly)\\b', text)\n    if match:\n        return (match.start(), match.end(), match.group(1))\n    return None"
    },
    {
        "id":431,
        "response":"import math\n\ndef surfacearea_cube(l):\n    return 6 * (l ** 2)"
    },
    {
        "id":432,
        "response":"import typing\n\ndef positive_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    positive = sum(1 for x in nums if x > 0)\n    return round(positive \/ len(nums), 2)"
    },
    {
        "id":433,
        "response":"import typing\n\ndef largest_neg(list1: typing.List[int]) -> typing.Optional[int]:\n    min_neg = None\n    for x in list1:\n        if x < 0:\n            if min_neg is None or x < min_neg:\n                min_neg = x\n    return min_neg"
    },
    {
        "id":434,
        "response":"import typing\n\ndef trim_tuple(test_list: typing.List[tuple], K: int) -> str:\n    trimmed = [(t[K],) for t in test_list]\n    return str(trimmed)"
    },
    {
        "id":435,
        "response":"import typing\n\ndef index_multiplication(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(tuple(a * b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":"import typing\n\ndef count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum(tup.count(item) for item in lst)"
    },
    {
        "id":437,
        "response":"import typing\n\ndef cube_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x ** 3, nums))"
    },
    {
        "id":438,
        "response":"import math\n\ndef cal_sum(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    limit = int(math.isqrt(n))\n    for i in range(2, limit + 1):\n        if sieve[i]:\n            step = i\n            start = i * i\n            sieve[start:n+1:step] = [False] * ((n - start) \/\/ step + 1)\n    return sum(i for i, is_prime in enumerate(sieve) if is_prime)"
    },
    {
        "id":439,
        "response":"import math\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    area2 = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)\n    return 'Yes' if area2 != 0 else 'No'"
    },
    {
        "id":440,
        "response":"import typing\n\ndef extract_string(strings: typing.List[str], l: int) -> typing.List[str]:\n    return [s for s in strings if len(s) == l]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":"import typing\n\ndef loss_amount(actual_cost: int, sale_amount: int) -> typing.Optional[int]:\n    if actual_cost > sale_amount and actual_cost > 1500:\n        return actual_cost - sale_amount\n    return None"
    },
    {
        "id":443,
        "response":"import math\n\ndef sumofFactors(n):\n    if n < 2:\n        return 0\n    total = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            d1 = i\n            d2 = n \/\/ i\n            if d1 % 2 == 0:\n                total += d1\n            if d2 != d1 and d2 % 2 == 0:\n                total += d2\n    return total"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    return \"Found a match!\" if pattern.search(text) else \"No match!\""
    },
    {
        "id":445,
        "response":""
    },
    {
        "id":446,
        "response":"import typing\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"import typing\n\ndef Find_Min(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    if not lst:\n        return []\n    min_len = None\n    min_sub = []\n    for sub in lst:\n        l = len(sub)\n        if min_len is None or l < min_len:\n            min_len = l\n            min_sub = sub\n    return min_sub"
    },
    {
        "id":448,
        "response":"def rectangle_area(l, b):\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]', '', str1)"
    },
    {
        "id":450,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    return [sub[0] for sub in lst if sub]"
    },
    {
        "id":451,
        "response":"def upper_ctr(str):\n    return sum(1 for c in str if c.isupper())"
    },
    {
        "id":452,
        "response":"import itertools\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        for combo in itertools.combinations(list1, r):\n            result.append(list(combo))\n    return result"
    },
    {
        "id":453,
        "response":"import typing\n\ndef max_subarray_product(arr: typing.List[int]) -> int:\n    if not arr:\n        raise ValueError(\"Array must contain at least one element\")\n    max_prod = arr[0]\n    max_ending = arr[0]\n    min_ending = arr[0]\n    for num in arr[1:]:\n        if num == 0:\n            max_ending, min_ending = 0, 0\n            max_prod = max(max_prod, 0)\n            continue\n        candidates = (num, max_ending * num, min_ending * num)\n        max_ending = max(candidates)\n        min_ending = min(candidates)\n        max_prod = max(max_prod, max_ending)\n    return max_prod"
    },
    {
        "id":454,
        "response":"import typing\n\ndef check_value(data: dict, n: int) -> bool:\n    return all(value == n for value in data.values())"
    },
    {
        "id":455,
        "response":"import typing\n\ndef drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "id":456,
        "response":"import math\n\ndef find_peak_util(arr, n):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        left = arr[mid - 1] if mid > 0 else -math.inf\n        right = arr[mid + 1] if mid < n - 1 else -math.inf\n        if arr[mid] >= left and arr[mid] >= right:\n            return mid\n        elif left > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1"
    },
    {
        "id":457,
        "response":"import typing\n\ndef decimal_to_Octal(deciNum: int) -> int:\n    if deciNum == 0:\n        return 0\n    result = 0\n    place = 1\n    while deciNum > 0:\n        result += (deciNum % 8) * place\n        deciNum \/\/= 8\n        place *= 10\n    return result"
    },
    {
        "id":458,
        "response":""
    },
    {
        "id":459,
        "response":"import typing\n\ndef max_profit(price: typing.List[int], k: int) -> int:\n    if not price or k <= 0:\n        return 0\n    n = len(price)\n    if k >= n \/\/ 2:\n        return sum(max(price[i + 1] - price[i], 0) for i in range(n - 1))\n    dp = [[0] * n for _ in range(k + 1)]\n    for t in range(1, k + 1):\n        max_diff = -price[0]\n        for i in range(1, n):\n            dp[t][i] = max(dp[t][i - 1], price[i] + max_diff)\n            max_diff = max(max_diff, dp[t - 1][i] - price[i])\n    return dp[k][n - 1]"
    },
    {
        "id":460,
        "response":"import typing\n\ndef add_pairwise(test_tup: tuple) -> tuple:\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))"
    },
    {
        "id":461,
        "response":"import typing\n\ndef find_remainder(arr: typing.List[int], lens: int, n: int) -> int:\n    if n == 0:\n        return 0\n    rem = 1 % n\n    for i in range(lens):\n        rem = (rem * (arr[i] % n)) % n\n    return rem"
    },
    {
        "id":462,
        "response":"import typing\n\ndef check_Consecutive(l: typing.List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    for i in range(1, len(l)):\n        if l[i] != l[i - 1] + 1:\n            return False\n    return True"
    },
    {
        "id":463,
        "response":"import itertools\n\ndef tuple_intersection(test_list1, test_list2):\n    set2 = {frozenset(t) for t in test_list2}\n    result = set()\n    for t in test_list1:\n        if frozenset(t) in set2:\n            result.add(tuple(sorted(t)))\n    return result"
    },
    {
        "id":464,
        "response":"import re\n\ndef replace_char(str1, ch, newch):\n    if not str1 or not ch:\n        return str1\n    return str1.replace(ch, newch)"
    },
    {
        "id":465,
        "response":"import typing\n\ndef sort_counter(dict1: typing.Dict) -> typing.List[typing.Tuple]:\n    return sorted(dict1.items(), key=lambda kv: (-kv[1], kv[0]))"
    },
    {
        "id":466,
        "response":"import typing\n\ndef big_sum(nums: typing.List[int]) -> int:\n    if not nums:\n        return 0\n    return max(nums) + min(nums)"
    },
    {
        "id":467,
        "response":"import typing\n\ndef is_lower(string: str) -> str:\n    return string.lower()\n"
    },
    {
        "id":468,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_lowercase(str1: str) -> str:\n    return ''.join(ch for ch in str1 if not ch.islower())"
    },
    {
        "id":469,
        "response":"import math\n\ndef first_Digit(n):\n    n = abs(int(n))\n    if n == 0:\n        return 0\n    while n >= 10:\n        n \/\/= 10\n    return n"
    },
    {
        "id":470,
        "response":"import collections\n\ndef get_max_occuring_char(str1: str) -> str:\n    if not str1:\n        return \"\"\n    freq = collections.Counter(str1)\n    max_count = max(freq.values())\n    for ch in str1:\n        if freq[ch] == max_count:\n            return ch\n    return \"\""
    },
    {
        "id":471,
        "response":"import typing\n\ndef is_subset_sum(arr: typing.List[int], n: int, target: int) -> bool:\n    if target == 0:\n        return True\n    if n == 0 or not arr:\n        return False\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for i in range(min(n, len(arr))):\n        num = arr[i]\n        if num > target:\n            continue\n        for s in range(target, num - 1, -1):\n            if dp[s - num]:\n                dp[s] = True\n    return dp[target]"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    return 'Yes' if re.search(r'[A-Z][a-z]', text) else 'No'"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    if x == 1:\n        return 1\n    n_needed = 1\n    temp = x\n    i = 2\n    while i * i <= temp:\n        if temp % i == 0:\n            exp = 0\n            while temp % i == 0:\n                temp \/\/= i\n                exp += 1\n            low, high = 1, i * exp\n            while True:\n                cnt = 0\n                t = high\n                while t:\n                    t \/\/= i\n                    cnt += t\n                if cnt >= exp:\n                    break\n                high *= 2\n            while low < high:\n                mid = (low + high) \/\/ 2\n                cnt = 0\n                t = mid\n                while t:\n                    t \/\/= i\n                    cnt += t\n                if cnt >= exp:\n                    high = mid\n                else:\n                    low = mid + 1\n            n_needed = max(n_needed, low)\n        i += 1\n    if temp > 1:\n        p = temp\n        exp = 1\n        low, high = 1, p * exp\n        while True:\n            cnt = 0\n            t = high\n            while t:\n                t \/\/= p\n                cnt += t\n            if cnt >= exp:\n                break\n            high *= 2\n        while low < high:\n            mid = (low + high) \/\/ 2\n            cnt = 0\n            t = mid\n            while t:\n                t \/\/= p\n                cnt += t\n            if cnt >= exp:\n                high = mid\n            else:\n                low = mid + 1\n        n_needed = max(n_needed, low)\n    return n_needed"
    },
    {
        "id":474,
        "response":"import typing\n\ndef remove_matching_tuple(test_list1, test_list2):\n    remove_set = set(test_list2)\n    return [t for t in test_list1 if t not in remove_set]"
    },
    {
        "id":475,
        "response":"import typing\n\ndef is_palindrome(arr: typing.List[int], n: int) -> int:\n    limit = min(n, len(arr))\n    max_pal = -1\n    for i in range(limit):\n        num = arr[i]\n        s = str(num)\n        if s == s[::-1]:\n            if num > max_pal:\n                max_pal = num\n    return max_pal"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n, r, p):\n    if r < 0 or r > n:\n        return 0.0\n    return math.comb(n, r) * (p ** r) * ((1 - p) ** (n - r))"
    },
    {
        "id":477,
        "response":"import typing\n\ndef sort_tuple(tup: typing.List[tuple]) -> typing.List[tuple]:\n    return sorted(tup, key=lambda x: x[-1])"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    if a <= 0:\n        return 0.0\n    return (5 * a * a) \/ (4 * math.tan(math.pi \/ 5))"
    },
    {
        "id":479,
        "response":"import typing\n\ndef frequency_Of_Largest(n: int, arr: list[int]) -> int:\n    if n == 0 or not arr:\n        return 0\n    max_val = arr[0]\n    for v in arr:\n        if v > max_val:\n            max_val = v\n    count = 0\n    for v in arr:\n        if v == max_val:\n            count += 1\n    return count"
    },
    {
        "id":480,
        "response":"import typing\n\ndef extract_symmetric(test_list: typing.List[typing.Tuple[int, int]]) -> typing.Set[typing.Tuple[int, int]]:\n    pair_set = set(test_list)\n    result: typing.Set[typing.Tuple[int, int]] = set()\n    for a, b in pair_set:\n        if a != b and (b, a) in pair_set:\n            result.add((a, b) if a < b else (b, a))\n    return result"
    },
    {
        "id":481,
        "response":"import math\n\ndef sum_gp(a, n, r):\n    if n <= 0:\n        return 0\n    if r == 1:\n        return a * n\n    if r == 0:\n        return a\n    return a * (pow(r, n) - 1) \/\/ (r - 1) if isinstance(a, int) and isinstance(r, int) else a * (pow(r, n) - 1) \/ (r - 1)"
    },
    {
        "id":482,
        "response":"import typing\n\ndef binary_search(item_list: typing.List[int], item: int) -> bool:\n    left, right = 0, len(item_list) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        mid_val = item_list[mid]\n        if mid_val == item:\n            return True\n        elif mid_val < item:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "id":483,
        "response":"import math\nfrom typing import List, Tuple\n\ndef calculate_polygons(startx: float, starty: float, endx: float, endy: float, radius: float) -> List[Tuple[Tuple[float, float], ...]]:\n    if radius <= 0:\n        return []\n    min_x, max_x = sorted((startx, endx))\n    min_y, max_y = sorted((starty, endy))\n    horiz_spacing = 1.5 * radius\n    vert_spacing = math.sqrt(3) * radius\n    hexagons: List[Tuple[Tuple[float, float], ...]] = []\n    row = 0\n    y = min_y\n    while y <= max_y:\n        offset = 0.0 if row % 2 == 0 else 0.75 * radius\n        x = min_x + offset\n        while x <= max_x:\n            vertices = []\n            for i in range(6):\n                angle_rad = math.radians(60 * i - 30)\n                vx = x + radius * math.cos(angle_rad)\n                vy = y + radius * math.sin(angle_rad)\n                vertices.append((vx, vy))\n            hexagons.append(tuple(vertices))\n            x += horiz_spacing\n        y += vert_spacing\n        row += 1\n    return hexagons"
    },
    {
        "id":484,
        "response":"import typing\n\ndef binary_to_integer(test_tup: typing.Tuple[int, ...]) -> str:\n    value = 0\n    for bit in test_tup:\n        value = (value << 1) | (bit & 1)\n    return str(value)"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\n\ndef heap_queue_smallest(nums, n):\n    if n <= 0 or not nums:\n        return []\n    heap = nums[:]\n    heapq.heapify(heap)\n    count = min(n, len(heap))\n    return [heapq.heappop(heap) for _ in range(count)]"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r * r + h * h)\n    return math.pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"import math\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x"
    },
    {
        "id":489,
        "response":"def diameter_circle(r):\n    return r * 2"
    },
    {
        "id":490,
        "response":"import typing\n\ndef concatenate_elements(elements: typing.List[str]) -> str:\n    if not elements:\n        return ''\n    return ' '.join(elements)"
    },
    {
        "id":491,
        "response":"import typing\n\ndef min_cost(cost: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if not cost or m < 0 or n < 0:\n        return 0\n    rows = len(cost)\n    cols = len(cost[0])\n    if m >= rows or n >= cols:\n        raise IndexError(\"Target position out of matrix bounds\")\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"import typing\n\ndef similar_elements(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    set2 = set(test_tup2)\n    result = tuple(item for item in test_tup1 if item in set2)\n    return result"
    },
    {
        "id":493,
        "response":"import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "id":494,
        "response":"import heapq\n\ndef heap_queue_largest(nums, n):\n    if n <= 0:\n        return []\n    return heapq.nlargest(n, nums)"
    },
    {
        "id":495,
        "response":"import typing\n\ndef count_ways(n: int) -> int:\n    if n % 2 == 1:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    if n >= 2:\n        dp[2] = 3\n    for i in range(4, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]"
    },
    {
        "id":496,
        "response":"import sys\n\ndef is_Power_Of_Two(a: int, b: int) -> bool:\n    diff = a ^ b\n    return diff != 0 and (diff & (diff - 1)) == 0"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"def square_nums(nums):\n    return list(map(lambda x: x * x, nums))"
    },
    {
        "id":499,
        "response":"import typing\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    lps = [0] * n\n    length = 0\n    i = 1\n    while i < n:\n        if s[i] == s[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        else:\n            if length != 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n    period = n - lps[-1]\n    if n % period == 0:\n        return period\n    return n"
    },
    {
        "id":500,
        "response":"import heapq\n\ndef small_nnum(list1, n):\n    if n <= 0:\n        return []\n    return heapq.nsmallest(n, list1)"
    }
]