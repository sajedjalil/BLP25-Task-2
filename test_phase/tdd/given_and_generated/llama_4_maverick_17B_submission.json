[
    {
        "id":1,
        "response":"```python\ndef remove_Occ(s, ch):\n    try:\n        first_index = s.index(ch)\n        last_index = s.rindex(ch)\n        if first_index == last_index:\n            return s.replace(ch, '', 1)\n        else:\n            return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    except ValueError:\n        return s\n```"
    },
    {
        "id":2,
        "response":"```python\ndef sort_matrix(M):\n    M.sort(key=sum)\n    return M\n```"
    },
    {
        "id":3,
        "response":"```python\nfrom collections import Counter\n\ndef count_common(words):\n    counter = Counter(words)\n    most_common = counter.most_common(4)\n    return most_common\n```"
    },
    {
        "id":4,
        "response":"```python\ndef find_Volume(l, b, h):\n    return (0.5 * l * b * h)\n\nassert find_Volume(10, 8, 6) == 240.0\nassert find_Volume(5, 4, 3) == 30.0\nassert find_Volume(0, 4, 3) == 0.0\nassert find_Volume(7, 0, 9) == 0.0\nassert find_Volume(3, 4, 0) == 0.0\n```"
    },
    {
        "id":5,
        "response":"```python\ndef split_lowerstring(text):\n    return [char for char in text if char.islower()]\n```"
    },
    {
        "id":6,
        "response":"```python\nimport re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":7,
        "response":"```python\ndef square_perimeter(a):\n    return 4 * a\n```"
    },
    {
        "id":8,
        "response":"```python\ndef str_to_list(s1, s2):\n    s2_set = set(s2)\n    return ''.join([char for char in s1 if char not in s2_set])\n```"
    },
    {
        "id":9,
        "response":"```python\ndef test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```"
    },
    {
        "id":10,
        "response":"```python\ndef is_woodall(x):\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        if woodall_num == x:\n            return True\n        elif woodall_num > x:\n            return False\n        n += 1\n```"
    },
    {
        "id":11,
        "response":"```python\ndef multiples_of_num(m,n):\n    if m == 0:\n        return []\n    return [i * n for i in range(1, m + 1)]\n```"
    },
    {
        "id":12,
        "response":"```python\ndef find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n```"
    },
    {
        "id":13,
        "response":"```python\ndef maximum_Sum(list1):\n    return max(sum(sublist) for sublist in list1)\n```"
    },
    {
        "id":14,
        "response":"```python\ndef binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary > 0:\n        digit = binary % 10\n        decimal += digit * (2 ** power)\n        binary \/\/= 10\n        power += 1\n    return decimal\n```"
    },
    {
        "id":15,
        "response":"```python\nfrom collections import Counter\n\ndef find_Product(arr, n):\n    count = Counter(arr)\n    product = 1\n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n    return product\n```"
    },
    {
        "id":16,
        "response":"```python\ndef check_k_elements(test_list, K):\n    return all(len(tup) == K for tup in test_list)\n```"
    },
    {
        "id":17,
        "response":"```python\nimport re\ndef remove(list):\n    return [re.sub('\\d', '', s) for s in list]\n```"
    },
    {
        "id":18,
        "response":"```python\nimport math\n\ndef binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result = result * (n - i)\n        result = result \/\/ (i + 1)\n    return result\n```"
    },
    {
        "id":19,
        "response":"```python\ndef get_Odd_Occurrence(arr, arr_size):\n    res = 0\n    for i in range(arr_size):\n        res = res ^ arr[i]\n    return res\n```"
    },
    {
        "id":20,
        "response":"```python\ndef check_Equality(s):\n    count = 0\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        count += char_count[char] * (char_count[char] + 1) \/\/ 2\n    return count\n```"
    },
    {
        "id":21,
        "response":"```python\nimport heapq\nfrom typing import List\nfrom collections import Counter\n\ndef func(nums: List[List[int]], k: int) -> List[int]:\n    count = Counter(num for sublist in nums for num in sublist)\n    return heapq.nlargest(k, count.keys(), key=count.get)\n```"
    },
    {
        "id":22,
        "response":"```python\ndef max_Prime_Factors(n):\n    i = 2\n    max_prime = -1\n    while i * i <= n:\n        while n % i == 0:\n            max_prime = i\n            n \/\/= i\n        i += 1\n    if n > 1:\n        max_prime = n\n    return max_prime\n```"
    },
    {
        "id":23,
        "response":"```python\ndef decimal_To_Binary(N):\n    return bin(N)[2:]\n```"
    },
    {
        "id":24,
        "response":"```python\ndef find_missing(ar, N):\n    total_sum = N * (N + 1) \/\/ 2\n    return total_sum - sum(ar)\n```"
    },
    {
        "id":25,
        "response":"```python\ndef find_rect_num(n):\n    return n * (n + 1)\n```"
    },
    {
        "id":26,
        "response":"```python\ndef find_Nth_Digit(p, q, N):\n    from decimal import Decimal, getcontext\n    getcontext().prec = N + 10\n    fraction = str(Decimal(p) \/ Decimal(q))[2:]\n    if len(fraction) >= N:\n        return int(fraction[N-1])\n    else:\n        return 0\n```"
    },
    {
        "id":27,
        "response":"```python\ndef sort_mixed_list(mixed_list):\n    ints = sorted([x for x in mixed_list if isinstance(x, int)])\n    strs = sorted([x for x in mixed_list if isinstance(x, str)])\n    return ints + strs\n```"
    },
    {
        "id":28,
        "response":"```python\ndef div_even_odd(list1):\n    first_even = next((num for num in list1 if num % 2 == 0), None)\n    first_odd = next((num for num in list1 if num % 2 != 0), None)\n    if first_even is None or first_odd is None:\n        return None\n    return first_odd \/ first_even\n```"
    },
    {
        "id":29,
        "response":"```python\nimport heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    max_heap = [(-count, char) for char, count in counter.items()]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap:\n        first_count, first_char = heapq.heappop(max_heap)\n        if result and result[-1] == first_char:\n            if not max_heap:\n                return ''\n            second_count, second_char = heapq.heappop(max_heap)\n            result.append(second_char)\n            if second_count + 1 != 0:\n                heapq.heappush(max_heap, (second_count + 1, second_char))\n            heapq.heappush(max_heap, (first_count, first_char))\n        else:\n            result.append(first_char)\n            if first_count + 1 != 0:\n                heapq.heappush(max_heap, (first_count + 1, first_char))\n    return ''.join(result)\n```"
    },
    {
        "id":30,
        "response":"```python\nfrom collections import Counter\nimport itertools\n\ndef freq_element(nums):\n    flat_list = list(itertools.chain(*nums))\n    return dict(Counter(flat_list))\n```"
    },
    {
        "id":31,
        "response":"```python\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n```"
    },
    {
        "id":32,
        "response":"```python\nfrom collections import Counter\n\ndef find_Sum(arr, n):\n    count_dict = Counter(arr)\n    return sum(num * count for num, count in count_dict.items() if count > 1)\n```"
    },
    {
        "id":33,
        "response":"```python\nimport re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":34,
        "response":"```python\nimport re\n\ndef text_match_string(text):\n    pattern = re.compile(r'^python')\n    if pattern.match(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":35,
        "response":"```python\nimport math\n\ndef find_gcd(arr):\n    gcd = arr[0]\n    for num in arr[1:]:\n        gcd = math.gcd(gcd, num)\n    return gcd\n```"
    },
    {
        "id":36,
        "response":"```python\ndef test_distinct(data):\n    return len(data) == len(set(data))\n```"
    },
    {
        "id":37,
        "response":"```python\nimport math\n\ndef compute_Last_Digit(A, B):\n    if B > A:\n        return 0\n    result = 1\n    for i in range(B+1, A+1):\n        result *= i\n        result %= 10\n    return result\n```"
    },
    {
        "id":38,
        "response":"```python\ndef odd_bit_set_number(n):\n    mask = 0xAAAAAAAA\n    return n | mask\n```"
    },
    {
        "id":39,
        "response":"```python\ndef specified_element(nums, N):\n    return [num[N] for num in nums if len(num) > N]\n```"
    },
    {
        "id":40,
        "response":"```python\ndef min_length_list(input_list):\n    min_len = min(len(sublist) for sublist in input_list)\n    min_len_list = [sublist for sublist in input_list if len(sublist) == min_len]\n    return (min_len, min_len_list[0])\n```"
    },
    {
        "id":41,
        "response":"```python\ndef check_equilateral(x, y, z):\n    return x == y == z\n```"
    },
    {
        "id":42,
        "response":"```python\ndef parallelogram_area(b, h):\n    return b * h\n```"
    },
    {
        "id":43,
        "response":"```python\ndef check_Equality(s):\n    if not s:\n        return 'Invalid Input'\n    if s[0] == s[-1]:\n        return 'Equal'\n    else:\n        return 'Not Equal'\n```"
    },
    {
        "id":44,
        "response":"```python\ndef counting_sort(my_list):\n    if not my_list:\n        return my_list\n\n    max_val = max(my_list)\n    min_val = min(my_list)\n    count = [0] * (max_val - min_val + 1)\n    output = [0] * len(my_list)\n\n    for num in my_list:\n        count[num - min_val] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for num in my_list:\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n\n    return output\n```"
    },
    {
        "id":45,
        "response":"```python\ndef tn_gp(a, n, r):\n    return a * (r ** (n - 1))\n```"
    },
    {
        "id":46,
        "response":"```python\ndef rev(num):\n    reversed_num = int(str(abs(num))[::-1])\n    return num == 2 * reversed_num - 1\n```"
    },
    {
        "id":47,
        "response":"```python\nfrom functools import cmp_to_key\n\ndef compare(a, b):\n    ab = str(a) + str(b)\n    ba = str(b) + str(a)\n    return int(ba) - int(ab)\n\ndef find_Max_Num(arr, n):\n    arr.sort(key=cmp_to_key(compare))\n    return int(''.join(map(str, arr))) if arr[0] != 0 else 0\n```"
    },
    {
        "id":48,
        "response":"```python\ndef opposite_Signs(x,y):\n    return (x * y) < 0\n\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(-1,2) == True\nassert opposite_Signs(1,2) == False\nassert opposite_Signs(-1,-2) == False\nassert opposite_Signs(0,2) == False\n```"
    },
    {
        "id":49,
        "response":"```python\ndef is_octagonal(n):\n    return n*(3*n-2)\n```"
    },
    {
        "id":50,
        "response":"```python\ndef max_len_sub(arr, n):\n    if n < 2:\n        return n\n    max_len = 1\n    curr_len = 2\n    diff = arr[1] - arr[0]\n    for i in range(2, n):\n        if arr[i] - arr[i-1] == diff:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 2\n            diff = arr[i] - arr[i-1]\n    return max(max_len, curr_len)\n```"
    },
    {
        "id":51,
        "response":"```python\ndef count_Substrings(s, n):\n    count = 0\n    for i in range(n):\n        num = 0\n        for j in range(i, n):\n            num = num * 10 + int(s[j])\n            if num == j - i + 1:\n                count += 1\n    return count\n```"
    },
    {
        "id":52,
        "response":"```python\ndef smallest_num(xs):\n    return min(xs)\n```"
    },
    {
        "id":53,
        "response":"```python\ndef max_difference(test_list):\n    return max(abs(x - y) for x, y in test_list)\n```"
    },
    {
        "id":54,
        "response":"```python\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n```"
    },
    {
        "id":55,
        "response":"```python\ndef recursive_list_sum(data_list):\n    total = 0\n    stack = [data_list]\n    while stack:\n        current_list = stack.pop()\n        for element in current_list:\n            if isinstance(element, list):\n                stack.append(element)\n            else:\n                total += element\n    return total\n```"
    },
    {
        "id":56,
        "response":"```python\ndef pos_count(lst):\n    return sum(1 for num in lst if num > 0)\n```"
    },
    {
        "id":57,
        "response":"```python\ndef bell_number(n):\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n```"
    },
    {
        "id":58,
        "response":"```python\ndef is_Monotonic(A):\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n```"
    },
    {
        "id":59,
        "response":"```python\ndef is_sublist(lst, sub):\n    n = len(sub)\n    return any(sub == lst[i:i+n] for i in range(len(lst)-n+1))\n```"
    },
    {
        "id":60,
        "response":"```python\ndef find_equal_tuple(Input, k):\n    if not Input:\n        return 'List is empty'\n    for tup in Input:\n        if len(tup) != k:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'\n```"
    },
    {
        "id":61,
        "response":"```python\ndef comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) \/\/ 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums\n```"
    },
    {
        "id":62,
        "response":"```python\ndef dif_Square(n):\n    if n % 4 == 2 or n % 4 == 3:\n        return False\n    else:\n        return True\n```"
    },
    {
        "id":63,
        "response":"```python\nimport re\n\ndef multiple_split(text):\n    return [t for t in re.split('[\\n*]', text) if t != '']\n```"
    },
    {
        "id":64,
        "response":"```python\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True\n```"
    },
    {
        "id":65,
        "response":"```python\ndef find_tuples(test_list, K):\n    result = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return str(result)\n```"
    },
    {
        "id":66,
        "response":"```python\ndef count_Squares(m, n):\n    total = 0\n    for i in range(1, min(m, n) + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total\n```"
    },
    {
        "id":67,
        "response":"```python\ndef is_Diff(n):\n    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)\n    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n    return abs(odd_sum - even_sum) == 0\n```"
    },
    {
        "id":68,
        "response":"```python\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n + 1):\n        bin_num = bin(i)[2:]\n        set_bits = bin_num.count('1')\n        if set_bits % 2 != 0:\n            count += 1\n    return count\n```"
    },
    {
        "id":69,
        "response":"```python\ndef word_len(s):\n    return len(s) % 2 != 0\n```"
    },
    {
        "id":70,
        "response":"```python\ndef tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) \/ 6\n```"
    },
    {
        "id":71,
        "response":"```python\nfrom itertools import cycle\n\ndef zip_tuples(test_tup1, test_tup2):\n    if len(test_tup1) > len(test_tup2):\n        return list(zip(test_tup1, cycle(test_tup2)))\n    else:\n        return list(zip(test_tup1, cycle(test_tup2)))[:len(test_tup1)]\n```"
    },
    {
        "id":72,
        "response":"```python\nimport math\n\ndef volume_sphere(r):\n    return (4\/3) * math.pi * (r ** 3)\n```"
    },
    {
        "id":73,
        "response":"```python\ndef get_Char(strr):\n    sum = 0\n    for char in strr:\n        sum += ord(char.lower()) - ord('a')\n    return chr(sum % 26 + ord('a'))\n```"
    },
    {
        "id":74,
        "response":"```python\ndef sequence(n):\n    seq = [1, 1]\n    for i in range(2, n):\n        seq.append(seq[seq[i-1]-1] + seq[i-seq[i-1]])\n    return seq[n-1]\n```"
    },
    {
        "id":75,
        "response":"```python\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)\n```"
    },
    {
        "id":76,
        "response":"```python\ndef centered_hexagonal_number(n):\n    return 1 + 3 * n * (n - 1)\n```"
    },
    {
        "id":77,
        "response":"```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n```"
    },
    {
        "id":78,
        "response":"```python\nfrom collections import Counter\n\ndef freq_count(list1):\n    freq_dict = Counter(list1)\n    return ({k: v for k, v in freq_dict.items()})\n```"
    },
    {
        "id":79,
        "response":"```python\ndef closest_num(N):\n    if N <= 2:\n        return 0\n    i = N - 1\n    while i > 0:\n        if (i & (i - 1)) == 0:\n            return i\n        i -= 1\n    return 0\n```"
    },
    {
        "id":80,
        "response":"```python\ndef len_log(list1):\n    return max(len(word) for word in list1)\n```"
    },
    {
        "id":81,
        "response":"```python\ndef find_substring(str1, sub_str):\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n```"
    },
    {
        "id":82,
        "response":"```python\ndef is_undulating(n):\n    if len(n) < 3:\n        return False\n    increasing = int(n[0]) < int(n[1])\n    for i in range(1, len(n) - 1):\n        if (int(n[i]) < int(n[i + 1]) and not increasing) or (int(n[i]) > int(n[i + 1]) and increasing):\n            increasing = not increasing\n        else:\n            return False\n    return True\n```"
    },
    {
        "id":83,
        "response":"```python\ndef power(a, b):\n    return a ** b\n```"
    },
    {
        "id":84,
        "response":"```python\ndef index_minimum(test_list):\n    return min(test_list, key=lambda x: x[1])[0]\n```"
    },
    {
        "id":85,
        "response":"```python\ndef Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)\n```"
    },
    {
        "id":86,
        "response":"```python\ndef divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n```"
    },
    {
        "id":87,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\nimport itertools\n\ndef frequency_lists(list1: List[List[int]]) -> dict:\n    flat_list = list(itertools.chain(*list1))\n    return dict(Counter(flat_list))\n```"
    },
    {
        "id":88,
        "response":"```python\nimport math\n\ndef multiply_num(numbers):\n    product = math.prod(numbers)\n    return product \/ len(numbers)\n```"
    },
    {
        "id":89,
        "response":"```python\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n```"
    },
    {
        "id":90,
        "response":"```python\ndef next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n```"
    },
    {
        "id":91,
        "response":"```python\ndef kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]\n```"
    },
    {
        "id":92,
        "response":"```python\ndef snake_to_camel(word):\n    words = word.split('_')\n    return ''.join(w.capitalize() for w in words)\n```"
    },
    {
        "id":93,
        "response":"```python\ndef eulerian_num(n, m):\n    eulerian = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        eulerian[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, min(i+1, m+1)):\n            eulerian[i][j] = (i-j)*eulerian[i-1][j-1] + (j+1)*eulerian[i-1][j]\n    return eulerian[n][m]\n```"
    },
    {
        "id":94,
        "response":"```python\ndef sort_sublists(input_list):\n    return list(map(lambda x: sorted(x), input_list))\n```"
    },
    {
        "id":95,
        "response":"```python\ndef count(lst):\n    return lst.count(True)\n```"
    },
    {
        "id":96,
        "response":"```python\ndef add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)\n```"
    },
    {
        "id":97,
        "response":"```python\ndef count_Hexadecimal(L, R):\n    count = 0\n    for num in range(L, R + 1):\n        try:\n            int(str(num), 16)\n            count += 1\n        except ValueError:\n            pass\n    return count\n```"
    },
    {
        "id":98,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return list(heapq.merge(num1, num2, num3))\n```"
    },
    {
        "id":99,
        "response":"```python\ndef odd_Equivalent(s, n):\n    count = sum(1 for c in s if c == '1')\n    return count if count % 2 == 0 else n - count\n```"
    },
    {
        "id":100,
        "response":"```python\ndef extract_missing(test_list, strt_val, stop_val):\n    res = []\n    if test_list[0][0] > strt_val:\n        res.append((strt_val, test_list[0][0]))\n    for i in range(len(test_list) - 1):\n        if test_list[i][1] < test_list[i + 1][0]:\n            res.append((test_list[i][1], test_list[i + 1][0]))\n    if test_list[-1][1] < stop_val:\n        res.append((test_list[-1][1], stop_val))\n    return res\n```"
    },
    {
        "id":101,
        "response":"```python\ndef common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements &= set(lst)\n    return sorted(list(common_elements), reverse=True)\n```"
    },
    {
        "id":102,
        "response":"```python\nimport math\n\ndef perimeter(diameter, height):\n    radius = diameter \/ 2\n    circumference = 2 * math.pi * radius\n    return circumference + 2 * height\n```"
    },
    {
        "id":103,
        "response":"```python\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except (ValueError, TypeError):\n        return False\n```"
    },
    {
        "id":104,
        "response":"```python\nfrom collections import OrderedDict\n\ndef assign_freq(test_list):\n    freq_dict = OrderedDict()\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    result = [tup + (freq,) for tup, freq in freq_dict.items()]\n    return str(result)\n```"
    },
    {
        "id":105,
        "response":"```python\ndef empty_dit(list1):\n    return all(not d for d in list1)\n```"
    },
    {
        "id":106,
        "response":"```python\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))\n```"
    },
    {
        "id":107,
        "response":"```python\ndef list_to_float(test_list):\n    test_list = [tuple(map(float, sub)) for sub in test_list]\n    return str(test_list)\n```"
    },
    {
        "id":108,
        "response":"```python\ndef string_to_list(string):\n    return string.split()\n```"
    },
    {
        "id":109,
        "response":"```python\ndef search(arr, n):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if (mid == 0 or arr[mid - 1] != arr[mid]) and (mid == n - 1 or arr[mid] != arr[mid + 1]):\n            return arr[mid]\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                low = mid + 2\n            else:\n                high = mid - 1\n        else:\n            if arr[mid] == arr[mid - 1]:\n                low = mid + 1\n            else:\n                high = mid - 2\n    return -1\n```"
    },
    {
        "id":110,
        "response":"```python\ndef max_product_tuple(list1):\n    return max(a * b for a, b in list1)\n```"
    },
    {
        "id":111,
        "response":"```python\ndef check_triplet(A, n, sum, count):\n    A.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                return True\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n```"
    },
    {
        "id":112,
        "response":"```python\ndef smartNumber(n):\n    count = 0\n    num = 1\n    while True:\n        divisors = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors += 1\n        if divisors % 2 == 1:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n```"
    },
    {
        "id":113,
        "response":"```python\ndef sum_of_divisors(n):\n    sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum += i\n            if i != n \/\/ i:\n                sum += n \/\/ i\n    return sum\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_num = sum_of_divisors(num)\n        if sum_num <= limit and sum_num != num and sum_of_divisors(sum_num) == num:\n            amicable_sum += num\n    return amicable_sum\n```"
    },
    {
        "id":114,
        "response":"```python\nimport cmath\n\ndef angle_complex(a, b):\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)\n```"
    },
    {
        "id":115,
        "response":"```python\ndef find_length(string, n):\n    count = 0\n    max_diff = 0\n    diff_map = {0: -1}\n    for i in range(n):\n        count += 1 if string[i] == '1' else -1\n        if count in diff_map:\n            max_diff = max(max_diff, i - diff_map[count])\n        else:\n            diff_map[count] = i\n    return max_diff\n```"
    },
    {
        "id":116,
        "response":"```python\nimport math\n\ndef sum(a, b):\n    gcd = math.gcd(a, b)\n    divisors_sum = 0\n    for i in range(1, int(gcd ** 0.5) + 1):\n        if gcd % i == 0:\n            if gcd \/\/ i == i:\n                divisors_sum += i\n            else:\n                divisors_sum += i + gcd \/\/ i\n    return divisors_sum\n```"
    },
    {
        "id":117,
        "response":"```python\ndef multiply_int(x, y):\n    if x == 0 or y == 0:\n        return 0\n    \n    result = 0\n    is_negative = (x < 0) ^ (y < 0)\n    x, y = abs(x), abs(y)\n    \n    for _ in range(y):\n        result += x\n    \n    return -result if is_negative else result\n```"
    },
    {
        "id":118,
        "response":"```python\ndef long_words(n, str):\n    word_list = str.split()\n    return [word for word in word_list if len(word) > n]\n```"
    },
    {
        "id":119,
        "response":"```python\ndef magic_square_test(my_matrix):\n    size = len(my_matrix)\n    expected_sum = sum(my_matrix[0])\n    for i in range(size):\n        row_sum = sum(my_matrix[i])\n        if row_sum != expected_sum:\n            return False\n    for j in range(size):\n        column_sum = sum(my_matrix[i][j] for i in range(size))\n        if column_sum != expected_sum:\n            return False\n    diagonal1_sum = sum(my_matrix[i][i] for i in range(size))\n    if diagonal1_sum != expected_sum:\n        return False\n    diagonal2_sum = sum(my_matrix[i][size - i - 1] for i in range(size))\n    if diagonal2_sum != expected_sum:\n        return False\n    return True\n```"
    },
    {
        "id":120,
        "response":"```python\nfrom typing import Tuple\nfrom collections import Counter\n\ndef max_occurrences(nums: list) -> Tuple:\n    if not nums:\n        return None, 0\n    \n    count = Counter(nums)\n    max_item = max(count, key=count.get)\n    return max_item, count[max_item]\n```"
    },
    {
        "id":121,
        "response":"```python\ndef reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    return ''.join(str1)\n```"
    },
    {
        "id":122,
        "response":"```python\ndef tup_string(tup1):\n    return ''.join(tup1)\n```"
    },
    {
        "id":123,
        "response":"```python\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n```"
    },
    {
        "id":124,
        "response":"```python\ndef check_last(arr, n, p):\n    last_element = arr[-1]\n    for _ in range(p):\n        last_element = last_element \/\/ 2\n    if last_element % 2 == 0:\n        return 'EVEN'\n    else:\n        return 'ODD'\n```"
    },
    {
        "id":125,
        "response":"```python\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n```"
    },
    {
        "id":126,
        "response":"```python\ndef cal_electbill(units):\n    if units <= 50:\n        return units * 3.20\n    elif units <= 150:\n        return 160 + (units - 50) * 3.40\n    elif units <= 250:\n        return 160 + 340 + (units - 150) * 4.80\n    else:\n        return 160 + 340 + 480 + (units - 250) * 6.40\n```"
    },
    {
        "id":127,
        "response":"```python\ndef zero_count(nums):\n    if not nums:\n        return 0\n    return nums.count(0) \/ len(nums)\n```"
    },
    {
        "id":128,
        "response":"```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n \/\/ 2\n    return count <= 1\n```"
    },
    {
        "id":129,
        "response":"```python\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n```"
    },
    {
        "id":130,
        "response":"```python\nfrom collections import Counter\nimport itertools\n\ndef extract_singly(test_list):\n    freq = Counter(itertools.chain(*test_list))\n    return [ele for ele, count in freq.items() if count == 1]\n```"
    },
    {
        "id":131,
        "response":"```python\ndef pancake_sort(nums):\n    def flip(nums, k):\n        return nums[:k][::-1] + nums[k:]\n    \n    n = len(nums)\n    while n > 1:\n        max_idx = nums.index(max(nums[:n]))\n        if max_idx == n - 1:\n            n -= 1\n            continue\n        if max_idx != 0:\n            nums = flip(nums, max_idx + 1)\n        nums = flip(nums, n)\n        n -= 1\n    return nums\n```"
    },
    {
        "id":132,
        "response":"```python\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n```"
    },
    {
        "id":133,
        "response":"```python\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n```"
    },
    {
        "id":134,
        "response":"```python\ndef sum_Pairs(arr, n):\n    arr.sort()\n    total_sum = 0\n    for i in range(n):\n        total_sum += (i - (n - i - 1)) * arr[i]\n    return abs(total_sum)\n```"
    },
    {
        "id":135,
        "response":"```python\ndef max_Abs_Diff(arr, n):\n    return max(arr) - min(arr)\n```"
    },
    {
        "id":136,
        "response":"```python\ndef ascii_value_string(str1):\n    return sum(ord(c) for c in str1)\n```"
    },
    {
        "id":137,
        "response":"```python\ndef max_path_sum(tri, m, n):\n    for i in range(m, 0, -1):\n        for j in range(n):\n            if j == 0:\n                tri[i-1][j] += tri[i][j]\n            elif j == i:\n                tri[i-1][j-1] += tri[i][j]\n            else:\n                tri[i-1][j] += max(tri[i][j], tri[i][j+1])\n                tri[i-1][j-1] += tri[i][j]\n    return tri[0][0]\n```"
    },
    {
        "id":138,
        "response":"```python\ndef sum_digits_single(x):\n    x_str = str(x)\n    max_sum = 0\n    for i in range(len(x_str)):\n        part1 = int(x_str[:i+1])\n        part2 = int(x_str[i+1:]) if i < len(x_str) - 1 else 0\n        max_sum = max(max_sum, sum(int(digit) for digit in str(part1)) + sum(int(digit) for digit in str(part2)))\n    return max_sum\n```"
    },
    {
        "id":139,
        "response":"```python\ndef longest_subseq_with_diff_one(arr, n):\n    dp = {}\n    for num in arr:\n        dp[num] = dp.get(num - 1, 0) + 1\n    return max(dp.values())\n```"
    },
    {
        "id":140,
        "response":"```python\ndef does_Contain_B(a, b, c):\n    while a < b:\n        a += c\n    return a == b\n```"
    },
    {
        "id":141,
        "response":"```python\ndef gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p == 1\n```"
    },
    {
        "id":142,
        "response":"```python\ndef merge(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return merge_sort(merge(left_half), merge(right_half))\n\ndef merge_sort(left, right):\n    merged = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] <= right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n    merged += left[left_index:]\n    merged += right[right_index:]\n    return merged\n```"
    },
    {
        "id":143,
        "response":"```python\ndef parabola_vertex(a, b, c):\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)\n```"
    },
    {
        "id":144,
        "response":"```python\ndef specified_element(nums, N):\n    return [num[N] for num in nums]\n```"
    },
    {
        "id":145,
        "response":"```python\ndef even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA\n    return n ^ mask\n```"
    },
    {
        "id":146,
        "response":"```python\ndef tuple_int_str(tuple_str):\n    return tuple(tuple(int(i) for i in t) for t in tuple_str)\n```"
    },
    {
        "id":147,
        "response":"```python\nfrom itertools import groupby\n\ndef encode_list(list1):\n    return [[len(list(group)), key] for key, group in groupby(list1)]\n```"
    },
    {
        "id":148,
        "response":"```python\ndef min_Ops(arr, n, k):\n    if len(set(arr)) == 1:\n        return 0\n    else:\n        return -1\n```"
    },
    {
        "id":149,
        "response":"```python\ndef month_season(month, days):\n    month_dict = {\n        'January': 1, 'February': 2, 'March': 3, 'April': 4,\n        'May': 5, 'June': 6, 'July': 7, 'August': 8,\n        'September': 9, 'October': 10, 'November': 11, 'December': 12\n    }\n    month_num = month_dict[month]\n    if (month_num == 3 and days >= 20) or (month_num == 4 or month_num == 5) or (month_num == 6 and days < 21):\n        return ('spring')\n    elif (month_num == 6 and days >= 21) or (month_num == 7 or month_num == 8) or (month_num == 9 and days < 23):\n        return ('summer')\n    elif (month_num == 9 and days >= 23) or (month_num == 10 or month_num == 11) or (month_num == 12 and days < 21):\n        return ('autumn')\n    else:\n        return ('winter')\n```"
    },
    {
        "id":150,
        "response":"```python\nimport math\n\ndef solution(a, b, n):\n    gcd = math.gcd(a, b)\n    if n % gcd != 0:\n        return None\n    a \/\/= gcd\n    b \/\/= gcd\n    n \/\/= gcd\n\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b \/\/ a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n    x *= n\n    y *= n\n    if x < 0:\n        k = -x \/\/ b + 1\n        x += b * k\n        y -= a * k\n    elif x > 0:\n        k = x \/\/ b\n        x -= b * k\n        y += a * k\n    return ('x = ', x, ', y = ', y)\n```"
    },
    {
        "id":151,
        "response":"```python\ndef remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n```"
    },
    {
        "id":152,
        "response":"```python\ndef sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n```"
    },
    {
        "id":153,
        "response":"```python\nimport math\n\ndef area_polygon(s, l):\n    return (s * l**2) \/ (4 * math.tan(math.pi\/s))\n```"
    },
    {
        "id":154,
        "response":"```python\ndef divSum(a, b):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n    return sum_of_divisors(a) == b and sum_of_divisors(b) == a\n```"
    },
    {
        "id":155,
        "response":"```python\ndef count_char_position(str1):\n    count = 0\n    for i in range(min(len(str1), 26)):\n        if (ord(str1[i].lower()) - 96) == i + 1:\n            count += 1\n    return count\n```"
    },
    {
        "id":156,
        "response":"```python\ndef find_even_Pair(A, N):\n    count_even = 0\n    count_odd = 0\n    for num in A:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even * (count_even - 1) \/\/ 2 + count_odd * (count_odd - 1) \/\/ 2\n```"
    },
    {
        "id":157,
        "response":"```python\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n```"
    },
    {
        "id":158,
        "response":"```python\ndef frequency(a, x):\n    return a.count(x)\n```"
    },
    {
        "id":159,
        "response":"```python\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n```"
    },
    {
        "id":160,
        "response":"```python\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])\n```"
    },
    {
        "id":161,
        "response":"```python\ndef perimeter_pentagon(a):\n    return 5 * a\n```"
    },
    {
        "id":162,
        "response":"```python\ndef count_occurance(s):\n    return s.count('std')\n```"
    },
    {
        "id":163,
        "response":"```python\nimport re\n\ndef remove_splchar(text):\n    text = re.sub('[^A-Za-z0-9]', '', text)\n    return text\n```"
    },
    {
        "id":164,
        "response":"```python\nfrom typing import List, Tuple, Dict, Any\n\ndef group_keyvalue(pairs: List[Tuple[Any, Any]]) -> Dict[Any, List[Any]]:\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n```"
    },
    {
        "id":165,
        "response":"```python\ndef is_valid_parenthese(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n```"
    },
    {
        "id":166,
        "response":"```python\ndef perimeter_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        return 0\n```"
    },
    {
        "id":167,
        "response":"```python\ndef answer(L, R):\n    import math\n    for i in range(L, R+1):\n        if 2 * i <= R:\n            return (i, 2*i)\n    return (L, L)\n```"
    },
    {
        "id":168,
        "response":"```python\ndef string_literals(patterns, text):\n    for pattern in patterns:\n        if pattern in text:\n            return 'Matched!'\n    return 'Not Matched!'\n```"
    },
    {
        "id":169,
        "response":"```python\ndef is_num_keith(x):\n    if x < 10:\n        return False\n    digits = [int(d) for d in str(x)]\n    seq = digits[:]\n    while seq[-1] < x:\n        next_term = sum(seq[-len(digits):])\n        seq.append(next_term)\n    return seq[-1] == x\n```"
    },
    {
        "id":170,
        "response":"```python\nimport math\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371\n    dlat = math.radians(elat - slat)\n    dlon = math.radians(elon - slon)\n    a = math.sin(dlat\/2) * math.sin(dlat\/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon\/2) * math.sin(dlon\/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c * 1000\n    return d\n```"
    },
    {
        "id":171,
        "response":"```python\ndef common_prefix_util(strs, n):\n    if n == 0:\n        return ''\n    if n == 1:\n        return strs[0]\n    strs.sort()\n    end = min(len(strs[0]), len(strs[n - 1]))\n    i = 0\n    while i < end and strs[0][i] == strs[n - 1][i]:\n        i += 1\n    return strs[0][:i]\n```"
    },
    {
        "id":172,
        "response":"```python\nimport re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\n    digits = re.findall(r'\\d', string)\n    return uppercase, lowercase, special_char, digits\n```"
    },
    {
        "id":173,
        "response":"```python\ndef count_pairs(arr, n, k):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    count = 0\n    for num in freq:\n        if num + k in freq:\n            count += 1\n    return count\n```"
    },
    {
        "id":174,
        "response":"```python\ndef greater_specificnum(list, num):\n    return any(i > num for i in list)\n```"
    },
    {
        "id":175,
        "response":"```python\ndef parabola_focus(a, b, c):\n    h = -b \/ (2 * a)\n    k = c - (b**2) \/ (4 * a)\n    p = 1 \/ (4 * a)\n    if a > 0:\n        return (h, k + p)\n    else:\n        return (h, k - abs(p))\n```"
    },
    {
        "id":176,
        "response":"```python\nimport re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(re.escape(pattern), text):\n            return 'Matched!'\n    return 'Not Matched!'\n```"
    },
    {
        "id":177,
        "response":"```python\ndef longest_common_subsequence(X, Y, m, n):\n    L = [[0 for x in range(n+1)] for x in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0 :\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n```"
    },
    {
        "id":178,
        "response":"```python\nimport math\n\ndef prod_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        if math.sqrt(n - i * i) % 1 == 0:\n            return True\n    return False\n```"
    },
    {
        "id":179,
        "response":"```python\ndef first_Missing_Positive(arr, n):\n    arr = list(set([num for num in arr if num > 0]))\n    arr.sort()\n    if not arr or arr[0] > 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1\n```"
    },
    {
        "id":180,
        "response":"```python\ndef count_Intgral_Points(x1, y1, x2, y2):\n    return (abs(x2 - x1) + 1) * (abs(y2 - y1) + 1)\n```"
    },
    {
        "id":181,
        "response":"```python\ndef check_monthnumber(monthname3):\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return monthname3 in months_with_30_days\n```"
    },
    {
        "id":182,
        "response":"```python\ndef check_String(s):\n    has_letter = any(c.isalpha() for c in s)\n    has_digit = any(c.isdigit() for c in s)\n    return has_letter and has_digit\n```"
    },
    {
        "id":183,
        "response":"```python\nfrom collections import OrderedDict\n\ndef remove_tuple(test_tup):\n    return tuple(OrderedDict.fromkeys(test_tup))\n```"
    },
    {
        "id":184,
        "response":"```python\ndef octal_To_Decimal(n):\n    decimal = 0\n    power = 0\n    while n > 0:\n        digit = n % 10\n        decimal += digit * (8 ** power)\n        n \/\/= 10\n        power += 1\n    return decimal\n```"
    },
    {
        "id":185,
        "response":"```python\ndef first(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n```"
    },
    {
        "id":186,
        "response":"```python\ndef remove_tuples(test_list, K):\n    return [tup for tup in test_list if len(tup) != K]\n```"
    },
    {
        "id":187,
        "response":"```python\ndef find_exponentio(test_tup1, test_tup2):\n    return tuple(a ** b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":188,
        "response":"```python\nimport math\n\ndef largest_triangle(r, h):\n    return (3 * math.sqrt(3) * (r ** 2)) \/ 4\n```"
    },
    {
        "id":189,
        "response":"```python\ndef highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i \/\/ 2\n```"
    },
    {
        "id":190,
        "response":"```python\ndef position_max(list1):\n    max_val = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_val]\n```"
    },
    {
        "id":191,
        "response":"```python\ndef chkList(lst):\n    return len(set(lst)) == 1\n```"
    },
    {
        "id":192,
        "response":"```python\ndef remove_even(str1):\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])\n```"
    },
    {
        "id":193,
        "response":"```python\ndef hamming_Distance(n1, n2):\n    return bin(n1 ^ n2).count('1')\n```"
    },
    {
        "id":194,
        "response":"```python\ndef count(s, c):\n    return s.count(c)\n```"
    },
    {
        "id":195,
        "response":"```python\ndef inversion_elements(test_tup):\n    return tuple(-(i + 1) for i in test_tup)\n```"
    },
    {
        "id":196,
        "response":"```python\ndef concatenate_elements(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n```"
    },
    {
        "id":197,
        "response":"```python\ndef find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]\n```"
    },
    {
        "id":198,
        "response":"```python\nimport re\n\ndef is_decimal(num):\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n```"
    },
    {
        "id":199,
        "response":"```python\nimport heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        return []\n    heapq.heapreplace(heap, a)\n    return heap\n```"
    },
    {
        "id":200,
        "response":"```python\nimport re\n\ndef is_allowed_specific_char(string):\n    charRe = re.compile(r'[^a-zA-Z0-9]')\n    string = charRe.search(string)\n    return not bool(string)\n\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\")\nassert not is_allowed_specific_char(\"ABCDEFabcdef123450!\")\nassert is_allowed_specific_char(\"12345\")\nassert is_allowed_specific_char(\"abcdef\")\nassert is_allowed_specific_char(\"\")\n```"
    },
    {
        "id":201,
        "response":"```python\ndef count_Num(n):\n    count = 0\n    for i in range(n+1):\n        if (i & 1) and ((i & (1 << (n-1))) != 0):\n            count += 1\n    return count\n```"
    },
    {
        "id":202,
        "response":"```python\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))\n```"
    },
    {
        "id":203,
        "response":"```python\ndef concatenate_strings(test_tup1, test_tup2):\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":204,
        "response":"```python\nimport math\n\ndef degree_radian(radian):\n    degree = radian * (180 \/ math.pi)\n    return degree\n```"
    },
    {
        "id":205,
        "response":"```python\ndef decode_list(alist):\n    decoded_list = []\n    for item in alist:\n        if isinstance(item, list):\n            decoded_list.extend([item[1]] * item[0])\n        else:\n            decoded_list.append(item)\n    return decoded_list\n```"
    },
    {
        "id":206,
        "response":"```python\ndef check_subset_list(list1, list2):\n    set1 = set(list1)\n    set2 = set([item for sublist in list2 for item in sublist])\n    return set2.issubset(set1)\n```"
    },
    {
        "id":207,
        "response":"```python\ndef first_Repeated_Char(str):\n    char_count = {}\n    for char in str.lower():\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str.lower():\n        if char_count[char] > 1:\n            return char\n    return None\n```"
    },
    {
        "id":208,
        "response":"```python\ndef min_Operations(A, B):\n    import math\n    if A > B:\n        return 0\n    if A == B:\n        return 0\n    return math.ceil(math.log2(B\/A))\n```"
    },
    {
        "id":209,
        "response":"```python\ndef extract_min_max(test_tup, K):\n    sorted_tup = tuple(sorted(test_tup))\n    min_K = sorted_tup[:K]\n    max_K = sorted_tup[-K:]\n    return min_K + max_K\n```"
    },
    {
        "id":210,
        "response":"```python\nimport re\n\ndef replace_max_specialchar(text, n):\n    count = 0\n    result = ''\n    for char in text:\n        if char in [',', '.', ' ']:\n            if count < n:\n                result += ':'\n                count += 1\n            else:\n                result += char\n        else:\n            result += char\n    return result\n```"
    },
    {
        "id":211,
        "response":"```python\ndef first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n```"
    },
    {
        "id":212,
        "response":"```python\ndef check_type(test_tuple):\n    return len(set(type(i) for i in test_tuple)) == 1\n```"
    },
    {
        "id":213,
        "response":"```python\ndef is_majority(arr, n, x):\n    from bisect import bisect_left, bisect_right\n    left_index = bisect_left(arr, x)\n    right_index = bisect_right(arr, x)\n    return right_index - left_index > n \/ 2\n```"
    },
    {
        "id":214,
        "response":"```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```"
    },
    {
        "id":215,
        "response":"```python\ndef find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]\n```"
    },
    {
        "id":216,
        "response":"```python\ndef odd_values_string(str):\n    return str[::2]\n```"
    },
    {
        "id":217,
        "response":"```python\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n```"
    },
    {
        "id":218,
        "response":"```python\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return (n & mask) == mask\n```"
    },
    {
        "id":219,
        "response":"```python\ndef re_arrange_array(arr, n):\n    negatives = [x for x in arr if x < 0]\n    non_negatives = [x for x in arr if x >= 0]\n    return negatives + non_negatives\n```"
    },
    {
        "id":220,
        "response":"```python\ndef replace_blank(str1, char):\n    str1 = str1.replace(' ', char)\n    return str1\n```"
    },
    {
        "id":221,
        "response":"```python\ndef max_sum(tri, n):\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n```"
    },
    {
        "id":222,
        "response":"```python\ndef larg_nnum(list1, n):\n    list1.sort(reverse=True)\n    return list1[:n]\n```"
    },
    {
        "id":223,
        "response":"```python\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height cannot be negative\")\n    return 2 * math.pi * r * h\n```"
    },
    {
        "id":224,
        "response":"```python\ndef volume_cube(l):\n    return l ** 3\n```"
    },
    {
        "id":225,
        "response":"```python\ndef even_bit_set_number(n):\n    mask = 0xAAAAAAAA\n    return n | mask\n```"
    },
    {
        "id":226,
        "response":"```python\ndef No_of_Triangle(N, K):\n    return (N * (N + 1) * (2 * N + 1) \/\/ 6) + ((N - K + 1) * (N - K + 2) \/\/ 2)\n```"
    },
    {
        "id":227,
        "response":"```python\nfrom collections import defaultdict\n\ndef check_occurences(test_list):\n    freq_dict = defaultdict(int)\n    for tup in test_list:\n        tup = tuple(sorted(tup))\n        freq_dict[tup] += 1\n    return dict(freq_dict)\n```"
    },
    {
        "id":228,
        "response":"```python\ndef number_of_substrings(s):\n    n = len(s)\n    return n*(n+1)\/\/2\n```"
    },
    {
        "id":229,
        "response":"```python\ndef get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(1, m + 1):\n        count += count_sequences(i, n, m)\n    return count\n\ndef count_sequences(start, n, m):\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(start * 2, m + 1):\n        count += count_sequences(i, n - 1, m)\n    return count\n```"
    },
    {
        "id":230,
        "response":"```python\ndef replace_list(list1, list2):\n    if not list1:\n        return list1\n    list1[-1:] = list2\n    return list1\n```"
    },
    {
        "id":231,
        "response":"```python\ndef array_3d(m,n,o):\n    return [[[ '*' for _ in range(m)] for _ in range(n)] for _ in range(o)]\n```"
    },
    {
        "id":232,
        "response":"```python\ndef count_charac(str1):\n    return len(str1)\n```"
    },
    {
        "id":233,
        "response":"```python\nfrom collections import defaultdict\n\ndef sort_on_occurence(lst):\n    count_dict = defaultdict(int)\n    value_dict = defaultdict(list)\n    for key, value in lst:\n        count_dict[key] += 1\n        value_dict[key].append(value)\n    sorted_keys = sorted(count_dict, key=count_dict.get, reverse=True)\n    result = []\n    for key in sorted_keys:\n        result.append(tuple([key] + value_dict[key] + [count_dict[key]]))\n    return result\n```"
    },
    {
        "id":234,
        "response":"```python\nimport math\n\ndef next_Perfect_Square(N):\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        return (int(root) + 1) ** 2\n    else:\n        return math.ceil(root) ** 2\n```"
    },
    {
        "id":235,
        "response":"```python\ndef max_sum(arr, n):\n    increase = [0]*n\n    decrease = [0]*n\n    increase[0] = decrease[0] = arr[0]\n    for i in range(1, n):\n        increase[i] = max(increase[i-1], arr[i])\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increase[i] = max(increase[i], increase[j]+arr[i])\n    for i in range(1, n):\n        decrease[n-i-1] = max(decrease[n-i], arr[n-i-1])\n        for j in range(n-i, n):\n            if arr[n-i-1] > arr[j]:\n                decrease[n-i-1] = max(decrease[n-i-1], decrease[j]+arr[n-i-1])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, increase[i]+decrease[i]-arr[i])\n    return max_sum\n```"
    },
    {
        "id":236,
        "response":"```python\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number\")\n    if number == 0 or number == 1:\n        return number\n    x = number\n    y = (x + 1) \/ 2\n    while(y < x):\n        x = y\n        y = (x + number \/ x) \/ 2\n    return x\n```"
    },
    {
        "id":237,
        "response":"```python\ndef lps(str):\n    n = len(str)\n    L = [[0 for x in range(n)]for y in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]\n```"
    },
    {
        "id":238,
        "response":"```python\ndef harmonic_sum(n):\n    return sum(1.0\/i for i in range(1, n))\n```"
    },
    {
        "id":239,
        "response":"```python\ndef intersection_array(array_nums1, array_nums2):\n    return list(filter(lambda x: x in array_nums2, set(array_nums1)))\n```"
    },
    {
        "id":240,
        "response":"```python\ndef count_X(tup, x):\n    return tup.count(x)\n```"
    },
    {
        "id":241,
        "response":"```python\nfrom itertools import chain, repeat, zip_longest\n\ndef insert_element(list, element):\n    return list(chain.from_iterable(zip_longest(repeat(element), list)))[:-1]\n```"
    },
    {
        "id":242,
        "response":"```python\nimport cmath\n\ndef convert(numbers):\n    complex_num = complex(numbers)\n    return cmath.polar(complex_num)\n```"
    },
    {
        "id":243,
        "response":"```python\ndef count_integer(list1):\n    count = sum(isinstance(x, int) and not isinstance(x, bool) for x in list1)\n    return count\n```"
    },
    {
        "id":244,
        "response":"```python\ndef words_ae(text):\n    words = text.split()\n    return [word for word in words if word[0].lower() in ['a', 'e']]\n```"
    },
    {
        "id":245,
        "response":"```python\nimport itertools\n\ndef combinations_colors(colors, n):\n    if not colors:\n        return []\n    return list(itertools.combinations_with_replacement(colors, n))\n```"
    },
    {
        "id":246,
        "response":"```python\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for currentPrime in range(2, int(n ** 0.5) + 1):\n        if sieve[currentPrime]:\n            for multiple in range(currentPrime * currentPrime, n, currentPrime):\n                sieve[multiple] = False\n    return sum(1 for isPrime in sieve if isPrime)\n```"
    },
    {
        "id":247,
        "response":"```python\ndef swap_numbers(a, b):\n    return b, a\n```"
    },
    {
        "id":248,
        "response":"```python\ndef count_odd(array_nums):\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n```"
    },
    {
        "id":249,
        "response":"```python\ndef maximize_elements(test_tup1, test_tup2):\n    return tuple(tuple(max(x, y) for x, y in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":250,
        "response":"```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 0\n    while True:\n        newman_shanks_williams = (2**(2**i)) + 1\n        if is_prime(newman_shanks_williams):\n            count += 1\n            if count == n:\n                return newman_shanks_williams\n        i += 1\n```"
    },
    {
        "id":251,
        "response":"```python\ndef division_elements(test_tup1, test_tup2):\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        if b == 0:\n            result.append('inf')\n        else:\n            result.append(a \/ b)\n    return tuple(result)\n```"
    },
    {
        "id":252,
        "response":"```python\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\n```"
    },
    {
        "id":253,
        "response":"```python\ndef merge_dict(d1, d2):\n    d2.update(d1)\n    return d2\n```"
    },
    {
        "id":254,
        "response":"```python\ndef dog_age(h_age):\n    if h_age <= 2:\n        return h_age * 7 if h_age > 0 else 0\n    else:\n        return 21 + (h_age - 2) * 4\n```"
    },
    {
        "id":255,
        "response":"```python\ndef list_split(S, step):\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]\n```"
    },
    {
        "id":256,
        "response":"```python\ndef lateralsurface_cube(l):\n    return 4 * (l ** 2)\n```"
    },
    {
        "id":257,
        "response":"```python\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, 2*n, 2))\n```"
    },
    {
        "id":258,
        "response":"```python\ndef find_star_num(n):\n    return 6 * n * (n - 1) + 1\n```"
    },
    {
        "id":259,
        "response":"```python\ndef ascii_value(k):\n    return ord(k)\n```"
    },
    {
        "id":260,
        "response":"```python\ndef sum_even_and_even_index(arr, n):\n    return sum(num for idx, num in enumerate(arr) if idx % 2 == 0 and num % 2 == 0)\n```"
    },
    {
        "id":261,
        "response":"```python\ndef even_Power_Sum(n):\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        sum += num ** 5\n        num += 2\n        count += 1\n    return sum\n```"
    },
    {
        "id":262,
        "response":"```python\ndef rear_extract(test_list):\n    return [sub[-1] for sub in test_list]\n```"
    },
    {
        "id":263,
        "response":"```python\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":264,
        "response":"```python\ndef even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1) if n > 0 else 1\n```"
    },
    {
        "id":265,
        "response":"```python\ndef get_Position(a, n, m):\n    if m > n:\n        return -1\n    return a[n - m]\n```"
    },
    {
        "id":266,
        "response":"```python\nimport math\n\ndef volume_cylinder(r, h):\n    return math.pi * (r ** 2) * h\n```"
    },
    {
        "id":267,
        "response":"```python\ndef dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}\n```"
    },
    {
        "id":268,
        "response":"```python\ndef count_first_elements(test_tup):\n    count = 0\n    for ele in test_tup:\n        if isinstance(ele, tuple):\n            break\n        count += 1\n    return count\n```"
    },
    {
        "id":269,
        "response":"```python\ndef is_num_decagonal(n):\n    return n * (4 * n - 3)\n```"
    },
    {
        "id":270,
        "response":"```python\ndef sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return (found, pos)\n```"
    },
    {
        "id":271,
        "response":"```python\ndef all_unique(test_list):\n    return len(test_list) == len(set(test_list))\n```"
    },
    {
        "id":272,
        "response":"```python\ndef sub_list(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))\n```"
    },
    {
        "id":273,
        "response":"```python\ndef validate(n):\n    freq = {}\n    for digit in str(n):\n        freq[int(digit)] = freq.get(int(digit), 0) + 1\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    return True\n```"
    },
    {
        "id":274,
        "response":"```python\ndef check_element(list, element):\n    return all(item == element for item in list)\n```"
    },
    {
        "id":275,
        "response":"```python\nimport re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":276,
        "response":"```python\ndef max_sub_array_sum_repeated(a, n, k):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    total_sum = sum(a)\n    for i in range(n * min(k, 2)):\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    if k > 2 and total_sum > 0:\n        max_so_far += total_sum * (k - 2)\n    elif k > 2:\n        max_wrap = float('-inf')\n        max_ending_here_wrap = 0\n        for i in range(n):\n            max_ending_here_wrap += a[i]\n            if max_wrap < max_ending_here_wrap:\n                max_wrap = max_ending_here_wrap\n            if max_ending_here_wrap < 0:\n                max_ending_here_wrap = 0\n        max_cad = float('-inf')\n        max_ending_here_cad = 0\n        for i in range(n-1, -1, -1):\n            max_ending_here_cad += a[i]\n            if max_cad < max_ending_here_cad:\n                max_cad = max_ending_here_cad\n            if max_ending_here_cad < 0:\n                max_ending_here_cad = 0\n        max_so_far = max(max_so_far, max_wrap + max_cad + total_sum * (k - 2))\n    return max_so_far\n```"
    },
    {
        "id":277,
        "response":"```python\ndef square_Sum(n):\n    total_sum = sum([(2 * i) ** 2 for i in range(1, n + 1)])\n    return total_sum\n```"
    },
    {
        "id":278,
        "response":"```python\ndef modular_inverse(arr, N, P):\n    count = 0\n    for num in arr:\n        if pow(num, P-2, P) == num % P:\n            count += 1\n    return count\n```"
    },
    {
        "id":279,
        "response":"```python\ndef odd_Days(N):\n    return (N + (N \/\/ 4) - (N \/\/ 100) + (N \/\/ 400)) % 7\n```"
    },
    {
        "id":280,
        "response":"```python\ndef max_length(list1):\n    max_len = max(len(sublist) for sublist in list1)\n    max_list = next(sublist for sublist in list1 if len(sublist) == max_len)\n    return max_len, max_list\n```"
    },
    {
        "id":281,
        "response":"```python\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        same = k\n        diff = k * (k - 1)\n        for _ in range(2, n):\n            temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        return same + diff\n```"
    },
    {
        "id":282,
        "response":"```python\ndef find(n, m):\n    if m == 0:\n        raise ZeroDivisionError\n    return n \/\/ m\n```"
    },
    {
        "id":283,
        "response":"```python\nimport math\n\ndef otherside_rightangle(w,h):\n    if w < 0 or h < 0:\n        raise ValueError(\"Inputs should be non-negative\")\n    if w == 0 and h == 0:\n        return 0\n    return math.sqrt(w**2 + h**2)\n```"
    },
    {
        "id":284,
        "response":"```python\ndef max_val(listval):\n    nums = [x for x in listval if isinstance(x, (int, float))]\n    return max(nums) if nums else None\n```"
    },
    {
        "id":285,
        "response":"```python\ndef sum_div(number):\n    return sum(i for i in range(1, number) if number % i == 0)\n```"
    },
    {
        "id":286,
        "response":"```python\ndef get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```"
    },
    {
        "id":287,
        "response":"```python\nfrom typing import List, Any\n\ndef flatten_list(list1: List[Any]) -> List[Any]:\n    stack = list1[:]\n    result = []\n    while stack:\n        element = stack.pop(0)\n        if isinstance(element, list):\n            stack = element + stack\n        else:\n            result.append(element)\n    return result\n```"
    },
    {
        "id":288,
        "response":"```python\ndef intersection_nested_lists(l1, l2):\n    return [list(set(sublist) & set(l1)) for sublist in l2]\n```"
    },
    {
        "id":289,
        "response":"```python\ndef max_aggregate(stdata):\n    aggregates = {}\n    for name, score in stdata:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    max_name = max(aggregates, key=aggregates.get)\n    return max_name, aggregates[max_name]\n```"
    },
    {
        "id":290,
        "response":"```python\nimport math\n\ndef count_binary_seq(n):\n    return math.comb(2*n, n)\n```"
    },
    {
        "id":291,
        "response":"```python\ndef dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0 if d else 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)\n```"
    },
    {
        "id":292,
        "response":"```python\ndef set_Bit_Number(n):\n    if n == 0:\n        return 0\n    pos = 0\n    m = n\n    while m > 0:\n        pos += 1\n        m = m >> 1\n    return 1 << (pos - 1)\n```"
    },
    {
        "id":293,
        "response":"```python\ndef solve(a, n):\n    b = sorted(a)\n    c = sorted(a, reverse=True)\n    return b == c[::-1]\n```"
    },
    {
        "id":294,
        "response":"```python\ndef find_Element(arr, ranges, rotations, index):\n    from collections import deque\n    d = deque(arr)\n    for start, end in ranges:\n        for _ in range(rotations % (end - start + 1)):\n            d.rotate(-1)\n            temp = list(d)\n            temp[start:end+1] = temp[start+1:end+1] + [temp[start]]\n            d = deque(temp)\n    return list(d)[index]\n```"
    },
    {
        "id":295,
        "response":"```python\ndef start_withp(words):\n    for word in words:\n        word_list = word.split()\n        p_words = [w for w in word_list if w.lower().startswith('p')]\n        if len(p_words) >= 2:\n            return tuple(p_words[:2])\n    return ()\n```"
    },
    {
        "id":296,
        "response":"```python\ndef max_sum_increasing_subseq(a, n, index, k):\n    msis = [num for num in a]\n    for i in range(1, index + 1):\n        for j in range(i):\n            if a[i] > a[j] and msis[i] < msis[j] + a[i]:\n                msis[i] = msis[j] + a[i]\n    result = 0\n    for i in range(index + 1, k + 1):\n        if a[i] > a[index] and result < msis[index] + a[i]:\n            result = msis[index] + a[i]\n    return result if result != 0 else 0\n```"
    },
    {
        "id":297,
        "response":"```python\ndef colon_tuplex(tuplex, m, n):\n    tuplex = list(tuplex)\n    tuplex[m].append(n)\n    return tuple(tuplex)\n```"
    },
    {
        "id":298,
        "response":"```python\nimport heapq\n\ndef large_product(nums1, nums2, N):\n    return heapq.nlargest(N, (a * b for a in nums1 for b in nums2))\n```"
    },
    {
        "id":299,
        "response":"```python\ndef maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b\n```"
    },
    {
        "id":300,
        "response":"```python\ndef string_to_tuple(str1):\n    return tuple(str1)\n```"
    },
    {
        "id":301,
        "response":"```python\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    x = 1\n    while n & (x << 1):\n        x <<= 1\n    return n | (x << 1)\n```"
    },
    {
        "id":302,
        "response":"```python\nimport math\n\ndef volume_cone(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height cannot be negative\")\n    return (1.0\/3) * math.pi * r * r * h\n```"
    },
    {
        "id":303,
        "response":"```python\ndef pos_nos(list1):\n    return ','.join(str(i) for i in list1 if i > 0)\n```"
    },
    {
        "id":304,
        "response":"```python\ndef max_sum_rectangular_grid(grid, n):\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    for i in range(1, n):\n        new_excl = max(incl, excl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = new_excl\n    return max(incl, excl)\n```"
    },
    {
        "id":305,
        "response":"```python\ndef find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    max_word = ''\n    for word in words:\n        if len(word) > max_len and len(word) % 2 == 0:\n            max_len = len(word)\n            max_word = word\n        elif len(word) == max_len and len(word) % 2 == 0 and word > max_word:\n            max_word = word\n    if max_word == '':\n        return words[0]\n    return max_word\n```"
    },
    {
        "id":306,
        "response":"```python\ndef find_last_occurrence(A, x):\n    for i in range(len(A) - 1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1\n```"
    },
    {
        "id":307,
        "response":"```python\nfrom itertools import groupby\n\ndef modified_encode(alist):\n    result = []\n    for key, group in groupby(alist):\n        count = sum(1 for _ in group)\n        if count == 1:\n            result.append(key)\n        else:\n            result.append([count, key])\n    return result\n```"
    },
    {
        "id":308,
        "response":"```python\ndef max_volume(s):\n    l = s \/\/ 3\n    remainder = s % 3\n    if remainder == 0:\n        return l ** 3\n    elif remainder == 1:\n        return (l + 1) * l * l\n    else:\n        return (l + 1) * (l + 1) * l\n```"
    },
    {
        "id":309,
        "response":"```python\nimport re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)\n```"
    },
    {
        "id":310,
        "response":"```python\ndef sum_difference(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) \/\/ 6\n    square_of_sum = (n * (n + 1) \/\/ 2) ** 2\n    return square_of_sum - sum_of_squares\n```"
    },
    {
        "id":311,
        "response":"```python\ndef find_demlo(s):\n    n = len(s)\n    result = ''\n    for i in range(1, n + 1):\n        result += str(i)\n    for i in range(n - 1, 0, -1):\n        result += str(i)\n    return result\n```"
    },
    {
        "id":312,
        "response":"```python\ndef position_min(list1):\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]\n```"
    },
    {
        "id":313,
        "response":"```python\ndef right_rotate(arr, n):\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if (arr[index] >= 0 and arr[out_of_place] < 0) or (arr[index] < 0 and arr[out_of_place] >= 0):\n                arr = rotate_subarray(arr, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if out_of_place == -1:\n            if (arr[index] >= 0 and index % 2 == 1) or (arr[index] < 0 and index % 2 == 0):\n                out_of_place = index\n    return arr\n\ndef rotate_subarray(arr, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n```"
    },
    {
        "id":314,
        "response":"```python\ndef sum_of_alternates(test_tuple):\n    sum1 = sum(test_tuple[::2])\n    sum2 = sum(test_tuple[1::2])\n    return (sum1, sum2)\n```"
    },
    {
        "id":315,
        "response":"```python\ndef get_Min_Squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n```"
    },
    {
        "id":316,
        "response":"```python\nfrom collections import Counter\nimport re\n\ndef most_occurrences(test_list):\n    words = ' '.join(test_list)\n    words = re.findall(r'\\b\\w+\\b', words.lower())\n    counter = Counter(words)\n    return counter.most_common(1)[0][0]\n```"
    },
    {
        "id":317,
        "response":"```python\ndef check_isosceles(x, y, z):\n    sides = sorted([x, y, z])\n    return sides[0] == sides[1] or sides[1] == sides[2]\n```"
    },
    {
        "id":318,
        "response":"```python\ndef rotate_left(list1, m, n):\n    list1 = list1 + list1[:m]\n    return list1[m:] + list1[:n]\n```"
    },
    {
        "id":319,
        "response":"```python\ndef neg_count(lst):\n    return sum(1 for x in lst if x < 0)\n```"
    },
    {
        "id":320,
        "response":"```python\nimport re\n\ndef find_char(text):\n    words = re.findall(r'\\b\\w{3,5}\\b', text)\n    return words\n```"
    },
    {
        "id":321,
        "response":"```python\ndef count_unset_bits(n):\n    count = 0\n    i = 0\n    while (1 << i) <= n:\n        if not (n & (1 << i)):\n            count += 1\n        i += 1\n    return count\n```"
    },
    {
        "id":322,
        "response":"```python\ndef char_frequency(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n```"
    },
    {
        "id":323,
        "response":"```python\ndef Sort(sub_li):\n    sub_li.sort(key = lambda x: x[1])\n    return sub_li\n```"
    },
    {
        "id":324,
        "response":"```python\ndef check_Validity(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n```"
    },
    {
        "id":325,
        "response":"```python\ndef ap_sum(a, n, d):\n    return n * (2 * a + (n - 1) * d) \/\/ 2\n```"
    },
    {
        "id":326,
        "response":"```python\ndef check_monthnum(monthname1):\n    months_with_28_days = [\"February\"]\n    return monthname1 in months_with_28_days\n```"
    },
    {
        "id":327,
        "response":"```python\nimport re\n\ndef text_match_word(text):\n    pattern = r'.*python[\\.,!?;:\\s]*$'\n    if re.match(pattern, text, re.IGNORECASE):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":328,
        "response":"```python\ndef check_Equality(s):\n    count = 0\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        count += char_count[char] * (char_count[char] + 1) \/\/ 2\n    return count\n```"
    },
    {
        "id":329,
        "response":"```python\nimport math\n\ndef find_Divisor(x, y):\n    return math.gcd(x, y)\n```"
    },
    {
        "id":330,
        "response":"```python\ndef sum_three_smallest_nums(lst):\n    positive_nums = sorted([num for num in lst if num > 0])\n    return sum(positive_nums[:3])\n```"
    },
    {
        "id":331,
        "response":"```python\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n```"
    },
    {
        "id":332,
        "response":"```python\nimport heapq\n\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n    def __eq__(self, other):\n        return self.value == other.value\n\ndef smallest_range(nums):\n    min_heap = []\n    max_val = float('-inf')\n    for i, num_list in enumerate(nums):\n        node = Node(num_list[0], i, 0)\n        heapq.heappush(min_heap, node)\n        max_val = max(max_val, num_list[0])\n\n    min_range = float('inf')\n    min_range_start = None\n    min_range_end = None\n\n    while min_heap:\n        node = heapq.heappop(min_heap)\n        if max_val - node.value < min_range:\n            min_range = max_val - node.value\n            min_range_start = node.value\n            min_range_end = max_val\n\n        if node.index + 1 < len(nums[node.list_num]):\n            next_node = Node(nums[node.list_num][node.index + 1], node.list_num, node.index + 1)\n            heapq.heappush(min_heap, next_node)\n            max_val = max(max_val, next_node.value)\n        else:\n            break\n\n    return (min_range_start, min_range_end)\n\ndef __init__(self, value, list_num, index):\n    return smallest_range(value)\n```"
    },
    {
        "id":333,
        "response":"```python\ndef dig_let(s):\n    letter_count = sum(1 for c in s if c.isalpha())\n    digit_count = sum(1 for c in s if c.isdigit())\n    return letter_count, digit_count\n```"
    },
    {
        "id":334,
        "response":"```python\nimport math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m + 1):\n        factors = set()\n        for j in range(1, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                factors.add(j)\n                factors.add(i \/\/ j)\n        if len([f for f in factors if f % 2 != 0]) % 2 != 0:\n            count += 1\n    return count\n```"
    },
    {
        "id":335,
        "response":"```python\ndef diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    return [abs(nums[i] - nums[i-1]) for i in range(1, len(nums))]\n```"
    },
    {
        "id":336,
        "response":"```python\ndef zigzag(n, k):\n    if n < k:\n        return 0\n    if k == 1 or k == n:\n        return 1\n    return zigzag(n - 1, k - 1) + zigzag(n - 1, k)\n\ndef zigzag(n, k):\n    prev = [0] * (n + 1)\n    curr = [0] * (n + 1)\n    prev[1] = 1\n    for i in range(2, n + 1):\n        curr[1] = 1\n        for j in range(2, min(i + 1, k + 1)):\n            curr[j] = prev[j - 1] + prev[j]\n        prev = curr[:]\n        curr = [0] * (n + 1)\n    return prev[k]\n```"
    },
    {
        "id":337,
        "response":"```python\ndef count_Squares(m, n):\n    min_dim = min(m, n)\n    total_squares = sum([(min_dim - i) * (m - i) * (n - i) for i in range(min_dim)])\n    return total_squares\n```"
    },
    {
        "id":338,
        "response":"```python\nimport math\n\ndef bin_coff(n, r=None):\n    if r is None:\n        r = n\n    return math.comb(n + r, r) \/\/ (n + 1)\n```"
    },
    {
        "id":339,
        "response":"```python\ndef check(string):\n    if set(string).issubset({'0', '1'}):\n        return 'Yes'\n    else:\n        return 'No'\n```"
    },
    {
        "id":340,
        "response":"```python\ndef minimum_Length(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    min_length = len(s)\n    for count in char_count.values():\n        if count > 1:\n            new_length = len(s) - count\n            if count % 2 == 0:\n                new_length += 0\n            else:\n                new_length += 1\n            min_length = min(min_length, new_length)\n\n    if min_length == len(s):\n        return len(s)\n    else:\n        return min_length\n```"
    },
    {
        "id":341,
        "response":"```python\nfrom collections import OrderedDict\n\ndef first_Element(arr, n, k):\n    count_dict = OrderedDict()\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value == k:\n            return key\n    return -1\n```"
    },
    {
        "id":342,
        "response":"```python\ndef unique_Characters(s):\n    return len(s) == len(set(s))\n```"
    },
    {
        "id":343,
        "response":"```python\ndef remove_column(list1, n):\n    return [row[:n] + row[n+1:] for row in list1]\n```"
    },
    {
        "id":344,
        "response":"```python\ndef tn_ap(a, n, d):\n    return a + (n - 1) * d\n```"
    },
    {
        "id":345,
        "response":"```python\ndef count_Rectangles(radius):\n    count = 0\n    for l in range(1, 2*radius):\n        for b in range(1, 2*radius):\n            if (l\/2)**2 + (b\/2)**2 <= radius**2:\n                count += 1\n    return count\n```"
    },
    {
        "id":346,
        "response":"```python\ndef find_angle(a, b):\n    return 180 - (a + b)\n```"
    },
    {
        "id":347,
        "response":"```python\ndef find_max(test_list):\n    return max(max(tup) for tup in test_list)\n```"
    },
    {
        "id":348,
        "response":"```python\ndef moddiv_list(nums1, nums2):\n    return list(map(lambda x, y: x % y, nums1, nums2))\n```"
    },
    {
        "id":349,
        "response":"```python\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return 'No'\n    else:\n        root1 = (-b + d**0.5) \/ (2*a)\n        root2 = (-b - d**0.5) \/ (2*a)\n        if root1 == 2*root2 or root2 == 2*root1:\n            return 'Yes'\n        else:\n            return 'No'\n```"
    },
    {
        "id":350,
        "response":"```python\ndef get_carol(n):\n    if n < 0:\n        return -1\n    return (2**n - 1)**2 - 2\n```"
    },
    {
        "id":351,
        "response":"```python\ndef remove_empty(list1):\n    return [x for x in list1 if x != []]\n```"
    },
    {
        "id":352,
        "response":"```python\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    count = Counter(nums)\n    max_count = max(count.values())\n    most_common = [num for num, freq in count.items() if freq == max_count]\n    return min(most_common)\n```"
    },
    {
        "id":353,
        "response":"```python\ndef add_K_element(test_list, K):\n    return [tuple(map(lambda x: x + K, sub)) for sub in test_list]\n```"
    },
    {
        "id":354,
        "response":"```python\ndef make_flip(ch):\n    flip_count_starting_with_zero = sum(1 for i, c in enumerate(ch) if (i % 2 == 0 and c != '0') or (i % 2 != 0 and c != '1'))\n    flip_count_starting_with_one = sum(1 for i, c in enumerate(ch) if (i % 2 == 0 and c != '1') or (i % 2 != 0 and c != '0'))\n    return min(flip_count_starting_with_zero, flip_count_starting_with_one)\n```"
    },
    {
        "id":355,
        "response":"```python\ndef count_Digit(n):\n    return len(str(abs(n)))\n```"
    },
    {
        "id":356,
        "response":"```python\ndef adjacent_num_product(list_nums):\n    if len(list_nums) < 2:\n        return None\n    return max(a * b for a, b in zip(list_nums, list_nums[1:]))\n```"
    },
    {
        "id":357,
        "response":"```python\nclass TreeNode:\n    def __init__(self, data, left=None, right=None):\n        self.data = data\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def __init__(self, root):\n        self.result = self.isBalanced(root)\n        return self.result\n\n    def isBalanced(self, root):\n        if root is None:\n            return True\n\n        def check(root):\n            if root is None:\n                return 0\n            left = check(root.left)\n            right = check(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return 1 + max(left, right)\n\n        return check(root) != -1\n```"
    },
    {
        "id":358,
        "response":"```python\ndef repeat_tuples(test_tup, N):\n    return (test_tup,) * N\n```"
    },
    {
        "id":359,
        "response":"```python\ndef lateralsurface_cuboid(l, w, h):\n    return 2 * (l + w) * h\n```"
    },
    {
        "id":360,
        "response":"```python\ndef float_sort(price):\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)\n```"
    },
    {
        "id":361,
        "response":"```python\ndef smallest_missing(A, left_element, right_element):\n    if A[0] > left_element:\n        return left_element\n    for i in range(len(A) - 1):\n        if A[i] <= left_element and A[i + 1] > left_element:\n            return left_element\n        if A[i] <= right_element and A[i + 1] > right_element:\n            return right_element\n        if A[i + 1] != A[i] + 1:\n            return A[i] + 1\n    if A[-1] <= right_element:\n        return right_element + 1\n    for i in range(len(A)):\n        if A[i] > left_element:\n            return left_element\n    return left_element\n```"
    },
    {
        "id":362,
        "response":"```python\nimport heapq\n\ndef heap_assending(nums):\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(len(nums))]\n```"
    },
    {
        "id":363,
        "response":"```python\ndef volume_cuboid(l, w, h):\n    return l * w * h\n```"
    },
    {
        "id":364,
        "response":"```python\nimport itertools\n\ndef permute_string(str):\n    perms = [''.join(p) for p in itertools.permutations(str)]\n    return perms\n```"
    },
    {
        "id":365,
        "response":"```python\ndef round_num(n, m):\n    remainder = n % m\n    if remainder >= m \/ 2:\n        return n + (m - remainder)\n    else:\n        return n - remainder\n```"
    },
    {
        "id":366,
        "response":"```python\nfrom itertools import groupby\n\ndef remove_replica(test_tup):\n    result = []\n    for key, group in groupby(test_tup):\n        group_list = list(group)\n        result.append(key)\n        result.extend(['MSP'] * (len(group_list) - 1))\n    return tuple(result)\n```"
    },
    {
        "id":367,
        "response":"```python\ndef remove_Char(s, c):\n    return s.replace(c, '')\n```"
    },
    {
        "id":368,
        "response":"```python\ndef move_first(test_list):\n    if len(test_list) > 0:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n    return test_list\n```"
    },
    {
        "id":369,
        "response":"```python\ndef surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)\n```"
    },
    {
        "id":370,
        "response":"```python\ndef multi_list(rownum, colnum):\n    return [[i*j for j in range(colnum)] for i in range(rownum)]\n```"
    },
    {
        "id":371,
        "response":"```python\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])\n```"
    },
    {
        "id":372,
        "response":"```python\ndef find_rotation_count(A):\n    low, high = 0, len(A) - 1\n    while low <= high:\n        if A[low] <= A[high]:\n            return low\n        mid = (low + high) \/\/ 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[high]:\n            high = mid - 1\n        elif A[mid] >= A[low]:\n            low = mid + 1\n    return -1\n```"
    },
    {
        "id":373,
        "response":"```python\ndef even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA\n    return n ^ mask\n```"
    },
    {
        "id":374,
        "response":"```python\ndef frequency_Of_Smallest(n, arr):\n    min_val = min(arr)\n    return arr.count(min_val)\n```"
    },
    {
        "id":375,
        "response":"```python\ndef get_perrin(n):\n    perrin = [3, 0, 2]\n    if n < 3:\n        return perrin[n]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return perrin[n]\n```"
    },
    {
        "id":376,
        "response":"```python\ndef swap_count(s):\n    l = list(s)\n    count = 0\n    imbalance = 0\n    for i in range(len(l)):\n        if l[i] == '[':\n            imbalance += 1\n        elif l[i] == ']':\n            imbalance -= 1\n        if imbalance < 0:\n            j = i + 1\n            while j < len(l) and l[j] != '[':\n                j += 1\n            l[i], l[j] = l[j], l[i]\n            count += 1\n            imbalance += 2\n    return count\n```"
    },
    {
        "id":377,
        "response":"```python\ndef even_or_odd(N):\n    decimal = int(N, 16)\n    if decimal % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n```"
    },
    {
        "id":378,
        "response":"```python\ndef highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i \/\/ 2\n```"
    },
    {
        "id":379,
        "response":"```python\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```"
    },
    {
        "id":380,
        "response":"```python\ndef add_string(lst, string):\n    return [string.format(i) for i in lst]\n```"
    },
    {
        "id":381,
        "response":"```python\ndef convert_list_dictionary(l1, l2, l3):\n    return [{k1: {k2: k3}} for k1, k2, k3 in zip(l1, l2, l3)]\n```"
    },
    {
        "id":382,
        "response":"```python\ndef get_max_sum(n):\n    dp = [0] * (n + 1)\n    for i in range(n + 1):\n        dp[i] = max(i, dp[i \/\/ 2] + dp[i \/\/ 3] + dp[i \/\/ 4] + dp[i \/\/ 5])\n    return dp[n]\n```"
    },
    {
        "id":383,
        "response":"```python\ndef max_length_list(input_list):\n    max_len = max(map(len, input_list), default=0)\n    max_list = max(input_list, key=lambda x: len(x), default=[])\n    return max_len, max_list\n```"
    },
    {
        "id":384,
        "response":"```python\ndef check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\n```"
    },
    {
        "id":385,
        "response":"```python\ndef first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n```"
    },
    {
        "id":386,
        "response":"```python\nimport re\n\ndef check_char(string):\n    if not string:\n        return 'Not Valid'\n    if re.match(r'^(.).*\\1$|^(.)$', string):\n        return 'Valid'\n    return 'Not Valid'\n```"
    },
    {
        "id":387,
        "response":"```python\ndef median_numbers(a, b, c):\n    numbers = sorted([a, b, c])\n    return float(numbers[1])\n```"
    },
    {
        "id":388,
        "response":"```python\ndef sum_of_digits(nums):\n    return sum(sum(int(digit) for digit in str(num)) for num in nums)\n```"
    },
    {
        "id":389,
        "response":"```python\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":390,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\ndef extract_freq(test_list: List[Tuple]) -> int:\n    freq_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        freq_dict[sorted_tup] += 1\n    return len(freq_dict)\n```"
    },
    {
        "id":391,
        "response":"```python\ndef add_nested_tuples(test_tup1, test_tup2):\n    return tuple(tuple(a + b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":392,
        "response":"```python\ndef ncr_modp(n, r, p):\n    if r > n - r:\n        r = n - r\n    C = [0] * (r + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n    return C[r]\n```"
    },
    {
        "id":393,
        "response":"```python\nimport re\n\ndef is_valid_URL(url):\n    pattern = re.compile(\n        r'^(?:http|ftp)s?:\/\/'  \n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  \n        r'localhost|'  \n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  \n        r'(?::\\d+)?'  \n        r'(?:\/?|[\/?]\\S+)$', re.IGNORECASE)\n    return bool(pattern.match(url))\n```"
    },
    {
        "id":394,
        "response":"```python\ndef minimum(a, b):\n    return min(a, b)\n```"
    },
    {
        "id":395,
        "response":"```python\ndef check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex\n```"
    },
    {
        "id":396,
        "response":"```python\ndef find_Parity(x):\n    count = bin(x).count('1')\n    if count % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n```"
    },
    {
        "id":397,
        "response":"```python\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i]:\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n    digits[i + 1:] = sorted(digits[i + 1:])\n    return int(''.join(digits))\n```"
    },
    {
        "id":398,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2:\n        return []\n    \n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(len(nums1))]\n    heapq.heapify(queue)\n    pairs = []\n    \n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n    \n    return pairs\n```"
    },
    {
        "id":399,
        "response":"```python\ndef min_product_tuple(list1):\n    return min(a * b for a, b in list1)\n```"
    },
    {
        "id":400,
        "response":"```python\ndef min_val(listval):\n    nums = [x for x in listval if isinstance(x, (int, float))]\n    return min(nums)\n```"
    },
    {
        "id":401,
        "response":"```python\nimport re\n\ndef snake_to_camel(word):\n    words = re.split('_', word)\n    return ''.join(w.capitalize() for w in words)\n```"
    },
    {
        "id":402,
        "response":"```python\ndef remove_odd(l):\n    l = [i for i in l if i % 2 == 0]\n    return l\n```"
    },
    {
        "id":403,
        "response":"```python\ndef extract_nth_element(test_list, n):\n    return [i[n] for i in test_list] if test_list else []\n```"
    },
    {
        "id":404,
        "response":"```python\ndef overlapping(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0\n```"
    },
    {
        "id":405,
        "response":"```python\ndef max_Product(arr):\n    if len(arr) < 2:\n        return None\n    arr.sort()\n    product1 = arr[0] * arr[1]\n    product2 = arr[-1] * arr[-2]\n    if product1 > product2:\n        return (arr[0], arr[1])\n    else:\n        return (arr[-2], arr[-1])\n```"
    },
    {
        "id":406,
        "response":"```python\ndef breakSum(n):\n    if n <= 3:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    for i in range(4, n + 1):\n        dp[i] = max(dp[i - 1], dp[i \/\/ 2] + dp[i \/\/ 3] + dp[i \/\/ 3])\n    return dp[n]\n```"
    },
    {
        "id":407,
        "response":"```python\nfrom itertools import groupby\n\ndef group_tuples(Input):\n    sorted_Input = sorted(Input, key=lambda x: x[0])\n    result = []\n    for key, group in groupby(sorted_Input, key=lambda x: x[0]):\n        group_list = list(group)\n        first_element = group_list[0][0]\n        rest_elements = [element for tuple in group_list for element in tuple[1:]]\n        result.append((first_element, ) + tuple(rest_elements))\n    return result\n```"
    },
    {
        "id":408,
        "response":"```python\ndef Find_Max(lst):\n    return max(lst, key=len)\n```"
    },
    {
        "id":409,
        "response":"```python\ndef round_and_sum(list1):\n    total = sum(round(num) for num in list1)\n    return total * len(list1)\n```"
    },
    {
        "id":410,
        "response":"```python\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (2 * i) ** 3\n    return sum\n```"
    },
    {
        "id":411,
        "response":"```python\ndef concatenate_tuple(test_tup):\n    return '-'.join(map(str, test_tup))\n```"
    },
    {
        "id":412,
        "response":"```python\ndef find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    return sum_of_cubes \/ n\n```"
    },
    {
        "id":413,
        "response":"```python\ndef get_maxgold(gold, m, n):\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        dp[i][0] = gold[i][0]\n    for j in range(1, n):\n        for i in range(m):\n            max_val = dp[i][j-1]\n            if i > 0:\n                max_val = max(max_val, dp[i-1][j-1])\n            if i < m-1:\n                max_val = max(max_val, dp[i+1][j-1])\n            dp[i][j] = gold[i][j] + max_val\n    max_gold = 0\n    for i in range(m):\n        max_gold = max(max_gold, dp[i][n-1])\n    return max_gold\n```"
    },
    {
        "id":414,
        "response":"```python\ndef extract_rear(test_tuple):\n    return [elem[-1] if len(elem) > 0 else elem for elem in test_tuple]\n```"
    },
    {
        "id":415,
        "response":"```python\ndef count_element_in_list(list1, x):\n    count = sum(1 for sublist in list1 if x in sublist)\n    return count\n```"
    },
    {
        "id":416,
        "response":"```python\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n```"
    },
    {
        "id":417,
        "response":"```python\nimport re\n\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n```"
    },
    {
        "id":418,
        "response":"```python\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list\n```"
    },
    {
        "id":419,
        "response":"```python\ndef and_tuples(test_tup1, test_tup2):\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":420,
        "response":"```python\ndef parabola_directrix(a, b, c):\n    return -(b**2 + 1)\/(4*a) + c - b**2\/(4*a)\n```"
    },
    {
        "id":421,
        "response":"```python\ndef common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0\n```"
    },
    {
        "id":422,
        "response":"```python\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2\n```"
    },
    {
        "id":423,
        "response":"```python\ndef check_greater(arr, number):\n    if all(i < number for i in arr):\n        return 'Yes, entered number is greater than those in the array'\n    elif all(i > number for i in arr):\n        return 'Yes, entered number is less than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n```"
    },
    {
        "id":424,
        "response":"```python\nimport re\n\ndef text_match_one(text):\n    pattern = re.compile('B+')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":425,
        "response":"```python\ndef last_Digit(n) :\n    return abs(n) % 10\n```"
    },
    {
        "id":426,
        "response":"```python\ndef neg_nos(list1):\n    negative_nos = [num for num in list1 if num < 0]\n    return tuple(negative_nos)\n```"
    },
    {
        "id":427,
        "response":"```python\ndef remove_odd(str1):\n    return \"\".join([str1[i] for i in range(len(str1)) if i % 2 != 0])\n```"
    },
    {
        "id":428,
        "response":"```python\ndef count_bidirectional(test_list):\n    count = 0\n    freq_dict = {}\n    for tup in test_list:\n        key = tuple(sorted(tup))\n        freq_dict[key] = freq_dict.get(key, 0) + 1\n    for key, value in freq_dict.items():\n        if value >= 2:\n            count += 1\n    return str(count)\n```"
    },
    {
        "id":429,
        "response":"```python\ndef multiple_to_single(L):\n    return int(''.join(map(str, L)))\n```"
    },
    {
        "id":430,
        "response":"```python\nimport nltk\nfrom nltk import pos_tag, word_tokenize\n\nnltk.download('averaged_perceptron_tagger')\nnltk.download('punkt')\n\ndef find_adverb_position(text):\n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    for i, (word, tag) in enumerate(tagged):\n        if tag == 'RB' or tag == 'RBR' or tag == 'RBS':\n            start = text.find(word)\n            end = start + len(word)\n            return (start, end, word)\n    return None\n```"
    },
    {
        "id":431,
        "response":"```python\ndef surfacearea_cube(l):\n    if l < 0:\n        raise ValueError(\"Length cannot be negative\")\n    return 6 * l ** 2\n```"
    },
    {
        "id":432,
        "response":"```python\ndef positive_count(nums):\n    total_count = len(nums)\n    positive_count = sum(1 for num in nums if num > 0)\n    return round(positive_count \/ total_count, 2) if total_count > 0 else 0.0\n```"
    },
    {
        "id":433,
        "response":"```python\ndef largest_neg(list1):\n    neg_numbers = [num for num in list1 if num < 0]\n    if neg_numbers:\n        return min(neg_numbers)\n    else:\n        return None\n```"
    },
    {
        "id":434,
        "response":"```python\ndef trim_tuple(test_list, K):\n    return str([tup[K:len(tup)-K] for tup in test_list if len(tup[K:len(tup)-K]) > 0])\n```"
    },
    {
        "id":435,
        "response":"```python\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":436,
        "response":"```python\ndef count_Occurrence(tup, lst):\n    count = 0\n    for item in tup:\n        if item in lst:\n            count += 1\n    return count\n```"
    },
    {
        "id":437,
        "response":"```python\ndef cube_nums(nums):\n    cube = lambda x: x ** 3\n    return list(map(cube, nums))\n```"
    },
    {
        "id":438,
        "response":"```python\ndef cal_sum(n):\n    total = 0\n    i = 1\n    while i * i <= n:\n        total += i * i\n        i += 1\n    return total\n```"
    },
    {
        "id":439,
        "response":"```python\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    area = 0.5 * abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))\n    if area > 0:\n        return 'Yes'\n    else:\n        return 'No'\n```"
    },
    {
        "id":440,
        "response":"```python\ndef extract_string(str, l):\n    return [s for s in str if len(s) >= l]\n```"
    },
    {
        "id":441,
        "response":"```python\nimport re\n\ndef remove_whitespaces(text1):\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n```"
    },
    {
        "id":442,
        "response":"```python\ndef loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return None\n```"
    },
    {
        "id":443,
        "response":"```python\ndef sumofFactors(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n```"
    },
    {
        "id":444,
        "response":"```python\nimport re\n\ndef text_match_wordz(text):\n    pattern = r'\\w*z\\w*'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":445,
        "response":"```python\ndef check_monthnumb_number(monthnum2):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days\n```"
    },
    {
        "id":446,
        "response":"```python\ndef reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\n```"
    },
    {
        "id":447,
        "response":"```python\ndef Find_Min(lst):\n    return min(lst, key=len)\n```"
    },
    {
        "id":448,
        "response":"```python\ndef rectangle_area(l, b):\n    return l * b\n```"
    },
    {
        "id":449,
        "response":"```python\nimport re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]', '', str1)\n```"
    },
    {
        "id":450,
        "response":"```python\ndef Extract(lst):\n    return [item[0] for item in lst]\n```"
    },
    {
        "id":451,
        "response":"```python\ndef upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n```"
    },
    {
        "id":452,
        "response":"```python\nimport itertools\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.permutations(list1, r))\n    return [list(tup) for tup in result]\n```"
    },
    {
        "id":453,
        "response":"```python\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n```"
    },
    {
        "id":454,
        "response":"```python\ndef check_value(dict, n):\n    return len(dict) > 0 and all(val == n for val in dict.values())\n```"
    },
    {
        "id":455,
        "response":"```python\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}\n```"
    },
    {
        "id":456,
        "response":"```python\ndef find_peak_util(arr, low, high, n):\n    mid = (low + high) \/\/ 2\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n        return arr[mid]\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, mid - 1, n)\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n```"
    },
    {
        "id":457,
        "response":"```python\ndef decimal_to_Octal(deciNum):\n    return int(oct(deciNum)[2:])\n```"
    },
    {
        "id":458,
        "response":"```python\ndef max_product(arr, n):\n    import math\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 1\n    flag = 0\n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n            flag = 1\n        elif arr[i] == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if flag == 0 and max_so_far == 1:\n        return 0\n    return max_so_far\n```"
    },
    {
        "id":459,
        "response":"```python\ndef max_profit(price, k):\n    n = len(price)\n    if n < 2:\n        return 0\n    if k >= n \/\/ 2:\n        return sum(max(0, b - a) for a, b in zip(price, price[1:]))\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n    return dp[k][n - 1]\n```"
    },
    {
        "id":460,
        "response":"```python\ndef add_pairwise(test_tup):\n    return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n```"
    },
    {
        "id":461,
        "response":"```python\ndef find_remainder(arr, lens, n):\n    product = 1\n    for i in range(lens):\n        product = (product * arr[i]) % n\n    return product % n\n```"
    },
    {
        "id":462,
        "response":"```python\ndef check_Consecutive(l):\n    if len(l) == 0:\n        return True\n    return sorted(l) == list(range(min(l), max(l) + 1))\n```"
    },
    {
        "id":463,
        "response":"```python\ndef tuple_intersection(test_list1, test_list2):\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1 & set2\n```"
    },
    {
        "id":464,
        "response":"```python\ndef replace_char(str1, ch, newch):\n    str1 = str1.replace(ch, newch)\n    return str1\n```"
    },
    {
        "id":465,
        "response":"```python\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n```"
    },
    {
        "id":466,
        "response":"```python\ndef big_sum(nums):\n    return max(nums) + min(nums)\n```"
    },
    {
        "id":467,
        "response":"```python\ndef is_lower(string):\n    return string.lower()\n```"
    },
    {
        "id":468,
        "response":"```python\ndef remove_lowercase(str1):\n    return ''.join([char for char in str1 if not char.islower()])\n```"
    },
    {
        "id":469,
        "response":"```python\ndef first_Digit(n) :\n    while n >= 10 :\n        n = n \/\/ 10\n    return n\n```"
    },
    {
        "id":470,
        "response":"```python\nfrom collections import Counter\n\ndef get_max_occuring_char(str1):\n    counter = Counter(str1)\n    max_count = max(counter.values())\n    max_chars = [char for char, count in counter.items() if count == max_count]\n    return min(max_chars)\n```"
    },
    {
        "id":471,
        "response":"```python\ndef is_subset_sum(set, n, sum):\n    subset = [[False for _ in range(sum + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        subset[i][0] = True\n    for i in range(1, sum + 1):\n        subset[0][i] = False\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            if j >= set[i - 1]:\n                subset[i][j] = subset[i - 1][j] or subset[i - 1][j - set[i - 1]]\n    return subset[n][sum]\n```"
    },
    {
        "id":472,
        "response":"```python\nimport re\n\ndef match(text):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, text):\n        return 'Yes'\n    else:\n        return 'No'\n```"
    },
    {
        "id":473,
        "response":"```python\nimport math\n\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if math.factorial(i) % x == 0:\n            return i\n        i += 1\n```"
    },
    {
        "id":474,
        "response":"```python\ndef remove_matching_tuple(test_list1, test_list2):\n    test_list2_set = set(test_list2)\n    return [tup for tup in test_list1 if tup not in test_list2_set]\n```"
    },
    {
        "id":475,
        "response":"```python\ndef is_palindrome(arr, n):\n    max_palindrome = float('-inf')\n    for i in range(n):\n        num_str = str(arr[i])\n        if num_str == num_str[::-1] and arr[i] > max_palindrome:\n            max_palindrome = arr[i]\n    return max_palindrome\n```"
    },
    {
        "id":476,
        "response":"```python\nimport math\n\ndef nCr(n, r, p):\n    if not (isinstance(n, int) and isinstance(r, int) and isinstance(p, (int, float))):\n        raise TypeError(\"Input types are not valid\")\n    if n < 0 or r < 0 or n < r:\n        raise ValueError(\"n and r should be non-negative and n should be greater than or equal to r\")\n    if p < 0 or p > 1:\n        raise ValueError(\"p should be between 0 and 1\")\n    return math.comb(n, r) * (p ** r) * ((1 - p) ** (n - r))\n```"
    },
    {
        "id":477,
        "response":"```python\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])\n```"
    },
    {
        "id":478,
        "response":"```python\nimport math\n\ndef area_pentagon(a):\n    if a < 0:\n        raise ValueError(\"Input should be a non-negative number\")\n    return (math.sqrt(25 + 10 * math.sqrt(5)) \/ 4) * (a ** 2)\n```"
    },
    {
        "id":479,
        "response":"```python\ndef frequency_Of_Largest(n, arr):\n    max_val = max(arr)\n    return arr.count(max_val)\n```"
    },
    {
        "id":480,
        "response":"```python\ndef extract_symmetric(test_list):\n    seen = set()\n    symmetric_pairs = set()\n    for pair in test_list:\n        reverse_pair = pair[::-1]\n        if reverse_pair in seen:\n            symmetric_pairs.add(tuple(sorted(pair)))\n        seen.add(pair)\n    return symmetric_pairs\n```"
    },
    {
        "id":481,
        "response":"```python\ndef sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) \/ (1 - r)\n```"
    },
    {
        "id":482,
        "response":"```python\ndef binary_search(item_list, item):\n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) \/\/ 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n```"
    },
    {
        "id":483,
        "response":"```python\nimport math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    for x in range(math.floor(startx), math.ceil(endx) + 1):\n        for y in range(math.floor(starty), math.ceil(endy) + 1):\n            cx = x * radius * 1.5 + (y % 2) * radius * 0.75\n            cy = y * radius * math.sqrt(3)\n            if startx <= cx <= endx and starty <= cy <= endy:\n                hexagon = []\n                for i in range(7):\n                    angle = math.pi \/ 3 * i\n                    px = cx + radius * math.cos(angle)\n                    py = cy + radius * math.sin(angle)\n                    hexagon.append((px, py))\n                polygons.append(hexagon)\n    return polygons\n```"
    },
    {
        "id":484,
        "response":"```python\ndef binary_to_integer(test_tup):\n    binary_str = ''.join(map(str, test_tup))\n    return str(int(binary_str, 2))\n```"
    },
    {
        "id":485,
        "response":"```python\nimport re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n```"
    },
    {
        "id":486,
        "response":"```python\nimport heapq\n\ndef heap_queue_smallest(nums, n):\n    return heapq.nsmallest(n, nums)\n```"
    },
    {
        "id":487,
        "response":"```python\nimport math\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + l)\n```"
    },
    {
        "id":488,
        "response":"```python\nimport math\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n```"
    },
    {
        "id":489,
        "response":"```python\ndef diameter_circle(r):\n    return 2 * r\n```"
    },
    {
        "id":490,
        "response":"```python\ndef concatenate_elements(list):\n    return '  ' + ' '.join(list)\n```"
    },
    {
        "id":491,
        "response":"```python\ndef min_cost(cost, m, n):\n    rows = m + 1\n    cols = n + 1\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[m][n]\n```"
    },
    {
        "id":492,
        "response":"```python\ndef similar_elements(test_tup1, test_tup2):\n    return tuple(sorted(set(test_tup1) & set(test_tup2), key = test_tup1.index))\n```"
    },
    {
        "id":493,
        "response":"```python\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n```"
    },
    {
        "id":494,
        "response":"```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\n```"
    },
    {
        "id":495,
        "response":"```python\ndef count_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    a, b = 1, 0\n    for _ in range(n \/\/ 2):\n        a, b = b + 2 * a, a + 3 * b\n    return a if n % 2 == 0 else b\n```"
    },
    {
        "id":496,
        "response":"```python\ndef is_Power_Of_Two(x, y):\n    return bin(x ^ y).count('1') == 1\n```"
    },
    {
        "id":497,
        "response":"```python\nimport re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)\n```"
    },
    {
        "id":498,
        "response":"```python\ndef square_nums(nums):\n    return list(map(lambda x: x ** 2, nums))\n```"
    },
    {
        "id":499,
        "response":"```python\ndef find_Rotations(s):\n    n = len(s)\n    temp = s + s\n    for i in range(1, n + 1):\n        if temp[i:i + n] == s:\n            return i\n    return n\n```"
    },
    {
        "id":500,
        "response":"```python\ndef small_nnum(list1, n):\n    list1.sort()\n    return list1[:n]\n```"
    }
]