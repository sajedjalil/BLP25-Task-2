[
    {
        "id":1,
        "response":"import re\n\ndef remove_Occ(s, ch):\n    return re.sub(ch, '', s)"
    },
    {
        "id":2,
        "response":"import typing\nimport itertools\n\ndef sort_matrix(M: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    return sorted(M, key=sum)"
    },
    {
        "id":3,
        "response":"```python\nimport collections\nfrom typing import List, Tuple\n\ndef count_common(words: List[str]) -> List[Tuple[str, int]]:\n    word_count = collections.Counter(words)\n    max_count = max(word_count.values())\n    common_words = [(word, count) for word, count in word_count.items() if count == max_count]\n    return common_words\n```"
    },
    {
        "id":4,
        "response":"import math\n\ndef find_Volume(l, b, h):\n    return (l * b * h) \/ 2"
    },
    {
        "id":5,
        "response":"import re\n\ndef split_lowerstring(text):\n    return re.findall(r'[a-z](?:[A-Z][a-z]*)*', text)"
    },
    {
        "id":6,
        "response":"import re\n\ndef text_lowercase_underscore(text):\n    text = text.lower()\n    return 'Found a match!' if re.search(r'(.)\\1{2}', text) else 'No match found'"
    },
    {
        "id":7,
        "response":"import math\n\ndef square_perimeter(a):\n    return 4 * a"
    },
    {
        "id":8,
        "response":"import re\n\ndef str_to_list(string, substring):\n    return re.sub(substring, '', string)"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> typing.List[int]:\n    return list(set(arraynums))"
    },
    {
        "id":10,
        "response":"import math\n\ndef is_woodall(x):\n    n = int(math.sqrt(x))\n    return x == (n * (2**n)) - 1"
    },
    {
        "id":11,
        "response":"import typing\n\ndef multiples_of_num(m: int, n: int) -> typing.List[int]:\n    return [i * m for i in range(1, n + 1)]"
    },
    {
        "id":12,
        "response":"import typing\nfrom typing import List\n\ndef find_first_duplicate(nums: List[int]) -> int:\n    seen: typing.Dict[int, int] = {}\n    for num in nums:\n        if num in seen:\n            return num\n        seen[num] = 1\n    return None"
    },
    {
        "id":13,
        "response":"import typing\n\ndef maximum_Sum(list1: typing.List[typing.List[int]]) -> typing.List[int]:\n    return max(list1, key=sum)"
    },
    {
        "id":14,
        "response":"import re\n\ndef binary_to_decimal(binary: int) -> int:\n    decimal = 0\n    power = 0\n    while binary > 0:\n        last_digit = binary % 10\n        decimal += last_digit * (2 ** power)\n        binary \/\/= 10\n        power += 1\n    return decimal"
    },
    {
        "id":15,
        "response":"import math\nfrom typing import List\n\ndef find_Product(arr: List[int], n: int) -> int:\n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    return product"
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: typing.List[typing.List[int]], K: int) -> typing.List[typing.List[int]]:\n    return all(len(i) == K for i in test_list)"
    },
    {
        "id":17,
        "response":"import re\n\ndef remove(list):\n    return [re.sub('\\d', '', s) for s in list]"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n,k):\n    if k > n - k: \n        k = n - k \n    res = math.comb(n, k)\n    return res"
    },
    {
        "id":19,
        "response":"from collections import Counter\nfrom typing import List\n\ndef get_Odd_Occurrence(arr: List[int], arr_size: int) -> int:\n    count = Counter(arr)\n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n    return arr[0]"
    },
    {
        "id":20,
        "response":"import re\n\ndef check_Equality(s):\n    return len(re.findall(r'(\\w)\\1*', s))"
    },
    {
        "id":21,
        "response":"```python\nfrom collections import Counter\nfrom heapq import nlargest\nfrom typing import List\n\ndef topKFrequent(nums: List[List[int]], k: int) -> List[int]:\n    count = Counter(num for sublist in nums for num in sublist)\n    return nlargest(k, count, key=count.get)\n```"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n    return n"
    },
    {
        "id":23,
        "response":"import re\nimport typing\n\ndef decimal_To_Binary(N: typing.Union[int, float]) -> str:\n    if not isinstance(N, (int, float)):\n        raise TypeError(\"Input must be an integer or a float.\")\n    return bin(N).replace(\"0b\", \"\")"
    },
    {
        "id":24,
        "response":"import itertools\n\ndef find_missing(ar,N):\n    return next((i for i in range(1,N+1) if i not in ar), None)"
    },
    {
        "id":25,
        "response":"import math\n\ndef find_rect_num(n):\n    return math.factorial(n)"
    },
    {
        "id":26,
        "response":"import math\n\ndef find_Nth_Digit(p, q, N):\n    lcm = (p * q) \/\/ math.gcd(p, q)\n    numerator = 10**N\n    denominator = lcm\n    fraction = numerator \/\/ denominator\n    return fraction % 10"
    },
    {
        "id":27,
        "response":"import re\nfrom typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    integers = sorted([x for x in mixed_list if isinstance(x, int)])\n    strings = sorted([x for x in mixed_list if isinstance(x, str)])\n    return integers + strings"
    },
    {
        "id":28,
        "response":"```python\nimport typing\n\ndef div_even_odd(list1: typing.List[int]) -> typing.Union[int, float, str]:\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2 != 0]\n    if even and odd:\n        return max(even) \/ min(odd)\n    else:\n        return \"List must contain both even and odd numbers\"\n```"
    },
    {
        "id":29,
        "response":""
    },
    {
        "id":30,
        "response":"```python\nfrom collections import Counter\n\ndef freq_element(nums):\n    flat_list = [item for sublist in nums for item in sublist]\n    return dict(Counter(flat_list))\n```"
    },
    {
        "id":31,
        "response":"import typing\nfrom typing import List\n\ndef filter_evennumbers(nums: List[int]) -> List[int]:\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"import collections\nfrom typing import List\n\ndef find_Sum(arr: List[int], n: int) -> int:\n    count_dict = collections.Counter(arr)\n    return sum(val - 1 for val in count_dict.values() if val > 1)"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    pattern = re.compile(r'^[^_]+_[^_]+$')\n    if pattern.match(text):\n        return 'Found a match!'\n    else:\n        return 'No match found!'"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text):\n    words = ['python', 'java', 'c++', 'javascript', 'ruby']\n    for word in words:\n        if re.match(word, text, re.IGNORECASE):\n            return text\n    return 'Not matched!'"
    },
    {
        "id":35,
        "response":"import math\nfrom typing import List\n\ndef find_gcd(arr: List[int]) -> int:\n    return arr[0]"
    },
    {
        "id":36,
        "response":"import typing\n\ndef test_distinct(data: typing.List[int]) -> bool:\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":"import math\n\ndef compute_Last_Digit(A,B):\n    a_factorial = math.factorial(A)\n    b_factorial = math.factorial(B)\n    if a_factorial % b_factorial == 0:\n        return (a_factorial \/\/ b_factorial) % 10\n    else:\n        return -1"
    },
    {
        "id":38,
        "response":"import math\n\ndef odd_bit_set_number(n):\n    for i in range(n.bit_length(), -1, -1):\n        if (i+1) % 2 != 0:\n            n |= 1 << i\n    return n"
    },
    {
        "id":39,
        "response":"import typing\nimport itertools\n\ndef specified_element(nums: typing.List[typing.List], N: int) -> typing.List:\n    return [row[N] for row in nums]"
    },
    {
        "id":40,
        "response":"from typing import List, Tuple\n\ndef min_length_list(input_list: List[List]) -> Tuple[int, List]:\n    return min(enumerate(input_list), key=lambda x: len(x[1]))"
    },
    {
        "id":41,
        "response":"import math\n\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        return True\n    else:\n        return False"
    },
    {
        "id":42,
        "response":"import math\n\ndef parallelogram_area(b, h):\n    return b * h"
    },
    {
        "id":43,
        "response":"```python\nimport re\n\ndef check_Equality(str):\n    if len(str) > 0 and str[0].lower() == str[-1].lower():\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n```"
    },
    {
        "id":44,
        "response":"import typing\nfrom typing import List\n\ndef counting_sort(my_list: List[int]) -> List[int]:\n    if not my_list:\n        return []\n\n    max_val = max(my_list)\n    min_val = min(my_list)\n    count = [0] * (max_val - min_val + 1)\n    for num in my_list:\n        count[num - min_val] += 1\n\n    sorted_list = []\n    for i, cnt in enumerate(count):\n        sorted_list.extend([i + min_val] * cnt)\n\n    return sorted_list"
    },
    {
        "id":45,
        "response":"import math\n\ndef tn_gp(a,n,r):\n    return a * (r**n - 1) \/\/ (r - 1)"
    },
    {
        "id":46,
        "response":"import re\n\ndef rev(num):\n    str_num = str(num)\n    rev_num = int(str_num[::-1])\n    return num == (2 * rev_num - 1)"
    },
    {
        "id":47,
        "response":"import itertools\nimport functools\n\ndef find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))"
    },
    {
        "id":48,
        "response":"import typing\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x >= 0 and y < 0) or (x < 0 and y >= 0)"
    },
    {
        "id":49,
        "response":"import math\n\ndef is_octagonal(n):\n    return 2 * n**2 - 8*n + 1"
    },
    {
        "id":50,
        "response":"import itertools\nfrom typing import List\n\ndef max_len_sub(arr: List[int], n: int) -> int:\n    max_len = 0\n    for window_size in range(1, n + 1):\n        for window in itertools.combinations(arr, window_size):\n            if len(set(window)) == 1:\n                max_len = max(max_len, window_size)\n    return max_len"
    },
    {
        "id":51,
        "response":"import re\nfrom typing import List\n\ndef count_Substrings(s: str, n: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if len(substring) == int(substring):\n                count += 1\n    return count"
    },
    {
        "id":52,
        "response":"import typing\n\ndef smallest_num(xs: typing.List[int]) -> int:\n    return min(xs)"
    },
    {
        "id":53,
        "response":"import itertools\n\ndef max_difference(test_list):\n    return max(abs(a - b) for a, b in test_list)"
    },
    {
        "id":54,
        "response":"import functools\nimport operator\n\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=functools.cmp_to_key(lambda x, y: x[1] - y[1]))"
    },
    {
        "id":55,
        "response":"import typing\n\ndef recursive_list_sum(data_list: typing.Union[int, list]) -> int:\n    if isinstance(data_list, int):\n        return data_list\n    else:\n        return sum(recursive_list_sum(i) for i in data_list)"
    },
    {
        "id":56,
        "response":"import itertools\n\ndef pos_count(list):\n    return sum(1 for num in list if num > 0)"
    },
    {
        "id":57,
        "response":"import math\n\ndef bell_number(n):\n    return math.comb(n + 10, n)"
    },
    {
        "id":58,
        "response":"import re\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> List[int]:\n    if len(A) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    return increasing or decreasing"
    },
    {
        "id":59,
        "response":"import itertools\n\ndef is_sublist(l, s):\n    return s in [list(t) for i, t in enumerate(itertools.combinations(l, len(s))) if list(t) == s] or len(s) == 0"
    },
    {
        "id":60,
        "response":"```python\nimport typing\n\ndef find_equal_tuple(Input: typing.List[typing.Tuple[int]], k: int) -> str:\n    return 'All tuples have same length' if all(len(i) == k for i in Input) else 'Not all tuples have same length'\n```"
    },
    {
        "id":61,
        "response":"import random\n\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = max(1, int(gap \/ 1.3))\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "id":62,
        "response":"import math\n\ndef dif_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        for j in range(i, int(math.sqrt(n)) + 1):\n            if i*i + j*j == n:\n                return True\n    return False"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    return re.split(r'[\\n\\*]+', text)"
    },
    {
        "id":64,
        "response":"```python\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> List[str]:\n    if len(colors) != len(patterns):\n        return False\n    pattern_dict = {}\n    for i in range(len(colors)):\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        elif pattern_dict[patterns[i]] != colors[i]:\n            return False\n    return colors\n```"
    },
    {
        "id":65,
        "response":"import typing\n\ndef find_tuples(test_list: typing.List[typing.Tuple[int]], K: int) -> typing.List[typing.Tuple[int]]:\n    return [t for t in test_list if all(i % K == 0 for i in t)]"
    },
    {
        "id":66,
        "response":"import math\n\ndef count_Squares(m, n):\n    return sum((m - i + 1) * (n - i + 1) for i in range(1, min(m, n) + 1))"
    },
    {
        "id":67,
        "response":"import re\ndef is_Diff(n):\n    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)\n    return even_sum - odd_sum"
    },
    {
        "id":68,
        "response":"import math\n\ndef count_With_Odd_SetBits(n):\n    if n == 0:\n        return 0\n    else:\n        return math.floor(math.log2(n)) + 1"
    },
    {
        "id":69,
        "response":"import re\n\ndef word_len(s):\n    return len(re.sub(r'\\s+', '', s)) % 2 != 0"
    },
    {
        "id":70,
        "response":"import math\n\ndef tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) \/ 6"
    },
    {
        "id":71,
        "response":"import itertools\n\ndef zip_tuples(test_tup1, test_tup2):\n    return list(itertools.zip_longest(test_tup1, test_tup2 * (len(test_tup1) \/\/ len(test_tup2)) + test_tup2[:len(test_tup1) % len(test_tup2)]))"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    return (4\/3)*math.pi*r**3"
    },
    {
        "id":73,
        "response":"import itertools\n\ndef get_Char(strr):\n    return chr(sum(ord(char) for char in strr))"
    },
    {
        "id":74,
        "response":"import math\n\ndef sequence(n):\n    return math.floor(n \/ 2)"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "id":76,
        "response":"import math\n\ndef centered_hexagonal_number(n):\n    return n * (3 * n - 1) \/\/ 2 + 1"
    },
    {
        "id":77,
        "response":"```python\nimport typing\n\ndef merge_dictionaries_three(dict1: typing.Dict, dict2: typing.Dict, dict3: typing.Dict) -> typing.Dict:\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n```"
    },
    {
        "id":78,
        "response":"from typing import Dict, List\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    freq_dict = {}\n    for num in list1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"
    },
    {
        "id":79,
        "response":"import math\n\ndef closest_num(N):\n    return math.floor(N)"
    },
    {
        "id":80,
        "response":"import re\n\ndef len_log(list1):\n    return max(len(re.sub('\\W+', '', word)) for word in list1)"
    },
    {
        "id":81,
        "response":"import typing\n\ndef find_substring(str1: typing.List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "id":82,
        "response":"import re\n\ndef is_undulating(n):\n    n = str(n)\n    if len(n) < 3:\n        return False\n    is_increasing = None\n    for i in range(1, len(n)):\n        if n[i] != n[i-1]:\n            if is_increasing is None:\n                is_increasing = n[i] > n[i-1]\n            elif is_increasing != (n[i] > n[i-1]):\n                return False\n            is_increasing = not is_increasing\n    return True\n\nassert is_undulating(\"1212121\") == True\nassert is_undulating(\"123456\") == False\nassert is_undulating(\"1221\") == True\nassert is_undulating(\"1111\") == False\nassert is_undulating(\"12\") == False"
    },
    {
        "id":83,
        "response":"import math\n\ndef power(a, b):\n    if b < 0:\n        return 1 \/ (a ** -b)\n    elif b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)"
    },
    {
        "id":84,
        "response":"import typing\n\ndef index_minimum(test_list: typing.List[typing.Tuple[str, int]]) -> str:\n    return min(test_list, key=lambda x: x[1])[0]"
    },
    {
        "id":85,
        "response":"import typing\n\ndef Find_Min_Length(lst: typing.List[typing.List]) -> int:\n    return min(len(sublist) for sublist in lst)"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count"
    },
    {
        "id":87,
        "response":"from typing import List, Dict\nimport itertools\n\ndef frequency_lists(lists: List[List[int]]) -> Dict[int, int]:\n    flat_list = list(itertools.chain(*lists))\n    return {num: flat_list.count(num) for num in set(flat_list)}"
    },
    {
        "id":88,
        "response":"import math\nfrom typing import Iterable\n\ndef multiply_num(numbers: Iterable[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product \/ len(numbers)"
    },
    {
        "id":89,
        "response":"import typing\n\ndef decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]"
    },
    {
        "id":90,
        "response":"import re\nimport itertools\n\ndef next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]"
    },
    {
        "id":91,
        "response":"import typing\n\ndef kth_element(arr: typing.List[int], n: int, k: int) -> int:\n    if k < 1 or k > n:\n        return None\n    return arr[k-1]"
    },
    {
        "id":92,
        "response":"import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_(\\w)', lambda x: x.group(1).upper(), word)"
    },
    {
        "id":93,
        "response":"import math\n\ndef eulerian_num(n, m):\n    return math.pow(2, n) * m"
    },
    {
        "id":94,
        "response":"```python\nfrom typing import List, List[List[str]]\nimport itertools\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]\n```"
    },
    {
        "id":95,
        "response":"import typing\n\ndef count(lst: typing.List[bool]) -> int:\n    return sum(1 for x in lst if x)"
    },
    {
        "id":96,
        "response":"import itertools\n\ndef add_lists(test_list, test_tup):\n    return tuple(itertools.chain(test_tup, test_list))"
    },
    {
        "id":97,
        "response":"import math\n\ndef count_Hexadecimal(L, R):\n    if L > R:\n        L, R = R, L\n    return max(1, math.ceil(R \/ 16) - math.floor(L \/ 16))"
    },
    {
        "id":98,
        "response":"import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    heap = []\n    heapq.heappush(heap, (num1[0], 0, num1))\n    heapq.heappush(heap, (num2[0], 0, num2))\n    heapq.heappush(heap, (num3[0], 0, num3))\n    \n    result = []\n    while heap:\n        val, index, nums = heapq.heappop(heap)\n        result.append(val)\n        if index + 1 < len(nums):\n            heapq.heappush(heap, (nums[index + 1], index + 1, nums))\n    return result"
    },
    {
        "id":99,
        "response":"import re\n\ndef odd_Equivalent(s,n):\n    return len(re.findall('1(01)*1',s))"
    },
    {
        "id":100,
        "response":"import itertools\n\ndef extract_missing(test_list, strt_val, stop_val):\n    sorted_list = sorted([item for sublist in test_list for item in sublist])\n    result = []\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i+1] - sorted_list[i] > 1:\n            result.append((sorted_list[i] + 1, sorted_list[i+1]))\n    if sorted_list[0] > strt_val:\n        result.append((strt_val, sorted_list[0]))\n    if sorted_list[-1] < stop_val:\n        result.append((sorted_list[-1] + 1, stop_val))\n    return result"
    },
    {
        "id":101,
        "response":"from typing import List, Set\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return sorted(list(common_elements))"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    return 3.14 * diameter"
    },
    {
        "id":103,
        "response":"import re\n\ndef check_integer(text):\n    return bool(re.match(\"^-?\\d+$\", text))"
    },
    {
        "id":104,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef assign_freq(test_list: List[Tuple]) -> List[Tuple]:\n    freq_dict = Counter(tuple(sorted(item)) for item in test_list)\n    result = []\n    for key, value in freq_dict.items():\n        result.append(key + (value,))\n    return result\n```"
    },
    {
        "id":105,
        "response":"```python\nfrom typing import Dict\n\ndef empty_dit(list1: list[Dict]) -> bool:\n    return all(not d for d in list1)\n```"
    },
    {
        "id":106,
        "response":"import itertools\n\ndef tuple_to_int(nums):\n    return int(''.join(map(str, nums)))"
    },
    {
        "id":107,
        "response":"```python\nfrom typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    return [tuple(map(float, elem)) for elem in test_list]\n```"
    },
    {
        "id":108,
        "response":"import re\n\ndef string_to_list(string):\n    return re.split('\\s+', string)"
    },
    {
        "id":109,
        "response":"import itertools\n\ndef search(arr,n):\n    return max(set(itertools.chain(*arr)), key=arr.count)"
    },
    {
        "id":110,
        "response":"import itertools\n\ndef max_product_tuple(list1):\n    return max(a * b for a, b in list1)"
    },
    {
        "id":111,
        "response":"import itertools\n\ndef check_triplet(A, n, sum, count):\n    A.sort()\n    for triplet in itertools.combinations(A, 3):\n        if sum(triplet) == sum:\n            return True\n    return False"
    },
    {
        "id":112,
        "response":"import math\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    elif n == 2:\n        return 12\n    elif n == 3:\n        return 18\n    elif n == 4:\n        return 20\n    elif n == 5:\n        return 42\n    else:\n        return \"\u09b8\u0982\u0996\u09cd\u09af\u09be 1 \u09a5\u09c7\u0995\u09c7 5 \u098f\u09b0 \u09ae\u09a7\u09cd\u09af\u09c7 \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\""
    },
    {
        "id":113,
        "response":"import math\n\ndef amicable_numbers_sum(limit):\n    def sum_of_proper_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    def is_amicable(n):\n        return sum_of_proper_divisors(n) != n and sum_of_proper_divisors(sum_of_proper_divisors(n)) == n\n\n    return sum(i for i in range(1, limit + 1) if is_amicable(i))"
    },
    {
        "id":114,
        "response":"import math\nimport cmath\n\ndef angle_complex(a, b):\n    return math.atan2(b, a)"
    },
    {
        "id":115,
        "response":"import itertools\n\ndef find_length(string, n):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            diff = sum(1 for a, b in zip(sub_string, sub_string[1:]) if a != b)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "id":116,
        "response":"import math\nfrom typing import Set\n\ndef sum(a: int, b: int) -> int:\n    def get_divisors(n: int) -> Set[int]:\n        divisors: Set[int] = set()\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n \/\/ i)\n        return divisors\n\n    common_divisors: Set[int] = get_divisors(a) & get_divisors(b)\n    return sum(common_divisors)"
    },
    {
        "id":117,
        "response":"import math\n\ndef multiply_int(x, y):\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return result\n    else:\n        return -result"
    },
    {
        "id":118,
        "response":"import re\n\ndef long_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]"
    },
    {
        "id":119,
        "response":"import numpy as np\n\ndef magic_square_test(my_matrix):\n    if not isinstance(my_matrix, list) or not all(isinstance(row, list) for row in my_matrix):\n        return False\n    if not my_matrix or not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n    expected_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n    for col in range(len(my_matrix)):\n        if sum([row[col] for row in my_matrix]) != expected_sum:\n            return False\n    if sum([my_matrix[i][i] for i in range(len(my_matrix))]) != expected_sum:\n        return False\n    if sum([my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))]) != expected_sum:\n        return False\n    return True"
    },
    {
        "id":120,
        "response":"import typing\nfrom collections import Counter\n\ndef max_occurrences(nums: typing.List[int]) -> typing.Tuple[int, int]:\n    if not nums:\n        return None\n    counter = Counter(nums)\n    max_num = max(counter, key=counter.get)\n    max_count = counter[max_num]\n    return max_num, max_count"
    },
    {
        "id":121,
        "response":"import string\n\ndef reverse_vowels(str1):\n    vowels = string.ascii_letters\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left, right = left + 1, right - 1\n    return \"\".join(str1)"
    },
    {
        "id":122,
        "response":"import typing\n\ndef tup_string(tup1: typing.Tuple[str]) -> str:\n    return ''.join(tup1)"
    },
    {
        "id":123,
        "response":"import functools\nimport operator\n\ndef sum_negativenum(nums):\n    return functools.reduce(operator.add, filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"import math\nfrom typing import List\n\ndef check_last(arr: List[int], n: int, p: int) -> str:\n    last_element = arr[n-1]\n    for _ in range(p):\n        last_element = last_element * last_element\n    if last_element % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\""
    },
    {
        "id":125,
        "response":"import math\n\ndef hexagonal_num(n):\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"import math\n\ndef cal_electbill(units):\n    if units <= 50:\n        return units * 2.5\n    elif units <= 100:\n        return (50 * 2.5) + ((units - 50) * 5)\n    elif units <= 200:\n        return (50 * 2.5) + (50 * 5) + ((units - 100) * 7.5)\n    else:\n        return (50 * 2.5) + (50 * 5) + (100 * 7.5) + ((units - 200) * 10)"
    },
    {
        "id":127,
        "response":"import typing\nimport math\n\ndef zero_count(nums: typing.List[int]) -> float:\n    return math.count(0, *nums) \/ len(nums) if nums else 0"
    },
    {
        "id":128,
        "response":"import math\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n    return True\n\nassert is_Sum_Of_Powers_Of_Two(10)\nassert is_Sum_Of_Powers_Of_Two(7)\nassert not is_Sum_Of_Powers_Of_Two(12)\nassert is_Sum_Of_Powers_Of_Two(0)\nassert is_Sum_Of_Powers_Of_Two(1)"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r"
    },
    {
        "id":130,
        "response":"import itertools\n\ndef extract_singly(test_list):\n    flat_list = [item for sublist in test_list for item in sublist]\n    return [item for item in flat_list if flat_list.count(item) == 1]"
    },
    {
        "id":131,
        "response":"import typing\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    for size in range(n, 0, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index == size - 1:\n            continue\n        if max_index != 0:\n            nums = nums[:max_index + 1][::-1] + nums[max_index + 1:]\n        nums = nums[:size][::-1] + nums[size:]\n    return nums"
    },
    {
        "id":132,
        "response":"import itertools\n\ndef count_samepair(list1,list2,list3):\n    return sum(1 for a, b, c in itertools.zip_longest(list1, list2, list3) if a == b == c)"
    },
    {
        "id":133,
        "response":"import typing\nimport itertools\n\ndef find_lists(Input: typing.Union[typing.List[typing.List[int]], typing.Tuple]) -> int:\n    return sum(1 for item in Input if isinstance(item, list))"
    },
    {
        "id":134,
        "response":"import itertools\n\ndef sum_Pairs(arr,n):\n    return sum(abs(a - b) for a, b in itertools.combinations(arr, 2))"
    },
    {
        "id":135,
        "response":"import itertools\n\ndef max_Abs_Diff(arr,n):\n    return max(b - a for a, b in itertools.combinations(arr, 2))"
    },
    {
        "id":136,
        "response":"import typing\n\ndef ascii_value_string(str1: str) -> str:\n    return sum(ord(char) for char in str1)"
    },
    {
        "id":137,
        "response":"import typing\nimport itertools\n\ndef max_path_sum(tri: typing.List[typing.List[int]], m: int, n: int) -> int:\n    for i in range(m-2, -1, -1):\n        for j in range(n):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]"
    },
    {
        "id":138,
        "response":"import itertools\n\ndef sum_digits_single(x) :\n    return max(sum(int(digit) for digit in y) for y in itertools.permutations(str(x)))"
    },
    {
        "id":139,
        "response":"import itertools\n\ndef longest_subseq_with_diff_one(arr, n):\n    max_length = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == 1:\n                length = 1\n                for k in range(j + 1, n):\n                    if abs(arr[k] - arr[k - 1]) == 1:\n                        length += 1\n                    else:\n                        break\n                max_length = max(max_length, length)\n    return max_length"
    },
    {
        "id":140,
        "response":"```python\nimport itertools\n\ndef does_Contain_B(a, b, c):\n    sequence = []\n    i = 0\n    while True:\n        term = b * i + c\n        sequence.append(term)\n        if term > a:\n            break\n        i += 1\n    return a in sequence\n\nassert does_Contain_B(1, 7, 3) == True\nassert does_Contain_B(10, 2, 3) == True\nassert does_Contain_B(11, 2, 3) == False\nassert does_Contain_B(0, 5, 2) == True\nassert does_Contain_B(-1, 2, 1) == False\n```"
    },
    {
        "id":141,
        "response":"import math\n\ndef gcd(p,q):\n    def is_coprime(a,b):\n        return math.gcd(a,b) == 1\n    return is_coprime(p,q)"
    },
    {
        "id":142,
        "response":"```python\nimport typing\n\ndef merge_sort(arr: typing.List[int]) -> typing.List[int]:\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) \/\/ 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return merge(merge_sort(left_half), merge_sort(right_half))\n\ndef merge(left: typing.List[int], right: typing.List[int]) -> typing.List[int]:\n    merged = []\n    left_index = 0\n    right_index = 0\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] <= right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n    merged += left[left_index:]\n    merged += right[right_index:]\n    return merged\n\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([10, 7, 8, 9, 1, 5]) == [1, 5, 7, 8, 9, 10]\nassert merge_sort([-1, 0, 3, 4, 2]) == [-1, 0, 2, 3, 4]\nassert merge_sort([5]) == [5]\nassert merge_sort([]) == []\n```"
    },
    {
        "id":143,
        "response":"import math\n\ndef parabola_vertex(a, b, c):\n    if a == 0:\n        raise ValueError(\"\u09aa\u09cd\u09af\u09be\u09b0\u09be\u09ac\u09cb\u09b2\u09be\u099f\u09bf \u098f\u0995\u099f\u09bf \u09b8\u09b0\u09b2 \u09b0\u09c7\u0996\u09be\")\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"import typing\nimport itertools\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return [sublist[N] for sublist in nums]"
    },
    {
        "id":145,
        "response":"import struct\n\ndef even_bit_toggle_number(n) :\n    return n ^ 0xAAAAAAAA"
    },
    {
        "id":146,
        "response":"import re\n\ndef tuple_int_str(tuple_str):\n    return tuple(tuple(int(i) for i in sub_tuple) for sub_tuple in tuple_str)"
    },
    {
        "id":147,
        "response":"import itertools\n\ndef encode_list(list1):\n    return [[run, elem] for elem, run in itertools.groupby(list1)]"
    },
    {
        "id":148,
        "response":"import math\n\ndef min_Ops(arr,n,k):\n    max_val = max(arr)\n    min_val = min(arr)\n    return k * (max_val - min_val)"
    },
    {
        "id":149,
        "response":"import typing\n\ndef month_season(month: str, days: int) -> str:\n    if month in ['December', 'January', 'February']:\n        return 'winter'\n    elif month in ['March', 'April', 'May']:\n        return 'spring'\n    elif month in ['June', 'July', 'August']:\n        return 'summer'\n    elif month in ['September', 'October', 'November']:\n        return 'autumn'\n    else:\n        return 'Invalid month'"
    },
    {
        "id":150,
        "response":"import math\n\ndef solution(a, b, n):\n    for x in range(n+1):\n        y = (n - a * x) \/ b\n        if y == int(y) and y >= 0:\n            return ('x = ', x, ', y = ', int(y))"
    },
    {
        "id":151,
        "response":"import typing\nimport itertools\n\ndef remove_elements(list1: typing.List, list2: typing.List) -> typing.List:\n    return [x for x in list1 if x not in list2]"
    },
    {
        "id":152,
        "response":"import typing\n\ndef sum_series(n: int) -> int:\n    if n < 0:\n        return 0\n    else:\n        return sum(n for i in range(0, n, 2) if n - i >= 0)"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s,l):\n    return (s * l ** 2) \/ (4 * math.tan(math.pi \/ s))"
    },
    {
        "id":154,
        "response":"import math\n\ndef divSum(a, b):\n    def sum_of_divisors(n):\n        divisors = [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n        return sum(divisors) * 2\n\n    return sum_of_divisors(a) == sum_of_divisors(b)"
    },
    {
        "id":155,
        "response":"import string\n\ndef count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i].lower()) - 96 == i + 1:\n            count += 1\n    return count"
    },
    {
        "id":156,
        "response":"import itertools\n\ndef find_even_Pair(A,N):\n    return sum(1 for i, j in itertools.combinations(range(N), 2) if (A[i] ^ A[j]) % 2 == 0)"
    },
    {
        "id":157,
        "response":"import math\n\ndef next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n"
    },
    {
        "id":158,
        "response":"import typing\n\ndef frequency(a: typing.List[int], x: int) -> int:\n    return a.count(x)"
    },
    {
        "id":159,
        "response":"import math\n\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 2, 3\n        for _ in range(2, n):\n            a, b = b, 2*b + a\n        return b"
    },
    {
        "id":160,
        "response":"import itertools\n\ndef sum_range_list(list1, m, n):\n    return sum(x for x in list1 if m <= x <= n)"
    },
    {
        "id":161,
        "response":"import math\n\ndef perimeter_pentagon(a):\n    return 5 * a"
    },
    {
        "id":162,
        "response":"import re\n\ndef count_occurance(s):\n    return len(re.findall('std', s))"
    },
    {
        "id":163,
        "response":"import re\nimport string\n\ndef remove_splchar(text):\n    return re.sub('[^a-zA-Z0-9]', '', text)"
    },
    {
        "id":164,
        "response":"import typing\nfrom typing import List, Dict, Tuple\n\ndef group_keyvalue(l: List[Tuple[str, int]]) -> Dict[str, List[int]]:\n    result: Dict[str, List[int]] = {}\n    for key, value in l:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result"
    },
    {
        "id":165,
        "response":"import re\n\ndef is_valid_parenthese(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack"
    },
    {
        "id":166,
        "response":"import math\n\ndef perimeter_triangle(a,b,c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"\u098f\u0995\u099f\u09bf \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u098f\u0987 \u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af\u09c7\u09b0 \u09b8\u09ae\u09b8\u09cd\u09a4 \u09ac\u09be\u09b9\u09c1 \u09aa\u09cd\u09b0\u09af\u09bc\u09cb\u099c\u09a8\u0964\"\n    else:\n        return a + b + c"
    },
    {
        "id":167,
        "response":"```python\nimport math\nfrom typing import Tuple\n\ndef gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    return a * b \/\/ gcd(a, b)\n\ndef answer(L: int, R: int) -> Tuple[int, int]:\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if L <= lcm(i, j) <= R:\n                return (i, j)\n```"
    },
    {
        "id":168,
        "response":"import re\n\ndef string_literals(patterns, text):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return ('Matched!')\n    return ('Not Matched!')"
    },
    {
        "id":169,
        "response":""
    },
    {
        "id":170,
        "response":"```python\nimport math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371  # radius of the Earth in kilometers\n    slat, slon, elat, elon = map(math.radians, [slat, slon, elat, elon])\n    dlat = elat - slat\n    dlon = elon - slon\n    a = math.sin(dlat\/2)**2 + math.cos(slat) * math.cos(elat) * math.sin(dlon\/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return R * c\n```"
    },
    {
        "id":171,
        "response":"```python\nimport typing\n\ndef common_prefix_util(strs: typing.List[str]) -> str:\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    return shortest\n```"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string):\n    big_chars = re.findall(r'[A-Z]', string)\n    small_chars = re.findall(r'[a-z]', string)\n    special_chars = re.findall(r'[^a-zA-Z0-9]', string)\n    numbers = re.findall(r'[0-9]', string)\n    return (big_chars, small_chars, special_chars, numbers)"
    },
    {
        "id":173,
        "response":"import itertools\n\ndef count_pairs(arr, n, k):\n    count = 0\n    pairs = list(itertools.combinations(arr, 2))\n    for pair in pairs:\n        if abs(pair[0] - pair[1]) == k:\n            count += 1\n    return count"
    },
    {
        "id":174,
        "response":"import typing\n\ndef greater_specificnum(list: typing.List[int], num: int) -> typing.List[bool]:\n    return [i > num for i in list]"
    },
    {
        "id":175,
        "response":"import math\nfrom typing import Union, Tuple\n\ndef parabola_focus(a: float, b: float, c: float) -> Union[Tuple[float, float], None]:\n    if a == 0:\n        return None\n    h = -b \/ (2 * a)\n    k = (4 * a * c - b ** 2) \/ (4 * a)\n    p = 1 \/ (4 * a)\n    return (h, k + p)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text, re.IGNORECASE):\n            return 'Matched!'\n    return 'Not Matched!'"
    },
    {
        "id":177,
        "response":"```python\nimport numpy as np\n\ndef longest_common_subsequence(X, Y, m, n):\n    C = np.zeros((m + 1, n + 1))\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                C[i, j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                C[i, j] = C[i - 1, j - 1] + 1\n            else:\n                C[i, j] = max(C[i - 1, j], C[i, j - 1])\n    return C[m, n]\n```"
    },
    {
        "id":178,
        "response":"import math\nimport itertools\n\ndef prod_Square(n):\n    for i, j in itertools.product(range(1, int(math.sqrt(n)) + 1), repeat=2):\n        if i * i * j * j == n:\n            return True\n    return False\n\nassert prod_Square(25) == False\nassert prod_Square(36) == False\nassert prod_Square(50) == False\nassert prod_Square(72) == True\nassert prod_Square(100) == False"
    },
    {
        "id":179,
        "response":"import typing\nfrom typing import List\n\ndef first_Missing_Positive(arr: List[int], n: int) -> int:\n    if n == 0:\n        return 1\n    arr = set(arr)\n    for i in range(1, n + 1):\n        if i not in arr:\n            return i\n    return n + 1"
    },
    {
        "id":180,
        "response":"import math\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    return (x2 - x1 + 1) * (y2 - y1 + 1)"
    },
    {
        "id":181,
        "response":"import typing\n\ndef check_monthnumber(monthname3: str) -> str:\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return monthname3"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(str):\n    has_letter = any(char.isalpha() for char in str)\n    has_digit = any(char.isdigit() for char in str)\n    return has_letter and has_digit"
    },
    {
        "id":183,
        "response":"import typing\n\ndef remove_tuple(test_tup: typing.Tuple[int]) -> typing.Tuple[int]:\n    return tuple(set(test_tup))"
    },
    {
        "id":184,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef octal_To_Decimal(n: int) -> int:\n    return int(str(n), 8)"
    },
    {
        "id":185,
        "response":"import typing\n\ndef first(arr: typing.List[int], x: int, n: int) -> typing.List[int]:\n    for i in range(n):\n        if arr[i] == x:\n            return arr[:i] + arr[i+1:] + [x]\n    return [-1]"
    },
    {
        "id":186,
        "response":"from typing import List, Tuple\n\ndef remove_tuples(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return [tup for tup in test_list if len(tup) != K]"
    },
    {
        "id":187,
        "response":"import itertools\n\ndef find_exponentio(test_tup1, test_tup2):\n    return tuple(a ** b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\nimport typing\n\ndef largest_triangle(a: float, b: float) -> float:\n    r = (a + b) \/ 2\n    area_circle = math.pi * (r ** 2)\n    circumference = 2 * math.pi * r\n    area_triangle = (circumference * r) \/ 2\n    return area_triangle\n\nassert largest_triangle(4, 2) == 10.392304845413264\nassert largest_triangle(6, 3) == 18.849556177383492\nassert largest_triangle(8, 4) == 32.767968749895016\nassert largest_triangle(10, 5) == 50.26548245743669\nassert largest_triangle(12, 6) == 71.35774995792088"
    },
    {
        "id":189,
        "response":"import math\n\ndef highest_Power_of_2(n):\n    return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":190,
        "response":"import typing\nimport itertools\n\ndef position_max(list1: typing.List[int]) -> typing.List[int]:\n    if not list1:\n        return []\n    max_val = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_val]"
    },
    {
        "id":191,
        "response":"import typing\n\ndef chkList(lst: typing.List) -> typing.List:\n    return lst"
    },
    {
        "id":192,
        "response":"import re\n\ndef remove_even(str1):\n    return re.sub(r'[aeiouAEIOU]', '', str1)"
    },
    {
        "id":193,
        "response":"import math\n\ndef hamming_Distance(n1, n2):\n    x = n1 ^ n2\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    return count"
    },
    {
        "id":194,
        "response":"import re\n\ndef count(s, c):\n    return len(re.findall(c, s))"
    },
    {
        "id":195,
        "response":"import itertools\n\ndef inversion_elements(test_tup):\n    result = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                result.append(-test_tup[j] - 1)\n            else:\n                result.append(-test_tup[j])\n    return tuple(result)"
    },
    {
        "id":196,
        "response":"import itertools\n\ndef concatenate_elements(test_tup):\n    return tuple(''.join(x) for x in itertools.zip_longest(*[test_tup[i:] for i in range(len(test_tup))]))"
    },
    {
        "id":197,
        "response":"import re\n\ndef find_longest_repeating_subseq(str):\n    if not str:\n        return 0\n    max_length = 0\n    for i in range(len(str), 0, -1):\n        for j in range(len(str) - i + 1):\n            subseq = str[j:j+i]\n            if re.search(subseq, str[j+1:]) and subseq not in str[j+1:]:\n                max_length = max(max_length, i)\n    return max_length"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num):\n    pattern = r'^-?\\d+(?:\\.\\d{2})?$'\n    return bool(re.match(pattern, num))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    heapq.heappop(heap)\n    heapq.heappush(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string):\n    pattern = r'^[ABCDEFabcdef123450]+$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "id":201,
        "response":"import math\n\ndef count_Num(n):\n    if n == 0:\n        return 0\n    return math.floor(math.log2(n)) + 1"
    },
    {
        "id":202,
        "response":"import math\n\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))"
    },
    {
        "id":203,
        "response":"```python\nfrom typing import Tuple\n\ndef concatenate_strings(test_tup1: Tuple[str], test_tup2: Tuple[str]) -> Tuple[str]:\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    return radian * (180 \/ math.pi)"
    },
    {
        "id":205,
        "response":"import typing\nfrom collections import deque\n\ndef decode_list(alist: typing.Union[int, list]) -> typing.List[int]:\n    result = deque()\n    for item in alist:\n        if isinstance(item, list):\n            count, value = item\n            result.extend([value] * count)\n        else:\n            result.append(item)\n    return list(result)"
    },
    {
        "id":206,
        "response":"import itertools\n\ndef check_subset_list(list1, list2):\n    flat_list2 = [item for sublist in list2 for item in sublist]\n    return all(item in flat_list2 for item in list1)"
    },
    {
        "id":207,
        "response":"import re\n\ndef first_Repeated_Char(str):\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str:\n        if char_count[char] > 1:\n            return char\n    return None"
    },
    {
        "id":208,
        "response":"import math\n\ndef min_Operations(A,B):\n    if A == B:\n        return 0\n    if A > B:\n        A, B = B, A\n    if B % A == 0:\n        return 1\n    return 2"
    },
    {
        "id":209,
        "response":"import heapq\n\ndef extract_min_max(test_tup, K):\n    return tuple(heapq.merge(sorted(test_tup), heapq.nlargest(K, test_tup), reverse=True))"
    },
    {
        "id":210,
        "response":"import re\nfrom typing import Tuple\n\ndef replace_max_specialchar(text: str, n: int) -> str:\n    text = re.sub(r'(\\s|,|\\.)', lambda x: x.group(0) if text.count(x.group(0)) <= n else ':', text)\n    return text"
    },
    {
        "id":211,
        "response":"import typing\n\ndef first_even(nums: typing.List[int]) -> typing.Optional[int]:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None"
    },
    {
        "id":212,
        "response":"import typing\n\ndef check_type(test_tuple: typing.Tuple) -> typing.Tuple:\n    return len(set(type(x) for x in test_tuple)) == 1"
    },
    {
        "id":213,
        "response":"import typing\n\ndef is_majority(arr: typing.List[int], n: int, x: int) -> typing.List[int]:\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n \/ 2"
    },
    {
        "id":214,
        "response":"import math\n\ndef count_Set_Bits(n):\n    return math.floor(math.log2(n)) + 1 if n != 0 else 0"
    },
    {
        "id":215,
        "response":"import numpy as np\n\ndef find_Min(arr,low,high):\n    arr = np.array(arr)[low:high+1]\n    return np.min(arr)"
    },
    {
        "id":216,
        "response":"import re\n\ndef odd_values_string(s):\n    return re.sub(r'[aeiou]', '', s)"
    },
    {
        "id":217,
        "response":"import math\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"import typing\n\ndef all_Bits_Set_In_The_Given_Range(n: int, left: int, right: int) -> bool:\n    for i in range(left, right + 1):\n        if (n & (1 << i)) == 0:\n            return False\n    return True\n\nassert all_Bits_Set_In_The_Given_Range(4, 1, 2)\nassert all_Bits_Set_In_The_Given_Range(7, 1, 2)\nassert not all_Bits_Set_In_The_Given_Range(5, 1, 2)\nassert all_Bits_Set_In_The_Given_Range(15, 0, 3)\nassert not all_Bits_Set_In_The_Given_Range(16, 0, 3)"
    },
    {
        "id":219,
        "response":"import itertools\n\ndef re_arrange_array(arr, n):\n    positives = sorted([x for x in arr if x > 0])\n    negatives = sorted([x for x in arr if x < 0])\n    return list(itertools.chain(negatives, positives))"
    },
    {
        "id":220,
        "response":"import re\n\ndef replace_blank(str1, char):\n    return re.sub(r'\\s+', char, str1)"
    },
    {
        "id":221,
        "response":"import typing\n\ndef max_sum(tri: typing.List[typing.List[int]], n: int) -> int:\n    for i in range(n-2, -1, -1):\n        for j in range(len(tri[i])):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1] if j < len(tri[i+1])-1 else 0)\n    return tri[0][0]"
    },
    {
        "id":222,
        "response":"import heapq\n\ndef larg_nnum(list1,n):\n    return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h"
    },
    {
        "id":224,
        "response":"import math\n\ndef volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":"import math\n\ndef even_bit_set_number(n):\n    return n"
    },
    {
        "id":226,
        "response":"import math\n\ndef No_of_Triangle(N,K):\n    return (N*(N+1))\/\/2"
    },
    {
        "id":227,
        "response":"```python\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    occurences = {}\n    for i in test_list:\n        for j in test_list:\n            if i[0] == j[1] and i[1] == j[0]:\n                pair = tuple(sorted([i[0], i[1]]))\n                if pair in occurences:\n                    occurences[pair] += 1\n                else:\n                    occurences[pair] = 1\n    return occurences\n```"
    },
    {
        "id":228,
        "response":"import itertools\n\ndef number_of_substrings(str):\n    count = 0\n    for r in range(1, len(str) + 1):\n        for substring in itertools.combinations(range(len(str)), r):\n            count += 1\n    return count"
    },
    {
        "id":229,
        "response":"import math\n\ndef get_total_number_of_sequences(m, n):\n    return min(m, n)"
    },
    {
        "id":230,
        "response":"import typing\nimport itertools\n\ndef replace_list(list1: typing.List, list2: typing.List) -> typing.List:\n    if len(list1) > 0:\n        list1[-1:] = list2\n    return list1"
    },
    {
        "id":231,
        "response":"```python\nimport typing\n\ndef array_3d(m: int, n: int, o: int) -> typing.List[typing.List[typing.List[str]]]:\n    return [[[ '*' for _ in range(m) ] for _ in range(n)] for _ in range(o)]\n```"
    },
    {
        "id":232,
        "response":"import typing\n\ndef count_charac(str1: typing.Union[str, None]) -> int:\n    if str1 is None:\n        return 0\n    return len(str1)"
    },
    {
        "id":233,
        "response":"import itertools\nfrom typing import List, Tuple\n\ndef sort_on_occurence(lst: List[Tuple]) -> List[Tuple]:\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    result = []\n    current_key = sorted_lst[0][0]\n    current_value = [sorted_lst[0][1]]\n    \n    for key, value in sorted_lst[1:]:\n        if key == current_key:\n            current_value.append(value)\n        else:\n            result.append((current_key,) + tuple(current_value) + (len(current_value),))\n            current_key = key\n            current_value = [value]\n    \n    result.append((current_key,) + tuple(current_value) + (len(current_value),))\n    \n    return result"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    if N == 0:\n        return 1\n    sqrt = math.ceil(math.sqrt(N))\n    return (sqrt + 1) ** 2"
    },
    {
        "id":235,
        "response":"import numpy as np\nfrom typing import List\n\ndef max_sum(arr: List[int], n: int) -> int:\n    arr = np.array(arr)\n    prefix_sum = np.cumsum(arr)\n    max_sum = prefix_sum[-1]\n    for i in range(n):\n        for j in range(i, n):\n            max_sum = max(max_sum, prefix_sum[j] - prefix_sum[i])\n    return max_sum"
    },
    {
        "id":236,
        "response":"import math\nfrom typing import Union\n\ndef babylonian_squareroot(number: Union[int, float]) -> float:\n    if number < 0:\n        raise ValueError(\"\u09a7\u09a8\u09be\u09a4\u09cd\u09ae\u0995 \u098f\u0995\u099f\u09bf \u09b8\u0982\u0996\u09cd\u09af\u09be \u09aa\u09cd\u09b0\u09a6\u09be\u09a8 \u0995\u09b0\u09c1\u09a8\")\n    x = number\n    y = (x + 1) \/ 2\n    while y < x:\n        x = y\n        y = (x + number \/ x) \/ 2\n    return x"
    },
    {
        "id":237,
        "response":"import re\n\ndef lps(str):\n    max_length = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substring = str[i:j+1]\n            if substring == substring[::-1] and len(substring) > max_length:\n                max_length = len(substring)\n    return max_length"
    },
    {
        "id":238,
        "response":"import math\n\ndef harmonic_sum(n):\n    return sum(1.0 \/ i for i in range(1, n))"
    },
    {
        "id":239,
        "response":"import typing\n\ndef intersection_array(array_nums1: typing.List[int], array_nums2: typing.List[int]) -> typing.List[int]:\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1 & set2)"
    },
    {
        "id":240,
        "response":"import typing\n\ndef count_X(tup: typing.Tuple[int], x: int) -> typing.Tuple[int]:\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"import itertools\n\ndef insert_element(list, element):\n    return list(itertools.chain([element], list, [element]*(len(list)+1)))"
    },
    {
        "id":242,
        "response":"import cmath\n\ndef convert(numbers):\n    return (numbers.real, numbers.imag)"
    },
    {
        "id":243,
        "response":"import typing\n\ndef count_integer(list1: typing.List) -> int:\n    return sum(isinstance(x, int) for x in list1)"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text):\n    return re.findall(r'\\ba\\w+|\\be\\w+', text)"
    },
    {
        "id":245,
        "response":"```python\nimport itertools\n\ndef combinations_colors(l, n):\n    return list(itertools.combinations(l, n))\n```"
    },
    {
        "id":246,
        "response":"import math\n\ndef count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "id":247,
        "response":"import typing\n\ndef swap_numbers(a: typing.Union[int, float], b: typing.Union[int, float]) -> typing.Tuple[typing.Union[int, float], typing.Union[int, float]]:\n    a, b = b, a\n    return a, b"
    },
    {
        "id":248,
        "response":"import re\nfrom typing import List\n\ndef count_odd(array_nums: List[int]) -> List[int]:\n    return len([num for num in array_nums if num % 2 != 0])"
    },
    {
        "id":249,
        "response":"```python\nfrom typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int]], test_tup2: Tuple[Tuple[int, int]]) -> Tuple[Tuple[int, int]]:\n    return tuple(max(t1, t2) for t1, t2 in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":250,
        "response":"import math\n\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "id":251,
        "response":"import math\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int], test_tup2: Tuple[int]) -> Tuple[int]:\n    return tuple(a \/\/ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":252,
        "response":"import typing\n\ndef split_two_parts(list1: typing.List[int], L: int) -> typing.Tuple[typing.List[int], typing.List[int]]:\n    return list1[:L], list1[L:]"
    },
    {
        "id":253,
        "response":"import typing\nfrom typing import Dict\n\ndef merge_dict(d1: Dict, d2: Dict) -> Dict:\n    return {**d1, **d2}"
    },
    {
        "id":254,
        "response":"import math\n\ndef dog_age(h_age):\n    return 16 + (h_age - 1) * 4"
    },
    {
        "id":255,
        "response":"import typing\nimport itertools\n\ndef list_split(S: typing.List, step: int) -> typing.List:\n    return [list(S[i::step]) for i in range(step)]"
    },
    {
        "id":256,
        "response":"import math\n\ndef lateralsurface_cube(l):\n    return 6 * l**2"
    },
    {
        "id":257,
        "response":"import math\n\ndef square_Sum(n):\n    sum = 0\n    odd_count = 0\n    i = 1\n    while odd_count < n:\n        if i % 2 != 0:\n            sum += i ** 2\n            odd_count += 1\n        i += 1\n    return sum"
    },
    {
        "id":258,
        "response":"import math\n\ndef find_star_num(n):\n    return (n ** 2) + n + 1"
    },
    {
        "id":259,
        "response":"import typing\n\ndef ascii_value(k: typing.Union[str, int]) -> int:\n    if isinstance(k, int):\n        return k\n    else:\n        return ord(k)"
    },
    {
        "id":260,
        "response":"import typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> typing.List[int]:\n    return [arr[i] for i in range(n) if i % 2 == 0 and arr[i] % 2 == 0]"
    },
    {
        "id":261,
        "response":"import typing\n\ndef even_Power_Sum(n: int) -> int:\n    return sum(i**5 for i in range(2, n*2+1, 2))"
    },
    {
        "id":262,
        "response":"import typing\ndef rear_extract(test_list: typing.List[typing.Tuple[int, str, int]]) -> typing.List[int]:\n    return [record[2] for record in test_list]"
    },
    {
        "id":263,
        "response":"import itertools\n\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":"import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(0, n + 1):\n        if k % 2 == 0:\n            sum += math.comb(n, k)\n    return sum"
    },
    {
        "id":265,
        "response":"import numpy as np\n\ndef get_Position(a,n,m):\n    idx = np.where(np.diff(a) > 0)[0][-1]\n    if a[-1] < m:\n        return len(a) - 1\n    elif a[idx + 1] > m:\n        return idx + 1\n    else:\n        return -1"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r,h):\n    return math.pi * r**2 * h"
    },
    {
        "id":267,
        "response":"import typing\n\ndef dict_filter(dict: typing.Dict[str, int], n: int) -> typing.Dict[str, int]:\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "id":268,
        "response":"import typing\n\ndef count_first_elements(test_tup: typing.Tuple[typing.Any]) -> int:\n    count = 0\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "id":269,
        "response":"import math\n\ndef is_num_decagonal(n):\n    return 2*n**2 - 2*n + 1"
    },
    {
        "id":270,
        "response":"import typing\n\ndef sequential_search(dlist: typing.List[int], item: int) -> typing.Tuple[bool, int]:\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return (found, pos if found else -1)"
    },
    {
        "id":271,
        "response":"import typing\n\ndef all_unique(test_list: typing.List) -> bool:\n    return len(test_list) == len(set(test_list))"
    },
    {
        "id":272,
        "response":"import itertools\n\ndef sub_list(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))"
    },
    {
        "id":273,
        "response":"```python\nimport re\n\ndef validate(n: int) -> int:\n    freq = {}\n    for digit in re.sub('[^0-9]', '', str(n)):\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit, count in freq.items():\n        if int(digit) < count:\n            return 0\n    return n\n```"
    },
    {
        "id":274,
        "response":"import re\ndef check_element(lst, element):\n    return re.search(element, str(lst)) != None"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    if re.search(pattern, text):\n        return text\n    else:\n        return 'Not matched!'"
    },
    {
        "id":276,
        "response":"import itertools\n\ndef max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for r in range(1, n + 1):\n        for sub_array in itertools.combinations(a, r):\n            sub_array_sum = sum(sub_array)\n            max_sum = max(max_sum, sub_array_sum)\n    return max_sum"
    },
    {
        "id":277,
        "response":"import math\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(n+1))"
    },
    {
        "id":278,
        "response":"import math\n\ndef modular_inverse(arr, N, P):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b \/\/ a) * x, x\n\n    def modinv(a, m):\n        gcd, x, y = extended_gcd(a, m)\n        if gcd != 1:\n            return None\n        else:\n            return x % m\n\n    return sum(1 for i, num in enumerate(arr) if (num % P) == (i % N))"
    },
    {
        "id":279,
        "response":"import math\n\ndef odd_Days(N):\n    return (N \/\/ 7) + (N % 7 > 0 and N % 7 % 2 != 0)"
    },
    {
        "id":280,
        "response":"import typing\nimport itertools\n\ndef max_length(list1: typing.List[typing.List]) -> typing.Tuple[int, typing.List]:\n    if not list1:\n        return 0, []\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        for item in itertools.chain(*[iter(sublist)] * len(sublist)):\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n                max_list = sublist\n    return max_len, max_list"
    },
    {
        "id":281,
        "response":"```python\nimport math\n\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        same = k\n        diff = k * (k - 1)\n        total = same + diff\n        for _ in range(3, n + 1):\n            same, diff = diff, (same + diff) * (k - 1)\n            total = same + diff\n        return total\n\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(1, 3) == 3\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 3) == 66\nassert count_no_of_ways(5, 2) == 30\n```"
    },
    {
        "id":282,
        "response":"import math\n\ndef find(n, m):\n    return n \/\/ m"
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w,h):\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "id":284,
        "response":"import typing\n\ndef max_val(listval: typing.List[typing.Union[int, float, str]]) -> typing.Union[int, float, str]:\n    return max(listval, key=lambda x: float(x) if isinstance(x, str) else x)"
    },
    {
        "id":285,
        "response":"import math\n\ndef sum_div(number):\n    sum = 0\n    if number < 1:\n        return 0\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            sum += i\n            if i != number \/\/ i:\n                sum += number \/\/ i\n    return sum"
    },
    {
        "id":286,
        "response":"import itertools\n\ndef get_Inv_Count(arr,n):\n    return sum(itertools.count(1,1) if i+1 != arr[i] else 0 for i in range(n))"
    },
    {
        "id":287,
        "response":"import typing\n\ndef flatten_list(list1: typing.List[typing.Union[int, typing.List]]) -> typing.List[int]:\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "id":288,
        "response":"import itertools\nfrom typing import List, Union\n\ndef intersection_nested_lists(l1: List[Union[int, List[int]]], l2: List[Union[int, List[int]]]) -> List[List[int]]:\n    return [sublist for sublist in l2 if set(sublist) & set(l1)]"
    },
    {
        "id":289,
        "response":"```python\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    if not stdata:\n        return None\n    max_sum = float('-inf')\n    max_name = None\n    name_sum = {}\n    for name, score in stdata:\n        if name in name_sum:\n            name_sum[name] += score\n        else:\n            name_sum[name] = score\n    for name, score in name_sum.items():\n        if score > max_sum:\n            max_sum = score\n            max_name = name\n    return (max_name, max_sum)\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]) == ('Juan Whelan', 212)\nassert max_aggregate([('Alice', 100), ('Bob', 50), ('Alice', 50)]) == ('Alice', 150)\nassert max_aggregate([('John', 10), ('John', 20), ('John', 30)]) == ('John', 60)\nassert max_aggregate([('Student1', 90), ('Student2', 80), ('Student3', 70)]) == ('Student1', 90)\nassert max_aggregate([]) == None\n```"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 1.0\n    else:\n        return math.comb(2*n-1, n)"
    },
    {
        "id":291,
        "response":"import typing\n\ndef dict_depth(d: typing.Dict) -> int:\n    if not isinstance(d, dict):\n        return 1\n    max_depth = 1\n    for v in d.values():\n        max_depth = max(max_depth, 1 + dict_depth(v))\n    return max_depth"
    },
    {
        "id":292,
        "response":"import math\ndef set_Bit_Number(n):\n    return math.floor(math.log2(n))"
    },
    {
        "id":293,
        "response":"import itertools\n\ndef solve(a,n):\n    return a == list(a)[::-1] or list(a) == list(itertools.permutations(a))"
    },
    {
        "id":294,
        "response":"import typing\n\ndef find_Element(arr: typing.List[int], ranges: typing.List[typing.List[int]], rotations: int, index: int) -> typing.List[int]:\n    rotations %= len(arr)\n    for start, end in ranges:\n        if start <= index < end:\n            return arr[(index - start + rotations) % len(arr)]\n    return arr[index + rotations]"
    },
    {
        "id":295,
        "response":"import re\nfrom typing import Tuple, List\n\ndef start_withp(words: List[str]) -> Tuple[str]:\n    result = []\n    for word in words:\n        if re.match(r'^p', word):\n            words_with_p = [w for w in words if re.match(r'^p', w)]\n            if len(words_with_p) >= 2:\n                result.extend(words_with_p[:2])\n            else:\n                result.extend(words_with_p)\n    return tuple(result)"
    },
    {
        "id":296,
        "response":"```python\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    max_sum = 0\n    for i in range(index):\n        sum = 0\n        prev = 0\n        for j in range(i, index):\n            if j < k and a[j] > prev:\n                sum += a[j]\n                prev = a[j]\n        if sum > max_sum and j >= k:\n            max_sum = sum\n    return max_sum\n```"
    },
    {
        "id":297,
        "response":"import typing\n\ndef colon_tuplex(tuplex: typing.Tuple, m: int, n: typing.Any) -> typing.Tuple:\n    lst = list(tuplex)\n    lst[m] = [n]\n    return tuple(lst)"
    },
    {
        "id":298,
        "response":"import itertools\nimport operator\n\ndef large_product(nums1, nums2, N):\n    return [max(x*y for x, y in itertools.product(nums1, repeat=N)) for _ in range(N)]"
    },
    {
        "id":299,
        "response":"import math\n\ndef maximum(a,b):\n    return max(a,b)"
    },
    {
        "id":300,
        "response":"import re\n\ndef string_to_tuple(str1):\n    return tuple(re.split('(\\W)', str1))"
    },
    {
        "id":301,
        "response":"import math\n\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    shift = math.floor(math.log2(n))\n    return n | (1 << shift)"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r,h):\n    if r <= 0 or h <= 0:\n        return 0\n    else:\n        return (1.0\/3) * math.pi * r**2 * h"
    },
    {
        "id":303,
        "response":"import typing\n\ndef pos_nos(list1: typing.List[int]) -> typing.List[int]:\n    return [num for num in list1 if num > 0]"
    },
    {
        "id":304,
        "response":"import itertools\n\ndef max_sum_rectangular_grid(grid, n):\n    m = len(grid)\n    if m != n:\n        raise ValueError(\"\u09aa\u09cd\u09b0\u09a6\u09a4\u09cd\u09a4 \u0997\u09cd\u09b0\u09bf\u09a1\u099f\u09bf 2 x n \u09ae\u09be\u09a4\u09cd\u09b0\u09be\u09b0 \u09a8\u09af\u09bc\")\n    \n    max_sum = 0\n    for r1, c1, r2, c2 in itertools.product(range(m), repeat=4):\n        if r1 == r2 or c1 == c2:\n            continue\n        if r1 + 1 == r2 and c1 + 1 == c2:\n            continue\n        subgrid = [row[c1:c2+1] for row in grid[r1:r2+1]]\n        max_sum = max(max_sum, sum(sum(num for num in row) for row in subgrid))\n    \n    return max_sum"
    },
    {
        "id":305,
        "response":"import re\n\ndef find_Max_Len_Even(str):\n    words = re.findall(r'\\b\\w+\\b', str)\n    max_len_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > len(max_len_word):\n            max_len_word = word\n    return max_len_word"
    },
    {
        "id":306,
        "response":"import typing\nimport itertools\n\ndef find_last_occurrence(A: typing.List[int], x: int) -> int:\n    try:\n        return len(A) - 1 - list(reversed(A)).index(x)\n    except ValueError:\n        return None"
    },
    {
        "id":307,
        "response":"import itertools\n\ndef modified_encode(alist):\n    result = []\n    for k, g in itertools.groupby(alist):\n        group = list(g)\n        if len(group) > 1:\n            result.append([len(group), k])\n        else:\n            result.append(k)\n    return result"
    },
    {
        "id":308,
        "response":"import math\n\ndef max_volume(s):\n    a = (s \/\/ 3) + 1\n    while (a + a + a) <= s:\n        a += 1\n    a -= 1\n    return a * a * a"
    },
    {
        "id":309,
        "response":"import re\nfrom typing import List\n\ndef find_long_word(text: str) -> List[str]:\n    return re.findall(r'\\b\\w{5}\\b', text)"
    },
    {
        "id":310,
        "response":"import math\n\ndef sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    sum_of_square_of_sums = sum((i*(i+1))\/\/2)**2 for i in range(1, n+1))\n    return sum_of_squares - sum_of_square_of_sums"
    },
    {
        "id":311,
        "response":"import re\n\ndef find_demlo(s):\n    pattern = re.compile(r'(\\d)\\1*')\n    return ''.join(str(int(i) * (i.count(i) + 1)) for i in pattern.findall(s))"
    },
    {
        "id":312,
        "response":"import itertools\n\ndef position_min(list1):\n    if not list1:\n        return []\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]"
    },
    {
        "id":313,
        "response":"import typing\n\ndef right_rotate(arr: typing.List[int], n: int, out_of_place: int = 0, cur: int = 0) -> typing.List[int]:\n    if cur == n:\n        return arr\n    if arr[cur] < 0:\n        arr[cur], arr[out_of_place] = arr[out_of_place], arr[cur]\n        return right_rotate(arr, n, out_of_place + 1, cur + 1)\n    else:\n        return right_rotate(arr, n, out_of_place, cur + 1)"
    },
    {
        "id":314,
        "response":"import itertools\n\ndef sum_of_alternates(test_tuple):\n    even_sum = sum(test_tuple[i] for i in range(len(test_tuple)) if i % 2 == 0)\n    odd_sum = sum(test_tuple[i] for i in range(len(test_tuple)) if i % 2 != 0)\n    return (even_sum, odd_sum)"
    },
    {
        "id":315,
        "response":"```python\nimport math\n\ndef get_Min_Squares(n: int) -> int:\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n\nassert get_Min_Squares(6) == 3\nassert get_Min_Squares(9) == 1\nassert get_Min_Squares(12) == 3\nassert get_Min_Squares(1) == 1\nassert get_Min_Squares(0) == 0\nassert get_Min_Squares(13) == 2\n```"
    },
    {
        "id":316,
        "response":"import collections\nfrom typing import List\n\ndef most_occurrences(test_list: List[str]) -> str:\n    word_count = collections.Counter(' '.join(test_list).split())\n    return max(word_count, key=word_count.get)"
    },
    {
        "id":317,
        "response":"import math\n\ndef check_isosceles(x,y,z):\n    sides = [x, y, z]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"
    },
    {
        "id":318,
        "response":"import typing\n\ndef rotate_left(list1: typing.List[int], m: int, n: int) -> typing.List[int]:\n    return list1[-n:] + list1[:-n]"
    },
    {
        "id":319,
        "response":"import typing\n\ndef neg_count(list: typing.List[int]) -> int:\n    return sum(1 for x in list if x < 0)"
    },
    {
        "id":320,
        "response":"import re\n\ndef find_char(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "id":321,
        "response":"import math\n\ndef count_unset_bits(n):\n    return math.floor(math.log2(n)) + 1"
    },
    {
        "id":322,
        "response":"import collections\n\ndef char_frequency(str1):\n    frequency = collections.Counter(str1)\n    return dict(frequency)"
    },
    {
        "id":323,
        "response":"import itertools\nimport operator\n\ndef Sort(sub_li):\n    return sorted(sub_li, key=operator.itemgetter(1))"
    },
    {
        "id":324,
        "response":"import math\n\ndef check_Validity(a, b, c):\n    return a + b > c and a + c > b and b + c > a"
    },
    {
        "id":325,
        "response":"import math\ndef ap_sum(a,n,d):\n    return (n\/2) * (2*a + (n-1)*d)"
    },
    {
        "id":326,
        "response":"import calendar\n\ndef check_monthnum(monthname1):\n    return monthname1 in calendar.month_name[1:13]"
    },
    {
        "id":327,
        "response":"import re\nimport typing\n\ndef text_match_word(text: str, word: str = \"python\", punctuation: typing.List[str] = [\".\", \"!\", \"?\"]) -> str:\n    text = text.strip().lower()\n    if any(text.endswith(p + word) for p in punctuation):\n        return 'Found a match!'\n    else:\n        return 'No match found'"
    },
    {
        "id":328,
        "response":"import re\ndef check_Equality(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring[0] == substring[-1] and len(substring) > 1:\n                count += 1\n    return count"
    },
    {
        "id":329,
        "response":"import math\n\ndef find_Divisor(x, y):\n    return math.gcd(x, y)"
    },
    {
        "id":330,
        "response":"import heapq\n\ndef sum_three_smallest_nums(lst):\n    return sum(heapq.nsmallest(3, [num for num in lst if num > 0]))"
    },
    {
        "id":331,
        "response":"import typing\n\ndef set_to_tuple(s: typing.Set[int]) -> tuple:\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"import itertools\n\ndef __init__(self, value, list_num, index):\n    min_range = float('inf')\n    max_range = float('-inf')\n    for lst in list_num:\n        for num in lst:\n            if num < min_range:\n                min_range = num\n            if num > max_range:\n                max_range = num\n    for i in range(1, len(list_num) + 1):\n        ranges = list(itertools.combinations(list_num, i))\n        for r in ranges:\n            if all(any(x in y for x in r[0]) for y in r):\n                return (min(min(x for x in r[0] if x >= min_range), min(x for x in r[1] if x >= min_range)), max(max(x for x in r[0] if x <= max_range), max(x for x in r[1] if x <= max_range)))\n    return None"
    },
    {
        "id":333,
        "response":"import re\n\ndef dig_let(s):\n    return (len(re.findall(r'\\d', s)), len(re.findall(r'\\D', s)))"
    },
    {
        "id":334,
        "response":"import math\nfrom typing import List\n\ndef count_Odd_Squares(n: int, m: int) -> int:\n    count = 0\n    for i in range(n, m+1):\n        sqrt = math.sqrt(i)\n        if sqrt == int(sqrt) and int(sqrt) % 2 != 0:\n            count += 1\n    return count"
    },
    {
        "id":335,
        "response":"import itertools\n\ndef diff_consecutivenums(nums):\n    return [b - a for a, b in itertools.pairwise(nums)]"
    },
    {
        "id":336,
        "response":"import math\n\ndef zigzag(n, k):\n    if n % 2 == 0:\n        return n \/\/ 2 + k\n    else:\n        return (n + 1) \/\/ 2 + k - 1"
    },
    {
        "id":337,
        "response":"import math\n\ndef count_Squares(m,n):\n    return m * n"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n, r):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return math.comb(n-1, r-1) + math.comb(n-2, r-1)"
    },
    {
        "id":339,
        "response":"```python\nimport re\n\ndef check(string) :\n    return \"Yes\" if re.match(\"^0*1*$\", string) else \"No\"\n```"
    },
    {
        "id":340,
        "response":"import re\nfrom collections import Counter\n\ndef minimum_Length(s):\n    char_count = Counter(s)\n    min_length = min(char_count.values())\n    return min_length"
    },
    {
        "id":341,
        "response":"import itertools\n\ndef first_Element(arr,n,k):\n    for x in itertools.cycle(arr):\n        if arr.count(x) >= k:\n            return x\n    return None"
    },
    {
        "id":342,
        "response":"import re\n\ndef unique_Characters(str):\n    return len(str) == len(set(str))"
    },
    {
        "id":343,
        "response":"import typing\nimport itertools\n\ndef remove_column(list1: typing.List[typing.List[int]], n: int) -> typing.Union[typing.List[typing.List[int]], str]:\n    if n < 0 or n >= len(list1[0]):\n        return 'Column index out of range'\n    return [row[:n] + row[n+1:] for row in list1]"
    },
    {
        "id":344,
        "response":"import math\n\ndef tn_ap(a, n, d):\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"import math\n\ndef count_Rectangles(radius):\n    return (radius * 2) ** 2"
    },
    {
        "id":346,
        "response":"import math\n\ndef find_angle(a,b):\n    return 180 - (a + b)"
    },
    {
        "id":347,
        "response":"import itertools\nimport typing\n\ndef find_max(test_list: typing.List[typing.Tuple[int, int]]) -> typing.List[typing.Tuple[int, int]]:\n    return [max(i) for i in test_list]"
    },
    {
        "id":348,
        "response":"import math\nfrom typing import List\n\ndef moddiv_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x % y, nums1, nums2))"
    },
    {
        "id":349,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No real roots\"\n    elif discriminant == 0:\n        return \"One real root\"\n    else:\n        root1 = (-b + math.sqrt(discriminant)) \/ (2*a)\n        root2 = (-b - math.sqrt(discriminant)) \/ (2*a)\n        if root1 == 2*root2 or root2 == 2*root1:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "id":350,
        "response":"import math\n\ndef get_carol(n):\n    if n <= 0:\n        return 0\n    else:\n        return math.factorial(n) + n"
    },
    {
        "id":351,
        "response":"import typing\n\ndef remove_empty(list1: typing.List[typing.Union[typing.List, str]]) -> typing.List[typing.Union[typing.List, str]]:\n    return [i for i in list1 if i != []]"
    },
    {
        "id":352,
        "response":"import collections\n\ndef max_occurrences(nums):\n    count_dict = collections.Counter(nums)\n    max_count = max(count_dict.values())\n    return [num for num, count in count_dict.items() if count == max_count]"
    },
    {
        "id":353,
        "response":"import typing\n\ndef add_K_element(test_list: typing.List[typing.Tuple[int, int, int]], K: int) -> typing.List[typing.Tuple[int, int, int]]:\n    return [(i[0] + K, i[1] + K, i[2] + K) for i in test_list]"
    },
    {
        "id":354,
        "response":"import re\n\ndef make_flip(ch):\n    return sum(1 for i in range(len(ch) - 1) if ch[i] != ch[i + 1])"
    },
    {
        "id":355,
        "response":"import math\n\ndef count_Digit(n):\n    return len(str(abs(n)))"
    },
    {
        "id":356,
        "response":"import itertools\n\ndef adjacent_num_product(list_nums):\n    if len(list_nums) < 2:\n        return None\n    return max(a * b for a, b in itertools.pairwise(list_nums))"
    },
    {
        "id":357,
        "response":"```python\nimport math\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef is_balanced(root):\n    if root is None:\n        return 0\n\n    def check_balance(node):\n        if node is None:\n            return 0\n        left_height = check_balance(node.left)\n        right_height = check_balance(node.right)\n\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n\n    return check_balance(root) != -1\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.root = Node(root)\n\n    def is_balanced(self):\n        return is_balanced(self.root)\n\n# Test cases\nroot1 = BinaryTree(1)\nroot1.root.left = Node(2)\nroot1.root.right = Node(3)\nroot1.root.left.left = Node(4)\nroot1.root.left.right = Node(5)\nassert root1.is_balanced() == True\n\nroot2 = BinaryTree(1)\nroot2.root.left = Node(2)\nroot2.root.left.left = Node(3)\nroot2.root.left.left.left = Node(4)\nassert root2.is_balanced() == False\n\nroot3 = BinaryTree(1)\nroot3.root.right = Node(2)\nroot3.root.right.right = Node(3)\nroot3.root.right.right.right = Node(4)\nassert root3.is_balanced() == False\n\nroot4 = BinaryTree(1)\nroot4.root.left = Node(2)\nroot4.root.right = Node(3)\nassert root4.is_balanced() == True\n\nroot5 = BinaryTree(1)\nassert root5.is_balanced() == True\n```"
    },
    {
        "id":358,
        "response":"import itertools\n\ndef repeat_tuples(test_tup, N):\n    return itertools.repeat(test_tup, N)"
    },
    {
        "id":359,
        "response":"import math\n\ndef lateralsurface_cuboid(l,w,h):\n    return 2*h*(l+w)"
    },
    {
        "id":360,
        "response":"import typing\n\ndef float_sort(price: typing.List[typing.Tuple[str, str]]) -> typing.List[typing.Tuple[str, str]]:\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)"
    },
    {
        "id":361,
        "response":"import numpy as np\n\ndef smallest_missing(A, left_element, right_element):\n    A = np.array(A)\n    return np.arange(left_element, right_element + 2)[~np.isin(np.arange(left_element, right_element + 2), A)][0]"
    },
    {
        "id":362,
        "response":"import heapq\nfrom typing import List\n\ndef heap_assending(nums: List[int]) -> List[int]:\n    if not nums:\n        return []\n    heapq.heapify(nums)\n    result = []\n    while nums:\n        result.append(heapq.heappop(nums))\n    return result"
    },
    {
        "id":363,
        "response":"import math\n\ndef volume_cuboid(l, w, h):\n    return l * w * h"
    },
    {
        "id":364,
        "response":"import itertools\n\ndef permute_string(str):\n    return [''.join(p) for p in itertools.permutations(str)]"
    },
    {
        "id":365,
        "response":"import math\n\ndef round_num(n, m):\n    return math.floor(n \/ m) * m"
    },
    {
        "id":366,
        "response":"import itertools\n\ndef remove_replica(test_tup):\n    seen = set()\n    result = []\n    for item in test_tup:\n        if test_tup.count(item) > 1 and item in seen:\n            result.append('MSP')\n        else:\n            result.append(item)\n            seen.add(item)\n    return tuple(result)"
    },
    {
        "id":367,
        "response":"import re\n\ndef remove_Char(s,c) :\n    return re.sub(c,'',s)"
    },
    {
        "id":368,
        "response":"import copy\n\ndef move_first(test_list):\n    if len(test_list) > 0:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n    return test_list"
    },
    {
        "id":369,
        "response":"import math\n\ndef surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)"
    },
    {
        "id":370,
        "response":"import numpy as np\n\ndef multi_list(rownum,colnum):\n    return np.zeros((rownum,colnum))"
    },
    {
        "id":371,
        "response":"```python\nfrom typing import List, Tuple\n\ndef index_on_inner_list(list_data: List[Tuple[str, int, int]], index_no: int) -> List[Tuple[str, int, int]]:\n    return sorted(list_data, key=lambda x: x[index_no])\n```"
    },
    {
        "id":372,
        "response":"import typing\n\ndef find_rotation_count(A: typing.List[int]) -> typing.List[int]:\n    n = len(A)\n    min_val = min(A)\n    min_index = A.index(min_val)\n    return [min_index + 1]"
    },
    {
        "id":373,
        "response":"import math\n\ndef even_bit_toggle_number(n) :\n    return n ^ (n & (n-1))"
    },
    {
        "id":374,
        "response":"import collections\n\ndef frequency_Of_Smallest(n, arr):\n    freq = collections.Counter(arr)\n    min_freq = min(freq.values())\n    return min_freq"
    },
    {
        "id":375,
        "response":"import numpy as np\n\ndef get_perrin(n):\n    perrin_sequence = [0, 2, 3]\n    for _ in range(3, n):\n        perrin_sequence.append(perrin_sequence[-1] + perrin_sequence[-2] - perrin_sequence[-3])\n    return perrin_sequence[n-1]"
    },
    {
        "id":376,
        "response":"import re\n\ndef swap_count(s):\n    opening = re.findall(r'\\[', s)\n    closing = re.findall(r'\\]', s)\n    return (len(opening) - len(closing)) \/\/ 2"
    },
    {
        "id":377,
        "response":"import re\n\ndef even_or_odd(N):\n    hex_num = int(N, 16)\n    decimal_num = hex_num % 16\n    if decimal_num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "id":378,
        "response":"import math\n\ndef highest_Power_of_2(n):\n    return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":379,
        "response":"import numpy as np\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_numbers = np.zeros(n + 1, dtype=int)\n        lucas_numbers[0] = 2\n        lucas_numbers[1] = 1\n        for i in range(2, n + 1):\n            lucas_numbers[i] = lucas_numbers[i - 1] + lucas_numbers[i - 2]\n        return lucas_numbers[n]"
    },
    {
        "id":380,
        "response":"```python\nimport typing\n\ndef add_string(list: typing.List, string: str) -> typing.List:\n    return [string.format(i) for i in list]\n```"
    },
    {
        "id":381,
        "response":"import typing\n\ndef convert_list_dictionary(l1: typing.List[str], l2: typing.List[str], l3: typing.List[int]) -> typing.List[typing.Dict[str, typing.Dict[str, int]]]:\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]"
    },
    {
        "id":382,
        "response":"import math\n\ndef get_max_sum(n):\n    memo = {0: 0, 1: 1}\n    def f(x):\n        if x in memo:\n            return memo[x]\n        else:\n            res = 0\n            for i in [2, 3, 4, 5]:\n                if x >= i:\n                    res = max(res, f(x \/\/ i) + f(x - (x \/\/ i) * i))\n            memo[x] = res + x\n            return res + x\n    return f(n)"
    },
    {
        "id":383,
        "response":"import itertools\n\ndef max_length_list(input_list):\n    return (max(len(sublist) for sublist in input_list), max(input_list, key=len))"
    },
    {
        "id":384,
        "response":"import typing\n\ndef check_distinct(test_tup: typing.Tuple[int]) -> typing.Tuple[int]:\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"from typing import Dict\n\ndef first_non_repeating_character(str1: str) -> str:\n    char_count: Dict[str, int] = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "id":386,
        "response":"import re\n\ndef check_char(string):\n    if len(string) > 0 and string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Not Valid\""
    },
    {
        "id":387,
        "response":"import typing\n\ndef median_numbers(a: int, b: int, c: int) -> float:\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) \/\/ 2 - 1] + numbers[len(numbers) \/\/ 2]) \/ 2\n    else:\n        return numbers[len(numbers) \/\/ 2]"
    },
    {
        "id":388,
        "response":"import typing\n\ndef sum_of_digits(nums: typing.List[int]) -> typing.List[int]:\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "id":389,
        "response":"import itertools\n\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"import collections\n\ndef extract_freq(test_list):\n    freq_dict = collections.defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        freq_dict[sorted_tup] += 1\n    return len(freq_dict)"
    },
    {
        "id":391,
        "response":"from typing import Tuple\n\ndef add_nested_tuples(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(tuple(x + y for x, y in zip(a, b)) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":392,
        "response":"import math\n\ndef ncr_modp(n, r, p):\n    if r > n or r < 0 or n < 0:\n        return 0\n    if r == 0 or n == r:\n        return 1\n    return math.comb(n, r) % p"
    },
    {
        "id":393,
        "response":"```python\nfrom urllib.parse import urlparse\nfrom typing import Optional\n\ndef is_valid_URL(str: Optional[str]) -> bool:\n    try:\n        result = urlparse(str)\n        return all([result.scheme, result.netloc])\n    except ValueError:\n        return False\n```"
    },
    {
        "id":394,
        "response":"import math\n\ndef minimum(a,b):\n    return min(a, b)"
    },
    {
        "id":395,
        "response":"import typing\n\ndef check_tuplex(tuplex: typing.Union[tuple, list], tuple1: typing.Any) -> bool:\n    return tuple1 in tuplex"
    },
    {
        "id":396,
        "response":"import typing\n\ndef find_Parity(x: int) -> str:\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""
    },
    {
        "id":397,
        "response":"import itertools\n\ndef rearrange_bigger(n):\n    digits = [int(i) for i in str(n)]\n    return int(''.join(sorted(str(n), reverse=True)))"
    },
    {
        "id":398,
        "response":"import itertools\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = list(itertools.product(nums1, nums2))\n    return sorted(pairs, key=lambda x: x[0])[:k]"
    },
    {
        "id":399,
        "response":"import itertools\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min(a * b for a, b in list1)"
    },
    {
        "id":400,
        "response":"import typing\nimport itertools\n\ndef min_val(listval: typing.List[typing.Union[int, float, str]]) -> typing.Union[int, float, str]:\n    return min(listval)"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word).capitalize()"
    },
    {
        "id":402,
        "response":"import typing\n\ndef remove_odd(l: typing.List[int]) -> typing.List[int]:\n    return [i for i in l if i % 2 == 0]"
    },
    {
        "id":403,
        "response":"import typing\n\ndef extract_nth_element(list1: typing.List[typing.Tuple], n: int) -> typing.List:\n    return [i[n] for i in list1 if n < len(i)]"
    },
    {
        "id":404,
        "response":"import typing\n\ndef overlapping(list1: typing.List[int], list2: typing.List[int]) -> typing.List[int]:\n    set2 = set(list2)\n    for i in list1:\n        if i in set2:\n            return list1\n    return []"
    },
    {
        "id":405,
        "response":"import itertools\n\ndef max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max_product = (0,0)\n    for pair in itertools.combinations(arr, 2):\n        product = pair[0] * pair[1]\n        if product > max_product[0]:\n            max_product = pair\n    return max_product"
    },
    {
        "id":406,
        "response":"import math\n\ndef breakSum(n):\n    if n < 4:\n        return n\n    else:\n        return (n \/\/ 3) * 3 + (n % 3)"
    },
    {
        "id":407,
        "response":"```python\nfrom typing import List, Tuple, Dict\n\ndef group_tuples(tuples: List[Tuple]) -> List[Tuple]:\n    result: Dict = {}\n    for tup in tuples:\n        key = tup[0]\n        if key in result:\n            result[key].update(tup[1:])\n        else:\n            result[key] = set(tup[1:])\n    return [tuple([key] + sorted(list(value))) for key, value in result.items()]\n```"
    },
    {
        "id":408,
        "response":"import itertools\n\ndef Find_Max(lst):\n    return max(lst, key=len)"
    },
    {
        "id":409,
        "response":"import math\n\ndef round_and_sum(list1):\n    return sum(round(num) for num in list1) * len(list1)"
    },
    {
        "id":410,
        "response":"import math\n\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, n+1)) * 2"
    },
    {
        "id":411,
        "response":"import typing\n\ndef concatenate_tuple(test_tup: typing.Tuple) -> str:\n    return '-'.join(map(str, test_tup))"
    },
    {
        "id":412,
        "response":"import math\n\ndef find_Average_Of_Cube(n):\n    if n == 0:\n        return 0.0\n    return sum(i**3 for i in range(1, n+1)) \/ n"
    },
    {
        "id":413,
        "response":"import numpy as np\n\ndef get_maxgold(gold, m, n):\n    return np.max(np.max(gold, axis=1))"
    },
    {
        "id":414,
        "response":"import typing\n\ndef extract_rear(test_tuple: typing.Tuple[str]) -> typing.List[str]:\n    return [string[-1] for string in test_tuple]"
    },
    {
        "id":415,
        "response":"import typing\nimport itertools\n\ndef count_element_in_list(list1: typing.List[typing.List[int]], x: int) -> typing.List[typing.List[int]]:\n    return sum(1 for sublist in list1 if x in sublist)"
    },
    {
        "id":416,
        "response":"import re\nimport typing\nimport itertools\n\ndef filter_oddnumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "id":418,
        "response":"import typing\nimport itertools\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    n = len(my_list)\n    gap = n \/\/ 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n\n    return my_list"
    },
    {
        "id":419,
        "response":"import operator\n\ndef and_tuples(test_tup1, test_tup2):\n    return tuple(operator.and_(x, y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "id":420,
        "response":"import math\n\ndef parabola_directrix(a, b, c):\n    h = -b \/ (2 * a)\n    k = (4 * a * c - b ** 2) \/ (4 * a)\n    return k - 1 \/ (4 * a)"
    },
    {
        "id":421,
        "response":"import typing\n\ndef common_element(list1: typing.List[int], list2: typing.List[int]) -> bool:\n    return any(element in list2 for element in list1)"
    },
    {
        "id":422,
        "response":"import math\n\ndef median_trapezium(base1,base2,height):\n    area = 0.5 * (base1 + base2) * height\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_greater(arr, number):\n    if len(arr) == 0 or all(number > i for i in arr):\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    if re.search(\"b\", text):\n        return text\n    else:\n        return ('Not matched!')"
    },
    {
        "id":425,
        "response":"import typing\n\ndef last_Digit(n: int) -> int:\n    return n % 10"
    },
    {
        "id":426,
        "response":"import typing\n\ndef neg_nos(list1: typing.List[int]) -> typing.List[int]:\n    return [i for i in list1 if i < 0]"
    },
    {
        "id":427,
        "response":"import re\n\ndef remove_odd(str1):\n    return re.sub('[^aeiouAEIOU]', '', str1)"
    },
    {
        "id":428,
        "response":"from typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> str:\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return str(count)"
    },
    {
        "id":429,
        "response":"import itertools\n\ndef multiple_to_single(L):\n    return int(''.join(map(str, L)))"
    },
    {
        "id":430,
        "response":"import re\n\ndef find_adverb_position(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            return (i, len(word)-2, word)\n    return None"
    },
    {
        "id":431,
        "response":"import math\n\ndef surfacearea_cube(l):\n    return 6 * l ** 2"
    },
    {
        "id":432,
        "response":"import typing\n\ndef positive_count(nums: typing.List[int]) -> float:\n    positive_sum = sum(1 for num in nums if num > 0)\n    total_count = len(nums)\n    return positive_sum \/ total_count if total_count != 0 else 0.0"
    },
    {
        "id":433,
        "response":"import typing\n\ndef largest_neg(list1: typing.List[int]) -> typing.Union[int, None]:\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    if max_neg == float('-inf'):\n        return None\n    return max_neg"
    },
    {
        "id":434,
        "response":"```python\nfrom typing import List, Tuple\n\ndef trim_tuple(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    return [t[K:] for t in test_list]\n```"
    },
    {
        "id":435,
        "response":"```python\nimport itertools\n\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple((a * b, c * d) for a, c, b, d in itertools.zip_longest(*[zip(*t) for t in (test_tup1, test_tup2)]))\n```"
    },
    {
        "id":436,
        "response":"import itertools\n\ndef count_Occurrence(tup, lst):\n    return sum(1 for i in tup if i in lst)"
    },
    {
        "id":437,
        "response":"import math\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))"
    },
    {
        "id":438,
        "response":"import math\n\ndef cal_sum(n):\n    return n ** 2"
    },
    {
        "id":439,
        "response":"import math\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    a = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    b = math.sqrt((x3 - x2)**2 + (y3 - y2)**2)\n    c = math.sqrt((x1 - x3)**2 + (y1 - y3)**2)\n    if a + b > c and a + c > b and b + c > a:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "id":440,
        "response":"import typing\nimport itertools\n\ndef extract_string(str_list: typing.List[str], length: int) -> typing.List[str]:\n    return list(itertools.islice(str_list, length, None))"
    },
    {
        "id":441,
        "response":"import re\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":"import typing\n\ndef loss_amount(actual_cost: int, sale_amount: int) -> typing.Union[int, None]:\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None"
    },
    {
        "id":443,
        "response":"import itertools\n\ndef sumofFactors(n) :\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    even_factors = [factor for factor in factors if factor % 2 == 0]\n    return sum(even_factors)"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    if re.search('z', text):\n        return 'Found a match!'\n    else:\n        return 'No match found'"
    },
    {
        "id":445,
        "response":"import typing\n\ndef check_monthnumb_number(monthnum2: typing.Union[int, str]) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]"
    },
    {
        "id":446,
        "response":"import typing\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"import itertools\n\ndef Find_Min(lst):\n    return min(lst, key=len)"
    },
    {
        "id":448,
        "response":"import math\n\ndef rectangle_area(length, breadth):\n    return length * breadth"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    return re.sub('[A-Z]', '', str1)"
    },
    {
        "id":450,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.List]) -> typing.List:\n    return [sublist[0] for sublist in lst if sublist]"
    },
    {
        "id":451,
        "response":"import re\n\ndef upper_ctr(str):\n    return len(re.findall(r'[A-Z]', str))"
    },
    {
        "id":452,
        "response":"```python\nimport itertools\nimport typing\n\ndef combinations_list(list1: typing.List[str]) -> typing.List[typing.List[str]]:\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.combinations(list1, r))\n    return [list(i) for i in result]\n```"
    },
    {
        "id":453,
        "response":"import numpy as np\n\ndef max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result"
    },
    {
        "id":454,
        "response":"import typing\n\ndef check_value(dict: typing.Dict[str, int], n: int) -> typing.Dict[str, int]:\n    return dict if len(set(dict.values())) == 1 and all(value == n for value in dict.values()) else {}"
    },
    {
        "id":455,
        "response":"import typing\n\ndef drop_empty(dict1: typing.Dict[str, typing.Any]) -> typing.Dict[str, typing.Any]:\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "id":456,
        "response":"import typing\n\ndef find_peak_util(arr: typing.List[int], low: int, high: int, n: int) -> int:\n    if high == low:\n        return low\n    if high == high - 1 or arr[high] > arr[high - 1]:\n        return high\n    if low == high - 1 or arr[low] > arr[low + 1]:\n        return low\n    mid = (low + high) \/\/ 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return mid\n    if arr[mid] > arr[mid - 1]:\n        return find_peak_util(arr, mid, high, n)\n    return find_peak_util(arr, low, mid, n)"
    },
    {
        "id":457,
        "response":"import math\n\ndef decimal_to_Octal(deciNum):\n    return int(math.log(deciNum, 2) \/ math.log(2, 8) * 8)"
    },
    {
        "id":458,
        "response":"import itertools\n\ndef max_product(arr, n):\n    max_product = 0\n    for r in range(1, n + 1):\n        for subset in itertools.combinations(arr, r):\n            product = 1\n            for num in subset:\n                product *= num\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "id":459,
        "response":"import itertools\n\ndef max_profit(price, k):\n    max_profit = 0\n    for combo in itertools.combinations(range(len(price)), k):\n        profit = 0\n        for i in range(len(combo) - 1):\n            profit += price[combo[i + 1]] - price[combo[i]]\n        max_profit = max(max_profit, profit)\n    return max_profit"
    },
    {
        "id":460,
        "response":"import itertools\n\ndef add_pairwise(test_tup):\n    return tuple(a + b for a, b in itertools.pairwise(test_tup))"
    },
    {
        "id":461,
        "response":"import math\nfrom typing import List\n\ndef find_remainder(arr: List[int], lens: int, n: int) -> int:\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "id":462,
        "response":"import itertools\n\ndef check_Consecutive(l):\n    return len(l) == len(set(l)) and max(l) - min(l) == len(l) - 1"
    },
    {
        "id":463,
        "response":"from typing import List, Tuple, Set\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = set(tuple(sorted(tup)) for tup in test_list1)\n    set2 = set(tuple(sorted(tup)) for tup in test_list2)\n    intersection = set1.intersection(set2)\n    return intersection"
    },
    {
        "id":464,
        "response":"import re\n\ndef replace_char(str1,ch,newch):\n    return re.sub(ch, newch, str1)"
    },
    {
        "id":465,
        "response":"import itertools\n\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)"
    },
    {
        "id":466,
        "response":"import typing\n\ndef big_sum(nums: typing.List[int]) -> int:\n    return max(nums) + min(nums)"
    },
    {
        "id":467,
        "response":"import re\n\ndef is_lower(string):\n    return re.sub(r'(\\w)', lambda m: m.group(1).lower(), string)"
    },
    {
        "id":468,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)"
    },
    {
        "id":469,
        "response":"import math\n\ndef first_Digit(n) :\n    return int(str(abs(n))[0])"
    },
    {
        "id":470,
        "response":"import re\nfrom collections import Counter\n\ndef get_max_occuring_char(str1):\n    count_dict = Counter(re.findall(r'[a-zA-Z]', str1))\n    max_count = max(count_dict.values())\n    for char, count in count_dict.items():\n        if count == max_count:\n            return char"
    },
    {
        "id":471,
        "response":"```python\ndef is_subset_sum(set, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if n > 0 and set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([1, 2, 3, 7], 4, 6) == True\nassert is_subset_sum([1, 2, 3, 7], 4, 10) == False\nassert is_subset_sum([10, 20, 30], 3, 60) == True\nassert is_subset_sum([10, 20, 30], 3, 61) == False\nassert is_subset_sum([], 0, 5) == False\n```"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, text):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        factorial = math.factorial(i)\n        if factorial % x == 0:\n            return i\n        i += 1"
    },
    {
        "id":474,
        "response":"import itertools\n\ndef remove_matching_tuple(test_list1, test_list2):\n    return [item for item in test_list1 if item not in test_list2]"
    },
    {
        "id":475,
        "response":"import itertools\n\ndef is_palindrome(arr):\n    return max([num for num in arr if str(num) == ''.join(str(num) for num in itertools.islice(itertools.reversed(str(num)), 0, len(str(num))))])"
    },
    {
        "id":476,
        "response":"import math\nfrom typing import Tuple\n\ndef nCr(n: int, r: int, p: float) -> float:\n    return math.comb(n, r) * (p ** r) * ((1 - p) ** (n - r))"
    },
    {
        "id":477,
        "response":"import itertools\nimport typing\n\ndef sort_tuple(tup_list: typing.List[typing.Tuple[int, int]]) -> typing.List[typing.Tuple[int, int]]:\n    return sorted(tup_list, key=lambda x: x[-1])"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    s = a\n    h = math.sqrt(25 * math.pow(s, 2) \/ 4)\n    return (math.sqrt(25 * math.pow(s, 2) \/ 4) * s) \/ 2"
    },
    {
        "id":479,
        "response":"import collections\nfrom typing import List\n\ndef frequency_Of_Largest(n: int, arr: List[int]) -> int:\n    freq = collections.Counter(arr)\n    max_freq = max(freq.values())\n    return max_freq"
    },
    {
        "id":480,
        "response":"import typing\n\ndef extract_symmetric(test_list: typing.List[tuple]) -> set:\n    symmetric_pairs = set()\n    for pair in test_list:\n        if (pair[1], pair[0]) in test_list:\n            symmetric_pairs.add(tuple(sorted(pair)))\n    return symmetric_pairs"
    },
    {
        "id":481,
        "response":"import math\n\ndef sum_gp(a,n,r):\n    if r == 1:\n        return a * n\n    elif r < 1:\n        return a * (1 - r ** n) \/ (1 - r)\n    else:\n        return a * (r ** n - 1) \/ (r - 1)"
    },
    {
        "id":482,
        "response":"import typing\ndef binary_search(item_list: typing.List[int], item: int) -> bool:\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if item_list[mid] == item:\n            return True\n        elif item_list[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
    },
    {
        "id":483,
        "response":"import math\nimport itertools\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    points = []\n    for i in range(6):\n        angle = 2 * math.pi * i \/ 6\n        x = startx + radius * math.cos(angle)\n        y = starty + radius * math.sin(angle)\n        points.append((x, y))\n    points.append(points[0])\n    polygons = []\n    for i in range(6):\n        polygon = []\n        for j in range(6):\n            angle = 2 * math.pi * j \/ 6\n            x = endx + radius * math.cos(angle)\n            y = endy + radius * math.sin(angle)\n            polygon.append((x, y))\n        polygons.append(polygon)\n    return polygons"
    },
    {
        "id":484,
        "response":"import typing\nimport itertools\n\ndef binary_to_integer(test_tup: typing.Tuple[int]) -> str:\n    binary_str = ''.join(map(str, test_tup))\n    return str(int(binary_str, 2))"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\nfrom typing import List\n\ndef heap_queue_smallest(nums: List[int], n: int) -> List[int]:\n    return heapq.nsmallest(n, nums)"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r,h):\n    pi = math.pi\n    l = math.sqrt(r*r + h*h)\n    return pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"import math\n\ndef gcd(x, y):\n    return math.gcd(x, y)\n\nassert gcd(12, 17) == 1\nassert gcd(48, 18) == 6\nassert gcd(101, 103) == 1\nassert gcd(60, 48) == 12\nassert gcd(7, 7) == 7"
    },
    {
        "id":489,
        "response":"import math\n\ndef diameter_circle(r):\n    return 2 * r"
    },
    {
        "id":490,
        "response":"import typing\n\ndef concatenate_elements(list: typing.List[str]) -> str:\n    return ' '.join(list)"
    },
    {
        "id":491,
        "response":"import sys\nfrom typing import List\n\ndef min_cost(cost: List[List[int]], m: int, n: int) -> int:\n    if m == 0 or n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    dp[1][1] = cost[0][0]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = cost[i - 1][j - 1] + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"import itertools\n\ndef similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return tuple(sorted(set1 & set2))"
    },
    {
        "id":493,
        "response":"import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nassert is_not_prime(2) == False\nassert is_not_prime(1) == True\nassert is_not_prime(4) == True\nassert is_not_prime(3) == False\nassert is_not_prime(25) == True"
    },
    {
        "id":494,
        "response":"import heapq\nfrom typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, nums)"
    },
    {
        "id":495,
        "response":"import math\n\ndef count_ways(n):\n    return math.comb(2*n-1, n)"
    },
    {
        "id":496,
        "response":"import binascii\n\ndef is_Power_Of_Two(x, y):\n    return bin(x ^ y).count('1') == 1"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"import math\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]"
    },
    {
        "id":499,
        "response":"import itertools\n\ndef find_Rotations(str):\n    return len(set(''.join(p) for p in itertools.permutations(str)))"
    },
    {
        "id":500,
        "response":"import heapq\nfrom typing import List\n\ndef small_nnum(list1: List[int], n: int) -> List[int]:\n    return heapq.nsmallest(n, list1)"
    }
]