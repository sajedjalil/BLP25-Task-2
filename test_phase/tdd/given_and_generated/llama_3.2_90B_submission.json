[
    {
        "id":1,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_Occ(s, ch):\n    s = re.sub(ch, '', s, 1)\n    s = re.sub(ch + '$', '', s)\n    return s\n```"
    },
    {
        "id":2,
        "response":"```python\nimport itertools\nimport operator\nimport functools\n\ndef sort_matrix(M):\n    return sorted(M, key=functools.reduce)\n```"
    },
    {
        "id":3,
        "response":"```python\nimport collections\nimport operator\n\ndef count_common(words):\n    word_count = collections.Counter(words)\n    common_words = sorted(word_count.items(), key=operator.itemgetter(1), reverse=True)\n    max_count = common_words[0][1]\n    return [word for word in common_words if word[1] == max_count or word[1] == max_count - 1 or word[1] == max_count - 2 or word[1] == max_count - 3]\n```"
    },
    {
        "id":4,
        "response":"```python\nimport math\n\ndef find_Volume(l, b, h):\n    return (1\/2) * l * b * h\n```"
    },
    {
        "id":5,
        "response":"```python\nimport re\nimport typing\n\ndef split_lowerstring(text):\n    return re.findall(r'[a-z]+', text)\n```"
    },
    {
        "id":6,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef text_lowercase_underscore(text):\n    for i in range(len(text) - 2):\n        if text[i].islower() and text[i+1].islower() and text[i+2].islower():\n            if text[i] == chr(ord(text[i+1]) - 1) and text[i+1] == chr(ord(text[i+2]) - 1):\n                return 'Found a match!'\n    return 'No match found!'\n```"
    },
    {
        "id":7,
        "response":"```python\nimport math\n\ndef square_perimeter(a):\n    return 4 * a\n```"
    },
    {
        "id":8,
        "response":"```python\nimport re\nfrom typing import List\n\ndef str_to_list(string: str, chars: str) -> str:\n    for char in chars:\n        string = string.replace(char, '', 1)\n    return string\n```"
    },
    {
        "id":9,
        "response":"```python\nimport typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))\n```"
    },
    {
        "id":10,
        "response":"```python\nimport math\n\ndef is_woodall(x):\n    i = 1\n    while True:\n        woodall = i * (2 ** i) - 1\n        if woodall == x:\n            return True\n        elif woodall > x:\n            return False\n        i += 1\n```"
    },
    {
        "id":11,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef multiples_of_num(m, n):\n    return [i for i in range(m, m*n+1, m)]\n```"
    },
    {
        "id":12,
        "response":"```python\nfrom typing import List, Optional\n\ndef find_first_duplicate(nums: List[int]) -> Optional[int]:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n```"
    },
    {
        "id":13,
        "response":"```python\nimport itertools\nimport typing\n\ndef maximum_Sum(list1: typing.List[typing.List[int]]) -> int:\n    return max(sum(sublist) for sublist in list1)\n```"
    },
    {
        "id":14,
        "response":"```python\nimport math\n\ndef binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary > 0:\n        digit = binary % 10\n        decimal += digit * 2 ** power\n        binary \/\/= 10\n        power += 1\n    return decimal\n```"
    },
    {
        "id":15,
        "response":"```python\nimport math\nimport itertools\n\ndef find_Product(arr,n):\n    product = 1\n    for unique in set(arr):\n        if arr.count(unique) == 1:\n            product *= unique\n    return product\n```"
    },
    {
        "id":16,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_k_elements(test_list, K):\n    return all(len(i) == K for i in test_list)\n```"
    },
    {
        "id":17,
        "response":"```python\nimport re\nimport typing\n\ndef remove(list: typing.List[str]) -> typing.List[str]:\n    return [re.sub('\\d', '', string) for string in list]\n```"
    },
    {
        "id":18,
        "response":"```python\nimport math\n\ndef binomial_Coeff(n,k):\n    if k > n - k: \n        k = n - k\n    res = 1\n    for i in range(k):\n        res = res * (n - i) \/ (i + 1)\n    return int(res)\n```"
    },
    {
        "id":19,
        "response":"```python\nimport collections\n\ndef get_Odd_Occurrence(arr, arr_size):\n    count = collections.Counter(arr)\n    for num, freq in count.items():\n        if freq % 2 != 0:\n            return num\n```"
    },
    {
        "id":20,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_Equality(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i] == s[j - 1]:\n                count += 1\n    return count\n```"
    },
    {
        "id":21,
        "response":"```python\nimport heapq\nfrom collections import Counter\nimport itertools\n\ndef func(nums, k):\n    count = Counter(num for sublist in nums for num in sublist)\n    return heapq.nlargest(k, count.keys(), key=count.get)\n```"
    },
    {
        "id":22,
        "response":"```python\nimport math\n\ndef max_Prime_Factors (n):\n    import math\n    import re\n    import typing\n    import itertools\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n    return n\n```"
    },
    {
        "id":23,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef decimal_To_Binary(N):\n    if N == 0:\n        return 0\n    binary = ''\n    while N > 0:\n        binary = str(N % 2) + binary\n        N = N \/\/ 2\n    return int(binary)\n```"
    },
    {
        "id":24,
        "response":"```python\nimport numpy as np\nimport math\n\ndef find_missing(ar,N):\n    return np.setdiff1d(np.arange(1, N+1), ar)[0]\n```"
    },
    {
        "id":25,
        "response":"```python\nimport math\n\ndef find_rect_num(n):\n    return n * (n + 1)\n```"
    },
    {
        "id":26,
        "response":"```python\nfrom decimal import Decimal, getcontext\n\ndef find_Nth_Digit(p, q, N):\n    getcontext().prec = N + 10\n    decimal_value = Decimal(p) \/ Decimal(q)\n    str_decimal_value = str(decimal_value)\n    if str_decimal_value[N] == '.':\n        return int(str_decimal_value[N + 1])\n    else:\n        return int(str_decimal_value[N])\n```"
    },
    {
        "id":27,
        "response":"```python\nimport itertools\nimport operator\n\ndef sort_mixed_list(mixed_list):\n    ints = sorted([x for x in mixed_list if isinstance(x, int)])\n    strs = sorted([x for x in mixed_list if isinstance(x, str)])\n    return ints + strs\n```"
    },
    {
        "id":28,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef div_even_odd(list1: typing.List[int]) -> typing.Union[float, str]:\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2 != 0]\n    if len(even) == 0 or len(odd) == 0:\n        return \"Error: List must contain both even and odd numbers.\"\n    return len(even) \/ len(odd)\n```"
    },
    {
        "id":29,
        "response":"```python\nimport heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        heapq.heappush(max_heap, (-freq, char))\n    result = []\n    while max_heap:\n        freq1, char1 = heapq.heappop(max_heap)\n        if result and result[-1] == char1:\n            if not max_heap:\n                return ''\n            freq2, char2 = heapq.heappop(max_heap)\n            result.append(char2)\n            freq2 += 1\n            if freq2 < 0:\n                heapq.heappush(max_heap, (freq2, char2))\n            heapq.heappush(max_heap, (freq1, char1))\n        else:\n            result.append(char1)\n            freq1 += 1\n            if freq1 < 0:\n                heapq.heappush(max_heap, (freq1, char1))\n    return ''.join(result)\n```"
    },
    {
        "id":30,
        "response":"```python\nfrom collections import Counter\nimport itertools\n\ndef freq_element(nums):\n    flat_list = list(itertools.chain(*nums))\n    return dict(Counter(flat_list))\n```"
    },
    {
        "id":31,
        "response":"```python\nimport typing\n\ndef filter_evennumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 == 0, nums))\n```"
    },
    {
        "id":32,
        "response":"```python\nimport typing\nfrom collections import Counter\n\ndef find_Sum(arr: typing.List[int], n: int) -> int:\n    count = Counter(arr)\n    return sum(x for x in count if count[x] > 1)\n```"
    },
    {
        "id":33,
        "response":"```python\nimport re\n\ndef text_match(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'No match found!'\n```"
    },
    {
        "id":34,
        "response":"```python\nimport re\nfrom typing import Optional\n\ndef text_match_string(text: str) -> Optional[str]:\n    import re\n    if re.match(r'^\\s*python', text):\n        return text\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":35,
        "response":"```python\nimport math\nimport functools\n\ndef find_gcd(numbers):\n    return functools.reduce(math.gcd, numbers)\n```"
    },
    {
        "id":36,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef test_distinct(data):\n    return len(data) == len(set(data))\n```"
    },
    {
        "id":37,
        "response":"```python\nimport math\n\ndef compute_Last_Digit(A,B):\n    a_factorial = math.factorial(A)\n    b_factorial = math.factorial(B)\n    result = a_factorial \/\/ b_factorial\n    return result % 10\n```"
    },
    {
        "id":38,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport string\n\ndef odd_bit_set_number(n):\n    return n | 0xAAAAAAAA\n```"
    },
    {
        "id":39,
        "response":"```python\nimport itertools\n\ndef specified_element(nums, N):\n    return [sublist[N] for sublist in nums]\n```"
    },
    {
        "id":40,
        "response":"```python\nimport typing\n\ndef min_length_list(input_list: typing.List[typing.List[typing.Any]]) -> typing.Tuple[int, typing.List[typing.Any]]:\n    if not input_list:\n        return None, None\n    min_len = min(len(sublist) for sublist in input_list)\n    min_lists = [sublist for sublist in input_list if len(sublist) == min_len]\n    return min_len, min_lists[0]\n```"
    },
    {
        "id":41,
        "response":"```python\nimport typing\n\ndef check_equilateral(x: typing.Union[int, float], y: typing.Union[int, float], z: typing.Union[int, float]) -> bool:\n    return x == y == z\n```"
    },
    {
        "id":42,
        "response":"```python\nimport math\n\ndef parallelogram_area(b,h):\n    if b < 0 or h < 0:\n        return \"Invalid input\"\n    else:\n        return b * h\n```"
    },
    {
        "id":43,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_Equality(str):\n    if len(str) == 0 or str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n```"
    },
    {
        "id":44,
        "response":"```python\nimport typing\nimport itertools\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    if not my_list:\n        return my_list\n    min_val = min(my_list)\n    offset = -min_val\n    max_val = max(my_list) + offset\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num + offset] += 1\n    sorted_list = []\n    for i, cnt in enumerate(count):\n        sorted_list += [i - offset] * cnt\n    return sorted_list\n```"
    },
    {
        "id":45,
        "response":"```python\nimport math\n\ndef tn_gp(a, n, r):\n    return a * (r ** (n-1))\n```"
    },
    {
        "id":46,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef rev(num):\n    return num == 2 * int(str(num)[::-1]) - 1\n```"
    },
    {
        "id":47,
        "response":"```python\nimport itertools\nimport typing\n\ndef find_Max_Num(arr: typing.List[int], n: int) -> int:\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n```"
    },
    {
        "id":48,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x > 0 and y < 0) or (x < 0 and y > 0)\n```"
    },
    {
        "id":49,
        "response":"```python\nimport math\n\ndef is_octagonal(n):\n    return n * (2 * n - 1)\n```"
    },
    {
        "id":50,
        "response":"```python\nfrom typing import List\n\ndef max_len_sub(arr: List[int], n: int) -> int:\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) == 1:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    return max(max_len, curr_len)\n```"
    },
    {
        "id":51,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_Substrings(s: str, n: int) -> int:\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if substring == '0' * len(substring) or int(substring) == len(substring):\n                count += 1\n    return count\n```"
    },
    {
        "id":52,
        "response":"```python\nimport typing\n\ndef smallest_num(xs: typing.List[int]) -> int:\n    if not xs:\n        return None\n    return min(xs)\n```"
    },
    {
        "id":53,
        "response":"```python\nimport itertools\n\ndef max_difference(test_list):\n    return max(abs(a - b) for a, b in test_list)\n```"
    },
    {
        "id":54,
        "response":"```python\nimport functools\nimport operator\nimport itertools\n\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n```"
    },
    {
        "id":55,
        "response":"```python\nimport itertools\nimport typing\n\ndef recursive_list_sum(data_list: typing.List[typing.Any]) -> int:\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        elif isinstance(item, (int, float)):\n            total_sum += item\n    return total_sum\n```"
    },
    {
        "id":56,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef pos_count(list):\n    return sum(1 for num in list if num > 0)\n```"
    },
    {
        "id":57,
        "response":"```python\nimport math\n\ndef bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n```"
    },
    {
        "id":58,
        "response":"```python\nimport typing\nimport itertools\n\ndef is_Monotonic(A):\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n```"
    },
    {
        "id":59,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_sublist(l, s):\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```"
    },
    {
        "id":60,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_equal_tuple(Input: typing.List[typing.Tuple], k: int) -> str:\n    if all(len(i) == k for i in Input):\n        return 'All tuples have same length'\n    else:\n        return 'Not all tuples have same length'\n```"
    },
    {
        "id":61,
        "response":"```python\nimport math\n\ndef comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) \/\/ 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums\n```"
    },
    {
        "id":62,
        "response":"```python\nimport math\n\ndef dif_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        for j in range(i + 1, int(math.sqrt(n)) + 1):\n            if i**2 + j**2 == n:\n                return True\n            if j**2 - i**2 == n:\n                return True\n    return False\n```"
    },
    {
        "id":63,
        "response":"```python\nimport re\n\ndef multiple_split(text):\n    return re.split('[\\n*]', text)\n```"
    },
    {
        "id":64,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_samepatterns(colors: typing.List[str], patterns: typing.List[str]) -> bool:\n    pattern_dict = {}\n    for i, pattern in enumerate(patterns):\n        if pattern not in pattern_dict:\n            pattern_dict[pattern] = colors[i]\n        elif pattern_dict[pattern] != colors[i]:\n            return False\n    return True\n```"
    },
    {
        "id":65,
        "response":"```python\nimport typing\nimport itertools\n\ndef find_tuples(test_list: typing.List[typing.Tuple[int, int, int]], K: int) -> typing.List[typing.Tuple[int, int, int]]:\n    result = [t for t in test_list if all(i % K == 0 for i in t)]\n    return result\n```"
    },
    {
        "id":66,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef count_Squares(m,n):\n    return m*n\n```"
    },
    {
        "id":67,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_Diff(n):\n    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)\n    return even_sum - odd_sum != 0\n```"
    },
    {
        "id":68,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef count_With_Odd_SetBits(n: int) -> int:\n    count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n```"
    },
    {
        "id":69,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef word_len(s: str) -> bool:\n    return len(s) % 2 != 0\n```"
    },
    {
        "id":70,
        "response":"```python\nimport math\n\ndef tetrahedral_number(n):\n    if n < 1:\n        return 0.0\n    return (n * (n + 1) * (n + 2)) \/ 6.0\n```"
    },
    {
        "id":71,
        "response":"```python\nimport itertools\n\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip(test_tup1, itertools.cycle(test_tup2)))\n```"
    },
    {
        "id":72,
        "response":"```python\nimport math\n\ndef volume_sphere(r):\n    return (4\/3)*math.pi*r**3\n```"
    },
    {
        "id":73,
        "response":"```python\nimport itertools\n\ndef get_Char(strr):\n    if not strr:\n        return \"\"\n    total = sum(ord(char) for char in strr)\n    return chr(total)\n```"
    },
    {
        "id":74,
        "response":"```python\nimport math\n\ndef sequence(n):\n    x = 0\n    i = 1\n    while True:\n        x += math.comb(i, math.floor(i \/ 2))\n        if x >= n:\n            return math.floor(i \/ 2)\n        i += 1\n```"
    },
    {
        "id":75,
        "response":"```python\nimport math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n```"
    },
    {
        "id":76,
        "response":"```python\nimport math\n\ndef centered_hexagonal_number(n: int) -> int:\n    return n * (3 * n - 1) + 1\n```"
    },
    {
        "id":77,
        "response":"```python\nimport typing\n\ndef merge_dictionaries_three(dict1: typing.Dict, dict2: typing.Dict, dict3: typing.Dict) -> typing.Dict:\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n```"
    },
    {
        "id":78,
        "response":"```python\nimport collections\nfrom typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    return dict(collections.Counter(list1))\n```"
    },
    {
        "id":79,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef closest_num(N):\n    return N - 1\n```"
    },
    {
        "id":80,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef len_log(list1):\n    return max(len(word) for word in list1) if list1 else 0\n```"
    },
    {
        "id":81,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_substring(str1: typing.List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n```"
    },
    {
        "id":82,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_undulating(n: str) -> bool:\n    n = str(n)\n    for i in range(len(n) - 1):\n        if i % 2 == 0 and n[i] <= n[i + 1]:\n            return False\n        if i % 2 != 0 and n[i] >= n[i + 1]:\n            return False\n    return True\n```"
    },
    {
        "id":83,
        "response":"```python\nimport math\n\ndef power(a, b):\n    return a ** b\n```"
    },
    {
        "id":84,
        "response":"```python\nimport typing\n\ndef index_minimum(test_list: typing.List[typing.Tuple[str, int]]) -> str:\n    return min(test_list, key=lambda x: x[1])[0]\n```"
    },
    {
        "id":85,
        "response":"```python\nimport itertools\n\ndef Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)\n```"
    },
    {
        "id":86,
        "response":"```python\nimport math\n\ndef divisor(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n```"
    },
    {
        "id":87,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> dict:\n    flat_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flat_list))\n```"
    },
    {
        "id":88,
        "response":"```python\nimport math\nimport statistics\nimport re\nimport typing\nimport itertools\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product \/ len(numbers)\n```"
    },
    {
        "id":89,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]\n```"
    },
    {
        "id":90,
        "response":"```python\nimport math\n\ndef next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n```"
    },
    {
        "id":91,
        "response":"```python\nimport typing\nimport re\n\ndef kth_element(arr: typing.List[int], n: int, k: int) -> int:\n    arr.sort()\n    return arr[k-1]\n```"
    },
    {
        "id":92,
        "response":"```python\nimport re\n\ndef snake_to_camel(word):\n    words = re.split('_+', word)\n    return ''.join(word.capitalize() for word in words)\n```"
    },
    {
        "id":93,
        "response":"```python\nimport math\n\ndef eulerian_num(n, m):\n    return math.comb(n, m) * math.factorial(m)\n```"
    },
    {
        "id":94,
        "response":"```python\nimport functools\nimport operator\n\ndef sort_sublists(input_list):\n    return list(map(sorted, input_list))\n```"
    },
    {
        "id":95,
        "response":"```python\nimport typing\n\ndef count(lst: typing.List[bool]) -> int:\n    return lst.count(True)\n```"
    },
    {
        "id":96,
        "response":"```python\nimport typing\n\ndef add_lists(test_list: typing.List[int], test_tup: typing.Tuple[int]) -> typing.Tuple[int]:\n    return test_tup + tuple(test_list)\n```"
    },
    {
        "id":97,
        "response":"```python\nimport math\n\ndef count_Hexadecimal(L,R) :\n    return math.floor(R \/ 16) - math.ceil(L \/ 16) + 1\n```"
    },
    {
        "id":98,
        "response":"```python\nimport heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    heap = []\n    for num in num1 + num2 + num3:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n```"
    },
    {
        "id":99,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    for i in range(n):\n        rotated_s = s[i:] + s[:i]\n        if rotated_s.count('1') % 2 != 0:\n            count += 1\n    return count\n```"
    },
    {
        "id":100,
        "response":"```python\nimport itertools\n\ndef extract_missing(test_list, strt_val, stop_val):\n    if not test_list:\n        return [(strt_val, stop_val)]\n    \n    test_list.sort(key=lambda x: x[0])\n    result = []\n    \n    if test_list[0][0] > strt_val:\n        result.append((strt_val, test_list[0][0]))\n    \n    for (start1, stop1), (start2, stop2) in itertools.pairwise(test_list):\n        if stop1 < start2:\n            result.append((stop1, start2))\n    \n    if test_list[-1][1] < stop_val:\n        result.append((test_list[-1][1], stop_val))\n    \n    return result\n```"
    },
    {
        "id":101,
        "response":"```python\nimport typing\n\ndef common_in_nested_lists(nestedlist: typing.List[typing.List[int]]) -> typing.List[int]:\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements &= set(lst)\n    return sorted(list(common_elements))\n```"
    },
    {
        "id":102,
        "response":"```python\nimport math\n\ndef perimeter(diameter,height) :\n    return math.pi * diameter\n```"
    },
    {
        "id":103,
        "response":"```python\nimport re\n\ndef check_integer(text):\n    return bool(re.match('^[0-9]+$', text))\n```"
    },
    {
        "id":104,
        "response":"```python\nfrom collections import defaultdict\n\ndef assign_freq(test_list):\n    freq_dict = defaultdict(int)\n    for item in test_list:\n        freq_dict[item] += 1\n    result = []\n    for item, freq in freq_dict.items():\n        result.append(item + (freq,))\n    return result\n```"
    },
    {
        "id":105,
        "response":"```python\nimport typing\n\ndef empty_dit(list1: typing.List[typing.Dict]) -> bool:\n    return all(not d for d in list1)\n```"
    },
    {
        "id":106,
        "response":"```python\nimport math\n\ndef tuple_to_int(nums):\n    result = 0\n    for i, num in enumerate(reversed(nums)):\n        result += num * (10 ** i)\n    return result\n```"
    },
    {
        "id":107,
        "response":"```python\nimport re\n\ndef list_to_float(test_list):\n    return [tuple(map(lambda x: float(x) if re.match(r'^-?\\d+(\\.\\d+)?$', x) else x, tup)) for tup in test_list]\n```"
    },
    {
        "id":108,
        "response":"import re\n\ndef string_to_list(string):\n    return string.split() if string else ['']"
    },
    {
        "id":109,
        "response":"```python\nimport collections\nimport re\nimport typing\nimport itertools\nfrom typing import List\n\ndef search(arr: List[int], n: int) -> int:\n    count_dict = collections.Counter(arr)\n    for key, value in count_dict.items():\n        if value == 1:\n            return key\n```"
    },
    {
        "id":110,
        "response":"```python\nimport itertools\nimport typing\n\ndef max_product_tuple(list1: typing.List[typing.Tuple[int, int]]) -> int:\n    return max(a * b for a, b in list1)\n```"
    },
    {
        "id":111,
        "response":"```python\nimport itertools\n\ndef check_triplet(A, n, sum, count):\n    for triplet in itertools.combinations(A, 3):\n        if sum(triplet) == sum:\n            return True\n    return False\n```"
    },
    {
        "id":112,
        "response":"```python\nimport math\n\ndef smartNumber(n):\n    def is_smart(num):\n        return math.sqrt(num) == int(math.sqrt(num))\n\n    count = 0\n    num = 1\n    while True:\n        if is_smart(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n```"
    },
    {
        "id":113,
        "response":"```python\nimport math\n\ndef sum_of_divisors(n):\n    total = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n \/\/ i:\n                total += n \/\/ i\n    return total\n\ndef amicable_numbers_sum(limit):\n    total_sum = 0\n    for i in range(2, limit):\n        sum_of_div = sum_of_divisors(i)\n        if sum_of_div < limit and sum_of_divisors(sum_of_div) == i and i != sum_of_div:\n            total_sum += i + sum_of_div\n    return total_sum \/\/ 2\n```"
    },
    {
        "id":114,
        "response":"```python\nimport math\nimport cmath\n\ndef angle_complex(a, b):\n    complex_number = complex(a, b)\n    return cmath.phase(complex_number)\n```"
    },
    {
        "id":115,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_length(string: str, n: int) -> int:\n    max_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub_string = string[i:j]\n            ones = sub_string.count('1')\n            zeros = len(sub_string) - ones\n            max_diff = max(max_diff, abs(ones - zeros))\n    return max_diff\n```"
    },
    {
        "id":116,
        "response":"```python\nimport math\nimport functools\nimport operator\n\ndef sum(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def factors(n):\n        result = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                result.append(i)\n        return result\n\n    common_factors = set(factors(a)) & set(factors(b))\n    return sum(common_factors)\n```"
    },
    {
        "id":117,
        "response":"```python\nimport math\nimport itertools\n\ndef multiply_int(x, y):\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return result\n    else:\n        return -result\n```"
    },
    {
        "id":118,
        "response":"```python\nimport re\nfrom typing import List\n\ndef long_words(n, str):\n    words = re.sub('[^a-zA-Z ]', '', str).split()\n    return [word for word in words if len(word) > n]\n```"
    },
    {
        "id":119,
        "response":"```python\nimport typing\nimport itertools\n\ndef magic_square_test(my_matrix: typing.List[typing.List[int]]) -> bool:\n    n = len(my_matrix)\n    expected_sum = n * (n**2 + 1) \/\/ 2\n    rows = [sum(row) for row in my_matrix]\n    cols = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    diagonal1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal2 = sum(my_matrix[i][n - i - 1] for i in range(n))\n    return all(x == expected_sum for x in rows + cols + [diagonal1, diagonal2])\n```"
    },
    {
        "id":120,
        "response":"```python\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None, 0\n    count = Counter(nums)\n    max_item = max(count, key=count.get)\n    return max_item, count[max_item]\n```"
    },
    {
        "id":121,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    return \"\".join(str1)\n```"
    },
    {
        "id":122,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef tup_string(tup1):\n    return ''.join(tup1)\n```"
    },
    {
        "id":123,
        "response":"```python\nimport functools\nimport operator\n\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n```"
    },
    {
        "id":124,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_last(arr: typing.List[int], n: int, p: int) -> str:\n    last_element = arr[n-1] * p\n    if last_element % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n```"
    },
    {
        "id":125,
        "response":"```python\nimport math\n\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n```"
    },
    {
        "id":126,
        "response":"```python\nimport math\n\ndef cal_electbill(units):\n    if units <= 50:\n        return units * 2.5\n    elif units <= 100:\n        return 50 * 2.5 + (units - 50) * 3\n    elif units <= 200:\n        return 50 * 2.5 + 50 * 3 + (units - 100) * 4\n    else:\n        return 50 * 2.5 + 50 * 3 + 100 * 4 + (units - 200) * 5\n```"
    },
    {
        "id":127,
        "response":"```python\nimport math\n\ndef zero_count(nums):\n    if len(nums) == 0:\n        return 0.0\n    zero = sum(1 for num in nums if num == 0)\n    return zero \/ len(nums)\n```"
    },
    {
        "id":128,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count == 1\n```"
    },
    {
        "id":129,
        "response":"```python\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n```"
    },
    {
        "id":130,
        "response":"```python\nimport itertools\n\ndef extract_singly(test_list):\n    flat_list = [item for sublist in test_list for item in sublist]\n    return [item for item in flat_list if flat_list.count(item) == 1]\n```"
    },
    {
        "id":131,
        "response":"```python\nimport typing\nimport itertools\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    for size in range(len(nums), 0, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums[:max_index + 1] = reversed(nums[:max_index + 1])\n            nums[:size] = reversed(nums[:size])\n    return nums\n```"
    },
    {
        "id":132,
        "response":"```python\nimport itertools\n\ndef count_samepair(list1, list2, list3):\n    return sum(1 for a, b, c in zip(list1, list2, list3) if a == b == c)\n```"
    },
    {
        "id":133,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n```"
    },
    {
        "id":134,
        "response":"```python\nimport itertools\n\ndef sum_Pairs(arr, n):\n    sum_diff = 0\n    for pair in itertools.combinations(arr, 2):\n        sum_diff += abs(pair[0] - pair[1])\n    return sum_diff\n```"
    },
    {
        "id":135,
        "response":"```python\nimport sys\n\ndef max_Abs_Diff(arr,n):\n    return max(arr) - min(arr)\n```"
    },
    {
        "id":136,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef ascii_value_string(str1):\n    return sum(ord(char) for char in str1[:1])\n```"
    },
    {
        "id":137,
        "response":"```python\nimport math\nimport sys\n\ndef max_path_sum(tri, m, n):\n    for i in range(len(tri) - 1, 0, -1):\n        for j in range(len(tri[i]) - 1):\n            tri[i - 1][j] += max(tri[i][j], tri[i][j + 1])\n    return tri[0][0]\n```"
    },
    {
        "id":138,
        "response":"```python\nimport itertools\nimport math\n\ndef sum_digits_single(x) :\n    max_sum = 0\n    for i in range(1, len(str(x))):\n        a, b = int(str(x)[:i]), int(str(x)[i:])\n        max_sum = max(max_sum, sum(int(digit) for digit in str(a) + str(b)))\n    return max_sum\n```"
    },
    {
        "id":139,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef longest_subseq_with_diff_one(arr, n):\n    max_length = 0\n    max_subseq = []\n    current_length = 1\n    current_subseq = [arr[0]]\n    \n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) == 1:\n            current_length += 1\n            current_subseq.append(arr[i])\n        else:\n            if current_length > max_length:\n                max_length = current_length\n                max_subseq = current_subseq\n            current_length = 1\n            current_subseq = [arr[i]]\n    \n    if current_length > max_length:\n        max_length = current_length\n        max_subseq = current_subseq\n    \n    return max_subseq\n```"
    },
    {
        "id":140,
        "response":""},
    {
        "id":141,
        "response":"```python\nimport math\nimport typing\n\ndef gcd(p: int, q: int) -> bool:\n    def is_coprime(a: int, b: int) -> bool:\n        while b:\n            a, b = b, a % b\n        return a == 1\n\n    return is_coprime(p, q)\n```"
    },
    {
        "id":142,
        "response":"```python\nimport typing\nimport itertools\n\ndef merge_sort(left, right):\n    result = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left)\n    result.extend(right)\n    return result\n\ndef merge(a, b):\n    if len(a) <= 1:\n        return a\n    mid = len(a) \/\/ 2\n    left = merge(a[:mid], b)\n    right = merge(a[mid:], b)\n    return merge_sort(left, right)\n```"
    },
    {
        "id":143,
        "response":"```python\nimport math\n\ndef parabola_vertex(a, b, c):\n    x = -b \/ (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)\n```"
    },
    {
        "id":144,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef specified_element(nums, N):\n    return [sublist[N] for sublist in nums if N < len(sublist)]\n```"
    },
    {
        "id":145,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef even_bit_toggle_number(n: int) -> int:\n    binary = bin(n)[2:]\n    toggled = ''.join('1' if bit == '0' and i % 2 == 0 else '0' if bit == '1' and i % 2 == 0 else bit for i, bit in enumerate(binary))\n    return int(toggled, 2)\n```"
    },
    {
        "id":146,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef tuple_int_str(tuple_str):\n    return tuple(tuple(int(i) for i in t) for t in tuple_str)\n```"
    },
    {
        "id":147,
        "response":"```python\nimport itertools\n\ndef encode_list(list1):\n    return [[len(list(g)), k] for k, g in itertools.groupby(list1)]\n```"
    },
    {
        "id":148,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef min_Ops(arr: typing.List[int], n: int, k: int) -> int:\n    max_val = max(arr)\n    min_val = min(arr)\n    return abs(max_val - min_val)\n```"
    },
    {
        "id":149,
        "response":"```python\nimport calendar\n\ndef month_season(month, days):\n    month_to_season = {\n        'December': 'winter', 'January': 'winter', 'February': 'winter',\n        'March': 'spring', 'April': 'spring', 'May': 'spring',\n        'June': 'summer', 'July': 'summer', 'August': 'summer',\n        'September': 'autumn', 'October': 'autumn', 'November': 'autumn'\n    }\n    return month_to_season[month]\n```"
    },
    {
        "id":150,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef solution(a, b, n):\n    for x in range(n+1):\n        y = (n - a*x) \/ b\n        if y == int(y) and y >= 0:\n            return ('x = ', x, ', y = ', int(y))\n```"
    },
    {
        "id":151,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n```"
    },
    {
        "id":152,
        "response":"```python\nimport math\n\ndef sum_series(n):\n    return sum(range(n, 0, -2))\n```"
    },
    {
        "id":153,
        "response":"```python\nimport math\n\ndef area_polygon(s, l):\n    return (s * l**2) \/ (4 * math.tan(math.pi\/s))\n```"
    },
    {
        "id":154,
        "response":"```python\nimport math\nimport functools\nimport operator\n\ndef divSum(n, m):\n    def sum_of_divisors(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n    \n    return sum_of_divisors(n) == sum_of_divisors(m)\n```"
    },
    {
        "id":155,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i]) - ord('a') == i or ord(str1[i]) - ord('A') == i:\n            count += 1\n    return count\n```"
    },
    {
        "id":156,
        "response":"```python\nimport itertools\n\ndef find_even_Pair(A, N):\n    count = 0\n    for i, j in itertools.combinations(range(N), 2):\n        if (A[i] ^ A[j]) % 2 == 0:\n            count += 1\n    return count\n```"
    },
    {
        "id":157,
        "response":"```python\nimport math\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n```"
    },
    {
        "id":158,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef frequency(a, x):\n    return a.count(x)\n```"
    },
    {
        "id":159,
        "response":"```python\nimport typing\n\ndef get_pell(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    pell = [0, 1]\n    for i in range(2, n + 1):\n        pell.append(2 * pell[i - 1] + pell[i - 2])\n    \n    return pell[n]\n```"
    },
    {
        "id":160,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sum_range_list(list1, m, n):\n    return sum(num for num in list1 if m <= num <= n)\n```"
    },
    {
        "id":161,
        "response":"```python\nimport math\nimport cmath\nimport re\nimport typing\nimport itertools\n\ndef perimeter_pentagon(a):\n    return 5 * a\n```"
    },
    {
        "id":162,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_occurance(s):\n    return s.count('std')\n```"
    },
    {
        "id":163,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_splchar(text):\n    return re.sub('[^A-Za-z0-9]+', '', text)\n```"
    },
    {
        "id":164,
        "response":"```python\nfrom typing import List, Tuple, Dict\n\ndef group_keyvalue(l: List[Tuple[str, int]]) -> Dict[str, List[int]]:\n    result = {}\n    for key, value in l:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n```"
    },
    {
        "id":165,
        "response":"```python\nimport re\nfrom typing import List\n\ndef is_valid_parenthese(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n```"
    },
    {
        "id":166,
        "response":"```python\nimport math\n\ndef perimeter_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        return \"Invalid triangle\"\n```"
    },
    {
        "id":167,
        "response":"```python\nimport math\nimport itertools\n\ndef answer(L, R):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b \/\/ gcd(a, b)\n\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if L <= lcm(i, j) <= R:\n                return (i, j)\n```"
    },
    {
        "id":168,
        "response":"```python\nimport re\nimport typing\n\ndef string_literals(patterns: typing.List[str], text: str) -> str:\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'Not Matched!'\n```"
    },
    {
        "id":169,
        "response":"```python\nimport typing\n\ndef is_num_keith(x: int) -> bool:\n    if x < 1:\n        return False\n    sequence = [1, 2]\n    while sequence[-1] < x:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1] == x\n```"
    },
    {
        "id":170,
        "response":"```python\nimport math\n\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    lat1, lon1, lat2, lon2 = map(math.radians, [slat, slon, elat, elon])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = math.sin(dlat\/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon\/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    distance = R * c\n    return distance * 1000\n```"
    },
    {
        "id":171,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef common_prefix_util(strings, n):\n    if not strings:\n        return \"\"\n    shortest_str = min(strings, key=len)\n    for i, char in enumerate(shortest_str):\n        for other in strings:\n            if other[i] != char:\n                return shortest_str[:i]\n    return shortest_str\n```"
    },
    {
        "id":172,
        "response":"```python\nimport re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special = re.findall(r'[^A-Za-z0-9]', string)\n    numeric = re.findall(r'\\d', string)\n    return uppercase, lowercase, special, numeric\n```"
    },
    {
        "id":173,
        "response":"```python\nimport itertools\n\ndef count_pairs(arr, n, k):\n    count = 0\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n```"
    },
    {
        "id":174,
        "response":"```python\nimport typing\n\ndef greater_specificnum(list: typing.List[int], num: int) -> typing.List[bool]:\n    return [i > num for i in list]\n```"
    },
    {
        "id":175,
        "response":"```python\nimport math\n\ndef parabola_focus(a, b, c):\n    if a == 0:\n        return 'No parabola'\n    else:\n        p = 1 \/ (4 * a)\n        x = -b \/ (2 * a)\n        y = c - b**2 \/ (4 * a)\n        return (x, y + p)\n```"
    },
    {
        "id":176,
        "response":"```python\nimport re\n\ndef check_literals(text, patterns):\n    if not patterns:\n        return 'No patterns provided!'\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return 'Matched!'\n    return 'No match found!'\n```"
    },
    {
        "id":177,
        "response":"```python\nimport numpy as np\n\ndef longest_common_subsequence(X, Y, m, n):\n    L = [[None]*(n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0 :\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n```"
    },
    {
        "id":178,
        "response":"```python\nimport math\n\ndef prod_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % (i * i) == 0 and math.sqrt(n \/\/ (i * i)) % 1 == 0:\n            return True\n    return False\n```"
    },
    {
        "id":179,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef first_Missing_Positive(arr, n):\n    arr = set(arr)\n    i = 1\n    while i in arr:\n        i += 1\n    return i\n```"
    },
    {
        "id":180,
        "response":"```python\nimport math\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x**2 + y**2 <= max(abs(x1), abs(x2))**2 + max(abs(y1), abs(y2))**2:\n                count += 1\n    return count\n```"
    },
    {
        "id":181,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_monthnumber(monthname3):\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return monthname3 in month_30_days\n```"
    },
    {
        "id":182,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_String(str):\n    has_letter = any(char.isalpha() for char in str)\n    has_digit = any(char.isdigit() for char in str)\n    return has_letter and has_digit\n```"
    },
    {
        "id":183,
        "response":"```python\nimport typing\n\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))\n```"
    },
    {
        "id":184,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef octal_To_Decimal(n):\n    return int(str(n), 8)\n```"
    },
    {
        "id":185,
        "response":"```python\nimport typing\nimport bisect\n\ndef first(arr: typing.List[int], x: int, n: int) -> int:\n    i = bisect.bisect_left(arr, x)\n    if i != n and arr[i] == x:\n        return i\n    else:\n        return -1\n```"
    },
    {
        "id":186,
        "response":"```python\nimport typing\nimport itertools\n\ndef remove_tuples(test_list: typing.List[typing.Tuple[int, ...]], K: int) -> typing.List[typing.Tuple[int, ...]]:\n    return [sublist for sublist in test_list if len(sublist) != K]\n```"
    },
    {
        "id":187,
        "response":"```python\nimport math\nimport operator\nimport itertools\n\ndef find_exponentio(test_tup1, test_tup2):\n    return tuple(map(operator.pow, test_tup1, test_tup2))\n```"
    },
    {
        "id":188,
        "response":"```python\nimport math\n\ndef largest_triangle(a,b):\n    return a * b \/ 2\n```"
    },
    {
        "id":189,
        "response":"```python\nimport math\n\ndef highest_Power_of_2(n):\n    import math\n    i = 1\n    while i <= n:\n        i *= 2\n    return i \/\/ 2\n```"
    },
    {
        "id":190,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef position_max(list1):\n    max_val = max(list1) if list1 else None\n    return [i for i, x in enumerate(list1) if x == max_val]\n```"
    },
    {
        "id":191,
        "response":"```python\nimport typing\n\ndef chkList(lst: typing.List[typing.Any]) -> bool:\n    return len(set(lst)) == 1\n```"
    },
    {
        "id":192,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_even(str1):\n    return \"\".join([str1[i] for i in range(len(str1)) if i % 2 != 0])\n```"
    },
    {
        "id":193,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef hamming_Distance(n1,n2) :\n    xor = n1 ^ n2\n    count = 0\n    while xor:\n        count += xor & 1\n        xor >>= 1\n    return count\n```"
    },
    {
        "id":194,
        "response":"```python\nimport re\nfrom typing import Union\n\ndef count(s: Union[str, None], c: str) -> int:\n    if s is None:\n        return 0\n    return s.count(c)\n```"
    },
    {
        "id":195,
        "response":"```python\nimport itertools\n\ndef inversion_elements(test_tup):\n    return tuple(-i for i in test_tup)\n```"
    },
    {
        "id":196,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef concatenate_elements(test_tup):\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n```"
    },
    {
        "id":197,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    max_length = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return max_length\n```"
    },
    {
        "id":198,
        "response":"```python\nimport re\n\ndef is_decimal(num):\n    pattern = re.compile(r'^\\d+(\\.\\d{1,2})?$')\n    return bool(pattern.match(num))\n```"
    },
    {
        "id":199,
        "response":"```python\nimport heapq\nimport bisect\n\ndef heap_replace(heap, a):\n    if not heap:\n        heap.append(a)\n    else:\n        heapq.heapreplace(heap, a)\n    return heap\n```"
    },
    {
        "id":200,
        "response":"```python\nimport re\n\ndef is_allowed_specific_char(string):\n    pattern = r'^[ABCDEFabcdef123450]+$'\n    return bool(re.match(pattern, string))\n```"
    },
    {
        "id":201,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_Num(n: int) -> int:\n    return bin(n).count('1')\n```"
    },
    {
        "id":202,
        "response":"```python\nimport math\n\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))\n```"
    },
    {
        "id":203,
        "response":"```python\nimport typing\nimport itertools\n\ndef concatenate_strings(test_tup1: typing.Tuple[str, ...], test_tup2: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":204,
        "response":"```python\nimport math\n\ndef degree_radian(radian):\n    return radian * (180 \/ math.pi)\n```"
    },
    {
        "id":205,
        "response":"```python\nimport typing\n\ndef decode_list(alist: typing.List[typing.Union[int, typing.List[int]]]) -> typing.List[int]:\n    result = []\n    for item in alist:\n        if isinstance(item, list):\n            result.extend([item[1]] * item[0])\n        else:\n            result.append(item)\n    return result\n```"
    },
    {
        "id":206,
        "response":"```python\nimport itertools\n\ndef check_subset_list(list1, list2):\n    flat_list1 = [item for sublist in list1 for item in (sublist if isinstance(sublist, list) else [sublist])]\n    flat_list2 = [item for sublist in list2 for item in (sublist if isinstance(sublist, list) else [sublist])]\n    return all(item in flat_list2 for item in flat_list1)\n```"
    },
    {
        "id":207,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef first_Repeated_Char(str):\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str:\n        if char_count[char] > 1:\n            return char\n    return None\n```"
    },
    {
        "id":208,
        "response":"```python\nimport math\n\ndef min_Operations(A,B):\n    if A > B:\n        A, B = B, A\n    if B % A == 0:\n        return B \/\/ A - 1\n    return B \/\/ A\n```"
    },
    {
        "id":209,
        "response":"```python\nimport typing\nimport itertools\n\ndef extract_min_max(test_tup, K):\n    sorted_tup = tuple(sorted(test_tup))\n    min_k = sorted_tup[:K]\n    max_k = sorted_tup[-K:]\n    return min(min_k), max(max_k)\n```"
    },
    {
        "id":210,
        "response":"```python\nimport re\nfrom typing import List\n\ndef replace_max_specialchar(text: str, n: int) -> str:\n    special_chars = [' ', ',', '.']\n    text_list = list(text)\n    count = 0\n    for i in range(len(text_list)):\n        if text_list[i] in special_chars and count < n:\n            text_list[i] = ':'\n            count += 1\n    return ''.join(text_list)\n```"
    },
    {
        "id":211,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef first_even(nums: typing.List[int]) -> typing.Optional[int]:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n```"
    },
    {
        "id":212,
        "response":"```python\nimport typing\nimport itertools\n\ndef check_type(test_tuple):\n    return len(set(type(x) for x in test_tuple)) == 1\n```"
    },
    {
        "id":213,
        "response":"```python\nimport typing\n\ndef is_majority(arr: typing.List[int], n: int, x: int) -> bool:\n    count = sum(1 for i in range(n) if arr[i] == x)\n    return count > n \/ 2\n```"
    },
    {
        "id":214,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_Set_Bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```"
    },
    {
        "id":215,
        "response":"```python\nimport sys\nimport typing\n\ndef find_Min(arr: typing.List[int], low: int, high: int) -> int:\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]\n```"
    },
    {
        "id":216,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 != 0])\n```"
    },
    {
        "id":217,
        "response":"```python\nimport sys\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n```"
    },
    {
        "id":218,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef all_Bits_Set_In_The_Given_Range(n, left, right):\n    for i in range(left, right + 1):\n        if not (n & (1 << i)):\n            return False\n    return True\n```"
    },
    {
        "id":219,
        "response":"```python\nimport itertools\n\ndef re_arrange_array(arr, n):\n    negatives = sorted([x for x in arr if x < 0])\n    positives = sorted([x for x in arr if x >= 0])\n    return list(itertools.chain(negatives, positives))\n```"
    },
    {
        "id":220,
        "response":"```python\nimport re\nimport typing\n\ndef replace_blank(str1: str, char: str) -> str:\n    return re.sub(r'\\s', char, str1)\n```"
    },
    {
        "id":221,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef max_sum(tri, n):\n    for i in range(n-2, -1, -1):\n        for j in range(len(tri[i])):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n```"
    },
    {
        "id":222,
        "response":"```python\nimport heapq\nimport typing\n\ndef larg_nnum(list1: typing.List[int], n: int) -> typing.List[int]:\n    return heapq.nlargest(n, list1)\n```"
    },
    {
        "id":223,
        "response":"```python\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h\n```"
    },
    {
        "id":224,
        "response":"```python\nimport math\n\ndef volume_cube(l):\n    return l ** 3\n```"
    },
    {
        "id":225,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef even_bit_set_number(n):\n    bin_n = bin(n)[2:]\n    new_bin_n = ''\n    for i in range(len(bin_n)):\n        if i % 2 == 0:\n            new_bin_n += '1'\n        else:\n            new_bin_n += bin_n[i]\n    return int(new_bin_n, 2)\n```"
    },
    {
        "id":226,
        "response":"```python\nimport math\n\ndef No_of_Triangle(N,K):\n    count = 0\n    for i in range(1, N+1):\n        for j in range(i, N+1):\n            k = math.sqrt(i*i + j*j)\n            if k <= N and k <= K and k == int(k):\n                count += 1\n            for k in range(math.ceil(k)+1, N+1):\n                if i*i + j*j == k*k and max(i,j,k) <= K:\n                    count += 1\n    return count\n```"
    },
    {
        "id":227,
        "response":"```python\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    occurences = {}\n    for pair in test_list:\n        sorted_pair = tuple(sorted(pair))\n        if sorted_pair in occurences:\n            occurences[sorted_pair] += 1\n        else:\n            occurences[sorted_pair] = 1\n    return occurences\n```"
    },
    {
        "id":228,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]:\n                count += 1\n    return count\n```"
    },
    {
        "id":229,
        "response":"```python\nimport math\n\ndef get_total_number_of_sequences(m, n):\n    return min(m, 2**(n-1))\n```"
    },
    {
        "id":230,
        "response":"```python\nimport typing\nimport itertools\n\ndef replace_list(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if len(list1) > 0:\n        list1[-1:] = list2\n    return list1\n```"
    },
    {
        "id":231,
        "response":"```python\nimport itertools\n\ndef array_3d(m, n, o):\n    return [[[ '*' for _ in range(m)] for _ in range(n)] for _ in range(o)]\n```"
    },
    {
        "id":232,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_charac(str1):\n    return len(str1)\n```"
    },
    {
        "id":233,
        "response":"```python\nfrom collections import defaultdict\n\ndef sort_on_occurence(lst):\n    d = defaultdict(list)\n    for item in lst:\n        d[item[0]].append(item[1])\n    return [(k, *v, len(v)) for k, v in d.items()]\n```"
    },
    {
        "id":234,
        "response":"```python\nimport math\n\ndef next_Perfect_Square(N):\n    root = N ** 0.5\n    if root == int(root):\n        return (int(root) + 1) ** 2\n    else:\n        return (int(root) + 1) ** 2\n```"
    },
    {
        "id":235,
        "response":"```python\nimport sys\nimport typing\n\ndef max_sum(arr, n):\n    incl = 0\n    excl = 0\n    for i in range(n):\n        new_excl = max(incl, excl)\n        incl = excl + arr[i]\n        excl = new_excl\n    return max(incl, excl)\n```"
    },
    {
        "id":236,
        "response":"```python\nimport math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number\")\n    if number == 0 or number == 1:\n        return number\n    x = number\n    y = (x + 1) \/ 2\n    while y < x:\n        x = y\n        y = (x + number \/ x) \/ 2\n    return x\n```"
    },
    {
        "id":237,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef lps(str):\n    n = len(str)\n    table = [[0 for x in range(n)]for y in range(n)]\n    max_length = 1\n    i = 0\n    while i < n:\n        table[i][i] = True\n        i = i + 1\n    i = 0\n    while i < n - 1:\n        if str[i] == str[i + 1]:\n            table[i][i + 1] = True\n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n:\n        i = 0\n        while i < n - k + 1:\n            j = i + k - 1\n            if table[i + 1][j - 1] and str[i] == str[j]:\n                table[i][j] = True\n                if k > max_length:\n                    max_length = k\n            i = i + 1\n        k = k + 1\n    return max_length\n```"
    },
    {
        "id":238,
        "response":"```python\nimport math\n\ndef harmonic_sum(n):\n    if n <= 0:\n        return 0.0\n    return sum(1\/i for i in range(1, n))\n```"
    },
    {
        "id":239,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef intersection_array(array_nums1, array_nums2):\n    return list(filter(lambda x: array_nums1.count(x) == array_nums2.count(x) and x in array_nums2, array_nums1))\n```"
    },
    {
        "id":240,
        "response":"```python\nimport typing\nimport itertools\n\ndef count_X(tup, x):\n    return tup.count(x)\n```"
    },
    {
        "id":241,
        "response":"```python\nimport itertools\n\ndef insert_element(list, element):\n    return list(itertools.chain(*zip(itertools.repeat(element), list)))\n```"
    },
    {
        "id":242,
        "response":"```python\nimport cmath\n\ndef convert(numbers):\n    return numbers.real, numbers.imag\n```"
    },
    {
        "id":243,
        "response":"```python\nimport typing\n\ndef count_integer(list1: typing.List[typing.Any]) -> int:\n    return sum(isinstance(x, int) for x in list1)\n```"
    },
    {
        "id":244,
        "response":"```python\nimport re\nimport typing\n\ndef words_ae(text: str) -> typing.List[str]:\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if word[0].lower() in 'ae']\n```"
    },
    {
        "id":245,
        "response":"```python\nimport itertools\n\ndef combinations_colors(colors, n):\n    return list(itertools.combinations(colors, n))\n```"
    },
    {
        "id":246,
        "response":"```python\nimport math\n\ndef count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n```"
    },
    {
        "id":247,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef swap_numbers(a,b):\n    return b, a\n```"
    },
    {
        "id":248,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_odd(array_nums):\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n```"
    },
    {
        "id":249,
        "response":"```python\nimport itertools\nimport typing\n\ndef maximize_elements(test_tup1: typing.Tuple[typing.Tuple[int, int], ...], test_tup2: typing.Tuple[typing.Tuple[int, int], ...]) -> typing.Tuple[typing.Tuple[int, int], ...]:\n    return tuple(tuple(max(test_tup1[i][j], test_tup2[i][j]) for j in range(len(test_tup1[i]))) for i in range(len(test_tup1)))\n```"
    },
    {
        "id":250,
        "response":"```python\nimport sympy\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while True:\n        if sympy.isprime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n```"
    },
    {
        "id":251,
        "response":"```python\nimport itertools\nimport operator\nimport typing\n\ndef division_elements(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(a \/\/ b if b != 0 else 0 for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":252,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\n```"
    },
    {
        "id":253,
        "response":"```python\nimport typing\n\ndef merge_dict(d1, d2):\n    d1.update(d2)\n    return d1\n```"
    },
    {
        "id":254,
        "response":"```python\nimport math\n\ndef dog_age(h_age):\n    if h_age <= 2:\n        return h_age * 5.25\n    else:\n        return 10.5 + (h_age - 2) * 4\n```"
    },
    {
        "id":255,
        "response":"```python\nimport itertools\nimport typing\n\ndef list_split(S: typing.List[typing.Any], step: int) -> typing.List[typing.List[typing.Any]]:\n    return [S[i::step] for i in range(step)]\n```"
    },
    {
        "id":256,
        "response":"```python\nimport math\n\ndef lateralsurface_cube(l):\n    return 4 * l ** 2\n```"
    },
    {
        "id":257,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, n*2) if i % 2 != 0)\n```"
    },
    {
        "id":258,
        "response":"```python\nimport typing\n\ndef find_star_num(n: int) -> int:\n    return n * (2 * n - 1) + (n - 1) * n\n```"
    },
    {
        "id":259,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef ascii_value(k: typing.Union[str, int]) -> int:\n    return ord(k)\n```"
    },
    {
        "id":260,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    return sum([arr[i] for i in range(n) if i % 2 == 0 and arr[i] % 2 == 0])\n```"
    },
    {
        "id":261,
        "response":"```python\nimport math\n\ndef even_Power_Sum(n):\n    if n <= 0:\n        return 0\n    return sum(i**10 for i in range(1, n+1))\n```"
    },
    {
        "id":262,
        "response":"```python\nimport typing\n\ndef rear_extract(test_list: typing.List[typing.Tuple[int, str, int]]) -> typing.List[int]:\n    return [sub[2] for sub in test_list]\n```"
    },
    {
        "id":263,
        "response":"```python\nimport typing\nimport itertools\n\ndef substract_elements(test_tup1: typing.Tuple[int, int, int], test_tup2: typing.Tuple[int, int, int]) -> typing.Tuple[int, int, int]:\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":264,
        "response":"```python\nimport math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum\n```"
    },
    {
        "id":265,
        "response":"```python\nimport typing\nimport itertools\n\ndef get_Position(a: typing.List[int], n: int, m: int) -> int:\n    for i in range(n - 1, -1, -1):\n        if a[i] == m:\n            return i\n    return -1\n```"
    },
    {
        "id":266,
        "response":"```python\nimport math\n\ndef volume_cylinder(r,h):\n    return math.pi * r * r * h\n```"
    },
    {
        "id":267,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}\n```"
    },
    {
        "id":268,
        "response":"```python\nimport typing\nimport itertools\n\ndef count_first_elements(test_tup):\n    for i, x in enumerate(test_tup):\n        if isinstance(x, tuple):\n            return i\n    return len(test_tup)\n```"
    },
    {
        "id":269,
        "response":"```python\nimport math\n\ndef is_num_decagonal(n):\n    return (10 * n * n - 10 * n) \/\/ 2 + n\n```"
    },
    {
        "id":270,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n```"
    },
    {
        "id":271,
        "response":"```python\nimport typing\nimport itertools\n\ndef all_unique(test_list: typing.List[typing.Any]) -> bool:\n    return len(test_list) == len(set(test_list))\n```"
    },
    {
        "id":272,
        "response":"```python\nimport operator\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(operator.sub, nums1, nums2))\n```"
    },
    {
        "id":273,
        "response":"```python\nimport re\nfrom typing import Dict\nfrom collections import Counter\n\ndef validate(n: int) -> bool:\n    str_n = str(n)\n    freq_dict: Dict[str, int] = Counter(str_n)\n    for digit in str_n:\n        if freq_dict[digit] > int(digit):\n            return False\n    return True\n```"
    },
    {
        "id":274,
        "response":"```python\nimport typing\n\ndef check_element(list: typing.List[str], element: str) -> bool:\n    return len(set(list)) == 1 and list[0] == element if list else False\n```"
    },
    {
        "id":275,
        "response":"```python\nimport re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return text\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":276,
        "response":"```python\nimport itertools\nimport typing\n\ndef max_sub_array_sum_repeated(a: typing.List[int], n: int, k: int) -> int:\n    repeated_a = list(itertools.chain(*([a] * k)))\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in repeated_a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```"
    },
    {
        "id":277,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, n+1))\n```"
    },
    {
        "id":278,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef modular_inverse(arr, N, P):\n    result = 0\n    for num in arr:\n        if num == 1:\n            result += 1\n        elif (num * num) % P == 1:\n            result += 1\n    return result\n```"
    },
    {
        "id":279,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef odd_Days(N):\n    return (N \/\/ 7) + (N % 7) \/\/ 4\n```"
    },
    {
        "id":280,
        "response":"```python\nimport typing\n\ndef max_length(list1: typing.List[typing.List[int]]) -> typing.Tuple[int, typing.List[int]]:\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_len, max_list\n```"
    },
    {
        "id":281,
        "response":"```python\nimport typing\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 1:\n        return k\n    elif n == 2:\n        return k ** 2\n    else:\n        same, diff = k ** 2, k * (k - 1)\n        for _ in range(3, n + 1):\n            same, diff = diff, (same + diff) * (k - 1)\n        return same + diff\n```"
    },
    {
        "id":282,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef find(n, m):\n    return n \/\/ m\n```"
    },
    {
        "id":283,
        "response":"```python\nimport math\n\ndef otherside_rightangle(w,h):\n    return math.sqrt(w**2 + h**2)\n```"
    },
    {
        "id":284,
        "response":"```python\nimport typing\nimport itertools\n\ndef max_val(listval):\n    max_val = float('-inf')\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if val > max_val:\n                max_val = val\n    return max_val\n```"
    },
    {
        "id":285,
        "response":"```python\nimport math\n\ndef sum_div(number):\n    sum = 0\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            sum += i\n            if i != number \/\/ i:\n                sum += number \/\/ i\n    return sum - number\n```"
    },
    {
        "id":286,
        "response":"```python\nimport sys\nimport math\nfrom typing import List\n\ndef get_Inv_Count(arr: List[int], n: int) -> int:\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```"
    },
    {
        "id":287,
        "response":"```python\nimport typing\n\ndef flatten_list(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    flat_list = []\n    for element in list1:\n        if type(element) == list:\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n```"
    },
    {
        "id":288,
        "response":"```python\nimport typing\n\ndef intersection_nested_lists(l1, l2):\n    return [[element for element in sublist if element in l1] for sublist in l2]\n```"
    },
    {
        "id":289,
        "response":"```python\nimport itertools\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    return max(itertools.groupby(sorted(stdata), key=lambda x: x[0]), key=lambda x: sum(y[1] for y in x[1]))\n```"
    },
    {
        "id":290,
        "response":"```python\nimport math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 1.0\n    total = 0\n    for i in range(n + 1):\n        total += math.comb(n, i) * math.comb(n, i)\n    return total\n```"
    },
    {
        "id":291,
        "response":"```python\nimport typing\n\ndef dict_depth(d: typing.Dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)\n```"
    },
    {
        "id":292,
        "response":"```python\nimport math\n\ndef set_Bit_Number(n):\n    if n == 0:\n        return 0\n    return math.floor(math.log2(n & -n)) + 1\n```"
    },
    {
        "id":293,
        "response":"```python\nimport typing\nimport itertools\n\ndef solve(a: typing.List[int], n: int) -> bool:\n    count0 = a.count(0)\n    count1 = a.count(1)\n    return count0 == count1\n```"
    },
    {
        "id":294,
        "response":"```python\nimport itertools\nimport typing\n\ndef find_Element(arr: typing.List[int], ranges: typing.List[typing.List[int]], rotations: int, index: int) -> int:\n    for _ in range(rotations):\n        for start, end in ranges:\n            arr = arr[:start] + list(itertools.islice(reversed(arr[start:end+1]), None)) + arr[end+1:]\n    return arr[index]\n```"
    },
    {
        "id":295,
        "response":"```python\nimport re\n\ndef start_withp(words):\n    result = []\n    for word in words:\n        matches = re.findall(r'\\bP\\w+\\b', word)\n        if len(matches) > 1:\n            result = matches\n            break\n        elif len(matches) == 1:\n            result.append(matches[0])\n            if len(result) == 2:\n                break\n    return tuple(result) if len(result) == 2 else (result[0], None)\n```"
    },
    {
        "id":296,
        "response":"```python\nimport sys\nimport math\nimport re\nimport typing\nimport itertools\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    max_sum = 0\n    for i in range(index):\n        sum = 0\n        prev = 0\n        for j in range(i, index):\n            if a[j] > prev:\n                sum += a[j]\n                prev = a[j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n```"
    },
    {
        "id":297,
        "response":"```python\nimport typing\n\ndef colon_tuplex(tuplex: typing.Tuple, m: int, n: typing.Any) -> typing.Tuple:\n    listx = list(tuplex)\n    listx.insert(m, n)\n    return tuple(listx)\n```"
    },
    {
        "id":298,
        "response":"```python\nimport itertools\nimport heapq\n\ndef large_product(nums1, nums2, N):\n    products = [x * y for x, y in itertools.product(nums1, nums2)]\n    return heapq.nlargest(N, products)\n```"
    },
    {
        "id":299,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef maximum(a, b):\n    return a if a >= b else b\n```"
    },
    {
        "id":300,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef string_to_tuple(str1: str) -> typing.Tuple[str, ...]:\n    return tuple(str1)\n```"
    },
    {
        "id":301,
        "response":"```python\nimport math\n\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    left_most_unset_bit = int(math.log2(n)) + 1\n    while True:\n        if (n & (1 << left_most_unset_bit)) == 0:\n            return n | (1 << left_most_unset_bit)\n        left_most_unset_bit += 1\n```"
    },
    {
        "id":302,
        "response":"```python\nimport math\n\ndef volume_cone(r, h):\n    return (1.0\/3) * math.pi * r * r * h\n```"
    },
    {
        "id":303,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef pos_nos(list1):\n    for num in list1:\n        if num > 0:\n            print(num)\n    return None\n```"
    },
    {
        "id":304,
        "response":"```python\nimport itertools\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(0, n, 2):\n        for j in range(0, n, 2):\n            current_sum = sum(grid[i][j:j+2]) + (sum(grid[i+1][j:j+2]) if i+1 < n else 0)\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n```"
    },
    {
        "id":305,
        "response":"```python\nimport re\nfrom typing import List\n\ndef find_Max_Len_Even(str):\n    words = str.split()\n    max_len = 0\n    max_len_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_len_word = word\n    return max_len_word\n```"
    },
    {
        "id":306,
        "response":"```python\nimport typing\nimport itertools\n\ndef find_last_occurrence(A, x):\n    for i in range(len(A) - 1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1\n```"
    },
    {
        "id":307,
        "response":"```python\nimport itertools\n\ndef modified_encode(alist):\n    result = []\n    for key, group in itertools.groupby(alist):\n        count = sum(1 for _ in group)\n        if count > 1:\n            result.append([count, key])\n        else:\n            result.append(key)\n    return result\n```"
    },
    {
        "id":308,
        "response":"```python\nimport math\n\ndef max_volume(s):\n    a = s \/\/ 3\n    return a ** 3\n```"
    },
    {
        "id":309,
        "response":"```python\nimport re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5,}\\b', text)\n```"
    },
    {
        "id":310,
        "response":"```python\nimport math\nimport itertools\n\ndef sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares\n```"
    },
    {
        "id":311,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_demlo(s):\n    n = int(s[0])\n    first_part = ''.join(str(i) for i in range(n, n + 6))\n    second_part = ''.join(str(i) for i in range(n + 5, n - 1, -1))\n    return first_part + second_part\n```"
    },
    {
        "id":312,
        "response":"```python\nimport typing\n\ndef position_min(list1: typing.List[int]) -> typing.List[int]:\n    if not list1:\n        return []\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]\n```"
    },
    {
        "id":313,
        "response":"```python\nimport itertools\n\ndef right_rotate(arr, n, out_of_place=0, cur=0):\n    pos = [x for x in arr if x >= 0]\n    neg = [x for x in arr if x < 0]\n    pos = pos[out_of_place:]\n    neg = neg[out_of_place:]\n    res = list(itertools.chain(*zip(pos, neg)))\n    res += pos[len(neg):] if len(pos) > len(neg) else neg[len(pos):]\n    return res[:len(arr)]\n```"
    },
    {
        "id":314,
        "response":"```python\nimport typing\nimport itertools\n\ndef sum_of_alternates(test_tuple: typing.Tuple[int, ...]) -> typing.Tuple[int, int]:\n    even_sum = sum(test_tuple[::2])\n    odd_sum = sum(test_tuple[1::2])\n    return even_sum, odd_sum\n```"
    },
    {
        "id":315,
        "response":"```python\nimport math\nimport sys\n\ndef get_Min_Squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\n```"
    },
    {
        "id":316,
        "response":"```python\nimport re\nfrom collections import Counter\nfrom typing import List\n\ndef most_occurrences(test_list: List[str]) -> str:\n    words = re.findall(r'\\b\\w+\\b', ' '.join(test_list).lower())\n    return Counter(words).most_common(1)[0][0]\n```"
    },
    {
        "id":317,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef check_isosceles(x, y, z):\n    return x == y or y == z or x == z\n```"
    },
    {
        "id":318,
        "response":"```python\nfrom typing import List\n\ndef rotate_left(list1: List[int], m: int, n: int) -> List[int]:\n    if not list1:\n        return list1\n    m = m % len(list1)\n    return list1[m:] + list1[:m] + list1[:n]\n```"
    },
    {
        "id":319,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef neg_count(list):\n    return sum(1 for num in list if num < 0)\n```"
    },
    {
        "id":320,
        "response":"```python\nimport re\n\ndef find_char(text):\n    return re.findall(r'\\b\\w{3,5}\\b', text)\n```"
    },
    {
        "id":321,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef count_unset_bits(n):\n    return bin(n).count('0') - 2\n```"
    },
    {
        "id":322,
        "response":"```python\nimport re\nfrom typing import Dict\n\ndef char_frequency(str1: str) -> Dict[str, int]:\n    frequency = {}\n    for char in str1:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n```"
    },
    {
        "id":323,
        "response":"```python\nimport itertools\n\ndef Sort(sub_li):\n    sub_li[0].sort(key=lambda x: x[1])\n    return sub_li[0]\n```"
    },
    {
        "id":324,
        "response":"```python\nimport math\n\ndef check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":325,
        "response":"```python\nimport math\n\ndef ap_sum(a, n, d):\n    return (n\/2) * (2*a + (n-1)*d)\n```"
    },
    {
        "id":326,
        "response":"```python\nimport re\nimport typing\n\ndef check_monthnum(monthname1: str) -> bool:\n    monthname1 = monthname1.capitalize()\n    return monthname1 in [\"February\"]\n```"
    },
    {
        "id":327,
        "response":"```python\nimport re\n\ndef text_match_word(text):\n    word = \"python\"\n    return 'Found a match!' if re.search(r'\\b' + word + r'([.!?]?)$', text, re.IGNORECASE) else 'No match found'\n```"
    },
    {
        "id":328,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_Equality(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i] == s[j - 1]:\n                count += 1\n    return count\n```"
    },
    {
        "id":329,
        "response":"```python\nimport math\n\ndef find_Divisor(x,y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(x, y)\n```"
    },
    {
        "id":330,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef sum_three_smallest_nums(lst):\n    return sum(sorted(lst)[:3])\n```"
    },
    {
        "id":331,
        "response":"```python\nimport typing\n\ndef set_to_tuple(s: typing.Set[typing.Any]) -> typing.Tuple[typing.Any, ...]:\n    return tuple(sorted(s))\n```"
    },
    {
        "id":332,
        "response":"```python\nimport itertools\nimport typing\n\ndef __init__(self, value, list_num, index):\n    lists = value\n    min_range = float('inf')\n    max_range = float('-inf')\n    for lst in lists:\n        for num in lst:\n            if num < min_range:\n                min_range = num\n            if num > max_range:\n                max_range = num\n    return (min_range, max_range)\n```"
    },
    {
        "id":333,
        "response":"```python\nimport re\nimport typing\n\ndef dig_let(s: str) -> typing.Tuple[int, int]:\n    letters = len(re.findall(r'[a-zA-Z]', s))\n    digits = len(re.findall(r'\\d', s))\n    return letters, digits\n```"
    },
    {
        "id":334,
        "response":"```python\nimport math\n\ndef count_Odd_Squares(n,m):\n    count = 0\n    for i in range(1, m+1):\n        square = i ** 2\n        if square % 2 != 0 and square < (n+1) ** 2:\n            count += 1\n    return count\n```"
    },
    {
        "id":335,
        "response":"```python\nimport itertools\nimport typing\n\ndef diff_consecutivenums(nums: typing.List[int]) -> typing.List[int]:\n    return [abs(b - a) for a, b in zip(nums, nums[1:])]\n```"
    },
    {
        "id":336,
        "response":"```python\nimport math\n\ndef zigzag(n, k):\n    return n + k\n```"
    },
    {
        "id":337,
        "response":"```python\nimport math\nimport itertools\nimport typing\n\ndef count_Squares(m: int, n: int) -> int:\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        count += (m - i + 1) * (n - i + 1)\n    return count\n```"
    },
    {
        "id":338,
        "response":"```python\nimport re\nfrom typing import List, Tuple\n\ndef bin_coff(n):\n    return bin(n).count('1')\n```"
    },
    {
        "id":339,
        "response":"```python\nimport re\nimport typing\n\ndef check(string: str) -> str:\n    if set(string) == {'0', '1'} and string:\n        return \"Yes\"\n    else:\n        return \"No\"\n```"
    },
    {
        "id":340,
        "response":"```python\nimport re\nfrom typing import List, Tuple\nfrom itertools import groupby\n\ndef minimum_Length(s: str) -> str:\n    stack = []\n    for char in s:\n        if stack and stack[-1] == char:\n            stack.pop()\n        else:\n            stack.append(char)\n    return ''.join(stack)\n```"
    },
    {
        "id":341,
        "response":"```python\nfrom collections import Counter\n\ndef first_Element(arr, n, k):\n    count = Counter(arr)\n    for num in arr:\n        if count[num] == k:\n            return num\n    return None\n```"
    },
    {
        "id":342,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef unique_Characters(str):\n    return len(str) == len(set(str))\n```"
    },
    {
        "id":343,
        "response":"```python\nimport typing\n\ndef remove_column(list1: typing.List[typing.List[int]], n: int) -> typing.List[typing.List[int]]:\n    for i in range(len(list1)):\n        del list1[i][n]\n    return list1\n```"
    },
    {
        "id":344,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef tn_ap(a: int, n: int, d: int) -> int:\n    return a + (n-1)*d\n```"
    },
    {
        "id":345,
        "response":"```python\nimport math\nimport itertools\n\ndef count_Rectangles(radius):\n    if radius <= 0:\n        return 0\n    return (2*radius + 1)**2\n```"
    },
    {
        "id":346,
        "response":"```python\nimport math\n\ndef find_angle(a, b):\n    return 180 - (a + b)\n```"
    },
    {
        "id":347,
        "response":"```python\nimport typing\nimport itertools\n\ndef find_max(test_list: typing.List[typing.Tuple[int, ...]]) -> int:\n    return max(max(inner_tuple) for inner_tuple in test_list)\n```"
    },
    {
        "id":348,
        "response":"```python\nimport operator as op\n\ndef moddiv_list(nums1, nums2):\n    return list(map(op.mod, nums1, nums2))\n```"
    },
    {
        "id":349,
        "response":"```python\nimport math\nimport cmath\n\ndef Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return \"No real solutions\"\n    elif D == 0:\n        return \"Yes\"\n    else:\n        root1 = (-b + math.sqrt(D)) \/ (2*a)\n        root2 = (-b - math.sqrt(D)) \/ (2*a)\n        if root1 == 2*root2 or root2 == 2*root1:\n            return \"Yes\"\n        else:\n            return \"No\"\n```"
    },
    {
        "id":350,
        "response":"```python\nimport typing\n\ndef get_carol(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n```"
    },
    {
        "id":351,
        "response":"```python\nimport typing\n\ndef remove_empty(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [x for x in list1 if x != []]\n```"
    },
    {
        "id":352,
        "response":"```python\nimport re\nimport typing\nimport itertools\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    count = Counter(nums)\n    max_count = max(count.values())\n    return next(item for item, freq in count.items() if freq == max_count)\n```"
    },
    {
        "id":353,
        "response":"```python\nimport typing\n\ndef add_K_element(test_list: typing.List[typing.Tuple[int, int, int]], K: int) -> typing.List[typing.Tuple[int, int, int]]:\n    return [tuple(i + K for i in tup) for tup in test_list]\n```"
    },
    {
        "id":354,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef make_flip(ch: str) -> int:\n    flips = 0\n    for i in range(len(ch) - 1):\n        if ch[i] != ch[i + 1]:\n            flips += 1\n    return flips\n```"
    },
    {
        "id":355,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef count_Digit(n):\n    return len(str(abs(n)))\n```"
    },
    {
        "id":356,
        "response":"```python\nimport sys\n\ndef adjacent_num_product(list_nums):\n    max_product = float('-inf')\n    for i in range(len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product\n```"
    },
    {
        "id":357,
        "response":"```python\nimport sys\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self, root):\n        self.root = Node(root)\n\n    def is_balanced(self, node):\n        if node is None:\n            return True\n\n        left_height = self.get_height(node.left)\n        right_height = self.get_height(node.right)\n\n        return abs(left_height - right_height) <= 1 and self.is_balanced(node.left) and self.is_balanced(node.right)\n\n    def get_height(self, node):\n        if node is None:\n            return 0\n\n        return 1 + max(self.get_height(node.left), self.get_height(node.right))\n\n    def __init__(self, data):\n        self.root = Node(data)\n        return self.is_balanced(self.root)\n```"
    },
    {
        "id":358,
        "response":"```python\nimport typing\nimport itertools\n\ndef repeat_tuples(test_tup: typing.Tuple, N: int) -> typing.Tuple:\n    return test_tup * N\n```"
    },
    {
        "id":359,
        "response":"```python\nimport math\n\ndef lateralsurface_cuboid(l, w, h):\n    return 2 * (l * h + w * h)\n```"
    },
    {
        "id":360,
        "response":"```python\nimport typing\n\ndef float_sort(price: typing.List[typing.Tuple[str, str]]) -> typing.List[typing.Tuple[str, str]]:\n    return sorted(price, key=lambda x: float(x[1]), reverse=True)\n```"
    },
    {
        "id":361,
        "response":"```python\nimport itertools\nimport typing\n\ndef smallest_missing(A, left_element, right_element):\n    full_set = set(range(left_element, right_element + 1))\n    A_set = set(A)\n    missing_elements = sorted(list(full_set - A_set))\n    return missing_elements[0] if missing_elements else right_element + 1\n```"
    },
    {
        "id":362,
        "response":"```python\nimport heapq\nimport re\nimport typing\nimport itertools\n\ndef heap_assending(nums):\n    def heapify(nums, n, i):\n        smallest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and nums[left] < nums[smallest]:\n            smallest = left\n        if right < n and nums[right] < nums[smallest]:\n            smallest = right\n        if smallest != i:\n            nums[i], nums[smallest] = nums[smallest], nums[i]\n            heapify(nums, n, smallest)\n\n    n = len(nums)\n    for i in range(n \/\/ 2 - 1, -1, -1):\n        heapify(nums, n, i)\n    for i in range(n - 1, 0, -1):\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, i, 0)\n    return nums\n```"
    },
    {
        "id":363,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef volume_cuboid(l: int, w: int, h: int) -> int:\n    return l * w * h\n```"
    },
    {
        "id":364,
        "response":"```python\nimport itertools\n\ndef permute_string(str):\n    return [''.join(p) for p in set(itertools.permutations(str))]\n```"
    },
    {
        "id":365,
        "response":"```python\nimport math\n\ndef round_num(n, m):\n    return round(n \/ m) * m\n```"
    },
    {
        "id":366,
        "response":"```python\nimport typing\n\ndef remove_replica(test_tup):\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append('MSP')\n        else:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)\n```"
    },
    {
        "id":367,
        "response":"```python\nimport re\n\ndef remove_Char(s,c) :\n    return re.sub(c, '', s)\n```"
    },
    {
        "id":368,
        "response":"```python\nimport typing\n\ndef move_first(test_list: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if len(test_list) > 0:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n    return test_list\n```"
    },
    {
        "id":369,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef surfacearea_cuboid(l: int, w: int, h: int) -> int:\n    return 2 * (l * w + w * h + h * l)\n```"
    },
    {
        "id":370,
        "response":"```python\nimport itertools\nimport typing\n\ndef multi_list(rownum: int, colnum: int) -> typing.List[typing.List[int]]:\n    return [[i*j for j in range(colnum)] for i in range(rownum)]\n```"
    },
    {
        "id":371,
        "response":"```python\nimport operator\nimport functools\n\ndef index_on_inner_list(list_data, index_no):\n    if index_no >= len(list_data[0]):\n        raise ValueError\n    return sorted(list_data, key=lambda x: x[index_no])\n```"
    },
    {
        "id":372,
        "response":"```python\nimport typing\nimport itertools\n\ndef find_rotation_count(A):\n    return A.index(min(A))\n```"
    },
    {
        "id":373,
        "response":"```python\nimport math\n\ndef even_bit_toggle_number(n):\n    binary = bin(n)[2:]\n    binary = binary[::-1]\n    toggled_binary = ''.join('1' if bit == '0' else '0' if bit == '1' and i % 2 == 0 else bit for i, bit in enumerate(binary))\n    toggled_binary = toggled_binary[::-1]\n    return int(toggled_binary, 2)\n```"
    },
    {
        "id":374,
        "response":"```python\nfrom collections import Counter\n\ndef frequency_Of_Smallest(n,arr):\n    freq = Counter(arr)\n    return min(freq.values())\n```"
    },
    {
        "id":375,
        "response":"```python\nimport itertools\n\ndef get_perrin(n):\n    perrin_sequence = [3, 0, 2]\n    while len(perrin_sequence) <= n:\n        perrin_sequence.append(perrin_sequence[-2] + perrin_sequence[-3])\n    return perrin_sequence[n]\n```"
    },
    {
        "id":376,
        "response":"```python\nimport re\nfrom collections import deque\nfrom typing import List\n\ndef swap_count(s: str) -> int:\n    stack = deque()\n    count = 0\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    opening = stack.count('[')\n    closing = stack.count(']')\n    return opening + closing\n```"
    },
    {
        "id":377,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef even_or_odd(N):\n    hex_value = int(N, 16)\n    return \"Even\" if hex_value % 2 == 0 else \"Odd\"\n```"
    },
    {
        "id":378,
        "response":"```python\nimport math\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    power = 2 ** math.floor(math.log2(n))\n    return power\n```"
    },
    {
        "id":379,
        "response":"```python\nimport typing\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```"
    },
    {
        "id":380,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef add_string(list, string):\n    return [string.format(i) for i in list]\n```"
    },
    {
        "id":381,
        "response":"```python\nfrom typing import List, Dict, Any\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[Any]) -> List[Dict[str, Dict[str, Any]]]:\n    result = []\n    for i in range(len(l1)):\n        temp = {}\n        temp[l1[i]] = {l2[i]: l3[i] if i < len(l3) else None}\n        result.append(temp)\n    return result\n```"
    },
    {
        "id":382,
        "response":"```python\nimport math\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i], i)\n        if i % 2 == 0:\n            dp[i] = max(dp[i], dp[i \/\/ 2] + dp[i \/\/ 2])\n        if i % 3 == 0:\n            dp[i] = max(dp[i], dp[i \/\/ 3] + dp[i \/\/ 3] + dp[i \/\/ 3])\n        if i % 4 == 0:\n            dp[i] = max(dp[i], dp[i \/\/ 4] + dp[i \/\/ 4] + dp[i \/\/ 4] + dp[i \/\/ 4])\n        if i % 5 == 0:\n            dp[i] = max(dp[i], dp[i \/\/ 5] + dp[i \/\/ 5] + dp[i \/\/ 5] + dp[i \/\/ 5] + dp[i \/\/ 5])\n    return dp[n]\n```"
    },
    {
        "id":383,
        "response":"```python\nimport itertools\n\ndef max_length_list(input_list):\n    return max(enumerate(input_list, start=0), key=lambda x: len(x[1]))\n```"
    },
    {
        "id":384,
        "response":"```python\nimport typing\nimport itertools\n\ndef check_distinct(test_tup: typing.Tuple[typing.Any, ...]) -> bool:\n    return len(test_tup) == len(set(test_tup))\n```"
    },
    {
        "id":385,
        "response":"```python\nimport re\nfrom typing import Dict\n\ndef first_non_repeating_character(str1: str) -> str:\n    char_count: Dict[str, int] = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n```"
    },
    {
        "id":386,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_char(string: str) -> str:\n    if len(string) > 0 and string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n```"
    },
    {
        "id":387,
        "response":"```python\nimport statistics\n\ndef median_numbers(a, b, c):\n    return statistics.median([a, b, c])\n```"
    },
    {
        "id":388,
        "response":"```python\nimport itertools\nimport typing\nimport re\n\ndef sum_of_digits(nums: typing.List[int]) -> int:\n    return sum(sum(int(digit) for digit in str(num)) for num in nums)\n```"
    },
    {
        "id":389,
        "response":"```python\nimport operator\nimport itertools\n\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(map(operator.xor, test_tup1, test_tup2))\n```"
    },
    {
        "id":390,
        "response":"```python\nimport collections\nimport itertools\n\ndef extract_freq(test_list):\n    freq_dict = collections.defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        freq_dict[sorted_tup] += 1\n    return len(freq_dict)\n```"
    },
    {
        "id":391,
        "response":"```python\nimport itertools\nimport typing\n\ndef add_nested_tuples(test_tup1: typing.Tuple[typing.Tuple[int, int], ...], test_tup2: typing.Tuple[typing.Tuple[int, int], ...]) -> typing.Tuple[typing.Tuple[int, int], ...]:\n    return tuple(tuple(x + y for x, y in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":392,
        "response":"```python\nimport math\n\ndef ncr_modp(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p\n```"
    },
    {
        "id":393,
        "response":"```python\nimport urllib.parse\nimport re\n\ndef is_valid_URL(str):\n    from urllib.parse import urlparse\n    try:\n        result = urlparse(str)\n        return all([result.scheme, result.netloc])\n    except ValueError:\n        return False\n```"
    },
    {
        "id":394,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef minimum(a, b):\n    return min(a, b)\n```"
    },
    {
        "id":395,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex\n```"
    },
    {
        "id":396,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n```"
    },
    {
        "id":397,
        "response":"```python\nimport itertools\n\ndef rearrange_bigger(n):\n    digits = [int(x) for x in str(n)]\n    perms = list(itertools.permutations(digits))\n    perms = [int(''.join(map(str, x))) for x in perms]\n    perms = [x for x in perms if x > n]\n    return min(perms) if perms else -1\n```"
    },
    {
        "id":398,
        "response":"```python\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    queue = []\n    for i in range(len(nums1)):\n        heapq.heappush(queue, (nums1[i] + nums2[0], i, 0))\n    \n    result = []\n    while queue and k > 0:\n        _, i, j = heapq.heappop(queue)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```"
    },
    {
        "id":399,
        "response":"```python\nimport typing\nimport itertools\n\ndef min_product_tuple(list1: typing.List[typing.Tuple[int, int]]) -> int:\n    return min(a * b for a, b in list1)\n```"
    },
    {
        "id":400,
        "response":"```python\nimport typing\nimport itertools\n\ndef min_val(listval: typing.List[typing.Any]) -> typing.Any:\n    return min((i for i in listval if isinstance(i, (int, float))), default=None)\n```"
    },
    {
        "id":401,
        "response":"```python\nimport re\n\ndef snake_to_camel(word):\n    return re.sub('_(\\w)', lambda x: x.group(1).upper(), word).capitalize()\n```"
    },
    {
        "id":402,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_odd(l):\n    return [num for num in l if num % 2 == 0]\n```"
    },
    {
        "id":403,
        "response":"```python\nimport typing\n\ndef extract_nth_element(list1, n):\n    return [tup[n] for tup in list1 if n < len(tup)]\n```"
    },
    {
        "id":404,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef overlapping(list1: typing.List[int], list2: typing.List[int]) -> typing.List[int]:\n    return [i for i in list1 if i in list2]\n```"
    },
    {
        "id":405,
        "response":"```python\nimport itertools\nimport typing\n\ndef max_Product(arr: typing.List[int]) -> typing.Tuple[int, int]:\n    max_product = float('-inf')\n    result = (0, 0)\n    for pair in itertools.combinations(arr, 2):\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n            result = pair\n    return result\n```"
    },
    {
        "id":406,
        "response":"```python\nimport math\n\ndef breakSum(n):\n    if n < 4:\n        return n\n    else:\n        return (n \/\/ 3) * 3 + (n % 3)\n```"
    },
    {
        "id":407,
        "response":"```python\nimport typing\n\ndef group_tuples(tuples_list: typing.List[typing.Tuple[str, str]]) -> typing.List[typing.Tuple[str, ...]]:\n    result = {}\n    for tup in tuples_list:\n        if tup[0] in result:\n            result[tup[0]].append(tup[1])\n        else:\n            result[tup[0]] = [tup[1]]\n    return [tuple([key] + value) for key, value in result.items()]\n```"
    },
    {
        "id":408,
        "response":"```python\nimport typing\n\ndef Find_Max(lst: typing.List[typing.List[str]]) -> typing.List[str]:\n    return max(lst, key=len, default=[])\n```"
    },
    {
        "id":409,
        "response":"```python\nimport math\nimport itertools\n\ndef round_and_sum(list1):\n    return sum(math.floor(i + 0.5) if i >= 0 else math.ceil(i - 0.5) for i in list1) * len(list1)\n```"
    },
    {
        "id":410,
        "response":"```python\nimport math\nimport itertools\nimport re\nimport typing\nfrom typing import Iterable\n\ndef cube_Sum(n: int) -> int:\n    return sum(i**3 for i in range(1, n+1))\n```"
    },
    {
        "id":411,
        "response":"```python\nimport re\nimport typing\nimport itertools\nfrom typing import Split\n\ndef concatenate_tuple(test_tup):\n    return '-'.join(map(str, test_tup))\n```"
    },
    {
        "id":412,
        "response":"```python\nimport math\nimport statistics\nimport itertools\nimport re\nimport typing\n\ndef find_Average_Of_Cube(n: int) -> float:\n    return sum(i**3 for i in range(1, n+1)) \/ n\n```"
    },
    {
        "id":413,
        "response":"```python\nimport sys\n\ndef get_maxgold(gold, m, n):\n    for col in range(n - 2, -1, -1):\n        for row in range(m):\n            if row == 0:\n                gold[row][col] += max(gold[row][col + 1], gold[row + 1][col + 1] if row + 1 < m else 0)\n            elif row == m - 1:\n                gold[row][col] += max(gold[row][col + 1], gold[row - 1][col + 1])\n            else:\n                gold[row][col] += max(gold[row][col + 1], gold[row + 1][col + 1], gold[row - 1][col + 1])\n    return max([row[0] for row in gold])\n```"
    },
    {
        "id":414,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef extract_rear(test_tuple: typing.Tuple[str, ...]) -> typing.List[str]:\n    return [string[-1] for string in test_tuple]\n```"
    },
    {
        "id":415,
        "response":"```python\nimport typing\n\ndef count_element_in_list(list1: typing.List[typing.List[int]], x: int) -> int:\n    return sum(1 for sublist in list1 if x in sublist)\n```"
    },
    {
        "id":416,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n```"
    },
    {
        "id":417,
        "response":"```python\nimport re\n\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n```"
    },
    {
        "id":418,
        "response":"```python\nimport typing\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    gap = len(my_list) \/\/ 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list\n```"
    },
    {
        "id":419,
        "response":"```python\nimport itertools\nimport operator\n\ndef and_tuples(test_tup1, test_tup2):\n    return tuple(map(operator.and_, test_tup1, test_tup2))\n```"
    },
    {
        "id":420,
        "response":"```python\nimport math\n\ndef parabola_directrix(a, b, c):\n    return (c - (b**2)\/(4*a))\n```"
    },
    {
        "id":421,
        "response":"```python\nimport typing\n\ndef common_element(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> bool:\n    return len(set(list1) & set(list2)) > 0\n```"
    },
    {
        "id":422,
        "response":"```python\nimport math\n\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2\n```"
    },
    {
        "id":423,
        "response":"```python\nimport typing\nimport itertools\n\ndef check_greater(arr: typing.List[int], number: int) -> str:\n    if all(i < number for i in arr):\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n```"
    },
    {
        "id":424,
        "response":"```python\nimport re\n\ndef text_match_one(text):\n    if re.search('b', text):\n        return text\n    else:\n        return 'Not matched!'\n```"
    },
    {
        "id":425,
        "response":"```python\nimport math\n\ndef last_Digit(n) :\n    return n % 10\n```"
    },
    {
        "id":426,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef neg_nos(list1):\n    return [num for num in list1 if num < 0]\n```"
    },
    {
        "id":427,
        "response":"```python\nimport re\nfrom typing import Union\n\ndef remove_odd(str1: Union[str, None]) -> str:\n    if str1 is None:\n        return \"\"\n    return \"\".join([str1[i] for i in range(len(str1)) if i % 2 == 0])\n```"
    },
    {
        "id":428,
        "response":"```python\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> str:\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return str(count)\n```"
    },
    {
        "id":429,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef multiple_to_single(L):\n    return int(''.join(map(str, L)))\n```"
    },
    {
        "id":430,
        "response":"```python\nimport re\n\ndef find_adverb_position(text):\n    words = text.split()\n    for i, word in enumerate(words):\n        word = re.sub(r'[^\\w\\s]', '', word)\n        if word.endswith('ly'):\n            return (i, len(word), word)\n    return None\n```"
    },
    {
        "id":431,
        "response":"```python\nimport math\n\ndef surfacearea_cube(l):\n    return 6 * math.pow(l, 2)\n```"
    },
    {
        "id":432,
        "response":"```python\nimport math\n\ndef positive_count(nums):\n    total_count = len(nums)\n    positive_count = sum(1 for num in nums if num > 0)\n    return positive_count \/ total_count if total_count > 0 else 0.0\n```"
    },
    {
        "id":433,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef largest_neg(list1):\n    neg_list = [num for num in list1 if num < 0]\n    if not neg_list:\n        return None\n    return max(neg_list)\n```"
    },
    {
        "id":434,
        "response":"```python\nimport itertools\nfrom typing import List, Tuple\n\ndef trim_tuple(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return [t[:K] for t in test_list]\n```"
    },
    {
        "id":435,
        "response":"```python\nimport typing\n\ndef index_multiplication(test_tup1: typing.Tuple, test_tup2: typing.Tuple) -> typing.Tuple:\n    return tuple((a * b, c * d) for (a, c), (b, d) in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":436,
        "response":"```python\nimport typing\nimport itertools\n\ndef count_Occurrence(tup: typing.Tuple, lst: typing.List) -> int:\n    return sum(1 for i in tup if i in lst)\n```"
    },
    {
        "id":437,
        "response":"```python\nimport math\nimport functools\nimport operator\nimport itertools\nfrom typing import List, Any\n\ndef cube_nums(nums: List[Any]) -> List[Any]:\n    return list(map(lambda x: x**3, nums))\n```"
    },
    {
        "id":438,
        "response":"```python\nimport itertools\n\ndef cal_sum(n):\n    return sum(itertools.islice(itertools.count(1, 2), 0, n))\n```"
    },
    {
        "id":439,
        "response":"```python\nimport math\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    a = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    b = math.sqrt((x3-x2)**2 + (y3-y2)**2)\n    c = math.sqrt((x1-x3)**2 + (y1-y3)**2)\n    if a + b > c and a + c > b and b + c > a:\n        return 'Yes'\n    else:\n        return 'No'\n```"
    },
    {
        "id":440,
        "response":"```python\nimport typing\n\ndef extract_string(str: typing.List[str], l: int) -> typing.List[str]:\n    return [s for s in str if len(s) == l]\n```"
    },
    {
        "id":441,
        "response":"```python\nimport re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n```"
    },
    {
        "id":442,
        "response":"```python\nimport math\n\ndef loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n```"
    },
    {
        "id":443,
        "response":"```python\nimport math\n\ndef sumofFactors(n) :\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            if n \/\/ i == i :\n                sum += i\n            else :\n                sum += i + n \/\/ i\n    return sum\n```"
    },
    {
        "id":444,
        "response":"```python\nimport re\n\ndef text_match_wordz(text):\n    if re.search(r'\\bz\\B|\\Bz\\b|^\\Bz|z\\B$|^\\bz\\b|^\\Bz$|^\\Bz\\B', text):\n        return 'Found a match!'\n    else:\n        return 'No match found!'\n```"
    },
    {
        "id":445,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_monthnumb_number(monthnum2):\n    month_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in month_with_31_days\n```"
    },
    {
        "id":446,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef reverse_string_list(stringlist: typing.List[str]) -> typing.List[str]:\n    return [s[::-1] for s in stringlist]\n```"
    },
    {
        "id":447,
        "response":"```python\nimport typing\n\ndef Find_Min(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    return min(lst, key=len)\n```"
    },
    {
        "id":448,
        "response":"```python\nimport math\n\ndef rectangle_area(l, b):\n    return l * b\n```"
    },
    {
        "id":449,
        "response":"```python\nimport re\n\ndef remove_uppercase(str1):\n    return re.sub('[A-Z]+', '', str1)\n```"
    },
    {
        "id":450,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef Extract(lst):\n    return [sublist[0] for sublist in lst if sublist]\n```"
    },
    {
        "id":451,
        "response":"```python\nimport re\nimport typing\n\ndef upper_ctr(str: typing.Union[str, None]) -> int:\n    return sum(1 for c in str if c.isupper())\n```"
    },
    {
        "id":452,
        "response":"```python\nimport itertools\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.combinations(list1, r))\n    return [list(x) for x in result]\n```"
    },
    {
        "id":453,
        "response":"```python\nimport math\nimport itertools\n\ndef max_subarray_product(arr):\n    max_product = float('-inf')\n    for L in range(0, len(arr)+1):\n        for subset in itertools.combinations(arr, L):\n            product = math.prod(subset)\n            if product > max_product:\n                max_product = product\n    return max_product\n```"
    },
    {
        "id":454,
        "response":"```python\nimport typing\n\ndef check_value(dict: typing.Dict[str, int], n: int) -> bool:\n    return len(set(dict.values())) == 1 and all(value == n for value in dict.values())\n```"
    },
    {
        "id":455,
        "response":"```python\nimport typing\nimport itertools\n\ndef drop_empty(dict1: typing.Dict) -> typing.Dict:\n    return {key: value for key, value in dict1.items() if value is not None}\n```"
    },
    {
        "id":456,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef find_peak_util(arr, low, high, n):\n    mid = (low + high) \/\/ 2\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n```"
    },
    {
        "id":457,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef decimal_to_Octal(deciNum: int) -> str:\n    return oct(deciNum).replace(\"0o\", \"\")\n```"
    },
    {
        "id":458,
        "response":"```python\nimport math\nimport itertools\n\ndef max_product(arr, n):\n    arr.sort()\n    product = max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])\n    return product\n```"
    },
    {
        "id":459,
        "response":"```python\nimport typing\n\ndef max_profit(price: typing.List[int], k: int) -> int:\n    if k == 0 or len(price) < 2:\n        return 0\n\n    if k >= len(price) \/\/ 2:\n        return sum(max(0, b - a) for a, b in zip(price, price[1:]))\n\n    buy = [-float('inf')] * (k + 1)\n    sell = [0] * (k + 1)\n\n    for p in price:\n        for i in range(1, k + 1):\n            buy[i] = max(buy[i], sell[i - 1] - p)\n            sell[i] = max(sell[i], buy[i] + p)\n\n    return sell[k]\n```"
    },
    {
        "id":460,
        "response":"```python\nimport typing\nimport itertools\n\ndef add_pairwise(test_tup: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(0, len(test_tup), 2))\n```"
    },
    {
        "id":461,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef find_remainder(arr, lens, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n```"
    },
    {
        "id":462,
        "response":"```python\nimport itertools\nimport typing\n\ndef check_Consecutive(l: typing.List[int]) -> bool:\n    return all(l[i] + 1 == l[i+1] for i in range(len(l)-1))\n```"
    },
    {
        "id":463,
        "response":"```python\nimport typing\n\ndef tuple_intersection(test_list1: typing.List[typing.Tuple[int, int]], test_list2: typing.List[typing.Tuple[int, int]]) -> typing.Set[typing.Tuple[int, int]]:\n    set1 = set(tuple(sorted(t)) for t in test_list1)\n    set2 = set(tuple(sorted(t)) for t in test_list2)\n    return set(t for t in set1 & set2)\n```"
    },
    {
        "id":464,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)\n```"
    },
    {
        "id":465,
        "response":"```python\nimport collections\nimport itertools\nimport re\nimport typing\nfrom typing import Counter\n\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n```"
    },
    {
        "id":466,
        "response":"```python\nimport sys\nimport math\nimport itertools\nimport re\nfrom typing import List, Tuple, Dict, Set\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)\n```"
    },
    {
        "id":467,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport string\n\ndef is_lower(string):\n    return string.lower()\n```"
    },
    {
        "id":468,
        "response":"```python\nimport re\nimport typing\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n```"
    },
    {
        "id":469,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef first_Digit(n) :\n    return int(str(abs(n))[0])\n```"
    },
    {
        "id":470,
        "response":"```python\nimport re\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef get_max_occuring_char(str1: str) -> str:\n    char_count: Dict[str, int] = defaultdict(int)\n    for char in str1:\n        char_count[char] += 1\n    max_count: int = max(char_count.values())\n    max_chars: list[str] = [char for char, count in char_count.items() if count == max_count]\n    return min(max_chars)\n```"
    },
    {
        "id":471,
        "response":"```python\nimport typing\n\ndef is_subset_sum(set, n, sum):\n    dp = [[False for _ in range(sum + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if set[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-set[i-1]]\n    return dp[n][sum]\n```"
    },
    {
        "id":472,
        "response":"```python\nimport re\n\ndef match(text):\n    if re.search(r'[A-Z][a-z]+', text):\n        return 'Yes'\n    else:\n        return 'No'\n```"
    },
    {
        "id":473,
        "response":"```python\nimport math\n\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        factorial = math.factorial(i)\n        if factorial % x == 0:\n            return i\n        i += 1\n```"
    },
    {
        "id":474,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_matching_tuple(test_list1: typing.List[typing.Tuple], test_list2: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    return [t for t in test_list1 if t not in test_list2]\n```"
    },
    {
        "id":475,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_palindrome(nums: typing.List[int]) -> int:\n    largest_palindrome = 0\n    for num in nums:\n        if str(num) == str(num)[::-1] and num > largest_palindrome:\n            largest_palindrome = num\n    return largest_palindrome\n```"
    },
    {
        "id":476,
        "response":"```python\nimport math\n\ndef nCr(n, r, p):\n    return math.comb(n, r) * (p ** r) * ((1 - p) ** (n - r))\n```"
    },
    {
        "id":477,
        "response":"```python\nimport itertools\nimport typing\n\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])\n```"
    },
    {
        "id":478,
        "response":"```python\nimport math\n\ndef area_pentagon(a):\n    return (math.sqrt(25 + 10 * math.sqrt(5)) \/ 4) * (a ** 2)\n```"
    },
    {
        "id":479,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef frequency_Of_Largest(n: int, arr: List[int]) -> int:\n    count = Counter(arr)\n    max_count = max(count.values())\n    return max_count\n```"
    },
    {
        "id":480,
        "response":"```python\nimport typing\n\ndef extract_symmetric(test_list: typing.List[typing.Tuple[int, int]]) -> typing.Set[typing.Tuple[int, int]]:\n    symmetric_pairs = set()\n    for pair in test_list:\n        if (pair[1], pair[0]) in test_list:\n            symmetric_pairs.add(tuple(sorted(pair)))\n    return symmetric_pairs\n```"
    },
    {
        "id":481,
        "response":"```python\nimport math\n\ndef sum_gp(a, n, r):\n    return a * (r**n - 1) \/ (r - 1)\n```"
    },
    {
        "id":482,
        "response":"```python\nimport typing\n\ndef binary_search(item_list: typing.List[int], item: int) -> bool:\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if item_list[mid] == item:\n            return True\n        elif item_list[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n```"
    },
    {
        "id":483,
        "response":"```python\nimport math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    polygons = []\n    for x in range(startx, endx + 1):\n        for y in range(starty, endy + 1):\n            points = []\n            for i in range(6):\n                angle = math.pi \/ 3 * i\n                px = x + radius * math.cos(angle)\n                py = y + radius * math.sin(angle)\n                points.append((px, py))\n            polygons.append(points)\n    return polygons\n```"
    },
    {
        "id":484,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef binary_to_integer(test_tup):\n    result = ''\n    for i in test_tup:\n        result += str(i)\n    return str(int(result, 2))\n```"
    },
    {
        "id":485,
        "response":"```python\nimport re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n```"
    },
    {
        "id":486,
        "response":"```python\nimport heapq\n\ndef heap_queue_smallest(nums, n):\n    if n >= len(nums):\n        return sorted(nums)\n    return heapq.nsmallest(n, nums)\n```"
    },
    {
        "id":487,
        "response":"```python\nimport math\n\ndef surfacearea_cone(r,h):\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n```"
    },
    {
        "id":488,
        "response":"```python\nimport math\n\ndef gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x\n```"
    },
    {
        "id":489,
        "response":"```python\nimport math\n\ndef diameter_circle(r):\n    return 2 * r\n```"
    },
    {
        "id":490,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef concatenate_elements(list):\n    return ' ' + ' '.join(list)\n```"
    },
    {
        "id":491,
        "response":"```python\nimport sys\n\ndef min_cost(cost, m, n):\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    return dp[m][n]\n```"
    },
    {
        "id":492,
        "response":"```python\nimport typing\nimport itertools\n\ndef similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))\n```"
    },
    {
        "id":493,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n```"
    },
    {
        "id":494,
        "response":"```python\nimport heapq\nimport typing\n\ndef heap_queue_largest(nums: typing.List[int], n: int) -> typing.List[int]:\n    if n == 0 or not nums:\n        return []\n    return heapq.nlargest(n, nums)\n```"
    },
    {
        "id":495,
        "response":"```python\nimport math\n\ndef count_ways(n):\n    return (math.pow(7, n) - math.pow(3, n)) \/\/ 4\n```"
    },
    {
        "id":496,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef is_Power_Of_Two (x, y):\n    return bin(x ^ y).count('1') == 1\n```"
    },
    {
        "id":497,
        "response":"```python\nimport re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)\n```"
    },
    {
        "id":498,
        "response":"```python\nimport typing\n\ndef square_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x**2, nums))\n```"
    },
    {
        "id":499,
        "response":"```python\nimport math\nfrom collections import defaultdict\nfrom typing import DefaultDict\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            substr = s[:i]\n            d: DefaultDict[str, int] = defaultdict(int)\n            for char in substr:\n                d[char] += 1\n            valid = True\n            for char in s:\n                if char not in d or d[char] == 0:\n                    valid = False\n                    break\n                d[char] -= 1\n            if valid:\n                return i\n    return n\n```"
    },
    {
        "id":500,
        "response":"```python\nimport heapq\nimport typing\n\ndef small_nnum(list1: typing.List[int], n: int) -> typing.List[int]:\n    return heapq.nsmallest(n, list1)\n```"
    }
]