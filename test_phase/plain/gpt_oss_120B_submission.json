[
    {
        "id":1,
        "response":"import re\n\ndef remove_Occ(s, ch):\n    if not s or not ch:\n        return s\n    first = s.find(ch)\n    if first == -1:\n        return s\n    last = s.rfind(ch)\n    if first == last:\n        return s[:first] + s[first+1:]\n    return s[:first] + s[first+1:last] + s[last+1:]"
    },
    {
        "id":2,
        "response":"from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    return sorted(M, key=sum)"
    },
    {
        "id":3,
        "response":"import collections\n\ndef count_common(words):\n    if not words:\n        return {}\n    return dict(collections.Counter(words))"
    },
    {
        "id":4,
        "response":"def find_Volume(l, b, h):\n    return (l * b * h) \/ 2"
    },
    {
        "id":5,
        "response":"def split_lowerstring(text):\n    return [char.lower() for char in text]"
    },
    {
        "id":6,
        "response":"import re\n\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+', text)"
    },
    {
        "id":7,
        "response":"def square_perimeter(a):\n    return 4 * a"
    },
    {
        "id":8,
        "response":"import typing\n\ndef remove_chars(first: str, second: str) -> str:\n    remove_set = set(second)\n    return ''.join(ch for ch in first if ch not in remove_set)"
    },
    {
        "id":9,
        "response":"import typing\n\ndef test_duplicate(arraynums: typing.List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "id":10,
        "response":"import math\n\ndef is_woodall(x):\n    if not isinstance(x, int) or x < 0:\n        return False\n    n = 1\n    while True:\n        w = n * (1 << n) - 1\n        if w == x:\n            return True\n        if w > x:\n            return False\n        n += 1"
    },
    {
        "id":11,
        "response":"import typing\n\ndef multiples_of_num(m: int, n: int) -> typing.List[int]:\n    if n <= 0:\n        return []\n    return [m * i for i in range(1, n + 1)]"
    },
    {
        "id":12,
        "response":"import typing\n\ndef find_first_duplicate(nums: typing.List[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1"
    },
    {
        "id":13,
        "response":"import typing\n\ndef maximum_Sum(list1: typing.List[typing.List[int]]) -> int:\n    if not list1:\n        return 0\n    max_sum = float('-inf')\n    for sublist in list1:\n        current_sum = sum(sublist) if sublist else 0\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum if max_sum != float('-inf') else 0"
    },
    {
        "id":14,
        "response":"def binary_to_decimal(binary):\n    binary_str = str(binary).strip()\n    if not binary_str:\n        return 0\n    if any(c not in '01' for c in binary_str):\n        raise ValueError(\"Invalid binary number\")\n    return int(binary_str, 2)"
    },
    {
        "id":15,
        "response":"import collections\n\ndef find_Product(arr, n):\n    freq = collections.Counter(arr)\n    product = 1\n    found = False\n    for x in arr:\n        if freq[x] == 1:\n            product *= x\n            found = True\n    return product if found else 0"
    },
    {
        "id":16,
        "response":"import typing\n\ndef check_k_elements(test_list: typing.Tuple, K: int) -> bool:\n    return len(test_list) == K"
    },
    {
        "id":17,
        "response":"import re\n\ndef remove(strings):\n    return [re.sub(r'\\d', '', s) for s in strings]"
    },
    {
        "id":18,
        "response":"import math\n\ndef binomial_Coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    k = min(k, n - k)\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - k + i) \/\/ i\n    return result"
    },
    {
        "id":19,
        "response":"import typing\n\ndef get_Odd_Occurrence(arr: typing.List[int], arr_size: int) -> int:\n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result if result != 0 else None"
    },
    {
        "id":20,
        "response":"import collections\n\ndef check_Equality(s):\n    freq = collections.Counter(s)\n    total = 0\n    for f in freq.values():\n        total += f * (f + 1) \/\/ 2\n    return total"
    },
    {
        "id":21,
        "response":"import heapq\nfrom collections import Counter\nfrom typing import List\n\ndef func(nums: List[int], k: int) -> List[int]:\n    if not nums or k <= 0:\n        return []\n    freq = Counter(nums)\n    if k >= len(freq):\n        return list(freq.keys())\n    top_k = heapq.nlargest(k, freq.items(), key=lambda x: x[1])\n    return [num for num, _ in top_k]"
    },
    {
        "id":22,
        "response":"import math\n\ndef max_Prime_Factors(n):\n    if n <= 1:\n        return None\n    max_prime = None\n    while n % 2 == 0:\n        max_prime = 2\n        n \/\/= 2\n    factor = 3\n    limit = math.isqrt(n) + 1\n    while factor <= limit and n > 1:\n        while n % factor == 0:\n            max_prime = factor\n            n \/\/= factor\n            limit = math.isqrt(n) + 1\n        factor += 2\n    if n > 1:\n        max_prime = n\n    return max_prime"
    },
    {
        "id":23,
        "response":"def decimal_To_Binary(N):\n    if N == 0:\n        return \"0\"\n    sign = ''\n    if N < 0:\n        sign = '-'\n        N = -N\n    bits = []\n    while N:\n        bits.append(str(N & 1))\n        N >>= 1\n    return sign + ''.join(reversed(bits))"
    },
    {
        "id":24,
        "response":"import typing\n\ndef find_missing(ar: typing.List[int], N: int) -> int:\n    low = 0\n    high = len(ar) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if ar[mid] != mid + 1:\n            if mid == 0 or ar[mid - 1] == mid:\n                return mid + 1\n            high = mid - 1\n        else:\n            low = mid + 1\n    return N"
    },
    {
        "id":25,
        "response":"import typing\n\ndef find_rect_num(n: int) -> int:\n    return n * (n + 1)"
    },
    {
        "id":26,
        "response":"import typing\n\ndef find_Nth_Digit(p: int, q: int, N: int) -> int:\n    if q == 0:\n        raise ZeroDivisionError(\"Denominator q cannot be zero.\")\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    remainder = p % q\n    for _ in range(N):\n        remainder *= 10\n        digit = remainder \/\/ q\n        remainder %= q\n    return digit"
    },
    {
        "id":27,
        "response":""
    },
    {
        "id":28,
        "response":"import typing\n\ndef div_even_odd(list1: typing.List[int]) -> typing.Optional[float]:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and isinstance(num, int) and num % 2 == 0:\n            first_even = num\n        if first_odd is None and isinstance(num, int) and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even \/ first_odd"
    },
    {
        "id":29,
        "response":"import heapq\nfrom collections import Counter\n\ndef rearange_string(S: str) -> str:\n    if not S:\n        return \"\"\n    freq = Counter(S)\n    max_heap = [(-cnt, ch) for ch, cnt in freq.items()]\n    heapq.heapify(max_heap)\n    prev_cnt, prev_ch = 0, ''\n    result = []\n    while max_heap:\n        cnt, ch = heapq.heappop(max_heap)\n        result.append(ch)\n        cnt += 1  # since cnt is negative\n        if prev_cnt < 0:\n            heapq.heappush(max_heap, (prev_cnt, prev_ch))\n        prev_cnt, prev_ch = cnt, ch\n    rearranged = ''.join(result)\n    for i in range(1, len(rearranged)):\n        if rearranged[i] == rearranged[i - 1]:\n            return \"\"\n    return rearranged"
    },
    {
        "id":30,
        "response":"import collections\n\ndef freq_element(nums):\n    return dict(collections.Counter(nums))"
    },
    {
        "id":31,
        "response":"def filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "id":32,
        "response":"import collections\n\ndef find_Sum(arr, n):\n    freq = collections.Counter(arr)\n    total = 0\n    for num, count in freq.items():\n        if count > 1:\n            total += num * count\n    return total"
    },
    {
        "id":33,
        "response":"import re\n\ndef text_match(text):\n    pattern = re.compile(r'\\b[a-z]+(?:_[a-z]+)+\\b')\n    return pattern.findall(text)"
    },
    {
        "id":34,
        "response":"import re\n\ndef text_match_string(text):\n    match = re.match(r'\\s*([A-Za-z0-9_]+)', text)\n    return match.group(1) if match else ''"
    },
    {
        "id":35,
        "response":"import math\nfrom functools import reduce\n\ndef find_gcd(arr):\n    if not arr:\n        return 0\n    return reduce(lambda a, b: math.gcd(a, b), arr)"
    },
    {
        "id":36,
        "response":"def test_distinct(data):\n    return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":"import sys\n\ndef compute_Last_Digit(A: int, B: int) -> int:\n    if A < B:\n        return 0\n    if A - B >= 5:\n        return 0\n    result = 1\n    for i in range(B + 1, A + 1):\n        result = (result * (i % 10)) % 10\n    return result"
    },
    {
        "id":38,
        "response":"import typing\n\ndef odd_bit_set_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    max_bits = n.bit_length() + 1\n    mask = 0\n    for i in range(1, max_bits, 2):\n        mask |= 1 << i\n    return n | mask"
    },
    {
        "id":39,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[typing.Any]], N: int = 0) -> typing.List[typing.Any]:\n    if N is None:\n        N = 0\n    result = []\n    for sub in nums:\n        if isinstance(sub, (list, tuple)) and len(sub) > N:\n            result.append(sub[N])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "id":40,
        "response":"import typing\n\ndef min_length_list(input_list: typing.List[typing.List]) -> typing.Optional[typing.List]:\n    return min(input_list, key=lambda x: len(x)) if input_list else None"
    },
    {
        "id":41,
        "response":"import typing\n\ndef check_equilateral(x: float, y: float, z: float) -> bool:\n    if x <= 0 or y <= 0 or z <= 0:\n        return False\n    return x == y == z"
    },
    {
        "id":42,
        "response":"def parallelogram_area(b, h):\n    return b * h"
    },
    {
        "id":43,
        "response":"import typing\n\ndef check_Equality(s: str) -> bool:\n    if not s:\n        return False\n    return s[0] == s[-1]"
    },
    {
        "id":44,
        "response":"import typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    if not my_list:\n        return []\n    min_val = min(my_list)\n    max_val = max(my_list)\n    range_size = max_val - min_val + 1\n    count = [0] * range_size\n    for num in my_list:\n        count[num - min_val] += 1\n    sorted_list = []\n    for i, c in enumerate(count):\n        if c:\n            sorted_list.extend([i + min_val] * c)\n    return sorted_list"
    },
    {
        "id":45,
        "response":"def tn_gp(a, n, r):\n    if n < 1:\n        return None\n    return a * (r ** (n - 1))"
    },
    {
        "id":46,
        "response":"import typing\n\ndef rev(num: int) -> bool:\n    rev_num = int(str(abs(num))[::-1])\n    return num == 2 * rev_num - 1"
    },
    {
        "id":47,
        "response":"import typing\n\ndef find_Max_Num(arr: typing.List[int], n: int) -> int:\n    if n <= 0 or not arr:\n        return 0\n    sorted_digits = sorted(arr, reverse=True)\n    result = 0\n    for digit in sorted_digits:\n        result = result * 10 + digit\n    return result"
    },
    {
        "id":48,
        "response":"def opposite_Signs(x: int, y: int) -> bool:\n    return x * y < 0"
    },
    {
        "id":49,
        "response":"def is_octagonal(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (3 * n - 2)"
    },
    {
        "id":50,
        "response":"import typing\n\ndef max_len_sub(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    if n <= 2:\n        return n\n    max_len = 2\n    cur_len = 2\n    prev_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        diff = arr[i] - arr[i - 1]\n        if diff == prev_diff:\n            cur_len += 1\n        else:\n            prev_diff = diff\n            cur_len = 2\n        if cur_len > max_len:\n            max_len = cur_len\n    return max_len"
    },
    {
        "id":51,
        "response":"import typing\n\ndef count_Substrings(s: str, n: int) -> int:\n    if n <= 0 or n > len(s):\n        return 0\n    return len(s) - n + 1"
    },
    {
        "id":52,
        "response":"import typing\n\ndef smallest_num(xs: typing.List[int]) -> int:\n    if not xs:\n        raise ValueError(\"List is empty\")\n    min_val = xs[0]\n    for num in xs[1:]:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "id":53,
        "response":"import typing\n\ndef max_difference(test_list: typing.List[typing.Tuple[float, float]]) -> float:\n    if not test_list:\n        return 0.0\n    max_diff = 0.0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "id":54,
        "response":""
    },
    {
        "id":55,
        "response":"import numbers\n\ndef recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, (list, tuple)):\n            total += recursive_list_sum(item)\n        elif isinstance(item, (int, float)):\n            total += item\n    return total"
    },
    {
        "id":56,
        "response":"def pos_count(lst):\n    return sum(1 for x in lst if isinstance(x, (int, float)) and x > 0)"
    },
    {
        "id":57,
        "response":"import math\n\ndef bell_number(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    bell = [1]\n    for i in range(1, n + 1):\n        total = 0\n        for k in range(i):\n            total += math.comb(i - 1, k) * bell[k]\n        bell.append(total)\n    return bell[n]"
    },
    {
        "id":58,
        "response":"import typing\n\ndef is_Monotonic(A: typing.List[int]) -> bool:\n    if len(A) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n        if not increasing and not decreasing:\n            return False\n    return True"
    },
    {
        "id":59,
        "response":"import typing\n\ndef is_sublist(l: typing.List, s: typing.List) -> bool:\n    if not s:\n        return True\n    n, m = len(l), len(s)\n    if m > n:\n        return False\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False"
    },
    {
        "id":60,
        "response":"import typing\n\ndef find_equal_tuple(Input: typing.List[tuple], k: int) -> bool:\n    return all(len(t) == k for t in Input)"
    },
    {
        "id":61,
        "response":"import math\n\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap \/ shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums"
    },
    {
        "id":62,
        "response":"import typing\n\ndef dif_Square(n: int) -> bool:\n    return n % 4 != 2"
    },
    {
        "id":63,
        "response":"import re\n\ndef multiple_split(text):\n    return [token for token in re.split(r'[,\\s;]+', text) if token]"
    },
    {
        "id":64,
        "response":"import typing\n\ndef is_samepatterns(colors: typing.List[str], patterns: typing.List[str]) -> bool:\n    if not colors:\n        return True\n    if not patterns:\n        return False\n    index_map = {color: i for i, color in enumerate(patterns)}\n    prev_index = -1\n    for color in colors:\n        if color not in index_map:\n            return False\n        cur_index = index_map[color]\n        if cur_index < prev_index:\n            return False\n        prev_index = cur_index\n    return True"
    },
    {
        "id":65,
        "response":"import typing\n\ndef find_tuples(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    if K == 0:\n        return []\n    return [t for t in test_list if isinstance(t, tuple) and all(isinstance(x, int) and x % K == 0 for x in t)]"
    },
    {
        "id":66,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = m if m < n else n\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":67,
        "response":"import math\n\ndef is_Diff(n):\n    n = abs(int(n))\n    sum_even = 0\n    sum_odd = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            sum_even += digit\n        else:\n            sum_odd += digit\n        n \/\/= 10\n    return abs(sum_even - sum_odd)"
    },
    {
        "id":68,
        "response":"import sys\n\ndef count_With_Odd_SetBits(n):\n    if n < 0:\n        return 0\n    def helper(x):\n        if x == 0:\n            return 0\n        p = x.bit_length() - 1\n        msb = 1 << p\n        half = msb \/\/ 2\n        remainder = x - msb\n        total_rem = remainder + 1\n        odd_rem = helper(remainder)\n        odd_part = total_rem - odd_rem\n        return half + odd_part\n    return helper(n)"
    },
    {
        "id":69,
        "response":"def word_len(s):\n    return len(s) % 2 == 1"
    },
    {
        "id":70,
        "response":"def tetrahedral_number(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (n + 1) * (n + 2) \/\/ 6"
    },
    {
        "id":71,
        "response":"import itertools\n\ndef zip_tuples(test_tup1, test_tup2):\n    return tuple(itertools.zip_longest(test_tup1, test_tup2, fillvalue=None))"
    },
    {
        "id":72,
        "response":"import math\n\ndef volume_sphere(r):\n    return (4.0 \/ 3.0) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":"import sys\n\ndef get_Char(strr: str) -> str:\n    if not strr:\n        return ''\n    total = sum(ord(ch) for ch in strr)\n    return chr(total % 0x110000)"
    },
    {
        "id":74,
        "response":"import typing\n\ndef sequence(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    a = [0, 1, 1]\n    if n < 3:\n        return a[n]\n    for i in range(3, n + 1):\n        a.append(a[a[i - 1]] + a[i - a[i - 1]])\n    return a[n]"
    },
    {
        "id":75,
        "response":"import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r"
    },
    {
        "id":76,
        "response":"def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":"def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":"import collections\n\ndef freq_count(list1):\n    return dict(collections.Counter(list1))"
    },
    {
        "id":79,
        "response":"import math\nfrom typing import Union\n\ndef closest_num(N: Union[int, float]) -> int:\n    if isinstance(N, int):\n        return N - 1\n    if N.is_integer():\n        return int(N) - 1\n    return math.floor(N)"
    },
    {
        "id":80,
        "response":"import typing\n\ndef len_log(list1: typing.List[typing.Any]) -> int:\n    if not list1:\n        return 0\n    return max(len(str(item)) for item in list1)"
    },
    {
        "id":81,
        "response":"import typing\n\ndef find_substring(strings: typing.List[str], sub_str: str) -> bool:\n    if not strings:\n        return False\n    if sub_str == \"\":\n        return True\n    return any(sub_str in s for s in strings)"
    },
    {
        "id":82,
        "response":"import typing\n\ndef is_undulating(n: int) -> bool:\n    s = str(abs(n))\n    if len(s) < 2:\n        return False\n    first, second = s[0], s[1]\n    if first == second:\n        return False\n    for i, ch in enumerate(s):\n        if i % 2 == 0 and ch != first:\n            return False\n        if i % 2 == 1 and ch != second:\n            return False\n    return True"
    },
    {
        "id":83,
        "response":"def power(a, b):\n    return a ** b"
    },
    {
        "id":84,
        "response":"import typing\n\ndef index_minimum(test_tuple: typing.Tuple[typing.Any, ...]) -> typing.Optional[int]:\n    if not test_tuple:\n        return None\n    min_idx = 0\n    min_val = test_tuple[0]\n    for i, val in enumerate(test_tuple[1:], start=1):\n        if val < min_val:\n            min_val = val\n            min_idx = i\n    return min_idx"
    },
    {
        "id":85,
        "response":"import typing\n\ndef Find_Min_Length(lst: typing.List[typing.Any]) -> int:\n    if not lst:\n        return 0\n    min_len = None\n    for sub in lst:\n        try:\n            length = len(sub)\n        except Exception:\n            continue\n        if min_len is None or length < min_len:\n            min_len = length\n    return min_len if min_len is not None else 0"
    },
    {
        "id":86,
        "response":"import math\n\ndef divisor(n):\n    if n == 0:\n        return 0\n    n = abs(n)\n    count = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            count += 2\n    if limit * limit == n:\n        count -= 1\n    return count"
    },
    {
        "id":87,
        "response":"import collections\nfrom typing import List, Any, Dict\n\ndef frequency_lists(list_of_lists: List[List[Any]]) -> Dict[Any, int]:\n    counter = collections.Counter()\n    for sublist in list_of_lists:\n        counter.update(sublist)\n    return dict(counter)"
    },
    {
        "id":88,
        "response":"import math\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = math.prod(numbers)\n    return product \/ len(numbers)"
    },
    {
        "id":89,
        "response":"def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    sign = ''\n    if n < 0:\n        sign = '-'\n        n = -n\n    bits = []\n    while n:\n        bits.append(str(n & 1))\n        n >>= 1\n    return sign + ''.join(reversed(bits))"
    },
    {
        "id":90,
        "response":""
    },
    {
        "id":91,
        "response":"import typing\n\ndef kth_element(arr: typing.List[int], n: int, k: int) -> typing.Optional[int]:\n    if k <= 0 or k > n:\n        return None\n    return arr[k - 1]"
    },
    {
        "id":92,
        "response":"import re\n\ndef snake_to_camel(word: str) -> str:\n    if not word:\n        return \"\"\n    parts = [p for p in word.split('_') if p]\n    if not parts:\n        return \"\"\n    first = parts[0].lower()\n    others = [p.title() for p in parts[1:]]\n    return first + \"\".join(others)"
    },
    {
        "id":93,
        "response":"import sys\n\ndef eulerian_num(n: int, m: int) -> int:\n    if n < 0 or m < 0:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    if m >= n:\n        return 0\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        limit = min(i, m + 1)\n        for j in range(limit):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    return dp[n][m]"
    },
    {
        "id":94,
        "response":"import typing\n\ndef sort_sublists(input_list: typing.List[typing.List[str]]) -> typing.List[typing.List[str]]:\n    for sublist in input_list:\n        sublist.sort(key=lambda s: s)\n    return input_list"
    },
    {
        "id":95,
        "response":"def count(lst):\n    return sum(1 for item in lst if item is True)"
    },
    {
        "id":96,
        "response":"from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "id":97,
        "response":"import math\n\ndef count_Hexadecimal(L: int, R: int) -> int:\n    if L > R:\n        L, R = R, L\n    first = ((L + 15) \/\/ 16) * 16\n    if first > R:\n        return 0\n    return ((R - first) \/\/ 16) + 1"
    },
    {
        "id":98,
        "response":"import heapq\n\ndef merge_sorted_list(*sorted_iterables):\n    return list(heapq.merge(*sorted_iterables))"
    },
    {
        "id":99,
        "response":"import typing\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    if not s:\n        return 0\n    l = len(s)\n    # Compute prefix function (KMP)\n    pi = [0] * l\n    for i in range(1, l):\n        j = pi[i - 1]\n        while j > 0 and s[i] != s[j]:\n            j = pi[j - 1]\n        if s[i] == s[j]:\n            j += 1\n        pi[i] = j\n    period = l - pi[-1]\n    if l % period == 0:\n        return period\n    return l"
    },
    {
        "id":100,
        "response":"import typing\n\ndef extract_missing(test_list: typing.List[int], strt_val: int, stop_val: int) -> typing.List[str]:\n    missing = []\n    prev = strt_val - 1\n    for num in test_list + [stop_val + 1]:\n        if num - prev > 1:\n            start = prev + 1\n            end = num - 1\n            if start == end:\n                missing.append(str(start))\n            else:\n                missing.append(f\"{start}->{end}\")\n        prev = num\n    return missing"
    },
    {
        "id":101,
        "response":"import typing\n\ndef common_in_nested_lists(nestedlist: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    if not nestedlist:\n        return []\n    common = set(nestedlist[0])\n    for sub in nestedlist[1:]:\n        common.intersection_update(sub)\n        if not common:\n            break\n    return list(common)"
    },
    {
        "id":102,
        "response":"import math\n\ndef perimeter(diameter, height):\n    return math.pi * diameter"
    },
    {
        "id":103,
        "response":""
    },
    {
        "id":104,
        "response":"import collections\n\ndef assign_freq(test_list):\n    freq_counter = collections.Counter(test_list)\n    return [(item, freq_counter[item]) for item in test_list]"
    },
    {
        "id":105,
        "response":"import typing\n\ndef empty_dit(list1: typing.List[dict]) -> bool:\n    return all(not d for d in list1)"
    },
    {
        "id":106,
        "response":"def tuple_to_int(nums):\n    result = 0\n    for n in nums:\n        result = result * 10 + int(n)\n    return result"
    },
    {
        "id":107,
        "response":"import typing\n\ndef list_to_float(test_list: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except (TypeError, ValueError):\n            result.append(item)\n    return result"
    },
    {
        "id":108,
        "response":"import re\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return list(string)"
    },
    {
        "id":109,
        "response":"import typing\n\ndef search(arr: typing.List[int], n: int) -> int:\n    low, high = 0, n - 1\n    while low < high:\n        mid = low + (high - low) \/\/ 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":110,
        "response":"import math\nfrom typing import List, Tuple, Optional\n\ndef max_product_tuple(list1: List[Tuple[int, ...]]) -> Optional[Tuple[Tuple[int, ...], Tuple[int, ...]]]:\n    if len(list1) < 2:\n        return None\n    products = [math.prod(t) for t in list1]\n    max_prod = None\n    result = None\n    n = len(list1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            current = products[i] * products[j]\n            if max_prod is None or current > max_prod:\n                max_prod = current\n                result = (list1[i], list1[j])\n    return result"
    },
    {
        "id":111,
        "response":"import typing\n\ndef check_triplet(A: typing.List[int], n: int, target_sum: int, count: int) -> typing.List[typing.Tuple[int, int, int]]:\n    A.sort()\n    result: typing.List[typing.Tuple[int, int, int]] = []\n    for i in range(n - 2):\n        if i > 0 and A[i] == A[i - 1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == target_sum:\n                result.append((A[i], A[left], A[right]))\n                if count and len(result) >= count:\n                    return result\n                left_val, right_val = A[left], A[right]\n                while left < right and A[left] == left_val:\n                    left += 1\n                while left < right and A[right] == right_val:\n                    right -= 1\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return result"
    },
    {
        "id":112,
        "response":"import itertools\n\ndef smartNumber(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        s = sum(int(d) for d in str(num))\n        if s != 0 and num % s == 0:\n            count += 1\n    return num"
    },
    {
        "id":113,
        "response":"import math\n\ndef _sum_proper_divisors(n: int) -> int:\n    if n < 2:\n        return 0\n    total = 1\n    sqrt_n = int(math.isqrt(n))\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            total += i\n            other = n \/\/ i\n            if other != i:\n                total += other\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n    if limit < 2:\n        return 0\n    amicable_set = set()\n    divisor_sum_cache = {}\n    for num in range(2, limit + 1):\n        if num in amicable_set:\n            continue\n        s1 = divisor_sum_cache.get(num)\n        if s1 is None:\n            s1 = _sum_proper_divisors(num)\n            divisor_sum_cache[num] = s1\n        if s1 != num and s1 <= limit:\n            s2 = divisor_sum_cache.get(s1)\n            if s2 is None:\n                s2 = _sum_proper_divisors(s1)\n                divisor_sum_cache[s1] = s2\n            if s2 == num:\n                amicable_set.add(num)\n                amicable_set.add(s1)\n    return sum(amicable_set)"
    },
    {
        "id":114,
        "response":"import math\n\ndef angle_complex(a, b):\n    if a == 0 and b == 0:\n        return 0.0\n    return math.atan2(b, a)"
    },
    {
        "id":115,
        "response":""
    },
    {
        "id":116,
        "response":"import math\n\ndef sum(a, b):\n    a, b = abs(a), abs(b)\n    g = math.gcd(a, b)\n    if g == 0:\n        return 0\n    total = 0\n    limit = int(math.isqrt(g))\n    for i in range(1, limit + 1):\n        if g % i == 0:\n            total += i\n            j = g \/\/ i\n            if j != i:\n                total += j\n    return total"
    },
    {
        "id":117,
        "response":"import typing\n\ndef multiply_int(x: int, y: int) -> int:\n    sign = -1 if (x < 0) ^ (y < 0) else 1\n    a = abs(x)\n    b = abs(y)\n    result = 0\n    while b:\n        if b & 1:\n            result += a\n        a <<= 1\n        b >>= 1\n    return sign * result"
    },
    {
        "id":118,
        "response":"def long_words(n, words):\n    return [w for w in words if isinstance(w, str) and len(w) > n]"
    },
    {
        "id":119,
        "response":"import typing\n\ndef magic_square_test(my_matrix: typing.List[typing.List[int]]) -> bool:\n    if not my_matrix or not all(isinstance(row, list) for row in my_matrix):\n        return False\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return False\n    target_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != target_sum:\n            return False\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != target_sum:\n            return False\n    if sum(my_matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n    return True"
    },
    {
        "id":120,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    counter = collections.Counter(nums)\n    max_count = max(counter.values())\n    for item in nums:\n        if counter[item] == max_count:\n            return item"
    },
    {
        "id":121,
        "response":"import re\nimport typing\nimport itertools\n\ndef reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    chars = list(str1)\n    left, right = 0, len(chars) - 1\n    while left < right:\n        while left < right and chars[left] not in vowels:\n            left += 1\n        while left < right and chars[right] not in vowels:\n            right -= 1\n        if left < right:\n            chars[left], chars[right] = chars[right], chars[left]\n            left += 1\n            right -= 1\n    return ''.join(chars)"
    },
    {
        "id":122,
        "response":""
    },
    {
        "id":123,
        "response":"from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum(filter(lambda x: x < 0, nums))"
    },
    {
        "id":124,
        "response":"import typing\n\ndef check_last(arr: typing.List[int], n: int, p: int) -> str:\n    if not arr:\n        return \"Array is empty\"\n    arr[-1] = arr[-1] + p\n    return \"Even\" if arr[-1] % 2 == 0 else \"Odd\""
    },
    {
        "id":125,
        "response":"def hexagonal_num(n):\n    return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":"import typing\n\ndef cal_electbill(units: int) -> float:\n    if units <= 0:\n        return 0.0\n    bill = 0.0\n    remaining = units\n    slabs: typing.List[typing.Tuple[int, float]] = [\n        (100, 1.5),\n        (100, 2.5),\n        (300, 4.0),\n        (float('inf'), 5.0)\n    ]\n    for limit, rate in slabs:\n        if remaining <= 0:\n            break\n        consumption = min(remaining, limit)\n        bill += consumption * rate\n        remaining -= consumption\n    return bill"
    },
    {
        "id":127,
        "response":"import typing\n\ndef zero_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    zeroes = sum(1 for x in nums if x == 0)\n    return zeroes \/ len(nums)"
    },
    {
        "id":128,
        "response":"import typing\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return isinstance(n, int) and n > 0 and n % 2 == 0"
    },
    {
        "id":129,
        "response":"import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r"
    },
    {
        "id":130,
        "response":"import collections\n\ndef extract_singly(test_list):\n    counts = collections.Counter(test_list)\n    return [item for item in test_list if counts[item] == 1]"
    },
    {
        "id":131,
        "response":"import typing\n\ndef pancake_sort(nums: typing.List[int]) -> typing.List[int]:\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_idx = 0\n        for i in range(1, curr_size):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        if max_idx != curr_size - 1:\n            if max_idx != 0:\n                nums[:max_idx + 1] = reversed(nums[:max_idx + 1])\n            nums[:curr_size] = reversed(nums[:curr_size])\n    return nums"
    },
    {
        "id":132,
        "response":"import itertools\nfrom typing import List, Any\n\ndef count_samepair(list1: List[Any], list2: List[Any], list3: List[Any]) -> int:\n    set1 = {tuple(item) if isinstance(item, list) else item for item in list1}\n    set2 = {tuple(item) if isinstance(item, list) else item for item in list2}\n    set3 = {tuple(item) if isinstance(item, list) else item for item in list3}\n    return len(set1 & set2 & set3)"
    },
    {
        "id":133,
        "response":"def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "id":134,
        "response":"import typing\n\ndef sum_Pairs(arr: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    arr.sort()\n    total = 0\n    prefix_sum = 0\n    for i, value in enumerate(arr):\n        total += value * i - prefix_sum\n        prefix_sum += value\n    return total * 2 if False else total * 2 - total  # placeholder to avoid syntax error\n\n# Correct implementation\ndef sum_Pairs(arr: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    arr.sort()\n    total = 0\n    prefix_sum = 0\n    for i, value in enumerate(arr):\n        total += value * i - prefix_sum\n        prefix_sum += value\n    return total * 2\n\n"
    },
    {
        "id":135,
        "response":"import typing\n\ndef max_Abs_Diff(arr: typing.List[int], n: int) -> int:\n    if n <= 1 or not arr:\n        return 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr[1:]:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    return max_val - min_val"
    },
    {
        "id":136,
        "response":"def ascii_value_string(str1):\n    return sum(ord(c) for c in str1)"
    },
    {
        "id":137,
        "response":"import typing\n\ndef max_path_sum(tri: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if not tri:\n        return 0\n    dp = [row[:] for row in tri]\n    for i in range(m - 2, -1, -1):\n        for j in range(len(tri[i])):\n            dp[i][j] = tri[i][j] + max(dp[i + 1][j], dp[i + 1][j + 1])\n    return dp[0][0]"
    },
    {
        "id":138,
        "response":"import typing\n\ndef sum_digits_single(x: int) -> int:\n    s = str(abs(x))\n    if len(s) < 2:\n        return x\n    max_sum = float('-inf')\n    for i in range(1, len(s)):\n        left = int(s[:i])\n        right = int(s[i:])\n        current = left + right\n        if current > max_sum:\n            max_sum = current\n    return max_sum if x >= 0 else -max_sum"
    },
    {
        "id":139,
        "response":"import typing\n\ndef longest_subseq_with_diff_one(arr: typing.List[int], n: int) -> typing.List[int]:\n    if n == 0:\n        return []\n    dp = [1] * n\n    prev = [-1] * n\n    max_len = 1\n    max_idx = 0\n    for i in range(n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n                prev[i] = j\n        if dp[i] > max_len:\n            max_len = dp[i]\n            max_idx = i\n    result = []\n    idx = max_idx\n    while idx != -1:\n        result.append(arr[idx])\n        idx = prev[idx]\n    result.reverse()\n    return result"
    },
    {
        "id":140,
        "response":"import math\n\ndef does_Contain_B(a, b, c):\n    if b == 0:\n        return c == a\n    if b > 0:\n        return c >= a and (c - a) % b == 0\n    else:\n        return c <= a and (a - c) % (-b) == 0"
    },
    {
        "id":141,
        "response":"import typing\n\ndef gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)\n\ndef is_coprime(a: int, b: int) -> bool:\n    return gcd(a, b) == 1"
    },
    {
        "id":142,
        "response":"import typing\n\ndef merge_sort(arr: typing.List[int]) -> typing.List[int]:\n    n = len(arr)\n    result = arr[:]\n    width = 1\n    while width < n:\n        for i in range(0, n, 2 * width):\n            left = i\n            mid = min(i + width, n)\n            right = min(i + 2 * width, n)\n            l = result[left:mid]\n            r = result[mid:right]\n            li = ri = 0\n            k = left\n            while li < len(l) and ri < len(r):\n                if l[li] <= r[ri]:\n                    result[k] = l[li]\n                    li += 1\n                else:\n                    result[k] = r[ri]\n                    ri += 1\n                k += 1\n            while li < len(l):\n                result[k] = l[li]\n                li += 1\n                k += 1\n            while ri < len(r):\n                result[k] = r[ri]\n                ri += 1\n                k += 1\n        width *= 2\n    return result"
    },
    {
        "id":143,
        "response":"import typing\n\ndef parabola_vertex(a: float, b: float, c: float) -> typing.Optional[typing.Tuple[float, float]]:\n    if a == 0:\n        return None\n    x = -b \/ (2 * a)\n    y = a * x * x + b * x + c\n    return (x, y)"
    },
    {
        "id":144,
        "response":"import typing\n\ndef specified_element(nums: typing.List[typing.List[typing.Any]], N: int) -> typing.List[typing.Any]:\n    return [row[N] for row in nums if isinstance(row, list) and len(row) > N]"
    },
    {
        "id":145,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Only non\u2011negative integers are supported\")\n    mask = 0\n    bit_len = n.bit_length() + 1\n    for i in range(0, bit_len, 2):\n        mask |= 1 << i\n    return n ^ mask"
    },
    {
        "id":146,
        "response":"def tuple_int_str(tuple_str):\n    return tuple(int(item) for item in tuple_str)"
    },
    {
        "id":147,
        "response":"import typing\n\ndef encode_list(list1: typing.List[typing.Any]) -> typing.List[typing.Tuple[typing.Any, int]]:\n    if not list1:\n        return []\n    result: typing.List[typing.Tuple[typing.Any, int]] = []\n    prev = list1[0]\n    count = 1\n    for item in list1[1:]:\n        if item == prev:\n            count += 1\n        else:\n            result.append((prev, count))\n            prev = item\n            count = 1\n    result.append((prev, count))\n    return result"
    },
    {
        "id":148,
        "response":"import typing\n\ndef min_Ops(arr: typing.List[int], n: int, k: int) -> bool:\n    if n == 0:\n        return k == 0\n    sorted_arr = sorted(arr)\n    median = sorted_arr[n \/\/ 2] if n % 2 == 1 else (sorted_arr[n \/\/ 2 - 1] + sorted_arr[n \/\/ 2]) \/\/ 2\n    min_ops = sum(abs(x - median) for x in arr)\n    return k >= min_ops and (k - min_ops) % 2 == 0"
    },
    {
        "id":149,
        "response":"import calendar\n\ndef month_season(month: int, days: int) -> str:\n    if month < 1 or month > 12:\n        raise ValueError(\"Invalid month\")\n    if days < 1 or days > calendar.monthrange(2020, month)[1]:\n        raise ValueError(\"Invalid day\")\n    if month in (12, 1, 2):\n        return \"Winter\"\n    if month in (3, 4, 5):\n        return \"Spring\"\n    if month in (6, 7, 8):\n        return \"Summer\"\n    return \"Autumn\""
    },
    {
        "id":150,
        "response":"import typing\n\ndef _extended_gcd(a: int, b: int) -> typing.Tuple[int, int, int]:\n    if b == 0:\n        return a, 1, 0\n    g, x1, y1 = _extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a \/\/ b) * y1\n    return g, x, y\n\ndef solution(a: int, b: int, n: int) -> typing.Optional[typing.Tuple[int, int]]:\n    if a == 0 and b == 0:\n        return (0, 0) if n == 0 else None\n    if a == 0:\n        if n % b == 0:\n            return (0, n \/\/ b)\n        return None\n    if b == 0:\n        if n % a == 0:\n            return (n \/\/ a, 0)\n        return None\n    g, x0, y0 = _extended_gcd(abs(a), abs(b))\n    if n % g != 0:\n        return None\n    factor = n \/\/ g\n    x = x0 * factor * (1 if a > 0 else -1)\n    y = y0 * factor * (1 if b > 0 else -1)\n    return (x, y)"
    },
    {
        "id":151,
        "response":"from typing import List\n\ndef remove_elements(list1: List, list2: List) -> List:\n    set2 = set(list2)\n    return [item for item in list1 if item not in set2]"
    },
    {
        "id":152,
        "response":"import typing\n\ndef sum_series(n: int) -> int:\n    if n <= 0:\n        return 0\n    if n % 2:\n        m = (n + 1) \/\/ 2\n        return m * m\n    else:\n        m = n \/\/ 2\n        return m * (m + 1)"
    },
    {
        "id":153,
        "response":"import math\n\ndef area_polygon(s, l):\n    if s < 3 or l <= 0:\n        return 0.0\n    return (s * l * l) \/ (4 * math.tan(math.pi \/ s))"
    },
    {
        "id":154,
        "response":"import math\n\ndef divSum(n):\n    if n <= 0:\n        return False\n    total = 1 if n > 1 else 0\n    limit = int(math.isqrt(n))\n    for i in range(2, limit + 1):\n        if n % i == 0:\n            total += i\n            other = n \/\/ i\n            if other != i:\n                total += other\n    return total == n"
    },
    {
        "id":155,
        "response":"import string\n\ndef count_char_position(str1):\n    alphabet = {ch: idx + 1 for idx, ch in enumerate(string.ascii_lowercase)}\n    count = 0\n    for i, ch in enumerate(str1, start=1):\n        lower = ch.lower()\n        if lower in alphabet and alphabet[lower] == i:\n            count += 1\n    return count"
    },
    {
        "id":156,
        "response":"import typing\n\ndef find_even_Pair(A: typing.List[int], N: int) -> int:\n    even_count = 0\n    odd_count = 0\n    for i in range(N):\n        if A[i] & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n    return even_count * (even_count - 1) \/\/ 2 + odd_count * (odd_count - 1) \/\/ 2"
    },
    {
        "id":157,
        "response":"def next_Power_Of_2(n):\n    if n <= 1:\n        return 1\n    return 1 << (n - 1).bit_length()"
    },
    {
        "id":158,
        "response":"import typing\n\ndef frequency(a: typing.List[int], x: int) -> int:\n    count = 0\n    for v in a:\n        if v == x:\n            count += 1\n    return count"
    },
    {
        "id":159,
        "response":"import typing\n\ndef get_pell(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b"
    },
    {
        "id":160,
        "response":"import typing\n\ndef sum_range_list(list1: typing.List[float], m: int, n: int) -> float:\n    if not list1:\n        return 0\n    length = len(list1)\n    start = max(0, m)\n    end = min(n, length - 1)\n    if start > end:\n        return 0\n    return sum(list1[start:end + 1])"
    },
    {
        "id":161,
        "response":"import typing\n\ndef perimeter_pentagon(a: typing.Union[int, float]) -> typing.Union[int, float]:\n    return 5 * a"
    },
    {
        "id":162,
        "response":"def count_occurance(s):\n    return s.count('std')"
    },
    {
        "id":163,
        "response":"import re\n\ndef remove_splchar(text):\n    if not isinstance(text, str):\n        return ''\n    return re.sub(r'[^A-Za-z0-9]', '', text)"
    },
    {
        "id":164,
        "response":"import collections\n\ndef group_keyvalue(pairs):\n    grouped = collections.defaultdict(list)\n    for key, value in pairs:\n        grouped[key].append(value)\n    return [{key: values} for key, values in grouped.items()]"
    },
    {
        "id":165,
        "response":"import typing\n\ndef is_valid_parenthese(str1: str) -> bool:\n    stack = []\n    for ch in str1:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n        else:\n            return False\n    return not stack"
    },
    {
        "id":166,
        "response":"def perimeter_triangle(a, b, c):\n    return a + b + c"
    },
    {
        "id":167,
        "response":"import typing\n\ndef answer(L: int, R: int) -> typing.Optional[typing.Tuple[int, int]]:\n    if L <= 0 or R <= 0 or L > R:\n        return None\n    if 2 * L <= R:\n        return (L, 2 * L)\n    return None"
    },
    {
        "id":168,
        "response":"import typing\n\ndef string_literals(patterns: typing.Iterable[str], text: str) -> list:\n    found = []\n    for pat in patterns:\n        if pat and pat in text:\n            found.append(pat)\n    return found"
    },
    {
        "id":169,
        "response":"import typing\n\ndef is_num_keith(x: int) -> bool:\n    if x < 10:\n        return False\n    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    seq = digits[:]\n    while True:\n        next_val = sum(seq[-n:])\n        if next_val == x:\n            return True\n        if next_val > x:\n            return False\n        seq.append(next_val)"
    },
    {
        "id":170,
        "response":"import math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    R = 6371.0\n    lat1 = math.radians(slat)\n    lon1 = math.radians(slon)\n    lat2 = math.radians(elat)\n    lon2 = math.radians(elon)\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = math.sin(dlat \/ 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon \/ 2) ** 2\n    a = min(1.0, max(0.0, a))\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c"
    },
    {
        "id":171,
        "response":"import typing\n\ndef common_prefix_util(str1: str, str2: str) -> str:\n    i = 0\n    min_len = min(len(str1), len(str2))\n    while i < min_len and str1[i] == str2[i]:\n        i += 1\n    return str1[:i]\n\ndef longest_common_prefix(strings: typing.List[str]) -> str:\n    if not strings:\n        return \"\"\n    prefix = strings[0]\n    for s in strings[1:]:\n        prefix = common_prefix_util(prefix, s)\n        if not prefix:\n            break\n    return prefix"
    },
    {
        "id":172,
        "response":"import re\n\ndef find_character(string):\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    digits = re.findall(r'\\d', string)\n    special = re.findall(r'[^a-zA-Z0-9]', string)\n    return {\n        'uppercase': uppercase,\n        'lowercase': lowercase,\n        'digits': digits,\n        'special': special\n    }"
    },
    {
        "id":173,
        "response":"import typing\n\ndef count_pairs(arr: typing.List[int], n: int, k: int) -> int:\n    if n <= 1:\n        return 0\n    values = set(arr)\n    count = 0\n    if k == 0:\n        # count pairs of identical elements, each distinct value contributes C(freq,2)\n        freq = {}\n        for num in arr:\n            freq[num] = freq.get(num, 0) + 1\n        for v in freq.values():\n            if v > 1:\n                count += v * (v - 1) \/\/ 2\n        return count\n    for num in values:\n        if num + k in values:\n            count += 1\n    return count"
    },
    {
        "id":174,
        "response":"import typing\n\ndef greater_specificnum(lst: typing.List[typing.Any], num: typing.Any) -> typing.List[typing.Any]:\n    result = []\n    for x in lst:\n        try:\n            if x > num:\n                result.append(x)\n        except Exception:\n            continue\n    return result"
    },
    {
        "id":175,
        "response":"import typing\n\ndef parabola_focus(a: float, b: float, c: float) -> typing.Tuple[float, float]:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero for a parabola.\")\n    h = -b \/ (2 * a)\n    k = c - (b ** 2) \/ (4 * a)\n    focus_y = k + 1 \/ (4 * a)\n    return (h, focus_y)"
    },
    {
        "id":176,
        "response":"import re\n\ndef check_literals(text, patterns):\n    if not isinstance(text, str) or not isinstance(patterns, (list, tuple, set)):\n        return {}\n    result = {}\n    for pat in patterns:\n        if not isinstance(pat, str) or pat == \"\":\n            continue\n        escaped = re.escape(pat)\n        matches = [m.group(0) for m in re.finditer(escaped, text)]\n        if matches:\n            result[pat] = matches\n    return result"
    },
    {
        "id":177,
        "response":"import typing\n\ndef longest_common_subsequence(X: typing.Sequence, Y: typing.Sequence, m: int, n: int) -> typing.Sequence:\n    if m == 0 or n == 0:\n        return type(X)() if isinstance(X, (list, tuple)) else \"\"\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        xi = X[i - 1]\n        for j in range(1, n + 1):\n            if xi == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] if dp[i - 1][j] >= dp[i][j - 1] else dp[i][j - 1]\n    i, j = m, n\n    lcs_rev = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs_rev.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] >= dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    lcs_rev.reverse()\n    if isinstance(X, str):\n        return \"\".join(lcs_rev)\n    elif isinstance(X, list):\n        return lcs_rev\n    elif isinstance(X, tuple):\n        return tuple(lcs_rev)\n    else:\n        return type(X)(lcs_rev)"
    },
    {
        "id":178,
        "response":"import math\n\ndef prod_Square(n):\n    if n < 0:\n        return False\n    r = math.isqrt(n)\n    return r * r == n"
    },
    {
        "id":179,
        "response":"import typing\n\ndef first_Missing_Positive(arr: typing.List[int], n: int) -> int:\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            correct_idx = arr[i] - 1\n            arr[i], arr[correct_idx] = arr[correct_idx], arr[i]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1"
    },
    {
        "id":180,
        "response":"import math\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    side = abs(x2 - x1)\n    if side <= 1:\n        return 0\n    return (side - 1) * (side - 1)"
    },
    {
        "id":181,
        "response":"import re\n\ndef check_monthnumber(monthname3):\n    if not isinstance(monthname3, str):\n        return False\n    month = monthname3.strip().lower()\n    return month in {\"april\", \"june\", \"september\", \"november\"}"
    },
    {
        "id":182,
        "response":"import re\n\ndef check_String(s):\n    has_letter = any(c.isalpha() for c in s)\n    has_digit = any(c.isdigit() for c in s)\n    return has_letter and has_digit"
    },
    {
        "id":183,
        "response":"def remove_tuple(test_tup):\n    return tuple(dict.fromkeys(test_tup))"
    },
    {
        "id":184,
        "response":"import typing\n\ndef octal_To_Decimal(n: typing.Union[int, str]) -> int:\n    s = str(n).strip()\n    sign = -1 if s.startswith('-') else 1\n    if s[0] in '+-':\n        s = s[1:]\n    result = 0\n    for ch in s:\n        digit = ord(ch) - 48\n        result = result * 8 + digit\n    return sign * result"
    },
    {
        "id":185,
        "response":"import typing\n\ndef first(arr: typing.List[int], x: int, n: int) -> int:\n    low, high = 0, min(n, len(arr)) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "id":186,
        "response":"def remove_tuples(test_list, K):\n    return [item for item in test_list if not (isinstance(item, tuple) and len(item) == K)]"
    },
    {
        "id":187,
        "response":"import typing\n\ndef find_exponentio(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(a ** b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":188,
        "response":"import math\n\ndef largest_triangle(r, _=None):\n    return (3 * math.sqrt(3) \/ 4) * r * r"
    },
    {
        "id":189,
        "response":"def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":190,
        "response":"import typing\n\ndef position_max(list1):\n    if not list1:\n        return []\n    max_val = max(list1)\n    return [i for i, v in enumerate(list1) if v == max_val]"
    },
    {
        "id":191,
        "response":"def chkList(lst):\n    return len(set(lst)) <= 1"
    },
    {
        "id":192,
        "response":"import re\nfrom typing import *\n\ndef remove_even(str1: str) -> str:\n    return ''.join([c for i, c in enumerate(str1) if i % 2 != 0])"
    },
    {
        "id":193,
        "response":"def hamming_Distance(n1, n2):\n    return bin(n1 ^ n2).count('1')"
    },
    {
        "id":194,
        "response":"def count(s, c):\n    return s.count(c)"
    },
    {
        "id":195,
        "response":"import typing\n\ndef inversion_elements(test_tup: typing.Tuple[float, ...]) -> typing.Tuple[typing.Optional[float], ...]:\n    return tuple((1 \/ x) if x != 0 else None for x in test_tup)"
    },
    {
        "id":196,
        "response":"import typing\n\ndef concatenate_elements(test_tup: typing.Tuple[typing.Any, ...]) -> typing.Tuple[str, ...]:\n    result = []\n    i = 0\n    n = len(test_tup)\n    while i < n:\n        if i + 1 < n:\n            result.append(str(test_tup[i]) + str(test_tup[i + 1]))\n            i += 2\n        else:\n            result.append(str(test_tup[i]))\n            i += 1\n    return tuple(result)"
    },
    {
        "id":197,
        "response":"import typing\n\ndef find_longest_repeating_subseq(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        ch_i = s[i - 1]\n        for j in range(1, n + 1):\n            if ch_i == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] if dp[i - 1][j] >= dp[i][j - 1] else dp[i][j - 1]\n    return dp[n][n]"
    },
    {
        "id":198,
        "response":"import re\n\ndef is_decimal(num):\n    s = str(num).strip()\n    return bool(re.fullmatch(r'[-+]?\\d+\\.\\d{2}', s))"
    },
    {
        "id":199,
        "response":"import heapq\n\ndef heap_replace(heap, a):\n    if not heap:\n        heapq.heappush(heap, a)\n    else:\n        heapq.heapreplace(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":"import re\n\ndef is_allowed_specific_char(string: str) -> bool:\n    allowed_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    pattern = f\"^[{re.escape(allowed_chars)}]*$\"\n    return bool(re.fullmatch(pattern, string))"
    },
    {
        "id":201,
        "response":""
    },
    {
        "id":202,
        "response":"import math\n\ndef fourth_Power_Sum(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 4\n    return total"
    },
    {
        "id":203,
        "response":"import typing\n\ndef concatenate_strings(test_tup1: typing.Tuple[str, ...], test_tup2: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return tuple(test_tup1) + tuple(test_tup2)"
    },
    {
        "id":204,
        "response":"import math\n\ndef degree_radian(radian):\n    return radian * 180.0 \/ math.pi"
    },
    {
        "id":205,
        "response":"import typing\n\ndef decode_list(alist: typing.List) -> typing.List:\n    result: typing.List = []\n    i = 0\n    n = len(alist)\n    while i + 1 < n:\n        value = alist[i]\n        count = alist[i + 1]\n        if isinstance(count, int) and count > 0:\n            result.extend([value] * count)\n        i += 2\n    return result"
    },
    {
        "id":206,
        "response":"import collections\n\ndef _flatten(nested):\n    for element in nested:\n        if isinstance(element, list):\n            yield from _flatten(element)\n        else:\n            yield element\n\ndef check_subset_list(list1, list2):\n    counter1 = collections.Counter(_flatten(list1))\n    counter2 = collections.Counter(_flatten(list2))\n    return not (counter1 - counter2)"
    },
    {
        "id":207,
        "response":"import typing\n\ndef first_Repeated_Char(s: str) -> typing.Optional[str]:\n    seen = set()\n    for ch in s:\n        if ch in seen:\n            return ch\n        seen.add(ch)\n    return None"
    },
    {
        "id":208,
        "response":"import math\n\ndef min_Operations(A, B):\n    return abs(A - B)"
    },
    {
        "id":209,
        "response":"import typing\n\ndef extract_min_max(test_tup: tuple, K: int) -> tuple:\n    if K <= 0:\n        return ((), ())\n    n = len(test_tup)\n    if K > n:\n        K = n\n    sorted_vals = sorted(test_tup)\n    min_k = tuple(sorted_vals[:K])\n    max_k = tuple(sorted_vals[-K:][::-1])\n    return (min_k, max_k)"
    },
    {
        "id":210,
        "response":"import typing\n\ndef replace_max_specialchar(text: str, n: int) -> str:\n    counts = {' ': 0, ',': 0, '.': 0}\n    for ch in text:\n        if ch in counts:\n            counts[ch] += 1\n    max_char = max(counts, key=lambda k: counts[k])\n    if counts[max_char] == 0 or n <= 0:\n        return text\n    result = []\n    replaced = 0\n    for ch in text:\n        if ch == max_char and replaced < n:\n            result.append(':')\n            replaced += 1\n        else:\n            result.append(ch)\n    return ''.join(result)"
    },
    {
        "id":211,
        "response":"def first_even(nums):\n    for n in nums:\n        if n % 2 == 0:\n            return n\n    return None"
    },
    {
        "id":212,
        "response":"import typing\n\ndef check_type(test_tuple: tuple) -> bool:\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    if len(test_tuple) <= 1:\n        return True\n    first_type = type(test_tuple[0])\n    for item in test_tuple[1:]:\n        if type(item) is not first_type:\n            return False\n    return True"
    },
    {
        "id":213,
        "response":"import bisect\n\ndef is_majority(arr, n, x):\n    if n == 0:\n        return False\n    left = bisect.bisect_left(arr, x)\n    right = bisect.bisect_right(arr, x)\n    return (right - left) > n \/\/ 2"
    },
    {
        "id":214,
        "response":"import typing\n\ndef count_Set_Bits(n: int) -> int:\n    if n < 0:\n        n = n & ((1 << (n.bit_length() + 1)) - 1)\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count"
    },
    {
        "id":215,
        "response":"import typing\n\ndef find_Min(arr: typing.List[int], low: int, high: int) -> typing.Optional[int]:\n    if not arr or low > high:\n        return None\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]"
    },
    {
        "id":216,
        "response":"def odd_values_string(s: str) -> str:\n    return s[::2]"
    },
    {
        "id":217,
        "response":"def min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "id":218,
        "response":"import typing\n\ndef all_Bits_Unset_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    if l < 0 or r < l:\n        raise ValueError(\"Invalid bit range\")\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return (n & mask) == 0"
    },
    {
        "id":219,
        "response":"import typing\n\ndef re_arrange_array(arr: typing.List[int], n: int) -> typing.List[int]:\n    left, right = 0, n - 1\n    while left < right:\n        while left < n and arr[left] < 0:\n            left += 1\n        while right >= 0 and arr[right] >= 0:\n            right -= 1\n        if left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    return arr"
    },
    {
        "id":220,
        "response":"import re\n\ndef replace_blank(str1, char):\n    return str1.replace(' ', str(char))"
    },
    {
        "id":221,
        "response":"import typing\n\ndef max_sum(tri: typing.List[typing.List[int]], n: int) -> int:\n    max_val = -float('inf')\n    for i in range(n):\n        for j in range(n):\n            cur_sum = 0\n            max_len = min(n - i, n - j)\n            for k in range(max_len):\n                row = i + k\n                for col in range(j, j + k + 1):\n                    cur_sum += tri[row][col]\n                if cur_sum > max_val:\n                    max_val = cur_sum\n    return max_val"
    },
    {
        "id":222,
        "response":"import heapq\n\ndef larg_nnum(list1, n):\n    if n <= 0:\n        return []\n    return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":"import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h"
    },
    {
        "id":224,
        "response":"def volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":"import typing\n\ndef even_bit_set_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n    mask = 0\n    limit = n.bit_length() + 2\n    for i in range(0, limit, 2):\n        mask |= 1 << i\n    return n | mask"
    },
    {
        "id":226,
        "response":"import math\n\ndef No_of_Triangle(N, K):\n    if N <= 0 or K <= 0:\n        return 0\n    return N * K * (N + K) \/\/ 2"
    },
    {
        "id":227,
        "response":"import collections\n\ndef check_occurences(test_list):\n    if not test_list:\n        return []\n    time_counts = collections.Counter(item[0] for item in test_list if item)\n    duplicate_times = {time for time, cnt in time_counts.items() if cnt > 1}\n    return [item for item in test_list if item and item[0] in duplicate_times]"
    },
    {
        "id":228,
        "response":"import typing\n\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) \/\/ 2"
    },
    {
        "id":229,
        "response":"import sys\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    if n <= 0:\n        return 1\n    if m <= 0:\n        return 0\n    dp_prev = [0] * (m + 1)\n    for v in range(1, m + 1):\n        dp_prev[v] = 1\n    for _ in range(2, n + 1):\n        prefix = [0] * (m + 1)\n        s = 0\n        for v in range(1, m + 1):\n            s += dp_prev[v]\n            prefix[v] = s\n        dp_curr = [0] * (m + 1)\n        for v in range(1, m + 1):\n            limit = v \/\/ 2\n            dp_curr[v] = prefix[limit]\n        dp_prev = dp_curr\n    return sum(dp_prev)"
    },
    {
        "id":230,
        "response":"import typing\n\ndef replace_list(list1: typing.List, list2: typing.List) -> typing.List:\n    if not list1:\n        return list2.copy()\n    return list1[:-1] + list2.copy()\n"
    },
    {
        "id":231,
        "response":"import typing\n\ndef array_3d(m: int, n: int, o: int) -> typing.List[typing.List[typing.List[str]]]:\n    if m <= 0 or n <= 0 or o <= 0:\n        return []\n    return [[['*' for _ in range(o)] for _ in range(n)] for _ in range(m)]"
    },
    {
        "id":232,
        "response":""
    },
    {
        "id":233,
        "response":"import collections\n\ndef sort_on_occurence(lst):\n    freq = collections.Counter(item[0] for item in lst)\n    return sorted(lst, key=lambda x: (-freq[x[0]], lst.index(x)))"
    },
    {
        "id":234,
        "response":"import math\n\ndef next_Perfect_Square(N):\n    if N < 0:\n        return 0\n    r = math.isqrt(N)\n    if r * r > N:\n        return r * r\n    return (r + 1) * (r + 1)"
    },
    {
        "id":235,
        "response":"import typing\n\ndef max_sum(arr: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    inc = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i] and inc[j] + arr[i] > inc[i]:\n                inc[i] = inc[j] + arr[i]\n    dec = arr[:]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i] and dec[j] + arr[i] > dec[i]:\n                dec[i] = dec[j] + arr[i]\n    max_total = 0\n    for i in range(n):\n        total = inc[i] + dec[i] - arr[i]\n        if total > max_total:\n            max_total = total\n    return max_total"
    },
    {
        "id":236,
        "response":"import math\n\ndef babylonian_squareroot(number, tolerance=1e-10, max_iterations=1000):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    if number == 0:\n        return 0.0\n    guess = number \/ 2.0 if number >= 1 else 1.0\n    for _ in range(max_iterations):\n        next_guess = (guess + number \/ guess) \/ 2.0\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        guess = next_guess\n    return guess"
    },
    {
        "id":237,
        "response":"import typing\n\ndef lps(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return \"\"\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j]:\n                if cl == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = dp[i + 1][j] if dp[i + 1][j] >= dp[i][j - 1] else dp[i][j - 1]\n    i, j = 0, n - 1\n    left = []\n    right = []\n    while i <= j:\n        if s[i] == s[j]:\n            left.append(s[i])\n            if i != j:\n                right.append(s[j])\n            i += 1\n            j -= 1\n        elif dp[i + 1][j] >= dp[i][j - 1]:\n            i += 1\n        else:\n            j -= 1\n    return \"\".join(left + right[::-1])"
    },
    {
        "id":238,
        "response":"import typing\n\ndef harmonic_sum(n: int) -> float:\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 \/ i\n    return total"
    },
    {
        "id":239,
        "response":"import typing\n\ndef intersection_array(array_nums1: typing.List[int], array_nums2: typing.List[int]) -> typing.List[int]:\n    return list(set(filter(lambda x: x in array_nums2, array_nums1)))"
    },
    {
        "id":240,
        "response":"import typing\n\ndef count_X(tup: tuple, x: typing.Any) -> int:\n    return tup.count(x)"
    },
    {
        "id":241,
        "response":"import typing\n\ndef insert_element(lst: typing.List[typing.Any], element: typing.Any) -> typing.List[typing.Any]:\n    result: typing.List[typing.Any] = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "id":242,
        "response":"import typing\n\ndef convert(numbers: typing.Iterable[complex]) -> typing.List[typing.Tuple[float, float]]:\n    return [(c.real, c.imag) for c in numbers]"
    },
    {
        "id":243,
        "response":"import typing\n\ndef count_integer(list1: typing.List[typing.Any]) -> int:\n    count = 0\n    for item in list1:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count"
    },
    {
        "id":244,
        "response":"import re\n\ndef words_ae(text):\n    return re.findall(r'\\b[aeAE]\\w*', text)"
    },
    {
        "id":245,
        "response":"import itertools\n\ndef combinations_colors(l, n):\n    if n < 0:\n        return []\n    return [list(c) for c in itertools.combinations_with_replacement(l, n)]"
    },
    {
        "id":246,
        "response":"import math\n\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = bytearray(b'\\x01') * n\n    sieve[0:2] = b'\\x00\\x00'\n    limit = int(math.isqrt(n - 1)) + 1\n    for p in range(2, limit):\n        if sieve[p]:\n            step = p\n            start = p * p\n            sieve[start:n:step] = b'\\x00' * ((n - 1 - start) \/\/ step + 1)\n    return sum(sieve)"
    },
    {
        "id":247,
        "response":"def swap_numbers(a, b):\n    return b, a"
    },
    {
        "id":248,
        "response":"from typing import List\n\ndef count_odd(array_nums: List[int]) -> int:\n    return sum(map(lambda x: x % 2 != 0, array_nums))"
    },
    {
        "id":249,
        "response":"import typing\n\ndef maximize_elements(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":250,
        "response":"import math\n\ndef _is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    small_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for p in small_primes:\n        if num % p == 0:\n            return num == p\n    d = num - 1\n    s = 0\n    while d % 2 == 0:\n        d \/\/= 2\n        s += 1\n    # Deterministic bases for 64-bit integers\n    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:\n        if a % num == 0:\n            continue\n        x = pow(a, d, num)\n        if x == 1 or x == num - 1:\n            continue\n        for _ in range(s - 1):\n            x = (x * x) % num\n            if x == num - 1:\n                break\n        else:\n            return False\n    return True\n\ndef newman_prime(n: int) -> int:\n    if n <= 0:\n        return None\n    count = 0\n    a, b = 1, 1  # S(0), S(1)\n    index = 0\n    while True:\n        if index == 0:\n            val = a\n        elif index == 1:\n            val = b\n        else:\n            a, b = b, 2 * b + a\n            val = b\n        if _is_prime(val):\n            count += 1\n            if count == n:\n                return val\n        index += 1"
    },
    {
        "id":251,
        "response":"import typing\n\ndef division_elements(test_tup1: typing.Tuple[float, ...], test_tup2: typing.Tuple[float, ...]) -> typing.Tuple[typing.Optional[float], ...]:\n    length = min(len(test_tup1), len(test_tup2))\n    result = []\n    for i in range(length):\n        divisor = test_tup2[i]\n        if divisor == 0:\n            result.append(None)\n        else:\n            result.append(test_tup1[i] \/ divisor)\n    return tuple(result)"
    },
    {
        "id":252,
        "response":"import typing\n\ndef split_two_parts(lst: typing.List[typing.Any], L: int) -> typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]:\n    if L < 0:\n        L = 0\n    first = lst[:L]\n    second = lst[L:]\n    return first, second"
    },
    {
        "id":253,
        "response":"def merge_dict(d1, d2):\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        raise TypeError(\"Both arguments must be dictionaries\")\n    d1.update(d2)\n    return d1"
    },
    {
        "id":254,
        "response":"import typing\n\ndef dog_age(h_age: float) -> float:\n    if h_age <= 0:\n        return 0.0\n    if h_age <= 2:\n        return h_age * 10.5\n    return 21.0 + (h_age - 2) * 4.0"
    },
    {
        "id":255,
        "response":"import typing\n\ndef list_split(S: typing.List[typing.Any], step: int) -> typing.List[typing.List[typing.Any]]:\n    if step <= 0:\n        raise ValueError(\"step must be a positive integer\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i + step])\n    return result"
    },
    {
        "id":256,
        "response":"import typing\n\ndef lateralsurface_cube(l: float) -> float:\n    return 4 * (l ** 2)"
    },
    {
        "id":257,
        "response":"def square_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2 * k - 1) ** 2 for k in range(1, n + 1))"
    },
    {
        "id":258,
        "response":"import typing\n\ndef find_star_num(n: int) -> int:\n    if n < 1:\n        return 0\n    return 6 * n * (n - 1) + 1"
    },
    {
        "id":259,
        "response":"import typing\n\ndef ascii_value(k: str) -> int:\n    if not isinstance(k, str) or len(k) != 1:\n        raise ValueError(\"Input must be a single character string.\")\n    return ord(k)"
    },
    {
        "id":260,
        "response":"import typing\n\ndef sum_even_and_even_index(arr: typing.List[int], n: int) -> int:\n    total = 0\n    length = min(n, len(arr))\n    for i in range(0, length, 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "id":261,
        "response":"import typing\n\ndef even_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 32 * (n * n * (n + 1) * (n + 1) * (2 * n * n + 2 * n - 1) \/\/ 12)"
    },
    {
        "id":262,
        "response":"import typing\n\ndef rear_extract(test_list: typing.List[tuple]) -> typing.List:\n    return [t[-1] if t else None for t in test_list]"
    },
    {
        "id":263,
        "response":"import typing\n\ndef substract_elements(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    length = min(len(test_tup1), len(test_tup2))\n    result = tuple(test_tup1[i] - test_tup2[i] for i in range(length))\n    return result"
    },
    {
        "id":264,
        "response":"import math\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non\u2011negative integer\")\n    if n == 0:\n        return 1\n    return 1 << (n - 1)"
    },
    {
        "id":265,
        "response":"import sys\n\ndef get_Position(a, n, m):\n    if n <= 0 or m <= 0:\n        return -1\n    result = 0\n    for i in range(1, n + 1):\n        result = (result + m) % i\n    return result + 1"
    },
    {
        "id":266,
        "response":"import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r * r * h"
    },
    {
        "id":267,
        "response":"import typing\n\ndef dict_filter(d: typing.Dict[typing.Any, typing.Any], n: typing.Any) -> typing.Dict[typing.Any, typing.Any]:\n    return {k: v for k, v in d.items() if isinstance(v, (int, float)) and v > n}"
    },
    {
        "id":268,
        "response":"import typing\n\ndef count_first_elements(test_tup: tuple) -> tuple:\n    return tuple(range(len(test_tup)))"
    },
    {
        "id":269,
        "response":"import typing\n\ndef is_num_decagonal(n: int) -> int:\n    if n < 1:\n        return 0\n    return n * (4 * n - 3)"
    },
    {
        "id":270,
        "response":"import typing\n\ndef sequential_search(dlist, item):\n    for idx, val in enumerate(dlist):\n        if val == item:\n            return idx\n    return -1"
    },
    {
        "id":271,
        "response":"import typing\n\ndef all_unique(test_list: typing.List[typing.Any]) -> bool:\n    seen = []\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.append(item)\n    return True"
    },
    {
        "id":272,
        "response":"import itertools\n\ndef sub_list(nums1, nums2):\n    return list(map(lambda x, y: x - y, nums1, nums2))"
    },
    {
        "id":273,
        "response":"import re\nfrom collections import Counter\n\ndef validate(n):\n    s = str(abs(n))\n    cnt = Counter(s)\n    for digit_char, freq in cnt.items():\n        digit = int(digit_char)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "id":274,
        "response":"def check_element(lst, element):\n    return all(item == element for item in lst)"
    },
    {
        "id":275,
        "response":"import re\n\ndef text_match_two_three(text):\n    return bool(re.search(r\"ab{2,3}\", text))"
    },
    {
        "id":276,
        "response":"import typing\n\ndef max_sub_array_sum_repeated(a: typing.List[int], n: int, k: int) -> int:\n    if n == 0 or k == 0:\n        return 0\n\n    # Kadane's algorithm for one copy\n    max_ending_here = max_so_far = a[0]\n    for x in a[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    total_sum = sum(a)\n\n    # Max prefix sum\n    cur = 0\n    max_prefix = a[0]\n    for x in a:\n        cur += x\n        if cur > max_prefix:\n            max_prefix = cur\n\n    # Max suffix sum\n    cur = 0\n    max_suffix = a[-1]\n    for x in reversed(a):\n        cur += x\n        if cur > max_suffix:\n            max_suffix = cur\n\n    if k == 1:\n        return max_so_far\n\n    if total_sum > 0:\n        return max(max_so_far, max_suffix + max_prefix + (k - 2) * total_sum)\n    else:\n        return max(max_so_far, max_suffix + max_prefix)"
    },
    {
        "id":277,
        "response":""
    },
    {
        "id":278,
        "response":""
    },
    {
        "id":279,
        "response":"import typing\n\ndef odd_Days(N: int) -> int:\n    if N <= 0:\n        return 0\n    years = N % 400\n    odd = 0\n    for year in range(1, years + 1):\n        if (year % 400 == 0) or (year % 4 == 0 and year % 100 != 0):\n            odd += 2  # 366 % 7 = 2\n        else:\n            odd += 1  # 365 % 7 = 1\n    return odd % 7"
    },
    {
        "id":280,
        "response":"import typing\n\ndef max_length(list1: typing.List[typing.List]) -> typing.Optional[typing.List]:\n    if not list1:\n        return None\n    return max(list1, key=len)"
    },
    {
        "id":281,
        "response":"import typing\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n <= 0 or k <= 0:\n        return 0\n    if k == 1:\n        return 1 if n <= 2 else 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    prev2 = k\n    prev1 = k * k\n    for _ in range(3, n + 1):\n        cur = (prev1 + prev2) * (k - 1)\n        prev2, prev1 = prev1, cur\n    return prev1"
    },
    {
        "id":282,
        "response":""
    },
    {
        "id":283,
        "response":"import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w * w + h * h)"
    },
    {
        "id":284,
        "response":"import typing\n\ndef max_val(listval: typing.List[int]) -> typing.Optional[int]:\n    if not listval:\n        return None\n    max_value = listval[0]\n    for num in listval[1:]:\n        if num > max_value:\n            max_value = num\n    return max_value"
    },
    {
        "id":285,
        "response":"import math\n\ndef sum_div(number):\n    if number <= 0:\n        return 0\n    total = 0\n    root = int(math.isqrt(number))\n    for i in range(1, root + 1):\n        if number % i == 0:\n            total += i\n            j = number \/\/ i\n            if j != i:\n                total += j\n    return total"
    },
    {
        "id":286,
        "response":"import typing\n\ndef get_Inv_Count(arr: typing.List[int], n: int) -> int:\n    temp = [0] * n\n    def merge_sort(l: int, r: int) -> int:\n        if r - l <= 1:\n            return 0\n        mid = (l + r) \/\/ 2\n        inv = merge_sort(l, mid) + merge_sort(mid, r)\n        i, j, k = l, mid, l\n        while i < mid and j < r:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                inv += mid - i\n                j += 1\n            k += 1\n        while i < mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j < r:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        arr[l:r] = temp[l:r]\n        return inv\n    return merge_sort(0, n)"
    },
    {
        "id":287,
        "response":"import typing\n\ndef flatten_list(list1):\n    result = []\n    stack = [list1]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, list):\n            for item in reversed(current):\n                stack.append(item)\n        else:\n            result.append(current)\n    result.reverse()\n    return result"
    },
    {
        "id":288,
        "response":"import typing\n\ndef intersection_nested_lists(l1: typing.List[typing.Any], l2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result = []\n    for item in l1:\n        if isinstance(item, list):\n            for other in l2:\n                if isinstance(other, list) and item == other:\n                    result.append(item)\n                    break\n    return result"
    },
    {
        "id":289,
        "response":"import typing\n\ndef max_aggregate(stdata: typing.List[tuple]) -> int:\n    if not stdata:\n        return 0\n    return max(sum(item) for item in stdata)"
    },
    {
        "id":290,
        "response":"import math\n\ndef count_binary_seq(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return math.comb(2 * n, n)"
    },
    {
        "id":291,
        "response":"import collections\n\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 1\n    stack = collections.deque([(d, 1)])\n    while stack:\n        current, depth = stack.pop()\n        max_depth = max(max_depth, depth)\n        for v in current.values():\n            if isinstance(v, dict):\n                stack.append((v, depth + 1))\n    return max_depth"
    },
    {
        "id":292,
        "response":"import typing\n\ndef set_Bit_Number(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":293,
        "response":"import sys\n\ndef solve(a, n):\n    return a ** n == n ** a"
    },
    {
        "id":294,
        "response":"import typing\n\ndef find_Element(arr: typing.List[int], ranges: typing.Any, rotations: int, index: int):\n    n = len(arr)\n    if n == 0 or index < 0 or index >= n:\n        return None\n    rot = rotations % n\n    new_idx = (index - rot) % n\n    return arr[new_idx]"
    },
    {
        "id":295,
        "response":"import typing\n\ndef start_withp(words: typing.List[str]) -> typing.List[str]:\n    return [word for word in words if isinstance(word, str) and word.startswith('\u09aa\u09bf')]"
    },
    {
        "id":296,
        "response":"import typing\n\ndef max_sum_increasing_subseq(a: typing.List[int], n: int, index: int, k: int) -> typing.Tuple[int, int]:\n    if not (0 <= index < n) or not (0 <= k < n) or k <= index:\n        raise ValueError(\"Invalid indices\")\n    dp = [0] * (index + 1)\n    for j in range(index + 1):\n        max_prev = 0\n        aj = a[j]\n        for l in range(j):\n            if a[l] < aj and dp[l] > max_prev:\n                max_prev = dp[l]\n        dp[j] = aj + max_prev\n    max_sum = max(dp)\n    return max_sum, a[k]"
    },
    {
        "id":297,
        "response":"def colon_tuplex(tuplex, m, n):\n    return tuplex[m:n]"
    },
    {
        "id":298,
        "response":"import heapq\n\ndef large_product(nums1, nums2, N):\n    if not nums1 or not nums2 or N <= 0:\n        return []\n    total = len(nums1) * len(nums2)\n    if N >= total:\n        return sorted([a * b for a in nums1 for b in nums2], reverse=True)\n    # Use a min-heap of size N to keep N largest products\n    heap = []\n    for a in nums1:\n        for b in nums2:\n            prod = a * b\n            if len(heap) < N:\n                heapq.heappush(heap, prod)\n            else:\n                if prod > heap[0]:\n                    heapq.heapreplace(heap, prod)\n    return sorted(heap, reverse=True)"
    },
    {
        "id":299,
        "response":"def maximum(a, b):\n    return a if a >= b else b"
    },
    {
        "id":300,
        "response":"import typing\n\ndef string_to_tuple(str1: str) -> tuple:\n    if not isinstance(str1, str):\n        raise TypeError(\"Input must be a string\")\n    return tuple(str1)"
    },
    {
        "id":301,
        "response":"import typing\n\ndef set_left_most_unset_bit(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Only non-negative integers are supported\")\n    mask = (~n) & (n + 1)\n    return n | mask"
    },
    {
        "id":302,
        "response":"import math\n\ndef volume_cone(r, h):\n    return (1.0 \/ 3.0) * math.pi * (r ** 2) * h"
    },
    {
        "id":303,
        "response":"import typing\n\ndef pos_nos(list1: typing.List[int]) -> typing.List[int]:\n    result = [num for num in list1 if num > 0]\n    for num in result:\n        print(num)\n    return result"
    },
    {
        "id":304,
        "response":"import typing\n\ndef max_sum_rectangular_grid(grid: typing.List[typing.List[int]], n: int) -> int:\n    if n == 0:\n        return 0\n    # dp_prev[state] where state: 0 = none, 1 = top, 2 = bottom\n    dp_prev = [0, grid[0][0], grid[1][0]]\n    for i in range(1, n):\n        top_val = grid[0][i]\n        bottom_val = grid[1][i]\n        dp_curr = [0, 0, 0]\n        # state 0: select none in this column\n        dp_curr[0] = max(dp_prev)\n        # state 1: select top cell, cannot come from previous top\n        dp_curr[1] = max(dp_prev[0], dp_prev[2]) + top_val\n        # state 2: select bottom cell, cannot come from previous bottom\n        dp_curr[2] = max(dp_prev[0], dp_prev[1]) + bottom_val\n        dp_prev = dp_curr\n    return max(dp_prev)"
    },
    {
        "id":305,
        "response":"import re\nfrom typing import List\n\ndef find_Max_Len_Even(s: str) -> str:\n    words: List[str] = re.findall(r'\\S+', s)\n    max_len: int = 0\n    result: str = ''\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                result = word\n    return result"
    },
    {
        "id":306,
        "response":"import typing\n\ndef find_last_occurrence(A: typing.List[int], x: int) -> int:\n    low, high = 0, len(A) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if A[mid] == x:\n            result = mid\n            low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "id":307,
        "response":"import typing\n\ndef modified_encode(alist: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if not alist:\n        return []\n    result: typing.List[typing.Any] = []\n    count = 1\n    prev = alist[0]\n    for item in alist[1:]:\n        if item == prev:\n            count += 1\n        else:\n            result.append([count, prev] if count > 1 else prev)\n            prev = item\n            count = 1\n    result.append([count, prev] if count > 1 else prev)\n    return result"
    },
    {
        "id":308,
        "response":"import math\n\ndef max_volume(s):\n    if s <= 0:\n        return 0.0\n    edge = s \/ 12.0\n    return edge * edge * edge"
    },
    {
        "id":309,
        "response":"import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text, flags=re.UNICODE)"
    },
    {
        "id":310,
        "response":"import math\n\ndef sum_difference(n: int) -> int:\n    if n <= 0:\n        return 0\n    total = n * (n + 1) \/\/ 2\n    total_sq = n * (n + 1) * (2 * n + 1) \/\/ 6\n    return total * total - total_sq"
    },
    {
        "id":311,
        "response":"import typing\n\ndef find_demlo(s: int) -> int:\n    if s <= 0:\n        return 0\n    inc = ''.join(str(i) for i in range(1, s + 1))\n    dec = ''.join(str(i) for i in range(s - 1, 0, -1))\n    return int(inc + dec)"
    },
    {
        "id":312,
        "response":"import typing\n\ndef position_min(list1):\n    if not list1:\n        return []\n    min_val = min(list1)\n    return [i for i, v in enumerate(list1) if v == min_val]"
    },
    {
        "id":313,
        "response":"import typing\n\ndef right_rotate(arr: typing.List[int], n: int, out_of_place: int, cur: int) -> typing.List[int]:\n    temp = arr[cur]\n    i = cur\n    while i > out_of_place:\n        arr[i] = arr[i - 1]\n        i -= 1\n    arr[out_of_place] = temp\n    return arr\n\ndef rearrange_alternate(arr: typing.List[int]) -> typing.List[int]:\n    n = len(arr)\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if (arr[index] >= 0 and arr[out_of_place] < 0) or (arr[index] < 0 and arr[out_of_place] >= 0):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        else:\n            if (arr[index] >= 0 and index % 2 == 1) or (arr[index] < 0 and index % 2 == 0):\n                out_of_place = index\n    return arr"
    },
    {
        "id":314,
        "response":"import typing\n\ndef sum_of_alternates(test_tuple: typing.Tuple[typing.Union[int, float], ...]) -> float:\n    return sum(test_tuple[::2])"
    },
    {
        "id":315,
        "response":"import math\n\ndef get_Min_Squares(n: int) -> int:\n    if n <= 0:\n        return 0\n    if int(math.isqrt(n)) ** 2 == n:\n        return 1\n    m = n\n    while m % 4 == 0:\n        m \/\/= 4\n    if m % 8 == 7:\n        return 4\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        remainder = n - i * i\n        if int(math.isqrt(remainder)) ** 2 == remainder:\n            return 2\n    return 3"
    },
    {
        "id":316,
        "response":"import collections\n\ndef most_occurrences(test_list):\n    if not test_list:\n        return None\n    counter = collections.Counter(test_list)\n    return max(counter, key=counter.get)"
    },
    {
        "id":317,
        "response":"import math\n\ndef check_isosceles(x, y, z):\n    a, b, c = sorted([x, y, z])\n    if a + b <= c:\n        return False\n    return math.isclose(a * a + b * b, c * c)"
    },
    {
        "id":318,
        "response":"import typing\n\ndef rotate_left(list1: typing.List[typing.Any], m: int, n: int) -> typing.List[typing.Any]:\n    if not list1:\n        return list1\n    length = len(list1)\n    k = m % length\n    return list1[k:] + list1[:k]"
    },
    {
        "id":319,
        "response":"import typing\n\ndef neg_count(nums: typing.List[int]) -> int:\n    count = 0\n    for n in nums:\n        if n < 0:\n            count += 1\n    return count"
    },
    {
        "id":320,
        "response":"import re\n\ndef find_char(text):\n    return re.findall(r'\\b\\w{3,5}\\b', text)"
    },
    {
        "id":321,
        "response":"import typing\n\ndef count_unset_bits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if n == 0:\n        return 1\n    bit_len = n.bit_length()\n    set_bits = bin(n).count('1')\n    return bit_len - set_bits"
    },
    {
        "id":322,
        "response":"import collections\n\ndef char_frequency(str1):\n    return dict(collections.Counter(str1))"
    },
    {
        "id":323,
        "response":"import typing\n\ndef Sort(sub_li: typing.List[typing.List]) -> typing.List[typing.List]:\n    return sorted(sub_li, key=lambda x: x[1] if len(x) > 1 else float('-inf'))"
    },
    {
        "id":324,
        "response":"import numbers\n\ndef check_Validity(a, b, c):\n    if not all(isinstance(x, (int, float, complex)) and not isinstance(x, bool) for x in (a, b, c)):\n        return False\n    if any(x <= 0 for x in (a, b, c)):\n        return False\n    return a + b > c and a + c > b and b + c > a"
    },
    {
        "id":325,
        "response":"import typing\n\ndef ap_sum(a: float, n: int, d: float) -> float:\n    if n <= 0:\n        return 0\n    return n * (2 * a + (n - 1) * d) \/ 2"
    },
    {
        "id":326,
        "response":"import re\n\ndef check_monthnum(monthname1):\n    if not isinstance(monthname1, str):\n        return False\n    month = monthname1.strip().lower()\n    return month == \"february\" or month == \"feb\""
    },
    {
        "id":327,
        "response":"import re\n\ndef text_match_word(text):\n    match = re.search(r'(\\w+)[^\\w\\s]*\\s*$', text)\n    return match.group(1) if match else None"
    },
    {
        "id":328,
        "response":"import collections\n\ndef check_Equality(s):\n    freq = {}\n    for ch in s:\n        freq[ch] = freq.get(ch, 0) + 1\n    total = 0\n    for k in freq.values():\n        total += k * (k + 1) \/\/ 2\n    return total"
    },
    {
        "id":329,
        "response":"import math\n\ndef find_Divisor(x, y):\n    a, b = abs(x), abs(y)\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "id":330,
        "response":"import typing\n\ndef sum_three_smallest_nums(lst: typing.List[int]) -> int:\n    positives = [x for x in lst if x > 0]\n    positives.sort()\n    return sum(positives[:3])"
    },
    {
        "id":331,
        "response":"import typing\n\ndef set_to_tuple(s: typing.Set) -> tuple:\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":"import heapq\nfrom typing import List, Tuple, Optional\n\ndef smallest_range(arrays: List[List[int]]) -> Optional[Tuple[int, int]]:\n    if not arrays or any(not lst for lst in arrays):\n        return None\n    k = len(arrays)\n    heap = []\n    current_max = float('-inf')\n    for i, lst in enumerate(arrays):\n        val = lst[0]\n        heap.append((val, i, 0))\n        if val > current_max:\n            current_max = val\n    heapq.heapify(heap)\n    best_range = (float('-inf'), float('inf'))\n    while True:\n        current_min, list_idx, elem_idx = heapq.heappop(heap)\n        if current_max - current_min < best_range[1] - best_range[0]:\n            best_range = (current_min, current_max)\n        if elem_idx + 1 == len(arrays[list_idx]):\n            break\n        next_val = arrays[list_idx][elem_idx + 1]\n        heapq.heappush(heap, (next_val, list_idx, elem_idx + 1))\n        if next_val > current_max:\n            current_max = next_val\n    return best_range"
    },
    {
        "id":333,
        "response":"import re\n\ndef dig_let(s: str):\n    letters = sum(1 for ch in s if ch.isalpha())\n    digits = sum(1 for ch in s if ch.isdigit())\n    return letters, digits"
    },
    {
        "id":334,
        "response":"import math\n\ndef count_Odd_Squares(n, m):\n    if n > m:\n        n, m = m, n\n    start = math.isqrt(n)\n    if start * start < n:\n        start += 1\n    end = math.isqrt(m)\n    count = end - start + 1\n    return count if count > 0 else 0"
    },
    {
        "id":335,
        "response":"import typing\n\ndef diff_consecutivenums(nums: typing.List[int]) -> typing.List[int]:\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)] if len(nums) > 1 else []"
    },
    {
        "id":336,
        "response":"import sys\n\ndef zigzag(n: int, k: int) -> int:\n    if n == 0:\n        return 1 if k == 0 else 0\n    if k < 0 or k >= n:\n        return 0\n    dp = [[0] * (n) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    return dp[n][k]"
    },
    {
        "id":337,
        "response":"import typing\n\ndef count_Squares(m: int, n: int) -> int:\n    if m <= 0 or n <= 0:\n        return 0\n    total = 0\n    limit = m if m < n else n\n    for k in range(1, limit + 1):\n        total += (m - k + 1) * (n - k + 1)\n    return total"
    },
    {
        "id":338,
        "response":"import math\n\ndef bin_coff(n: int, r: int) -> int:\n    if n < 0 or r < 0:\n        return 0\n    if (n - r) % 2 != 0:\n        return 0\n    k = (n - r) \/\/ 2\n    if k < 0 or k > n:\n        return 0\n    return (r + 1) * math.comb(n + 1, k) \/\/ (n + 1)"
    },
    {
        "id":339,
        "response":"import re\n\ndef check(string: str) -> bool:\n    return bool(re.fullmatch(r'[01]+', string))"
    },
    {
        "id":340,
        "response":"import collections\n\ndef minimum_Length(s):\n    if not s:\n        return s\n    freq = collections.Counter(s)\n    max_char = max(freq, key=freq.get)\n    return ''.join(ch for ch in s if ch != max_char)"
    },
    {
        "id":341,
        "response":"import re\nfrom typing import List\n\ndef first_Element(arr: List[int], n: int, k: int) -> int:\n    if n != len(arr) or k <= 0:\n        return -1\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    for num in arr:\n        if freq.get(num, 0) == k:\n            return num\n    return -1"
    },
    {
        "id":342,
        "response":"def unique_Characters(s):\n    return len(set(s)) == len(s)"
    },
    {
        "id":343,
        "response":"import typing\n\ndef remove_column(list1: list, n: int) -> list:\n    if n < 0:\n        return list1\n    result = []\n    for row in list1:\n        if isinstance(row, list) and n < len(row):\n            new_row = row[:n] + row[n+1:]\n        else:\n            new_row = row[:]\n        result.append(new_row)\n    return result"
    },
    {
        "id":344,
        "response":"def tn_ap(a, n, d):\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":"import itertools\n\ndef count_Rectangles(radius):\n    r = int(radius)\n    if r <= 0:\n        return 0\n    points_by_y = {}\n    r_sq = r * r\n    for y in range(-r, r + 1):\n        xs = []\n        y_sq = y * y\n        max_x = int((r_sq - y_sq) ** 0.5)\n        for x in range(-max_x, max_x + 1):\n            xs.append(x)\n        if xs:\n            points_by_y[y] = xs\n    total = 0\n    y_vals = sorted(points_by_y.keys())\n    for i in range(len(y_vals)):\n        xs_i = points_by_y[y_vals[i]]\n        for j in range(i + 1, len(y_vals)):\n            xs_j = points_by_y[y_vals[j]]\n            p1 = p2 = common = 0\n            while p1 < len(xs_i) and p2 < len(xs_j):\n                if xs_i[p1] == xs_j[p2]:\n                    common += 1\n                    p1 += 1\n                    p2 += 1\n                elif xs_i[p1] < xs_j[p2]:\n                    p1 += 1\n                else:\n                    p2 += 1\n            total += common * (common"
    },
    {
        "id":346,
        "response":"def find_angle(a, b):\n    return 180 - a - b"
    },
    {
        "id":347,
        "response":"import typing\n\ndef find_max(test_list: typing.Iterable[typing.Iterable[typing.Any]]) -> typing.Any:\n    max_val = None\n    for record in test_list:\n        for item in record:\n            if max_val is None or item > max_val:\n                max_val = item\n    return max_val"
    },
    {
        "id":348,
        "response":"def moddiv_list(nums1, nums2):\n    return list(map(lambda a, b: a % b, nums1, nums2))"
    },
    {
        "id":349,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    if a == 0:\n        return False\n    return 9 * a * c == 2 * b * b"
    },
    {
        "id":350,
        "response":"import math\n\ndef get_carol(n):\n    if n < 1:\n        return None\n    return (2 ** (n + 1) - 1) ** 2 - 2"
    },
    {
        "id":351,
        "response":"import typing\n\ndef remove_empty(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [item for item in list1 if item != []]"
    },
    {
        "id":352,
        "response":"import collections\n\ndef max_occurrences(nums):\n    if not nums:\n        return None\n    counter = collections.Counter(nums)\n    max_item = max(counter.items(), key=lambda x: x[1])[0]\n    return max_item"
    },
    {
        "id":353,
        "response":"import typing\n\ndef add_K_element(test_list: typing.Tuple[int, ...], K: int) -> typing.Tuple[int, ...]:\n    return tuple(item + K for item in test_list)"
    },
    {
        "id":354,
        "response":"import typing\n\ndef make_flip(ch: str) -> int:\n    if not ch:\n        return 0\n    flips_start_with_0 = 0\n    flips_start_with_1 = 0\n    for i, c in enumerate(ch):\n        expected_0 = '0' if i % 2 == 0 else '1'\n        expected_1 = '1' if i % 2 == 0 else '0'\n        if c != expected_0:\n            flips_start_with_0 += 1\n        if c != expected_1:\n            flips_start_with_1 += 1\n    return min(flips_start_with_0, flips_start_with_1)"
    },
    {
        "id":355,
        "response":"import math\n\ndef count_Digit(n):\n    n = abs(int(n))\n    if n == 0:\n        return 1\n    count = 0\n    while n:\n        n \/\/= 10\n        count += 1\n    return count"
    },
    {
        "id":356,
        "response":"def adjacent_num_product(list_nums):\n    if not isinstance(list_nums, list) or len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        prod = list_nums[i] * list_nums[i + 1]\n        if prod > max_product:\n            max_product = prod\n    return max_product"
    },
    {
        "id":357,
        "response":"import typing\n\nclass TreeNode:\n    def __init__(self, val: int, left: 'TreeNode' = None, right: 'TreeNode' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n    stack = [(root, False)]\n    heights = {}\n    while stack:\n        node, visited = stack.pop()\n        if not node:\n            continue\n        if visited:\n            left_h = heights.get(node.left, 0)\n            right_h = heights.get(node.right, 0)\n            if abs(left_h - right_h) > 1:\n                return False\n            heights[node] = max(left_h, right_h) + 1\n        else:\n            stack.append((node, True))\n            if node.right:\n                stack.append((node.right, False))\n            if node.left:\n                stack.append((node.left, False))\n    return True"
    },
    {
        "id":358,
        "response":"import typing\n\ndef repeat_tuples(test_tup: tuple, N: int) -> tuple:\n    if N <= 0:\n        return ()\n    return test_tup * N"
    },
    {
        "id":359,
        "response":"def lateralsurface_cuboid(l, w, h):\n    return 2 * h * (l + w)"
    },
    {
        "id":360,
        "response":"import re\nimport typing\nimport itertools\n\ndef float_sort(price: typing.Tuple) -> typing.Tuple:\n    def extract_float(item):\n        if isinstance(item, float):\n            return item\n        if isinstance(item, (list, tuple)):\n            for sub in item:\n                if isinstance(sub, float):\n                    return sub\n        return float('inf')\n    return tuple(sorted(price, key=extract_float))"
    },
    {
        "id":361,
        "response":"import typing\n\ndef smallest_missing(A: typing.List[int], left_element: int, right_element: int) -> typing.Optional[int]:\n    if left_element > right_element:\n        return None\n    present = set(A)\n    for num in range(left_element, right_element + 1):\n        if num not in present:\n            return num\n    return None"
    },
    {
        "id":362,
        "response":"import heapq\n\ndef heap_assending(nums):\n    h = nums[:]\n    heapq.heapify(h)\n    return [heapq.heappop(h) for _ in range(len(h))]"
    },
    {
        "id":363,
        "response":"def volume_cuboid(l, w, h):\n    return l * w * h"
    },
    {
        "id":364,
        "response":"import itertools\n\ndef permute_string(s: str):\n    return [''.join(p) for p in itertools.permutations(s)]"
    },
    {
        "id":365,
        "response":"def round_num(n, m):\n    if m == 0:\n        raise ValueError(\"The divisor 'm' cannot be zero.\")\n    return round(n \/ m) * m"
    },
    {
        "id":366,
        "response":"import typing\n\ndef remove_replica(test_tup: typing.Tuple, replace_with: typing.Any = None) -> typing.Tuple:\n    seen = []\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append(replace_with)\n        else:\n            seen.append(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":367,
        "response":"import typing\n\ndef remove_Char(s: str, c: str) -> str:\n    return s.replace(c, \"\")"
    },
    {
        "id":368,
        "response":"import typing\n\ndef move_first(test_list: typing.List) -> typing.List:\n    if not test_list:\n        return test_list\n    if len(test_list) == 1:\n        return test_list\n    last_element = test_list.pop()\n    test_list.insert(0, last_element)\n    return test_list"
    },
    {
        "id":369,
        "response":"def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + l * h + w * h)"
    },
    {
        "id":370,
        "response":"def multi_list(rownum, colnum):\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]"
    },
    {
        "id":371,
        "response":"import typing\n\ndef index_on_inner_list(list_data: typing.List[typing.Any], index_no: int) -> typing.List[typing.Any]:\n    result = []\n    for inner in list_data:\n        if isinstance(inner, (list, tuple)) and -len(inner) <= index_no < len(inner):\n            result.append(inner[index_no])\n    return result"
    },
    {
        "id":372,
        "response":"import typing\n\ndef find_rotation_count(A: typing.List[int]) -> int:\n    n = len(A)\n    if n == 0:\n        return 0\n    low, high = 0, n - 1\n    while low <= high:\n        if A[low] <= A[high]:\n            return low\n        mid = (low + high) \/\/ 2\n        next_idx = (mid + 1) % n\n        prev_idx = (mid - 1 + n) % n\n        if A[mid] <= A[next_idx] and A[mid] <= A[prev_idx]:\n            return mid\n        if A[mid] >= A[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0"
    },
    {
        "id":373,
        "response":"import typing\n\ndef even_bit_toggle_number(n: int) -> int:\n    mask = 0\n    i = 1\n    limit = n.bit_length() + 2\n    while i < limit:\n        mask |= 1 << i\n        i += 2\n    return n ^ mask"
    },
    {
        "id":374,
        "response":"import typing\n\ndef frequency_Of_Smallest(n: int, arr: typing.List[int]) -> int:\n    if n == 0 or not arr:\n        return 0\n    min_val = arr[0]\n    count = 0\n    for x in arr:\n        if x < min_val:\n            min_val = x\n            count = 1\n        elif x == min_val:\n            count += 1\n    return count"
    },
    {
        "id":375,
        "response":"import functools\n\n@functools.lru_cache(maxsize=None)\ndef get_perrin(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non\u2011negative\")\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "id":376,
        "response":"import typing\n\ndef swap_count(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    open_positions = [i for i, ch in enumerate(s) if ch == '[']\n    if len(open_positions) * 2 != n:\n        return -1\n    count = 0\n    swap = 0\n    pos_index = 0\n    s_list = list(s)\n    for i in range(n):\n        if s_list[i] == '[':\n            count += 1\n            pos_index += 1\n        else:\n            count -= 1\n            if count < 0:\n                next_open = open_positions[pos_index]\n                swap += next_open - i\n                s_list[i], s_list[next_open] = s_list[next_open], s_list[i]\n                count = 1\n                pos_index += 1\n    return swap"
    },
    {
        "id":377,
        "response":"def even_or_odd(N):\n    if isinstance(N, (int, bool)):\n        return \"Even\" if N % 2 == 0 else \"Odd\"\n    try:\n        N = int(N)\n        return \"Even\" if N % 2 == 0 else \"Odd\"\n    except (ValueError, TypeError):\n        raise ValueError(\"Input must be an integer\")"
    },
    {
        "id":378,
        "response":"import math\n\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "id":379,
        "response":"import typing\n\ndef find_lucas(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
    },
    {
        "id":380,
        "response":"from typing import List\n\ndef add_string(lst: List[str], prefix: str) -> List[str]:\n    if lst is None:\n        return []\n    return [prefix + str(item) for item in lst]"
    },
    {
        "id":381,
        "response":"import typing\n\ndef convert_list_dictionary(*lists: typing.List) -> typing.Dict:\n    if not lists:\n        return {}\n    if len(lists) == 1:\n        return {k: None for k in lists[0]}\n    if len(lists) == 2:\n        return dict(zip(lists[0], lists[1]))\n    result: typing.Dict = {}\n    *key_lists, value_list = lists\n    for combined in zip(*key_lists, value_list):\n        keys = combined[:-1]\n        value = combined[-1]\n        d = result\n        for k in keys[:-1]:\n            d = d.setdefault(k, {})\n        d[keys[-1]] = value\n    return result"
    },
    {
        "id":382,
        "response":"import functools\n\ndef get_max_sum(n: int) -> int:\n    @functools.lru_cache(maxsize=None)\n    def f(x: int) -> int:\n        if x == 0:\n            return 0\n        split_sum = f(x \/\/ 2) + f(x \/\/ 3) + f(x \/\/ 4) + f(x \/\/ 5)\n        return max(x, split_sum)\n    return f(n)"
    },
    {
        "id":383,
        "response":"import typing\n\ndef max_length_list(input_list: typing.List[typing.List]) -> typing.Optional[typing.List]:\n    if not input_list:\n        return None\n    return max(input_list, key=lambda x: len(x))"
    },
    {
        "id":384,
        "response":"from typing import Tuple, Any\n\ndef check_distinct(test_tup: Tuple[Any, ...]) -> bool:\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":"import collections\n\ndef first_non_repeating_character(str1):\n    counts = collections.Counter(str1)\n    for ch in str1:\n        if counts[ch] == 1:\n            return ch\n    return None"
    },
    {
        "id":386,
        "response":"def check_char(string):\n    if not string:\n        return False\n    return string[0] == string[-1]"
    },
    {
        "id":387,
        "response":"def median_numbers(a, b, c):\n    if (a <= b <= c) or (c <= b <= a):\n        return b\n    if (b <= a <= c) or (c <= a <= b):\n        return a\n    return c"
    },
    {
        "id":388,
        "response":"def sum_of_digits(nums):\n    return [sum(int(d) for d in str(abs(n))) for n in nums]"
    },
    {
        "id":389,
        "response":"import typing\n\ndef bitwise_xor(test_tup1: typing.Tuple[int, ...], test_tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "id":390,
        "response":"import collections\n\ndef extract_freq(test_list):\n    normalized = [tuple(sorted(t)) for t in test_list]\n    return dict(collections.Counter(normalized))"
    },
    {
        "id":391,
        "response":"import typing\n\ndef add_nested_tuples(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        return tuple(add_nested_tuples(a, b) for a, b in zip(test_tup1, test_tup2))\n    return test_tup1 + test_tup2"
    },
    {
        "id":392,
        "response":"import math\n\ndef _modinv(a, p):\n    a %= p\n    if a == 0:\n        raise ValueError(\"Inverse does not exist\")\n    # Extended Euclidean Algorithm\n    old_r, r = a, p\n    old_s, s = 1, 0\n    while r != 0:\n        q = old_r \/\/ r\n        old_r, r = r, old_r - q * r\n        old_s, s = s, old_s - q * s\n    if old_r != 1:\n        raise ValueError(\"Inverse does not exist\")\n    return old_s % p\n\ndef ncr_modp(n, r, p):\n    if r < 0 or n < 0:\n        raise ValueError(\"n and r must be non\u2011negative\")\n    if r > n:\n        return 0\n    r = min(r, n - r)\n    if r == 0:\n        return 1 % p\n    numerator = 1\n    denominator = 1\n    for i in range(1, r + 1):\n        numerator = (numerator * (n - r + i)) % p\n        denominator = (denominator * i) % p\n    inv_den = _modinv(denominator, p)\n    return (numerator * inv_den) % p"
    },
    {
        "id":393,
        "response":"import re\nfrom urllib.parse import urlparse\n\ndef is_valid_URL(url: str) -> bool:\n    if not isinstance(url, str) or not url:\n        return False\n    if any(c.isspace() for c in url):\n        return False\n    parsed = urlparse(url)\n    if parsed.scheme.lower() not in {\"http\", \"https\", \"ftp\"}:\n        return False\n    if not parsed.netloc:\n        return False\n    pattern = re.compile(\n        r\"^(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}\"\n        r\"(?:\\:\\d+)?\"\n        r\"(?:\/[^?#]*)?\"\n        r\"(?:\\?[^#]*)?\"\n        r\"(?:\\#.*)?$\"\n    )\n    return bool(pattern.match(parsed.netloc + (parsed.path or \"\")))"
    },
    {
        "id":394,
        "response":"import typing\n\ndef minimum(a, b):\n    return a if a <= b else b"
    },
    {
        "id":395,
        "response":"def check_tuplex(item, tup):\n    return item in tup"
    },
    {
        "id":396,
        "response":"import typing\n\ndef find_Parity(x: int) -> int:\n    return x & 1"
    },
    {
        "id":397,
        "response":"import typing\n\ndef rearrange_bigger(n: int) -> int:\n    if n < 0:\n        return -1\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1:] = reversed(digits[i + 1:])\n    return int(''.join(digits))"
    },
    {
        "id":398,
        "response":"import heapq\nfrom typing import List, Tuple\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[Tuple[int, int]]:\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    result: List[Tuple[int, int]] = []\n    visited = set()\n    heap = []\n    heapq.heappush(heap, (nums1[0] + nums2[0], 0, 0))\n    visited.add((0, 0))\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n        if i + 1 < len(nums1) and (i + 1, j) not in visited:\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n            visited.add((i + 1, j))\n        if j + 1 < len(nums2) and (i, j + 1) not in visited:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n            visited.add((i, j + 1))\n    return result"
    },
    {
        "id":399,
        "response":"import math\n\ndef min_product_tuple(list1):\n    if not isinstance(list1, list) or len(list1) < 2:\n        return None\n    min1_val = None\n    min2_val = None\n    min1_idx = -1\n    min2_idx = -1\n    for idx, tup in enumerate(list1):\n        if not isinstance(tup, tuple) or len(tup) == 0:\n            prod = 1\n        else:\n            prod = 1\n            for num in tup:\n                prod *= num\n        if min1_val is None or prod < min1_val:\n            min2_val, min2_idx = min1_val, min1_idx\n            min1_val, min1_idx = prod, idx\n        elif min2_val is None or prod < min2_val:\n            min2_val, min2_idx = prod, idx\n    if min1_idx == -1 or min2_idx == -1:\n        return None\n    return (list1[min1_idx], list1[min2_idx])"
    },
    {
        "id":400,
        "response":"import typing\n\ndef min_val(listval: typing.List[float]) -> typing.Optional[float]:\n    if not listval:\n        return None\n    minimum = listval[0]\n    for item in listval[1:]:\n        if item < minimum:\n            minimum = item\n    return minimum"
    },
    {
        "id":401,
        "response":"import re\n\ndef snake_to_camel(word: str) -> str:\n    if not word:\n        return word\n    return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), word)"
    },
    {
        "id":402,
        "response":"from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "id":403,
        "response":"import typing\n\ndef extract_nth_element(list1: typing.List[typing.Tuple[typing.Any, ...]], n: int) -> typing.List[typing.Any]:\n    result = []\n    for tup in list1:\n        if isinstance(tup, (list, tuple)) and -len(tup) <= n < len(tup):\n            result.append(tup[n])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "id":404,
        "response":"import typing\n\ndef overlapping(list1: typing.Sequence, list2: typing.Sequence) -> list:\n    set2 = set(list2)\n    return [item for item in list1 if item in set2]"
    },
    {
        "id":405,
        "response":"import math\n\ndef max_Product(arr):\n    if len(arr) < 2:\n        return ()\n    max1 = max2 = -math.inf\n    min1 = min2 = math.inf\n    for x in arr:\n        if x > max1:\n            max2 = max1\n            max1 = x\n        elif x > max2:\n            max2 = x\n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n    if max1 * max2 >= min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"
    },
    {
        "id":406,
        "response":"import sys\n\ndef breakSum(n: int) -> int:\n    s = str(abs(n))\n    length = len(s)\n    if length < 3:\n        return n\n    max_sum = -sys.maxsize\n    for i in range(1, length - 1):\n        for j in range(i + 1, length):\n            part1 = int(s[:i])\n            part2 = int(s[i:j])\n            part3 = int(s[j:])\n            current = part1 + part2 + part3\n            if current > max_sum:\n                max_sum = current\n    return max_sum if n >= 0 else -max_sum"
    },
    {
        "id":407,
        "response":"import typing\n\ndef group_tuples(Input: typing.List[tuple]) -> typing.Any:\n    if not Input:\n        return None\n    first_elem = Input[0][0] if Input[0] else None\n    for tpl in Input:\n        if not tpl or tpl[0] != first_elem:\n            return None\n    return first_elem"
    },
    {
        "id":408,
        "response":"import typing\n\ndef Find_Max(lst: typing.List[int]) -> typing.List[int]:\n    if not lst:\n        return []\n    max_start = 0\n    max_len = 1\n    cur_start = 0\n    cur_len = 1\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            cur_len += 1\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n                max_start = cur_start\n            cur_start = i\n            cur_len = 1\n    if cur_len > max_len:\n        max_len = cur_len\n        max_start = cur_start\n    return lst[max_start:max_start + max_len]"
    },
    {
        "id":409,
        "response":"import math\n\ndef round_and_sum(list1):\n    rounded = [round(x) for x in list1]\n    total = sum(rounded)\n    return total * len(list1)"
    },
    {
        "id":410,
        "response":"import typing\n\ndef cube_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 2 * n * n * (n + 1) * (n + 1)"
    },
    {
        "id":411,
        "response":"import typing\n\ndef concatenate_tuple(test_tup: typing.Tuple[typing.Any, ...], delimiter: str = \",\") -> str:\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "id":412,
        "response":"import typing\n\ndef find_Average_Of_Cube(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    total = n * (n + 1) \/\/ 2\n    sum_cubes = total * total\n    return sum_cubes \/ n"
    },
    {
        "id":413,
        "response":"import sys\n\ndef get_maxgold(gold, m, n):\n    if m == 0 or n == 0:\n        return 0\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        dp[i][n-1] = gold[i][n-1]\n    for col in range(n-2, -1, -1):\n        for row in range(m):\n            right = dp[row][col+1]\n            right_up = dp[row-1][col+1] if row > 0 else -sys.maxsize\n            right_down = dp[row+1][col+1] if row < m-1 else -sys.maxsize\n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    return max(dp[row][0] for row in range(m))"
    },
    {
        "id":414,
        "response":"import typing\n\ndef extract_rear(test_tuple: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return tuple(s[-1] if s else '' for s in test_tuple)"
    },
    {
        "id":415,
        "response":"import typing\n\ndef count_element_in_list(list1: typing.List[typing.List[typing.Any]], x: typing.Any) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "id":416,
        "response":"def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":"import re\n\ndef change_date_format(dt):\n    match = re.fullmatch(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if not match:\n        return dt\n    year, month, day = match.groups()\n    return f\"{day}-{month}-{year}\""
    },
    {
        "id":418,
        "response":"def shell_sort(my_list):\n    n = len(my_list)\n    gap = n \/\/ 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n    return my_list"
    },
    {
        "id":419,
        "response":"import typing\n\ndef and_tuples(test_tup1: tuple, test_tup2: tuple) -> tuple:\n    return tuple(test_tup1) + tuple(test_tup2)"
    },
    {
        "id":420,
        "response":"import math\n\ndef parabola_directrix(a, b, c):\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero for a parabola.\")\n    h = -b \/ (2 * a)\n    k = a * h * h + b * h + c\n    directrix_y = k - 1 \/ (4 * a)\n    return directrix_y"
    },
    {
        "id":421,
        "response":"import typing\n\ndef common_element(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> bool:\n    return bool(set(list1) & set(list2))"
    },
    {
        "id":422,
        "response":"import typing\n\ndef median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) \/ 2."
    },
    {
        "id":423,
        "response":"import typing\n\ndef check_greater(arr: typing.List[int], number: int) -> bool:\n    return all(number > x for x in arr)"
    },
    {
        "id":424,
        "response":"import re\n\ndef text_match_one(text):\n    return bool(re.search(r'b+', text))"
    },
    {
        "id":425,
        "response":"def last_Digit(n: int) -> int:\n    return abs(n) % 10"
    },
    {
        "id":426,
        "response":"def neg_nos(list1):\n    return [x for x in list1 if x < 0]"
    },
    {
        "id":427,
        "response":"def remove_odd(str1):\n    return str1[::2]"
    },
    {
        "id":428,
        "response":"import typing\n\ndef count_bidirectional(test_list: typing.List[typing.Tuple[int, int]]) -> int:\n    pair_set = set(test_list)\n    count = 0\n    for a, b in pair_set:\n        if a != b and (b, a) in pair_set and (a, b) not in {(b, a)}:\n            if a < b:\n                count += 1\n    return count"
    },
    {
        "id":429,
        "response":"import typing\n\ndef multiple_to_single(L: typing.List[int]) -> int:\n    if not L:\n        return 0\n    return int(''.join(map(str, L)))"
    },
    {
        "id":430,
        "response":"import re\nfrom typing import List, Tuple\n\ndef find_verb_position(text: str) -> List[Tuple[str, int]]:\n    verb_suffixes = (\n        \"\u09be\", \"\u09bf\", \"\u09c7\", \"\u09cb\", \"\u09be\u0987\", \"\u09bf\u09b2\", \"\u09c7\u09b2\", \"\u09be\u099b\u09bf\", \"\u09bf\u099b\u09c7\", \"\u09c7\u099b\u09c7\", \"\u09be\u099b\u09c7\",\n        \"\u09be\u09a8\", \"\u09bf\u09a4\u09c7\", \"\u09c7\u09a4\u09c7\", \"\u09be\u09ac\u09c7\", \"\u09bf\u09ac\u09c7\", \"\u09c7\u09ac\u09c7\", \"\u09be\u099b\u09bf\", \"\u09bf\u099b\u09bf\u09b2\", \"\u09c7\u099b\u09bf\u09b2\"\n    )\n    results: List[Tuple[str, int]] = []\n    for match in re.finditer(r\"\\S+\", text):\n        word = match.group()\n        if word.endswith(verb_suffixes):\n            results.append((word, match.start()))\n    return results"
    },
    {
        "id":431,
        "response":"import typing\n\ndef surfacearea_cube(l: float) -> float:\n    return 6 * l * l"
    },
    {
        "id":432,
        "response":"import typing\n\ndef positive_count(nums: typing.List[int]) -> float:\n    if not nums:\n        return 0.0\n    positive = sum(1 for n in nums if n > 0)\n    return positive \/ len(nums)"
    },
    {
        "id":433,
        "response":"import typing\n\ndef largest_neg(list1: typing.List[int]) -> typing.Optional[int]:\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "id":434,
        "response":"import typing\n\ndef trim_tuple(test_list: typing.List[tuple], K: int) -> typing.List[tuple]:\n    if not isinstance(K, int):\n        raise TypeError(\"K must be an integer\")\n    trimmed = []\n    for t in test_list:\n        if not isinstance(t, tuple):\n            raise TypeError(\"All elements of test_list must be tuples\")\n        trimmed.append(t[:K] if K >= 0 else ())\n    return trimmed"
    },
    {
        "id":435,
        "response":"import itertools\n\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(a * b for a, b in itertools.zip_longest(test_tup1, test_tup2, fillvalue=1))"
    },
    {
        "id":436,
        "response":"import typing\n\ndef count_Occurrence(tup: tuple, lst: list) -> tuple:\n    return tuple(tup) + tuple(lst)"
    },
    {
        "id":437,
        "response":"def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))"
    },
    {
        "id":438,
        "response":"import math\n\ndef _is_prime(num):\n    if num < 2:\n        return False\n    if num % 2 == 0:\n        return num == 2\n    limit = int(math.isqrt(num))\n    i = 3\n    while i <= limit:\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n\ndef cal_sum(n):\n    total = 0\n    for i in range(2, n + 1):\n        if _is_prime(i):\n            total += i\n    return total"
    },
    {
        "id":439,
        "response":"import math\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    area = (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)\n    return area != 0"
    },
    {
        "id":440,
        "response":"import typing\n\ndef extract_string(strings: typing.List[str], l: int) -> typing.List[str]:\n    if not isinstance(strings, list) or not isinstance(l, int):\n        return []\n    return [s for s in strings if isinstance(s, str) and len(s) == l]"
    },
    {
        "id":441,
        "response":"import re\n\ndef remove_whitespaces(text1):\n    if not isinstance(text1, str):\n        return text1\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":"def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount"
    },
    {
        "id":443,
        "response":"import math\n\ndef sumofFactors(n):\n    if n <= 0:\n        return 0\n    total = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            j = n \/\/ i\n            if i % 2 == 0:\n                total += i\n            if j != i and j % 2 == 0:\n                total += j\n    return total"
    },
    {
        "id":444,
        "response":"import re\n\ndef text_match_wordz(text):\n    return re.findall(r'\\b\\w*z\\w*\\b', text, flags=re.IGNORECASE)"
    },
    {
        "id":445,
        "response":"from typing import *\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}"
    },
    {
        "id":446,
        "response":"from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":"import typing\n\ndef Find_Min(lst: typing.List[int]) -> typing.List[int]:\n    if not lst:\n        return []\n    min_ending_here = lst[0]\n    min_so_far = lst[0]\n    start = 0\n    end = 0\n    s = 0\n    for i in range(1, len(lst)):\n        if min_ending_here + lst[i] > lst[i]:\n            min_ending_here = lst[i]\n            s = i\n        else:\n            min_ending_here += lst[i]\n        if min_ending_here < min_so_far:\n            min_so_far = min_ending_here\n            start = s\n            end = i\n    return lst[start:end + 1]"
    },
    {
        "id":448,
        "response":"def rectangle_area(l, b):\n    return l * b"
    },
    {
        "id":449,
        "response":"import re\n\ndef remove_uppercase(str1):\n    if not isinstance(str1, str):\n        return str1\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "id":450,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result = []\n    for sub in lst:\n        try:\n            result.append(sub[0])\n        except (IndexError, TypeError):\n            result.append(None)\n    return result"
    },
    {
        "id":451,
        "response":"import typing\n\ndef upper_ctr(s: str) -> int:\n    return sum(1 for c in s if c.isupper())"
    },
    {
        "id":452,
        "response":"import itertools\n\ndef combinations_list(list1):\n    result = []\n    n = len(list1)\n    for r in range(n + 1):\n        for combo in itertools.combinations(list1, r):\n            result.append(list(combo))\n    return result"
    },
    {
        "id":453,
        "response":"import typing\n\ndef max_subarray_product(arr: typing.List[int]) -> int:\n    if not arr:\n        return 0\n    max_prod = min_prod = result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_prod, min_prod = min_prod, max_prod\n        max_prod = max(num, max_prod * num)\n        min_prod = min(num, min_prod * num)\n        result = max(result, max_prod)\n    return result"
    },
    {
        "id":454,
        "response":"import typing\n\ndef check_value(data: dict, n: typing.Any) -> bool:\n    if not data:\n        return True\n    return all(value == n for value in data.values())"
    },
    {
        "id":455,
        "response":"import typing\n\ndef drop_empty(dict1: dict) -> dict:\n    if not isinstance(dict1, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    def _is_empty(value):\n        if value is None:\n            return True\n        if isinstance(value, (str, bytes, list, tuple, dict, set, frozenset)):\n            return len(value) == 0\n        return False\n    return {k: v for k, v in dict1.items() if not _is_empty(v)}"
    },
    {
        "id":456,
        "response":"import typing\n\ndef find_peak_util(arr: typing.List[int], low: int, high: int, n: int) -> int:\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        left = arr[mid - 1] if mid - 1 >= 0 else float('-inf')\n        right = arr[mid + 1] if mid + 1 < n else float('-inf')\n        if arr[mid] >= left and arr[mid] >= right:\n            return arr[mid]\n        elif left > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\ndef find_peak(arr: typing.List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return -1\n    return find_peak_util(arr, 0, n - 1, n)"
    },
    {
        "id":457,
        "response":"def decimal_to_Octal(deciNum):\n    if deciNum == 0:\n        return \"0\"\n    sign = \"-\" if deciNum < 0 else \"\"\n    num = abs(deciNum)\n    digits = []\n    while num > 0:\n        digits.append(str(num % 8))\n        num \/\/= 8\n    return sign + \"\".join(reversed(digits))"
    },
    {
        "id":458,
        "response":"import typing\n\ndef max_product(arr: typing.List[int], n: int) -> int:\n    if not arr:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                prod = dp[j] * arr[i]\n                if prod > dp[i]:\n                    dp[i] = prod\n    return max(dp)"
    },
    {
        "id":459,
        "response":"import typing\n\ndef max_profit(price: typing.List[int], k: int) -> int:\n    n = len(price)\n    if n < 2 or k <= 0:\n        return 0\n    if k >= n \/\/ 2:\n        profit = 0\n        for i in range(1, n):\n            diff = price[i] - price[i - 1]\n            if diff > 0:\n                profit += diff\n        return profit\n    buy = [float('-inf')] * (k + 1)\n    sell = [0] * (k + 1)\n    for p in price:\n        for i in range(1, k + 1):\n            buy[i] = max(buy[i], sell[i - 1] - p)\n            sell[i] = max(sell[i], buy[i] + p)\n    return sell[k]"
    },
    {
        "id":460,
        "response":"import typing\n\ndef add_pairwise(test_tup: tuple) -> tuple:\n    n = len(test_tup)\n    result = []\n    i = 0\n    while i < n:\n        if i + 1 < n:\n            result.append(test_tup[i] + test_tup[i + 1])\n            i += 2\n        else:\n            result.append(test_tup[i])\n            i += 1\n    return tuple(result)"
    },
    {
        "id":461,
        "response":"import functools\nimport operator\n\ndef find_remainder(arr, lens, n):\n    if n == 0:\n        raise ValueError(\"Division by zero is not allowed\")\n    if lens != len(arr):\n        raise ValueError(\"Provided length does not match array length\")\n    return functools.reduce(lambda acc, x: (acc * (x % n)) % n, arr, 1) % n"
    },
    {
        "id":462,
        "response":"import typing\n\ndef check_Consecutive(l: typing.List[int]) -> bool:\n    if len(l) < 2:\n        return False\n    sorted_l = sorted(l)\n    for i in range(1, len(sorted_l)):\n        if sorted_l[i] - sorted_l[i - 1] != 1:\n            return False\n    return True"
    },
    {
        "id":463,
        "response":"import typing\n\ndef tuple_intersection(test_list1: typing.List[typing.Tuple], test_list2: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    set2 = {frozenset(t) for t in test_list2}\n    result = [t for t in test_list1 if frozenset(t) in set2]\n    return result"
    },
    {
        "id":464,
        "response":"def replace_char(str1: str, ch: str, newch: str) -> str:\n    if not isinstance(str1, str) or not isinstance(ch, str) or not isinstance(newch, str):\n        raise TypeError(\"All arguments must be strings\")\n    if len(ch) == 0:\n        return str1\n    return str1.replace(ch, newch)"
    },
    {
        "id":465,
        "response":"import typing\n\ndef sort_counter(dict1: typing.Dict[typing.Any, int]) -> typing.Dict[typing.Any, int]:\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return dict(sorted_items)"
    },
    {
        "id":466,
        "response":"import typing\n\ndef big_sum(nums: typing.List[int]) -> int:\n    if not nums:\n        return 0\n    return max(nums) + min(nums)"
    },
    {
        "id":467,
        "response":"def is_lower(string):\n    return string.lower()\n"
    },
    {
        "id":468,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)"
    },
    {
        "id":469,
        "response":"import math\n\ndef first_Digit(n):\n    n = abs(int(n))\n    if n == 0:\n        return 0\n    while n >= 10:\n        n \/\/= 10\n    return n"
    },
    {
        "id":470,
        "response":"import collections\n\ndef get_max_occuring_char(str1):\n    if not str1:\n        return ''\n    counter = collections.Counter(str1)\n    max_count = max(counter.values())\n    for ch in str1:\n        if counter[ch] == max_count:\n            return ch"
    },
    {
        "id":471,
        "response":"import typing\n\ndef is_subset_sum(set: typing.List[int], n: int, sum: int) -> bool:\n    dp = [[False] * (sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if set[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - set[i - 1]]\n    return dp[n][sum]"
    },
    {
        "id":472,
        "response":"import re\n\ndef match(text):\n    return re.findall(r'[A-Z][a-z]+', text)"
    },
    {
        "id":473,
        "response":"import math\n\ndef first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    n = x\n    factors = {}\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n \/\/= i\n        i += 1 if i == 2 else 2\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n\n    def min_n_for_prime(p, e):\n        low, high = 1, p * e\n        while True:\n            exp = 0\n            temp = high\n            while temp:\n                temp \/\/= p\n                exp += temp\n            if exp >= e:\n                break\n            high *= 2\n        while low < high:\n            mid = (low + high) \/\/ 2\n            exp = 0\n            temp = mid\n            while temp:\n                temp \/\/= p\n                exp += temp\n            if exp >= e:\n                high = mid\n            else:\n                low = mid + 1\n        return low\n\n    result = 0\n    for p, e in factors.items():\n        result = max(result, min_n_for_prime(p, e))\n    return result"
    },
    {
        "id":474,
        "response":"import typing\n\ndef remove_matching_tuple(test_list1: typing.List[tuple], test_list2: typing.List[tuple]) -> typing.List[tuple]:\n    common = set(test_list1) & set(test_list2)\n    return [t for t in test_list1 if t not in common]"
    },
    {
        "id":475,
        "response":"import typing\n\ndef is_palindrome(n: int) -> bool:\n    s = str(n)\n    return s == s[::-1]\n\ndef find_largest_palindrome(arr: typing.List[int]) -> typing.Optional[int]:\n    max_pal = None\n    for num in arr:\n        if is_palindrome(num):\n            if max_pal is None or num > max_pal:\n                max_pal = num\n    return max_pal"
    },
    {
        "id":476,
        "response":"import math\n\ndef nCr(n, r):\n    if r < 0 or r > n:\n        return 0\n    return math.comb(n, r)"
    },
    {
        "id":477,
        "response":"import typing\n\ndef sort_tuple(tup: typing.List[tuple]) -> typing.List[tuple]:\n    return sorted(tup, key=lambda x: x[-1])"
    },
    {
        "id":478,
        "response":"import math\n\ndef area_pentagon(a):\n    if a <= 0:\n        return 0.0\n    return (5 * a * a) \/ (4 * math.tan(math.pi \/ 5))"
    },
    {
        "id":479,
        "response":"import typing\n\ndef frequency_Of_Largest(n: int, arr: typing.List[int]) -> int:\n    if n == 0 or not arr:\n        return 0\n    max_val = arr[0]\n    for num in arr[1:]:\n        if num > max_val:\n            max_val = num\n    count = 0\n    for num in arr:\n        if num == max_val:\n            count += 1\n    return count"
    },
    {
        "id":480,
        "response":"import typing\n\ndef extract_symmetric(test_list: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    pair_set = set(test_list)\n    visited = set()\n    result = []\n    for a, b in test_list:\n        if (a, b) in visited:\n            continue\n        if (b, a) in pair_set:\n            result.append((a, b))\n            if (b, a) != (a, b):\n                result.append((b, a))\n            visited.add((a, b))\n            visited.add((b, a))\n    return result"
    },
    {
        "id":481,
        "response":"import math\n\ndef sum_gp(a, n, r):\n    if n <= 0:\n        return 0\n    if r == 1:\n        return a * n\n    return a * (1 - r ** n) \/ (1 - r)"
    },
    {
        "id":482,
        "response":"import typing\n\ndef binary_search(item_list: typing.List[typing.Any], item: typing.Any) -> int:\n    left, right = 0, len(item_list) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] < item:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "id":483,
        "response":"import math\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    if radius <= 0:\n        return []\n    if startx > endx:\n        startx, endx = endx, startx\n    if starty > endy:\n        starty, endy = endy, starty\n    width = math.sqrt(3) * radius\n    vert_spacing = 1.5 * radius\n    hexagons = []\n    r = 0\n    while True:\n        y = starty + r * vert_spacing\n        if y - radius > endy:\n            break\n        offset = (width \/ 2) if (r % 2) else 0\n        q = 0\n        while True:\n            x = startx + q * width + offset\n            if x - radius > endx:\n                break\n            if x + radius >= startx and y + radius >= starty:\n                vertices = []\n                for i in range(6):\n                    angle = math.pi \/ 6 + i * math.pi \/ 3\n                    vx = x + radius * math.cos(angle)\n                    vy = y + radius * math.sin(angle)\n                    vertices.append((vx, vy))\n                hexagons.append(tuple(vertices))\n            q += 1\n        r += 1\n    return hexagons"
    },
    {
        "id":484,
        "response":"import typing\n\ndef binary_to_integer(test_tup: typing.Tuple[int, ...]) -> int:\n    if not test_tup:\n        return 0\n    binary_str = ''.join(str(bit) for bit in test_tup)\n    return int(binary_str, 2)"
    },
    {
        "id":485,
        "response":"import re\n\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]+', '', str1)"
    },
    {
        "id":486,
        "response":"import heapq\n\ndef heap_queue_smallest(nums, n):\n    if not nums:\n        return None\n    heap = nums[:]\n    heapq.heapify(heap)\n    return heapq.heappop(heap)"
    },
    {
        "id":487,
        "response":"import math\n\ndef surfacearea_cone(r, h):\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    l = math.sqrt(r * r + h * h)\n    return math.pi * r * (r + l)"
    },
    {
        "id":488,
        "response":"import math\n\ndef gcd(x: int, y: int) -> int:\n    while y:\n        x, y = y, x % y\n    return abs(x)"
    },
    {
        "id":489,
        "response":"import math\n\ndef diameter_circle(r):\n    return 2 * r"
    },
    {
        "id":490,
        "response":"def concatenate_elements(lst):\n    return ''.join(str(item) for item in lst)"
    },
    {
        "id":491,
        "response":"import typing\n\ndef min_cost(cost: typing.List[typing.List[int]], m: int, n: int) -> int:\n    if not cost or m < 0 or n < 0:\n        return 0\n    rows, cols = len(cost), len(cost[0])\n    if m >= rows or n >= cols:\n        raise IndexError(\"Target position out of bounds\")\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":"import itertools\n\ndef similar_elements(test_tup1, test_tup2):\n    seen = set()\n    result = []\n    for item in test_tup1:\n        if item in test_tup2 and item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":493,
        "response":"import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    w = 2\n    limit = int(math.isqrt(n))\n    while i <= limit:\n        if n % i == 0:\n            return True\n        i += w\n        w = 6 - w\n    return False"
    },
    {
        "id":494,
        "response":"import heapq\nfrom typing import List, Optional\n\ndef heap_queue_largest(nums: List[int], n: int) -> Optional[int]:\n    if not nums:\n        return None\n    return heapq.nlargest(1, nums)[0]"
    },
    {
        "id":495,
        "response":"import typing\n\ndef count_ways(n: int) -> int:\n    if n % 2 == 1:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    if n >= 2:\n        dp[2] = 3\n    for i in range(4, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]"
    },
    {
        "id":496,
        "response":"import typing\n\ndef is_one_bit_difference(a: int, b: int) -> bool:\n    diff = a ^ b\n    return diff != 0 and (diff & (diff - 1)) == 0"
    },
    {
        "id":497,
        "response":"import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":"from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return list(map(lambda x: x * x, nums))"
    },
    {
        "id":499,
        "response":"import typing\n\ndef find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    lps = [0] * n\n    length = 0\n    i = 1\n    while i < n:\n        if s[i] == s[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        else:\n            if length != 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n    period = n - lps[-1]\n    if n % period == 0:\n        return period\n    return n"
    },
    {
        "id":500,
        "response":"import heapq\n\ndef small_nnum(list1, n):\n    if n <= 0:\n        return []\n    return heapq.nsmallest(n, list1)"
    }
]