[
    {
        "id":1,
        "response":" from collections import Counter\nfrom typing import List\n\ndef remove_Occ(s: str, ch: str) -> str:\n    counter = Counter(s)\n    return ''.join([c for c in s if c != ch and c != counter[ch]])"
    },
    {
        "id":2,
        "response":" from typing import List\n\n     def sort_matrix(M: List[List[int]]) -> List[List[int]]:\n        return sorted(M, key=sum, reverse=True)"
    },
    {
        "id":3,
        "response":" from collections import Counter\nfrom typing import List\n\ndef count_common(words: List[str]) -> List[str]:\n    c = Counter(words)\n    return [word for word, freq in c.most_common(1)[0] if freq == max(c.values())]"
    },
    {
        "id":4,
        "response":" from math import sqrt\nfrom typing import Union\n\ndef find_Volume(l, b, h) -> Union[float, int]:\n    return l * b * h \/ 3"
    },
    {
        "id":5,
        "response":" def split_lowerstring(text):\n        return ''.join(c for c in text if c.islower())"
    },
    {
        "id":6,
        "response":" from itertools import permutations\n\ndef text_lowercase_underscore(text):\n    return min(text, key=lambda x: x.lower())"
    },
    {
        "id":7,
        "response":" def square_perimeter(a):\n        return 4 * a"
    },
    {
        "id":8,
        "response":" def str_to_list(s1, s2):\n        return [c for c in s1 if c not in s2]"
    },
    {
        "id":9,
        "response":" def test_duplicate(nums):\n        num_set = set()\n        for num in nums:\n            if num in num_set:\n                return True\n            num_set.add(num)\n        return False"
    },
    {
        "id":10,
        "response":" def is_woodall(x):\n        s = str(x)\n        n = len(s)\n        for i in range(n):\n            if int(s[i]) != n - i - 1:\n                return False\n        return True"
    },
    {
        "id":11,
        "response":" def multiples_of_num(m, n):\n        return m * n"
    },
    {
        "id":12,
        "response":" def find_first_duplicate(nums):\n        seen = set()\n        for num in nums:\n            if num in seen:\n                return num\n            seen.add(num)\n        return None"
    },
    {
        "id":13,
        "response":" def maximum_Sum(lst):\n        return max(lst)"
    },
    {
        "id":14,
        "response":" from typing import List\n\ndef binary_to_decimal(binary: str) -> int:\n    return int(binary, 2)"
    },
    {
        "id":15,
        "response":" from itertools import combinations\n\ndef find_Product(arr):\n    return [a for i, a in enumerate(arr) for b in combinations(arr, i+1) if a not in b]"
    },
    {
        "id":16,
        "response":" from typing import Tuple\n\ndef check_k_elements(test_list: Tuple, K: int) -> bool:\n    return len(test_list) == K"
    },
    {
        "id":17,
        "response":" def remove_digits(string_list):\n        return ''.join([char for char in string_list if not char.isdigit()])"
    },
    {
        "id":18,
        "response":" from math import comb\n     def binomial_Coeff(n,k):\n        return comb(n,k)"
    },
    {
        "id":19,
        "response":" from collections import Counter\n\ndef get_Odd_Occurrence(arr, arr_size):\n  return [i for i in arr if Counter(arr).get(i, 0) % 2 != 0]"
    },
    {
        "id":20,
        "response":" def check_Equality(s):\n        return ''.join([c for c in s if c == s[0]])"
    },
    {
        "id":21,
        "response":" from typing import List\nfrom collections import Counter\n\ndef func(nums: List[int], k: int) -> List[int]:\n    counter = Counter(nums)\n    max_heap = []\n    for num, count in counter.items():\n        for _ in range(count):\n            heappush(max_heap, num)\n    result = []\n    for _ in range(k):\n        if not max_heap:\n            break\n        result.append(heappop(max_heap))\n    return result"
    },
    {
        "id":22,
        "response":" from math import sqrt\nfrom typing import List\n\ndef max_Prime_Factors (n: int) -> int:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return max(factors)"
    },
    {
        "id":23,
        "response":" from typing import Union\n\n     def decimal_To_Binary(N: int) -> str:\n        return bin(N)[2:]"
    },
    {
        "id":24,
        "response":" from typing import List\n\ndef find_missing(ar: List[int], N: int) -> List[int]:\n     missing = []\n     for i in range(N):\n         if ar[i] != i:\n             missing.append(i)\n     return missing"
    },
    {
        "id":25,
        "response":" def find_rect_num(n):\n        return n * (n + 1) \/\/ 2"
    },
    {
        "id":26,
        "response":" from fractions import Fraction\n     from decimal import Decimal, getcontext\n\n     def find_Nth_Digit(p, q, N):\n        getcontext().prec = N + 2\n        frac = Fraction(p, q)\n        return frac.denominator % 10 ** (N - 1)"
    },
    {
        "id":27,
        "response":" from typing import List, Union\n\n     def sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n         return sorted(mixed_list)"
    },
    {
        "id":28,
        "response":" def div_even_odd(lst):\n        return [i for i in lst if i % 2 == 0] + [i for i in lst if i % 2 != 0]"
    },
    {
        "id":30,
        "response":" from collections import Counter\n     from typing import List\n\n     def freq_element(nums: List[int]) -> List[float]:\n         return [i \/ len(nums) for i in Counter(nums).values()]"
    },
    {
        "id":31,
        "response":" from typing import List\n\n     def filter_evennumbers(nums: List[int]) -> List[int]:\n         return [num for num in nums if num % 2 == 0]"
    },
    {
        "id":32,
        "response":" from typing import List\n\n     def find_Sum(arr: List[int]) -> int:\n        seen = set()\n        total = 0\n        for num in arr:\n            if num not in seen:\n                seen.add(num)\n                total += num\n        return total"
    },
    {
        "id":33,
        "response":" from re import findall\nfrom typing import List\n\ndef text_match(text: str) -> List[str]:\n    return findall(r'[a-z]+', text)"
    },
    {
        "id":34,
        "response":" from typing import List\n\n     def text_match_string(text: str) -> bool:\n        vowels = 'aeiou'\n        for char in text:\n            if char.lower() in vowels:\n                return True\n        return False"
    },
    {
        "id":35,
        "response":" def find_gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x"
    },
    {
        "id":36,
        "response":" def test_distinct(data):\n        return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":" from math import factorial\nfrom typing import Optional\n\ndef compute_Last_Digit(A: int, B: int) -> Optional[int]:\n  def mod(n: int) -> int:\n    return n % 10\n  def get_last_digit(a: int, b: int) -> int:\n    if b == 0:\n      return None\n    return mod(factorial(a) \/\/ factorial(b))\n  return get_last_digit(A, B)"
    },
    {
        "id":38,
        "response":" from typing import List\n\n     def odd_bit_set_number(n: int) -> int:\n        return n ^ ((n & 0x55555555) << 1) | ((n >> 1) & 0x55555555)"
    },
    {
        "id":39,
        "response":" def specified_element(nums, N):\n        return [nums[i] for i in range(len(nums)) if i % N == 0]"
    },
    {
        "id":40,
        "response":" from typing import List\nfrom collections import deque\n\ndef min_length_list(input_list: List[int]) -> List[int]:\n    min_len = float('inf')\n    min_list = []\n    queue = deque([(0, input_list)])\n\n    while queue:\n        curr_len, curr_list = queue.popleft()\n        if curr_len < min_len:\n            min_len = curr_len\n            min_list = curr_list\n        for i in range(len(curr_list)):\n            new_list = curr_list[:i] + curr_list[i+1:]\n            if new_list:\n                queue.append((curr_len + 1, new_list))\n\n    return min_list"
    },
    {
        "id":41,
        "response":" def check_equilateral(a, b, c):\n        return a == b == c"
    },
    {
        "id":42,
        "response":" def parallelogram_area(b, h):\n        if b <= 0 or h <= 0:\n            return 0\n        return b * h"
    },
    {
        "id":43,
        "response":" from typing import List\n\ndef check_Equality(str: str) -> bool:\n    return len(str) > 1 and str[0] == str[-1]"
    },
    {
        "id":44,
        "response":" def counting_sort(my_list):\n        max_val = max(my_list)\n        count = [0] * (max_val + 1)\n        for num in my_list:\n            count[num] += 1\n        sorted_list = []\n        for i, cnt in enumerate(count):\n            sorted_list.extend([i] * cnt)\n        return sorted_list"
    },
    {
        "id":45,
        "response":" def tn_gp(a,n,r):\n        if n == 0:\n            return 1\n        return a * tn_gp(a, n-1, r) \/ r\n    "
    },
    {
        "id":46,
        "response":" def rev(num):\n        return num < num\/\/2"
    },
    {
        "id":47,
        "response":" from typing import List\n\n     def find_Max_Num(arr: List[int], n: int) -> int:\n        return max(arr)"
    },
    {
        "id":48,
        "response":" def opposite_Signs(x, y):\n        return x * y < 0"
    },
    {
        "id":49,
        "response":" from math import sqrt\n     def is_octagonal(n):\n        x = int(sqrt(8*n + 1)) + 1\n        while x * (x - 1) < 8*n:\n            x += 1\n        return x * (x - 1) == 8*n"
    },
    {
        "id":50,
        "response":" def max_len_sub(arr):\n        n = len(arr)\n        max_len = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                diff = abs(arr[i] - arr[j])\n                if diff > max_len:\n                    max_len = diff\n        return max_len"
    },
    {
        "id":51,
        "response":" def count_Substrings(s,n):\n        def helper(s, n, index):\n            if index == len(s):\n                return 0\n            count = 0\n            for i in range(n):\n                if index + i < len(s) and s[index + i] == s[i]:\n                    count += 1\n                else:\n                    break\n            return count + helper(s, n, index + 1)\n        return helper(s, n, 0)"
    },
    {
        "id":52,
        "response":" def smallest_num(xs):\n        return min(xs)"
    },
    {
        "id":53,
        "response":" def max_difference(test_list):\n        return max(test_list) - min(test_list)"
    },
    {
        "id":54,
        "response":" from typing import List, Tuple\n     from random import choice\n\n     def select_random_tupple(tupple_list: List[Tuple]) -> Tuple:\n         return choice(tupple_list)"
    },
    {
        "id":55,
        "response":" from typing import List\n\n     def list_sum(data_list: List[int]) -> int:\n        return sum(data_list)"
    },
    {
        "id":56,
        "response":" from typing import List\n\ndef pos_count(lst: List[int]) -> List[int]:\n    return [i for i in lst if i > 0]"
    },
    {
        "id":57,
        "response":" def bell_number(n):\n        if n == 0:\n            return 1\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count"
    },
    {
        "id":58,
        "response":" def is_monotonic(A):\n        increasing = decreasing = True\n        for i in range(len(A) - 1):\n            if A[i] > A[i + 1]:\n                increasing = False\n            if A[i] < A[i + 1]:\n                decreasing = False\n        return increasing or decreasing"
    },
    {
        "id":59,
        "response":" def is_sublist(lst, sublst):\n        return lst in [sublst]*len(lst)"
    },
    {
        "id":60,
        "response":" from typing import List, Tuple\n\ndef find_equal_tuple(Input: List[Tuple[int, int]]) -> bool:\n    for tup in Input:\n        if len(tup) != k:\n            return False\n    return True"
    },
    {
        "id":61,
        "response":" from typing import List\nfrom collections import defaultdict\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    gap = n\n    swapped = True\n    gap = max(1, int(n \/ 3))\n\n    while gap != 1 or swapped:\n        gap = max(1, int(gap \/ 1.3))\n        swapped = False\n\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                swapped = True\n                j -= gap"
    },
    {
        "id":62,
        "response":" from math import sqrt\n\ndef dif_Square(n):\n    x = int(sqrt(n))\n    return x*x == n or x+1)*(x-1) == n"
    },
    {
        "id":63,
        "response":" from re import split\n\ndef multiple_split(text):\n    return split(r'[,;:\\s]+', text)"
    },
    {
        "id":64,
        "response":" def is_samepatterns(colors, patterns):\n        n = len(colors)\n        m = len(patterns)\n        if n != m:\n            return False\n        i = 0\n        for j in range(m):\n            if colors[i] != patterns[j]:\n                return False\n            i = (i + 1) % n\n        return True"
    },
    {
        "id":65,
        "response":" def find_tuples(lst, k):\n        return [t for t in lst if all(x % k == 0 for x in t)]"
    },
    {
        "id":66,
        "response":" def count_Squares(m,n):\n        return m\/\/n"
    },
    {
        "id":67,
        "response":" from typing import List\n\n    def is_Diff(n: int) -> int:\n        digits = [int(i) for i in str(n)]\n        even_sum = sum(i for i in digits if i % 2 == 0)\n        odd_sum = sum(i for i in digits if i % 2 != 0)\n        return abs(even_sum - odd_sum)"
    },
    {
        "id":68,
        "response":" from collections import Counter\nfrom typing import List\n\ndef count_With_Odd_SetBits(n: int) -> int:\n    c = Counter()\n    while n:\n        c[n & 1] += 1\n        n >>= 1\n    return sum(c.values())"
    },
    {
        "id":69,
        "response":" from typing import List\n\ndef word_len(s: str) -> bool:\n    return len(s) % 2 == 0"
    },
    {
        "id":70,
        "response":" from math import comb\n     def tetrahedral_number(n):\n        return comb(n+3, 3)"
    },
    {
        "id":71,
        "response":" from itertools import zip_longest\n\ndef zip_tuples(test_tup1, test_tup2):\n    return list(zip_longest(test_tup1, test_tup2))"
    },
    {
        "id":72,
        "response":" import math\n\ndef volume_sphere(r):\n    return (4\/3) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":" def get_Char(s):\n    return ''.join(s)"
    },
    {
        "id":74,
        "response":" def sequence(n):\n        return n"
    },
    {
        "id":75,
        "response":" import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2"
    },
    {
        "id":76,
        "response":" from math import sqrt\n\ndef centered_hexagonal_number(n):\n    return int(((8*n - (1 + sqrt(1 + 24*n))) \/ 6))"
    },
    {
        "id":77,
        "response":" from collections import Counter\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n  return dict1 | dict2 | dict3"
    },
    {
        "id":78,
        "response":" from collections import Counter\n\ndef freq_count(lst):\n    return list(Counter(lst).most_common())"
    },
    {
        "id":79,
        "response":" def closest_num(N):\n        return N - 1 if N - 1 >= 0 else N"
    },
    {
        "id":80,
        "response":" from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max(len(word) for word in list1)"
    },
    {
        "id":81,
        "response":" def find_substring(str1, sub_str):\n        return sub_str in str1"
    },
    {
        "id":82,
        "response":" from math import sqrt\n\ndef is_undulating(n):\n    return sqrt(n) % 1 != 0"
    },
    {
        "id":83,
        "response":" from math import pow\n     def power(a,b):\n        return pow(a,b)"
    },
    {
        "id":84,
        "response":" from typing import List\n\n     def index_minimum(test_list: List) -> int:\n        return test_list.index(min(test_list))"
    },
    {
        "id":85,
        "response":" from typing import List\n\n     def Find_Min_Length(lst: List[int]) -> int:\n        return min(lst)"
    },
    {
        "id":86,
        "response":" from math import sqrt\n\ndef divisor(n):\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count"
    },
    {
        "id":87,
        "response":" def frequency_lists(lst):\n        freq = {}\n        for item in lst:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n        return list(freq.items())"
    },
    {
        "id":88,
        "response":" from typing import List\n\n     def multiply_num(numbers: List[int]) -> int:\n        result = 1\n        for num in numbers:\n            result *= num\n        return result"
    },
    {
        "id":89,
        "response":" def decimal_to_binary(n):\n        return bin(int(n))[2:]"
    },
    {
        "id":90,
        "response":" from typing import List\n\n     def next_smallest_palindrome(num: int) -> int:\n        def is_palindrome(n: int) -> bool:\n            return str(n) == str(n)[::-1]\n\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n"
    },
    {
        "id":91,
        "response":" def kth_element(arr, k):\n        return arr[k-1] if k <= len(arr) else None"
    },
    {
        "id":92,
        "response":" from typing import List\n\n     def snake_to_camel(snake_str: str) -> str:\n        return snake_str.title()"
    },
    {
        "id":93,
        "response":" def eulerian_num(n, m):\n        if m == 0:\n            return n\n        if m == 1:\n            return n if n % 2 == 0 else n + 1\n        if n == 0:\n            return m\n        if m % 2 == 0:\n            return eulerian_num(n - 1, m - 1) + 1\n        else:\n            return eulerian_num(n - 1, m) + m"
    },
    {
        "id":94,
        "response":" def sort_sublists(input_list):\n        return [sublist for sublist in input_list if sublist]"
    },
    {
        "id":95,
        "response":" from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(1 for x in lst if x)"
    },
    {
        "id":96,
        "response":" def add_lists(test_list, test_tup):\n        return test_list + [test_tup]"
    },
    {
        "id":97,
        "response":" from fractions import Fraction\n\ndef count_Hexadecimal(L,R):\n  return int(Fraction(R-L).limit_denominator() * 16)"
    },
    {
        "id":98,
        "response":" def merge_sorted_lists(*args):\n        if not args:\n            return []\n        if len(args) == 1:\n            return args[0]\n        mid = len(args) \/\/ 2\n        left = merge_sorted_lists(*args[:mid])\n        right = merge_sorted_lists(*args[mid:])\n        return merge_two_sorted_lists(left, right)\n\n     def merge_two_sorted_lists(left, right):\n        result = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result"
    },
    {
        "id":99,
        "response":" from typing import List\n\n     def binary_rotation_count(s: str) -> int:\n        n = len(s)\n        res = 0\n        for i in range(n):\n            if s[i] == '1':\n                res += n - i\n        return res"
    },
    {
        "id":100,
        "response":" def extract_missing(lst, strt_val, stop_val):\n        return [i for i in range(strt_val, stop_val) if i not in lst]"
    },
    {
        "id":101,
        "response":" from typing import List, Set\n\n     def common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n        common = set(nestedlist[0])\n        for lst in nestedlist[1:]:\n            common &= set(lst)\n        return list(common)"
    },
    {
        "id":102,
        "response":" from math import pi\n\ndef perimeter(diameter, height):\n    return 2 * pi * diameter + 2 * height"
    },
    {
        "id":103,
        "response":" def check_integer(text):\n        try:\n            int(text)\n            return True\n        except ValueError:\n            return False"
    },
    {
        "id":104,
        "response":" from collections import Counter\n     from typing import List, Tuple\n\n     def assign_freq(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        freq = Counter(test_list)\n        return [item for item in freq]"
    },
    {
        "id":105,
        "response":" def empty_dit(lst):\n        return all(not item for item in lst)"
    },
    {
        "id":106,
        "response":" def tuple_to_int(nums):\n        return sum(nums)"
    },
    {
        "id":107,
        "response":" from typing import List\n\n     def list_to_float(test_list: List[str]) -> List[float]:\n        return [float(x) for x in test_list]"
    },
    {
        "id":108,
        "response":" def string_to_list(string):\n        return list(string)"
    },
    {
        "id":109,
        "response":" def search(arr, n):\n        for i in set(arr):\n            if arr.count(i) == 1:\n                return i\n        return None"
    },
    {
        "id":110,
        "response":" def max_product_tuple(lst):\n        max_product = float('-inf')\n        max_pair = None\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                product = lst[i] * lst[j]\n                if product > max_product:\n                    max_product = product\n                    max_pair = (lst[i], lst[j])\n        return max_pair"
    },
    {
        "id":111,
        "response":" from typing import List, Tuple\n\n     def check_triplet(A: List[int], n: int) -> Tuple[int, int, int]:\n        A.sort()\n        for i in range(n-2):\n            left, right = i+1, n-1\n            while left < right:\n                total = A[i] + A[left] + A[right]\n                if total == sum:\n                    return A[i], A[left], A[right]\n                elif total < sum:\n                    left += 1\n                else:\n                    right -= 1\n        return None"
    },
    {
        "id":112,
        "response":" from math import sqrt\nfrom typing import Optional\n\ndef smartNumber(n: int) -> Optional[int]:\n    if n < 2:\n        return n\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n"
    },
    {
        "id":113,
        "response":" def amicable_numbers_sum(n):\n        def sum_of_divisors(x):\n            s = 0\n            for i in range(1, x):\n                if x % i == 0:\n                    s += i\n            return s\n\n        def is_amicable(a):\n            return sum_of_divisors(a) != a and sum_of_divisors(sum_of_divisors(a)) == a\n\n        total = 0\n        for i in range(1, n):\n            if is_amicable(i) and is_amicable(sum_of_divisors(i)):\n                total += i + sum_of_divisors(i)\n        return total"
    },
    {
        "id":114,
        "response":" from math import atan2\nfrom typing import Union\n\ndef angle_complex(a: complex, b: complex) -> Union[float, int]:\n    if a == 0:\n        return 90 if b > 0 else -90\n    return atan2(b.imag, b.real)"
    },
    {
        "id":115,
        "response":" def find_length(s):\n        max_diff = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                diff = bin(int(s[i], 2) ^ int(s[j], 2)).count('1')\n                max_diff = max(max_diff, diff)\n        return max_diff"
    },
    {
        "id":116,
        "response":" def sum_of_gcd(a, b):\n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        return gcd(a, b) + gcd(b, a)"
    },
    {
        "id":117,
        "response":" def multiply_int(x, y):\n        if y == 0:\n            return 0\n        if y < 0:\n            return -multiply_int(x, -y)\n        if x == 0:\n            return 0\n        if y % 2 == 0:\n            return multiply_int(x, y \/\/ 2) * 2\n        return multiply_int(x, y \/\/ 2) * 2 + x"
    },
    {
        "id":118,
        "response":" from typing import List\nfrom collections import defaultdict\n\ndef long_words(n: int, words: List[str]) -> List[str]:\n    freq = defaultdict(int)\n    for word in words:\n        freq[len(word)] += 1\n    return [word for word in words if freq[len(word)] > 1]"
    },
    {
        "id":119,
        "response":" from itertools import permutations\n\ndef magic_square_test(my_matrix):\n    def is_magic_square(matrix):\n        size = len(matrix)\n        expected_sum = size * (size**2 + 1) \/\/ 2\n        for i in range(size):\n            if sum(matrix[i]) != expected_sum:\n                return False\n            for j in range(1, size):\n                if matrix[i][j] < matrix[i][0]:\n                    return False\n        for i in range(size):\n            if sum([matrix[j][i] for j in range(size)]) != expected_sum:\n                return False\n        for i in range(size):\n            if sum([matrix[j][i] for j in range(size)]) != expected_sum:\n                return False\n        return True\n\n    def generate_permutations(matrix):\n        size = len(matrix)\n        for p in permutations(range(1, size*size+1)):\n            if is_magic(p, matrix):\n                return p\n        return None\n\n    def is_magic(p, matrix):\n        size = len(matrix)\n        matrix[:] = p\n        for i in range(size):\n            if not is_magic_submatrix(matrix, i, i):\n                matrix[:] = p\n                return False\n        return True\n\n    def is_magic_submatrix(matrix, row, col):\n        size = len(matrix)\n        expected_sum = size * (size**2 + 1) \/\/ 2\n        for i in range(size):\n            if sum(matrix[row+i]) != expected_sum:\n                return False\n            if sum([matrix[j][col+i] for j in range(size)]) != expected_sum:\n                return False\n        return True\n\n    for p in permutations(range(1, 9)):\n        matrix = [list(p[i:i+3]) for i in range(0, 9, 3)]\n        if is_magic(p, matrix):\n            return matrix\n    return None"
    },
    {
        "id":120,
        "response":" def max_occurrences(nums):\n        max_count = 0\n        max_num = None\n        count_dict = {}\n        for num in nums:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n            if count_dict[num] > max_count:\n                max_count = count_dict[num]\n                max_num = num\n        return max_num"
    },
    {
        "id":121,
        "response":" from collections import Counter\n\n     def reverse_vowels(s):\n        vowels = 'aeiouAEIOU'\n        c = Counter(s)\n        s = list(s)\n        left, right = 0, len(s) - 1\n        while left < right:\n            if s[left] not in vowels:\n                left += 1\n            elif s[right] not in vowels:\n                right -= 1\n            else:\n                s[left], s[right] = s[right], s[left]\n                left += 1\n                right -= 1\n        return ''.join(s)"
    },
    {
        "id":122,
        "response":" def tup_string(tup1):\n        return ''.join(map(str, tup1))"
    },
    {
        "id":123,
        "response":" def sum_negativenum(nums):\n        return sum(num for num in nums if num < 0)"
    },
    {
        "id":124,
        "response":" def check_last(arr, n, p):\n        return arr[n-1] if n > 0 and p % n == 0 else None"
    },
    {
        "id":125,
        "response":" def hexagonal_num(n):\n        return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":" def cal_electbill(units, rate):\n        return units * rate"
    },
    {
        "id":127,
        "response":" def zero_count(nums):\n        return [i for i in range(len(nums)) if nums[i] == 0]"
    },
    {
        "id":128,
        "response":" def is_Sum_Of_Powers_Of_Two(n):\n      s = 0\n      while n:\n        s += n % 10 ** s\n        n \/\/= 10\n      return s == 2"
    },
    {
        "id":129,
        "response":" import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r"
    },
    {
        "id":130,
        "response":" from typing import List\n\n     def extract_singly(test_list: List) -> List:\n        return [i for i in test_list if test_list.count(i) == 1]"
    },
    {
        "id":131,
        "response":" from random import shuffle\nfrom typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for size in range(n, 0, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index == size - 1:\n            break\n        if max_index != 0:\n            if max_index != size:\n                nums[:max_index + 1] = nums[:max_index + 1][::-1]\n                nums[:size] = nums[:size][::-1]\n    return nums"
    },
    {
        "id":132,
        "response":" def count_samepair(list1, list2, list3):\n        return [i for i in range(len(list1)) if list1[i] == list2[i] and list1[i] == list3[i]]"
    },
    {
        "id":133,
        "response":" def find_lists(Input):\n    return len(tuple(Input))"
    },
    {
        "id":134,
        "response":" def sum_Pairs(arr):\n        return sum(abs(a - b) for a, b in zip(arr, arr[1:])) + max(abs(a - b) for a, b in zip(arr, arr[:-1]))"
    },
    {
        "id":135,
        "response":" from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n     mx_diff = 0\n     for i in range(1, len(arr)):\n         diff = abs(arr[i] - arr[i - 1])\n         if diff > mx_diff:\n             mx_diff = diff\n     return mx_diff"
    },
    {
        "id":136,
        "response":" from itertools import zip_longest\n\ndef ascii_value_string(str1):\n    return sum(ord(char) for char in str1)"
    },
    {
        "id":137,
        "response":" def max_path_sum(tri):\n        dp = [[0]*len(tri[0]) for _ in range(len(tri))]\n        for i in range(1, len(tri)):\n            for j in range(1, len(tri[0])):\n                dp[i][j] = max(tri[i][j] + min(dp[i-1][j], dp[i-1][j-1]), tri[i][j])\n        return max(max(row) for row in dp)\n\n     def max_path_sum(tri):\n        m, n = len(tri), len(tri[0])\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            dp[i][0] = tri[i][0]\n        for j in range(1, n):\n            dp[0][j] = tri[0][j] + dp[0][j-1]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = tri[i][j] + min(dp[i-1][j], dp[i][j-1])\n        return max(max(row) for row in dp)"
    },
    {
        "id":138,
        "response":" def sum_digits(x):\n        return sum(int(digit) for digit in str(x))"
    },
    {
        "id":139,
        "response":" def longest_subseq_with_diff_one(arr):\n        if len(arr) < 2:\n            return arr\n        max_len = 1\n        curr_len = 1\n        for i in range(1, len(arr)):\n            if arr[i] - arr[i - 1] == 1:\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_len = 1\n        return max(max_len, curr_len)"
    },
    {
        "id":140,
        "response":" from collections import Counter\nfrom typing import List\n\ndef does_Contain_B(a: int, b: int, c: int) -> bool:\n    return a in [b, c]"
    },
    {
        "id":141,
        "response":" from math import gcd\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True"
    },
    {
        "id":142,
        "response":" def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) \/\/ 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\ndef merge(a, b):\n    result = []\n    i, j = 0, 0\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n    result.extend(a[i:])\n    result.extend(b[j:])\n    return result"
    },
    {
        "id":143,
        "response":" def parabola_vertex(a, b, c):\n        if a == 0:\n            if b == 0:\n                if c == 0:\n                    return None\n                else:\n                    raise ValueError(\"\u09aa\u09cd\u09af\u09be\u09b0\u09be\u09ac\u09cb\u09b2\u09be \u09b8\u09ae\u09c0\u0995\u09b0\u09a3\u09c7\u09b0 \u098f\u0995\u099f\u09bf \u0985\u09b8\u09ae\u09a4\u09be \u0986\u099b\u09c7\")\n            else:\n                return -c \/ b\n        else:\n            return -b \/ (2 * a)"
    },
    {
        "id":144,
        "response":" from typing import List\n\n    def specified_element(nums: List[List[int]], N: int) -> List[int]:\n        return [nums[i][N] for i in range(len(nums))]"
    },
    {
        "id":145,
        "response":" from collections import deque\n\ndef even_bit_toggle_number(n):\n    queue = deque([n])\n    while queue:\n        num = queue.popleft()\n        num ^= 1\n        if num % 2 == 0:\n            queue.append(num)\n    return num"
    },
    {
        "id":146,
        "response":" def tuple_int_str(tuple_str):\n        return tuple(map(int, tuple_str))"
    },
    {
        "id":147,
        "response":" from typing import List\n\ndef encode_list(list1: List[int]) -> List[int]:\n    encoded_list = []\n    for i in list1:\n        encoded_list.append(i**2)\n    return encoded_list"
    },
    {
        "id":148,
        "response":" def min_Ops(arr,n,k):\n        arr.sort()\n        return arr[n-1] if k%2==0 else arr[n]"
    },
    {
        "id":149,
        "response":" from datetime import datetime\n\ndef month_season(month,days):\n    month_names = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    season_names = [\"Spring\", \"Summer\", \"Autumn\", \"Winter\"]\n    month_number = list(range(1,13))\n    month_map = dict(zip(month_names, month_number))\n    season_map = dict(zip(month_number, season_names))\n\n    month_season_map = {}\n    for key in month_map:\n        month_season_map[month_map[key]] = season_map[key]\n\n    season = month_season_map[month]\n    return season"
    },
    {
        "id":150,
        "response":" def extended_gcd(a, b):\n        if b == 0:\n            return a, 1, 0\n        gcd, x, y = extended_gcd(b, a % b)\n        return gcd, y, x - (a \/\/ b) * y\n\n     def solution(a, b, n):\n        gcd, x, y = extended_gcd(a, b)\n        if n % gcd != 0:\n            return None\n        x *= n \/\/ gcd\n        y *= n \/\/ gcd\n        return x, y"
    },
    {
        "id":151,
        "response":" from typing import List\n\n    def remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n        return [i for i in list1 if i not in list2]"
    },
    {
        "id":153,
        "response":" from math import sin\nfrom typing import List\n\ndef area_polygon(sides: int, lengths: List[float]) -> float:\n    return 0.5 * sides * sum(lengths)"
    },
    {
        "id":154,
        "response":" def divSum(n):\n        seen = set()\n        while n != 1:\n            for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    if i in seen:\n                        return False\n                    seen.add(i)\n                    n \/\/= i\n                    break\n            else:\n                if n in seen:\n                    return False\n                seen.add(n)\n                n = 1\n        return True"
    },
    {
        "id":155,
        "response":" from collections import Counter\n\ndef count_char_position(str1):\n    return Counter(c for c in str1 if c.isalpha()).most_common(1)[0][1]"
    },
    {
        "id":156,
        "response":" def find_even_Pair(A, N):\n        even = [i for i in A if i % 2 == 0]\n        odd = [i for i in A if i % 2 != 0]\n        return len(even), len(odd)"
    },
    {
        "id":157,
        "response":" def next_Power_Of_2(n):\n        power = 1\n        while power <= n:\n            if power == n or (power << 1) > n:\n                return power\n            power <<= 1"
    },
    {
        "id":158,
        "response":" from collections import Counter\ndef frequency(a,x):\n    return Counter(a).get(x,0)"
    },
    {
        "id":159,
        "response":" from math import sqrt\n\ndef get_pell(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + 2 * b\n    return a"
    },
    {
        "id":160,
        "response":" from typing import List\n\n     def sum_range_list(list1: List[int], m: int, n: int) -> int:\n        return sum(num for num in list1 if m <= num <= n)"
    },
    {
        "id":161,
        "response":" def perimeter_pentagon(a):\n        return 5 * a"
    },
    {
        "id":162,
        "response":" def count_occurance(s):\n        return s.count('std')"
    },
    {
        "id":163,
        "response":" from re import sub\n\ndef remove_splchar(text):\n    return sub('[^a-zA-Z\\s]', '', text)"
    },
    {
        "id":164,
        "response":" from collections import defaultdict\n\ndef group_keyvalue(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[v].append(k)\n    return list(d.values())"
    },
    {
        "id":165,
        "response":" def is_valid_parenthese(s):\n        stack = []\n        pairs = {')': '(', '}': '{', ']': '['}\n        for char in s:\n            if char in pairs.values():\n                stack.append(char)\n            elif char in pairs.keys():\n                if not stack or stack.pop() != pairs[char]:\n                    return False\n        return not stack"
    },
    {
        "id":166,
        "response":" from typing import Union\n\n     def perimeter_triangle(a: Union[int, float], b: Union[int, float], c: Union[int, float]) -> Union[int, float]:\n        if a + b <= c or a + c <= b or b + c <= a:\n            return 0\n        return a + b + c"
    },
    {
        "id":167,
        "response":" def answer(L, R):\n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        def lcm(a, b):\n            return a * b \/\/ gcd(a, b)\n        result = []\n        for i in range(L, R + 1):\n            for j in range(i + 1, R + 1):\n                if lcm(i, j) >= L and lcm(i, j) <= R:\n                    result.append((i, j))\n        return result"
    },
    {
        "id":168,
        "response":" from typing import List\n\n     def string_literals(patterns: List[str], text: str) -> List[str]:\n        result = []\n        for pattern in patterns:\n            match = re.search(pattern, text)\n            if match:\n                result.append(match.group())\n        return result"
    },
    {
        "id":169,
        "response":" def is_num_keith(x):\n        return 'keith' in str(x)"
    },
    {
        "id":170,
        "response":" from math import radians, sin, cos, sqrt, atan2\nfrom typing import Tuple\n\ndef distance_lat_long(slat: float, slon: float, elat: float, elon: float) -> float:\n    R = 6371\n    dlat = radians(elat - slat)\n    dlon = radians(elon - slon)\n    a = sin(dlat \/ 2) ** 2 + cos(radians(slat)) * cos(radians(elat)) * sin(dlon \/ 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c"
    },
    {
        "id":171,
        "response":" def common_prefix_util(str1, str2):\n        i = 0\n        while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n            i += 1\n        return str1[:i]"
    },
    {
        "id":172,
        "response":" from re import findall\n\ndef find_character(string):\n    return findall('[\\W_]+', string)"
    },
    {
        "id":173,
        "response":" def count_pairs(arr, k):\n        if len(arr) <= 1:\n            return 0\n        arr.sort()\n        left, right = 0, len(arr) - 1\n        pairs = 0\n        while left < right:\n            if arr[right] - arr[left] >= k:\n                right -= 1\n            else:\n                pairs += right - left\n                left += 1\n        return pairs"
    },
    {
        "id":174,
        "response":" def greater_specificnum(lst, num):\n        return [i for i in lst if i > num]"
    },
    {
        "id":175,
        "response":" from math import sqrt\n\ndef parabola_focus(a, b, c):\n    return (-b, -b**2\/(4*a))"
    },
    {
        "id":176,
        "response":" def check_literals(text, patterns):\n        import re\n        for pattern in patterns:\n            if re.search(pattern, text):\n                return True\n        return False"
    },
    {
        "id":177,
        "response":" def longest_common_subsequence(X, Y, m, n):\n        L = [[0 for i in range(n+1)] for j in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1])\n        return L[m][n]"
    },
    {
        "id":178,
        "response":" def prod_Square(n):\n        i = 1\n        while i * i <= n:\n            j = 1\n            while j * i * j <= n:\n                if i * i + j * j == n:\n                    return True\n                j += 1\n            i += 1\n        return False"
    },
    {
        "id":179,
        "response":" def first_Missing_Positive(arr,n):\n        arr = set(arr)\n        for i in range(1,n+1):\n            if i not in arr:\n                return i\n        return n+1"
    },
    {
        "id":180,
        "response":" def count_integral_points(x1, y1, x2, y2):\n        return (x2 - x1) * (y2 - y1)"
    },
    {
        "id":181,
        "response":" from calendar import monthrange\n\ndef check_monthnumber(monthname):\n    month, days_in_month = monthrange(int(monthname[-2:]), int(monthname[:-2]))\n    return days_in_month == 30"
    },
    {
        "id":182,
        "response":" def check_String(s):\n        return any(c.isalpha() for c in s) and any(c.isdigit() for c in s)"
    },
    {
        "id":183,
        "response":" from typing import Tuple\n\ndef remove_duplicates(tup: Tuple) -> Tuple:\n    return tuple(set(tup))"
    },
    {
        "id":184,
        "response":" from typing import Union\n\n     def octal_To_Decimal(n: str) -> Union[int, float]:\n        return int(n, 8)"
    },
    {
        "id":185,
        "response":" from typing import List\n\n     def first(arr: List[int], x: int) -> int:\n        for i in range(n):\n            if arr[i] == x:\n                return i\n        return -1"
    },
    {
        "id":186,
        "response":" from itertools import combinations\n\ndef remove_tuples(test_list, K):\n  return [x for x in test_list if len(x) != K]"
    },
    {
        "id":187,
        "response":" from typing import Tuple\n\ndef find_exponentio(test_tup1: Tuple[int, int], test_tup2: Tuple[int, int]) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    return test_tup1, test_tup2"
    },
    {
        "id":188,
        "response":" def largest_triangle(a, b):\n        return max(a, b)"
    },
    {
        "id":189,
        "response":" def highest_Power_of_2(n):\n        power = 0\n        while n > 0:\n            n = n \/\/ 2\n            power += 1\n        return 2 ** (power - 1)"
    },
    {
        "id":190,
        "response":" def position_max(lst):\n        return [i for i, x in enumerate(lst) if x == max(lst)]"
    },
    {
        "id":191,
        "response":" from typing import List\n\n     def chkList(lst: List) -> bool:\n        return len(set(lst)) == 1"
    },
    {
        "id":192,
        "response":" def remove_even(s):\n        return ''.join([c for i, c in enumerate(s) if i % 2 != 0])"
    },
    {
        "id":193,
        "response":" def hamming_Distance(n1,n2) :\n        return abs(n1-n2)"
    },
    {
        "id":194,
        "response":" from collections import Counter\n\ndef count(s,c):\n    return Counter(s).get(c,0)"
    },
    {
        "id":195,
        "response":" from typing import Tuple\n\ndef inversion_elements(test_tup):\n    return tuple(reversed(test_tup))"
    },
    {
        "id":196,
        "response":" from typing import Tuple\n\ndef concatenate_elements(test_tup: Tuple) -> Tuple:\n    return test_tup[0] + test_tup[1]"
    },
    {
        "id":197,
        "response":" def find_longest_repeating_subseq(s):\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        max_len = 0\n        for length in range(1, n):\n            for i in range(n - length):\n                j = i + length\n                for k in range(i, j):\n                    if s[i] == s[k] and s[i] == s[j] and not dp[i + 1][k] and not dp[k + 1][j]:\n                        dp[i][j] = True\n                        max_len = max(max_len, length + 1)\n        return s[:max_len]"
    },
    {
        "id":198,
        "response":" from decimal import Decimal, InvalidOperation\n\ndef is_decimal(num):\n    try:\n        Decimal(str(num))\n        return True\n    except InvalidOperation:\n        return False"
    },
    {
        "id":199,
        "response":" def heap_replace(heap, a):\n        if not heap:\n            return [a]\n        if heap[0] <= a:\n            return [a]\n        heap[0] = a\n        heapify_max(heap, 0)\n        return heap\n\ndef heapify_max(heap, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    largest = i\n    if left < len(heap) and heap[left] > heap[largest]:\n        largest = left\n    if right < len(heap) and heap[right] > heap[largest]:\n        largest = right\n    if largest != i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        heapify_max(heap, largest)"
    },
    {
        "id":200,
        "response":" from re import fullmatch\n\ndef is_allowed_specific_char(string, allowed_chars):\n    return bool(fullmatch('[' + allowed_chars + ']', string))"
    },
    {
        "id":201,
        "response":" def count_Num(n):\n        return bin(n).count('1') + bin(n).count('0')"
    },
    {
        "id":202,
        "response":" from math import pow\n     def fourth_Power_Sum(n):\n         return sum(pow(i, 4) for i in range(1, n+1))"
    },
    {
        "id":203,
        "response":" from typing import Tuple\n\n     def concatenate_strings(test_tup1: Tuple[str, str], test_tup2: Tuple[str, str]) -> Tuple[str, str]:\n        return test_tup1 + test_tup2"
    },
    {
        "id":204,
        "response":" from math import pi\n\ndef degree_radian(radian):\n    return radian * 180 \/ pi"
    },
    {
        "id":205,
        "response":" from typing import List\n\n     def decode_list(alist: List[int]) -> List[int]:\n        result = []\n        for num in alist:\n            result.append(num * 2)\n        return result"
    },
    {
        "id":206,
        "response":" from typing import List, Set\n\ndef check_subset_list(list1: List, list2: List) -> bool:\n    return set(list1).issubset(set(list2))"
    },
    {
        "id":207,
        "response":" def first_Repeated_Char(s):\n        seen = set()\n        for char in s:\n            if s.count(char) > 1 and char not in seen:\n                return char\n            seen.add(char)\n        return None"
    },
    {
        "id":208,
        "response":" def min_Operations(A,B):\n        operations = {'+': 1, '-': 1, '*': 2, '\/': 2}\n        A_str, B_str = str(A), str(B)\n        A_len, B_len = len(A_str), len(B_str)\n        min_len = min(A_len, B_len)\n        for i in range(1, min_len + 1):\n            for op in operations:\n                if A_str[:i] == B_str[:i]:\n                    for j in range(i, max(A_len, B_len) + 1):\n                        if A_str[i:] == B_str[j:]:\n                            return i + j\n        return A_len + B_len"
    },
    {
        "id":209,
        "response":" def extract_min_max(test_tup, K):\n        test_tup = list(test_tup)\n        test_tup.sort()\n        return (test_tup[K-1], test_tup[-1])"
    },
    {
        "id":210,
        "response":" def replace_max_specialchar(text,n):\n        special_chars = set(' !@#$%^&*()_+-={}:<>?\/.,;[]\\\\|')\n        max_special = max(text, key=lambda x: x in special_chars)\n        return text.replace(max_special, ' ')"
    },
    {
        "id":211,
        "response":" def first_even(nums):\n        even = [num for num in nums if num % 2 == 0]\n        return even[0] if even else None"
    },
    {
        "id":212,
        "response":" from typing import Tuple\n\ndef check_type(test_tuple):\n    return test_tuple"
    },
    {
        "id":213,
        "response":" def is_majority(arr, n, x):\n        counts = {}\n        for i in range(n):\n            counts[arr[i]] = counts.get(arr[i], 0) + 1\n        max_count = max(counts.values())\n        return [key for key, value in counts.items() if value == max_count]"
    },
    {
        "id":214,
        "response":" def count_Set_Bits(n):\n        return bin(n).count('1')"
    },
    {
        "id":215,
        "response":" def find_Min(arr, low, high):\n        if low == high:\n            return arr[low]\n        mid = (low + high) \/\/ 2\n        if mid == low:\n            return arr[mid]\n        if mid > low:\n            if arr[mid] < arr[low]:\n                return arr[mid]\n            else:\n                return find_Min(arr, low, mid)\n        if mid < high:\n            if arr[mid] < arr[high]:\n                return arr[mid]\n            else:\n                return find_Min(arr, mid + 1, high)"
    },
    {
        "id":216,
        "response":" def odd_values_string(s):\n        return ''.join([c for c in s if c not in 'aeiou'])"
    },
    {
        "id":217,
        "response":" def min_of_three(a,b,c):\n        return min(a,b,c)"
    },
    {
        "id":218,
        "response":" def all_Bits_Set_In_The_Given_Range(n,l,r):\n        return (n & ((1 << r) - 1) == (1 << l) - 1)"
    },
    {
        "id":219,
        "response":" def re_arrange_array(arr):\n        return sorted([x for x in arr if x > 0], reverse=True) + [x for x in arr if x <= 0]"
    },
    {
        "id":220,
        "response":" from typing import List\n\ndef replace_blank(str1,char):\n    return str1.replace(' ', char)"
    },
    {
        "id":221,
        "response":" def max_sum(tri, n):\n        return sum(max(tri[i], tri[i+1], tri[i+2]) for i in range(n-2)) + max(tri[0], tri[1], tri[2])"
    },
    {
        "id":222,
        "response":" from typing import List\n\n     def larg_nnum(list1, n):\n        return sorted(list1, key=lambda x: len(x), reverse=True)[:n]"
    },
    {
        "id":223,
        "response":" from math import pi\n\ndef lateralsurface_cylinder(r,h):\n    return 2*pi*r*h"
    },
    {
        "id":224,
        "response":" def volume_cube(s):\n        return s**3"
    },
    {
        "id":225,
        "response":" def even_bit_set_number(n):\n        return n & 0xAAAAAAAA"
    },
    {
        "id":226,
        "response":" from math import sqrt\n\ndef No_of_Triangle(N,K):\n    return int(sqrt(N**2-K**2))"
    },
    {
        "id":227,
        "response":" def check_occurences(test_list):\n        from collections import defaultdict\n        from typing import List\n\n        def helper(lst: List[tuple], d: defaultdict):\n            for i in lst:\n                d[i[0]].append(i[1])\n            return d\n\n        return helper(test_list, defaultdict())\n\n     def check_occurences(test_list):\n        from collections import defaultdict\n        from typing import List\n\n        def helper(lst: List[tuple], d: defaultdict):\n            for i in lst:\n                d[i[0]].append(i[1])\n            return d\n\n        return helper(test_list, defaultdict())"
    },
    {
        "id":228,
        "response":" from typing import List\n\n     def number_of_substrings(s: str) -> int:\n        return len(s.split())"
    },
    {
        "id":229,
        "response":" from itertools import count\n\ndef get_total_number_of_sequences(m, n):\n    count = 0\n    prev = 1\n    for i in count():\n        if i <= m and i >= prev:\n            count += 1\n        if i == n:\n            break\n        prev = i\n    return count"
    },
    {
        "id":230,
        "response":" from typing import List\n\ndef replace_last(list1: List, list2: List) -> List:\n    if len(list1) == 0 or len(list2) == 0:\n        return list1\n    return list1[:-1] + list2"
    },
    {
        "id":231,
        "response":" def array_3d(m,n,o):\n        return [[[('*') for _ in range(o)] for _ in range(n)] for _ in range(m)]"
    },
    {
        "id":232,
        "response":" def count_charac(s):\n        return len(s)"
    },
    {
        "id":233,
        "response":" from collections import Counter\n\ndef sort_on_occurence(lst):\n    return [i for i in lst if Counter(i)[0]]"
    },
    {
        "id":234,
        "response":" def next_Perfect_Square(N):\n        i = 1\n        while i * i <= N:\n            i += 1\n        return i * i"
    },
    {
        "id":235,
        "response":" def max_sum(arr, n):\n        dp = [0] * n\n        for i in range(n):\n            dp[i] = arr[i]\n            if i > 0:\n                dp[i] = max(dp[i], dp[i - 1] + arr[i])\n        return max(dp)"
    },
    {
        "id":236,
        "response":" def babylonian_squareroot(number):\n        if number < 0:\n            return None\n        x = number\n        y = (x + 1) \/ 2\n        while y < x:\n            x = y\n            y = (x + number \/ x) \/ 2\n        return x"
    },
    {
        "id":237,
        "response":" def lps(s):\n        n = len(s)\n        lps_array = [0] * n\n        i = 1\n        j = 0\n        while i < n:\n            if s[i] == s[j]:\n                lps_array[i] = j + 1\n                i += 1\n                j += 1\n            elif j != 0:\n                j = lps_array[j - 1]\n            else:\n                lps_array[i] = 0\n                i += 1\n        max_length = 0\n        max_index = 0\n        for i in range(n):\n            if lps_array[i] > max_length:\n                max_length = lps_array[i]\n                max_index = i\n        return s[max_index - max_length + 1: max_index + 1]"
    },
    {
        "id":238,
        "response":" from math import factorial\n\ndef harmonic_sum(n):\n    return sum(1 \/ i for i in range(1, n + 1) if i != 1)"
    },
    {
        "id":239,
        "response":" def intersection_array(array_nums1, array_nums2):\n        set1 = set(array_nums1)\n        set2 = set(array_nums2)\n        return list(set1.intersection(set2))"
    },
    {
        "id":240,
        "response":" from typing import Tuple\n\ndef count_X(tup, x):\n     return tup.count(x)"
    },
    {
        "id":241,
        "response":" def insert_element(lst, element):\n        return lst + [element]"
    },
    {
        "id":242,
        "response":" from fractions import Fraction\n\ndef convert(numbers):\n    return [Fraction(num).limit_denominator() for num in numbers]"
    },
    {
        "id":243,
        "response":" def count_integer(lst):\n        return [i for i in lst if isinstance(i, int)]"
    },
    {
        "id":244,
        "response":" from typing import List\n\n     def words_ae(text: str) -> List[str]:\n        return [word for word in text.split() if word[0] in ['a', 'e']]"
    },
    {
        "id":245,
        "response":" from itertools import combinations\n\n     def combinations_colors(l, n):\n        return list(combinations(l, n))"
    },
    {
        "id":246,
        "response":" from typing import List\n\n    def count_primes_nums(n: int) -> int:\n        def is_prime(num: int) -> bool:\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        count = 0\n        for i in range(n):\n            if is_prime(i):\n                count += 1\n        return count"
    },
    {
        "id":247,
        "response":" def swap_numbers(a, b):\n        return b, a"
    },
    {
        "id":248,
        "response":" from collections import Counter\nfrom typing import List\n\ndef count_odd(lst: List[int]) -> int:\n    return len(Counter(filter(lambda x: x % 2 != 0, lst)))"
    },
    {
        "id":249,
        "response":" from itertools import zip_longest\n\ndef maximize_elements(test_tup1, test_tup2):\n    return tuple(max(t1, t2) for t1, t2 in zip_longest(test_tup1, test_tup2, fillvalue=0))"
    },
    {
        "id":250,
        "response":" def newman_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "id":251,
        "response":" from typing import Tuple\n\n     def division_elements(test_tup1: Tuple[int, int], test_tup2: Tuple[int, int]) -> Tuple[int, int]:\n        if test_tup2[1] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        return (test_tup1[0] \/\/ test_tup2[0], test_tup1[1] \/\/ test_tup2[1])"
    },
    {
        "id":252,
        "response":" from typing import List\n\n     def split_two_parts(list1: List[int], L: int) -> List[List[int]]:\n        return list1[:L] + list1[L:]"
    },
    {
        "id":253,
        "response":" from collections import Counter\n\ndef merge_dict(d1, d2):\n    return dict(Counter(d1) + Counter(d2))"
    },
    {
        "id":254,
        "response":" from datetime import datetime\n\ndef dog_age(h_age):\n    today = datetime.now()\n    dog_birth = datetime.strptime(h_age, '%Y-%m-%d')\n    return today.year - dog_birth.year - ((today.month, today.day) < (dog_birth.month, dog_birth.day))"
    },
    {
        "id":255,
        "response":" from typing import List\n\ndef list_split(S: List[int], step: int) -> List[List[int]]:\n    return [S[i:i + step] for i in range(0, len(S), step)]"
    },
    {
        "id":256,
        "response":" def lateralsurface_cube(l):\n        return 6*l**2"
    },
    {
        "id":257,
        "response":" def square_Sum(n):\n        return sum(i**2 for i in range(1, n+1))"
    },
    {
        "id":258,
        "response":" def find_star_num(n):\n        return n ** 2"
    },
    {
        "id":259,
        "response":" from typing import Dict\n\ndef ascii_value(k: str) -> int:\n    return ord(k)"
    },
    {
        "id":260,
        "response":" def sum_even_and_even_index(arr, n):\n        return [arr[i] + arr[i+1] for i in range(0, len(arr) - 1, 2)]"
    },
    {
        "id":261,
        "response":" from math import pow\nfrom typing import List\n\ndef even_Power_Sum(n: int) -> int:\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += pow(i, 5)\n    return sum"
    },
    {
        "id":262,
        "response":" from typing import List\n\n     def rear_extract(test_list: List) -> List:\n        return test_list[::-1]"
    },
    {
        "id":263,
        "response":" from typing import Tuple\n\n     def substract_elements(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n        return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1]"
    },
    {
        "id":264,
        "response":" from math import comb\n     def even_binomial_Coeff_Sum(n):\n        return comb(2*n, n)"
    },
    {
        "id":265,
        "response":" def get_Position(a, n, m):\n        return a[n-1]"
    },
    {
        "id":266,
        "response":" from math import pi\n\ndef volume_cylinder(r,h):\n    return pi * r**2 * h"
    },
    {
        "id":267,
        "response":" from collections import Counter\n\ndef dict_filter(dict,n):\n  return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "id":268,
        "response":" def count_first_elements(test_tup):\n        if len(test_tup) == 0:\n            return 0\n        if len(test_tup) == 1:\n            return test_tup[0]\n        return test_tup[0] + count_first_elements(test_tup[1:])"
    },
    {
        "id":269,
        "response":" from decimal import Decimal\n\ndef nth_decagonal(n):\n    a, b = 1, 2\n    for _ in range(n):\n        a, b = b, 3*a + b\n    return a"
    },
    {
        "id":270,
        "response":" from typing import List\n\n     def sequential_search(dlist: List[int], item: int) -> int:\n        for i in range(len(dlist)):\n            if dlist[i] == item:\n                return i\n        return -1"
    },
    {
        "id":271,
        "response":" from typing import List\n\n     def all_unique(test_list: List) -> bool:\n        return len(test_list) == len(set(test_list))"
    },
    {
        "id":272,
        "response":" from typing import List\n\n     def sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n        return [i for i in nums1 if i not in nums2]"
    },
    {
        "id":273,
        "response":" from collections import Counter\n\ndef validate(n):\n    counter = Counter(str(n))\n    for digit in '0123456789':\n        if counter[digit] > 0 and counter[digit] >= int(digit):\n            return False\n    return True"
    },
    {
        "id":274,
        "response":" from typing import List\n\n     def check_equal(list: List[str], element: str) -> bool:\n        return list == [element] * len(list)"
    },
    {
        "id":275,
        "response":" from re import search\n\ndef text_match_two_three(text):\n    return search(r'ab{2,3}b', text) is not None"
    },
    {
        "id":276,
        "response":" def max_sub_array_sum_repeated(a, n, k):\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + a[i]\n        max_sum = float('-inf')\n        for i in range(n):\n            for j in range(i, n, k):\n                current_sum = prefix_sum[j + 1] - prefix_sum[i]\n                max_sum = max(max_sum, current_sum)\n        return max_sum"
    },
    {
        "id":277,
        "response":" def square_Sum(n):\n        return sum(i**2 for i in range(1, n+1) if i % 2 == 0)"
    },
    {
        "id":278,
        "response":" from typing import List\n\n     def modular_inverse(arr: List[int], N: int, P: int) -> List[int]:\n        def extended_gcd(a: int, b: int) -> tuple:\n            if a == 0:\n                return b, 0, 1\n            else:\n                gcd, x, y = extended_gcd(b % a, a)\n                return gcd, y - (b \/\/ a) * x, x\n\n        def mod_inv(a: int, m: int) -> int:\n            gcd, x, y = extended_gcd(a, m)\n            if gcd != 1:\n                return None\n            else:\n                return x % m\n\n        result = []\n        for num in arr:\n            inv = mod_inv(num, P)\n            if inv is None:\n                result.append(0)\n            else:\n                result.append(inv)\n        return result"
    },
    {
        "id":279,
        "response":" def odd_Days(N):\n        return N % 4 == 0"
    },
    {
        "id":280,
        "response":" def max_length(lst):\n        return max(lst, key=len)"
    },
    {
        "id":281,
        "response":" from collections import defaultdict\nfrom math import comb\n\ndef count_no_of_ways(n, k):\n    def dp(n, last_color, memo):\n        if n == 0:\n            return 1\n        if (n, last_color) in memo:\n            return memo[(n, last_color)]\n        ways = 0\n        for i in range(k):\n            if i != last_color:\n                ways += dp(n-1, i, memo)\n        memo[(n, last_color)] = ways\n        return ways\n\n    return dp(n, 0, defaultdict(int))"
    },
    {
        "id":282,
        "response":" from typing import Optional\n\ndef find(n: int, m: int) -> Optional[int]:\n  if m == 0:\n    return None\n  return n \/\/ m"
    },
    {
        "id":283,
        "response":" from typing import Tuple\n\ndef otherside_rightangle(w, h):\n    return h"
    },
    {
        "id":284,
        "response":" def max_val(lst):\n        return max(lst)"
    },
    {
        "id":285,
        "response":" def sum_div(number):\n        result = 0\n        for i in range(1, number + 1):\n            if number % i == 0:\n                result += i\n        return result"
    },
    {
        "id":286,
        "response":" def get_Inv_Count(arr):\n        return len(arr) - sum(1 for x in arr if x == 0)"
    },
    {
        "id":287,
        "response":" from typing import Any, List\n\n     def flatten_list(nested_list: List[Any]) -> List[Any]:\n         flat_list = []\n         for item in nested_list:\n             if isinstance(item, list):\n                 flat_list.extend(flatten_list(item))\n             else:\n                 flat_list.append(item)\n         return flat_list"
    },
    {
        "id":288,
        "response":" def intersection_nested_lists(l1, l2):\n        s1 = set(tuple(x) for x in l1)\n        s2 = set(tuple(x) for x in l2)\n        return [x for x in l1 if x in s2]"
    },
    {
        "id":289,
        "response":" def max_aggregate(lst):\n        return max(sum(lst), len(lst))"
    },
    {
        "id":290,
        "response":" from itertools import chain, combinations\n\n    def count_binary_seq(n):\n        return 2**n"
    },
    {
        "id":291,
        "response":" from collections import defaultdict\n\ndef dict_depth(d):\n    if not d:\n        return 0\n    max_depth = 0\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = 1 + dict_depth(v)\n            max_depth = max(max_depth, depth)\n    return max_depth"
    },
    {
        "id":292,
        "response":" def set_Bit_Number(n):\n        return n & -n"
    },
    {
        "id":293,
        "response":" from itertools import combinations\n\ndef solve(a, b):\n    return len(list(set(a) & set(b))) == 0 or len(list(set(a) ^ set(b))) == 0"
    },
    {
        "id":294,
        "response":" from typing import List\n\ndef find_Element(arr: List[int], ranges: List[int], rotations: int, index: int) -> int:\n  def find_element(arr: List[int], low: int, high: int, rotations: int, index: int) -> int:\n    if low > high:\n      return -1\n    mid = (low + high) \/\/ 2\n    if arr[mid] == ranges[index]:\n      return arr[mid]\n    if rotations % 2 == 0:\n      if arr[mid] < ranges[index]:\n        return find_element(arr, mid + 1, high, rotations, index)\n      else:\n        return find_element(arr, low, mid - 1, rotations, index)\n    else:\n      if arr[mid] < ranges[index]:\n        return find_element(arr, mid + 1, high, rotations + 1, index)\n      else:\n        return find_element(arr, low, mid - 1, rotations + 1, index)\n  return find_element(arr, 0, len(arr) - 1, rotations, index)"
    },
    {
        "id":295,
        "response":" from typing import List\n\n     def start_withp(words: List[str]) -> List[str]:\n        return [word for word in words if word.startswith('\u09aa\u09bf')]"
    },
    {
        "id":296,
        "response":" def max_sum_increasing_subseq(a, n, index, k):\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            max_val = float('-inf')\n            for j in range(index, n):\n                max_val = max(max_val, dp[i - 1][j - 1] + a[j])\n                dp[i][j] = max_val\n        return dp[k][n - 1]"
    },
    {
        "id":298,
        "response":" def large_product(nums1, nums2, N):\n        return max(nums1) * max(nums2)"
    },
    {
        "id":299,
        "response":" from typing import Union\n\ndef maximum(a: int, b: int) -> Union[int, None]:\n    return max(a, b) if a != b else None"
    },
    {
        "id":300,
        "response":" def string_to_tuple(s):\n        return tuple(s)"
    },
    {
        "id":301,
        "response":" from typing import Int32\n\ndef set_left_most_unset_bit(n: Int32) -> Int32:\n  n |= n & -n\n  return n"
    },
    {
        "id":302,
        "response":" from math import pi\n\ndef volume_cone(r,h):\n    return (1\/3)*pi*(r**2)*h"
    },
    {
        "id":303,
        "response":" from typing import List\n\ndef pos_nos(lst: List[int]) -> List[int]:\n    return [i for i in lst if i > 0]"
    },
    {
        "id":304,
        "response":" def max_sum_rectangular_grid(grid, n):\n        def is_valid(i, j):\n            return 0 <= i < n and 0 <= j < n\n\n        max_sum = float('-inf')\n        for i in range(n):\n            for j in range(n):\n                if not is_valid(i, j):\n                    continue\n                for k in range(i + 1, n):\n                    for end_col in range(j + 1, n):\n                        sum = 0\n                        for row in range(i, k):\n                            for col in range(j, end_col):\n                                sum += grid[row][col]\n                        max_sum = max(max_sum, sum)\n        return max_sum"
    },
    {
        "id":305,
        "response":" def find_Max_Len_Even(s):\n        return max(filter(lambda x: len(x) % 2 == 0, s))"
    },
    {
        "id":306,
        "response":" def find_last_occurrence(A, x):\n        i = len(A) - 1\n        while i >= 0:\n            if A[i] == x:\n                return i\n            i -= 1\n        return -1"
    },
    {
        "id":307,
        "response":" from typing import List\n\ndef modified_encode(alist: List[int]) -> List[int]:\n    return [x**2 if x % 2 == 0 else x for x in alist]"
    },
    {
        "id":308,
        "response":" def max_volume(s):\n        return max([sum(int(digit)**3 for digit in str(num)) for num in s])"
    },
    {
        "id":309,
        "response":" from re import findall\nfrom typing import List\n\ndef find_long_word(text: str) -> List[str]:\n    return findall(r'\\b\\w{5}\\b', text)"
    },
    {
        "id":310,
        "response":" from typing import List\n\n     def sum_difference(n: int) -> int:\n        return sum(i**2 for i in range(1, n+1)) - sum(i**2 for i in range(1, n+1))"
    },
    {
        "id":311,
        "response":" def find_demlo(s):\n        i = 0\n        while i < len(s):\n            if s[i] == '0':\n                i += 1\n                while i < len(s) and s[i] == '0':\n                    i += 1\n            else:\n                break\n        return s[i:]"
    },
    {
        "id":312,
        "response":" from typing import List\n\ndef position_min(lst: List[int]) -> List[int]:\n    return [i for i, x in enumerate(lst) if x == min(lst)]"
    },
    {
        "id":313,
        "response":" def right_rotate(arr, n, out_of_place, cur):\n        left = arr[:n]\n        right = arr[n:]\n        result = []\n        while len(left) > 0 or len(right) > 0:\n            if len(left) > 0:\n                result.append(left.pop(0))\n            if len(right) > 0:\n                result.append(right.pop(0))\n        if out_of_place:\n            result.extend(left)\n            result.extend(right)\n        return result"
    },
    {
        "id":314,
        "response":" from typing import Tuple\n\ndef sum_of_alternates(test_tuple: Tuple[int, int]) -> int:\n    return test_tuple[0] + test_tuple[1]"
    },
    {
        "id":315,
        "response":" def get_Min_Squares(n):\n        i = 1\n        while i * i <= n:\n            if n % i == 0:\n                return i + n \/\/ i\n            i += 1"
    },
    {
        "id":316,
        "response":" from collections import Counter\n     from typing import List\n\n     def most_occurrences(test_list: List[str]) -> str:\n        return Counter(test_list).most_common(1)[0][0]"
    },
    {
        "id":317,
        "response":" from math import sqrt\n     def check_isosceles(x,y,z):\n        if x**2 + y**2 == z**2 or x**2 + z**2 == y**2 or y**2 + z**2 == x**2:\n            return 1\n        else:\n            return 0"
    },
    {
        "id":318,
        "response":" from collections import deque\n\ndef rotate_left(lst, n):\n    n = n % len(lst)\n    return deque(lst[-n:]) + deque(lst[:-n])"
    },
    {
        "id":319,
        "response":" def neg_count(lst):\n        return [i for i in lst if i < 0]"
    },
    {
        "id":320,
        "response":" from re import findall\n     from typing import List\n\n     def find_long_words(text: str) -> List[str]:\n        return findall(r'\\b\\w{3,5}\\b', text)"
    },
    {
        "id":321,
        "response":" from collections import Counter\n\ndef count_unset_bits(n):\n    return bin(n).count('0')"
    },
    {
        "id":322,
        "response":" from collections import Counter\n\ndef char_frequency(s):\n    return Counter(s)"
    },
    {
        "id":323,
        "response":" from typing import List\n\ndef Sort(sub_li):\n    return sorted(sub_li, key=lambda x: sub_li[1])"
    },
    {
        "id":324,
        "response":" from math import sqrt\n\ndef check_Validity(a,b,c):\n    s = (a+b+c)\/2\n    return (s*(s-a)*(s-b)*(s-c) >= 0)"
    },
    {
        "id":325,
        "response":" from typing import List\n\n     def ap_sum(a: List[int], n: int, d: int) -> int:\n        return sum(a)"
    },
    {
        "id":326,
        "response":" def check_monthnum(monthname):\n        month = {\n            'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31\n        }\n        return 28 if month[monthname] == 28 else 29 if month[monthname] == 29 else 30 if month[name] in [30,31] else 31"
    },
    {
        "id":327,
        "response":" from re import search\n\ndef text_match_word(text):\n    return search(r'\\b\\w+\\b', text)"
    },
    {
        "id":328,
        "response":" def count_substrings(s):\n        def is_substring(s1, s2):\n            return s2.startswith(s1) and len(s2) >= len(s1)\n        return sum(1 for s1 in s for s2 in s if is_substring(s1, s2))"
    },
    {
        "id":329,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef find_Divisor(x,y):\n    def lcm(a, b):\n        return a * b \/\/ gcd(a, b)\n    return reduce(lcm, range(1, min(x,y)+1))"
    },
    {
        "id":330,
        "response":" from typing import List\n\ndef sum_three_smallest_nums(lst: List[int]) -> int:\n    lst.sort()\n    return sum(lst[:3])"
    },
    {
        "id":331,
        "response":" def set_to_tuple(s):\n        return tuple(s)"
    },
    {
        "id":332,
        "response":" def find_min_range(arr):\n        arr.sort()\n        min_range = float('inf')\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if all(x in arr[j] for x in arr[i]):\n                    min_range = min(min_range, arr[j] - arr[i])\n        return min_range"
    },
    {
        "id":333,
        "response":" from typing import List\n\n    def dig_let(s: str) -> int:\n        return sum(c.isdigit() for c in s) + sum(c.isalpha() for c in s)"
    },
    {
        "id":334,
        "response":" from collections import Counter\nfrom typing import List\n\ndef count_Odd_Squares(n,m):\n    counter = Counter()\n    for i in range(n,m):\n        if i % 2 != 0:\n            counter[i] += 1\n    return counter"
    },
    {
        "id":335,
        "response":" def diff_consecutivenums(nums):\n        if len(nums) < 2:\n            return []\n        return [nums[i+1] - nums[i] for i in range(len(nums)-1)]"
    },
    {
        "id":336,
        "response":" from collections import deque\n\ndef zigzag(n, k):\n    return n"
    },
    {
        "id":337,
        "response":" from math import sqrt\n\ndef count_Squares(m,n):\n  return int(sqrt(m**2 + n**2))"
    },
    {
        "id":338,
        "response":" from itertools import combinations\n\ndef bin_coff(n, r):\n    def is_non_negative_sum(comb):\n        return sum(comb) >= 0\n\n    return len(list(filter(is_non_negative_sum, combinations(range(n), r)))"
    },
    {
        "id":339,
        "response":" from typing import Union\n\ndef check(string: str) -> Union[int, str]:\n    try:\n        int(string, 2)\n        return \"Binary\"\n    except ValueError:\n        return \"Not Binary\""
    },
    {
        "id":340,
        "response":" def minimum_Length(s):\n        return min(s) if len(s) > 1 else s"
    },
    {
        "id":341,
        "response":" def first_Element(arr,n,k):\n        return arr[k-1]"
    },
    {
        "id":342,
        "response":" from typing import Set\n\ndef unique_Characters(str):\n    return \"\".join(set(str))"
    },
    {
        "id":343,
        "response":" from typing import List\n\n     def remove_column(nested_list: List[List[int]], col_index: int) -> List[List[int]]:\n         return [row[:col_index] + row[col_index+1:] for row in nested_list]"
    },
    {
        "id":344,
        "response":" from datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\ndef tn_ap(a,n,d):\n    a = datetime.strptime(a, \"%Y-%m-%d\")\n    d = datetime.strptime(d, \"%Y-%m-%d\")\n    return relativedelta(d, a).years"
    },
    {
        "id":345,
        "response":" from math import ceil\nfrom typing import Tuple\n\ndef count_Rectangles(radius: int) -> int:\n    return ceil(2 * radius)"
    },
    {
        "id":346,
        "response":" def find_angle(a, b):\n        return 180 - (a + b)"
    },
    {
        "id":347,
        "response":" def find_max(test_list):\n        return max(test_list, key=lambda x: x[1])"
    },
    {
        "id":348,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef moddiv_list(nums1,nums2):\n  def gcd_list(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n  return [nums1[i] \/\/ reduce(gcd_list, nums2) for i in range(len(nums1))]"
    },
    {
        "id":349,
        "response":" from typing import Tuple\n\ndef Check_Solution(a: float, b: float, c: float) -> bool:\n    return a**2 + b**2 == 2*c"
    },
    {
        "id":350,
        "response":" def get_carol(n):\n        a, b = 1, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return b"
    },
    {
        "id":351,
        "response":" from typing import List\n\ndef remove_empty(list1: List) -> List:\n    return [i for i in list1 if i]"
    },
    {
        "id":352,
        "response":" from typing import List\n\n    def max_occurrences(nums: List[int]) -> int:\n        counts = {}\n        for num in nums:\n            counts[num] = counts.get(num, 0) + 1\n        return max(counts, key=counts.get)"
    },
    {
        "id":353,
        "response":" from typing import List\n\ndef add_K_element(test_list: List[int], K: int) -> List[int]:\n    return [x + K for x in test_list]"
    },
    {
        "id":354,
        "response":" def make_flip(ch):\n        return chr(ord(ch) + 1)"
    },
    {
        "id":355,
        "response":" from collections import Counter\n\ndef count_Digit(n):\n    return len(str(n))"
    },
    {
        "id":356,
        "response":" from typing import List\n\n     def adjacent_num_product(list_nums: List[int]) -> List[int]:\n         if len(list_nums) < 2:\n             return []\n         max_product = float('-inf')\n         result = []\n         for i in range(len(list_nums) - 1):\n             product = list_nums[i] * list_nums[i + 1]\n             if product > max_product:\n                 max_product = product\n                 result = [list_nums[i], list_nums[i + 1]]\n         return result"
    },
    {
        "id":357,
        "response":" from collections import deque\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    q = deque([root])\n    while q:\n        node = q.popleft()\n        if node.left:\n            if node.left.val != node.val:\n                return False\n            q.append(node.left)\n        if node.right:\n            if node.right.val != node.val:\n                return False\n            q.append(node.right)\n    return True"
    },
    {
        "id":358,
        "response":" from itertools import cycle\n\ndef repeat_tuples(test_tup, N):\n    return cycle(test_tup * N)"
    },
    {
        "id":359,
        "response":" import math\n\ndef cuboid_surface_area(l, w, h):\n    return 2 * (l * w + l * h + w * h)"
    },
    {
        "id":360,
        "response":" from typing import Tuple\n\ndef float_sort(price: Tuple[float, float]) -> Tuple[float, float]:\n    return tuple(sorted(price, key=lambda x: x[0]))"
    },
    {
        "id":361,
        "response":" from typing import List\n\n     def smallest_missing(A: List[int]) -> int:\n        A = set(A)\n        i = 0\n        while i in A:\n            i += 1\n        return i"
    },
    {
        "id":362,
        "response":" def heap_ascending(nums):\n        heap = nums[:]\n        for i in range(len(nums) \/\/ 2 - 1, -1, -1):\n            heapify(heap, i)\n        for i in range(len(nums) - 1, 0, -1):\n            nums[i], nums[0] = nums[0], nums[i]\n            heapify(heap, 0)\n        return nums\n\ndef heapify(heap, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    largest = i\n    if left < len(heap) and heap[left] > heap[largest]:\n        largest = left\n    if right < len(heap) and heap[right] > heap[largest]:\n        largest = right\n    if largest != i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        heapify(heap, largest)"
    },
    {
        "id":363,
        "response":" from typing import Union\n\n     def volume_cuboid(l: Union[int, float], w: Union[int, float], h: Union[int, float]) -> float:\n        return l * w * h"
    },
    {
        "id":364,
        "response":" def permute_string(s):\n        from itertools import permutations\n        return ' '.join([' '.join(p) for p in permutations(s)])"
    },
    {
        "id":365,
        "response":" def round_num(n,m):\n        return round(n \/ m) * m"
    },
    {
        "id":366,
        "response":" def remove_replica(test_tup):\n        seen = set()\n        while True:\n            temp = []\n            for item in test_tup:\n                if item not in seen:\n                    temp.append(item)\n                    seen.add(item)\n                if len(temp) == len(test_tup):\n                    break\n            if len(temp) != len(test_tup):\n                break\n            test_tup = temp\n        return test_tup"
    },
    {
        "id":367,
        "response":" def remove_Char(s, c):\n        return s.replace(c, '')"
    },
    {
        "id":368,
        "response":" from collections import deque\n\ndef move_first(test_list):\n  return deque(test_list)[-1:] + deque(test_list[:-1])"
    },
    {
        "id":369,
        "response":" import math\n\ndef surfacearea_cuboid(l, w, h):\n    return 6 * (l * w + l * h + w * h)"
    },
    {
        "id":370,
        "response":" def multi_list(rownum, colnum):\n        return [[0 for _ in range(colnum)] for _ in range(rownum)]"
    },
    {
        "id":371,
        "response":" from typing import List\n\n     def index_on_inner_list(list_data: List[List[int]], index_no: int) -> List[int]:\n        return list_data[index_no]"
    },
    {
        "id":372,
        "response":" def find_rotation_count(A):\n        n = len(A)\n        count = 0\n        for i in range(n):\n            if A[i] == A[0]:\n                count += 1\n        return count"
    },
    {
        "id":373,
        "response":" def even_bit_toggle_number(n):\n        return n ^ ((n >> 1) & 0x55555555)"
    },
    {
        "id":374,
        "response":" def frequency_Of_Smallest(n,arr):\n        if not arr:\n            return None\n        min_freq = float('inf')\n        min_freq_val = None\n        for num in arr:\n            freq = arr.count(num)\n            if freq < min_freq:\n                min_freq = freq\n                min_freq_val = num\n        return min_freq_val"
    },
    {
        "id":375,
        "response":" from typing import List\n\n     def get_perrin(n: int) -> int:\n        a, b, c = 0, 1, 1\n        for _ in range(n):\n            a, b, c = b, c, a + b + c\n        return a"
    },
    {
        "id":376,
        "response":" from collections import deque\n\ndef min_swaps(s):\n    stack = deque()\n    swaps = 0\n    for char in s:\n        if stack and stack[-1] != char:\n            swaps += 1\n        stack.append(char)\n    return swaps"
    },
    {
        "id":377,
        "response":" def even_or_odd(N):\n        return N % 2 == 0"
    },
    {
        "id":378,
        "response":" def highest_Power_of_2(n):\n        i = 0\n        while 2 ** i <= n:\n            i += 1\n        return 2 ** (i - 1)"
    },
    {
        "id":379,
        "response":" def find_lucas(n):\n        a, b = 2, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a"
    },
    {
        "id":380,
        "response":" def add_string(lst, s):\n        return [i + s for i in lst]"
    },
    {
        "id":381,
        "response":" def convert_nested_list_to_dict(nested_list):\n        def flatten(lst):\n            result = {}\n            for item in lst:\n                if isinstance(item, list):\n                    for subitem in flatten(item):\n                        result.update({k: v for k, v in subitem.items() if k not in result})\n                else:\n                    result.update({item: item})\n            return result\n        return flatten(nested_list)"
    },
    {
        "id":382,
        "response":" def get_max_sum(n):\n        memo = {}\n        def f(x):\n            if x == 1:\n                return x\n            if x in memo:\n                return memo[x]\n            max_sum = float('-inf')\n            for i in range(2, int(x**0.5) + 1):\n                max_sum = max(max_sum, f(int(x\/i)) + f(int(x\/i)) + f(int(x\/(i+1))) + f(int(x\/(i+2))))\n            memo[x] = max_sum\n            return max_sum\n        return f(n)"
    },
    {
        "id":383,
        "response":" from typing import List\n\n    def max_length_list(input_list: List) -> List:\n        if not input_list:\n            return []\n        max_len = 0\n        max_list = []\n        for item in input_list:\n            if len(item) > max_len:\n                max_len = len(item)\n                max_list = [item]\n            elif len(item) == max_len:\n                max_list.append(item)\n        return max_list"
    },
    {
        "id":384,
        "response":" def check_distinct(test_tup):\n        return len(test_tup) == len(set(test_tup))"
    },
    {
        "id":385,
        "response":" from collections import Counter\n\ndef first_non_repeating_character(str1):\n    counter = Counter(str1)\n    for char in str1:\n        if counter[char] == 1:\n            return char\n    return None"
    },
    {
        "id":386,
        "response":" from typing import Dict\n\ndef check_char(string: str) -> bool:\n    char = string[0]\n    for c in string:\n        if c != char:\n            return False\n    return True"
    },
    {
        "id":387,
        "response":" def median_numbers(a, b, c):\n        numbers = sorted([a, b, c])\n        if len(numbers) == 1:\n            return numbers[0]\n        elif len(numbers) == 2:\n            return numbers[1]\n        else:\n            mid = len(numbers) \/\/ 2\n            if len(numbers) % 2 == 0:\n                return (numbers[mid-1] + numbers[mid]) \/ 2\n            else:\n                return numbers[mid]"
    },
    {
        "id":388,
        "response":" from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum(int(digit) for digit in str(nums))"
    },
    {
        "id":389,
        "response":" from typing import Tuple\n\n     def bitwise_xor(test_tup1: Tuple[int, int], test_tup2: Tuple[int, int]) -> Tuple[int, int]:\n        return test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1]"
    },
    {
        "id":390,
        "response":" from collections import Counter\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> dict:\n    return dict(Counter(test_list))"
    },
    {
        "id":391,
        "response":" def add_nested_tuples(test_tup1, test_tup2):\n        return (test_tup1[0][0] + test_tup2[0][0], test_tup1[0][1] + test_tup2[0][1], test_tup1[1][0] + test_tup2[1][0], test_tup1[1][1] + test_tup2[1][1])"
    },
    {
        "id":392,
        "response":" from math import comb\n     from functools import reduce\n     from typing import Tuple\n\n     def ncr_modp(n: int, r: int, p: int) -> int:\n        return reduce(lambda x, y: (x * y) % p, comb(n, r), 1)"
    },
    {
        "id":393,
        "response":" from urllib.parse import urlparse\n\ndef is_valid_URL(str):\n    try:\n        result = urlparse(str)\n        return all([result.scheme, result.netloc])\n    except ValueError:\n        return False"
    },
    {
        "id":394,
        "response":" def minimum(a, b):\n        return min(a, b)"
    },
    {
        "id":395,
        "response":" from typing import Tuple\n\ndef check_tuplex(tuplex: Tuple, tuple1: Tuple) -> Tuple:\n    return tuplex if tuplex == tuple1 else None"
    },
    {
        "id":396,
        "response":" from typing import Union\n\n     def find_Parity(x: int) -> Union[int, str]:\n        return \"Even\" if x % 2 == 0 else \"Odd\""
    },
    {
        "id":397,
        "response":" def rearrange_bigger(n):\n        return int(''.join(sorted(str(n), reverse=True)))"
    },
    {
        "id":398,
        "response":" def k_smallest_pairs(nums1, nums2, k):\n        from heapq import heapify, heappop, heappush\n        heap = []\n        for i in range(min(k, len(nums1))):\n            heappush(heap, (nums1[i] + nums2[i], i, i))\n        for _ in range(k - len(nums1)):\n            _, i, j = heappop(heap)\n            heappush(heap, (nums1[i] + nums2[j], i, j + 1))\n        return [nums1[i] for _, i, _ in heap]"
    },
    {
        "id":399,
        "response":" from typing import List\n\n     def min_product_tuple(lst: List[tuple]) -> List[int]:\n         return min(lst, key=lambda x: x[0]*x[1])"
    },
    {
        "id":400,
        "response":" from typing import List\n\ndef min_val(lst: List[int]) -> int:\n    return min(lst)"
    },
    {
        "id":401,
        "response":" from re import sub\n\ndef snake_to_camel(word):\n    return sub(r'_(?=\\w)', lambda m: m.group(0).upper(), word)"
    },
    {
        "id":402,
        "response":" from typing import List\n\ndef remove_odd(numbers: List[int]) -> List[int]:\n    return [n for n in numbers if n % 2 == 0]"
    },
    {
        "id":403,
        "response":" def extract_nth_element(lst, n):\n        if n < 1:\n            return None\n        return lst[n-1]"
    },
    {
        "id":404,
        "response":" from typing import List\n\n     def overlapping(list1: List[int], list2: List[int]) -> List[int]:\n        i = 0\n        result = []\n        for num in list1:\n            if num in list2:\n                result.append(num)\n            i += 1\n        return result"
    },
    {
        "id":405,
        "response":" def max_Product(arr):\n        n = len(arr)\n        max1 = -float('inf')\n        max2 = -float('inf')\n        product = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                p = arr[i] * arr[j]\n                if p > max1:\n                    max2 = max1\n                    max1 = p\n                elif p > max2:\n                    max2 = p\n        return max1, max2"
    },
    {
        "id":406,
        "response":" def breakSum(n):\n        def sumThreeParts(x):\n            return x \/\/ 3 + x % 3 + (x \/\/ 3 + x % 3) \/\/ 3 + (x \/\/ 3 + x % 3) % 3\n        return sumThreeParts(n)"
    },
    {
        "id":407,
        "response":" from typing import List, Tuple\n\n     def first_common_element(lst: List[Tuple[int, int, int]]) -> Tuple[int, int, int]:\n        if not lst:\n            return None\n        first = lst[0]\n        for i in lst:\n            for j in i:\n                if first == j:\n                    return first\n        return None"
    },
    {
        "id":408,
        "response":" def Find_Max(lst):\n        return max(lst) if lst else None"
    },
    {
        "id":409,
        "response":" from math import sqrt\nfrom typing import List\n\ndef round_and_sum(lst: List[int]) -> int:\n    return sum(int(sqrt(n)) for n in lst)"
    },
    {
        "id":411,
        "response":" from typing import List, Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, str]) -> str:\n    delimiter = ':'\n    return delimiter.join(test_tup)"
    },
    {
        "id":412,
        "response":" from math import sqrt\n\ndef find_Average_Of_Cube(n):\n    cubes = [i**3 for i in range(1, n+1)]\n    return sum(cubes) \/ len(cubes)"
    },
    {
        "id":413,
        "response":" def get_maxgold(gold, m, n):\n        return max(gold)"
    },
    {
        "id":414,
        "response":" from typing import Tuple\n\ndef extract_rear(test_tuple):\n    return test_tuple[::-1]"
    },
    {
        "id":415,
        "response":" def count_element_in_list(list1, x):\n        return list1.count(x)"
    },
    {
        "id":416,
        "response":" from typing import List\n\n     def filter_oddnumbers(nums: List[int]) -> List[int]:\n        return [num for num in nums if num % 2 != 0]"
    },
    {
        "id":417,
        "response":" from datetime import datetime\nfrom re import sub\n\ndef change_date_format(dt):\n    return sub(r'\\d{4}-\\d{2}-\\d{2}', r'\\1-\\2-\\3', dt)"
    },
    {
        "id":418,
        "response":" def shell_sort(my_list):\n        gap = len(my_list) \/\/ 2\n        while gap > 0:\n            for i in range(gap, len(my_list)):\n                temp = my_list[i]\n                j = i\n                while j >= gap and my_list[j - gap] > temp:\n                    my_list[j] = my_list[j - gap]\n                    j -= gap\n                my_list[j] = temp\n            gap \/\/= 2\n        return my_list"
    },
    {
        "id":419,
        "response":" def and_tuples(tup1, tup2):\n        if len(tup1) != len(tup2):\n            return None\n        return tup1, tup2"
    },
    {
        "id":420,
        "response":" from math import sqrt\n\ndef parabola_directrix(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return None\n    elif d == 0:\n        return -b \/ (2*a)\n    else:\n        x1 = (-b - sqrt(d)) \/ (2*a)\n        x2 = (-b + sqrt(d)) \/ (2*a)\n        return (x1 + x2) \/ 2"
    },
    {
        "id":421,
        "response":" from typing import List\n\n     def common_element(list1: List[int], list2: List[int]) -> List[int]:\n        set1 = set(list1)\n        set2 = set(list2)\n        return list(set1.intersection(set2))"
    },
    {
        "id":422,
        "response":" from statistics import median\n\ndef median_trapezium(base1, base2, height):\n    return median([base1, base2, height])"
    },
    {
        "id":423,
        "response":" from typing import List\n\n     def check_greater(arr: List[int], number: int) -> bool:\n        return arr[0] < number"
    },
    {
        "id":424,
        "response":" def text_match_one(text):\n        import re\n        return re.search(r'bb|bbb|bbb|b', text)"
    },
    {
        "id":425,
        "response":" def last_Digit(n):\n        return n % 10"
    },
    {
        "id":426,
        "response":" def neg_nos(lst):\n        return [i for i in lst if i < 0]"
    },
    {
        "id":427,
        "response":" def remove_odd(s):\n        return ''.join(c for c in s if ord(c) % 2 == 0)"
    },
    {
        "id":428,
        "response":" from typing import List\n\n     def count_bidirectional(lst: List[int]) -> List[tuple]:\n        return [(i, lst[i]) for i in range(len(lst))]"
    },
    {
        "id":429,
        "response":" def multiple_to_single(L):\n        return int(''.join(map(str, L)))"
    },
    {
        "id":430,
        "response":" def find_adverb_position(text):\n        import re\n        import nltk\n        from nltk.tokenize import word_tokenize\n        from collections import Counter\n\n        nltk.download('averaged_perceptron_tagger')\n\n        tokens = word_tokenize(text)\n        tagged = nltk.pos_tag(tokens)\n        counter = Counter(tag)\n\n        adverbs = []\n        for word, pos in tagged:\n            if pos in ['RB', 'RBR', 'RBS']:\n                adverbs.append(word)\n\n        return adverbs"
    },
    {
        "id":431,
        "response":" def surfacearea_cube(l):\n        return 6 * (l ** 2)"
    },
    {
        "id":432,
        "response":" from typing import List\nfrom collections import Counter\n\ndef positive_count(nums: List[int]) -> List[float]:\n    counter = Counter(nums)\n    max_count = max(counter.values())\n    return [v \/ max_count for v in counter.values()]"
    },
    {
        "id":433,
        "response":" def largest_neg(nums):\n        return max(nums)"
    },
    {
        "id":434,
        "response":" from typing import List\n\ndef trim_tuple(test_list: List[tuple], k: int) -> List[tuple]:\n    return [t[:k] + t[k:] for t in test_list]"
    },
    {
        "id":435,
        "response":" from typing import Tuple\n\n     def index_multiplication(test_tup1: Tuple[int, int], test_tup2: Tuple[int, int]) -> Tuple[int, int]:\n        return test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1]"
    },
    {
        "id":436,
        "response":" from typing import List, Tuple\n\n     def count_Occurrence(tup: Tuple, lst: List) -> Tuple:\n        return tuple(i for i in lst if i in tup)"
    },
    {
        "id":437,
        "response":" from typing import List\n\n     def cube_nums(nums: List[int]) -> List[int]:\n         return [n ** 3 for n in nums]"
    },
    {
        "id":438,
        "response":" def cal_sum(n):\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "id":439,
        "response":" def check_Triangle(x1,y1,x2,y2,x3,y3):\n        a = (x2 - x1)**2 + (y2 - y1)**2\n        b = (x3 - x2)**2 + (y3 - y2)**2\n        c = (x3 - x1)**2 + (y3 - y1)**2\n        s = (a + b + c) \/ 2\n        return (s*(s-a)*(s-b)*(s-c))**0.5 > 0"
    },
    {
        "id":440,
        "response":" def extract_string(lst, length):\n        return [s for s in lst if len(s) == length]"
    },
    {
        "id":441,
        "response":" from re import sub\n\ndef remove_whitespaces(text1):\n  return sub(r'\\s', '', text1)"
    },
    {
        "id":442,
        "response":" from typing import Union\n\n     def loss_amount(actual_cost: float, sale_amount: float) -> Union[float, None]:\n        if actual_cost > sale_amount:\n            return actual_cost - sale_amount\n        else:\n            return None"
    },
    {
        "id":443,
        "response":" def sumofFactors(n):\n        if n == 1:\n            return 0\n        factors = set()\n        for i in range(1, n):\n            if n % i == 0:\n                factors.add(i)\n                factors.add(n \/\/ i)\n        return sum(factors)"
    },
    {
        "id":444,
        "response":" from typing import List\n\n     def text_match_wordz(text: str) -> bool:\n        return 'z' in text"
    },
    {
        "id":445,
        "response":" from datetime import datetime\n\ndef check_monthnumb_number(monthnum2):\n    if len(str(monthnum2)) == 1:\n        monthnum2 = '0' + str(monthnum2)\n    date = datetime(int(monthnum2), 1, 1)\n    if date.day == 31:\n        return True\n    else:\n        return False"
    },
    {
        "id":446,
        "response":" from typing import List\n\n     def reverse_string_list(stringlist: List[str]) -> List[str]:\n        return stringlist[::-1]"
    },
    {
        "id":447,
        "response":" def Find_Min(lst):\n        return min(lst)"
    },
    {
        "id":448,
        "response":" def rectangle_area(l, b):\n        return l * b"
    },
    {
        "id":449,
        "response":" from re import sub\n\ndef remove_uppercase(s):\n    return sub('[A-Z]', '', s)"
    },
    {
        "id":450,
        "response":" from typing import List\n\n     def Extract(lst: List) -> List:\n         return [lst[0]]"
    },
    {
        "id":451,
        "response":" def upper_ctr(s):\n        return sum(1 for c in s if c.isupper())"
    },
    {
        "id":452,
        "response":" from itertools import combinations\n     def combinations_list(list1):\n        return list(combinations(list1, 2))"
    },
    {
        "id":453,
        "response":" def max_subarray_product(arr):\n        n = len(arr)\n        left = [0] * n\n        right = [0] * n\n        max_so_far = arr[0]\n        min_so_far = arr[0]\n        result = arr[0]\n        for i in range(1, n):\n            if arr[i] < 0:\n                left[i] = min_so_far\n                min_so_far = min(left[i-1], arr[i])\n            else:\n                left[i] = min_so_far\n            max_so_far = max(arr[i], max_so_far * arr[i])\n            right[i] = max_so_far\n        max_product = float('-inf')\n        for i in range(n-1, -1, -1):\n            max_product = max(max_product, right[i] * left[i])\n        return max_product"
    },
    {
        "id":454,
        "response":" from typing import Dict, Any\n\n     def check_value(dict1: Dict[str, Any], dict2: Dict[str, Any]) -> bool:\n        return dict1 == dict2"
    },
    {
        "id":455,
        "response":" def drop_empty(dict1):\n        return {k: v for k, v in dict1.items() if v}"
    },
    {
        "id":456,
        "response":" def find_peak_util(arr, low, high, n):\n        if low == high:\n            return arr[low]\n        if low > high:\n            return None\n        mid = (low + high) \/\/ 2\n        if mid < n - 1 and arr[mid] < arr[mid + 1]:\n            return find_peak_util(arr, mid + 1, high, n)\n        elif mid > 0 and arr[mid] > arr[mid - 1]:\n            return find_peak_util(arr, low, mid - 1, n)\n        else:\n            return arr[mid]"
    },
    {
        "id":457,
        "response":" from decimal import Decimal, getcontext\n\ndef decimal_to_Octal(deciNum):\n    getcontext().prec = 10\n    return oct(int(Decimal(deciNum))).replace(\"0o\", \"\")"
    },
    {
        "id":458,
        "response":" def max_product(arr, n):\n        max1 = max2 = arr[0]\n        max3 = arr[0]\n        for i in range(1, n):\n            if arr[i] > max1:\n                max3 = max2\n                max2 = max1\n                max1 = arr[i]\n            elif arr[i] > max2:\n                max3 = max2\n                max2 = arr[i]\n            elif arr[i] > max3:\n                max3 = arr[i]\n        product = max1 * max2 * max3\n        return product"
    },
    {
        "id":459,
        "response":" def max_profit(prices, k):\n        if not prices or k == 0:\n            return 0\n        if k >= len(prices) \/\/ 2:\n            return sum(max(0, b - a) for a, b in zip(prices, prices[1:]))\n        dp = [0] * len(prices)\n        for i in range(1, len(prices)):\n            dp[i] = max(dp[i-1], prices[i] - prices[0] + dp[max(0, i-2)])\n        return dp[-1]"
    },
    {
        "id":460,
        "response":" def add_pairwise(test_tup):\n        return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))"
    },
    {
        "id":461,
        "response":" def find_remainder(arr, n):\n        return [x % n for x in arr]"
    },
    {
        "id":462,
        "response":" def check_Consecutive(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] + 1 != lst[i + 1]:\n                return False\n        return True"
    },
    {
        "id":463,
        "response":" def tuple_intersection(list1, list2):\n        set1 = set(list1)\n        set2 = set(list2)\n        return tuple(set1 & set2)"
    },
    {
        "id":464,
        "response":" def replace_char(str1,ch,newch):\n        return str1.replace(ch,newch)"
    },
    {
        "id":465,
        "response":" from collections import Counter\n\ndef sort_counter(dict1):\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))"
    },
    {
        "id":466,
        "response":" def big_sum(nums):\n        if not nums:\n            return 0\n        max_val = min_val = nums[0]\n        for num in nums:\n            if num > max_val:\n                max_val = num\n            if num < min_val:\n                min_val = num\n        return max_val + min_val"
    },
    {
        "id":467,
        "response":" from typing import List\n\ndef to_hands(string: str) -> str:\n    result = ''\n    for char in string:\n        if char.isalpha():\n            if char.islower():\n                result += 'a' if char.isnumeric() else 'A'\n            else:\n                result += 'A' if char.isnumeric() else 'a'\n        else:\n            result += char\n    return result"
    },
    {
        "id":468,
        "response":" from typing import List\n\n    def remove_lowercase(s: str) -> str:\n        return ''.join(c for c in s if c.isupper())"
    },
    {
        "id":469,
        "response":" def first_Digit(n):\n        return int(str(n)[0])"
    },
    {
        "id":470,
        "response":" def get_max_occuring_char(s):\n        max_char = ''\n        max_count = 0\n        for char in s:\n            count = s.count(char)\n            if count > max_count:\n                max_char = char\n                max_count = count\n        return max_char"
    },
    {
        "id":471,
        "response":" from typing import Set, List\n\n     def is_subset_sum(nums: List[int], target: int) -> Set[bool]:\n        dp = set()\n        for i in range(1 << len(nums)):\n            subset_sum = 0\n            for j in range(len(nums)):\n                if (i & (1 << j)) != 0:\n                    subset_sum += nums[j]\n            dp.add(subset_sum == target)\n        return dp"
    },
    {
        "id":472,
        "response":" from re import findall\n     from typing import List\n\n     def match(text: str) -> List[str]:\n        return findall(r'([A-Z])\\w*', text)"
    },
    {
        "id":473,
        "response":" from math import sqrt\nfrom typing import Optional\n\ndef first_Factorial_Divisible_Number(x: int) -> Optional[int]:\n    i = 2\n    while i * i <= x:\n        if x % i:\n            i += 1\n        else:\n            return x\n    return None"
    },
    {
        "id":474,
        "response":" from typing import List, Tuple\n\n     def remove_matching_tuple(test_list1: List[Tuple], test_list2: List[Tuple]) -> List[Tuple]:\n        result = []\n        for item1, item2 in zip(test_list1, test_list2):\n            if item1 != item2:\n                result.append(item1)\n        return result"
    },
    {
        "id":475,
        "response":" def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\ndef find_largest_palindrome(arr):\n    max_palindrome = 0\n    for num in arr:\n        if is_palindrome(num):\n            max_palindrome = max(max_palindrome, num)\n    return max_palindrome"
    },
    {
        "id":476,
        "response":" from math import comb\n\ndef binomial_probability(n, k):\n    return comb(n, k)"
    },
    {
        "id":477,
        "response":" def sort_tuple(tup):\n        return sorted(tup, reverse=True)"
    },
    {
        "id":478,
        "response":" from math import sqrt\n\ndef area_pentagon(a):\n    return (5 * (a**2) * sqrt(25 + 10 * sqrt(5))) \/ 4"
    },
    {
        "id":479,
        "response":" from collections import Counter\n\ndef frequency_Of_Largest(n,arr):\n    return max(arr, key=Counter(arr).get)"
    },
    {
        "id":480,
        "response":" def extract_symmetric(test_list):\n        return [x for i, x in enumerate(test_list) for j, y in enumerate(test_list) if i < j and x == y]"
    },
    {
        "id":481,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef sum_gp(a, n, r):\n    def lcm(a, b):\n        return a * b \/\/ gcd(a, b)\n    return reduce(lcm, [a, r] + [a * r ** i for i in range(1, n)])"
    },
    {
        "id":482,
        "response":" def binary_search(arr, item):\n        low, high = 0, len(arr) - 1\n        while low <= high:\n            mid = (low + high) \/\/ 2\n            if arr[mid] == item:\n                return mid\n            elif arr[mid] < item:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1"
    },
    {
        "id":483,
        "response":" from math import sqrt\nfrom itertools import combinations\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    points = list(combinations([(x, y) for x, y in [(startx, starty), (endx, endy), \n                                        (startx + radius, starty), (startx, starty + radius), \n                                        (endx - radius, endy), (endx, endy - radius)]])\n    sides = []\n    for p1, p2 in combinations(points, 2):\n        if sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) <= 2*radius:\n            sides.append((p1, p2))\n    return sides"
    },
    {
        "id":484,
        "response":" from typing import Tuple\n\n     def binary_to_integer(test_tup):\n        num = 0\n        for i in test_tup:\n            num = num * 2 + i\n        return num"
    },
    {
        "id":485,
        "response":" def remove_lowercase(s):\n        return ''.join(c for c in s if c.isupper())"
    },
    {
        "id":486,
        "response":" from heapq import heapify, heappop\n     def heap_queue_smallest(nums):\n        heapify(nums)\n        return heappop(nums)"
    },
    {
        "id":487,
        "response":" import math\n\ndef surfacearea_cone(r, h):\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))"
    },
    {
        "id":488,
        "response":" def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a"
    },
    {
        "id":489,
        "response":" import math\n\ndef diameter_circle(r):\n  return 2*r"
    },
    {
        "id":490,
        "response":" from itertools import zip_longest\n\ndef concatenate_elements(list):\n    return ''.join(map(str, list))"
    },
    {
        "id":491,
        "response":" def min_cost(cost, m, n):\n        dp = [[float('inf')] * n for _ in range(m)]\n        dp[0][0] = cost[0][0]\n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    dp[i][j] += dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j-1]\n                if i > 0 and j > 0:\n                    dp[i][j] = min(dp[i][j], dp[i-1][j-1] + cost[i][j])\n        return dp[m-1][n-1]"
    },
    {
        "id":492,
        "response":" from typing import Tuple\n\n    def similar_elements(tup1: Tuple, tup2: Tuple) -> Tuple:\n        return tuple(i for i in tup1 if i in tup2)"
    },
    {
        "id":493,
        "response":" def is_not_prime(n):\n        if n < 2:\n            return True\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "id":494,
        "response":" def heap_queue_largest(nums):\n        heap = nums[:]\n        for i in range(len(nums)\/\/2 - 1, -1, -1):\n            heapify(heap, i)\n        for i in range(len(nums) - 1, 0, -1):\n            nums[i], nums[0] = nums[0], nums[i]\n            heapify(heap, 0)\n        return nums[0]\n\ndef heapify(heap, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(heap) and heap[left] > heap[largest]:\n        largest = left\n    if right < len(heap) and heap[right] > heap[largest]:\n        largest = right\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i]\n        heapify(heap, largest)"
    },
    {
        "id":495,
        "response":" import math\nfrom math import comb\n\ndef count_ways(n):\n    return comb(2*n, n)"
    },
    {
        "id":496,
        "response":" def is_Power_Of_Two(x):\n        return bin(x).count('1') == 1"
    },
    {
        "id":497,
        "response":" from re import findall\n\ndef find_char_long(text):\n    return findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":" from typing import List\n\n     def square_nums(nums: List[int]) -> List[int]:\n        return [n ** 2 for n in nums]"
    },
    {
        "id":499,
        "response":" from math import gcd\n\ndef find_Rotations(s):\n    def rotate(s, n):\n        return s[n:] + s[:n]\n    n = 1\n    while True:\n        if s == rotate(s, n):\n            return n\n        n += 1"
    },
    {
        "id":500,
        "response":" def small_nnum(lst,n):\n        return sorted(lst)[:n]"
    }
]