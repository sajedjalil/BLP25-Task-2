[
    {
        "id":1,
        "response":" import re\ndef remove_Occ(s,ch):\n    s = re.sub('^'+ch, '', s)\n    s = re.sub(ch+'$', '', s)\n    return s"
    },
    {
        "id":2,
        "response":" import numpy as np\n\ndef sort_matrix(M):\n    return np.array(sorted(M, key=sum))"
    },
    {
        "id":3,
        "response":" from collections import Counter\nfrom typing import List\nimport re\n\ndef count_common(words: List[str]) -> List[tuple]:\n    words = [re.sub(r'[^\\w\\s]', '', word).lower() for word in words]\n    return Counter(words).most_common()"
    },
    {
        "id":4,
        "response":" import math\n\ndef find_Volume(l, b, h):\n    return 0.5 * l * b * h"
    },
    {
        "id":5,
        "response":" import re\n     from typing import List\n\n     def split_lowerstring(text: str) -> List[str]:\n         return re.findall(r'[a-z]', text.lower())"
    },
    {
        "id":6,
        "response":" import re\n\ndef text_lowercase_underscore(text):\n    return re.sub('[^a-z_]', '', text)"
    },
    {
        "id":7,
        "response":" def square_perimeter(a):\n        return 4 * a"
    },
    {
        "id":8,
        "response":" from typing import List\n\ndef str_to_list(string: str) -> List[str]:\n    return list(string)"
    },
    {
        "id":9,
        "response":" ```python\nimport typing\n\ndef test_duplicate(nums: typing.List[int]) -> typing.List[int]:\n    if len(nums) != len(set(nums)):\n        return [True, nums]\n    else:\n        return [False, nums]\n```"
    },
    {
        "id":10,
        "response":" from math import sqrt\n\ndef is_woodall(x):\n    if x < 1:\n        return False\n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == x:\n            return True\n        elif woodall > x:\n            return False\n        n += 1"
    },
    {
        "id":11,
        "response":" ```\nimport math\n\ndef multiples_of_num(m, n):\n    return math.ceil(m \/ n) * n\n```"
    },
    {
        "id":12,
        "response":" from typing import List\n\ndef find_first_duplicate(nums: List[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"
    },
    {
        "id":13,
        "response":" from typing import List\n\n     def maximum_Sum(list1: List[int]) -> int:\n        return sum(list1)"
    },
    {
        "id":14,
        "response":" import re\n     from typing import Union\n\n     def binary_to_decimal(binary: Union[str, int]) -> int:\n         if isinstance(binary, str):\n             if not re.match('^[01]+$', binary):\n                 raise ValueError('Invalid binary number')\n             return int(binary, 2)\n         elif isinstance(binary, int):\n             return int(str(binary), 2)\n         else:\n             raise ValueError('Invalid input type')"
    },
    {
        "id":15,
        "response":" from typing import List\nfrom collections import Counter\n\ndef find_Product(arr: List[int], n: int) -> List[int]:\n    count = Counter(arr)\n    product = 1\n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n    return product"
    },
    {
        "id":16,
        "response":" from typing import List, Tuple\n\ndef check_k_elements(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return test_list if all(len(i) == K for i in test_list) else []"
    },
    {
        "id":17,
        "response":" import re\n     def remove(lst):\n         return [re.sub('\\d', '', string) for string in lst]"
    },
    {
        "id":18,
        "response":" import math\n\ndef binomial_Coeff(n, k):\n    return math.factorial(n) \/\/ (math.factorial(k) * math.factorial(n - k))"
    },
    {
        "id":19,
        "response":" from collections import Counter\n\ndef get_Odd_Occurrence(arr, arr_size):\n    count_dict = Counter(arr)\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key"
    },
    {
        "id":20,
        "response":" from typing import List\n\n    def check_Equality(s: str) -> int:\n        count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    count += 1\n        return count"
    },
    {
        "id":21,
        "response":" from typing import List\nfrom collections import Counter\nimport heapq\n\ndef func(nums: List[int], k: int) -> List[int]:\n    count = Counter(nums)\n    return heapq.nlargest(k, count.keys(), key=count.get)"
    },
    {
        "id":22,
        "response":" import math \n\n     def max_Prime_Factors(n):\n         max_prime = -1\n         while n % 2 == 0:\n             max_prime = 2\n             n >>= 1\n         for i in range(3, int(math.sqrt(n)) + 1, 2):\n             while n % i == 0:\n                 max_prime = i\n                 n \/\/= i\n         if n > 2:\n             max_prime = n\n         return max_prime"
    },
    {
        "id":23,
        "response":" ```\nimport math\n\ndef decimal_To_Binary(N):\n    return bin(N)[2:]\n```"
    },
    {
        "id":24,
        "response":" ```\nimport numpy as np\n\ndef find_missing(ar, N):\n    full_ar = np.arange(ar[0], ar[-1] + 1)\n    return list(set(full_ar) - set(ar))\n```"
    },
    {
        "id":25,
        "response":" import math\n\ndef find_rect_num(n):\n    return n * (n + 1)"
    },
    {
        "id":26,
        "response":" def find_Nth_Digit(p, q, N):\n        import math\n        import decimal\n        decimal.getcontext().prec = 50\n        fraction = decimal.Decimal(p) \/ decimal.Decimal(q)\n        fraction_str = str(fraction)[2:]\n        if N <= len(fraction_str):\n            return int(fraction_str[N-1])\n        else:\n            return -1"
    },
    {
        "id":27,
        "response":" ```python\nimport re\nfrom typing import List, Union\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    ints = sorted([x for x in mixed_list if isinstance(x, int)])\n    strs = sorted([x for x in mixed_list if isinstance(x, str)])\n    return ints + strs\n```"
    },
    {
        "id":28,
        "response":" ```\nimport typing\n\ndef div_even_odd(list1: typing.List[int]) -> typing.List[int]:\n    even = next((num for num in list1 if num % 2 == 0), None)\n    odd = next((num for num in list1 if num % 2 != 0), None)\n    \n    if even is None or odd is None:\n        return list1\n    \n    result = even \/ odd\n    list1.append(result)\n    return list1\n```"
    },
    {
        "id":29,
        "response":" import heapq\nfrom collections import Counter\n\ndef rearange_string(S):\n    counter = Counter(S)\n    heap = [(-count, char) for char, count in counter.items()]\n    heapq.heapify(heap)\n    result = []\n    while heap:\n        count1, char1 = heapq.heappop(heap)\n        if result and result[-1] == char1:\n            if not heap:\n                return \"\"\n            count2, char2 = heapq.heappop(heap)\n            result.append(char2)\n            if count2 < -1:\n                heapq.heappush(heap, (count2 + 1, char2))\n            heapq.heappush(heap, (count1, char1))\n        else:\n            result.append(char1)\n            if count1 < -1:\n                heapq.heappush(heap, (count1 + 1, char1))\n    return \"\".join(result)"
    },
    {
        "id":30,
        "response":" ```python\nfrom collections import Counter\nfrom typing import List, Union\n\ndef freq_element(nums: Union[List[List[int]], List[int]]) -> dict:\n    flat_list = [item for sublist in nums for item in sublist]\n    return dict(Counter(flat_list))\n```"
    },
    {
        "id":31,
        "response":" ```\nimport typing\n\ndef filter_evennumbers(nums: typing.List[int]) -> typing.List[int]:\n    return list(filter(lambda x: x % 2 == 0, nums))\n```"
    },
    {
        "id":32,
        "response":" from collections import Counter\n\ndef find_Sum(arr, n):\n    freq = Counter(arr)\n    sum = 0\n    for num in freq:\n        if freq[num] > 1:\n            sum += num\n    return sum"
    },
    {
        "id":33,
        "response":" import re\ndef text_match(text):\n    pattern = r'[a-z_]+'\n    return re.findall(pattern, text)"
    },
    {
        "id":34,
        "response":" import re\n\ndef text_match_string(text):\n    return re.match(r'\\w+', text)"
    },
    {
        "id":35,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef find_gcd(*args):\n    return reduce(gcd, args)"
    },
    {
        "id":36,
        "response":" def test_distinct(data):\n        import typing\n        if not isinstance(data, typing.Iterable):\n            return False\n        return len(data) == len(set(data))"
    },
    {
        "id":37,
        "response":" ```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef compute_Last_Digit(A, B):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def last_digit(n):\n        return n % 10\n\n    a_factorial = factorial(A)\n    b_factorial = factorial(B)\n\n    if a_factorial == 0:\n        return 0\n    else:\n        remainder = b_factorial % a_factorial\n        return last_digit(remainder)\n```"
    },
    {
        "id":38,
        "response":" import re\nimport typing\nimport itertools\n\ndef odd_bit_set_number(n: int) -> int:\n    return n | 0xAAAAAAAA"
    },
    {
        "id":39,
        "response":" ```python\nimport typing\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return [sublist[N] for sublist in nums if len(sublist) > N]\n```"
    },
    {
        "id":40,
        "response":" import functools\n\ndef min_length_list(input_list):\n    return min(input_list, key=lambda x: len(x))"
    },
    {
        "id":41,
        "response":" ```python\nimport math\n\ndef check_equilateral(x, y, z):\n    if x == y == z:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":42,
        "response":" ```\nimport math\n\ndef parallelogram_area(b, h):\n    return b * h\n```"
    },
    {
        "id":43,
        "response":" import re\n     from typing import Union\n\n     def check_Equality(str: Union[str, None]) -> str:\n         if str is None or len(str) < 1:\n             return \"\"\n         if str[0] == str[-1]:\n             return str\n         return \"\""
    },
    {
        "id":44,
        "response":" ```\nimport typing\n\ndef counting_sort(my_list: typing.List[int]) -> typing.List[int]:\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, cnt in enumerate(count):\n        sorted_list.extend([i] * cnt)\n    return sorted_list\n```"
    },
    {
        "id":45,
        "response":" ```\nimport math\n\ndef tn_gp(a: float, n: int, r: float) -> float:\n    return a * (r ** (n - 1))\n```"
    },
    {
        "id":46,
        "response":" import math\n\ndef rev(num):\n    if num == 0:\n        return False\n    return num == (2 \/ num) - 1"
    },
    {
        "id":47,
        "response":" ```\nimport sys\n\ndef find_Max_Num(arr, n):\n    return max(arr)\n```"
    },
    {
        "id":48,
        "response":" import math\n\ndef opposite_Signs(x, y):\n    return (x > 0 and y < 0) or (x < 0 and y > 0)"
    },
    {
        "id":49,
        "response":" def is_octagonal(n):\n     import math\n     x = (math.sqrt(8 * n + 1) - 1) \/ 4\n     return x == int(x)"
    },
    {
        "id":50,
        "response":" from typing import List\n\ndef max_len_sub(arr: List[int], n: int) -> int:\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "id":51,
        "response":" import re\n\ndef count_Substrings(s, n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if substring.isdigit() and len(substring) == int(substring):\n                count += 1\n    return count"
    },
    {
        "id":52,
        "response":" import math\n     from typing import List, Union\n\n     def smallest_num(xs: List[Union[int, float]]) -> Union[int, float]:\n         return min(xs)"
    },
    {
        "id":53,
        "response":" from typing import Tuple, List\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    max_diff = 0\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n            max_pair = pair\n    return [max_pair]"
    },
    {
        "id":54,
        "response":" def subject_marks(subjectmarks): \n        import operator\n        return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "id":55,
        "response":" ```python\nimport typing\n\ndef recursive_list_sum(data_list: typing.List[typing.Union[int, typing.List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        elif isinstance(element, int):\n            total += element\n    return total\n```"
    },
    {
        "id":56,
        "response":" ```\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for num in lst if num > 0)\n```"
    },
    {
        "id":57,
        "response":" import math\n\ndef bell_number(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        bell = [0]*(n+1)\n        bell[0] = 1\n        for i in range(1, n+1):\n            bell[i] = 0\n            for j in range(i):\n                bell[i] += math.comb(i-1, j)*bell[j]\n        return bell[n]"
    },
    {
        "id":58,
        "response":" ```python\nimport typing\n\ndef is_Monotonic(A: typing.List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n```"
    },
    {
        "id":59,
        "response":" ```\nimport typing\n\ndef is_sublist(main_list: typing.List, sub_list: typing.List) -> typing.List:\n    for i in range(len(main_list)):\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    return False\n```"
    },
    {
        "id":60,
        "response":" from typing import List, Tuple\n\ndef find_equal_tuple(Input: List[Tuple], k: int) -> List[Tuple]:\n    return [t for t in Input if len(t) == k]"
    },
    {
        "id":61,
        "response":" import typing\n\ndef comb_sort(nums: typing.List[int]) -> typing.List[int]:\n    def get_next_gap(gap: int) -> int:\n        gap = (gap * 10) \/\/ 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "id":62,
        "response":" ```\nimport math\n\ndef dif_Square(n):\n    if n < 0:\n        return False\n    a = int(math.sqrt(n))\n    while a * a <= n:\n        b = int(math.sqrt(n + a * a))\n        if a * a + b * b == n:\n            return True\n        a += 1\n    return False\n```"
    },
    {
        "id":63,
        "response":" import re\n\ndef multiple_split(text):\n    return re.split('[\\W_]+', text)"
    },
    {
        "id":64,
        "response":" from typing import List\n     from collections import Counter\n\n     def is_samepatterns(colors: List[str], patterns: List[str]) -> List[str]:\n         if len(colors) != len(patterns):\n             return []\n\n         color_counts = Counter(colors)\n         pattern_counts = Counter(patterns)\n\n         if len(color_counts) != len(pattern_counts):\n             return []\n\n         mapping = {}\n\n         for color, pattern in zip(colors, patterns):\n             if pattern not in mapping:\n                 if color in mapping.values():\n                     return []\n                 mapping[pattern] = color\n             else:\n                 if mapping[pattern] != color:\n                     return []\n\n         return colors"
    },
    {
        "id":65,
        "response":" ```python\nimport typing\n\ndef find_tuples(test_list: typing.List[typing.Tuple[int]], K: int) -> typing.List[typing.Tuple[int]]:\n    return [tup for tup in test_list if all(i % K == 0 for i in tup)]\n```"
    },
    {
        "id":66,
        "response":" ```python\nimport math\n\ndef count_Squares(m, n):\n    return m * n\n```"
    },
    {
        "id":67,
        "response":" ```python\nimport re\nimport typing\nimport itertools\n\ndef is_Diff(numbers: typing.List[int]) -> int:\n    even_sum = sum(num for num in numbers if num % 2 == 0)\n    odd_sum = sum(num for num in numbers if num % 2 != 0)\n    return abs(even_sum - odd_sum)\n```"
    },
    {
        "id":68,
        "response":" import math\n     import re\n     import itertools\n\n     def count_With_Odd_SetBits(n):\n         count = 0\n         for i in range(1, n+1):\n             if bin(i).count('1') % 2 != 0:\n                 count += 1\n         return count"
    },
    {
        "id":69,
        "response":" ```\nimport re\n\ndef word_len(s):\n    return len(s) % 2 != 0\n```"
    },
    {
        "id":70,
        "response":" def tetrahedral_number(n):\n        return (n * (n + 1) * (n + 2)) \/\/ 6"
    },
    {
        "id":71,
        "response":" import itertools\n     def zip_tuples(test_tup1, test_tup2):\n         test_tup1 = list(test_tup1)\n         test_tup2 = list(test_tup2)\n         test_tup1 = list(itertools.zip_longest(test_tup1, test_tup2, fillvalue=None))\n         return tuple(test_tup1)"
    },
    {
        "id":72,
        "response":" import math\n\n     def volume_sphere(r):\n        return (4\/3) * math.pi * (r ** 3)"
    },
    {
        "id":73,
        "response":" import itertools\n\ndef get_Char(strr):\n    return ''.join(itertools.chain(*strr))"
    },
    {
        "id":74,
        "response":" import typing\n\ndef sequence(n: int) -> int:\n    seq = [1, 1]\n    while len(seq) < n:\n        seq.append(sum(seq[i] for i in range(len(seq)) if seq[i] in seq[:len(seq) - i - 1]))\n    return seq[-1]"
    },
    {
        "id":75,
        "response":" ```\nimport math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2\n```"
    },
    {
        "id":76,
        "response":" def centered_hexagonal_number(n: int) -> int:\n        return 3 * n * (n - 1) + 1"
    },
    {
        "id":77,
        "response":" from typing import Dict, Any\n\ndef merge_dictionaries_three(dict1: Dict[str, Any], dict2: Dict[str, Any], dict3: Dict[str, Any]) -> Dict[str, Any]:\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "id":78,
        "response":" from collections import Counter\n\ndef freq_count(list1):\n    return dict(Counter(list1))"
    },
    {
        "id":79,
        "response":" ```\nimport math\ndef closest_num(N):\n    if N < 0:\n        return N\n    else:\n        return N - 1\n```"
    },
    {
        "id":80,
        "response":" from typing import List\n\n     def len_log(list1: List[str]) -> List[int]:\n         return [len(max(list1, key=len))]"
    },
    {
        "id":81,
        "response":" ```\nimport re\n\ndef find_substring(str1, sub_str):\n    for string in str1:\n        if re.search(sub_str, string):\n            return string\n    return None\n```"
    },
    {
        "id":82,
        "response":" import re\n\ndef is_undulating(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(1, len(digits) - 1):\n        if (digits[i - 1] < digits[i] and digits[i] < digits[i + 1]) or (digits[i - 1] > digits[i] and digits[i] > digits[i + 1]):\n            return True\n    return False"
    },
    {
        "id":83,
        "response":" import math\n\ndef power(a, b):\n    return math.pow(a, b)"
    },
    {
        "id":84,
        "response":" from typing import Tuple, Any\n\ndef index_minimum(test_list: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return min(test_list, key=lambda x: x[0])"
    },
    {
        "id":85,
        "response":" from typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> List[int]:\n    return [min(len(sublist) for sublist in lst)]"
    },
    {
        "id":86,
        "response":" ```\nimport math\n\ndef divisor(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n \/\/ i)\n    return divisors\n```"
    },
    {
        "id":87,
        "response":" ```\nimport collections\nimport itertools\n\ndef frequency_lists(list1):\n    flat_list = list(itertools.chain(*list1))\n    return collections.Counter(flat_list)\n```"
    },
    {
        "id":88,
        "response":" import math\nfrom typing import List\n\ndef multiply_num(numbers: List[int]) -> float:\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product \/ len(numbers)"
    },
    {
        "id":89,
        "response":" import math\ndef decimal_to_binary(n):\n    if n == 0:\n        return 0\n    result = 0\n    power = 0\n    while n > 0:\n        result += (n % 2) * (10 ** power)\n        n = n \/\/ 2\n        power += 1\n    return result"
    },
    {
        "id":90,
        "response":" ```python\nimport math\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n```"
    },
    {
        "id":91,
        "response":" import typing\n\n    def kth_element(arr: typing.List[int], n: int, k: int) -> typing.List[int]:\n        if k < 1 or k > n:\n            return arr\n        else:\n            return arr[:k-1] + arr[k:]"
    },
    {
        "id":92,
        "response":" import re\n\ndef snake_to_camel(word):\n    components = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"
    },
    {
        "id":93,
        "response":" from math import comb\nfrom typing import List\n\ndef eulerian_num(n: int, m: int) -> int:\n    return sum((-1) ** k * comb(n + 1, k) * (m - k + 1) ** n for k in range(m + 1))"
    },
    {
        "id":94,
        "response":" ```python\nimport typing\n\ndef sort_sublists(input_list: typing.List[typing.List[str]]) -> typing.List[typing.List[str]]:\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n```"
    },
    {
        "id":95,
        "response":" from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(1 for elem in lst if elem)"
    },
    {
        "id":96,
        "response":" from typing import List, Tuple\ndef add_lists(test_list: List, test_tup: Tuple) -> List:\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "id":97,
        "response":" ```python\nimport re\nimport typing\n\ndef count_Hexadecimal(L: int, R: int) -> int:\n    count = 0\n    for num in range(L, R+1):\n        if re.match('^[0-9A-Fa-f]+$', hex(num)[2:]):\n            count += 1\n    return count\n```"
    },
    {
        "id":98,
        "response":" import heapq\n     from typing import List\n\n     def merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n         return list(heapq.merge(num1, num2, num3))"
    },
    {
        "id":99,
        "response":" from typing import List\n     import math\n\n     def odd_Equivalent(s: str, n: int) -> str:\n         def rotate(s: str) -> str:\n             return s[1:] + s[0]\n\n         def is_odd(s: str) -> bool:\n             return s.count('1') % 2 != 0\n\n         for _ in range(n):\n             if is_odd(s):\n                 s = rotate(s)\n         return s"
    },
    {
        "id":100,
        "response":" from typing import List\n\ndef extract_missing(test_list: List[int], strt_val: int, stop_val: int) -> List[int]:\n    missing_ranges = []\n    i = 0\n    while i < len(test_list):\n        if test_list[i] < strt_val:\n            i += 1\n        else:\n            start = test_list[i]\n            while i < len(test_list) and test_list[i] <= stop_val:\n                i += 1\n            missing_ranges.append((start, i - 1))\n    return missing_ranges"
    },
    {
        "id":101,
        "response":" from typing import List, Any\n\ndef common_in_nested_lists(nestedlist: List[List[Any]]) -> List[Any]:\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)"
    },
    {
        "id":102,
        "response":" import math\n\ndef perimeter(diameter, height):\n    radius = diameter \/ 2\n    perimeter = 2 * math.pi * radius + 2 * diameter\n    return perimeter"
    },
    {
        "id":103,
        "response":" import re\n\ndef check_integer(text):\n    try:\n        int(text)\n        return text\n    except ValueError:\n        return None"
    },
    {
        "id":104,
        "response":" from collections import Counter\nfrom typing import List, Tuple\n\ndef assign_freq(test_list: List[Tuple]) -> List[Tuple]:\n    freq = Counter(test_list)\n    return [(sub + (freq[sub],)) for sub in test_list]"
    },
    {
        "id":105,
        "response":" ```python\nimport typing\n\ndef empty_dict(list1: typing.List[typing.Dict]) -> typing.List[typing.Dict]:\n    return all(not d for d in list1)\n```"
    },
    {
        "id":106,
        "response":" from functools import reduce\nfrom operator import mul\n\ndef tuple_to_int(nums):\n    return reduce(mul, nums, 1)"
    },
    {
        "id":107,
        "response":" import re\n\ndef list_to_float(test_list):\n    return [float(i) if re.match('^-?\\d+\\.?\\d*$', str(i)) else i for i in test_list]"
    },
    {
        "id":108,
        "response":" import re\nimport typing\n\ndef string_to_list(string: str) -> typing.List[str]:\n    return list(string)"
    },
    {
        "id":109,
        "response":" from typing import List\n\ndef search(arr: List[int], n: int) -> int:\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) \/\/ 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]"
    },
    {
        "id":110,
        "response":" import itertools\n\ndef max_product_tuple(list1):\n    max_product = float('-inf')\n    for pair in itertools.combinations(list1, 2):\n        product = pair[0][0] * pair[1][0]\n        if product > max_product:\n            max_product = product\n            result = pair\n    return result"
    },
    {
        "id":111,
        "response":" from typing import List\n\ndef check_triplet(A: List[int], n: int, sum: int, count: int) -> List[int]:\n    A.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                return [A[i], A[left], A[right]]\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1"
    },
    {
        "id":112,
        "response":" import math\ndef smartNumber(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count = 0\n    num = 1\n    while True:\n        if is_prime(num) and is_palindrome(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "id":113,
        "response":" ```python\nimport math\n\ndef amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        sum_divisors = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                sum_divisors += i\n                if i != n \/\/ i:\n                    sum_divisors += n \/\/ i\n        return sum_divisors - n\n\n    total_sum = 0\n    for i in range(1, limit):\n        j = sum_of_divisors(i)\n        if j < limit and sum_of_divisors(j) == i and i < j:\n            total_sum += i + j\n    return total_sum\n```"
    },
    {
        "id":114,
        "response":" import cmath\n     import math\n\n     def angle_complex(a, b):\n         complex_number = complex(a, b)\n         return cmath.phase(complex_number)"
    },
    {
        "id":115,
        "response":" ```\nimport re\nimport typing\nimport itertools\n\ndef find_length(string: str, n: int) -> int:\n    max_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = string[i:j]\n            ones = substring.count('1')\n            zeros = len(substring) - ones\n            max_diff = max(max_diff, abs(ones - zeros))\n    return max_diff\n```"
    },
    {
        "id":116,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef sum(a, b):\n    def get_divisors(n):\n        divisors = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n \/\/ i)\n        return divisors\n\n    common_divisors = get_divisors(gcd(a, b))\n    return sum(common_divisors)"
    },
    {
        "id":117,
        "response":" import math\n     def multiply_int(x, y):\n         return math.prod([x, y])"
    },
    {
        "id":118,
        "response":" ```\nimport re\nfrom typing import List\n\ndef long_words(n, str) -> List[str]:\n    words = re.findall(r'\\b\\w+\\b', str)\n    return [word for word in words if len(word) > n]\n```"
    },
    {
        "id":119,
        "response":" ```\nimport numpy as np\n\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    expected_sum = n * (n**2 + 1) \/\/ 2\n    rows = [sum(row) for row in my_matrix]\n    cols = [sum(col) for col in zip(*my_matrix)]\n    diagonals = [sum(my_matrix[i][i] for i in range(n)), sum(my_matrix[i][n-i-1] for i in range(n))]\n    if all(x == expected_sum for x in rows + cols + diagonals):\n        return my_matrix\n    else:\n        return None\n```"
    },
    {
        "id":120,
        "response":" ```python\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    max_count = max(count.values())\n    return [num for num, freq in count.items() if freq == max_count]\n```"
    },
    {
        "id":121,
        "response":" import re\n\ndef reverse_vowels(str1):\n    vowels = [char for char in str1 if char in 'aeiouAEIOU']\n    vowels = vowels[::-1]\n    return re.sub('[aeiouAEIOU]', lambda x: vowels.pop(0), str1)"
    },
    {
        "id":122,
        "response":" from typing import Tuple\n\ndef tup_string(tup1: Tuple) -> str:\n    return ''.join(map(str, tup1))"
    },
    {
        "id":123,
        "response":" ```\nimport functools\nimport operator\n\ndef sum_negativenum(nums):\n    return functools.reduce(operator.add, filter(lambda x: x < 0, nums), 0)\n```"
    },
    {
        "id":124,
        "response":" ```python\nimport typing\n\ndef check_last(arr: typing.List[int], n: int, p: int) -> typing.List[int]:\n    for _ in range(p):\n        if len(arr) > 1:\n            arr = arr[:-1]\n        else:\n            break\n    if arr and arr[-1] % 2 == 0:\n        arr.append('even')\n    elif arr:\n        arr.append('odd')\n    return arr\n```"
    },
    {
        "id":125,
        "response":" import math\n     def hexagonal_num(n):\n         return n * (2 * n - 1)"
    },
    {
        "id":126,
        "response":" import math\n\ndef cal_electbill(units):\n    if units <= 100:\n        return units * 0.5\n    elif units <= 200:\n        return 50 + (units - 100) * 0.75\n    else:\n        return 50 + 75 + (units - 200) * 1"
    },
    {
        "id":127,
        "response":" import numpy as np\n\ndef zero_count(nums):\n    return np.mean(np.array(nums) == 0)"
    },
    {
        "id":128,
        "response":" ```python\nimport math\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n == 0:\n        return False\n    while n > 0:\n        if n & 1 == 1:\n            n -= 1\n        else:\n            n = n >> 1\n    return n == 0\n```"
    },
    {
        "id":129,
        "response":" ```\nimport math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n```"
    },
    {
        "id":130,
        "response":" from collections import Counter\nfrom typing import List, Tuple\n\ndef extract_singly(test_list: List[Tuple]) -> List[Tuple]:\n    flat_list = [item for sublist in test_list for item in sublist]\n    freq_dict = Counter(flat_list)\n    return [tup for tup in test_list if all(freq_dict[item] == 1 for item in tup)]"
    },
    {
        "id":131,
        "response":" ```python\nimport math\n\ndef pancake_sort(nums):\n    for size in range(len(nums), 0, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            if max_index != 0:\n                nums[:max_index + 1] = reversed(nums[:max_index + 1])\n            nums[:size] = reversed(nums[:size])\n    return nums\n```"
    },
    {
        "id":132,
        "response":" ```\nimport itertools\n\ndef count_samepair(list1, list2, list3):\n    return [x for x in list1 if x in list2 and x in list3]\n```"
    },
    {
        "id":133,
        "response":" def find_lists(Input):\n        count = 0\n        for element in Input:\n            if isinstance(element, list):\n                count += 1\n        return count"
    },
    {
        "id":134,
        "response":" import itertools\n     import math\n\n     def sum_Pairs(arr,n):\n         return sum(abs(x-y) for x, y in itertools.combinations(arr, 2))"
    },
    {
        "id":135,
        "response":" ```python\nimport sys\n\ndef max_Abs_Diff(arr, n):\n    return max(arr) - min(arr)\n```"
    },
    {
        "id":136,
        "response":" ```python\nimport re\nimport typing\nimport itertools\n\ndef ascii_value_string(str1: str) -> str:\n    return str(sum(ord(char) for char in str1))\n```"
    },
    {
        "id":137,
        "response":" from typing import List\n\ndef max_path_sum(tri: List[List[int]], m: int, n: int) -> int:\n    if not tri:\n        return 0\n\n    for i in range(m-1, 0, -1):\n        for j in range(len(tri[i])):\n            tri[i-1][j] += max(tri[i][j], tri[i][j+1])\n\n    return tri[0][0]"
    },
    {
        "id":138,
        "response":" from itertools import combinations\n\ndef sum_digits_single(x):\n    digits = [int(i) for i in str(x)]\n    max_sum = 0\n    for r in range(1, len(digits)):\n        for combo in combinations(digits, r):\n            sum1 = sum(combo)\n            sum2 = sum([i for i in digits if i not in combo])\n            if sum1 + sum2 > max_sum:\n                max_sum = sum1 + sum2\n    return max_sum"
    },
    {
        "id":139,
        "response":" from typing import List\n\ndef longest_subseq_with_diff_one(arr: List[int], n: int) -> List[int]:\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    result = []\n    for i in range(max_index, -1, -1):\n        if dp[i] == max_length:\n            result.append(arr[i])\n            max_length -= 1\n    return result[::-1]"
    },
    {
        "id":140,
        "response":" ```\nimport itertools\n\ndef does_Contain_B(a, b, c):\n    sequence = itertools.count(a, c)\n    for num in sequence:\n        if num == b:\n            return True\n        elif num > b:\n            return False\n```"
    },
    {
        "id":141,
        "response":" ```python\nimport math\n\ndef gcd(p, q):\n    if p == 0:\n        return q\n    if q == 0:\n        return p\n    while q:\n        p, q = q, p % q\n    return p\n\ndef is_coprime(a, b):\n    return gcd(a, b) == 1\n```"
    },
    {
        "id":142,
        "response":" import typing\n\ndef merge(a: typing.List[int], b: typing.List[int]) -> typing.List[int]:\n    result = []\n    i, j = 0, 0\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n    result += a[i:]\n    result += b[j:]\n    return result"
    },
    {
        "id":143,
        "response":" import math\n     from typing import Tuple\n\n     def parabola_vertex(a: float, b: float, c: float) -> Tuple[float, float]:\n         x = -b \/ (2 * a)\n         y = a * x**2 + b * x + c\n         return x, y"
    },
    {
        "id":144,
        "response":" import itertools\nimport typing\n\ndef specified_element(nums: typing.List[typing.List[int]], N: int) -> typing.List[int]:\n    return list(itertools.chain(*[sublist[:N] for sublist in nums]))"
    },
    {
        "id":145,
        "response":" import math\n\ndef even_bit_toggle_number(n):\n    mask = 0\n    for i in range(32):\n        if i % 2 == 0:\n            mask |= 1 << i\n    return n ^ mask"
    },
    {
        "id":146,
        "response":" import re\nimport typing\nimport itertools\n\ndef tuple_int_str(tuple_str: typing.Tuple[str]) -> typing.Tuple[int]:\n    return tuple(int(i) for i in tuple_str)"
    },
    {
        "id":147,
        "response":" import itertools \n\n     def encode_list(list1):\n        return [[k, len(list(g))] for k, g in itertools.groupby(list1)]"
    },
    {
        "id":148,
        "response":" import math\n     import heapq\n     import bisect\n     import collections\n     import itertools\n     import sys\n     import re\n     import typing\n     import functools\n     import random\n     import os\n     import datetime\n     import time\n     import operator\n     import string\n     import numpy as np\n     import pandas as pd\n     from collections import deque, Counter\n     from functools import lru_cache\n     from itertools import accumulate, groupby\n     from typing import List, Dict, Set, Tuple, Optional, Union\n     from math import comb, perm, factorial, sqrt, ceil, floor, log, log2\n     from bisect import bisect_left, bisect_right\n     from operator import add, xor, mul, ior, iand, itemgetter\n     from string import ascii_lowercase, ascii_uppercase\n     from heapq import heappush, heappop, heapify, nlargest, nsmallest\n     from collections import defaultdict, OrderedDict, deque\n     from itertools import count, groupby, accumulate, permutations, combinations, combinations_with_replacement\n     from bisect import bisect_left, bisect_right\n\n     def min_Ops(arr,n,k):\n         arr.sort()\n         median = arr[n\/\/2]\n         return [median]*n"
    },
    {
        "id":149,
        "response":" from datetime import datetime\n     from calendar import monthrange\n\n     def month_season(month, days):\n        if month in [12, 1, 2]:\n            return 'Winter'\n        elif month in [3, 4, 5]:\n            return 'Spring'\n        elif month in [6, 7, 8]:\n            return 'Summer'\n        elif month in [9, 10, 11]:\n            return 'Autumn'\n        else:\n            return 'Invalid month'"
    },
    {
        "id":150,
        "response":" ```python\nimport math\n\ndef solution(a, b, n):\n    for x in range(n + 1):\n        if (n - a * x) % b == 0:\n            return x\n    return -1\n```"
    },
    {
        "id":151,
        "response":" ```\nimport typing\n\ndef remove_elements(list1: typing.List, list2: typing.List) -> typing.List:\n    return [element for element in list1 if element not in list2]\n```"
    },
    {
        "id":152,
        "response":" ```python\nimport math\n\ndef sum_series(n: int) -> int:\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n```"
    },
    {
        "id":153,
        "response":" import math\n\ndef area_polygon(s, l):\n    n = len(s)\n    area = 0\n    for i in range(n):\n        j = (i + 1) % n\n        area += s[i][0] * s[j][1]\n        area -= s[j][0] * s[i][1]\n    area = abs(area) \/ 2\n    return area"
    },
    {
        "id":154,
        "response":" ```python\nimport math\n\ndef divSum(n):\n    def get_divisors(num):\n        divisors = [1]\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i != num \/\/ i:\n                    divisors.append(num \/\/ i)\n        return divisors\n\n    divisors = get_divisors(n)\n    return sum(divisors) == n\n```"
    },
    {
        "id":155,
        "response":" import re\nimport string\n\ndef count_char_position(str1):\n    str1 = re.sub('[^a-zA-Z]', '', str1)\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in string.ascii_lowercase or str1[i] in string.ascii_uppercase:\n            count += 1\n    return count"
    },
    {
        "id":156,
        "response":" ```python\nimport itertools\n\ndef find_even_Pair(A,N):\n    def xor(a, b):\n        return a ^ b\n\n    even_pairs = [pair for pair in itertools.combinations(A, 2) if xor(pair[0], pair[1]) % 2 == 0]\n    return even_pairs\n```"
    },
    {
        "id":157,
        "response":" import math\n\ndef next_Power_Of_2(n):\n    return 2 ** math.ceil(math.log2(n))"
    },
    {
        "id":158,
        "response":" from typing import List\n\n     def frequency(a: List[int], x: int) -> int:\n         return a.count(x)"
    },
    {
        "id":159,
        "response":" import math\n\ndef get_pell(n):\n    sqrt_2 = math.sqrt(2)\n    pell_n = (math.pow((1 + sqrt_2), n) - math.pow((1 - sqrt_2), n)) \/ (2 * sqrt_2)\n    return int(pell_n)"
    },
    {
        "id":160,
        "response":" ```\nimport math\nimport re\nimport typing\nimport itertools\n\ndef sum_range_list(list1: typing.List[int], m: int, n: int) -> typing.List[int]:\n    return [sum(list1[m:n+1])] + list1\n```"
    },
    {
        "id":161,
        "response":" ```\nimport math\n\ndef perimeter_pentagon(a):\n    return 5 * a\n```"
    },
    {
        "id":162,
        "response":" ```\nimport re\n\ndef count_occurance(s):\n    return len(re.findall('std', s))\n```"
    },
    {
        "id":163,
        "response":" import re\n     def remove_splchar(text):\n       return re.sub('[^A-Za-z0-9]+', '', text)"
    },
    {
        "id":164,
        "response":" from collections import defaultdict\n     from typing import List, Tuple, Dict\n\n     def group_keyvalue(pairs: List[Tuple[str, str]]) -> Dict[str, List[str]]:\n         result = defaultdict(list)\n         for key, value in pairs:\n             result[key].append(value)\n         return dict(result)"
    },
    {
        "id":165,
        "response":" ```python\nimport re\n\ndef is_valid_parenthese(str1):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack\n```"
    },
    {
        "id":166,
        "response":" import math\n\ndef perimeter_triangle(a, b, c):\n    return a + b + c"
    },
    {
        "id":167,
        "response":" from math import gcd\nfrom typing import List\n\ndef answer(L: int, R: int) -> int:\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if (i*j)\/\/gcd(i,j) <= R:\n                return i"
    },
    {
        "id":168,
        "response":" import re\n\ndef string_literals(patterns, text):\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result"
    },
    {
        "id":169,
        "response":" ```\nimport re\nimport typing\nimport itertools\n\ndef is_num_keith(x: int) -> bool:\n    if x < 1:\n        return False\n    num_digits = len(str(x))\n    digits = [int(d) for d in str(x)]\n    total = sum(digits)\n    while total < x:\n        total = sum(digits[-num_digits:])\n        digits.append(total)\n    return total == x\n```"
    },
    {
        "id":170,
        "response":" import math\n\n     def distance_lat_long(slat, slon, elat, elon):\n        R = 6371\n        dlat = math.radians(elat - slat)\n        dlon = math.radians(elon - slon)\n        a = math.sin(dlat \/ 2) * math.sin(dlat \/ 2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dlon \/ 2) * math.sin(dlon \/ 2)\n        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n        d = R * c\n        return d"
    },
    {
        "id":171,
        "response":" import os\n\n     def common_prefix_util(str1, str2):\n        prefix = \"\"\n        for c1, c2 in zip(str1, str2):\n            if c1 == c2:\n                prefix += c1\n            else:\n                break\n        return prefix"
    },
    {
        "id":172,
        "response":" import re\n\ndef find_character(string):\n    result = {\n        'uppercase': len(re.findall(r'[A-Z]', string)),\n        'lowercase': len(re.findall(r'[a-z]', string)),\n        'special': len(re.findall(r'[^A-Za-z0-9]+', string)),\n        'numeric': len(re.findall(r'\\d', string))\n    }\n    return result"
    },
    {
        "id":173,
        "response":" from typing import List\n\ndef count_pairs(arr: List[int], n: int, k: int) -> int:\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in arr:\n        if num + k in freq:\n            count += freq[num + k]\n        if num - k in freq and k != 0:\n            count += freq[num - k]\n    if k == 0:\n        count \/\/= 2\n    return count"
    },
    {
        "id":174,
        "response":" ```\nimport typing\n\ndef greater_specificnum(list: typing.List[int], num: int) -> typing.List[int]:\n    return [i for i in list if i > num]\n```"
    },
    {
        "id":175,
        "response":" import math\n\ndef parabola_focus(a, b, c):\n    return (b**2 - 4*a*c, (4*a*c - b**2)**0.5 \/ (4*a))"
    },
    {
        "id":176,
        "response":" ```\nimport re\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return text\n    return None\n```"
    },
    {
        "id":177,
        "response":" from typing import List\n\ndef longest_common_subsequence(X: List[int], Y: List[int], m: int, n: int) -> List[int]:\n    L = [[None]*(n + 1) for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0 :\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    index = L[m][n]\n\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n\n    i = m\n    j = n\n    while i > 0 and j > 0:\n\n        if X[i-1] == Y[j-1]:\n            lcs[index-1] = X[i-1]\n            i-=1\n            j-=1\n            index-=1\n\n        elif L[i-1][j] > L[i][j-1]:\n            i-=1\n        else:\n            j-=1\n\n    return lcs"
    },
    {
        "id":178,
        "response":" from math import sqrt\n     from typing import Union\n\n     def prod_Square(n: int) -> Union[bool, int]:\n        for i in range(1, int(sqrt(n)) + 1):\n            if sqrt(n - i * i) % 1 == 0:\n                return True\n        return False"
    },
    {
        "id":179,
        "response":" from typing import List\n\ndef first_Missing_Positive(arr: List[int], n: int) -> int:\n    arr_set = set(arr)\n    i = 1\n    while i in arr_set:\n        i += 1\n    return i"
    },
    {
        "id":180,
        "response":" ```\nimport math\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1, x2+1):\n        for j in range(y1, y2+1):\n            if i == int(i) and j == int(j):\n                count += 1\n    return count\n```"
    },
    {
        "id":181,
        "response":" from calendar import monthrange\nfrom datetime import datetime\n\ndef check_monthnumber(monthname3):\n    month_dict = {\n        \"January\": 1, \"February\": 2, \"March\": 3, \"April\": 4, \"May\": 5, \"June\": 6,\n        \"July\": 7, \"August\": 8, \"September\": 9, \"October\": 10, \"November\": 11, \"December\": 12\n    }\n    month_num = month_dict.get(monthname3)\n    if month_num is None:\n        return monthname3\n    _, num_days = monthrange(datetime.now().year, month_num)\n    if num_days == 30:\n        return monthname3"
    },
    {
        "id":182,
        "response":" ```python\nimport re\n\ndef check_String(str):\n    if re.search(r\"[a-zA-Z]\", str) and re.search(r\"[0-9]\", str):\n        return str\n    else:\n        return None\n```"
    },
    {
        "id":183,
        "response":" from typing import Tuple\n\ndef remove_tuple(test_tup: Tuple) -> Tuple:\n    return tuple(set(test_tup))"
    },
    {
        "id":184,
        "response":" import re\n\ndef octal_To_Decimal(n):\n    if not isinstance(n, str) or not re.match('^[0-7]+$', n):\n        return 'Invalid octal number'\n    return int(n, 8)"
    },
    {
        "id":185,
        "response":" from typing import List\n     from bisect import bisect_left\n\n     def first(arr: List[int], x: int, n: int) -> int:\n         i = bisect_left(arr, x)\n         if i != n and arr[i] == x:\n             return i\n         return -1"
    },
    {
        "id":186,
        "response":" import re\nimport typing\nimport itertools\n\ndef remove_tuples(test_list: typing.List[typing.Tuple], K: int) -> typing.List[typing.Tuple]:\n    return [item for item in test_list if not isinstance(item, tuple) or len(item) != K]"
    },
    {
        "id":187,
        "response":" ```python\nimport math\n\ndef find_exponentio(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ** test_tup2[i])\n    return tuple(result)\n```"
    },
    {
        "id":188,
        "response":" import math\n\ndef largest_triangle(a, b):\n    return a * b \/ (2 * math.sqrt(a**2 + b**2))"
    },
    {
        "id":189,
        "response":" import math\n\ndef highest_Power_of_2(n):\n    return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":190,
        "response":" def position_max(list1):\n        max_val = max(list1)\n        return [i for i, x in enumerate(list1) if x == max_val]"
    },
    {
        "id":191,
        "response":" import typing\n\ndef chkList(lst: typing.List) -> typing.List:\n    return lst if len(set(lst)) == 1 else []"
    },
    {
        "id":192,
        "response":" import re\n\ndef remove_even(str1):\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 != 0])"
    },
    {
        "id":193,
        "response":" import math\n     def hamming_Distance(n1,n2) :\n         x = n1 ^ n2\n         return bin(x).count('1')"
    },
    {
        "id":194,
        "response":" import re\n     from typing import Union\n\n     def count(s: str, c: str) -> int:\n     return len(re.findall(c, s))"
    },
    {
        "id":195,
        "response":" from typing import Tuple\n\ndef inversion_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(map(lambda x: ~x + 1 if x != 0 else 0, test_tup))"
    },
    {
        "id":196,
        "response":" from typing import Tuple, Union\n\ndef concatenate_elements(test_tup: Tuple[Union[int, str], ...]) -> Tuple[str, ...]:\n    result = []\n    for i in range(0, len(test_tup), 2):\n        if i + 1 < len(test_tup):\n            result.append(str(test_tup[i]) + str(test_tup[i + 1]))\n        else:\n            result.append(str(test_tup[i]))\n    return tuple(result)"
    },
    {
        "id":197,
        "response":" from typing import List\n\n     def find_longest_repeating_subseq(str: str) -> str:\n        n = len(str)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if str[i - 1] == str[j - 1] and i != j:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        lrs = []\n        i, j = n, n\n        while i > 0 and j > 0:\n            if str[i - 1] == str[j - 1] and i != j:\n                lrs.append(str[i - 1])\n                i -= 1\n                j -= 1\n            elif dp[i - 1][j] > dp[i][j - 1]:\n                i -= 1\n            else:\n                j -= 1\n        return ''.join(reversed(lrs))"
    },
    {
        "id":198,
        "response":" ```python\nimport re\n\ndef is_decimal(num):\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    if re.match(pattern, num):\n        return num\n    else:\n        return False\n```"
    },
    {
        "id":199,
        "response":" import heapq\n\ndef heap_replace(heap, a):\n    heapq.heapreplace(heap, a)\n    return heap"
    },
    {
        "id":200,
        "response":" import re\n\ndef is_allowed_specific_char(string):\n    pattern = r'^[a-zA-Z0-9\\s\\.,!?]*$'\n    if re.fullmatch(pattern, string):\n        return string"
    },
    {
        "id":201,
        "response":" ```python\nimport math\n\ndef count_Num(n):\n    count = 0\n    i = 1\n    while i <= n:\n        if i & 1 and i & n:\n            count += 1\n        i += 1\n    return count\n```"
    },
    {
        "id":202,
        "response":" import math\n\ndef fourth_Power_Sum(n):\n    return sum(i ** 4 for i in range(1, n + 1))"
    },
    {
        "id":203,
        "response":" from typing import Tuple\n\ndef concatenate_strings(test_tup1: Tuple[str, ...], test_tup2: Tuple[str, ...]) -> Tuple[str, ...]:\n    return test_tup1 + test_tup2"
    },
    {
        "id":204,
        "response":" import math\n\ndef degree_radian(radian):\n    return math.degrees(radian)"
    },
    {
        "id":205,
        "response":" import itertools\n\ndef decode_list(alist):\n    return [item for item, _ in itertools.groupby(alist)]"
    },
    {
        "id":206,
        "response":" from typing import List, Union\n\ndef check_subset_list(list1: List[Union[int, List]], list2: List[Union[int, List]]) -> List[Union[int, List]]:\n    def flatten(lst: List[Union[int, List]]) -> List[int]:\n        result = []\n        for i in lst:\n            if isinstance(i, list):\n                result.extend(flatten(i))\n            else:\n                result.append(i)\n        return result\n\n    flat_list1 = flatten(list1)\n    flat_list2 = flatten(list2)\n\n    return all(i in flat_list2 for i in flat_list1)"
    },
    {
        "id":207,
        "response":" import re\nfrom collections import OrderedDict\n\ndef first_Repeated_Char(str):\n    str = re.sub(r'[^a-zA-Z]', '', str)\n    str = str.lower()\n    char_count = OrderedDict()\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char"
    },
    {
        "id":208,
        "response":" ```python\nimport math\n\ndef min_Operations(A, B):\n    if A == B:\n        return 0\n    elif A < B:\n        return B - A\n    else:\n        return A - B\n```"
    },
    {
        "id":209,
        "response":" ```python\nimport heapq\nfrom typing import Tuple\n\ndef extract_min_max(test_tup: Tuple, K: int) -> Tuple:\n    min_k = heapq.nsmallest(K, test_tup)\n    max_k = heapq.nlargest(K, test_tup)\n    return min_k, max_k\n```"
    },
    {
        "id":210,
        "response":" import re\n\ndef replace_max_specialchar(text, n):\n    return re.sub('[ .,]', ':', text, n)"
    },
    {
        "id":211,
        "response":" ```\nimport typing\n\ndef first_even(nums: typing.List[int]) -> typing.Optional[int]:\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n```"
    },
    {
        "id":212,
        "response":" import typing\n\ndef check_type(test_tuple: typing.Tuple[typing.Any]) -> typing.Tuple[typing.Any]:\n    if not test_tuple:\n        return test_tuple\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return ()\n    return test_tuple"
    },
    {
        "id":213,
        "response":" from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> List[int]:\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n \/ 2:\n        return arr\n    else:\n        return []"
    },
    {
        "id":214,
        "response":" ```\nimport math\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```"
    },
    {
        "id":215,
        "response":" import sys\n\ndef find_Min(arr,low,high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) \/\/ 2\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr,low,mid-1)\n    return find_Min(arr,mid+1,high)"
    },
    {
        "id":216,
        "response":" import re\nimport typing\nimport itertools\n\ndef odd_values_string(str):\n    return str[::2]"
    },
    {
        "id":217,
        "response":" def min_of_three(a, b, c):\n     return min(a, b, c), a, b"
    },
    {
        "id":218,
        "response":" def all_Bits_Set_In_The_Given_Range(n, l, r):\n        import math\n        return n | (((1 << (r + 1)) - 1) ^ ((1 << l) - 1))"
    },
    {
        "id":219,
        "response":" ```python\nimport itertools\n\ndef re_arrange_array(arr, n):\n    negative = [x for x in arr if x < 0]\n    positive = [x for x in arr if x >= 0]\n    return list(itertools.chain(negative, positive))\n```"
    },
    {
        "id":220,
        "response":" ```python\nimport re\n\ndef replace_blank(str1, char):\n    return re.sub(' ', char, str1)\n```"
    },
    {
        "id":221,
        "response":" def max_sum(tri, n):\n        for i in range(n-2, -1, -1):\n            for j in range(len(tri[i])):\n                tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n        return tri"
    },
    {
        "id":222,
        "response":" import heapq\n     from typing import List\n\n     def larg_nnum(list1: List[int], n: int) -> List[int]:\n         return heapq.nlargest(n, list1)"
    },
    {
        "id":223,
        "response":" ```python\nimport math\n\ndef lateralsurface_cylinder(r, h):\n    return 2 * math.pi * r * h\n```"
    },
    {
        "id":224,
        "response":" import math\n\ndef volume_cube(l):\n    return l ** 3"
    },
    {
        "id":225,
        "response":" def even_bit_set_number(n):\n        return n | 0xAAAAAAAA"
    },
    {
        "id":226,
        "response":" from math import gcd\n\ndef No_of_Triangle(N,K):\n    def calculate_gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1):\n            k = calculate_gcd(i, j)\n            if (i * j) \/\/ k <= K:\n                count += 1\n    return count"
    },
    {
        "id":227,
        "response":" from typing import List, Tuple\nfrom collections import defaultdict\n\ndef check_occurences(test_list: List[Tuple[int, str]]) -> List[Tuple[int, str]]:\n    time_dict = defaultdict(list)\n    for time, record in test_list:\n        time_dict[time].append(record)\n    return [(time, records) for time, records in time_dict.items() if len(records) > 1]"
    },
    {
        "id":228,
        "response":" import math\n\ndef number_of_substrings(str):\n    n = len(str)\n    return math.factorial(n)"
    },
    {
        "id":229,
        "response":" import itertools\n\ndef get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for start in range(1, m + 1):\n        sequence = [start]\n        while len(sequence) < n:\n            next_element = sequence[-1] * 2\n            if next_element > m:\n                break\n            sequence.append(next_element)\n        if len(sequence) == n:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "id":230,
        "response":" import typing\n\n     def replace_list(list1: typing.List, list2: typing.List) -> typing.List:\n         if len(list1) > 0:\n             list1[-1] = list2\n         return list1"
    },
    {
        "id":231,
        "response":" import numpy as np\n     import typing\n\n     def array_3d(m: int, n: int, o: int) -> typing.List[typing.List[typing.List[str]]]:\n         return [[[ '*' for _ in range(o)] for _ in range(n)] for _ in range(m)]"
    },
    {
        "id":232,
        "response":" import re\n     from typing import Union\n\n     def count_charac(str1: Union[str, None]) -> int:\n         return len(str1) if str1 is not None else 0"
    },
    {
        "id":233,
        "response":" from collections import defaultdict\n     from typing import List, Tuple\n\n     def sort_on_occurence(lst: List[Tuple[int, str]]) -> List[Tuple[int, str]]:\n         occurrence = defaultdict(int)\n         for tup in lst:\n             occurrence[tup[0]] += 1\n         return sorted(lst, key=lambda x: occurrence[x[0]])"
    },
    {
        "id":234,
        "response":" ```python\nimport math\nimport typing\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.sqrt(N)\n    if root == int(root):\n        root += 1\n    else:\n        root = math.ceil(root)\n    return root ** 2\n```"
    },
    {
        "id":235,
        "response":" from typing import List\n\ndef max_sum(arr: List[int], n: int) -> List[int]:\n    inc = [x for x in arr]\n    dec = [x for x in arr]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    return [inc[i] + dec[i] - arr[i] for i in range(n)]"
    },
    {
        "id":236,
        "response":" import math\n\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number\")\n    if number in (0, 1):\n        return number\n    x = number\n    y = (x + 1) \/ 2\n    while y < x:\n        x = y\n        y = (x + number \/ x) \/ 2\n    return x"
    },
    {
        "id":237,
        "response":" from typing import List\n\ndef lps(s: str) -> str:\n    n = len(s)\n    dp: List[List[int]] = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return s[:dp[0][n - 1]]"
    },
    {
        "id":238,
        "response":" import math\n\ndef harmonic_sum(n):\n    return sum(1\/i for i in range(1, n))"
    },
    {
        "id":239,
        "response":" ```\nimport functools\nimport operator\n\ndef intersection_array(array_nums1, array_nums2):\n    return list(functools.reduce(operator.and_, map(set, [array_nums1, array_nums2])))\n```"
    },
    {
        "id":240,
        "response":" from typing import Tuple, Any\n\n     def count_X(tup: Tuple[Any, ...], x: Any) -> Tuple[Any, ...]:\n     return tup.count(x)"
    },
    {
        "id":241,
        "response":" from typing import List\n\ndef insert_element(lst: List, element) -> List:\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"
    },
    {
        "id":242,
        "response":" import cmath\n\ndef convert(numbers):\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        result.append((real, imag))\n    return result"
    },
    {
        "id":243,
        "response":" ```\nimport re\nimport typing\nimport itertools\n\ndef count_integer(list1: typing.List[int]) -> typing.List[int]:\n    return [i for i, _ in enumerate(list1) if isinstance(_, int)]\n```"
    },
    {
        "id":244,
        "response":" ```python\nimport re\n\ndef words_ae(text):\n    return ' '.join(re.findall(r'\\b[aAeE]\\w*\\b', text))\n```"
    },
    {
        "id":245,
        "response":" import itertools\n\ndef combinations_colors(l, n):\n    return list(itertools.combinations_with_replacement(l, n))"
    },
    {
        "id":246,
        "response":" import math\nfrom typing import List\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for current_prime in range(2, int(math.sqrt(n)) + 1):\n        if sieve[current_prime]:\n            for multiple in range(current_prime*2, n, current_prime):\n                sieve[multiple] = False\n    return sum(sieve)"
    },
    {
        "id":247,
        "response":" def swap_numbers(a, b):\n        import typing\n        a, b = b, a\n        return a"
    },
    {
        "id":248,
        "response":" from typing import List\n\ndef count_odd(array_nums: List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))"
    },
    {
        "id":249,
        "response":" ```\nimport itertools\n\ndef maximize_elements(test_tup1, test_tup2):\n    max_len = max(len(test_tup1), len(test_tup2))\n    test_tup1 = list(test_tup1) + [0] * (max_len - len(test_tup1))\n    test_tup2 = list(test_tup2) + [0] * (max_len - len(test_tup2))\n    return tuple(max(i, j) for i, j in zip(test_tup1, test_tup2))\n```"
    },
    {
        "id":250,
        "response":" import sympy\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while True:\n        if sympy.isprime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "id":251,
        "response":" from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[float, ...]:\n    return tuple(x \/ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "id":252,
        "response":" from typing import List\n\ndef split_two_parts(list1: List, L: int) -> List:\n    return [list1[:L], list1[L:]]"
    },
    {
        "id":253,
        "response":" import typing \n\ndef merge_dict(d1: typing.Dict, d2: typing.Dict) -> typing.Dict:\n    d1.update(d2)\n    return d1"
    },
    {
        "id":254,
        "response":" import math\n\n    def dog_age(h_age):\n        if h_age <= 2:\n            return h_age * 10.5\n        else:\n            return 21 + (h_age - 2) * 4"
    },
    {
        "id":255,
        "response":" ```\nimport itertools\n\ndef list_split(S, step):\n    return list(itertools.zip_longest(*[iter(S)] * step))\n```"
    },
    {
        "id":256,
        "response":" ```python\nimport math\n\ndef lateralsurface_cube(l):\n    return 4 * l ** 2\n```"
    },
    {
        "id":257,
        "response":" import math\n     def square_Sum(n):\n         return sum([i**2 for i in range(1, 2*n, 2)])"
    },
    {
        "id":258,
        "response":" def find_star_num(n: int) -> int:\n        import math\n        sequence = [1, 12, 30, 56, 90]\n        if n <= 5:\n            return sequence[n-1]\n        else:\n            return 5 * n * (n-1) + 1"
    },
    {
        "id":259,
        "response":" import typing\n\n     def ascii_value(k: typing.Any) -> int:\n         return ord(k)"
    },
    {
        "id":260,
        "response":" ```python\nimport math\nimport re\nimport typing\nfrom itertools import accumulate, chain, combinations, permutations\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int], n: int) -> int:\n    return sum(num for idx, num in enumerate(arr) if idx % 2 == 0 and num % 2 == 0)\n```"
    },
    {
        "id":261,
        "response":" ```python\nimport math\n\ndef even_Power_Sum(n):\n    return sum([i**5 for i in range(2, n*2+1, 2)])\n```"
    },
    {
        "id":262,
        "response":" from typing import List, Tuple\n\n     def rear_extract(test_list: List[Tuple]) -> List[Tuple]:\n     return [sub[-1] for sub in test_list]"
    },
    {
        "id":263,
        "response":" from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "id":264,
        "response":" ```python\nimport math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(0, n+1):\n        if k % 2 == 0:\n            sum += math.comb(n, k)\n    return sum\n```"
    },
    {
        "id":265,
        "response":" import itertools\n\ndef get_Position(a, n, m):\n    a = list(itertools.islice(a, n))\n    m -= 1\n    return a[m:] + a[:m]"
    },
    {
        "id":266,
        "response":" ```python\nimport math\n\ndef volume_cylinder(r, h):\n    return math.pi * r ** 2 * h\n```"
    },
    {
        "id":267,
        "response":" ```\nimport typing\n\ndef dict_filter(dict: typing.Dict, n: typing.Any) -> typing.Dict:\n    return {key: value for key, value in dict.items() if value == n}\n```"
    },
    {
        "id":268,
        "response":" from typing import Tuple\n\ndef count_first_elements(test_tup: Tuple) -> Tuple:\n    return test_tup[:test_tup.count(test_tup[0])]"
    },
    {
        "id":269,
        "response":" def is_num_decagonal(n):\n        import math\n        return (math.sqrt(25 * n + 1) - 5) % 10 == 0"
    },
    {
        "id":270,
        "response":" import typing\n\ndef sequential_search(dlist: typing.List[typing.Any], item: typing.Any) -> typing.List[typing.Any]:\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return dlist[:pos] + [item] + dlist[pos+1:]\n    else:\n        return dlist"
    },
    {
        "id":271,
        "response":" ```python\nimport typing\n\ndef all_unique(test_list: typing.List) -> typing.List:\n    return len(test_list) == len(set(test_list))\n```"
    },
    {
        "id":272,
        "response":" ```\nimport operator as op\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x: x[0] - x[1], zip(nums1, nums2)))\n```"
    },
    {
        "id":273,
        "response":" from collections import Counter\n\ndef validate(n):\n    digits = [int(i) for i in str(n)]\n    counter = Counter(digits)\n    for i, digit in enumerate(digits):\n        if digit > counter[digit]:\n            return False\n    return n"
    },
    {
        "id":274,
        "response":" from typing import List\n\ndef check_element(input_list: List[str], element: str) -> List[str]:\n    if all(i == element for i in input_list):\n        return input_list"
    },
    {
        "id":275,
        "response":" import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}')\n    return pattern.fullmatch(text)"
    },
    {
        "id":276,
        "response":" from typing import List\nfrom itertools import accumulate\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    prefix_sum = list(accumulate(a))\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            current_sum = prefix_sum[j] - prefix_sum[i] + a[i]\n            if j == n - 1:\n                current_sum += (k - 1) * prefix_sum[-1]\n            max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "id":277,
        "response":" def square_Sum(n):\n        return sum(i**2 for i in range(2, 2*n+1, 2))"
    },
    {
        "id":278,
        "response":" import math\n\ndef modular_inverse(arr, N, P):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x, y = extended_gcd(b % a, a)\n        return gcd, y - (b \/\/ a) * x, x\n\n    def mod_inv(a, m):\n        gcd, x, y = extended_gcd(a, m)\n        if gcd != 1:\n            return None\n        return x % m\n\n    count = 0\n    for num in arr:\n        inv = mod_inv(num, P)\n        if inv == num:\n            count += 1\n    return count"
    },
    {
        "id":279,
        "response":" from datetime import datetime\n\ndef odd_Days(N):\n    start = datetime(N, 1, 1)\n    end = datetime(N, 12, 31)\n    count = 0\n    while start <= end:\n        if start.day % 2 != 0:\n            count += 1\n        start += datetime.timedelta(days=1)\n    return count"
    },
    {
        "id":280,
        "response":" def max_length(list1):\n       import sys\n       return sys.maxsize"
    },
    {
        "id":281,
        "response":" import numpy as np\n     import functools\n\n     def count_no_of_ways(n, k):\n         if n == 1:\n             return k\n         if n == 2:\n             return k * k\n         a, b, c = k, k * k, 0\n         for _ in range(2, n):\n             c = (k - 1) * (a + b)\n             a, b = b, c\n         return c"
    },
    {
        "id":282,
        "response":" ```python\nimport math\n\ndef find(n, m):\n    if m == 0:\n        return \"Error: Division by zero is not allowed\"\n    return n \/\/ m\n```"
    },
    {
        "id":283,
        "response":" ```python\nimport math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)\n```"
    },
    {
        "id":284,
        "response":" ```\nimport typing\n\ndef max_val(listval: typing.List[int]) -> int:\n    return max(listval)\n```"
    },
    {
        "id":285,
        "response":" import math\n\ndef sum_div(number: int) -> int:\n    total = 0\n    for i in range(1, math.isqrt(number) + 1):\n        if number % i == 0:\n            total += i\n            if i != number \/\/ i:\n                total += number \/\/ i\n    return total"
    },
    {
        "id":286,
        "response":" ```\nimport typing\nfrom typing import List\n\ndef get_Inv_Count(arr: List[int], n: int) -> List[int]:\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n```"
    },
    {
        "id":287,
        "response":" ```python\nimport typing as t\n\ndef flatten_list(list1: t.List[t.Any]) -> t.List[t.Any]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n```"
    },
    {
        "id":288,
        "response":" ```python\nimport typing\n\ndef intersection_nested_lists(l1: typing.List[typing.Any], l2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    l1 = [i for sublist in l1 for i in sublist]\n    l2 = [i for sublist in l2 for i in sublist]\n    result = []\n    for i in l1:\n        if i in l2 and i not in result:\n            result.append(i)\n    return result\n```"
    },
    {
        "id":289,
        "response":" ```\nfrom typing import List, Tuple\nimport itertools\n\ndef max_aggregate(stdata: List[Tuple[int]]) -> Tuple[int]:\n    return max(stdata, key=sum)\n```"
    },
    {
        "id":290,
        "response":" import math\n\ndef count_binary_seq(n):\n    return math.comb(2*n, n)"
    },
    {
        "id":291,
        "response":" ```python\nimport typing as t\n\ndef dict_depth(d: t.Dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values() if isinstance(v, dict))\n```"
    },
    {
        "id":292,
        "response":" import math\n\n    def set_Bit_Number(n):\n        if n == 0:\n            return 0\n        return int(math.log2(n & -n))"
    },
    {
        "id":293,
        "response":" from typing import List\nfrom collections import defaultdict\nimport itertools\nimport math\nimport re\n\ndef solve(a: List[int], n: int) -> bool:\n    inv_a = [0] * n\n    for i in range(n):\n        inv_a[a[i]] = i\n    for i in range(n):\n        if a[inv_a[i]] != i:\n            return False\n    return True"
    },
    {
        "id":294,
        "response":" import math\n     from typing import List\n\n     def find_Element(arr: List[int], ranges: List[int], rotations: int, index: int) -> int:\n         n = len(arr)\n         for i in range(rotations):\n             temp = arr[ranges[i][0]]\n             for j in range(ranges[i][0], ranges[i][1]):\n                 arr[j] = arr[j + 1]\n             arr[ranges[i][1]] = temp\n         return arr[index]"
    },
    {
        "id":295,
        "response":" ```\nimport re\nimport itertools\n\ndef start_withp(words):\n    return [word for word in words if re.match('p', word, re.IGNORECASE)]\n```"
    },
    {
        "id":296,
        "response":" def max_sum_increasing_subseq(a, n, index, k):\n     import sys\n     import itertools\n     import math\n     max_sum = -sys.maxsize\n     for i in range(index, k):\n         total = 0\n         prev = a[i]\n         for j in range(i, -1, -1):\n             if a[j] < prev:\n                 total += a[j]\n                 prev = a[j]\n         max_sum = max(max_sum, total)\n     return max_sum"
    },
    {
        "id":297,
        "response":" def colon_tuplex(tuplex, m, n):\n        return tuplex[m:n]"
    },
    {
        "id":298,
        "response":" ```python\nimport itertools\nimport operator\n\ndef large_product(nums1, nums2, N):\n    products = [x * y for x, y in itertools.product(nums1, nums2)]\n    return max(products)\n```"
    },
    {
        "id":299,
        "response":" def maximum(a, b):\n        import typing\n        if a >= b:\n            return a\n        else:\n            return b"
    },
    {
        "id":300,
        "response":" import re\nimport typing\n\ndef string_to_tuple(str1: str) -> typing.Tuple:\n    return tuple(str1)"
    },
    {
        "id":301,
        "response":" import math\n\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    left_most_unset_bit = int(math.log2(~n & -~n))\n    return n | (1 << left_most_unset_bit)"
    },
    {
        "id":302,
        "response":" import math\n\ndef volume_cone(r, h):\n    return (1.0\/3) * math.pi * r * r * h"
    },
    {
        "id":303,
        "response":" import re\nimport typing\nimport itertools\n\ndef pos_nos(list1):\n    list1[:] = [num for num in list1 if isinstance(num, (int, float)) and num > 0]\n    return list1"
    },
    {
        "id":304,
        "response":" import itertools\n\ndef max_sum_rectangular_grid(grid, n):\n    def max_sum_no_adjacent(arr):\n        incl = 0\n        excl = 0\n        for i in arr:\n            new_excl = max(incl, excl)\n            incl = excl + i\n            excl = new_excl\n        return max(incl, excl)\n\n    return max(max_sum_no_adjacent(grid[0]), max_sum_no_adjacent(grid[1]))"
    },
    {
        "id":305,
        "response":" from typing import List\n\ndef find_Max_Len_Even(str: str) -> str:\n    words = str.split()\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word"
    },
    {
        "id":306,
        "response":" import bisect\n\ndef find_last_occurrence(A, x):\n    i = bisect.bisect_right(A, x) - 1\n    if i >= 0 and A[i] == x:\n        return i\n    return -1"
    },
    {
        "id":307,
        "response":" from typing import List\n\ndef modified_encode(alist: List[int]) -> List[int]:\n    if not alist:\n        return alist\n    result = []\n    count = 1\n    for i in range(1, len(alist)):\n        if alist[i] == alist[i - 1]:\n            count += 1\n        else:\n            result.append(count)\n            result.append(alist[i - 1])\n            count = 1\n    result.append(count)\n    result.append(alist[-1])\n    return result"
    },
    {
        "id":308,
        "response":" import math\n\ndef max_volume(s):\n    a = s \/ 6\n    return a ** 3"
    },
    {
        "id":309,
        "response":" import re\n\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5,}\\b', text)"
    },
    {
        "id":310,
        "response":" from math import pow\n\ndef sum_difference(n):\n    sum_of_squares = sum(pow(i, 2) for i in range(1, n+1))\n    square_of_sum = pow(sum(range(1, n+1)), 2)\n    return square_of_sum - sum_of_squares"
    },
    {
        "id":311,
        "response":" ```\nimport re\n\ndef find_demlo(s):\n    s = s.replace(' ', '')\n    result = ''\n    for char in s:\n        if char not in result:\n            result += char\n    return result\n```"
    },
    {
        "id":312,
        "response":" import numpy as np\n\ndef position_min(list1):\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]"
    },
    {
        "id":313,
        "response":" from typing import List\n\ndef right_rotate(arr: List[int], n: int, out_of_place: int, cur: int) -> List[int]:\n    if out_of_place == n:\n        return arr\n    if arr[cur] < 0:\n        arr[cur], arr[out_of_place] = arr[out_of_place], arr[cur]\n        return right_rotate(arr, n, out_of_place + 1, out_of_place)\n    return right_rotate(arr, n, out_of_place, cur + 1)"
    },
    {
        "id":314,
        "response":" ```\nimport typing\n\ndef sum_of_alternates(test_tuple: typing.Tuple[int, ...]) -> int:\n    return sum(test_tuple[::2])\n```"
    },
    {
        "id":315,
        "response":" import math\n\ndef get_Min_Squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]"
    },
    {
        "id":316,
        "response":" from collections import Counter\n\ndef most_occurrences(test_list):\n    if not test_list:\n        return []\n    freq = Counter(test_list)\n    max_freq = max(freq.values())\n    return [word for word, count in freq.items() if count == max_freq]"
    },
    {
        "id":317,
        "response":" import math\n\n     def check_isosceles(x,y,z):\n         if x == y or x == z or y == z:\n             return True\n         else:\n             return False"
    },
    {
        "id":318,
        "response":" from typing import List\n\ndef rotate_left(list1: List, m: int, n: int) -> List:\n    return list1[m:] + list1[:m]"
    },
    {
        "id":319,
        "response":" ```\nimport typing\n\ndef neg_count(lst: typing.List[int]) -> int:\n    return len([num for num in lst if num < 0])\n```"
    },
    {
        "id":320,
        "response":" ```\nimport re\n\ndef find_char(text):\n    three_char = re.findall(r'\\b\\w{3}\\b', text)\n    four_char = re.findall(r'\\b\\w{4}\\b', text)\n    five_char = re.findall(r'\\b\\w{5}\\b', text)\n    return three_char + four_char + five_char\n```"
    },
    {
        "id":321,
        "response":" import math\n\ndef count_unset_bits(n):\n    if n == 0:\n        return 32\n    return 32 - math.floor(math.log2(n)) - 1"
    },
    {
        "id":322,
        "response":" ```\nimport re\nfrom collections import Counter\n\ndef char_frequency(str1):\n    str1 = re.sub(r'\\s+', '', str1)\n    return Counter(str1)\n```"
    },
    {
        "id":323,
        "response":" import operator\n\ndef Sort(sub_li):\n    return sorted(sub_li, key=operator.itemgetter(1))"
    },
    {
        "id":324,
        "response":" ```\nimport math\n\ndef check_Validity(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0] + sides[1] > sides[2]\n```"
    },
    {
        "id":325,
        "response":" import math\n\ndef ap_sum(a, n, d):\n    return n * (2 * a + (n - 1) * d) \/\/ 2"
    },
    {
        "id":326,
        "response":" ```\nimport calendar\nimport re\n\ndef check_monthnum(monthname1):\n    month_dict = {v: k for k, v in enumerate(calendar.month_name)}\n    if monthname1 in month_dict and month_dict[monthname1] in [2]:\n        return monthname1\n    else:\n        return \"Month has more than 28 days\"\n```"
    },
    {
        "id":327,
        "response":" import re\n\ndef text_match_word(text):\n    pattern = r'\\b\\w+\\W*$'\n    match = re.search(pattern, text)\n    return match.group() if match else ''"
    },
    {
        "id":328,
        "response":" from typing import List\n\ndef check_Equality(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i] == s[j - 1]:\n                count += 1\n    return count"
    },
    {
        "id":329,
        "response":" from collections import Counter\nfrom math import gcd\nfrom functools import reduce\n\ndef find_Divisor(x, y):\n    def get_divisors(n):\n        divisors = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n \/\/ i)\n        return divisors\n\n    divisors = set()\n    for i in range(x, y + 1):\n        divisors.update(get_divisors(i))\n\n    common_divisors = reduce(gcd, range(x, y + 1))\n    common_divisors_set = set()\n    for i in range(1, int(common_divisors**0.5) + 1):\n        if common_divisors % i == 0:\n            common_divisors_set.add(i)\n            common_divisors_set.add(common_divisors \/\/ i)\n\n    divisors = divisors.intersection(common_divisors_set)\n\n    freq = Counter()\n    for i in range(x, y + 1):\n        for d in divisors:\n            if i % d == 0:\n                freq[d] += 1\n\n    return freq.most_common(1)[0][0]"
    },
    {
        "id":330,
        "response":" def sum_three_smallest_nums(lst):\n        import heapq\n        import re\n        import typing\n        import itertools\n        return sum(heapq.nsmallest(3, [int(i) for i in lst if isinstance(i, (int, str)) and re.match('^-?\\d+$', str(i))]))"
    },
    {
        "id":331,
        "response":" import typing\n\ndef set_to_tuple(s: typing.Set) -> typing.Tuple:\n    return tuple(sorted(s))"
    },
    {
        "id":332,
        "response":" from typing import List, Tuple\n\n    def __init__(self, value: int, list_num: List[List[int]], index: int) -> Tuple[int, int]:\n        self.value = value\n        self.list_num = list_num\n        self.index = index"
    },
    {
        "id":333,
        "response":" ```\nimport re\n\ndef dig_let(s):\n    return len(re.findall('[a-zA-Z]', s)), len(re.findall('\\d', s))\n```"
    },
    {
        "id":334,
        "response":" ```python\nimport math\n\ndef count_Odd_Squares(n, m):\n    count = 0\n    for i in range(n, m+1):\n        root = math.sqrt(i)\n        if root == int(root):\n            factors = set()\n            for j in range(1, int(math.sqrt(root)) + 1):\n                if root % j == 0:\n                    factors.add(j)\n                    factors.add(root \/\/ j)\n            if len(factors) % 2 != 0:\n                count += 1\n    return count\n```"
    },
    {
        "id":335,
        "response":" import itertools\n     def diff_consecutive_nums(nums):\n         return [b - a for a, b in zip(nums, nums[1:])]"
    },
    {
        "id":336,
        "response":" import math\n\ndef zigzag(n, k):\n    if k == 0 or n == 1:\n        return n\n    else:\n        return k - zigzag(n - 1, k - 1)"
    },
    {
        "id":337,
        "response":" import math\n\ndef count_Squares(m, n):\n    return m * n"
    },
    {
        "id":338,
        "response":" import math\n\ndef bin_coff(n, r):\n    return math.comb(n, r)"
    },
    {
        "id":339,
        "response":" import re\n\ndef check(string) : \n    if re.fullmatch(\"[01]+\", string) : \n        return string"
    },
    {
        "id":340,
        "response":" from collections import Counter\n\ndef minimum_Length(s):\n    s = list(s)\n    counter = Counter(s)\n    for char in counter:\n        if counter[char] > 1:\n            s.remove(char)\n            return ''.join(s)\n    return ''.join(s)"
    },
    {
        "id":341,
        "response":" from collections import Counter\n\ndef first_Element(arr, n, k):\n    count = Counter(arr)\n    for i in range(n):\n        if count[arr[i]] == k:\n            return arr[i]\n    return -1"
    },
    {
        "id":342,
        "response":" ```python\nimport re\nfrom typing import Dict\n\ndef unique_Characters(str):\n    str = re.sub(r'\\s+', '', str)\n    char_count: Dict[str, int] = {}\n    for char in str:\n        if char in char_count:\n            return False\n        char_count[char] = 1\n    return True\n```"
    },
    {
        "id":343,
        "response":" ```\nimport typing\n\ndef remove_column(list1: typing.List[typing.List[typing.Any]], n: int) -> typing.List[typing.List[typing.Any]]:\n    return [row[:n] + row[n+1:] for row in list1]\n```"
    },
    {
        "id":344,
        "response":" from typing import Union\n\ndef tn_ap(a: Union[int, float], n: int, d: Union[int, float]) -> Union[int, float]:\n    return a + (n - 1) * d"
    },
    {
        "id":345,
        "response":" ```\nimport math\nimport itertools\n\ndef count_Rectangles(radius):\n    count = 0\n    for x in range(1, radius+1):\n        for y in range(1, radius+1):\n            if x * y <= radius * 2:\n                count += 1\n    return count\n```"
    },
    {
        "id":346,
        "response":" import math\n     def find_angle(a, b):\n         return 180 - a - b"
    },
    {
        "id":347,
        "response":" ```\nimport typing\n\ndef find_max(test_list: typing.List[typing.Tuple[int]]) -> typing.Tuple[int]:\n    return max(test_list, key=max)\n```"
    },
    {
        "id":348,
        "response":" from typing import List\n\ndef moddiv_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x % y, nums1, nums2))"
    },
    {
        "id":349,
        "response":" import math\n\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return False\n    root1 = (-b + math.sqrt(d)) \/ (2*a)\n    root2 = (-b - math.sqrt(d)) \/ (2*a)\n    return root1 == 2*root2 or root2 == 2*root1"
    },
    {
        "id":350,
        "response":" def get_carol(n):\n        carol_numbers = [0]\n        for i in range(1, n+1):\n            carol_numbers.append(carol_numbers[i-1] + 2 * carol_numbers[i-1] + 1)\n        return carol_numbers[n]"
    },
    {
        "id":351,
        "response":" ```\nimport typing\n\ndef remove_empty(list1: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [x for x in list1 if x != []]\n```"
    },
    {
        "id":352,
        "response":" from collections import Counter\nfrom typing import List\n\ndef max_occurrences(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    max_count = max(count.values())\n    return [num for num, freq in count.items() if freq == max_count]"
    },
    {
        "id":353,
        "response":" from typing import Tuple, Any\n\ndef add_K_element(test_list: Tuple[Any, ...], K: Any) -> Tuple[Any, ...]:\n    result = []\n    for elem in test_list:\n        result.append((elem, K))\n    return tuple(result)"
    },
    {
        "id":354,
        "response":" import itertools\n\ndef make_flip(ch):\n    ch = [int(x) for x in ch]\n    groups = [(k, len(list(g))) for k, g in itertools.groupby(ch)]\n    return sum(min(1, x) for _, x in groups)"
    },
    {
        "id":355,
        "response":" ```python\nimport math\n\ndef count_Digit(n):\n    if n == 0:\n        return 1\n    return math.floor(math.log10(abs(n))) + 1\n```"
    },
    {
        "id":356,
        "response":" import itertools\n\ndef adjacent_num_product(list_nums):\n    return max(a * b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "id":357,
        "response":" ```\nimport math\nfrom typing import List\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef is_balanced(root: Node) -> bool:\n    def check_height(node: Node) -> int:\n        if node is None:\n            return 0\n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    return check_height(root) != -1\n```"
    },
    {
        "id":358,
        "response":" ```python\nimport typing\n\ndef repeat_tuples(test_tup: typing.Tuple, N: int) -> typing.Tuple:\n    return test_tup * N\n```"
    },
    {
        "id":359,
        "response":" def lateralsurface_cuboid(l,w,h):\n        return 2*(l*w + w*h + h*l)"
    },
    {
        "id":360,
        "response":" from typing import Tuple\n\ndef float_sort(price: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple(sorted(price))"
    },
    {
        "id":361,
        "response":" ```\nimport typing\n\ndef smallest_missing(A: typing.List[int], left_element: int, right_element: int) -> typing.List[int]:\n    A[left_element:right_element + 1] = sorted(set(A[left_element:right_element + 1]))\n    for i in range(left_element, right_element):\n        if A[i] + 1 != A[i + 1]:\n            A.insert(i + 1, A[i] + 1)\n    return A\n```"
    },
    {
        "id":362,
        "response":" import heapq\n\ndef heap_assending(nums):\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(len(nums))]"
    },
    {
        "id":363,
        "response":" import math\n\ndef volume_cuboid(l, w, h):\n    if l < 0 or w < 0 or h < 0:\n        return \"Invalid input: length, width, and height cannot be negative\"\n    return l * w * h"
    },
    {
        "id":364,
        "response":" ```python\nimport itertools\n\ndef permute_string(str):\n    perms = [''.join(p) for p in itertools.permutations(str)]\n    return perms\n```"
    },
    {
        "id":365,
        "response":" import math\n\ndef round_num(n, m):\n    return round(n \/ m) * m"
    },
    {
        "id":366,
        "response":" from typing import Tuple, Any\nfrom collections import Counter\n\ndef remove_replica(test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    count = Counter(test_tup)\n    custom_value = 'custom_value'\n    result = []\n    for item in test_tup:\n        if count[item] > 1:\n            result.append(custom_value)\n            count[item] -= 1\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":367,
        "response":" import re\n\ndef remove_Char(s, c):\n    return re.sub(c, '', s)"
    },
    {
        "id":368,
        "response":" from typing import List\n\ndef move_first(test_list: List[int]) -> List[int]:\n    if len(test_list) > 1:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n    return test_list"
    },
    {
        "id":369,
        "response":" ```\nimport math\n\ndef surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)\n```"
    },
    {
        "id":370,
        "response":" def multi_list(rownum, colnum):\n        import typing\n        return [[0 for _ in range(colnum)] for _ in range(rownum)]"
    },
    {
        "id":371,
        "response":" import functools\nimport operator\n\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=functools.cmp_to_key(lambda x, y: operator.gt(x[index_no], y[index_no]) - operator.lt(x[index_no], y[index_no])) if index_no >= 0 else functools.cmp_to_key(lambda x, y: operator.gt(x[len(x)+index_no], y[len(y)+index_no]) - operator.lt(x[len(x)+index_no], y[len(y)+index_no])))"
    },
    {
        "id":372,
        "response":" from typing import List\n\ndef find_rotation_count(A: List[int]) -> int:\n    if not A:\n        return 0\n\n    left, right = 0, len(A) - 1\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "id":373,
        "response":" ```python\nimport math\n\ndef even_bit_toggle_number(n):\n    mask = 0\n    i = 0\n    while i < 32:\n        mask |= 1 << i\n        i += 2\n    return n ^ mask\n```"
    },
    {
        "id":374,
        "response":" from typing import List\nfrom collections import Counter\n\ndef frequency_Of_Smallest(n: int, arr: List[int]) -> int:\n    return Counter(arr)[min(arr)]"
    },
    {
        "id":375,
        "response":" import typing\n\ndef get_perrin(n: int) -> int:\n    def perrin(a: int, b: int, c: int, n: int) -> int:\n        if n == 0:\n            return a\n        elif n == 1:\n            return b\n        elif n == 2:\n            return c\n        else:\n            return perrin(b, c, a + b, n - 1)\n\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return perrin(0, 0, 1, n)"
    },
    {
        "id":376,
        "response":" from collections import deque\n\ndef swap_count(s):\n    stack = deque()\n    count = 0\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    while stack:\n        if len(stack) >= 2 and stack[-1] == ']' and stack[-2] == '[':\n            stack.pop()\n            stack.pop()\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "id":377,
        "response":" import re\n\ndef even_or_odd(N):\n    hex_num = re.sub(r'[^0-9A-Fa-f]', '', str(N))\n    decimal_num = int(hex_num, 16)\n    return \"Even\" if decimal_num % 2 == 0 else \"Odd\""
    },
    {
        "id":378,
        "response":" import math\n\ndef highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    return 2 ** math.floor(math.log2(n))"
    },
    {
        "id":379,
        "response":" import math \n\n     def find_lucas(n):\n        if n == 0:\n            return 2\n        elif n == 1:\n            return 1\n        else:\n            a, b = 2, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b"
    },
    {
        "id":380,
        "response":" ```python\nimport typing\n\ndef add_string(input_list: typing.List[str], string: str) -> typing.List[str]:\n    return [string + item for item in input_list]\n```"
    },
    {
        "id":381,
        "response":" from typing import List, Dict, Any\n\ndef convert_list_dictionary(l1: List[Any], l2: List[Any], l3: List[Any]) -> Dict[Any, Any]:\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "id":382,
        "response":" import math\n\ndef get_max_sum (n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        if i >= 2 and i % 2 == 0:\n            dp[i] = max(dp[i], dp[i \/\/ 2] + dp[i \/\/ 2])\n        if i >= 3 and i % 3 == 0:\n            dp[i] = max(dp[i], dp[i \/\/ 3] + dp[i \/\/ 3] + dp[i \/\/ 3])\n        if i >= 4 and i % 4 == 0:\n            dp[i] = max(dp[i], dp[i \/\/ 4] + dp[i \/\/ 4] + dp[i \/\/ 4] + dp[i \/\/ 4])\n        if i >= 5 and i % 5 == 0:\n            dp[i] = max(dp[i], dp[i \/\/ 5] + dp[i \/\/ 5] + dp[i \/\/ 5] + dp[i \/\/ 5] + dp[i \/\/ 5])\n    return dp[n]"
    },
    {
        "id":383,
        "response":" import functools\n\ndef max_length_list(input_list):\n    return max(input_list, key = lambda x: len(x))"
    },
    {
        "id":384,
        "response":" ```python\nimport typing\n\ndef check_distinct(test_tup: typing.Tuple) -> typing.Tuple:\n    return test_tup if len(test_tup) == len(set(test_tup)) else ()\n```"
    },
    {
        "id":385,
        "response":" from collections import Counter\n\ndef first_non_repeating_character(str1):\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "id":386,
        "response":" import re\n\ndef check_char(string):\n    if re.match(r'^(.).*\\1$', string):\n        return string"
    },
    {
        "id":387,
        "response":" import statistics\n\ndef median_numbers(a, b, c):\n    return statistics.median([a, b, c])"
    },
    {
        "id":388,
        "response":" ```\nimport itertools\n\ndef sum_of_digits(nums):\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n```"
    },
    {
        "id":389,
        "response":" ```\nimport operator\nimport itertools\n\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(map(operator.xor, test_tup1, test_tup2))\n```"
    },
    {
        "id":390,
        "response":" from collections import Counter\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple]) -> List[Tuple]:\n    freq_dict = Counter(tuple(sorted(sub)) for sub in test_list)\n    return [(k, freq_dict[k]) for k in freq_dict]"
    },
    {
        "id":391,
        "response":" import itertools\nimport operator\n\ndef add_nested_tuples(test_tup1, test_tup2):\n    return tuple(map(tuple, map(operator.add, test_tup1, test_tup2)))"
    },
    {
        "id":392,
        "response":" import math\n\ndef ncr_modp(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p"
    },
    {
        "id":393,
        "response":" ```python\nimport re\nfrom urllib.parse import urlparse\n\ndef is_valid_URL(str):\n    try:\n        result = urlparse(str)\n        return all([result.scheme, result.netloc])\n    except ValueError:\n        return False\n```"
    },
    {
        "id":394,
        "response":" import math\ndef minimum(a, b):\n    return min(a, b)"
    },
    {
        "id":395,
        "response":" import typing\ndef check_tuplex(tuplex: typing.Tuple, tuple1: typing.Tuple) -> typing.Tuple:\n    for element in tuple1:\n        if element in tuplex:\n            return tuplex\n    return ()"
    },
    {
        "id":396,
        "response":" ```python\nimport math\n\ndef find_Parity(x):\n    return x & 1\n```"
    },
    {
        "id":397,
        "response":" import itertools\n\ndef rearrange_bigger(n):\n    nums = [int(x) for x in str(n)]\n    perms = list(itertools.permutations(nums))\n    perms = [int(''.join(map(str, x))) for x in perms]\n    perms = sorted(list(set(perms)))\n    index = perms.index(n)\n    if index == len(perms) - 1:\n        return None\n    else:\n        return perms[index + 1]"
    },
    {
        "id":398,
        "response":" import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    queue = []\n    for i in range(len(nums1)):\n        heapq.heappush(queue, (nums1[i] + nums2[0], i, 0))\n    result = []\n    while queue and len(result) < k:\n        _, i, j = heapq.heappop(queue)\n        result.append((nums1[i], nums2[j]))\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n    return result"
    },
    {
        "id":399,
        "response":" from typing import List, Tuple\nimport itertools\nimport math\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    min_product = math.inf\n    result = []\n    for pair in itertools.combinations(list1, 2):\n        product = pair[0][0] * pair[0][1] + pair[1][0] * pair[1][1]\n        if product < min_product:\n            min_product = product\n            result = [pair]\n        elif product == min_product:\n            result.append(pair)\n    return result"
    },
    {
        "id":400,
        "response":" import math\n     import re\n     import typing\n     from itertools import accumulate, chain, combinations, permutations\n     from collections import Counter, deque, defaultdict\n     from bisect import bisect_left, bisect_right\n\ndef min_val(listval):\n     return min(listval)"
    },
    {
        "id":401,
        "response":" import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"
    },
    {
        "id":402,
        "response":" import typing\n\ndef remove_odd(l: typing.List[int]) -> typing.List[int]:\n    return [i for i in l if i % 2 == 0]"
    },
    {
        "id":403,
        "response":" from typing import List, Tuple\n\n     def extract_nth_element(list1: List[Tuple], n: int) -> List:\n        return [i[n] for i in list1]"
    },
    {
        "id":404,
        "response":" from typing import List, Any\n\ndef overlapping(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return [value for value in list1 if value in list2]"
    },
    {
        "id":405,
        "response":" import itertools\n     import math\n\n     def max_Product(arr):\n         max_product = -math.inf\n         result = ()\n         for pair in itertools.combinations(arr, 2):\n             product = pair[0] * pair[1]\n             if product > max_product:\n                 max_product = product\n                 result = pair\n         return result"
    },
    {
        "id":406,
        "response":" ```\nimport math\n\ndef breakSum(n: int) -> int:\n    if n < 4:\n        return n\n    else:\n        return (n \/\/ 3) * 4 + (n % 3)\n```"
    },
    {
        "id":407,
        "response":" import typing \n\n     def group_tuples(Input: typing.Tuple[typing.Tuple[int]]) -> typing.Tuple[int]:\n        Input = list(Input)\n        for i in range(len(Input[0])):\n            common = set(Input[0][i])\n            for j in range(1, len(Input)):\n                common.intersection_update(Input[j][i])\n                if not common:\n                    break\n            if common:\n                return tuple(common)\n        return ()"
    },
    {
        "id":408,
        "response":" import itertools\n\ndef Find_Max(lst):\n    return max(itertools.groupby(lst), key=lambda x: len(list(x[1])))[1]"
    },
    {
        "id":409,
        "response":" ```\nimport math\n\ndef round_and_sum(list1):\n    total_sum = sum(math.floor(num + 0.5) for num in list1)\n    return total_sum * len(list1)\n```"
    },
    {
        "id":410,
        "response":" import math\n\ndef cube_Sum(n):\n    return sum([i**3 for i in range(2, n*2+1, 2)])"
    },
    {
        "id":411,
        "response":" import re\n     import typing\n     import itertools\n\n     def concatenate_tuple(test_tup):\n         return tuple(itertools.chain.from_iterable(re.split(r'\\s+', str(i)) for i in test_tup))"
    },
    {
        "id":412,
        "response":" from typing import Union\n\ndef find_Average_Of_Cube(n: int) -> Union[int, float]:\n    if n == 0:\n        return 0\n    sum_of_cubes = sum(i ** 3 for i in range(1, n + 1))\n    return sum_of_cubes \/ n"
    },
    {
        "id":413,
        "response":" from typing import List\n\ndef get_maxgold(gold: List[List[int]], m: int, n: int) -> int:\n    gold[m-1][n-1] += gold[m-1][n-2]\n    for i in range(m-2, -1, -1):\n        gold[i][n-1] += gold[i+1][n-1]\n    for j in range(n-2, -1, -1):\n        gold[m-1][j] += gold[m-2][j]\n    for i in range(m-2, -1, -1):\n        for j in range(n-2, -1, -1):\n            gold[i][j] += max(gold[i+1][j], gold[i][j+1])\n    return gold[0][0]"
    },
    {
        "id":414,
        "response":" import re\nimport typing\nimport itertools\n\ndef extract_rear(test_tuple: typing.Tuple[str, ...]) -> typing.Tuple[str, ...]:\n    return tuple(s[-1] for s in test_tuple)"
    },
    {
        "id":415,
        "response":" from typing import List, Any\n\n     def count_element_in_list(list1: List[List[Any]], x: Any) -> List[List[Any]]:\n         return [sublist for sublist in list1 if x in sublist]"
    },
    {
        "id":416,
        "response":" import typing\n\n     def filter_oddnumbers(nums: typing.List[int]) -> typing.List[int]:\n         return list(filter(lambda x: x % 2 != 0, nums))"
    },
    {
        "id":417,
        "response":" import re\n     from datetime import datetime\n\n     def change_date_format(dt):\n         match = re.match(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', dt)\n         if match:\n             return f'{match.group(3)}-{match.group(2)}-{match.group(1)}'\n         else:\n             return dt"
    },
    {
        "id":418,
        "response":" ```python\nimport typing\n\ndef shell_sort(my_list: typing.List[int]) -> typing.List[int]:\n    n = len(my_list)\n    gap = n \/\/ 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap \/\/= 2\n\n    return my_list\n```"
    },
    {
        "id":419,
        "response":" def and_tuples(test_tup1, test_tup2):\n    from typing import Tuple\n    from itertools import zip_longest\n    return tuple(x for x, y in zip_longest(test_tup1, test_tup2) if x == y)"
    },
    {
        "id":420,
        "response":" import math\n\ndef parabola_directrix(a, b, c):\n    return -((b**2 - 4*a*c) \/ (4*a))"
    },
    {
        "id":421,
        "response":" ```python\nimport typing\n\ndef common_element(list1: typing.List[typing.Any], list2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1.intersection(set2)\n    return list1 if common else []\n```"
    },
    {
        "id":422,
        "response":" import math\n\ndef median_trapezium(base1, base2, height):\n    return (base1 + base2) \/ 2"
    },
    {
        "id":423,
        "response":" def check_greater(arr, number):\n     import typing\n     for i in range(len(arr)):\n         if arr[i] >= number:\n             arr[i] = False\n         else:\n             arr[i] = True\n     return arr"
    },
    {
        "id":424,
        "response":" import re\n\ndef text_match_one(text):\n    if re.search(r'B+', text):\n        return text"
    },
    {
        "id":425,
        "response":" import math\n\ndef last_Digit(n):\n    return n % 10"
    },
    {
        "id":426,
        "response":" import re\nimport typing\nfrom itertools import filterfalse\n\ndef neg_nos(list1):\n    return list(filter(lambda x: x < 0, list1))"
    },
    {
        "id":427,
        "response":" import re\nimport typing\n\ndef remove_odd(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])"
    },
    {
        "id":428,
        "response":" from typing import List, Tuple\n     from collections import defaultdict\n\n     def count_bidirectional(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n         freq_dict = defaultdict(int)\n         for tup in test_list:\n             freq_dict[tup] += 1\n             freq_dict[(tup[1], tup[0])] += 1\n         return [tup for tup in test_list if freq_dict[tup] > 1]"
    },
    {
        "id":429,
        "response":" import functools\n     import operator\n\n     def multiple_to_single(L):\n         return functools.reduce(operator.mul, L, 1)"
    },
    {
        "id":430,
        "response":" import re\n     from typing import List, Tuple\n\n     def find_adverb_position(text: str) -> List[Tuple[str, int]]:\n         words = text.split()\n         adverbs = [word for word in words if word.endswith('ly')]\n         positions = [(adverb, text.find(adverb)) for adverb in adverbs]\n         return positions"
    },
    {
        "id":431,
        "response":" def surfacearea_cube(l):\n        import math\n        return 6 * (l ** 2)"
    },
    {
        "id":432,
        "response":" from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    return sum(1 for num in nums if num > 0) \/ len(nums)"
    },
    {
        "id":433,
        "response":" import math\n     import re\n     import typing\n     import itertools\n     import string\n\n     def largest_neg(list1):\n         list1 = [i for i in list1 if isinstance(i, int) and i < 0]\n         return max(list1) if list1 else None"
    },
    {
        "id":434,
        "response":" from typing import Tuple, List\n\ndef trim_tuple(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return [tuple(i[:K] + i[-K:] if K < len(i) \/\/ 2 else i) for i in test_list]"
    },
    {
        "id":435,
        "response":" from typing import Tuple\n\n     def index_multiplication(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n         return tuple(i * j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "id":436,
        "response":" from typing import Tuple, List\n\n     def count_Occurrence(tup: Tuple, lst: List) -> Tuple:\n        return tuple(lst.count(i) for i in tup)"
    },
    {
        "id":437,
        "response":" from typing import List\n     def cube_nums(nums: List[int]) -> List[int]:\n         return list(map(lambda x: x**3, nums))"
    },
    {
        "id":438,
        "response":" ```python\ndef cal_sum(n):\n    return sum(n)\n```"
    },
    {
        "id":439,
        "response":" import math\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    a = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    b = math.sqrt((x3-x2)**2 + (y3-y2)**2)\n    c = math.sqrt((x1-x3)**2 + (y1-y3)**2)\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"
    },
    {
        "id":440,
        "response":" ```\nimport re\nfrom typing import List\n\ndef extract_string(str_list: List[str], length: int) -> List[str]:\n    return [s for s in str_list if len(s) == length]\n```"
    },
    {
        "id":441,
        "response":" import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "id":442,
        "response":" ```python\nimport typing\n\ndef loss_amount(actual_cost: float, sale_amount: float, given_amount: float) -> typing.Optional[float]:\n    if actual_cost - sale_amount == given_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n```"
    },
    {
        "id":443,
        "response":" ```python\nimport math\n\ndef sumofFactors(n):\n    factors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n \/\/ i)\n    return sum(factors)\n```"
    },
    {
        "id":444,
        "response":" import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.search(pattern, text)"
    },
    {
        "id":445,
        "response":" ```\nimport calendar\n\ndef check_month_number(monthnum2):\n    return calendar.monthrange(2024, monthnum2)[1] == 31\n```"
    },
    {
        "id":446,
        "response":" from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]"
    },
    {
        "id":447,
        "response":" import sys\n\ndef Find_Min(lst):\n    min_len = sys.maxsize\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "id":448,
        "response":" ```\nimport math\n\ndef rectangle_area(l, b):\n    return l * b\n     ```"
    },
    {
        "id":449,
        "response":" import re\n\ndef remove_uppercase(str1):\n    return re.sub('[A-Z]+', '', str1)"
    },
    {
        "id":450,
        "response":" ```\nfrom typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sub_list[0] for sub_list in lst]\n```"
    },
    {
        "id":451,
        "response":" import re\n\ndef upper_ctr(str):\n    return sum(1 for c in str if re.match(r'[A-Z]', c))"
    },
    {
        "id":452,
        "response":" ```\nfrom typing import List\nimport itertools\n\ndef combinations_list(list1: List) -> List[List]:\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.combinations(list1, r))\n    return [list(i) for i in result]\n```"
    },
    {
        "id":453,
        "response":" from typing import List\n\ndef max_subarray_product(arr: List[int]) -> List[int]:\n    if not arr:\n        return []\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return [result]"
    },
    {
        "id":454,
        "response":" ```python\nimport typing\n\ndef check_value(input_dict: typing.Dict, n: typing.Any) -> typing.Dict:\n    result = {k: v for k, v in input_dict.items() if v == n}\n    return result\n```"
    },
    {
        "id":455,
        "response":" ```python\nimport collections\n\ndef drop_empty(dict1):\n    dict1 = {k: v for k, v in dict1.items() if v}\n    return dict1\n     ```"
    },
    {
        "id":456,
        "response":" import typing\n\ndef find_peak_util(arr: typing.List[int], low: int, high: int, n: int) -> typing.List[int]:\n    mid = (low + high) \/\/ 2\n    if (mid == 0 or arr[mid] >= arr[mid-1]) and (mid == n-1 or arr[mid] >= arr[mid+1]):\n        return arr[mid]\n    elif mid > 0 and arr[mid] < arr[mid-1]:\n        return find_peak_util(arr, low, (mid-1), n)\n    else:\n        return find_peak_util(arr, (mid+1), high, n)"
    },
    {
        "id":457,
        "response":" import re\nimport typing\nimport itertools\n\ndef decimal_to_Octal(deciNum: int) -> str:\n    return oct(deciNum).replace(\"0o\", \"\")"
    },
    {
        "id":458,
        "response":" import itertools\nimport math\n\ndef max_product(arr, n):\n    max_product = -math.inf\n    for combination in itertools.combinations(arr, n):\n        product = 1\n        for num in combination:\n            product *= num\n        max_product = max(max_product, product)\n    return max_product"
    },
    {
        "id":459,
        "response":" def max_profit(price, k):\n        import sys\n        import itertools\n        if not price:\n            return 0\n        if k >= len(price) \/\/ 2:\n            return sum(max(0, b - a) for a, b in itertools.pairwise(price))\n        dp = [[0] * len(price) for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            max_diff = -price[0]\n            for j in range(1, len(price)):\n                dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n                max_diff = max(max_diff, dp[i - 1][j] - price[j])\n        return dp[k][-1]"
    },
    {
        "id":460,
        "response":" from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n     result = []\n     for i in range(0, len(test_tup), 2):\n         if i + 1 < len(test_tup):\n             result.append(test_tup[i] + test_tup[i + 1])\n         else:\n             result.append(test_tup[i])\n     return tuple(result)"
    },
    {
        "id":461,
        "response":" from typing import List\n\ndef find_remainder(arr: List[int], lens: int, n: int) -> List[int]:\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return [result]"
    },
    {
        "id":462,
        "response":" import typing\n     def check_Consecutive(l: typing.List[int]) -> typing.List[int]:\n        l.sort()\n        for i in range(len(l) - 1):\n            if l[i] + 1 != l[i + 1]:\n                return False\n        return True"
    },
    {
        "id":463,
        "response":" from typing import Tuple, List\nfrom collections import Counter\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> List[Tuple]:\n    test_list1 = [tuple(sorted(sub)) for sub in test_list1]\n    test_list2 = [tuple(sorted(sub)) for sub in test_list2]\n    counter1 = Counter(test_list1)\n    counter2 = Counter(test_list2)\n    result = list((counter1 & counter2).elements())\n    return result"
    },
    {
        "id":464,
        "response":" ```\nimport re\n\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    return re.sub(ch, newch, str1)\n```"
    },
    {
        "id":465,
        "response":" from collections import Counter\n     from typing import Dict\n\n     def sort_counter(dict1: Dict) -> Dict:\n        return dict(sorted(dict1.items(), key=lambda item: item[1]))"
    },
    {
        "id":466,
        "response":" import sys\n     def big_sum(nums):\n         return max(nums) + min(nums)"
    },
    {
        "id":467,
        "response":" import re\n     import typing\n     import itertools\n\n     def to_lower(string: str) -> str:\n         return string.lower()"
    },
    {
        "id":468,
        "response":" import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]+', '', str1)"
    },
    {
        "id":469,
        "response":" import re\n\ndef first_Digit(n):\n    return int(re.match(r'\\d', str(n)).group())"
    },
    {
        "id":470,
        "response":" from collections import Counter\n\ndef get_max_occuring_char(str1):\n    if len(str1) == 0:\n        return \"\"\n    counter = Counter(str1)\n    max_char = max(counter, key=counter.get)\n    return max_char"
    },
    {
        "id":471,
        "response":" ```python\nimport itertools\n\ndef is_subset_sum(set, n, sum):\n    for r in range(n + 1):\n        for subset in itertools.combinations(set, r):\n            if sum(subset) == sum:\n                return list(subset)\n    return []\n```"
    },
    {
        "id":472,
        "response":" import re\n\ndef match(text):\n    return re.findall(r'[A-Z][a-z]+', text)"
    },
    {
        "id":473,
        "response":" from math import factorial\nfrom typing import Union\n\ndef first_Factorial_Divisible_Number(x: int) -> Union[int, None]:\n    n = 1\n    while True:\n        if factorial(n) % x == 0:\n            return n\n        n += 1"
    },
    {
        "id":474,
        "response":" from typing import Tuple\n\ndef remove_matching_tuple(test_list1: Tuple, test_list2: Tuple) -> Tuple:\n    return tuple(x for x in test_list1 if x not in test_list2)"
    },
    {
        "id":475,
        "response":" ```python\nimport re\nimport typing\nimport itertools\n\ndef is_palindrome(n: int) -> int:\n    n = str(n)\n    if n == n[::-1]:\n        return int(n)\n    return None\n```"
    },
    {
        "id":476,
        "response":" import math\n\ndef nCr(n, r):\n    if r > n - r:\n        r = n - r\n    if r < 0 or r > n:\n        return 0\n    if r == 0:\n        return 1\n    return math.factorial(n) \/ (math.factorial(r) * math.factorial(n - r))"
    },
    {
        "id":477,
        "response":" ```python\nimport operator\n\ndef sort_tuple(tup):\n    return sorted(tup, key=operator.itemgetter(-1))\n```"
    },
    {
        "id":478,
        "response":" ```\nimport math\n\ndef area_pentagon(a):\n    n = 5\n    return (n * a ** 2) \/ (4 * math.tan(math.pi \/ n))\n```"
    },
    {
        "id":479,
        "response":" from typing import List\n     import itertools\n\n     def frequency_Of_Largest(n: int, arr: List[int]) -> int:\n         return len(list(itertools.groupby(sorted(arr), lambda x: x))[-1][1])"
    },
    {
        "id":480,
        "response":" from typing import Tuple\n\ndef extract_symmetric(test_list: Tuple[Tuple[int, int]]) -> Tuple[Tuple[int, int]]:\n    symmetric_list = []\n    for pair in test_list:\n        if (pair[1], pair[0]) in test_list and pair not in symmetric_list and (pair[1], pair[0]) not in symmetric_list:\n            symmetric_list.append(pair)\n    return tuple(symmetric_list)"
    },
    {
        "id":481,
        "response":" ```\nimport math\n\ndef sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r ** n) \/ (1 - r)\n```"
    },
    {
        "id":482,
        "response":" import typing\n\ndef binary_search(item_list: typing.List[int], item: int) -> typing.List[int]:\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        guess = item_list[mid]\n        if guess == item:\n            return item_list\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return item_list"
    },
    {
        "id":483,
        "response":" from typing import Tuple, List\nimport math\n\ndef calculate_polygons(startx: float, starty: float, endx: float, endy: float, radius: float) -> List[Tuple[float, float]]:\n    points = []\n    for i in range(6):\n        angle = math.pi \/ 3 * i\n        x = startx + radius * math.cos(angle)\n        y = starty + radius * math.sin(angle)\n        points.append((x, y))\n    return points"
    },
    {
        "id":484,
        "response":" from typing import Tuple\n\ndef binary_to_integer(test_tup: Tuple[str, ...]) -> int:\n    return int(''.join(test_tup), 2)"
    },
    {
        "id":485,
        "response":" import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]+', '', str1)"
    },
    {
        "id":486,
        "response":" ```\nimport heapq\nfrom typing import List\n\ndef heap_queue_smallest(nums: List[int], n: int) -> List[int]:\n    return heapq.nsmallest(n, nums)\n```"
    },
    {
        "id":487,
        "response":" import math\n\ndef surfacearea_cone(r, h):\n    pi = math.pi\n    l = math.sqrt(r**2 + h**2)\n    return pi * r * (r + l)"
    },
    {
        "id":488,
        "response":" import math\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x"
    },
    {
        "id":489,
        "response":" import math\n\ndef diameter_circle(r):\n    return 2 * r"
    },
    {
        "id":490,
        "response":" import typing\n\ndef concatenate_elements(input_list: typing.List[typing.Any]) -> str:\n    return ''.join(map(str, input_list))"
    },
    {
        "id":491,
        "response":" from typing import List\n\ndef min_cost(cost: List[List[int]], m: int, n: int) -> int:\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    return dp[m][n]"
    },
    {
        "id":492,
        "response":" from typing import Tuple\n\n     def similar_elements(test_tup1: Tuple, test_tup2: Tuple) -> Tuple:\n     return tuple(set(test_tup1) & set(test_tup2))"
    },
    {
        "id":493,
        "response":" import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return n"
    },
    {
        "id":494,
        "response":" import heapq\n     from typing import List\n\n     def heap_queue_largest(nums: List[int], n: int) -> List[int]:\n         return heapq.nlargest(n, nums)"
    },
    {
        "id":495,
        "response":" import typing\n\ndef count_ways(n: int) -> int:\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    a, b = 2, 3\n    for _ in range(4, n + 1):\n        a, b = b, a + b\n    return b"
    },
    {
        "id":496,
        "response":" ```\nimport math\n\ndef is_Power_Of_Two(x):\n    if x <= 0:\n        return False\n    return (x & (x - 1)) == 0\n```"
    },
    {
        "id":497,
        "response":" import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    },
    {
        "id":498,
        "response":" ```python\nimport typing\n\ndef square_nums(nums: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x ** 2, nums))\n```"
    },
    {
        "id":499,
        "response":" import math\n     from typing import Optional\n\n     def find_Rotations(str: Optional[str]) -> int:\n         if str is None or len(str) == 0:\n             return 0\n         double_str = str + str\n         return double_str.find(str[1:]) + 1"
    },
    {
        "id":500,
        "response":" import heapq\n     from typing import List\n\n     def small_nnum(list1: List[int], n: int) -> List[int]:\n     return heapq.nsmallest(n, list1)"
    }
]