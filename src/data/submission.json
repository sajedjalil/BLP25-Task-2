[
    {
        "id":1,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef max_chain_length(pairs, n):\n    if not pairs or n <= 0:\n        return 0\n    \n    pairs.sort(key=lambda x: x[1])\n    \n    max_length = 1\n    current_end = pairs[0][1]\n    \n    for i in range(1, n):\n        if pairs[i][0] > current_end:\n            max_length += 1\n            current_end = pairs[i][1]\n    \n    return max_length"
    },
    {
        "id":2,
        "response":"import re\nimport typing\nimport itertools\n\ndef first_repeated_char(s: str) -> str:\n    if not s:\n        return None\n    \n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    \n    return None"
    },
    {
        "id":3,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef get_ludic(n):\n    if n < 1:\n        return []\n    \n    ludics = list(range(1, n + 1))\n    \n    i = 1\n    while i < len(ludics):\n        current = ludics[i]\n        j = i + current\n        \n        while j < len(ludics):\n            ludics.pop(j)\n            j = j - 1 + current\n        \n        i += 1\n    \n    return ludics"
    },
    {
        "id":4,
        "response":"import re\nfrom typing import Optional\n\ndef reverse_words(s: Optional[str]) -> str:\n    if s is None:\n        return \"\"\n    \n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "id":5,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "id":6,
        "response":"import math\n\ndef radian_degree(n):\n    return n * (math.pi \/ 180)"
    },
    {
        "id":7,
        "response":"import re\nfrom typing import Optional\n\ndef find_literals(s: str, s2: str) -> Optional[int]:\n    if not s or not s2:\n        return None\n    \n    match = re.search(re.escape(s2), s)\n    \n    return match.start() if match else None"
    },
    {
        "id":8,
        "response":"import re\nimport typing\nimport itertools\n\ndef bell_Number(n):\n    if n < 0:\n        return None\n    \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]"
    },
    {
        "id":9,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef floor_Min(*args):\n    if not args:\n        return None\n    \n    min_value = float('inf')\n    for arg in args:\n        if isinstance(arg, (int, float)):\n            min_value = min(min_value, math.floor(arg))\n        elif isinstance(arg, (list, tuple)):\n            for item in arg:\n                if isinstance(item, (int, float)):\n                    min_value = min(min_value, math.floor(item))\n    \n    return min_value if min_value != float('inf') else None\n```"
    },
    {
        "id":10,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef remove_kth_element(lst: list, k: int) -> list:\n    if not lst:\n        return lst\n    \n    if k < 1 or k > len(lst):\n        return lst\n    \n    return lst[:k-1] + lst[k:]"
    },
    {
        "id":11,
        "response":"import re\nimport typing\nimport itertools\n\ndef max_of_nth(lst: typing.List[tuple], n: int) -> typing.Any:\n    if not lst:\n        raise ValueError(\"Input list is empty\")\n    \n    if n < 0 or n >= len(lst[0]):\n        raise IndexError(\"Column index out of range\")\n    \n    try:\n        return max(item[n] for item in lst)\n    except TypeError:\n        raise TypeError(\"Cannot compare elements in the specified column\")"
    },
    {
        "id":12,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef merge(lst):\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    \n    first_elements = [lst[0]]\n    last_elements = [lst[-1]]\n    \n    return first_elements + last_elements"
    },
    {
        "id":13,
        "response":"import re\nimport typing\nimport itertools\n\ndef maximum_value(lst):\n    if not lst:\n        return None\n    \n    try:\n        max_value = max(record[1] for record in lst)\n        return max_value\n    except (TypeError, IndexError):\n        return None"
    },
    {
        "id":14,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef cumulative_sum(lst):\n    if not lst:\n        return []\n    \n    result = []\n    total = 0\n    \n    for item in lst:\n        total += item\n        result.append(total)\n    \n    return result"
    },
    {
        "id":15,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef average_tuple(tup):\n    if not tup:\n        return None\n    \n    try:\n        lengths = [len(t) for t in tup]\n        return statistics.mean(lengths)\n    except TypeError:\n        return None"
    },
    {
        "id":16,
        "response":"import typing\nimport itertools\n\ndef tuple_modulo(tup: typing.Tuple[int, ...], tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    if len(tup) != len(tup2):\n        raise ValueError(\"Tuples must have equal length\")\n    \n    if not all(isinstance(x, int) and isinstance(y, int) for x, y in zip(tup, tup2)):\n        raise TypeError(\"All elements must be integers\")\n    \n    if any(y == 0 for y in tup2):\n        raise ZeroDivisionError(\"Cannot perform modulo with zero\")\n    \n    return tuple(x % y for x, y in zip(tup, tup2))"
    },
    {
        "id":17,
        "response":"```python\nimport math\nimport typing\nimport re\nimport itertools\n\ndef min_Jumps(n: int, n2: int, n3: int) -> int:\n    d = abs(n)\n    \n    if d == 0:\n        return 0\n    \n    jump_lengths = [n2, n3]\n    min_jumps = float('inf')\n    \n    for r in range(d + 1):\n        x_jump = r\n        y_jump = d - r\n        \n        for combo in itertools.product(jump_lengths, repeat=x_jump + y_jump):\n            x_total = sum(j for j in combo[:x_jump] if j == n2)\n            y_total = sum(j for j in combo[x_jump:] if j == n3)\n            \n            if x_total == r and y_total == d - r:\n                min_jumps = min(min_jumps, x_jump + y_jump)\n    \n    return min_jumps if min_jumps != float('inf') else -1\n```"
    },
    {
        "id":18,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef div_list(lst, lst2):\n    try:\n        return list(map(lambda x, y: x \/ y if y != 0 else float('inf'), lst, lst2))\n    except TypeError:\n        return []\n```"
    },
    {
        "id":19,
        "response":"import re\nimport typing\nimport itertools\n\ndef move_num(s: str) -> str:\n    if not s:\n        return s\n    \n    numbers = re.findall(r'\\d+', s)\n    non_numbers = re.findall(r'[^\\d]+', s)\n    \n    result = []\n    max_length = max(len(numbers), len(non_numbers))\n    \n    for i in range(max_length):\n        if i < len(non_numbers):\n            result.append(non_numbers[i])\n        if i < len(numbers):\n            result.append(numbers[i])\n    \n    return ''.join(result)"
    },
    {
        "id":20,
        "response":"```python\nimport math\nimport typing\nimport itertools\nimport re\n\ndef largest_subset(lst: typing.List[int], n: int) -> int:\n    if not lst or n <= 0:\n        return 0\n    \n    def is_divisible_pair(a: int, b: int) -> bool:\n        return a % b == 0 or b % a == 0\n    \n    max_subset_size = 0\n    for subset_size in range(n, 0, -1):\n        for subset in itertools.combinations(lst, subset_size):\n            valid_subset = all(\n                is_divisible_pair(subset[i], subset[j]) \n                for i in range(len(subset)) \n                for j in range(i+1, len(subset))\n            )\n            if valid_subset:\n                max_subset_size = max(max_subset_size, subset_size)\n                break\n        if max_subset_size > 0:\n            break\n    \n    return max_subset_size\n```"
    },
    {
        "id":21,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef increment_numerics(lst: typing.List[str], k: int) -> typing.List[str]:\n    def increment_value(s: str) -> str:\n        if s.isnumeric():\n            return str(int(s) + k)\n        return s\n\n    return [increment_value(item) for item in lst]"
    },
    {
        "id":22,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef get_median(lst: list, lst2: list, n: int) -> float:\n    if not lst or not lst2 or len(lst) != n or len(lst2) != n:\n        raise ValueError(\"Invalid input arrays\")\n\n    merged = sorted(lst + lst2)\n    mid = len(merged) \/\/ 2\n\n    if len(merged) % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) \/ 2\n    else:\n        return merged[mid]"
    },
    {
        "id":23,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef nth_nums(lst, n):\n    return list(map(lambda x: x ** n, lst))\n```"
    },
    {
        "id":24,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef is_upper(s: str) -> str:\n    if s is None:\n        return \"\"\n    return s.upper()"
    },
    {
        "id":25,
        "response":"import re\nimport typing\nimport itertools\n\ndef swap_List(lst):\n    if not lst:\n        return lst\n    \n    if len(lst) == 1:\n        return lst\n    \n    first = lst[0]\n    last = lst[-1]\n    \n    lst[0] = last\n    lst[-1] = first\n    \n    return lst"
    },
    {
        "id":26,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef triangle_area(n):\n    if n <= 0:\n        return 0\n    \n    radius = n \/ 2\n    height = radius\n    base = math.sqrt(3) * radius\n    \n    area = 0.5 * base * height\n    \n    return round(area, 2)\n```"
    },
    {
        "id":27,
        "response":"import re\nimport typing\nimport itertools\n\ndef find_First_Missing(lst, n, n2):\n    if not lst or n <= 0 or n2 <= 0:\n        return None\n    \n    unique_set = set(lst)\n    \n    for num in range(1, n2 + 1):\n        if num not in unique_set:\n            return num\n    \n    return n2 + 1"
    },
    {
        "id":28,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef replace_spaces(s: str) -> str:\n    if s is None:\n        return \"\"\n    return s.replace(\" \", \"%20\")"
    },
    {
        "id":29,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef Split(lst):\n    if not isinstance(lst, list):\n        return []\n    \n    return [num for num in lst if isinstance(num, int) and num % 2 == 0]\n```"
    },
    {
        "id":30,
        "response":"import typing\nimport itertools\n\ndef get_coordinates(tup: typing.Tuple[int, int]) -> typing.List[typing.Tuple[int, int]]:\n    x, y = tup\n    adjacent_coords = [\n        (x-1, y-1), (x-1, y), (x-1, y+1),\n        (x, y-1), (x, y+1),\n        (x+1, y-1), (x+1, y), (x+1, y+1)\n    ]\n    return adjacent_coords"
    },
    {
        "id":31,
        "response":"```python\nimport re\n\ndef replace_spaces(s: str) -> str:\n    if s is None:\n        return \"\"\n    \n    if \" \" in s:\n        return re.sub(r'\\s', '_', s)\n    else:\n        return re.sub(r'_', ' ', s)\n```"
    },
    {
        "id":32,
        "response":"import re\nimport typing\nimport itertools\n\ndef move_zero(lst):\n    if not lst:\n        return lst\n    \n    non_zero = [x for x in lst if x != 0]\n    zeros = [x for x in lst if x == 0]\n    \n    return non_zero + zeros"
    },
    {
        "id":33,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef pair_OR_Sum(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_xor_sum += lst[i] ^ lst[j]\n    \n    return total_xor_sum\n```"
    },
    {
        "id":34,
        "response":"import re\nimport typing\nimport itertools\n\ndef even_Power_Sum(n):\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, n + 1):\n        even_num = 2 * i\n        total_sum += even_num ** 4\n    \n    return total_sum"
    },
    {
        "id":35,
        "response":"import heapq\nimport re\nimport typing\nimport itertools\nimport math\n\ndef heap_sort(lst):\n    if not lst:\n        return []\n    \n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "id":36,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef Check_Solution(n1, n2, n3):\n    a, b, c = n1, n2, n3\n    \n    if a == 0:\n        return False\n    \n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return False\n    \n    root1 = (-b + math.sqrt(discriminant)) \/ (2*a)\n    root2 = (-b - math.sqrt(discriminant)) \/ (2*a)\n    \n    return abs(root1 + root2) < 1e-10"
    },
    {
        "id":37,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef noprofit_noloss(n: int, n2: int) -> bool:\n    if n is None or n2 is None:\n        return False\n    \n    try:\n        return n == n2\n    except TypeError:\n        return False"
    },
    {
        "id":38,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef wind_chill(temperature, wind_speed):\n    if not isinstance(temperature, (int, float)) or not isinstance(wind_speed, (int, float)):\n        raise TypeError(\"Input must be numeric\")\n    \n    if temperature > 50 or wind_speed < 3:\n        return temperature\n    \n    wind_chill_index = 35.74 + (0.6215 * temperature) - (35.75 * (wind_speed ** 0.16)) + (0.4275 * temperature * (wind_speed ** 0.16))\n    \n    return round(wind_chill_index, 1)\n```"
    },
    {
        "id":39,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport split\n\ndef sample_nam(lst):\n    if not lst or not isinstance(lst, list):\n        return 0\n    \n    filtered_names = [name for name in lst if name and name[0].isupper()]\n    \n    return sum(len(name) for name in filtered_names)\n```"
    },
    {
        "id":40,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef remove_parenthesis(lst: typing.List[str]) -> typing.List[str]:\n    result = []\n    for item in lst:\n        cleaned_item = re.sub(r'\\([^)]*\\)', '', item)\n        cleaned_item = cleaned_item.strip()\n        if cleaned_item:\n            result.append(cleaned_item)\n    return result"
    },
    {
        "id":41,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef is_nonagonal(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    return n * (7 * n - 5) \/\/ 2\n```"
    },
    {
        "id":42,
        "response":"import re\nimport typing\nimport itertools\nimport numpy as np\n\ndef remove_similar_row(lst):\n    if not lst or not isinstance(lst, (list, tuple)):\n        return []\n    \n    unique_rows = []\n    for row in lst:\n        is_similar = False\n        for unique_row in unique_rows:\n            if len(row) == len(unique_row) and all(a == b for a, b in zip(row, unique_row)):\n                is_similar = True\n                break\n        \n        if not is_similar:\n            unique_rows.append(row)\n    \n    return unique_rows"
    },
    {
        "id":43,
        "response":"import re\n\ndef text_match_wordz_middle(s):\n    pattern = r'\\b\\w+z\\w+\\b'\n    matches = re.findall(pattern, s)\n    return matches"
    },
    {
        "id":44,
        "response":"import re\nimport typing\nimport itertools\n\ndef reverse_Array_Upto_K(lst, n):\n    if not lst or n <= 0 or n > len(lst):\n        return lst\n    \n    left = 0\n    right = n - 1\n    \n    while left < right:\n        lst[left], lst[right] = lst[right], lst[left]\n        left += 1\n        right -= 1\n    \n    return lst"
    },
    {
        "id":45,
        "response":"```python\nimport re\nimport typing\nimport itertools\nfrom typing import List\n\ndef find_k_product(lst: List[tuple], k: int) -> int:\n    if not lst or k < 0:\n        return 0\n    \n    product = 1\n    for tup in lst:\n        if k < len(tup):\n            product *= tup[k]\n    \n    return product\n```"
    },
    {
        "id":46,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef No_of_cubes(n, k):\n    if k > n or k <= 0 or n <= 0:\n        return 0\n    \n    possible_positions = (n - k + 1) ** 3\n    return possible_positions\n```"
    },
    {
        "id":47,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef split_upperstring(s: str) -> typing.List[str]:\n    if not s:\n        return []\n    \n    result = []\n    current_uppercase = \"\"\n    \n    for char in s:\n        if char.isupper():\n            current_uppercase += char\n        else:\n            if current_uppercase:\n                result.append(current_uppercase)\n                current_uppercase = \"\"\n    \n    if current_uppercase:\n        result.append(current_uppercase)\n    \n    return result\n```"
    },
    {
        "id":48,
        "response":"import re\nimport typing\nimport itertools\nimport copy\n\ndef exchange_elements(lst):\n    if not lst or len(lst) < 2:\n        return lst\n    \n    result = copy.deepcopy(lst)\n    for i in range(0, len(result) - 1, 2):\n        result[i], result[i+1] = result[i+1], result[i]\n    \n    return result"
    },
    {
        "id":49,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_Range_list(lst, n1, n2):\n    if not isinstance(lst, list):\n        raise TypeError(\"First argument must be a list\")\n    \n    if not (isinstance(n1, int) and isinstance(n2, int)):\n        raise TypeError(\"Indices must be integers\")\n    \n    if n1 < 0 or n2 < 0:\n        raise ValueError(\"Indices cannot be negative\")\n    \n    if n1 >= len(lst) or n2 >= len(lst):\n        raise IndexError(\"Index out of range\")\n    \n    if n1 > n2:\n        n1, n2 = n2, n1\n    \n    return sum(lst[n1:n2+1])"
    },
    {
        "id":50,
        "response":"import re\nimport typing\nimport itertools\n\ndef are_Equal(lst: typing.List[int], lst2: typing.List[int], n: int, n2: int) -> bool:\n    if n != n2:\n        return False\n    \n    lst.sort()\n    lst2.sort()\n    \n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return False\n    \n    return True"
    },
    {
        "id":51,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef check_subset(tup, tup2):\n    if not isinstance(tup, tuple) or not isinstance(tup2, tuple):\n        return False\n    \n    if not tup:\n        return True\n    \n    set1 = set(tup)\n    set2 = set(tup2)\n    \n    return set1.issubset(set2)"
    },
    {
        "id":52,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef matrix_to_list(matrix):\n    if not matrix or not matrix[0]:\n        return []\n    \n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    result = []\n    for col in range(cols):\n        column_tuple = tuple(matrix[row][col] for row in range(rows))\n        result.append(column_tuple)\n    \n    return result\n```"
    },
    {
        "id":53,
        "response":"from collections import defaultdict\nfrom typing import List, Tuple, Any\n\ndef grouping_dictionary(lst: List[Tuple[Any, Any]]) -> dict:\n    if not lst:\n        return {}\n    \n    result = defaultdict(list)\n    \n    for key, value in lst:\n        result[key].append(value)\n    \n    return dict(result)"
    },
    {
        "id":54,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef rectangle_perimeter(n, n2):\n    if not isinstance(n, (int, float)) or not isinstance(n2, (int, float)):\n        raise TypeError(\"Inputs must be numeric\")\n    \n    if n <= 0 or n2 <= 0:\n        raise ValueError(\"Dimensions must be positive\")\n    \n    return 2 * (n + n2)"
    },
    {
        "id":55,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef fifth_Power_Sum(n):\n    if not isinstance(n, int) or n <= 0:\n        return 0\n    \n    return sum(i**5 for i in range(1, n+1))"
    },
    {
        "id":56,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef find_Min_Sum(lst, lst2, n):\n    if not lst or not lst2 or len(lst) != n or len(lst2) != n:\n        return 0\n\n    lst.sort()\n    lst2.sort()\n\n    min_sum = sum(abs(lst[i] - lst2[i]) for i in range(n))\n\n    return min_sum"
    },
    {
        "id":57,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    \n    if n == 0:\n        return 1\n    \n    factorial = math.factorial(n)\n    \n    while factorial >= 10:\n        factorial \/\/= 10\n    \n    return factorial"
    },
    {
        "id":58,
        "response":"```python\nimport re\nimport typing\nimport itertools\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    if not lst:\n        return None\n    \n    counter = Counter(lst)\n    max_item = max(counter, key=counter.get)\n    \n    return max_item\n```"
    },
    {
        "id":59,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef Repeat(lst):\n    if not lst or not isinstance(lst, list):\n        return []\n    \n    duplicates = []\n    seen = set()\n    \n    for num in lst:\n        if num in seen and num not in duplicates:\n            duplicates.append(num)\n        else:\n            seen.add(num)\n    \n    return sorted(duplicates)\n```"
    },
    {
        "id":60,
        "response":"```python\nimport typing\nimport re\nimport itertools\n\ndef find_Points(n: int, n2: int, n3: int, n4: int) -> typing.List[int]:\n    range1 = set(range(min(n, n2), max(n, n2) + 1))\n    range2 = set(range(min(n3, n4), max(n3, n4) + 1))\n    \n    if len(range1.intersection(range2)) > 0:\n        return []\n    \n    result = []\n    for point1 in range1:\n        for point2 in range2:\n            result.append((point1, point2))\n    \n    return result\n```"
    },
    {
        "id":61,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef max_sum_of_three_consecutive(lst, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return lst[0]\n    if n == 2:\n        return max(lst[0], lst[1])\n    \n    dp = [0] * n\n    dp[0] = lst[0]\n    dp[1] = max(lst[0], lst[1])\n    dp[2] = max(dp[1], dp[0] + lst[2], lst[2])\n    \n    for i in range(3, n):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i], dp[i-3] + lst[i-1] + lst[i])\n    \n    return dp[n-1]\n```"
    },
    {
        "id":62,
        "response":"import re\nimport typing\nimport itertools\nimport copy\n\ndef sorted_dict(dct):\n    if not isinstance(dct, dict):\n        return dct\n    \n    sorted_result = {}\n    for key, value in dct.items():\n        if isinstance(value, list):\n            sorted_result[key] = sorted(value)\n        elif isinstance(value, dict):\n            sorted_result[key] = sorted_dict(value)\n        else:\n            sorted_result[key] = value\n    \n    return sorted_result"
    },
    {
        "id":63,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef find_max_val(n, x, y):\n    if x <= 0 or y < 0 or y >= x:\n        return -1\n    \n    max_k = n - (n % x) + y\n    \n    if max_k > n:\n        max_k -= x\n    \n    return max_k"
    },
    {
        "id":64,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\n\ndef average_Even(n):\n    if not isinstance(n, int) or n <= 0:\n        return 0\n    \n    even_numbers = [x for x in range(2, n+1, 2)]\n    \n    if not even_numbers:\n        return 0\n    \n    return sum(even_numbers) \/ len(even_numbers)\n```"
    },
    {
        "id":65,
        "response":"import re\nimport typing\nimport itertools\nimport split\n\ndef move_last(lst):\n    if not lst:\n        return lst\n    \n    first_element = lst.pop(0)\n    lst.append(first_element)\n    \n    return lst"
    },
    {
        "id":66,
        "response":"import re\nimport typing\nimport itertools\nfrom typing import Dict\n\ndef count_char(s: str, s2: str) -> Dict[str, int]:\n    if not s or not s2:\n        return {}\n    \n    result = {}\n    for char in s2:\n        count = s.count(char)\n        if count > 0:\n            result[char] = count\n    \n    return result"
    },
    {
        "id":67,
        "response":"import re\nimport typing\nimport itertools\n\ndef Check_Vow(s: str, s2: str) -> int:\n    vowels = set('aeiouAEIOU')\n    return sum(1 for char in s if char in vowels) + sum(1 for char in s2 if char in vowels)"
    },
    {
        "id":68,
        "response":"import re\nimport typing\nimport itertools\n\ndef replace(s: str, s2: str) -> str:\n    if not s or not s2:\n        return s\n    \n    result = []\n    for char in s:\n        if not result or char != result[-1] or char not in s2:\n            result.append(char)\n    \n    return ''.join(result)"
    },
    {
        "id":69,
        "response":"```python\nimport re\n\ndef check_IP(s):\n    if not isinstance(s, str):\n        return False\n    \n    pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n    \n    if not re.match(pattern, s):\n        return False\n    \n    octets = s.split('.')\n    \n    for octet in octets:\n        num = int(octet)\n        if num < 0 or num > 255:\n            return False\n        \n        if len(octet) > 1 and octet[0] == '0':\n            return False\n    \n    return True\n```"
    },
    {
        "id":70,
        "response":"```python\nimport typing\nimport itertools\nimport re\n\ndef decreasing_trend(lst: typing.List[int]) -> bool:\n    if not lst or len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] >= lst[i-1]:\n            return False\n    \n    return True\n```"
    },
    {
        "id":71,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 0\n    \n    if n & (n + 1) == 0:\n        return n\n    \n    mask = 1\n    while n & mask:\n        mask <<= 1\n    \n    return n | mask\n```"
    },
    {
        "id":72,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef max_of_three(n, n2, n3):\n    return max(n, n2, n3)"
    },
    {
        "id":73,
        "response":"import re\nimport typing\nimport itertools\n\ndef convert(lst):\n    if not lst:\n        return 0\n    \n    try:\n        result = int(''.join(map(str, lst)))\n        return result\n    except (ValueError, TypeError):\n        return 0"
    },
    {
        "id":74,
        "response":"import re\nfrom typing import List\n\ndef remove_duplicate(s: str) -> str:\n    if not s:\n        return \"\"\n    \n    words = s.split()\n    unique_words = []\n    seen = set()\n    \n    for word in words:\n        if word.lower() not in seen:\n            unique_words.append(word)\n            seen.add(word.lower())\n    \n    return \" \".join(unique_words)"
    },
    {
        "id":75,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef sum_nums(n, n2, n3, n4):\n    total_sum = n + n2 + n3 + n4\n    \n    if total_sum >= 10 and total_sum <= 20:\n        return 20\n    \n    return total_sum"
    },
    {
        "id":76,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport string\n\ndef remove_extra_char(s: str) -> str:\n    if s is None:\n        return \"\"\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n```"
    },
    {
        "id":77,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef validity_triangle(n1: float, n2: float, n3: float) -> bool:\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    \n    if (n1 + n2 <= n3) or (n1 + n3 <= n2) or (n2 + n3 <= n1):\n        return False\n    \n    return True\n```"
    },
    {
        "id":78,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef remove_spaces(s: str) -> str:\n    if s is None:\n        return \"\"\n    return s.replace(\" \", \"\")"
    },
    {
        "id":79,
        "response":"import re\nimport typing\nimport itertools\n\ndef access_key(dct: dict, n: int) -> typing.Any:\n    if not isinstance(dct, dict):\n        raise TypeError(\"First argument must be a dictionary\")\n    \n    if not isinstance(n, int):\n        raise TypeError(\"Second argument must be an integer\")\n    \n    keys = list(dct.keys())\n    \n    if n < 0 or n >= len(keys):\n        raise IndexError(\"Key index out of range\")\n    \n    return keys[n]"
    },
    {
        "id":80,
        "response":"import re\nimport typing\nimport itertools\n\ndef increasing_trend(lst):\n    if not lst or len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    \n    return True"
    },
    {
        "id":81,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef smallest_Divisor(n):\n    if n <= 1:\n        return n\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    \n    return n\n```"
    },
    {
        "id":82,
        "response":"import re\nimport typing\nimport itertools\n\ndef mul_list(lst, lst2):\n    if not lst or not lst2:\n        return []\n    \n    if len(lst) != len(lst2):\n        return list(map(lambda x, y: x * y, lst, lst2))\n    \n    return list(map(lambda x, y: x * y, lst, lst2))"
    },
    {
        "id":83,
        "response":"```python\nimport math\n\ndef sum_Square(n):\n    if n < 0:\n        return False\n    \n    for i in range(int(math.sqrt(n)) + 1):\n        for j in range(int(math.sqrt(n)) + 1):\n            if i*i + j*j == n:\n                return True\n    \n    return False\n```"
    },
    {
        "id":84,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef count_Char(s: str, n: int) -> typing.Dict[str, int]:\n    if not s or n <= 0:\n        return {}\n    \n    repeated_str = s * math.ceil(n \/ len(s))\n    substring = repeated_str[:n]\n    \n    char_count = {}\n    for char in substring:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    return char_count"
    },
    {
        "id":85,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_sum = 0\n    for num in range(2, n + 1):\n        if is_prime(num):\n            prime_sum += num\n    \n    return prime_sum"
    },
    {
        "id":86,
        "response":"import re\nimport typing\nimport itertools\nfrom collections import Counter\n\ndef freq_element(tup):\n    if not tup:\n        return {}\n    \n    frequency = {}\n    for item in tup:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    return frequency"
    },
    {
        "id":87,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef recur_gcd(n1: int, n2: int) -> int:\n    n1, n2 = abs(n1), abs(n2)\n    if n2 == 0:\n        return n1\n    return recur_gcd(n2, n1 % n2)"
    },
    {
        "id":88,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef len_complex(n, n2):\n    if not isinstance(n, complex) or not isinstance(n2, complex):\n        raise TypeError(\"Both arguments must be complex numbers\")\n    \n    real_diff = n.real - n2.real\n    imag_diff = n.imag - n2.imag\n    \n    length = math.sqrt(real_diff**2 + imag_diff**2)\n    return length\n```"
    },
    {
        "id":89,
        "response":"```python\nimport sys\nimport typing\nimport itertools\nimport re\n\ndef min_jumps(arr: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    \n    if arr[0] == 0:\n        return float('inf')\n    \n    max_reach = arr[0]\n    steps_left = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        \n        max_reach = max(max_reach, i + arr[i])\n        steps_left -= 1\n        \n        if steps_left == 0:\n            jumps += 1\n            \n            if i >= max_reach:\n                return float('inf')\n            \n            steps_left = max_reach - i\n    \n    return float('inf')\n```"
    },
    {
        "id":90,
        "response":"import typing\nimport itertools\nimport re\n\ndef mul_consecutive_nums(lst: typing.List[int]) -> typing.List[int]:\n    if not lst or len(lst) < 2:\n        return []\n    \n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] * lst[i + 1])\n    \n    return result"
    },
    {
        "id":91,
        "response":"```python\nimport re\nimport typing\nimport itertools\nfrom typing import List, Tuple, Dict\n\ndef group_element(lst: List[Tuple]) -> Dict[Any, List]:\n    result = {}\n    if not lst:\n        return result\n    \n    for item in lst:\n        if len(item) < 2:\n            continue\n        \n        key = item[1]\n        value = item[0]\n        \n        if key not in result:\n            result[key] = []\n        \n        result[key].append(value)\n    \n    return result\n```"
    },
    {
        "id":92,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef last_Two_Digits(n):\n    if n < 0:\n        return None\n    \n    if n <= 1:\n        return 1\n    \n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % 100\n    \n    return result"
    },
    {
        "id":93,
        "response":"import re\n\ndef remove_multiple_spaces(s: str) -> str:\n    return re.sub(r'\\s+', ' ', s)"
    },
    {
        "id":94,
        "response":"import re\nimport typing\nimport itertools\n\ndef extract_unique(dct):\n    if not isinstance(dct, dict):\n        return set()\n    \n    unique_values = set()\n    \n    for value in dct.values():\n        if isinstance(value, list):\n            unique_values.update(set(value))\n        elif isinstance(value, (int, str, float, bool)):\n            unique_values.add(value)\n    \n    return unique_values"
    },
    {
        "id":95,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_greater(tup: tuple, tup2: tuple) -> bool:\n    if len(tup) != len(tup2):\n        return False\n    \n    return all(b > a for a, b in zip(tup, tup2))"
    },
    {
        "id":96,
        "response":"import typing\nimport itertools\nimport re\nimport split\n\ndef zip_list(lst: typing.List, lst2: typing.List) -> typing.List:\n    if lst is None or lst2 is None:\n        return []\n    return list(itertools.chain(lst, lst2))"
    },
    {
        "id":97,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_even(lst):\n    return len(list(filter(lambda x: x % 2 == 0, lst)))"
    },
    {
        "id":98,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sort_dict_item(dct):\n    def key_product(item):\n        key = item[0]\n        if isinstance(key, tuple):\n            product = 1\n            for k in key:\n                product *= k\n            return product\n        return key\n\n    return dict(sorted(dct.items(), key=key_product))\n```"
    },
    {
        "id":99,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    \n    if sorted(s) != sorted(s2):\n        return -1\n    \n    mismatched_positions = [i for i in range(len(s)) if s[i] != s2[i]]\n    \n    if len(mismatched_positions) % 2 != 0:\n        return -1\n    \n    return len(mismatched_positions) \/\/ 2\n```"
    },
    {
        "id":100,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_range_in_list(lst, start_range, end_range):\n    if not isinstance(lst, list):\n        return 0\n    \n    return sum(1 for num in lst if start_range <= num <= end_range)"
    },
    {
        "id":101,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\n\ndef equilibrium_index(lst):\n    total_sum = sum(lst)\n    left_sum = 0\n    \n    for i in range(len(lst)):\n        right_sum = total_sum - left_sum - lst[i]\n        \n        if left_sum == right_sum:\n            return i\n        \n        left_sum += lst[i]\n    \n    return -1\n```"
    },
    {
        "id":102,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef removals(arr, n, k):\n    if not arr or n == 0:\n        return 0\n    \n    arr.sort()\n    min_removals = n\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                min_removals = min(min_removals, n - (j - i + 1))\n            else:\n                break\n    \n    return min_removals\n```"
    },
    {
        "id":103,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_key_present(dct: typing.Dict, n: typing.Any) -> bool:\n    if not isinstance(dct, dict):\n        return False\n    \n    return n in dct"
    },
    {
        "id":104,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef harmonic_sum(n):\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, n):\n        total_sum += 1 \/ i\n    \n    return total_sum"
    },
    {
        "id":105,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\n\ndef sort_sublists(lst):\n    if not lst:\n        return []\n    \n    return sorted(lst, key=lambda x: (len(x), x))\n```"
    },
    {
        "id":106,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef is_subset(lst, n, lst2, n2):\n    if n2 > n:\n        return False\n    \n    set1 = set(lst)\n    set2 = set(lst2)\n    \n    return set2.issubset(set1)\n```"
    },
    {
        "id":107,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef countSetBits(n):\n    if n <= 0:\n        return 0\n    \n    power = int(math.log2(n))\n    \n    def getBitsCount(m):\n        if m <= 0:\n            return 0\n        \n        power = int(math.log2(m))\n        return (power * (1 << (power - 1))) + (m - (1 << power) + 1) + getBitsCount(m - (1 << power))\n    \n    return getBitsCount(n)\n```"
    },
    {
        "id":108,
        "response":"import re\nimport typing\nimport itertools\n\ndef Convert(s):\n    if not isinstance(s, str):\n        return []\n    \n    if not s:\n        return []\n    \n    return list(s)"
    },
    {
        "id":109,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport collections\n\ndef get_unique(lst):\n    if not lst:\n        return {}\n    \n    unique_keys = {}\n    for item in lst:\n        if item not in unique_keys:\n            unique_keys[item] = len(unique_keys)\n    \n    return unique_keys\n```"
    },
    {
        "id":110,
        "response":"import re\nimport typing\nimport itertools\nimport split\n\ndef front_and_rear(tup):\n    if not tup or len(tup) < 2:\n        return None\n    return (tup[0], tup[-1])"
    },
    {
        "id":111,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef product_Equal(n):\n    str_n = str(n)\n    even_product = 1\n    odd_product = 1\n\n    for i in range(len(str_n)):\n        digit = int(str_n[i])\n        if i % 2 == 0:\n            even_product *= digit\n        else:\n            odd_product *= digit\n\n    return even_product == odd_product\n```"
    },
    {
        "id":112,
        "response":"import re\nimport typing\nimport itertools\nimport collections\n\ndef remove_duplicate(lst):\n    if lst is None:\n        return []\n    return list(dict.fromkeys(lst))"
    },
    {
        "id":113,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef check_valid(tup):\n    if not isinstance(tup, tuple):\n        return False\n    \n    if not tup:\n        return False\n    \n    return all(isinstance(item, (int, float)) and item != 0 for item in tup)\n```"
    },
    {
        "id":114,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef count_Fac(n):\n    if n <= 1:\n        return 0\n    \n    distinct_powers = set()\n    \n    for prime in range(2, int(math.sqrt(n)) + 1):\n        if n % prime == 0:\n            power = 0\n            while n % prime == 0:\n                n \/\/= prime\n                power += 1\n            distinct_powers.add(power)\n    \n    if n > 1:\n        distinct_powers.add(1)\n    \n    return len(distinct_powers)\n```"
    },
    {
        "id":115,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef str_to_tuple(s):\n    if not s:\n        return ()\n    \n    try:\n        nums = [int(x) for x in s.split()]\n        return tuple(nums)\n    except ValueError:\n        return ()\n```"
    },
    {
        "id":116,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef rhombus_perimeter(side_length):\n    if not isinstance(side_length, (int, float)):\n        raise TypeError(\"Side length must be a numeric value\")\n    \n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number\")\n    \n    return 4 * side_length\n```"
    },
    {
        "id":117,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef sd_calc(lst):\n    if not lst:\n        return 0\n    \n    if not all(isinstance(x, (int, float)) for x in lst):\n        raise TypeError(\"List must contain only numeric values\")\n    \n    n = len(lst)\n    mean = sum(lst) \/ n\n    variance = sum((x - mean) ** 2 for x in lst) \/ n\n    standard_deviation = math.sqrt(variance)\n    \n    return standard_deviation"
    },
    {
        "id":118,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport random\n\ndef alternate_elements(lst):\n    if not lst:\n        return []\n    return lst[::2]\n```"
    },
    {
        "id":119,
        "response":"```python\nimport re\n\ndef text_match(text):\n    pattern = r'b*a'\n    if re.search(pattern, text):\n        return True\n    return False\n```"
    },
    {
        "id":120,
        "response":"import re\nimport typing\nimport itertools\n\ndef add_dict_to_tuple(tup: typing.Tuple, dct: typing.Dict) -> typing.Tuple:\n    if not isinstance(tup, tuple) or not isinstance(dct, dict):\n        raise TypeError(\"Input must be a tuple and a dictionary\")\n    \n    return (*tup, dct)"
    },
    {
        "id":121,
        "response":"```python\nimport sys\nimport typing\nimport re\nimport itertools\n\ndef maxAverageOfPath(lst: list[list[int]], n: int) -> float:\n    if not lst or n <= 0:\n        return 0.0\n    \n    dp = [[0.0] * n for _ in range(n)]\n    dp[0][0] = lst[0][0]\n    \n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + lst[0][i]\n        dp[i][0] = dp[i-1][0] + lst[i][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + lst[i][j]\n    \n    path_length = 2 * n - 1\n    max_path_sum = dp[n-1][n-1]\n    max_average = max_path_sum \/ path_length\n    \n    return round(max_average, 2)\n```"
    },
    {
        "id":122,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\n\ndef filter_data(dct, n, n2):\n    if not isinstance(dct, dict):\n        return {}\n    \n    filtered_dict = {}\n    \n    for name, dimensions in dct.items():\n        if not isinstance(dimensions, list) or len(dimensions) != 2:\n            continue\n        \n        height, width = dimensions\n        \n        if not (isinstance(height, (int, float)) and isinstance(width, (int, float))):\n            continue\n        \n        if height >= n and width >= n2:\n            filtered_dict[name] = dimensions\n    \n    return filtered_dict\n```"
    },
    {
        "id":123,
        "response":"```python\nfrom typing import List\n\ndef count_same_pair(lst: List[int], lst2: List[int]) -> int:\n    if not lst or not lst2:\n        return 0\n    \n    return sum(map(lambda x, y: x == y, lst, lst2))\n```"
    },
    {
        "id":124,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef power_base_sum(n: int, n2: int) -> int:\n    if n <= 0 or n2 <= 0:\n        return 0\n    \n    result = math.pow(n, n2)\n    digit_sum = sum(int(digit) for digit in str(int(result)))\n    \n    return digit_sum\n```"
    },
    {
        "id":125,
        "response":"```python\nimport re\nfrom typing import List\n\ndef extract_quotation(s: str) -> List[str]:\n    if not isinstance(s, str):\n        return []\n    \n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, s)\n    \n    return matches\n```"
    },
    {
        "id":126,
        "response":"import typing\nimport itertools\n\ndef multiply_elements(tup: typing.Tuple[int, ...]) -> typing.List[int]:\n    if not tup or len(tup) < 2:\n        return []\n    \n    return [tup[i] * tup[i+1] for i in range(len(tup)-1)]"
    },
    {
        "id":127,
        "response":"import re\n\ndef remove_char(s):\n    if s is None:\n        return \"\"\n    return re.sub(r'[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":128,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef sum_list(lst, lst2):\n    if lst is None or lst2 is None:\n        return None\n    \n    if len(lst) != len(lst2):\n        return None\n    \n    return [x + y for x, y in zip(lst, lst2)]"
    },
    {
        "id":129,
        "response":"import re\nimport typing\nimport itertools\n\ndef add_list(lst, lst2):\n    if not lst or not lst2:\n        return []\n    \n    if len(lst) != len(lst2):\n        return list(map(lambda x, y: x + y, lst, lst2))\n    \n    return list(map(lambda x, y: x + y, lst, lst2))"
    },
    {
        "id":130,
        "response":"import re\nimport typing\nimport itertools\n\ndef consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    \n    return result"
    },
    {
        "id":131,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef lateralsurface_cone(n, n2):\n    if n <= 0 or n2 <= 0:\n        return 0\n    \n    slant_height = math.sqrt(n**2 + n2**2)\n    radius = n\n    \n    lateral_surface_area = math.pi * radius * slant_height\n    \n    return lateral_surface_area\n```"
    },
    {
        "id":132,
        "response":"import re\n\ndef replace_specialchar(s):\n    return re.sub(r'[ ,.]', ':', s)"
    },
    {
        "id":133,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef find_first_occurrence(lst, n):\n    left, right = 0, len(lst) - 1\n    \n    while left <= right:\n        mid = (left + right) \/\/ 2\n        \n        if lst[mid] == n and (mid == 0 or lst[mid - 1] < n):\n            return mid\n        \n        if lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "id":134,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef sum_Of_Subarray_Prod(lst: list[int], n: int) -> int:\n    if not lst or n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(n):\n        curr_prod = 1\n        for j in range(i, n):\n            curr_prod *= lst[j]\n            total_sum += curr_prod\n    \n    return total_sum\n```"
    },
    {
        "id":135,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef toggle_middle_bits(n):\n    if n == 0 or n == 1:\n        return n\n    \n    bit_length = n.bit_length()\n    \n    if bit_length <= 2:\n        return n\n    \n    mask = ((1 << (bit_length - 2)) - 1) << 1\n    \n    return n ^ mask"
    },
    {
        "id":136,
        "response":"import re\nimport typing\nimport itertools\nimport bisect\n\ndef left_insertion(lst, n):\n    if not lst:\n        return 0\n    \n    left, right = 0, len(lst)\n    \n    while left < right:\n        mid = (left + right) \/\/ 2\n        \n        if lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left"
    },
    {
        "id":137,
        "response":"import re\nimport typing\n\ndef check_str(s: str) -> bool:\n    if not s:\n        return False\n    return bool(re.match(r'^[aeiouAEIOU]', s))"
    },
    {
        "id":138,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef geometric_sum(n):\n    if n <= 0:\n        return 0\n    \n    sum = 0\n    for i in range(n):\n        sum += 1 \/ (2 ** i)\n    \n    return sum"
    },
    {
        "id":139,
        "response":"```python\nimport math\nimport itertools\nimport re\nimport typing\n\ndef find_Index(n):\n    if n <= 0:\n        return -1\n    \n    index = 1\n    while True:\n        triangular_num = (index * (index + 1)) \/\/ 2\n        if len(str(triangular_num)) == n:\n            return index\n        index += 1\n```"
    },
    {
        "id":140,
        "response":"```python\nfrom typing import List, Tuple, Dict, Any\n\ndef tuple_to_dict(tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    if not tup:\n        return {}\n    \n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple must have an even number of elements\")\n    \n    return dict(zip(tup[::2], tup[1::2]))\n```"
    },
    {
        "id":141,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef all_Characters_Same(s: str) -> bool:\n    if not s:\n        return True\n    return len(set(s)) == 1"
    },
    {
        "id":142,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef area_tetrahedron(n):\n    if not isinstance(n, (int, float)) or n <= 0:\n        raise ValueError(\"Input must be a positive number\")\n    \n    area = math.sqrt(3) * n * n\n    return round(area, 2)\n```"
    },
    {
        "id":143,
        "response":"import re\nimport typing\nimport itertools\nimport math\nimport collections\n\ndef rotate_right(lst, n, n2):\n    if not lst:\n        return []\n    \n    n = n % len(lst)\n    if n2 > 0:\n        return lst[-n:] + lst[:-n]\n    else:\n        return lst[n:] + lst[:n]"
    },
    {
        "id":144,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_none(tup):\n    if not isinstance(tup, tuple):\n        return False\n    \n    return any(item is None for item in tup)"
    },
    {
        "id":145,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef divisible_by_digits(start: int, end: int) -> typing.List[int]:\n    result = []\n    for num in range(start, end + 1):\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n```"
    },
    {
        "id":146,
        "response":"```python\nimport math\n\ndef sector_area(r, angle):\n    if r < 0 or angle < 0:\n        return 0\n    return (angle \/ 360) * math.pi * r ** 2\n```"
    },
    {
        "id":147,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef lcs_of_three(s: str, s2: str, s3: str, n: int, n2: int, n3: int) -> str:\n    if not s or not s2 or not s3:\n        return \"\"\n    \n    dp = [[[0 for _ in range(n3 + 1)] for _ in range(n2 + 1)] for _ in range(n + 1)]\n    \n    max_length = 0\n    end_index = 0\n    \n    for i in range(1, n + 1):\n        for j in range(1, n2 + 1):\n            for k in range(1, n3 + 1):\n                if s[i-1] == s2[j-1] == s3[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                    \n                    if dp[i][j][k] > max_length:\n                        max_length = dp[i][j][k]\n                        end_index = i - 1\n    \n    return s[end_index - max_length + 1 : end_index + 1] if max_length > 0 else \"\"\n```"
    },
    {
        "id":148,
        "response":"import re\nimport typing\n\ndef capital_words_spaces(s: str) -> str:\n    if not s:\n        return s\n    \n    result = s[0]\n    for char in s[1:]:\n        if char.isupper():\n            result += ' ' + char\n        else:\n            result += char\n    \n    return result"
    },
    {
        "id":149,
        "response":"import re\nimport typing\nimport itertools\n\ndef sort_numeric_strings(lst: typing.List[str]) -> typing.List[str]:\n    try:\n        return sorted(lst, key=lambda x: int(x) if x.lstrip('-').isdigit() else float('inf'))\n    except (TypeError, ValueError):\n        return []"
    },
    {
        "id":150,
        "response":"import re\nimport typing\nimport itertools\n\ndef add_tuple(lst, tup):\n    if not isinstance(lst, list):\n        raise TypeError(\"First argument must be a list\")\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Second argument must be a tuple\")\n    \n    result = lst.copy()\n    result.extend(tup)\n    return result"
    },
    {
        "id":151,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef check_min_heap(lst, n):\n    if not lst or n <= 0:\n        return False\n    \n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        \n        if left_child < n and lst[i] > lst[left_child]:\n            return False\n        \n        if right_child < n and lst[i] > lst[right_child]:\n            return False\n    \n    return True"
    },
    {
        "id":152,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef jacobsthal_num(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    \n    return b\n```"
    },
    {
        "id":153,
        "response":"```python\nimport typing\nimport re\nimport itertools\n\ndef min_k(lst: typing.List[typing.Tuple], k: int) -> typing.List[typing.Tuple]:\n    if not lst or k <= 0:\n        return []\n    \n    k = min(k, len(lst))\n    \n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    \n    return sorted_lst[:k]\n```"
    },
    {
        "id":154,
        "response":"import itertools\nimport re\nimport typing\n\ndef extract_index_list(lst, lst2, lst3):\n    result = []\n    for index in range(min(len(lst), len(lst2), len(lst3))):\n        if lst[index] == lst2[index] == lst3[index]:\n            result.append(lst[index])\n    return result"
    },
    {
        "id":155,
        "response":"import re\nimport typing\nimport itertools\n\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    unique_sorted = sorted(set(lst))\n    \n    if len(unique_sorted) < 2:\n        return None\n    \n    return unique_sorted[1]"
    },
    {
        "id":156,
        "response":"```python\nimport re\n\ndef text_match_zero_one(s):\n    pattern = r'[0b]'\n    if re.search(pattern, s):\n        return True\n    return False\n```"
    },
    {
        "id":157,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_reverse_pairs(lst: typing.List[str]) -> int:\n    if not lst or len(lst) < 2:\n        return 0\n    \n    pair_count = 0\n    seen = set()\n    \n    for s in lst:\n        reversed_s = s[::-1]\n        \n        if reversed_s in seen and s not in seen:\n            pair_count += 1\n        \n        seen.add(s)\n    \n    return pair_count"
    },
    {
        "id":158,
        "response":"```python\nimport typing\nimport itertools\nimport re\nimport copy\n\ndef unique_sublists(lst):\n    if not isinstance(lst, list):\n        return 0\n    \n    unique_lists = set(tuple(sorted(sublist)) for sublist in lst)\n    return len(unique_lists)\n```"
    },
    {
        "id":159,
        "response":"```python\nimport re\n\ndef is_decimal(s):\n    pattern = r'^-?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, str(s)))\n```"
    },
    {
        "id":160,
        "response":"import re\nimport typing\nimport itertools\n\ndef unique_Element(lst, n):\n    if not lst or n <= 0:\n        return False\n    \n    first_element = lst[0]\n    \n    for item in lst[1:]:\n        if item != first_element:\n            return False\n    \n    return True"
    },
    {
        "id":161,
        "response":"import math\n\ndef arc_length(radius, angle):\n    if not isinstance(radius, (int, float)) or not isinstance(angle, (int, float)):\n        raise TypeError(\"Radius and angle must be numeric values\")\n    \n    if radius <= 0:\n        raise ValueError(\"Radius must be a positive number\")\n    \n    angle_radians = math.radians(angle)\n    arc_length = radius * angle_radians\n    \n    return arc_length"
    },
    {
        "id":162,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_monthnumber_number(n):\n    if not isinstance(n, int):\n        return False\n    \n    months_with_30_days = [4, 6, 9, 11]\n    \n    if n in months_with_30_days:\n        return True\n    else:\n        return False"
    },
    {
        "id":163,
        "response":"import sys\nimport itertools\nimport re\nimport typing\n\ndef find_Min_Diff(tup, n):\n    if n < 2:\n        return 0\n    \n    sorted_arr = sorted(tup)\n    min_diff = sys.maxsize\n    \n    for i in range(1, n):\n        current_diff = sorted_arr[i] - sorted_arr[i-1]\n        min_diff = min(min_diff, current_diff)\n    \n    return min_diff"
    },
    {
        "id":164,
        "response":"import re\nimport typing\nimport itertools\n\ndef number_ctr(s: str) -> int:\n    if not s or not isinstance(s, str):\n        return 0\n    \n    nums = re.findall(r'\\d+', s)\n    \n    if not nums:\n        return 0\n    \n    total = sum(int(num) for num in nums)\n    return total"
    },
    {
        "id":165,
        "response":"```python\nimport itertools\nimport math\n\ndef is_polite(n):\n    if n <= 0:\n        return None\n    \n    polite_count = 0\n    current_num = 2\n    \n    while True:\n        consecutive_sum = 0\n        consecutive_start = current_num\n        \n        while consecutive_sum < current_num:\n            consecutive_sum += consecutive_start\n            consecutive_start += 1\n            \n            if consecutive_sum == current_num:\n                polite_count += 1\n                break\n        \n        if polite_count == n:\n            return current_num\n        \n        current_num += 1\n```"
    },
    {
        "id":166,
        "response":"```python\nimport itertools\nimport typing\n\ndef pair_wise(lst: typing.List[typing.Any]) -> typing.List[typing.Tuple[typing.Any, typing.Any]]:\n    if len(lst) < 2:\n        return []\n    return list(zip(lst[:-1], lst[1:]))\n```"
    },
    {
        "id":167,
        "response":"```python\nimport re\nimport typing\nimport itertools\nfrom typing import List\n\ndef get_Pairs_Count(lst: List[int], n: int, sum: int) -> int:\n    if not lst or n <= 0:\n        return 0\n    \n    count = 0\n    freq = {}\n    \n    for num in lst:\n        complement = sum - num\n        \n        if complement in freq:\n            count += freq[complement]\n        \n        freq[num] = freq.get(num, 0) + 1\n    \n    return count\n```"
    },
    {
        "id":168,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_Odd_Parity(n: int) -> bool:\n    if n is None:\n        return False\n    \n    binary = bin(abs(n))[2:]\n    one_count = binary.count('1')\n    \n    return one_count % 2 != 0"
    },
    {
        "id":169,
        "response":"import re\nimport typing\nimport itertools\n\ndef Diff(lst, lst2):\n    if not isinstance(lst, list) or not isinstance(lst2, list):\n        return []\n    \n    set1 = set(lst)\n    set2 = set(lst2)\n    \n    diff_items = list(set1.symmetric_difference(set2))\n    \n    return diff_items"
    },
    {
        "id":170,
        "response":"import re\nimport typing\nimport itertools\n\ndef odd_Num_Sum(n):\n    if n < 1:\n        return 0\n    \n    sum_fourth_powers = 0\n    for i in range(1, 2*n, 2):\n        sum_fourth_powers += i**4\n    \n    return sum_fourth_powers"
    },
    {
        "id":171,
        "response":"import re\nimport typing\nimport itertools\nimport stack\n\ndef check_expression(s: str) -> bool:\n    stack = []\n    opening_brackets = \"({[\"\n    closing_brackets = \")}]\"\n    bracket_pairs = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in s:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            \n            if stack[-1] == bracket_pairs[char]:\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) == 0"
    },
    {
        "id":172,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef remove_length(s: str, k: int) -> str:\n    if not s or k <= 0:\n        return s\n    \n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    \n    return ' '.join(filtered_words)"
    },
    {
        "id":173,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef occurance_substring(s: str, s2: str) -> typing.List[int]:\n    if not s or not s2:\n        return []\n    \n    result = []\n    start_index = 0\n    \n    while True:\n        index = s.find(s2, start_index)\n        if index == -1:\n            break\n        result.append(index)\n        start_index = index + 1\n    \n    return result\n```"
    },
    {
        "id":174,
        "response":"```python\nimport re\n\ndef check_email(s):\n    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(email_pattern, s))\n```"
    },
    {
        "id":175,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\nimport sys\n\ndef odd_position(lst):\n    if not lst or len(lst) < 2:\n        return False\n    \n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    \n    return True\n```"
    },
    {
        "id":176,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_vowels(s: str) -> int:\n    vowels = set('aeiouAEIOU')\n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] not in vowels:\n            left_vowel = s[i-1] if i > 0 and s[i-1] in vowels else None\n            right_vowel = s[i+1] if i < len(s) - 1 and s[i+1] in vowels else None\n            \n            if left_vowel or right_vowel:\n                count += 1\n    \n    return count"
    },
    {
        "id":177,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef find_Sum(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    unique_elements = set()\n    duplicate_elements = set()\n    \n    for num in lst:\n        if num in unique_elements:\n            duplicate_elements.add(num)\n        else:\n            unique_elements.add(num)\n    \n    non_repeating_elements = unique_elements - duplicate_elements\n    \n    return sum(non_repeating_elements)"
    },
    {
        "id":178,
        "response":"```python\nimport typing\nimport itertools\n\ndef pack_consecutive_duplicates(lst: typing.List) -> typing.List[typing.List]:\n    if not lst:\n        return []\n    \n    result = []\n    for key, group in itertools.groupby(lst):\n        result.append(list(group))\n    \n    return result\n```"
    },
    {
        "id":179,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport collections\n\ndef unique_sublists(lst):\n    if not lst or not isinstance(lst, list):\n        return 0\n    \n    unique_lists = set(tuple(sublist) for sublist in lst)\n    return len(unique_lists)\n```"
    },
    {
        "id":180,
        "response":"```python\nimport itertools\nimport typing\n\ndef find_combinations(lst: typing.List[tuple]) -> typing.List[tuple]:\n    if not lst or len(lst) < 2:\n        return []\n    \n    result = list(itertools.combinations(lst, 2))\n    return result\n```"
    },
    {
        "id":181,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef count_Divisors(n):\n    even_divisors = 0\n    odd_divisors = 0\n    \n    if n <= 0:\n        return 0\n    \n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_divisors += 1\n            else:\n                odd_divisors += 1\n    \n    return even_divisors, odd_divisors"
    },
    {
        "id":182,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef Odd_Length_Sum(lst):\n    if not lst:\n        return 0\n    \n    total_sum = 0\n    n = len(lst)\n    \n    for start in range(n):\n        for length in range(1, n - start + 1, 2):\n            sub_array = lst[start:start+length]\n            total_sum += sum(sub_array)\n    \n    return total_sum\n```"
    },
    {
        "id":183,
        "response":"import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r \/ 255.0, g \/ 255.0, b \/ 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    diff = mx - mn\n    \n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) \/ diff) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) \/ diff) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) \/ diff) + 240) % 360\n    \n    if mx == 0:\n        s = 0\n    else:\n        s = (diff \/ mx) * 100\n    \n    v = mx * 100\n    \n    return (round(h), round(s), round(v))"
    },
    {
        "id":184,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even * first_odd\n```"
    },
    {
        "id":185,
        "response":"import re\nimport typing\nimport ast\n\ndef tuple_str_int(s: str) -> typing.Tuple[int, ...]:\n    try:\n        if not s or s.strip() == '()':\n            return ()\n        \n        s = s.strip('()')\n        nums = [int(num.strip()) for num in s.split(',') if num.strip()]\n        return tuple(nums)\n    except (ValueError, TypeError):\n        return ()"
    },
    {
        "id":186,
        "response":"import re\nimport typing\nimport itertools\n\ndef right_insertion(lst, n):\n    left, right = 0, len(lst)\n    \n    while left < right:\n        mid = (left + right) \/\/ 2\n        \n        if lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left"
    },
    {
        "id":187,
        "response":"```python\nimport re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    return False\n```"
    },
    {
        "id":188,
        "response":"import re\nimport typing\nimport itertools\n\ndef new_tuple(lst: typing.List[int], s: str) -> typing.Tuple:\n    if not isinstance(lst, list) or not isinstance(s, str):\n        raise TypeError(\"Input must be a list and a string\")\n    \n    if not lst or not s:\n        return tuple()\n    \n    result = []\n    for item in lst:\n        result.append(item)\n    \n    result.append(s)\n    \n    return tuple(result)"
    },
    {
        "id":189,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef perimeter_polygon(n: int, side_length: float) -> float:\n    if n < 3:\n        raise ValueError(\"Number of sides must be at least 3\")\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive\")\n    return n * side_length\n```"
    },
    {
        "id":190,
        "response":"import re\nimport typing\nimport itertools\n\ndef even_position(lst):\n    if not lst:\n        return False\n    \n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    \n    return True"
    },
    {
        "id":191,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_nested(tup):\n    def is_nested(item):\n        return isinstance(item, (tuple, list)) and any(isinstance(x, (tuple, list)) for x in item)\n    \n    def flatten(item):\n        if not isinstance(item, (tuple, list)):\n            return item\n        return tuple(x for x in item if not is_nested(x))\n    \n    result = []\n    for item in tup:\n        if not is_nested(item):\n            result.append(item)\n        else:\n            flattened = flatten(item)\n            if flattened:\n                result.append(flattened)\n    \n    return tuple(result)\n```"
    },
    {
        "id":192,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_list(lst):\n    if not isinstance(lst, list):\n        return 0\n    \n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    \n    return count"
    },
    {
        "id":193,
        "response":"import re\nimport typing\nimport itertools\nimport bisect\n\ndef last(lst, n, x):\n    if not lst or n <= 0:\n        return -1\n    \n    left, right = 0, n - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) \/\/ 2\n        \n        if lst[mid] == x:\n            result = mid\n            left = mid + 1\n        elif lst[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"
    },
    {
        "id":194,
        "response":"```python\nimport re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":195,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport heapq\n\ndef cheap_items(lst, n):\n    if not lst or n <= 0:\n        return []\n    \n    n = min(n, len(lst))\n    \n    try:\n        sorted_items = sorted(lst, key=lambda x: x.get('price', float('inf')))\n        return sorted_items[:n]\n    except (TypeError, KeyError):\n        return []\n```"
    },
    {
        "id":196,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef return_sum(dct):\n    if not isinstance(dct, dict):\n        return 0\n    \n    try:\n        return sum(dct.values())\n    except (TypeError, ValueError):\n        return sum(val for val in dct.values() if isinstance(val, (int, float)))"
    },
    {
        "id":197,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_in_Range(l: int, r: int) -> int:\n    if l > r:\n        l, r = r, l\n    \n    start = l if l % 2 != 0 else l + 1\n    end = r if r % 2 != 0 else r - 1\n    \n    count = (end - start) \/\/ 2 + 1\n    total_sum = count * (start + end) \/\/ 2\n    \n    return total_sum"
    },
    {
        "id":198,
        "response":"import re\nimport typing\nimport itertools\nimport sys\nimport math\n\ndef _sum(lst):\n    if lst is None:\n        return 0\n    \n    if not lst:\n        return 0\n    \n    try:\n        return sum(lst)\n    except TypeError:\n        return 0"
    },
    {
        "id":199,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef left_Rotate(n: int, d: int) -> int:\n    if n < 0 or d < 0:\n        return -1\n    \n    num_bits = n.bit_length()\n    d = d % num_bits\n    \n    left_part = n << d\n    right_part = n >> (num_bits - d)\n    \n    mask = (1 << num_bits) - 1\n    rotated_num = (left_part | right_part) & mask\n    \n    return rotated_num\n```"
    },
    {
        "id":200,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef remove_all_spaces(s: str) -> str:\n    if s is None:\n        return \"\"\n    return s.replace(\" \", \"\")"
    },
    {
        "id":201,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef test_three_equal(n1: int, n2: int, n3: int) -> int:\n    if n1 == n2 == n3:\n        return 3\n    elif n1 == n2 or n1 == n3 or n2 == n3:\n        return 2\n    else:\n        return 0\n```"
    },
    {
        "id":202,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_Rotation(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    if n == 1:\n        return 0\n    \n    for i in range(n):\n        if i + 1 < n and lst[i] > lst[i + 1]:\n            return i + 1\n    \n    return 0\n```"
    },
    {
        "id":203,
        "response":"import math\n\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    \n    root = int(math.sqrt(n))\n    return root * root == n"
    },
    {
        "id":204,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef is_Product_Even(lst: typing.List[int], n: int) -> bool:\n    if not lst or n <= 0 or n > len(lst):\n        return False\n    \n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    \n    return product % 2 == 0"
    },
    {
        "id":205,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef max_sum_list(lst):\n    if not lst:\n        return []\n    \n    max_sum = float('-inf')\n    max_sum_lists = []\n    \n    for sublist in lst:\n        current_sum = sum(sublist)\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_lists = [sublist]\n        elif current_sum == max_sum:\n            max_sum_lists.append(sublist)\n    \n    return max_sum_lists"
    },
    {
        "id":206,
        "response":"import re\nimport typing\nimport itertools\n\ndef max_run_uppercase(s: str) -> int:\n    if not s:\n        return 0\n    \n    max_count = 0\n    current_count = 0\n    \n    for char in s:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    \n    return max_count"
    },
    {
        "id":207,
        "response":"import re\nimport typing\nimport itertools\n\ndef first_odd(lst):\n    if not lst:\n        return None\n    \n    for num in lst:\n        if num % 2 != 0:\n            return num\n    \n    return None"
    },
    {
        "id":208,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef check_K(tup: typing.Tuple, n: int) -> bool:\n    if not isinstance(tup, tuple):\n        return False\n    \n    if not all(isinstance(item, int) for item in tup):\n        return False\n    \n    return n in tup"
    },
    {
        "id":209,
        "response":"import typing\nimport re\nimport itertools\n\ndef check_smaller(tup: tuple, tup2: tuple) -> bool:\n    if len(tup) != len(tup2):\n        return False\n    \n    for i in range(len(tup)):\n        if tup2[i] >= tup[i]:\n            return False\n    \n    return True"
    },
    {
        "id":210,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_variable(*args):\n    result = []\n    max_iterations = max(len(arg) if isinstance(arg, (list, tuple, str)) else 1 for arg in args)\n    \n    for i in range(max_iterations):\n        current_iteration = []\n        for arg in args:\n            if isinstance(arg, (list, tuple, str)):\n                current_iteration.append(arg[i] if i < len(arg) else arg[-1])\n            else:\n                current_iteration.append(arg)\n        result.append(current_iteration)\n    \n    return result\n```"
    },
    {
        "id":211,
        "response":"```python\nimport typing\nimport itertools\n\ndef check_identical(lst: typing.List[tuple], lst2: typing.List[tuple]) -> bool:\n    if len(lst) != len(lst2):\n        return False\n    \n    sorted_lst = sorted(lst)\n    sorted_lst2 = sorted(lst2)\n    \n    return all(t1 == t2 for t1, t2 in zip(sorted_lst, sorted_lst2))\n```"
    },
    {
        "id":212,
        "response":"import re\n\ndef road_rd(s):\n    if not isinstance(s, str):\n        return s\n    return re.sub(r'\\broad\\b', 'rd.', s)"
    },
    {
        "id":213,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef string_length(s: typing.Optional[str]) -> int:\n    if s is None:\n        return 0\n    return len(s)\n```"
    },
    {
        "id":214,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef rhombus_area(diagonal1, diagonal2):\n    if not isinstance(diagonal1, (int, float)) or not isinstance(diagonal2, (int, float)):\n        raise TypeError(\"Diagonals must be numeric values\")\n    \n    if diagonal1 <= 0 or diagonal2 <= 0:\n        raise ValueError(\"Diagonals must be positive numbers\")\n    \n    area = 0.5 * diagonal1 * diagonal2\n    return area"
    },
    {
        "id":215,
        "response":"import re\nimport typing\nimport itertools\nimport math\nimport sys\n\ndef sort_by_dnf(arr, n):\n    low = 0\n    mid = 0\n    high = n - 1\n\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high -= 1\n\n    return arr"
    },
    {
        "id":216,
        "response":"import re\nimport typing\nimport itertools\n\ndef clear_tuple(tup):\n    return tuple()"
    },
    {
        "id":217,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef div_of_nums(lst, m, n):\n    return list(filter(lambda x: x % m == 0 or x % n == 0, lst))\n```"
    },
    {
        "id":218,
        "response":"import re\nimport typing\nimport itertools\n\ndef lower_ctr(s: str) -> int:\n    if s is None:\n        return 0\n    return sum(1 for char in s if char.islower())"
    },
    {
        "id":219,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_duplic(lst):\n    if not lst:\n        return {}\n    \n    result = {}\n    for key, group in itertools.groupby(lst):\n        count = len(list(group))\n        if count > 1:\n            result[key] = count\n    \n    return result"
    },
    {
        "id":220,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef check_monthnum_number(n: int) -> bool:\n    if not isinstance(n, int):\n        return False\n    \n    if n < 1 or n > 12:\n        return False\n    \n    return n == 2"
    },
    {
        "id":221,
        "response":"import re\nimport typing\nimport itertools\nfrom copy import deepcopy\n\ndef merge_dictionaries(dct: typing.Dict[typing.Any, typing.Any], dct2: typing.Dict[typing.Any, typing.Any]) -> typing.Dict[typing.Any, typing.Any]:\n    merged_dict = deepcopy(dct)\n    for key, value in dct2.items():\n        if key in merged_dict:\n            if isinstance(merged_dict[key], dict) and isinstance(value, dict):\n                merged_dict[key] = merge_dictionaries(merged_dict[key], value)\n            else:\n                merged_dict[key] = value\n        else:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "id":222,
        "response":"```python\nimport re\n\ndef pass_validity(s):\n    if not isinstance(s, str):\n        return False\n    \n    if len(s) < 8:\n        return False\n    \n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n    has_special_char = False\n    \n    special_chars = \"!@#$%^&*()-_=+[]{}|;:'\\\",.<>?\/`~\"\n    \n    for char in s:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special_char = True\n    \n    return has_uppercase and has_lowercase and has_digit and has_special_char\n```"
    },
    {
        "id":223,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_substring(s: str, s2: str) -> bool:\n    if not isinstance(s, str) or not isinstance(s2, str):\n        return False\n    \n    if not s or not s2:\n        return False\n    \n    pattern = f\"^{re.escape(s2)}\"\n    return re.match(pattern, s) is not None\n```"
    },
    {
        "id":224,
        "response":"import typing\nimport re\nimport itertools\n\ndef remove_even(lst: typing.List[int]) -> typing.List[int]:\n    if lst is None:\n        return []\n    return [num for num in lst if num % 2 != 0]"
    },
    {
        "id":225,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef access_elements(lst, lst2):\n    try:\n        return [lst[index] for index in lst2 if 0 <= index < len(lst)]\n    except (TypeError, IndexError):\n        return []\n```"
    },
    {
        "id":226,
        "response":"import math\n\ndef check_Type_Of_Triangle(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return \"Not a valid triangle\"\n    \n    if n1 + n2 <= n3 or n1 + n3 <= n2 or n2 + n3 <= n1:\n        return \"Not a valid triangle\"\n    \n    if n1 == n2 == n3:\n        return \"Equilateral Triangle\"\n    \n    if n1 == n2 or n2 == n3 or n1 == n3:\n        return \"Isosceles Triangle\"\n    \n    return \"Scalene Triangle\""
    },
    {
        "id":227,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef sum_column(lst, n):\n    try:\n        return sum(row[n] for row in lst)\n    except (IndexError, TypeError):\n        return 0"
    },
    {
        "id":228,
        "response":"import re\nimport string\n\ndef count_alpha_dig_spl(s):\n    if s is None:\n        return [0, 0, 0]\n    \n    alphabets = sum(1 for char in s if char.isalpha())\n    digits = sum(1 for char in s if char.isdigit())\n    special_chars = sum(1 for char in s if not char.isalnum())\n    \n    return [alphabets, digits, special_chars]"
    },
    {
        "id":229,
        "response":"```python\nfrom collections import Counter\nfrom typing import List, Any\n\ndef second_frequent(lst: List[Any]) -> Any:\n    if not lst or len(lst) < 2:\n        return None\n    \n    count = Counter(lst)\n    \n    if len(count) < 2:\n        return None\n    \n    sorted_counts = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_counts[1][0]\n```"
    },
    {
        "id":230,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef round_up(number: float, decimals: int = 0) -> float:\n    if not isinstance(number, (int, float)) or not isinstance(decimals, int):\n        raise TypeError(\"Invalid input types\")\n    \n    if decimals < 0:\n        raise ValueError(\"Decimals cannot be negative\")\n    \n    multiplier = 10 ** decimals\n    return math.ceil(number * multiplier) \/ multiplier"
    },
    {
        "id":231,
        "response":"import re\nimport typing\nimport itertools\nimport math\nimport collections\n\ndef count_Pairs(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    pair_count = 0\n    frequency = collections.Counter(lst)\n    \n    for value, count in frequency.items():\n        pair_count += (count * (count - 1)) \/\/ 2\n    \n    return pair_count"
    },
    {
        "id":232,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef extract_max(s: str) -> int:\n    if not s or not isinstance(s, str):\n        return 0\n    \n    numbers = re.findall(r'\\d+', s)\n    \n    if not numbers:\n        return 0\n    \n    return max(map(int, numbers))\n```"
    },
    {
        "id":233,
        "response":"import re\nimport typing\nimport itertools\n\ndef get_key(dct):\n    if not isinstance(dct, dict):\n        return []\n    return list(dct.keys())"
    },
    {
        "id":234,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef generate_matrix(n):\n    if n <= 0:\n        return []\n    \n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    \n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    current_dir = 0\n    \n    row, col = 0, 0\n    value = 1\n    \n    for _ in range(n * n):\n        matrix[row][col] = value ** 2\n        value += 1\n        \n        next_row = row + directions[current_dir][0]\n        next_col = col + directions[current_dir][1]\n        \n        if (next_row < 0 or next_row >= n or \n            next_col < 0 or next_col >= n or \n            matrix[next_row][next_col] != 0):\n            current_dir = (current_dir + 1) % 4\n            next_row = row + directions[current_dir][0]\n            next_col = col + directions[current_dir][1]\n        \n        row, col = next_row, next_col\n    \n    return matrix\n```"
    },
    {
        "id":235,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef slope(n, n2, n3, n4):\n    try:\n        if n == n3 and n2 == n4:\n            return 0\n        elif n == n3:\n            return float('inf')\n        else:\n            return (n4 - n2) \/ (n3 - n)\n    except (TypeError, ZeroDivisionError):\n        return None"
    },
    {
        "id":236,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    current_length = 0\n    start = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n        current_length += 1\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = current_length\n\n        if current_sum < 0:\n            current_sum = 0\n            current_length = 0\n            start = i + 1\n\n    return max_length"
    },
    {
        "id":237,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef cube_Sum(n):\n    if n <= 0:\n        return 0\n    \n    odd_sum = 0\n    for i in range(1, 2*n, 2):\n        odd_sum += i**3\n    \n    return odd_sum\n```"
    },
    {
        "id":238,
        "response":"import re\nimport typing\nimport itertools\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    \n    mismatched_indices = [i for i in range(len(s)) if s[i] != s2[i]]\n    \n    if len(mismatched_indices) % 2 != 0:\n        return -1\n    \n    swaps = len(mismatched_indices) \/\/ 2\n    return swaps"
    },
    {
        "id":239,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sort_tuple(lst):\n    if not lst:\n        return []\n    return sorted(lst, key=lambda x: x[0])\n```"
    },
    {
        "id":240,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef Check_Solution(n, n2, n3):\n    if n == 0:\n        return False\n    \n    discriminant = n2 ** 2 - 4 * n * n3\n    \n    if discriminant < 0:\n        return False\n    \n    root1 = (-n2 + math.sqrt(discriminant)) \/ (2 * n)\n    root2 = (-n2 - math.sqrt(discriminant)) \/ (2 * n)\n    \n    return abs(root1) == abs(root2) and root1 * root2 < 0\n```"
    },
    {
        "id":241,
        "response":"import typing\nimport itertools\nimport re\nimport sys\n\ndef get_inv_count(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] > lst[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "id":242,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\nimport math\n\ndef get_odd_occurrence(lst, n):\n    if not lst or n <= 0:\n        return None\n    \n    num_count = {}\n    for num in lst:\n        num_count[num] = num_count.get(num, 0) + 1\n    \n    for num, count in num_count.items():\n        if count % 2 != 0:\n            return num\n    \n    return None"
    },
    {
        "id":243,
        "response":"```python\nimport heapq\nimport typing\nimport itertools\nimport re\nimport math\n\ndef nth_super_ugly_number(n: int, primes: typing.List[int]) -> int:\n    if n <= 0 or not primes:\n        return 0\n    \n    ugly = [1]\n    heap = []\n    for i, prime in enumerate(primes):\n        heapq.heappush(heap, (prime, prime, 0))\n    \n    while len(ugly) < n:\n        next_ugly, prime, idx = heapq.heappop(heap)\n        \n        if next_ugly != ugly[-1]:\n            ugly.append(next_ugly)\n        \n        heapq.heappush(heap, (prime * ugly[idx + 1], prime, idx + 1))\n    \n    return ugly[-1]\n```"
    },
    {
        "id":244,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport split\n\ndef get_Number(n: int, k: int) -> int:\n    if k <= 0 or k > n:\n        return -1\n    \n    odd_count = (n + 1) \/\/ 2\n    even_count = n \/\/ 2\n    \n    if k <= odd_count:\n        return 2 * k - 1\n    else:\n        return 2 * (k - odd_count)\n```"
    },
    {
        "id":245,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef find_Digits(n: int) -> int:\n    if n < 0:\n        return 0\n    \n    if n == 0:\n        return 1\n    \n    factorial = math.factorial(n)\n    return len(str(factorial))"
    },
    {
        "id":246,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef find_platform(arr, dep, n):\n    if not arr or not dep or n <= 0:\n        return 0\n    \n    arr.sort()\n    dep.sort()\n    \n    platforms_needed = 1\n    max_platforms = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            platforms_needed += 1\n            i += 1\n        elif arr[i] > dep[j]:\n            platforms_needed -= 1\n            j += 1\n        \n        max_platforms = max(max_platforms, platforms_needed)\n    \n    return max_platforms\n```"
    },
    {
        "id":247,
        "response":"import re\nimport typing\nimport itertools\nimport copy\n\ndef lcopy(lst):\n    if not isinstance(lst, tuple) or len(lst) != 1 or not isinstance(lst[0], list):\n        raise ValueError(\"Input must be a singleton tuple containing a list\")\n    return copy.deepcopy(lst[0])"
    },
    {
        "id":248,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef area_trapezium(a, b, h):\n    if not all(isinstance(x, (int, float)) for x in [a, b, h]):\n        raise TypeError(\"All inputs must be numeric\")\n    if h <= 0:\n        raise ValueError(\"Height must be positive\")\n    if a < 0 or b < 0:\n        raise ValueError(\"Parallel sides must be non-negative\")\n    return 0.5 * (a + b) * h"
    },
    {
        "id":249,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef Sum(n):\n    if n <= 0:\n        return 0\n    \n    divisors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_sum += i\n    \n    return divisors_sum"
    },
    {
        "id":250,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef is_triangleexists(n1: float, n2: float, n3: float) -> bool:\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    \n    if n1 + n2 + n3 != 180:\n        return False\n    \n    return True\n```"
    },
    {
        "id":251,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef Sum_of_Inverse_Divisors(n, n2):\n    if n <= 0 or n2 <= 0:\n        return 0.0\n    \n    total_sum = 0.0\n    for i in range(1, n2 + 1):\n        if n2 % i == 0:\n            total_sum += 1 \/ i\n    \n    return round(total_sum, n)"
    },
    {
        "id":252,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_negs(lst):\n    if lst is None:\n        return []\n    return [num for num in lst if num >= 0]"
    },
    {
        "id":253,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    \n    odd_factors_sum = 0\n    \n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 != 0:\n            odd_factors_sum += i\n    \n    return odd_factors_sum"
    },
    {
        "id":254,
        "response":"```python\nimport heapq\nimport re\nimport typing\nimport itertools\n\ndef raw_heap(lst):\n    if lst is None:\n        return []\n    \n    heapq.heapify(lst)\n    return lst\n```"
    },
    {
        "id":255,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_Even_Parity(n):\n    if n is None:\n        return False\n    \n    binary = bin(abs(n))[2:]\n    count_ones = binary.count('1')\n    \n    return count_ones % 2 == 0\n```"
    },
    {
        "id":256,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\nimport statistics\n\ndef find_Min_Swaps(lst, n):\n    ones = sum(lst)\n    zeros = n - ones\n    \n    if ones == 0 or zeros == 0:\n        return 0\n    \n    current_ones = sum(lst[:ones])\n    max_ones = current_ones\n    \n    for i in range(1, n - ones + 1):\n        current_ones = current_ones - lst[i-1] + lst[i+ones-1]\n        max_ones = max(max_ones, current_ones)\n    \n    return ones - max_ones\n```"
    },
    {
        "id":257,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport split\n\ndef listify_list(lst):\n    if lst is None:\n        return []\n    return list(map(list, lst))\n```"
    },
    {
        "id":258,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef count_list(lst):\n    if not lst:\n        return []\n    \n    counts = []\n    squares = []\n    \n    for sublist in lst:\n        counts.append(len(sublist))\n        squares.append([x**2 for x in sublist])\n    \n    return [counts, squares]\n```"
    },
    {
        "id":259,
        "response":"```python\nimport itertools\nimport typing\n\ndef sub_lists(lst: typing.List) -> typing.List[typing.List]:\n    if not lst:\n        return [[]]\n    \n    result = [[]]\n    \n    for length in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, length):\n            result.append(list(subset))\n    \n    return result\n```"
    },
    {
        "id":260,
        "response":"import re\n\ndef check_alphanumeric(s: str) -> bool:\n    if not s:\n        return False\n    return re.match(r'^.*[a-zA-Z0-9]$', s) is not None"
    },
    {
        "id":261,
        "response":"```python\nfrom typing import List\n\ndef anagram_lambda(lst: List[str], s: str) -> List[str]:\n    return list(filter(lambda x: sorted(x) == sorted(s), lst))\n```"
    },
    {
        "id":262,
        "response":"```python\nimport re\nfrom collections import Counter\nfrom typing import List\n\ndef n_common_words(s: str, n: int) -> List[tuple]:\n    if not s or n <= 0:\n        return []\n    \n    words = re.findall(r'\\w+', s.lower())\n    \n    word_counts = Counter(words)\n    \n    return word_counts.most_common(n)\n```"
    },
    {
        "id":263,
        "response":"import re\nimport typing\nimport itertools\n\ndef find_longest_conseq_subseq(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    num_set = set(lst)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length"
    },
    {
        "id":264,
        "response":"```python\nfrom typing import List\n\ndef palindrome_lambda(lst: List[str]) -> List[str]:\n    return list(filter(lambda x: x == x[::-1], lst))\n```"
    },
    {
        "id":265,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef ntimes_list(lst: typing.List, n: int) -> typing.List:\n    if not isinstance(lst, list) or not isinstance(n, int):\n        return []\n    \n    if n <= 0:\n        return []\n    \n    return list(itertools.chain.from_iterable(map(lambda x: [x] * n, lst)))\n```"
    },
    {
        "id":266,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_monthnumb(s: str) -> bool:\n    months_with_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    \n    if not isinstance(s, str):\n        return False\n    \n    s = s.strip().capitalize()\n    \n    return s in months_with_31_days"
    },
    {
        "id":267,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef min_Num(lst: list, n: int) -> int:\n    total_sum = sum(lst)\n    if total_sum % 2 == 0:\n        return 0\n    \n    for num in range(1, 2):\n        if (total_sum + num) % 2 == 0:\n            return num\n    \n    return 1"
    },
    {
        "id":268,
        "response":"import re\nimport typing\nimport itertools\n\ndef length_Of_Last_Word(s: str) -> int:\n    s = s.strip()\n    if not s:\n        return 0\n    words = s.split()\n    return len(words[-1]) if words else 0"
    },
    {
        "id":269,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef remove_list_range(lst, n, n2):\n    if not isinstance(lst, list):\n        return []\n    \n    if n is None or n2 is None:\n        return []\n    \n    if n > n2:\n        n, n2 = n2, n\n    \n    return [sublist for sublist in lst if n <= len(sublist) <= n2]"
    },
    {
        "id":270,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sum_positivenum(lst):\n    return sum(filter(lambda x: x > 0, lst))\n```"
    },
    {
        "id":271,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef are_Rotations(s: str, s2: str) -> bool:\n    if not s or not s2:\n        return False\n    \n    if len(s) != len(s2):\n        return False\n    \n    temp = s + s\n    return s2 in temp\n```"
    },
    {
        "id":272,
        "response":"```python\nimport typing\nimport itertools\n\ndef check_subset(lst: typing.List[typing.Any], lst2: typing.List[typing.Any]) -> bool:\n    def flatten(nested_list):\n        return list(itertools.chain.from_iterable(\n            flatten(x) if isinstance(x, list) else [x] for x in nested_list\n        ))\n\n    flat_lst = flatten(lst)\n    flat_lst2 = flatten(lst2)\n\n    if not flat_lst:\n        return True\n    \n    if not flat_lst2:\n        return False\n\n    return all(item in flat_lst2 for item in flat_lst)\n```"
    },
    {
        "id":273,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"
    },
    {
        "id":274,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_Concat(s: str, s2: str) -> bool:\n    if not s or not s2:\n        return False\n    \n    if len(s2) > len(s):\n        return False\n    \n    if len(s2) == 0:\n        return False\n    \n    length = len(s2)\n    for i in range(1, len(s) \/\/ length + 1):\n        if s2 * i == s:\n            return True\n    \n    return False\n```"
    },
    {
        "id":275,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef min_difference(lst):\n    if not lst or len(lst) < 2:\n        return None\n    \n    min_diff = float('inf')\n    \n    for pair in lst:\n        if len(pair) != 2:\n            return None\n        \n        diff = abs(pair[0] - pair[1])\n        min_diff = min(min_diff, diff)\n    \n    return min_diff"
    },
    {
        "id":276,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef lcm(n: int, n2: int) -> int:\n    if n <= 0 or n2 <= 0:\n        raise ValueError(\"Input must be positive integers\")\n    return abs(n * n2) \/\/ math.gcd(n, n2)\n```"
    },
    {
        "id":277,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport string\n\ndef sort_String(s: str) -> str:\n    if not s or not isinstance(s, str):\n        return \"\"\n    \n    sorted_chars = sorted(s.lower(), key=lambda x: (x.isdigit(), x.isalpha(), x))\n    return ''.join(sorted_chars)\n```"
    },
    {
        "id":278,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\nfrom typing import List, Tuple, Any\n\ndef check_tuples(tup: Tuple[Any], lst: List[Any]) -> bool:\n    if not tup or not lst:\n        return False\n    \n    unique_elements = set(tup)\n    return all(elem in lst for elem in unique_elements) and len(unique_elements) <= len(lst)\n```"
    },
    {
        "id":279,
        "response":"```python\nimport re\n\ndef text_match(s):\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":280,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef Check_Solution(n1, n2, n3):\n    discriminant = n2**2 - 4*n1*n3\n    \n    if discriminant > 0:\n        return 2\n    elif discriminant == 0:\n        return 1\n    else:\n        return 0\n```"
    },
    {
        "id":281,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef sum_even_odd(lst):\n    if not lst:\n        return 0\n    \n    first_even = next((num for num in lst if num % 2 == 0), 0)\n    first_odd = next((num for num in lst if num % 2 != 0), 0)\n    \n    return first_even + first_odd"
    },
    {
        "id":282,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef parallelogram_perimeter(n, n2):\n    if not isinstance(n, (int, float)) or not isinstance(n2, (int, float)):\n        raise TypeError(\"Inputs must be numeric\")\n    \n    if n <= 0 or n2 <= 0:\n        raise ValueError(\"Side lengths must be positive\")\n    \n    return 2 * (n + n2)"
    },
    {
        "id":283,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef div_of_nums(lst, m, n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, lst))\n```"
    },
    {
        "id":284,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l < 0 or r < 0 or l > r:\n        return False\n    \n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == mask\n```"
    },
    {
        "id":285,
        "response":"```python\ndef is_Isomorphic(s, s2):\n    if len(s) != len(s2):\n        return False\n    \n    map1 = {}\n    map2 = {}\n    \n    for c1, c2 in zip(s, s2):\n        if c1 not in map1 and c2 not in map2:\n            map1[c1] = c2\n            map2[c2] = c1\n        elif map1.get(c1) != c2 or map2.get(c2) != c1:\n            return False\n    \n    return True\n```"
    },
    {
        "id":286,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\n\ndef sum_num(tup):\n    if not tup or not isinstance(tup, (list, tuple)):\n        return 0\n    \n    try:\n        return sum(tup) \/ len(tup)\n    except (TypeError, ZeroDivisionError):\n        return 0\n```"
    },
    {
        "id":287,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef is_odd(n: int) -> bool:\n    return bool(n & 1)"
    },
    {
        "id":288,
        "response":"import itertools\nimport re\nimport typing\nimport numpy as np\n\ndef subtract_elements(tup, tup2):\n    if len(tup) != len(tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    if not all(isinstance(item, tuple) for item in tup + tup2):\n        raise TypeError(\"All elements must be tuples\")\n    \n    result = []\n    for t1, t2 in zip(tup, tup2):\n        if len(t1) != len(t2):\n            raise ValueError(\"Nested tuples must have the same length\")\n        \n        subtracted_tuple = tuple(x - y for x, y in zip(t1, t2))\n        result.append(subtracted_tuple)\n    \n    return tuple(result)"
    },
    {
        "id":289,
        "response":"import re\nimport typing\nimport itertools\nimport copy\n\ndef reverse_list_lists(lst):\n    if not isinstance(lst, list):\n        return lst\n    \n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[::-1])\n        else:\n            result.append(sublist)\n    \n    return result"
    },
    {
        "id":290,
        "response":"import re\nimport typing\nimport itertools\nimport math\nimport random\n\ndef find_Extra(lst: list, lst2: list, n: int) -> int:\n    if not lst or not lst2:\n        return -1\n    \n    if len(lst) <= len(lst2):\n        return -1\n    \n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return i\n    \n    return n"
    },
    {
        "id":291,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef same_Length(n, n2):\n    n_digits = len(str(abs(n)))\n    n2_digits = len(str(abs(n2)))\n    return n_digits == n2_digits\n```"
    },
    {
        "id":292,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef remove_spaces(s: str) -> str:\n    if s is None:\n        return \"\"\n    return re.sub(r'\\s+', ' ', s.strip())"
    },
    {
        "id":293,
        "response":"import re\nimport typing\nimport itertools\n\ndef Extract(lst):\n    if not lst:\n        return []\n    \n    try:\n        return [sublist[-1] for sublist in lst]\n    except (IndexError, TypeError):\n        return []"
    },
    {
        "id":294,
        "response":"import re\nimport typing\nimport itertools\n\ndef float_to_tuple(s: str) -> tuple:\n    try:\n        float_val = float(s)\n        whole_part = int(float_val)\n        decimal_part = abs(float_val - whole_part)\n        \n        if decimal_part == 0:\n            return (whole_part,)\n        \n        decimal_str = str(decimal_part)[2:]\n        result = (whole_part,) + tuple(map(int, list(decimal_str)))\n        \n        return result\n    except (ValueError, TypeError):\n        return ()"
    },
    {
        "id":295,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef max_sum_subseq(lst):\n    if not lst:\n        return 0\n    \n    if len(lst) == 1:\n        return lst[0]\n    \n    if len(lst) == 2:\n        return max(lst[0], lst[1])\n    \n    dp = [0] * len(lst)\n    dp[0] = lst[0]\n    dp[1] = max(lst[0], lst[1])\n    \n    for i in range(2, len(lst)):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i])\n    \n    return dp[-1]\n```"
    },
    {
        "id":296,
        "response":"import re\nimport typing\nimport itertools\n\ndef sort_list_last(lst):\n    if lst is None:\n        return []\n    return sorted(lst, key=lambda x: x[-1])"
    },
    {
        "id":297,
        "response":"import re\n\ndef is_Word_Present(s, s2):\n    if not s or not s2:\n        return False\n    \n    words = s.lower().split()\n    target_word = s2.lower()\n    \n    for word in words:\n        if word == target_word:\n            return True\n    \n    return False"
    },
    {
        "id":298,
        "response":"import re\nimport typing\nimport itertools\n\ndef extract_elements(lst: typing.List[int], n: int) -> typing.List[typing.List[int]]:\n    if not lst or n <= 0 or n > len(lst):\n        return []\n    \n    result = []\n    for i in range(len(lst) - n + 1):\n        if len(set(lst[i:i+n])) == 1:\n            result.append(lst[i:i+n])\n    \n    return result"
    },
    {
        "id":299,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef check(lst, n):\n    sorted_lst = sorted(lst)\n    left = 0\n    right = n - 1\n    \n    for num in sorted_lst:\n        if lst[left] == num:\n            left += 1\n        elif lst[right] == num:\n            right -= 1\n        else:\n            return False\n    \n    return True\n```"
    },
    {
        "id":300,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport string\n\ndef match_num(s: str) -> bool:\n    if not isinstance(s, str):\n        return False\n    \n    if not s:\n        return False\n    \n    pattern = r'^\\d'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":301,
        "response":"import math\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef num_comm_div(n1: int, n2: int) -> int:\n    if n1 <= 0 or n2 <= 0:\n        return 0\n    \n    smaller = min(n1, n2)\n    largest_common_divisor = 1\n    \n    for i in range(1, smaller + 1):\n        if n1 % i == 0 and n2 % i == 0:\n            largest_common_divisor = max(largest_common_divisor, i)\n    \n    return largest_common_divisor"
    },
    {
        "id":302,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef find(n, n2):\n    if n2 == 0:\n        raise ZeroDivisionError(\"Cannot calculate remainder with zero divisor\")\n    return n % n2"
    },
    {
        "id":303,
        "response":"import re\nimport typing\nimport itertools\n\ndef add_consecutive_nums(lst):\n    if not lst or len(lst) < 2:\n        return lst\n    \n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] + lst[i + 1])\n    \n    return result"
    },
    {
        "id":304,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef sum_Of_Series(n):\n    if not isinstance(n, int) or n < 0:\n        return 0\n    \n    return sum(i**3 for i in range(1, n+1))"
    },
    {
        "id":305,
        "response":"import re\nimport typing\nimport itertools\n\ndef re_order(lst):\n    if not lst:\n        return lst\n    \n    while lst and lst[-1] == 0:\n        lst.pop()\n    \n    return lst"
    },
    {
        "id":306,
        "response":"```python\nimport math\nimport typing\nimport re\nimport itertools\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    if k > n:\n        return 0\n    \n    if k < 0:\n        return 0\n    \n    result = 1\n    for i in range(k):\n        result *= (n - i)\n    \n    return result\n```"
    },
    {
        "id":307,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_words(lst: typing.List[str], lst2: typing.List[str]) -> typing.List[str]:\n    if not lst or not lst2:\n        return lst\n    \n    return [word for word in lst if word not in lst2]"
    },
    {
        "id":308,
        "response":"import re\nimport typing\nimport itertools\nimport string\n\ndef same_order(lst: list, lst2: list) -> bool:\n    common_elements = list(set(lst) & set(lst2))\n    \n    if not common_elements:\n        return False\n    \n    lst_common_indices = [lst.index(elem) for elem in common_elements]\n    lst2_common_indices = [lst2.index(elem) for elem in common_elements]\n    \n    return all(x < y for x, y in zip(lst_common_indices, sorted(lst_common_indices))) and \\\n           all(x < y for x, y in zip(lst2_common_indices, sorted(lst2_common_indices)))"
    },
    {
        "id":309,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef average_Odd(n):\n    if n <= 0 or n % 2 == 0:\n        return 0\n    \n    odd_numbers = [x for x in range(1, n + 1, 2)]\n    return sum(odd_numbers) \/ len(odd_numbers)"
    },
    {
        "id":310,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef no_of_subsequences(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    subsequence_count = 0\n    \n    for length in range(1, n + 1):\n        for subsequence in itertools.combinations(lst, length):\n            product = math.prod(subsequence)\n            if product < n:\n                subsequence_count += 1\n    \n    return subsequence_count\n```"
    },
    {
        "id":311,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef find_Min_Sum(n):\n    if n <= 1:\n        return n\n    \n    min_sum = float('inf')\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factor1 = i\n            factor2 = n \/\/ i\n            current_sum = factor1 + factor2\n            min_sum = min(min_sum, current_sum)\n    \n    return min_sum if min_sum != float('inf') else n\n```"
    },
    {
        "id":312,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_element_freq(tup):\n    def count_freq_recursive(item):\n        if isinstance(item, (list, tuple)):\n            return sum(count_freq_recursive(subitem) for subitem in item)\n        return 1\n\n    def flatten_tuple(nested_tuple):\n        flattened = []\n        for item in nested_tuple:\n            if isinstance(item, (list, tuple)):\n                flattened.extend(flatten_tuple(item))\n            else:\n                flattened.append(item)\n        return flattened\n\n    if not tup:\n        return {}\n\n    flattened_tup = flatten_tuple(tup)\n    freq_dict = {}\n\n    for element in flattened_tup:\n        freq_dict[element] = freq_dict.get(element, 0) + 1\n\n    return freq_dict"
    },
    {
        "id":313,
        "response":"import re\nimport typing\nimport itertools\n\ndef add_str(tup, s):\n    if not isinstance(tup, tuple):\n        raise TypeError(\"First argument must be a tuple\")\n    \n    result = []\n    for item in tup:\n        result.append(str(item) + str(s))\n    \n    return result"
    },
    {
        "id":314,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\nimport functools\nimport math\n\ndef sum_elements(tup):\n    if not tup:\n        return 0\n    \n    if not isinstance(tup, tuple):\n        return 0\n    \n    try:\n        return sum(tup)\n    except TypeError:\n        return 0"
    },
    {
        "id":315,
        "response":"```python\nimport itertools\nimport typing\nimport re\nimport math\n\ndef modular_sum(lst: typing.List[int], n: int, m: int) -> bool:\n    if not lst or n <= 0 or m <= 0:\n        return False\n    \n    for r in range(1, n + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) % m == 0:\n                return True\n    \n    return False\n```"
    },
    {
        "id":316,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef radix_sort(lst):\n    if not lst:\n        return lst\n\n    max_num = max(abs(x) for x in lst)\n    max_digits = int(math.log10(max_num)) + 1 if max_num > 0 else 1\n\n    is_negative = any(x < 0 for x in lst)\n    if is_negative:\n        negative = [x for x in lst if x < 0]\n        positive = [x for x in lst if x >= 0]\n        \n        negative = [abs(x) for x in negative]\n        negative_sorted = radix_sort(negative)\n        negative_sorted = [-x for x in reversed(negative_sorted)]\n        positive_sorted = radix_sort(positive)\n        \n        return negative_sorted + positive_sorted\n\n    for digit in range(max_digits):\n        buckets = [[] for _ in range(10)]\n        \n        for num in lst:\n            bucket_index = (num \/\/ (10 ** digit)) % 10\n            buckets[bucket_index].append(num)\n        \n        lst = [num for bucket in buckets for num in bucket]\n    \n    return lst"
    },
    {
        "id":317,
        "response":"import re\nimport typing\nimport itertools\n\ndef largest_pos(lst):\n    positive_nums = [num for num in lst if num > 0]\n    return max(positive_nums) if positive_nums else None"
    },
    {
        "id":318,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef sqrt_root(n):\n    if n < 0:\n        raise ValueError(\"Cannot calculate square root of negative number\")\n    if n == 0 or n == 1:\n        return n\n    \n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        square = mid * mid\n        \n        if square == n:\n            return mid\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right"
    },
    {
        "id":319,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef volume_tetrahedron(n):\n    if not isinstance(n, (int, float)) or n <= 0:\n        raise ValueError(\"Input must be a positive number\")\n    \n    volume = (n ** 3) \/ (6 * math.sqrt(2))\n    return round(volume, 2)"
    },
    {
        "id":320,
        "response":"```python\nimport math\nfrom typing import List\n\ndef get_lcm(lst: List[int]) -> int:\n    if not lst:\n        return 1\n    \n    def lcm(a, b):\n        return abs(a * b) \/\/ math.gcd(a, b)\n    \n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    \n    return result\n```"
    },
    {
        "id":321,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_isosceles(n: float, n2: float, n3: float) -> bool:\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    \n    if n + n2 <= n3 or n + n3 <= n2 or n2 + n3 <= n:\n        return False\n    \n    return (n == n2 and n != n3) or (n == n3 and n != n2) or (n2 == n3 and n2 != n)"
    },
    {
        "id":322,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef lbs(lst):\n    if not lst:\n        return 0\n    \n    n = len(lst)\n    \n    increasing = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                increasing[i] = max(increasing[i], increasing[j] + 1)\n    \n    decreasing = [1] * n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if lst[i] > lst[j]:\n                decreasing[i] = max(decreasing[i], decreasing[j] + 1)\n    \n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, increasing[i] + decreasing[i] - 1)\n    \n    return max_length\n```"
    },
    {
        "id":323,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_string(s: str) -> bool:\n    has_uppercase = lambda x: any(c.isupper() for c in x)\n    has_lowercase = lambda x: any(c.islower() for c in x)\n    has_number = lambda x: any(c.isdigit() for c in x)\n    has_length = lambda x, length: len(x) >= length\n    \n    return (\n        has_uppercase(s) and \n        has_lowercase(s) and \n        has_number(s) and \n        has_length(s, 8)\n    )\n```"
    },
    {
        "id":324,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef max_sum_increasing_subsequence(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    dp = lst.copy()\n    \n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j] and dp[i] < dp[j] + lst[i]:\n                dp[i] = dp[j] + lst[i]\n    \n    return max(dp)"
    },
    {
        "id":325,
        "response":"```python\nimport math\n\ndef parallel_lines(lst, lst2):\n    if len(lst) != 4 or len(lst2) != 4:\n        return False\n    \n    x1, y1, x2, y2 = lst\n    x3, y3, x4, y4 = lst2\n    \n    try:\n        slope1 = (y2 - y1) \/ (x2 - x1) if x2 != x1 else float('inf')\n        slope2 = (y4 - y3) \/ (x4 - x3) if x4 != x3 else float('inf')\n        \n        return math.isclose(slope1, slope2, rel_tol=1e-9)\n    \n    except ZeroDivisionError:\n        return x2 - x1 == 0 and x4 - x3 == 0\n```"
    },
    {
        "id":326,
        "response":"import re\n\ndef capitalize_first_last_letters(s):\n    if not s:\n        return s\n    \n    words = s.split()\n    modified_words = []\n    \n    for word in words:\n        if len(word) == 1:\n            modified_words.append(word.upper())\n        elif len(word) > 1:\n            modified_word = word[0].upper() + word[1:-1] + word[-1].upper()\n            modified_words.append(modified_word)\n    \n    return ' '.join(modified_words)"
    },
    {
        "id":327,
        "response":"```python\nimport typing\nimport re\nimport itertools\nimport sys\n\ndef get_pairs_count(lst: typing.List[int], n: int, n2: int) -> int:\n    if not lst or n <= 0:\n        return 0\n    \n    count = 0\n    num_freq = {}\n    \n    for num in lst:\n        complement = n2 - num\n        if complement in num_freq:\n            count += num_freq[complement]\n        \n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    return count\n```"
    },
    {
        "id":328,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef min_length(lst):\n    if not lst:\n        return 0\n    \n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    return min(len(item) if isinstance(item, (list, str, tuple)) else 0 for item in lst)"
    },
    {
        "id":329,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef jacobsthal_lucas(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 2\n    \n    if n == 1:\n        return 1\n    \n    a, b = 2, 1\n    \n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    \n    return b\n```"
    },
    {
        "id":330,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef negative_count(lst):\n    if not lst:\n        return 0.0\n    \n    negative_nums = sum(1 for num in lst if num < 0)\n    return negative_nums \/ len(lst)"
    },
    {
        "id":331,
        "response":"```python\nimport sys\nimport re\nimport typing\nimport itertools\n\ndef min_coins(lst, n, n2):\n    dp = [sys.maxsize] * (n2 + 1)\n    dp[0] = 0\n    \n    for i in range(1, n2 + 1):\n        for j in range(n):\n            if lst[j] <= i:\n                dp[i] = min(dp[i], dp[i - lst[j]] + 1)\n    \n    return dp[n2] if dp[n2] != sys.maxsize else -1\n```"
    },
    {
        "id":332,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport collections\n\ndef check_permutation(s1: str, s2: str) -> bool:\n    if len(s1) != len(s2):\n        return False\n    \n    char_count = collections.Counter(s1)\n    \n    for char in s2:\n        if char not in char_count:\n            return False\n        char_count[char] -= 1\n        if char_count[char] < 0:\n            return False\n    \n    return True\n```"
    },
    {
        "id":333,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_datatype(tup, param):\n    if not isinstance(tup, tuple):\n        return tup\n    \n    return tuple(item for item in tup if not isinstance(item, type(param)))"
    },
    {
        "id":334,
        "response":"import re\nimport typing\nimport itertools\n\ndef search_literal(s: str, s2: str) -> typing.Optional[int]:\n    if not s or not s2:\n        return None\n    \n    index = s.find(s2)\n    return index if index != -1 else None"
    },
    {
        "id":335,
        "response":"import math\n\ndef topbottom_surfacearea(n):\n    if not isinstance(n, (int, float)) or n < 0:\n        return 0\n    return math.pi * (n ** 2)"
    },
    {
        "id":336,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\n\ndef nth_items(lst, n):\n    if not lst:\n        return None\n    \n    if n < 0 or n >= len(lst):\n        return None\n    \n    return lst[n]\n```"
    },
    {
        "id":337,
        "response":"```python\nimport re\nfrom typing import Optional\n\ndef first_repeated_word(s: str) -> Optional[str]:\n    if not s or not isinstance(s, str):\n        return None\n    \n    words = re.findall(r'\\w+', s.lower())\n    word_count = {}\n    \n    for word in words:\n        if word in word_count:\n            return word\n        word_count[word] = 1\n    \n    return None\n```"
    },
    {
        "id":338,
        "response":"import re\nimport typing\nimport itertools\n\ndef string_list_to_tuple(tup):\n    if not isinstance(tup, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(item, str) for item in tup):\n        raise ValueError(\"All list elements must be strings\")\n    \n    return tuple(tup)"
    },
    {
        "id":339,
        "response":"```python\nimport typing\nimport re\nimport itertools\n\ndef basesnum_coresspondingnum(lst, lst2):\n    if not lst or not lst2 or len(lst) != len(lst2):\n        return []\n    \n    return list(map(pow, lst, lst2))\n```"
    },
    {
        "id":340,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_Diff(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    frequency = {}\n    for num in lst:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    if not frequency:\n        return 0\n    \n    freq_values = list(frequency.values())\n    return max(freq_values) - min(freq_values)\n```"
    },
    {
        "id":341,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef check_abundant(n):\n    if n <= 0:\n        return False\n    \n    divisor_sum = sum(i for i in range(1, n) if n % i == 0)\n    \n    return divisor_sum > n"
    },
    {
        "id":342,
        "response":"```python\nimport re\n\ndef fill_spaces(s: str) -> str:\n    if s is None:\n        return \"\"\n    return re.sub(r'[ ,.]', ':', s)\n```"
    },
    {
        "id":343,
        "response":"import re\nimport typing\nimport itertools\nimport math\nimport sys\n\ndef count_digits(n: int, n2: int) -> int:\n    if n is None or n2 is None:\n        return 0\n    \n    try:\n        total_sum = n + n2\n        return total_sum\n    except (TypeError, OverflowError):\n        return 0"
    },
    {
        "id":344,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef flatten_tuple(lst: typing.List[typing.Tuple]) -> str:\n    if not lst:\n        return \"\"\n    \n    try:\n        flattened = list(itertools.chain.from_iterable(lst))\n        return \" \".join(map(str, flattened))\n    except TypeError:\n        return \"\""
    },
    {
        "id":345,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef toggle_F_and_L_bits(n: int) -> int:\n    if n == 0:\n        return 1\n    \n    binary_length = n.bit_length()\n    \n    if binary_length == 1:\n        return 0 if n == 1 else 1\n    \n    first_bit_mask = 1 << (binary_length - 1)\n    last_bit_mask = 1\n    \n    return n ^ first_bit_mask ^ last_bit_mask\n```"
    },
    {
        "id":346,
        "response":"import re\nimport typing\nimport itertools\n\ndef last_occurence_char(s: str, s2: str) -> int:\n    if not s or not s2:\n        return -1\n    \n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == s2:\n            return i\n    \n    return -1"
    },
    {
        "id":347,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef Total_Hamming_Distance(n: int) -> int:\n    if n < 0:\n        return 0\n    \n    total_distance = 0\n    for i in range(n):\n        total_distance += bin(i ^ (i+1)).count('1')\n    \n    return total_distance\n```"
    },
    {
        "id":348,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef longest_increasing_subsequence(lst):\n    if not lst:\n        return 0\n    \n    n = len(lst)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"
    },
    {
        "id":349,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**5\n    \n    return total_sum"
    },
    {
        "id":350,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef find_Max(lst, n, n2):\n    if not lst or n <= 0:\n        return None\n    \n    if n == 1:\n        return lst[0]\n    \n    left, right = 0, n - 1\n    \n    while left <= right:\n        if left == right:\n            return lst[left]\n        \n        mid = (left + right) \/\/ 2\n        \n        if mid < right and lst[mid] > lst[mid + 1]:\n            return lst[mid]\n        \n        if mid > left and lst[mid] < lst[mid - 1]:\n            return lst[mid - 1]\n        \n        if lst[left] > lst[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return lst[0]\n```"
    },
    {
        "id":351,
        "response":"import re\nimport typing\nimport itertools\n\ndef extract_column(lst: typing.List[typing.List], n: int) -> typing.List:\n    if not lst:\n        return []\n    \n    if n < 0:\n        raise ValueError(\"Column index must be non-negative\")\n    \n    try:\n        return [row[n] for row in lst]\n    except IndexError:\n        raise IndexError(f\"Column index {n} is out of range for the given list\")"
    },
    {
        "id":352,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\n\ndef Seq_Linear(lst):\n    if len(lst) <= 2:\n        return True\n    \n    if len(set(lst)) == 1:\n        return True\n    \n    differences = [lst[i+1] - lst[i] for i in range(len(lst)-1)]\n    \n    return len(set(differences)) == 1\n```"
    },
    {
        "id":353,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef tuple_to_float(tup: typing.Tuple[int, ...]) -> float:\n    if not tup:\n        return 0.0\n    \n    integer_part = ''.join(map(str, tup[:-1])) if len(tup) > 1 else '0'\n    decimal_part = str(tup[-1]) if tup else '0'\n    \n    try:\n        result = float(f\"{integer_part}.{decimal_part}\")\n        return result\n    except (ValueError, TypeError):\n        return 0.0"
    },
    {
        "id":354,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef Split(lst):\n    if not lst:\n        return []\n    \n    odd_numbers = [num for num in lst if isinstance(num, int) and num % 2 != 0]\n    \n    return odd_numbers\n```"
    },
    {
        "id":355,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef difference(n):\n    if n < 0:\n        return 0\n    \n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    \n    return sum_of_cubes - sum_of_numbers\n```"
    },
    {
        "id":356,
        "response":"import itertools\nimport re\nimport typing\nimport math\n\ndef find_Odd_Pair(lst, n):\n    if not lst or n <= 0:\n        return []\n    \n    odd_numbers = [num for num in lst if num % 2 != 0]\n    \n    if len(odd_numbers) < 2:\n        return []\n    \n    result = []\n    for pair in itertools.combinations(odd_numbers, 2):\n        result.append(pair[0] ^ pair[1])\n    \n    return result[:n]"
    },
    {
        "id":357,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef toggle_string(s: str) -> str:\n    if not s:\n        return s\n    \n    return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n```"
    },
    {
        "id":358,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    str1 = str(abs(n1))\n    str2 = str(abs(n2))\n    \n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    \n    total_distance = 0\n    \n    for digit1, digit2 in zip(str1, str2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance\n```"
    },
    {
        "id":359,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef max_sub_array_sum(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum = max(lst[i], current_sum + lst[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "id":360,
        "response":"import re\nimport typing\nimport itertools\n\ndef union_elements(tup, tup2):\n    if not isinstance(tup, tuple) or not isinstance(tup2, tuple):\n        raise TypeError(\"Input must be tuples\")\n    \n    return tuple(set(tup + tup2))"
    },
    {
        "id":361,
        "response":"```python\nimport typing\nimport itertools\nimport re\nimport statistics\nimport math\n\ndef assign_elements(lst):\n    if not lst or len(lst) < 2:\n        return []\n    \n    result = []\n    for i in range(0, len(lst), 2):\n        if i + 1 < len(lst):\n            pair = (lst[i], lst[i+1])\n            result.append(pair)\n    \n    return result\n```"
    },
    {
        "id":362,
        "response":"import re\nimport typing\nimport itertools\n\ndef Find_Max_Length(lst):\n    if not lst:\n        return 0\n    \n    max_length = 0\n    for sublist in lst:\n        if isinstance(sublist, list):\n            max_length = max(max_length, len(sublist))\n    \n    return max_length"
    },
    {
        "id":363,
        "response":"import re\nfrom typing import List\n\ndef extract_values(s: str) -> List[str]:\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, s)\n    return matches if matches else []"
    },
    {
        "id":364,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_Pairs(lst: typing.List[int], n: int) -> int:\n    if not lst or n <= 0:\n        return 0\n    \n    pair_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                pair_count += 1\n    \n    return pair_count"
    },
    {
        "id":365,
        "response":"import re\nimport typing\nimport itertools\n\ndef split(s: str) -> typing.List[str]:\n    if s is None:\n        return []\n    return list(s)"
    },
    {
        "id":366,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef sum_digits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    total = 0\n    while n > 0:\n        total += n % 10\n        n \/\/= 10\n    \n    return total"
    },
    {
        "id":367,
        "response":"import typing\nimport re\nimport itertools\n\ndef issort_list(lst):\n    if not lst:\n        return True\n    \n    ascending = all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n    descending = all(lst[i] >= lst[i+1] for i in range(len(lst)-1))\n    \n    return ascending or descending"
    },
    {
        "id":368,
        "response":"import re\nimport typing\nimport itertools\n\ndef empty_list(n):\n    if not isinstance(n, int) or n < 0:\n        return []\n    return [{} for _ in range(n)]"
    },
    {
        "id":369,
        "response":"import re\nimport typing\nimport itertools\nimport split\n\ndef sort_sublists(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            sorted_sublist = sorted(item)\n            result.append(sorted_sublist)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":370,
        "response":"import re\nfrom typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    if not lst or not lst2:\n        return lst\n    \n    result = []\n    for word in lst:\n        if not any(char in word for char in lst2):\n            result.append(word)\n    \n    return result"
    },
    {
        "id":371,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef max_sum_pair_diff_lessthan_K(lst, n, k):\n    if not lst or n <= 0 or k <= 0:\n        return 0\n    \n    lst.sort()\n    max_sum = 0\n    used = [False] * n\n    \n    for i in range(n):\n        if used[i]:\n            continue\n        \n        for j in range(i+1, n):\n            if used[j]:\n                continue\n            \n            if abs(lst[i] - lst[j]) < k:\n                max_sum += lst[i] + lst[j]\n                used[i] = True\n                used[j] = True\n                break\n    \n    return max_sum\n```"
    },
    {
        "id":372,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\nimport math\n\ndef two_unique_nums(lst):\n    if not lst or len(lst) <= 2:\n        return lst\n    \n    num_counts = {}\n    for num in lst:\n        num_counts[num] = num_counts.get(num, 0) + 1\n    \n    unique_nums = [num for num, count in num_counts.items() if count == 1]\n    duplicates = [num for num, count in num_counts.items() if count > 1]\n    \n    if len(duplicates) < 2:\n        return lst\n    \n    for dup in duplicates[:2]:\n        while dup in lst:\n            lst.remove(dup)\n    \n    return lst"
    },
    {
        "id":373,
        "response":"import math\nimport typing\nimport itertools\nimport re\n\ndef unique_product(lst: typing.List[int]) -> int:\n    if not lst:\n        return 0\n    \n    unique_nums = set(lst)\n    \n    if not unique_nums:\n        return 0\n    \n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "id":374,
        "response":"import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        raise ValueError(\"Radius and height must be positive numbers\")\n    \n    top_bottom_area = 2 * math.pi * radius ** 2\n    side_area = 2 * math.pi * radius * height\n    \n    total_surface_area = top_bottom_area + side_area\n    \n    return round(total_surface_area, 2)"
    },
    {
        "id":375,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef count_no(n, *args):\n    if n <= 0:\n        return None\n    \n    excluded_multiple = args[0] if args else None\n    count = 0\n    current_num = 1\n    \n    while count < n:\n        if excluded_multiple is None or current_num % excluded_multiple != 0:\n            count += 1\n        \n        if count == n:\n            return current_num\n        \n        current_num += 1\n```"
    },
    {
        "id":376,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_Sub_Array(lst, lst2, n, n2):\n    if n2 > n:\n        return False\n    \n    for i in range(n - n2 + 1):\n        match = True\n        for j in range(n2):\n            if lst[i+j] != lst2[j]:\n                match = False\n                break\n        \n        if match:\n            return True\n    \n    return False\n```"
    },
    {
        "id":377,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef last_Digit_Factorial(n):\n    if n < 0:\n        return None\n    \n    if n <= 1:\n        return 1\n    \n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * (i % 10)) % 10\n    \n    return last_digit"
    },
    {
        "id":378,
        "response":"import re\nimport typing\nimport itertools\n\ndef interleave_lists(*lists):\n    if not lists:\n        return []\n    \n    list_lengths = [len(lst) for lst in lists]\n    if len(set(list_lengths)) > 1:\n        raise ValueError(\"All lists must have the same length\")\n    \n    result = []\n    for items in zip(*lists):\n        result.extend(items)\n    \n    return result"
    },
    {
        "id":379,
        "response":"import typing\nimport itertools\nimport re\nimport statistics\n\ndef find_dissimilar(tup: tuple, tup2: tuple) -> tuple:\n    if not isinstance(tup, tuple) or not isinstance(tup2, tuple):\n        raise TypeError(\"Inputs must be tuples\")\n    \n    set1 = set(tup)\n    set2 = set(tup2)\n    \n    different_elements = set1.symmetric_difference(set2)\n    \n    return tuple(different_elements)"
    },
    {
        "id":380,
        "response":"import re\nimport typing\nimport itertools\n\ndef extract_even(tup):\n    def recursive_even_extract(item):\n        if isinstance(item, tuple):\n            return tuple(recursive_even_extract(sub_item) for sub_item in item if recursive_even_extract(sub_item))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n        return None\n\n    result = recursive_even_extract(tup)\n    return result if result is not None else ()"
    },
    {
        "id":381,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef surface_Area(n, n2):\n    if n <= 0 or n2 <= 0:\n        return 0\n    \n    base_area = n * n\n    slant_height = math.sqrt((n\/2)**2 + n2**2)\n    triangular_face_area = 0.5 * n * slant_height\n    \n    total_surface_area = base_area + 4 * triangular_face_area\n    \n    return round(total_surface_area, 2)"
    },
    {
        "id":382,
        "response":"import re\nimport typing\nimport itertools\n\ndef my_dict(dct):\n    return len(dct) == 0"
    },
    {
        "id":383,
        "response":"```python\nimport math\n\ndef catalan_number(n):\n    if n < 0:\n        return None\n    \n    return math.comb(2*n, n) \/\/ (n + 1)\n```"
    },
    {
        "id":384,
        "response":"```python\nimport re\nimport typing\n\ndef find_adverbs(s: str) -> typing.List[typing.Tuple[str, int]]:\n    if not s or not isinstance(s, str):\n        return []\n    \n    pattern = r'\\b\\w+ly\\b'\n    adverbs = []\n    \n    for match in re.finditer(pattern, s):\n        adverbs.append((match.group(), match.start()))\n    \n    return sorted(adverbs, key=lambda x: x[1])\n```"
    },
    {
        "id":385,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef expensive_items(lst, n):\n    if not lst or n <= 0:\n        return []\n    \n    sorted_items = sorted(lst, key=lambda x: x.get('price', 0), reverse=True)\n    return sorted_items[:min(n, len(sorted_items))]\n```"
    },
    {
        "id":386,
        "response":"import re\nimport typing\nimport itertools\nimport random\n\ndef split_Arr(lst, n, n2):\n    if not lst or n < 0 or n2 < 0 or n + n2 > len(lst):\n        return lst\n    \n    split_point = min(n, len(lst))\n    rotated_arr = lst[split_point:] + lst[:split_point]\n    \n    return rotated_arr[:n2]"
    },
    {
        "id":387,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\nimport math\nimport copy\n\ndef list_tuple(lst):\n    if lst is None:\n        return None\n    \n    if not isinstance(lst, list):\n        return tuple([lst])\n    \n    return tuple(lst)"
    },
    {
        "id":388,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef big_diff(lst):\n    if not lst:\n        return 0\n    \n    if len(lst) == 1:\n        return 0\n    \n    max_val = max(lst)\n    min_val = min(lst)\n    \n    return max_val - min_val"
    },
    {
        "id":389,
        "response":"import math\n\ndef perfect_squares(n, n2):\n    if n > n2:\n        n, n2 = n2, n\n    \n    start = math.ceil(math.sqrt(n))\n    end = math.floor(math.sqrt(n2))\n    \n    return [x**2 for x in range(start, end + 1)]"
    },
    {
        "id":390,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef polar_rect(n, n2):\n    if not isinstance(n, (int, float)) or not isinstance(n2, (int, float)):\n        raise TypeError(\"Inputs must be numeric\")\n    \n    if n < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    \n    x = n * math.cos(n2)\n    y = n * math.sin(n2)\n    \n    return (round(x, 10), round(y, 10))\n```"
    },
    {
        "id":391,
        "response":"import re\nimport typing\nimport itertools\nimport copy\n\ndef swap_List(lst):\n    if not lst:\n        return lst\n    \n    if len(lst) == 1:\n        return lst\n    \n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":392,
        "response":"```python\nimport math\nimport typing\nimport itertools\nimport re\n\ndef sum_Of_product(n: int) -> int:\n    if n < 0:\n        return 0\n    \n    total_sum = 0\n    for k in range(n + 1):\n        coef1 = math.comb(n, k)\n        coef2 = math.comb(n, n - k)\n        total_sum += coef1 * coef2\n    \n    return total_sum\n```"
    },
    {
        "id":393,
        "response":"```python\nimport re\n\ndef removezero_ip(s):\n    parts = s.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)\n```"
    },
    {
        "id":394,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\nimport math\n\ndef diff_even_odd(lst):\n    if not lst:\n        return 0\n    \n    first_even = next((num for num in lst if num % 2 == 0), None)\n    first_odd = next((num for num in lst if num % 2 != 0), None)\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return abs(first_even - first_odd)"
    },
    {
        "id":395,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    \n    if sorted(s) != sorted(s2):\n        return -1\n    \n    mismatches = [i for i in range(len(s)) if s[i] != s2[i]]\n    \n    swaps = 0\n    for i in range(0, len(mismatches), 2):\n        if i + 1 < len(mismatches):\n            swaps += 1\n    \n    return swaps\n```"
    },
    {
        "id":396,
        "response":"import re\nimport typing\nimport itertools\n\ndef tuple_size(tup):\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    return len(tup)"
    },
    {
        "id":397,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef find_kth(lst1, lst2, n1, n2, k):\n    if not lst1 or len(lst1) == 0:\n        return lst2[k-1] if k <= n2 else None\n    \n    if not lst2 or len(lst2) == 0:\n        return lst1[k-1] if k <= n1 else None\n    \n    if k > n1 + n2:\n        return None\n    \n    if k == 1:\n        return min(lst1[0], lst2[0])\n    \n    i = min(n1, k\/\/2)\n    j = min(n2, k\/\/2)\n    \n    if lst1[i-1] < lst2[j-1]:\n        return find_kth(lst1[i:], lst2, n1-i, n2, k-i)\n    else:\n        return find_kth(lst1, lst2[j:], n1, n2-j, k-j)\n```"
    },
    {
        "id":398,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef armstrong_number(n):\n    if n < 0:\n        return False\n    \n    num_str = str(n)\n    num_digits = len(num_str)\n    \n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    \n    return sum_of_powers == n\n```"
    },
    {
        "id":399,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef sum_average(n):\n    if n <= 0:\n        return 0, 0.0\n    \n    total_sum = sum(range(1, n + 1))\n    average = total_sum \/ n\n    \n    return total_sum, average"
    },
    {
        "id":400,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_Even(n: int) -> bool:\n    return (n & 1) == 0\n```"
    }
]