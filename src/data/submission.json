[
    {
        "id":1,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef max_chain_length(pairs, n):\n    if not pairs:\n        return 0\n    \n    pairs.sort(key=lambda x: x[1])\n    \n    max_length = 1\n    current_end = pairs[0][1]\n    \n    for i in range(1, n):\n        if pairs[i][0] > current_end:\n            max_length += 1\n            current_end = pairs[i][1]\n    \n    return max_length\n```"
    },
    {
        "id":2,
        "response":"import re\nimport typing\nimport itertools\n\ndef first_repeated_char(s: str) -> typing.Optional[str]:\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"
    },
    {
        "id":3,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef get_ludic(n: int) -> typing.List[int]:\n    if n < 1:\n        return []\n    \n    ludic = list(range(1, n + 1))\n    i = 1\n    \n    while i < len(ludic):\n        current = ludic[i]\n        j = i + current\n        \n        while j < len(ludic):\n            ludic.pop(j)\n            j = j - 1 + current\n        \n        i += 1\n    \n    return ludic\n```"
    },
    {
        "id":4,
        "response":"import re\nfrom typing import Optional\n\ndef reverse_words(s: str) -> str:\n    if not s:\n        return \"\"\n    \n    words = s.split()\n    \n    if len(words) <= 1:\n        return s\n    \n    return \" \".join(words[::-1])"
    },
    {
        "id":5,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef prime_num(n: int) -> bool:\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "id":6,
        "response":"```python\nimport math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi \/ 180)\n```"
    },
    {
        "id":7,
        "response":"```python\nimport re\n\ndef find_literals(s: str, s2: str) -> int:\n    match = re.search(re.escape(s2), s)\n    return match.start() if match else -1\n```"
    },
    {
        "id":8,
        "response":"import re\nimport typing\nimport itertools\n\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]"
    },
    {
        "id":9,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef floor_Min(n, n2, n3):\n    results = []\n    for i in range(n2):\n        for j in range(n3):\n            current_value = i * n3 + j\n            if current_value <= n:\n                results.append(current_value % n2)\n    \n    if not results:\n        return 0\n    \n    return min(results)\n```"
    },
    {
        "id":10,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_kth_element(lst: typing.List, n: int) -> typing.List:\n    if not lst or n < 0 or n >= len(lst):\n        return []\n    return lst[:n] + lst[n+1:]"
    },
    {
        "id":11,
        "response":"import re\nimport typing\nimport itertools\n\ndef max_of_nth(lst: typing.List[tuple], n: int) -> typing.Any:\n    if not lst or n < 0 or n >= len(lst[0]):\n        raise ValueError(\"Invalid input\")\n    return max(row[n] for row in lst)"
    },
    {
        "id":12,
        "response":"import re\nimport typing\nimport itertools\n\ndef merge(lst):\n    if not lst:\n        return []\n    return [lst[0], lst[-1]]"
    },
    {
        "id":13,
        "response":"import re\nimport typing\nimport itertools\n\ndef maximum_value(lst):\n    return max(record[0] for record in lst)"
    },
    {
        "id":14,
        "response":"import re\nimport typing\nimport itertools\n\ndef cummulative_sum(lst):\n    return sum(x + y for x, y in lst)"
    },
    {
        "id":15,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef average_tuple(tup):\n    return sum(tup) \/ len(tup) if tup else 0\n```"
    },
    {
        "id":16,
        "response":"import re\nimport typing\nimport itertools\n\ndef tuple_modulo(tup1: typing.Tuple[int, ...], tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    if len(tup1) != len(tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    return tuple(a % b for a, b in zip(tup1, tup2))"
    },
    {
        "id":17,
        "response":"import math\n\ndef min_Jumps(n1, n2, n3):\n    def is_reachable(x, jumps):\n        return x % jumps == 0\n    \n    for total_jumps in range(1, n1 + 1):\n        for j1 in range(total_jumps + 1):\n            for j2 in range(total_jumps - j1 + 1):\n                j3 = total_jumps - j1 - j2\n                \n                x_pos = j1 * n1 + j2 * n2 + j3 * n3\n                \n                if x_pos > 0 and is_reachable(x_pos, 1):\n                    return total_jumps\n    \n    return -1"
    },
    {
        "id":18,
        "response":"```python\ndef div_list(lst1, lst2):\n    return list(map(lambda x, y: x \/\/ y, lst1, lst2))\n```"
    },
    {
        "id":19,
        "response":"```python\nimport re\n\ndef move_num(s):\n    numbers = re.findall(r'\\d+', s)\n    letters = re.sub(r'\\d+', '', s)\n    return letters + ''.join(numbers)\n```"
    },
    {
        "id":20,
        "response":"```python\ndef largest_subset(lst, n):\n    result = []\n    for num in lst:\n        if all(num % x == 0 or x % num == 0 for x in result):\n            result.append(num)\n    return result\n```"
    },
    {
        "id":21,
        "response":"```python\ndef increment_numerics(lst, k):\n    return [str(int(num) + k) for num in lst]\n```"
    },
    {
        "id":22,
        "response":"import re\nimport typing\nimport itertools\n\ndef get_median(lst1: list, lst2: list, n: int) -> float:\n    merged = sorted(lst1 + lst2)\n    mid = len(merged) \/\/ 2\n    return (merged[mid - 1] + merged[mid]) \/ 2"
    },
    {
        "id":23,
        "response":"import re\nimport typing\nimport itertools\n\ndef nth_nums(lst, n):\n    return list(map(lambda x: x ** n, lst))"
    },
    {
        "id":24,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_upper(s: str) -> str:\n    return s.upper()"
    },
    {
        "id":25,
        "response":"import re\nimport typing\nimport itertools\n\ndef swap_List(lst):\n    if len(lst) <= 1:\n        return lst\n    \n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":26,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef triangle_area(n):\n    if n <= 0:\n        return 0\n    return (n * n) \/ 4"
    },
    {
        "id":27,
        "response":"import re\nimport typing\nimport itertools\n\ndef find_First_Missing(lst: list, n: int, n2: int) -> int:\n    if not lst:\n        return 1\n    \n    num_set = set(lst)\n    \n    for i in range(1, n2 + 2):\n        if i not in num_set:\n            return i\n    \n    return n2 + 1"
    },
    {
        "id":28,
        "response":"import re\n\ndef replace_spaces(s: str) -> str:\n    return s.replace(\" \", \"%20\")"
    },
    {
        "id":29,
        "response":"import re\nimport typing\nimport itertools\n\ndef Split(lst):\n    return [num for num in lst if num % 2 == 0]"
    },
    {
        "id":30,
        "response":"```python\ndef get_coordinates(coord):\n    x, y = coord\n    return {\n        (x, y + 1),\n        (x + 1, y),\n        (x - 1, y),\n        (x, y - 1)\n    }\n```"
    },
    {
        "id":31,
        "response":"```python\nimport re\n\ndef replace_spaces(s):\n    if ' ' in s:\n        return re.sub(r'\\s+', '_', s)\n    elif '_' in s:\n        return re.sub(r'_+', ' ', s)\n    return s\n```"
    },
    {
        "id":32,
        "response":"```python\ndef move_zero(lst):\n    non_zero = [num for num in lst if num != 0]\n    zero_count = lst.count(0)\n    return non_zero + [0] * zero_count\n```"
    },
    {
        "id":33,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef pair_OR_Sum(lst, n):\n    if n == 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += lst[i] ^ lst[j]\n    \n    return total_sum\n```"
    },
    {
        "id":34,
        "response":"import re\nimport typing\nimport itertools\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        sum += even_num ** 4\n    return sum"
    },
    {
        "id":35,
        "response":"import heapq\n\ndef heap_sort(lst):\n    if not lst:\n        return []\n    \n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "id":36,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return False\n    \n    root1 = (-b + math.sqrt(discriminant)) \/ (2*a)\n    root2 = (-b - math.sqrt(discriminant)) \/ (2*a)\n    \n    return abs(root1 + root2) < 1e-10 and root1 * root2 == c\/a\n```"
    },
    {
        "id":37,
        "response":"import re\nimport typing\nimport itertools\n\ndef noprofit_noloss(n, n2):\n    return n == n2"
    },
    {
        "id":38,
        "response":"```python\nimport math\n\ndef wind_chill(temperature, wind_speed):\n    if temperature > 50 or wind_speed < 3:\n        return temperature\n    \n    wind_chill_index = 35.74 + (0.6215 * temperature) - (35.75 * (wind_speed ** 0.16)) + (0.4275 * temperature * (wind_speed ** 0.16))\n    \n    return round(wind_chill_index, 2)\n```"
    },
    {
        "id":39,
        "response":"import re\nimport typing\nimport itertools\n\ndef sample_nam(lst: typing.List[str]) -> int:\n    return sum(len(name) for name in lst if name and name[0].isupper())"
    },
    {
        "id":40,
        "response":"import re\n\ndef remove_parenthesis(s: str) -> str:\n    return re.sub(r'\\s*\\([^)]*\\)', '', s).strip()"
    },
    {
        "id":41,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef is_nonagonal(n):\n    return n * (7 * n - 5) \/\/ 2\n```"
    },
    {
        "id":42,
        "response":"import typing\nimport itertools\n\ndef remove_similar_row(lst: typing.List[tuple]) -> typing.List[tuple]:\n    if not lst:\n        return []\n    \n    result = []\n    seen = set()\n    \n    for row in lst:\n        if row not in seen:\n            result.append(row)\n            seen.add(row)\n    \n    return result"
    },
    {
        "id":43,
        "response":"import re\n\ndef text_match_wordz_middle(s):\n    pattern = r'\\b\\w+z\\w+\\b'\n    return bool(re.search(pattern, s))"
    },
    {
        "id":44,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef reverse_Array_Upto_K(lst, n):\n    if n < 0 or n >= len(lst):\n        return lst\n    \n    start = 0\n    end = n\n    \n    while start < end:\n        lst[start], lst[end] = lst[end], lst[start]\n        start += 1\n        end -= 1\n    \n    return lst"
    },
    {
        "id":45,
        "response":"import re\nimport typing\nimport itertools\n\ndef find_k_product(lst: typing.List[typing.Tuple[int, int]], k: int) -> int:\n    if not lst:\n        return 0\n    \n    product = 1\n    for item in lst:\n        if k < len(item):\n            product *= item[k]\n    \n    return product"
    },
    {
        "id":46,
        "response":"import re\nimport typing\nimport itertools\n\ndef No_of_cubes(n: int, k: int) -> int:\n    if k > n or k <= 0 or n <= 0:\n        return 0\n    \n    max_cubes_per_dimension = n - k + 1\n    return max_cubes_per_dimension ** 3"
    },
    {
        "id":47,
        "response":"import re\nimport typing\nimport itertools\n\ndef split_upperstring(s: str) -> typing.List[str]:\n    if not s:\n        return []\n    \n    uppercase_letters = [char for char in s if char.isupper()]\n    \n    if not uppercase_letters:\n        return [s[0].upper()]\n    \n    return uppercase_letters"
    },
    {
        "id":48,
        "response":"import typing\n\ndef exchange_elements(lst: typing.List[int]) -> typing.List[int]:\n    result = lst.copy()\n    for i in range(0, len(result) - 1, 2):\n        result[i], result[i + 1] = result[i + 1], result[i]\n    return result"
    },
    {
        "id":49,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_Range_list(lst, n, n2):\n    if not lst or n < 0 or n2 >= len(lst) or n > n2:\n        return 0\n    return sum(lst[n:n2+1])"
    },
    {
        "id":50,
        "response":"import re\nimport typing\nimport itertools\n\ndef are_Equal(lst: list, lst2: list, n: int, n2: int) -> bool:\n    if n != n2:\n        return False\n    \n    if n == 0 and n2 == 0:\n        return True\n    \n    sorted_lst1 = sorted(lst)\n    sorted_lst2 = sorted(lst2)\n    \n    return sorted_lst1 == sorted_lst2"
    },
    {
        "id":51,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef check_subset(tup, tup2):\n    return all(item in tup for item in tup2)"
    },
    {
        "id":52,
        "response":"import re\nimport typing\nimport itertools\n\ndef matrix_to_list(matrix):\n    if not matrix:\n        return []\n    \n    return list(map(list, zip(*matrix)))"
    },
    {
        "id":53,
        "response":"from collections import defaultdict\n\ndef grouping_dictionary(lst):\n    result = defaultdict(list)\n    for key, value in lst:\n        result[key].append(value)\n    return dict(result)"
    },
    {
        "id":54,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\n\ndef rectangle_perimeter(n, n2):\n    return 2 * (n + n2)"
    },
    {
        "id":55,
        "response":"import re\nimport typing\nimport itertools\n\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))"
    },
    {
        "id":56,
        "response":"import typing\nimport itertools\nimport re\nimport math\n\ndef find_Min_Sum(lst1: list, lst2: list, n: int) -> int:\n    lst1.sort()\n    lst2.sort()\n    \n    min_sum = 0\n    for i in range(n):\n        min_sum += abs(lst1[i] - lst2[i])\n    \n    return min_sum"
    },
    {
        "id":57,
        "response":"import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    \n    factorial = math.factorial(n)\n    \n    while factorial >= 10:\n        factorial \/\/= 10\n    \n    return factorial"
    },
    {
        "id":58,
        "response":"from typing import List, Union\nfrom collections import Counter\n\ndef max_occurrences(lst: List[Union[int, str, bool]]) -> Union[int, str, bool, None]:\n    if not lst:\n        return None\n    \n    count = Counter(lst)\n    return max(count, key=count.get)"
    },
    {
        "id":59,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef Repeat(lst):\n    seen = set()\n    duplicates = set()\n    \n    for item in lst:\n        if item in seen:\n            duplicates.add(item)\n        else:\n            seen.add(item)\n    \n    return sorted(list(duplicates))\n```"
    },
    {
        "id":60,
        "response":"import typing\nimport itertools\nimport re\nimport math\n\ndef find_Points(n: int, n2: int, n3: int, n4: int) -> typing.List[typing.Tuple[int, int]]:\n    if n > n2 or n3 > n4:\n        return []\n    \n    if n2 < n3 or n4 < n:\n        return [(n2, n3)]\n    \n    if n2 == n3:\n        return [(n2, n3)]\n    \n    if n2 > n3:\n        return []\n    \n    return [(n2, n3)]"
    },
    {
        "id":61,
        "response":"import re\nimport typing\nimport itertools\n\ndef max_sum_of_three_consecutive(lst, n):\n    if n <= 3:\n        return max(lst)\n    \n    dp = [0] * n\n    dp[0] = lst[0]\n    dp[1] = lst[0] + lst[1]\n    dp[2] = max(dp[1], lst[1] + lst[2], lst[0] + lst[2])\n    \n    for i in range(3, n):\n        dp[i] = max(\n            dp[i-1],\n            dp[i-2] + lst[i],\n            dp[i-3] + lst[i] + lst[i-1]\n        )\n    \n    return dp[n-1]"
    },
    {
        "id":62,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sorted_dict(dct):\n    return {key: sorted(value) for key, value in dct.items()}\n```"
    },
    {
        "id":63,
        "response":"import re\nimport typing\nimport itertools\n\ndef find_max_val(n, x, y):\n    for k in range(n, 0, -1):\n        if k % x == y:\n            return k\n    return 0"
    },
    {
        "id":64,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\n\ndef average_Even(n):\n    if n <= 1:\n        return 0\n    \n    even_nums = [x for x in range(2, n+1, 2)]\n    return int(sum(even_nums) \/ len(even_nums))\n```"
    },
    {
        "id":65,
        "response":"import re\nimport typing\nimport itertools\n\ndef move_last(lst):\n    if len(lst) <= 1:\n        return lst\n    return lst[1:] + [lst[0]]"
    },
    {
        "id":66,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_char(s: str, s2: str) -> int:\n    if not s or not s2:\n        return 0\n    return s.count(s2)"
    },
    {
        "id":67,
        "response":"import re\nimport typing\nimport itertools\n\ndef Check_Vow(s: str, s2: str) -> int:\n    vowel_set = set(s2.lower())\n    return sum(1 for char in s.lower() if char in vowel_set)"
    },
    {
        "id":68,
        "response":"```python\ndef replace(s, s2):\n    result = []\n    for char in s:\n        if not result or char != s2 or result[-1] != s2:\n            result.append(char)\n    return ''.join(result)\n```"
    },
    {
        "id":69,
        "response":"import re\n\ndef check_IP(s: str) -> bool:\n    pattern = r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n    return bool(re.match(pattern, s))"
    },
    {
        "id":70,
        "response":"import re\nimport typing\nimport itertools\n\ndef decreasing_trend(lst: typing.List[int]) -> bool:\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] >= lst[i-1]:\n            return False\n    \n    return True"
    },
    {
        "id":71,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport split\n\ndef set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 0\n    \n    if n & (n + 1) == 0:\n        return n\n    \n    mask = 1\n    while n & mask:\n        mask <<= 1\n    \n    return n & ~mask\n```"
    },
    {
        "id":72,
        "response":"import re\nimport typing\nimport itertools\n\ndef max_of_three(n: int, n2: int, n3: int) -> int:\n    return max(n, n2, n3)"
    },
    {
        "id":73,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```"
    },
    {
        "id":74,
        "response":"import re\n\ndef remove_duplicate(s):\n    if not s:\n        return \"\"\n    \n    words = s.split()\n    unique_words = []\n    seen = set()\n    \n    for word in words:\n        if word not in seen:\n            unique_words.append(word)\n            seen.add(word)\n    \n    return \" \".join(unique_words)"
    },
    {
        "id":75,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_nums(n1, n2, min_range, max_range):\n    total = n1 + n2\n    if min_range <= total <= max_range:\n        return 20\n    return total"
    },
    {
        "id":76,
        "response":"import re\n\ndef remove_extra_char(s: str) -> str:\n    return re.sub(r'[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":77,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef validity_triangle(n1: float, n2: float, n3: float) -> bool:\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    \n    return (n1 + n2 > n3) and (n1 + n3 > n2) and (n2 + n3 > n1)\n```"
    },
    {
        "id":78,
        "response":"import re\nimport typing\nimport itertools\nimport string\nimport sys\n\ndef remove_spaces(s: str) -> str:\n    return s.replace(\" \", \"\")"
    },
    {
        "id":79,
        "response":"import re\nimport typing\nimport itertools\n\ndef access_key(dct: dict, n: int) -> str:\n    if not isinstance(dct, dict):\n        raise TypeError(\"First argument must be a dictionary\")\n    \n    if not isinstance(n, int):\n        raise TypeError(\"Index must be an integer\")\n    \n    keys = list(dct.keys())\n    \n    if n < 0 or n >= len(keys):\n        raise IndexError(\"Index out of range\")\n    \n    return keys[n]"
    },
    {
        "id":80,
        "response":"def increasing_trend(lst):\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    \n    return True"
    },
    {
        "id":81,
        "response":"import re\nimport typing\nimport itertools\n\ndef smallest_Divisor(n):\n    if n <= 1:\n        return n\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    \n    return n"
    },
    {
        "id":82,
        "response":"import re\nimport typing\nimport itertools\n\ndef mul_list(lst1, lst2):\n    return list(map(lambda x, y: x * y, lst1, lst2))"
    },
    {
        "id":83,
        "response":"```python\nimport math\n\ndef sum_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        for j in range(int(math.sqrt(n)) + 1):\n            if i*i + j*j == n:\n                return True\n    return False\n```"
    },
    {
        "id":84,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_Char(s: str, s2: str) -> int:\n    if not s or not s2:\n        return 0\n    \n    if len(s2) > 1:\n        return 0\n    \n    count = s.count(s2)\n    return count"
    },
    {
        "id":85,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    \n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    \n    return sum(num for num in range(2, n+1) if primes[num])"
    },
    {
        "id":86,
        "response":"from collections import Counter\n\ndef freq_element(lst):\n    return dict(Counter(lst))"
    },
    {
        "id":87,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef recur_gcd(n1: int, n2: int) -> int:\n    if n2 == 0:\n        return abs(n1)\n    return recur_gcd(n2, n1 % n2)"
    },
    {
        "id":88,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef len_complex(n, n2):\n    return math.sqrt(n**2 + n2**2)\n```"
    },
    {
        "id":89,
        "response":"```python\nimport sys\nfrom typing import List\n\ndef min_jumps(arr: List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    \n    if arr[0] == 0:\n        return float('inf')\n    \n    max_reach = arr[0]\n    steps_left = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        \n        max_reach = max(max_reach, i + arr[i])\n        steps_left -= 1\n        \n        if steps_left == 0:\n            jumps += 1\n            \n            if i >= max_reach:\n                return float('inf')\n            \n            steps_left = max_reach - i\n    \n    return float('inf')\n```"
    },
    {
        "id":90,
        "response":"import re\nimport typing\nimport itertools\n\ndef mul_consecutive_nums(lst):\n    if len(lst) <= 1:\n        return []\n    \n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] * lst[i + 1])\n    \n    return result"
    },
    {
        "id":91,
        "response":"```python\nfrom typing import List, Tuple, Dict\n\ndef group_element(lst: List[Tuple[int, str]]) -> Dict[str, List[int]]:\n    result = {}\n    for first, second in lst:\n        if second not in result:\n            result[second] = []\n        result[second].append(first)\n    return result\n```"
    },
    {
        "id":92,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef last_Two_Digits(n):\n    if n == 0:\n        return 1\n    \n    result = 1\n    for i in range(1, n + 1):\n        result = (result * i) % 100\n    \n    return result"
    },
    {
        "id":93,
        "response":"import re\n\ndef remove_multiple_spaces(s: str) -> str:\n    return re.sub(r'\\s+', ' ', s)"
    },
    {
        "id":94,
        "response":"```python\ndef extract_unique(dct):\n    unique_values = set()\n    for values in dct.values():\n        unique_values.update(values)\n    return unique_values\n```"
    },
    {
        "id":95,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_greater(tup1: typing.Tuple[int, ...], tup2: typing.Tuple[int, ...]) -> bool:\n    if len(tup1) != len(tup2):\n        return False\n    \n    return all(t2 > t1 for t1, t2 in zip(tup1, tup2))"
    },
    {
        "id":96,
        "response":"import re\nimport typing\nimport itertools\n\ndef zip_list(lst1: typing.List, lst2: typing.List) -> typing.List:\n    return lst1 + lst2"
    },
    {
        "id":97,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_even(lst):\n    return len(list(filter(lambda x: x % 2 == 0, lst)))"
    },
    {
        "id":98,
        "response":"import re\nimport typing\nimport itertools\n\ndef sort_dict_item(dct):\n    return sorted(dct.keys(), key=lambda x: x[0] * x[1], reverse=True)"
    },
    {
        "id":99,
        "response":"import re\nimport typing\nimport itertools\n\ndef min_Swaps(s1: str, s2: str) -> int:\n    if len(s1) != len(s2):\n        return -1\n    \n    swaps = 0\n    mismatched_ones = []\n    mismatched_zeros = []\n    \n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if s1[i] == '1':\n                mismatched_ones.append(i)\n            else:\n                mismatched_zeros.append(i)\n    \n    if len(mismatched_ones) != len(mismatched_zeros):\n        return -1\n    \n    return len(mismatched_ones) \/\/ 2"
    },
    {
        "id":100,
        "response":"def count_range_in_list(lst, n, n2):\n    return sum(1 for num in lst if n <= num <= n2)"
    },
    {
        "id":101,
        "response":"import re\nimport typing\nimport itertools\n\ndef equilibrium_index(lst: list[int]) -> int:\n    total_sum = sum(lst)\n    left_sum = 0\n    \n    for i in range(len(lst)):\n        right_sum = total_sum - left_sum - lst[i]\n        \n        if left_sum == right_sum:\n            return i\n        \n        left_sum += lst[i]\n    \n    return -1"
    },
    {
        "id":102,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef removals(arr, n, k):\n    arr.sort()\n    min_removals = n\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] - arr[i] <= k:\n                min_removals = min(min_removals, n - (j - i + 1))\n    \n    return min_removals\n```"
    },
    {
        "id":103,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_key_present(dct: dict, n: str) -> bool:\n    return n in dct"
    },
    {
        "id":104,
        "response":"import re\nimport typing\nimport itertools\n\ndef harmonic_sum(n):\n    if n <= 1:\n        return 0\n    \n    total = 0\n    for i in range(2, n + 1):\n        total += 1 \/ i\n    \n    return round(total, 6)"
    },
    {
        "id":105,
        "response":"```python\nfrom typing import List, Any\n\ndef sort_sublists(lst: List[List[Any]]) -> List[List[Any]]:\n    return sorted(lst, key=lambda x: (len(x), x))\n```"
    },
    {
        "id":106,
        "response":"def is_subset(lst1, n1, lst2, n2):\n    if n2 == 0:\n        return True\n    if n1 == 0:\n        return False\n    \n    set1 = set(lst1)\n    set2 = set(lst2)\n    \n    return set2.issubset(set1)"
    },
    {
        "id":107,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    \n    total_set_bits = 0\n    for num in range(1, n + 1):\n        total_set_bits += bin(num).count('1')\n    \n    return total_set_bits"
    },
    {
        "id":108,
        "response":"import re\nimport typing\nimport itertools\n\ndef Convert(s: str) -> typing.List[str]:\n    return list(s)"
    },
    {
        "id":109,
        "response":"```python\ndef get_unique(lst):\n    unique_dict = {}\n    counter = 1\n    for item in lst:\n        if item not in unique_dict:\n            unique_dict[item] = counter\n            counter += 1\n    return unique_dict\n```"
    },
    {
        "id":110,
        "response":"import re\nimport typing\nimport itertools\n\ndef front_and_rear(tup):\n    return (tup[0], tup[-1])"
    },
    {
        "id":111,
        "response":"import re\nimport typing\nimport itertools\n\ndef product_Equal(n: int) -> bool:\n    digits = [int(d) for d in str(n)]\n    even_product = 1\n    odd_product = 1\n    \n    for i in range(len(digits)):\n        if i % 2 == 0:\n            even_product *= digits[i]\n        else:\n            odd_product *= digits[i]\n    \n    return even_product == odd_product"
    },
    {
        "id":112,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_duplicate(lst):\n    return list(dict.fromkeys(lst))"
    },
    {
        "id":113,
        "response":"```python\nimport math\n\ndef check_valid(tup):\n    if not isinstance(tup, tuple) or len(tup) != 3:\n        return False\n    \n    for item in tup:\n        if not isinstance(item, int) or item <= 0 or math.isinf(item):\n            return False\n    \n    return True\n```"
    },
    {
        "id":114,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef count_Fac(n):\n    if n <= 1:\n        return 0\n    \n    distinct_powers = set()\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            power = 0\n            while n % i == 0:\n                n \/\/= i\n                power += 1\n            distinct_powers.add(power)\n    \n    if n > 1:\n        distinct_powers.add(1)\n    \n    return len(distinct_powers)"
    },
    {
        "id":115,
        "response":"import re\nimport typing\nimport itertools\n\ndef str_to_tuple(s: str) -> typing.Tuple[int, ...]:\n    if not s:\n        return ()\n    return tuple(int(x.strip()) for x in s.split(','))"
    },
    {
        "id":116,
        "response":"import re\nimport typing\nimport itertools\n\ndef rhombus_perimeter(side_length):\n    if side_length <= 0:\n        return 0\n    return 4 * side_length"
    },
    {
        "id":117,
        "response":"```python\nimport math\n\ndef sd_calc(lst):\n    if len(lst) <= 1:\n        return 0\n    \n    mean = sum(lst) \/ len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) \/ len(lst)\n    \n    return math.sqrt(variance)\n```"
    },
    {
        "id":118,
        "response":"import re\nimport typing\nimport itertools\n\ndef alternate_elements(lst):\n    return lst[::2]"
    },
    {
        "id":119,
        "response":"```python\nimport re\n\ndef text_match(s: str) -> bool:\n    return bool(re.match(r'^b*a$', s))\n```"
    },
    {
        "id":120,
        "response":"```python\ndef add_dict_to_tuple(tup, dct):\n    result = list(tup)\n    for key, value in dct.items():\n        result.extend([key, value])\n    return tuple(result)\n```"
    },
    {
        "id":121,
        "response":"```python\nimport sys\nfrom typing import List\n\ndef maxAverageOfPath(matrix: List[List[int]], n: int) -> float:\n    if n == 1:\n        return matrix[0][0]\n    \n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    path_length = 2 * n - 1\n    max_path_sum = dp[n-1][n-1]\n    \n    return round(max_path_sum \/ path_length, 2)\n```"
    },
    {
        "id":122,
        "response":"```python\ndef filter_data(dct, n, n2):\n    return {k: v for k, v in dct.items() if v[0] >= n and v[1] >= n2}\n```"
    },
    {
        "id":123,
        "response":"from typing import List\n\ndef count_same_pair(lst1: List[int], lst2: List[int]) -> int:\n    return sum(map(lambda x, y: x == y, lst1, lst2))"
    },
    {
        "id":124,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum"
    },
    {
        "id":125,
        "response":"import re\nfrom typing import List\n\ndef extract_quotation(s: str) -> List[str]:\n    return re.findall(r\"['\\\"](.*?)['\\\"]\", s)"
    },
    {
        "id":126,
        "response":"import itertools\n\ndef multiply_elements(tup):\n    return [tup[i] * tup[i+1] for i in range(len(tup)-1)]"
    },
    {
        "id":127,
        "response":"import re\n\ndef remove_char(s: str) -> str:\n    return re.sub(r'[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":128,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sum_list(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return []\n    \n    return [a + b for a, b in zip(lst1, lst2)]\n```"
    },
    {
        "id":129,
        "response":"import re\nimport typing\nimport itertools\n\ndef add_list(lst1, lst2):\n    return list(map(lambda x, y: x + y, lst1, lst2))"
    },
    {
        "id":130,
        "response":"```python\ndef consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    \n    return result\n```"
    },
    {
        "id":131,
        "response":"```python\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)\n```"
    },
    {
        "id":132,
        "response":"import re\n\ndef replace_specialchar(s):\n    return re.sub(r'[ ,.]', ':', s)"
    },
    {
        "id":133,
        "response":"```python\ndef find_first_occurrence(lst, n):\n    left, right = 0, len(lst) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) \/\/ 2\n\n        if mid < len(lst) and lst[mid] == n:\n            result = mid\n            right = mid - 1\n        elif mid < len(lst) and lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n```"
    },
    {
        "id":134,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef sum_Of_Subarray_Prod(lst, n):\n    if not lst:\n        return 0\n    \n    total_sum = 0\n    \n    for start in range(n):\n        prod = 1\n        for end in range(start, n):\n            prod *= lst[end]\n            total_sum += prod\n    \n    return total_sum\n```"
    },
    {
        "id":135,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef toggle_middle_bits(n):\n    if n == 0:\n        return 0\n    \n    num_bits = n.bit_length()\n    \n    if num_bits <= 2:\n        return n\n    \n    mask = ((1 << (num_bits - 2)) - 1) << 1\n    \n    return n ^ mask\n```"
    },
    {
        "id":136,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef left_insertion(lst, n):\n    left, right = 0, len(lst)\n    \n    while left < right:\n        mid = (left + right) \/\/ 2\n        \n        if lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left\n```"
    },
    {
        "id":137,
        "response":"```python\nimport re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match(r'^[aeiouAEIOU]', s))\n```"
    },
    {
        "id":138,
        "response":"import re\nimport typing\nimport itertools\n\ndef geometric_sum(n: int) -> float:\n    if n < 1:\n        return 0\n    \n    result = 0\n    for i in range(n):\n        result += 1 \/ (2 ** i)\n    \n    return result"
    },
    {
        "id":139,
        "response":"import math\n\ndef find_Index(n):\n    index = 1\n    while True:\n        triangular_num = (index * (index + 1)) \/\/ 2\n        if len(str(triangular_num)) == n:\n            return index\n        index += 1"
    },
    {
        "id":140,
        "response":"```python\ndef tuple_to_dict(tup):\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even number of elements\")\n    return dict(zip(tup[::2], tup[1::2]))\n```"
    },
    {
        "id":141,
        "response":"```python\ndef all_Characters_Same(s):\n    return len(set(s)) <= 1\n```"
    },
    {
        "id":142,
        "response":"```python\nimport math\n\ndef area_tetrahedron(n):\n    return round((math.sqrt(2) * (n ** 2)), 3)\n```"
    },
    {
        "id":143,
        "response":"import re\nimport typing\nimport itertools\n\ndef rotate_right(lst, n):\n    if not lst:\n        return lst\n    \n    length = len(lst)\n    rotate_amount = n % length\n    \n    if rotate_amount == 0:\n        return lst\n    \n    return lst[-rotate_amount:] + lst[:-rotate_amount]"
    },
    {
        "id":144,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_none(tup):\n    return any(x is None for x in tup)"
    },
    {
        "id":145,
        "response":"```python\ndef divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n```"
    },
    {
        "id":146,
        "response":"```python\nimport math\n\ndef sector_area(r, angle):\n    return (angle \/ 360) * math.pi * r ** 2\n```"
    },
    {
        "id":147,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef lcs_of_three(s1: str, s2: str, s3: str, n1: int = None, n2: int = None, n3: int = None) -> str:\n    if not s1 or not s2 or not s3:\n        return \"\"\n    \n    n1, n2, n3 = len(s1), len(s2), len(s3)\n    dp = [[[0 for _ in range(n3 + 1)] for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n    \n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            for k in range(1, n3 + 1):\n                if s1[i-1] == s2[j-1] == s3[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    lcs = []\n    i, j, k = n1, n2, n3\n    while i > 0 and j > 0 and k > 0:\n        if s1[i-1] == s2[j-1] == s3[k-1]:\n            lcs.append(s1[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] >= dp[i][j-1][k] and dp[i-1][j][k] >= dp[i][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] >= dp[i-1][j][k] and dp[i][j-1][k] >= dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return ''.join(reversed(lcs))\n```"
    },
    {
        "id":148,
        "response":"import re\n\ndef capital_words_spaces(s):\n    if not s:\n        return s\n    result = s[0]\n    for char in s[1:]:\n        if char.isupper():\n            result += ' ' + char\n        else:\n            result += char\n    return result"
    },
    {
        "id":149,
        "response":"```python\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=int)\n```"
    },
    {
        "id":150,
        "response":"import re\nimport typing\nimport itertools\n\ndef add_tuple(lst, tup):\n    return lst + list(tup)"
    },
    {
        "id":151,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_min_heap(lst, n):\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        \n        if left_child < n and lst[left_child] < lst[i]:\n            return False\n        \n        if right_child < n and lst[right_child] < lst[i]:\n            return False\n    \n    return True"
    },
    {
        "id":152,
        "response":"import re\nimport typing\nimport itertools\n\ndef jacobsthal_num(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    \n    return b"
    },
    {
        "id":153,
        "response":"```python\nimport typing\nimport itertools\nimport re\n\ndef min_k(lst: typing.List[typing.Tuple[int, str]], k: int) -> typing.List[typing.Tuple[int, str]]:\n    if k == 0 or not lst:\n        return []\n    \n    sorted_lst = sorted(lst, key=lambda x: x[0])\n    return sorted_lst[:k]\n```"
    },
    {
        "id":154,
        "response":"import re\nimport typing\nimport itertools\n\ndef extract_index_list(lst1: typing.List[int], lst2: typing.List[int], lst3: typing.List[int]) -> typing.List[int]:\n    if not lst1 or not lst2 or not lst3:\n        return []\n    \n    common_indices = [\n        index for index in range(len(lst1))\n        if len(set([lst1[index], lst2[index], lst3[index]])) == 1\n    ]\n    \n    return common_indices"
    },
    {
        "id":155,
        "response":"import re\nimport typing\nimport itertools\n\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    unique_sorted = sorted(set(lst))\n    \n    if len(unique_sorted) < 2:\n        return unique_sorted[0]\n    \n    return unique_sorted[1]"
    },
    {
        "id":156,
        "response":"import re\n\ndef text_match_zero_one(s):\n    return bool(re.search(r'[0b]', s))"
    },
    {
        "id":157,
        "response":"```python\ndef count_reverse_pairs(lst):\n    reverse_count = 0\n    used_indices = set()\n    \n    for i in range(len(lst)):\n        if i in used_indices:\n            continue\n        \n        for j in range(i + 1, len(lst)):\n            if j in used_indices:\n                continue\n            \n            if lst[i] == lst[j][::-1]:\n                reverse_count += 1\n                used_indices.add(i)\n                used_indices.add(j)\n                break\n    \n    return reverse_count\n```"
    },
    {
        "id":158,
        "response":"from typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    return len(set(tuple(sublist) for sublist in lst))"
    },
    {
        "id":159,
        "response":"```python\nimport re\n\ndef is_decimal(s: str) -> bool:\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":160,
        "response":"import re\nimport typing\nimport itertools\n\ndef unique_Element(lst: typing.List[int], n: int) -> bool:\n    if n == 0:\n        return True\n    \n    if n == 1:\n        return True\n    \n    first_element = lst[0]\n    \n    for num in lst[1:]:\n        if num != first_element:\n            return False\n    \n    return True"
    },
    {
        "id":161,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef arc_length(angle: float, radius: float) -> float:\n    if angle < 0 or radius < 0:\n        return 0\n    return angle * radius"
    },
    {
        "id":162,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_monthnumber_number(n: int) -> bool:\n    return n in [4, 6, 9, 11]"
    },
    {
        "id":163,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef find_Min_Diff(arr, n):\n    if n < 2:\n        return 0\n    \n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n```"
    },
    {
        "id":164,
        "response":"import re\n\ndef number_ctr(s):\n    nums = re.findall(r'\\d', s)\n    return sum(int(num) for num in nums)"
    },
    {
        "id":165,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef is_polite(n):\n    polite_count = 0\n    current_num = 2\n    \n    while polite_count < n:\n        if is_polite_number(current_num):\n            polite_count += 1\n            if polite_count == n:\n                return current_num\n        current_num += 2\n    \ndef is_polite_number(num):\n    for k in range(2, num):\n        sum_of_consecutive = 0\n        start = 1\n        while sum_of_consecutive < num:\n            consecutive_sum = sum(range(start, start + k))\n            if consecutive_sum == num:\n                return True\n            elif consecutive_sum > num:\n                break\n            start += 1\n    return False"
    },
    {
        "id":166,
        "response":"from typing import List, Tuple, Any\n\ndef pair_wise(lst: List[Any]) -> List[Tuple[Any, Any]]:\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "id":167,
        "response":"import re\nimport typing\nimport itertools\n\ndef get_Pairs_Count(lst, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] + lst[j] == sum:\n                count += 1\n    return count"
    },
    {
        "id":168,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef check_Odd_Parity(n: int) -> bool:\n    binary = bin(n)[2:]\n    count_ones = binary.count('1')\n    return count_ones % 2 != 0"
    },
    {
        "id":169,
        "response":"import re\nimport typing\nimport itertools\n\ndef Diff(lst, lst2):\n    return list(set(lst + lst2) - set(lst) - set(lst2))"
    },
    {
        "id":170,
        "response":"import re\nimport typing\nimport itertools\n\ndef odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    \n    return total_sum"
    },
    {
        "id":171,
        "response":"```python\ndef check_expression(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack[-1] != mapping[char]:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n```"
    },
    {
        "id":172,
        "response":"import re\n\ndef remove_length(s: str, k: int) -> str:\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return \" \".join(filtered_words)"
    },
    {
        "id":173,
        "response":"import re\n\ndef occurance_substring(s, s2):\n    result = []\n    start = 0\n    while True:\n        index = s.find(s2, start)\n        if index == -1:\n            break\n        result.append((index, index + len(s2)))\n        start = index + 1\n    return result"
    },
    {
        "id":174,
        "response":"```python\nimport re\n\ndef check_email(s):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":175,
        "response":"import re\nimport typing\nimport itertools\nimport math\nimport sys\n\ndef odd_position(lst):\n    if not lst:\n        return True\n    \n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    \n    return True"
    },
    {
        "id":176,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_vowels(s: str) -> int:\n    vowels = set('aeiou')\n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] not in vowels:\n            left_vowel = i > 0 and s[i-1] in vowels\n            right_vowel = i < len(s)-1 and s[i+1] in vowels\n            \n            if left_vowel or right_vowel:\n                count += 1\n    \n    return count"
    },
    {
        "id":177,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_Sum(lst, n):\n    if not lst:\n        return 0\n    \n    unique_elements = set(lst)\n    return sum(unique_elements)\n```"
    },
    {
        "id":178,
        "response":"from typing import List\n\ndef pack_consecutive_duplicates(lst: List) -> List[List]:\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for item in lst[1:]:\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            result.append(current_sublist)\n            current_sublist = [item]\n    \n    result.append(current_sublist)\n    return result"
    },
    {
        "id":179,
        "response":"from typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    return len(set(tuple(sublist) for sublist in lst))"
    },
    {
        "id":180,
        "response":"```python\nimport itertools\n\ndef find_combinations(lst):\n    if not lst:\n        return []\n    \n    result = list(lst)\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for a in lst[i]:\n                for b in lst[j]:\n                    new_tuple = (a, b)\n                    if new_tuple not in result:\n                        result.append(new_tuple)\n    \n    return result\n```"
    },
    {
        "id":181,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef count_Divisors(n):\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "id":182,
        "response":"import re\nimport typing\nimport itertools\n\ndef Odd_Length_Sum(lst):\n    if not lst:\n        return 0\n    \n    total_sum = 0\n    n = len(lst)\n    \n    for start in range(n):\n        for length in range(1, n - start + 1, 2):\n            sub_arr = lst[start:start+length]\n            total_sum += sum(sub_arr)\n    \n    return total_sum"
    },
    {
        "id":183,
        "response":"import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r\/255.0, g\/255.0, b\/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    diff = mx - mn\n    \n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) \/ diff) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) \/ diff) + 120) % 360\n    else:\n        h = (60 * ((r - g) \/ diff) + 240) % 360\n    \n    if mx == 0:\n        s = 0\n    else:\n        s = (diff \/ mx) * 100\n    \n    v = mx * 100\n    \n    return (round(h), round(s), round(v))"
    },
    {
        "id":184,
        "response":"import re\nimport typing\nimport itertools\n\ndef mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            return first_even * first_odd\n    \n    return None"
    },
    {
        "id":185,
        "response":"import re\nimport ast\n\ndef tuple_str_int(s):\n    if s.strip() == '()':\n        return ()\n    \n    try:\n        parsed_tuple = ast.literal_eval(s)\n        return tuple(int(x) for x in parsed_tuple) if isinstance(parsed_tuple, (tuple, list)) else (parsed_tuple,)\n    except (ValueError, SyntaxError):\n        return ()"
    },
    {
        "id":186,
        "response":"import re\nimport typing\nimport itertools\n\ndef right_insertion(lst, n):\n    left, right = 0, len(lst)\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if mid < len(lst) and lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "id":187,
        "response":"```python\nimport re\n\ndef text_match_three(text):\n    return bool(re.search(r'a[b]{3}', text))\n```"
    },
    {
        "id":188,
        "response":"def new_tuple(lst, s):\n    return tuple(lst + [s])"
    },
    {
        "id":189,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef perimeter_polygon(n: int, side_length: int) -> int:\n    if n < 3 or side_length <= 0:\n        return 0\n    return n * side_length"
    },
    {
        "id":190,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"
    },
    {
        "id":191,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))"
    },
    {
        "id":192,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_list(lst):\n    return sum(1 for item in lst if isinstance(item, list))"
    },
    {
        "id":193,
        "response":"import re\nimport typing\nimport itertools\n\ndef last(lst, n, x):\n    left, right = 0, n - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) \/\/ 2\n\n        if lst[mid] == x:\n            result = mid\n            left = mid + 1\n        elif lst[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "id":194,
        "response":"import re\n\ndef text_starta_endb(s: str) -> bool:\n    pattern = r'^a[^a]*b$'\n    return bool(re.match(pattern, s))"
    },
    {
        "id":195,
        "response":"```python\nimport typing\nimport itertools\nimport re\n\ndef cheap_items(lst: typing.List[int], n: int) -> typing.List[int]:\n    return sorted(lst)[:n]\n```"
    },
    {
        "id":196,
        "response":"import re\nimport typing\nimport itertools\n\ndef return_sum(dct):\n    return sum(dct.values())"
    },
    {
        "id":197,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_in_Range(l: int, r: int) -> int:\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total"
    },
    {
        "id":198,
        "response":"import re\nimport typing\nimport itertools\nimport statistics\nimport math\nimport sys\n\ndef _sum(lst):\n    return sum(lst)"
    },
    {
        "id":199,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef left_Rotate(n, d):\n    if n == 0:\n        return 0\n    \n    bits = 32\n    mask = (1 << bits) - 1\n    \n    d = d % bits\n    \n    left_shift = (n << d) & mask\n    right_shift = n >> (bits - d)\n    \n    return left_shift | right_shift\n```"
    },
    {
        "id":200,
        "response":"import re\n\ndef remove_all_spaces(s: str) -> str:\n    return s.replace(\" \", \"\")"
    },
    {
        "id":201,
        "response":"import typing\nimport itertools\nimport re\n\ndef test_three_equal(n: int, n2: int, n3: int) -> int:\n    numbers = [n, n2, n3]\n    unique_count = len(set(numbers))\n    \n    if unique_count == 1:\n        return 3\n    elif unique_count == 2:\n        return 2\n    else:\n        return 0"
    },
    {
        "id":202,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_Rotation(lst, n):\n    if n <= 1:\n        return 0\n    \n    for i in range(n):\n        if i > 0 and lst[i] < lst[i-1]:\n            return i\n    \n    return 0"
    },
    {
        "id":203,
        "response":"```python\nimport math\n\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    \n    root = int(math.sqrt(n))\n    return root * root == n\n```"
    },
    {
        "id":204,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_Product_Even(lst: list, n: int) -> bool:\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product % 2 == 0"
    },
    {
        "id":205,
        "response":"```python\ndef max_sum_list(lst):\n    if not lst:\n        return []\n    \n    max_sum = float('-inf')\n    max_lists = []\n    \n    for sublist in lst:\n        current_sum = sum(sublist)\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lists = [sublist]\n        elif current_sum == max_sum:\n            max_lists.append(sublist)\n    \n    return max_lists\n```"
    },
    {
        "id":206,
        "response":"```python\ndef max_run_uppercase(s):\n    if not s:\n        return 0\n    \n    max_count = 0\n    current_count = 0\n    \n    for char in s:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    \n    return max_count\n```"
    },
    {
        "id":207,
        "response":"import re\nimport typing\nimport itertools\n\ndef first_odd(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None"
    },
    {
        "id":208,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_K(tup, n):\n    return any(n in t for t in tup)"
    },
    {
        "id":209,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_smaller(tup: tuple, tup2: tuple) -> bool:\n    if len(tup) != len(tup2):\n        return False\n    return all(t2 < t1 for t1, t2 in zip(tup, tup2))"
    },
    {
        "id":210,
        "response":"import typing\nimport itertools\nimport re\n\ndef count_variable(*args):\n    return len(args)"
    },
    {
        "id":211,
        "response":"```python\nfrom typing import List, Tuple\n\ndef check_identical(lst1: List[Tuple[int, int]], lst2: List[Tuple[int, int]]) -> bool:\n    if len(lst1) != len(lst2):\n        return False\n    \n    return sorted(lst1) == sorted(lst2)\n```"
    },
    {
        "id":212,
        "response":"import re\n\ndef road_rd(s):\n    return re.sub(r'\\broad\\b', 'rd.', s)"
    },
    {
        "id":213,
        "response":"import re\nimport typing\nimport itertools\n\ndef string_length(s: str) -> int:\n    return len(s)"
    },
    {
        "id":214,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef rhombus_area(d1, d2):\n    return 0.5 * d1 * d2"
    },
    {
        "id":215,
        "response":"```python\ndef sort_by_dnf(lst, n):\n    low = 0\n    mid = 0\n    high = n - 1\n\n    while mid <= high:\n        if lst[mid] == 0:\n            lst[low], lst[mid] = lst[mid], lst[low]\n            low += 1\n            mid += 1\n        elif lst[mid] == 1:\n            mid += 1\n        else:\n            lst[mid], lst[high] = lst[high], lst[mid]\n            high -= 1\n\n    return lst\n```"
    },
    {
        "id":216,
        "response":"def clear_tuple(tup):\n    return ()"
    },
    {
        "id":217,
        "response":"import re\nimport typing\nimport itertools\nfrom typing import List\n\ndef div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n    return list(filter(lambda x: x % m == 0 or x % n == 0, lst))"
    },
    {
        "id":218,
        "response":"import re\nimport typing\nimport itertools\n\ndef lower_ctr(s: str) -> int:\n    return sum(1 for char in s if char.islower())"
    },
    {
        "id":219,
        "response":"```python\ndef count_duplic(lst):\n    if not lst:\n        return {}\n    \n    result = {}\n    current = lst[0]\n    count = 1\n    \n    for num in lst[1:]:\n        if num == current:\n            count += 1\n        else:\n            if count > 1:\n                result[current] = count\n            current = num\n            count = 1\n    \n    if count > 1:\n        result[current] = count\n    \n    return result\n```"
    },
    {
        "id":220,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef check_monthnum_number(n: int) -> bool:\n    return n == 2\n```"
    },
    {
        "id":221,
        "response":"import re\nimport typing\nimport itertools\n\ndef merge_dictionaries(dct: dict, dct2: dict) -> dict:\n    merged = dct.copy()\n    merged.update(dct2)\n    return merged"
    },
    {
        "id":222,
        "response":"import re\n\ndef pass_validity(s):\n    if len(s) < 12:\n        return False\n    \n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n    has_special_char = False\n    \n    for char in s:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n        elif not char.isalnum():\n            has_special_char = True\n    \n    return has_uppercase and has_lowercase and has_digit and has_special_char"
    },
    {
        "id":223,
        "response":"```python\nimport re\n\ndef check_substring(s: str, substring: str) -> bool:\n    if not substring:\n        return True\n    return re.match(f\"^{re.escape(substring)}\", s) is not None\n```"
    },
    {
        "id":224,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_even(lst):\n    return [num for num in lst if num % 2 != 0]"
    },
    {
        "id":225,
        "response":"import re\nimport typing\nimport itertools\n\ndef access_elements(lst, lst2):\n    if not lst or not lst2:\n        return []\n    return [lst[index] for index in lst2 if 0 <= index < len(lst)]"
    },
    {
        "id":226,
        "response":"```python\nimport math\n\ndef check_Type_Of_Triangle(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return \"Not a Valid Triangle\"\n    \n    sides = sorted([n1, n2, n3])\n    \n    if sides[0] + sides[1] <= sides[2]:\n        return \"Not a Valid Triangle\"\n    \n    if n1 == n2 == n3:\n        return \"Equilateral Triangle\"\n    \n    if n1 == n2 or n2 == n3 or n1 == n3:\n        return \"Isosceles Triangle\"\n    \n    a_squared = sides[0]**2\n    b_squared = sides[1]**2\n    c_squared = sides[2]**2\n    \n    if abs(a_squared + b_squared - c_squared) < 1e-10:\n        return \"Right-angled Triangle\"\n    \n    return \"Scalene Triangle\"\n```"
    },
    {
        "id":227,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_column(lst, n):\n    if not lst:\n        return 0\n    return sum(row[n] for row in lst)"
    },
    {
        "id":228,
        "response":"import re\n\ndef count_alpha_dig_spl(s):\n    alphabets = sum(c.isalpha() for c in s)\n    digits = sum(c.isdigit() for c in s)\n    special_chars = len(s) - alphabets - digits\n    return (alphabets, digits, special_chars)"
    },
    {
        "id":229,
        "response":"```python\nfrom collections import Counter\n\ndef second_frequent(lst):\n    if not lst:\n        return None\n    \n    freq_count = Counter(lst)\n    \n    if len(freq_count) < 2:\n        return None\n    \n    sorted_freq = sorted(freq_count.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_freq[1][0]\n```"
    },
    {
        "id":230,
        "response":"import math\n\ndef round_up(number, precision):\n    multiplier = 10 ** precision\n    return math.ceil(number * multiplier) \/ multiplier"
    },
    {
        "id":231,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_Pairs(lst, n):\n    if n == 0:\n        return 0\n    \n    pair_count = 0\n    freq = {}\n    \n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for count in freq.values():\n        pair_count += (count * (count - 1)) \/\/ 2\n    \n    return pair_count"
    },
    {
        "id":232,
        "response":"import re\n\ndef extract_max(s: str):\n    numbers = re.findall(r'-?\\d+', s)\n    if not numbers:\n        return None\n    return max(map(int, numbers))"
    },
    {
        "id":233,
        "response":"import re\nimport typing\nimport itertools\n\ndef get_key(dct):\n    return list(dct.keys())"
    },
    {
        "id":234,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef generate_matrix(n):\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    num = 1\n    top, bottom, left, right = 0, n-1, 0, n-1\n\n    while top <= bottom and left <= right:\n        for col in range(left, right+1):\n            matrix[top][col] = num**2\n            num += 1\n        top += 1\n\n        for row in range(top, bottom+1):\n            matrix[row][right] = num**2\n            num += 1\n        right -= 1\n\n        if top <= bottom:\n            for col in range(right, left-1, -1):\n                matrix[bottom][col] = num**2\n                num += 1\n            bottom -= 1\n\n        if left <= right:\n            for row in range(bottom, top-1, -1):\n                matrix[row][left] = num**2\n                num += 1\n            left += 1\n\n    return matrix\n```"
    },
    {
        "id":235,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef slope(n, n2, n3, n4):\n    if n == n3:\n        return float('inf') if n2 != n4 else 0\n    return (n4 - n2) \/ (n3 - n)"
    },
    {
        "id":236,
        "response":"import re\nimport typing\nimport itertools\n\ndef max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    max_length = 0\n    current_start = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = current_start\n            max_length = i - current_start + 1\n\n        if current_sum < 0:\n            current_sum = 0\n            current_start = i + 1\n\n    return max_length"
    },
    {
        "id":237,
        "response":"import re\nimport typing\nimport itertools\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum"
    },
    {
        "id":238,
        "response":"import re\nimport typing\nimport itertools\n\ndef min_Swaps(s1: str, s2: str) -> int:\n    if len(s1) != len(s2):\n        return -1\n    \n    mismatched_zero = 0\n    mismatched_one = 0\n    \n    for c1, c2 in zip(s1, s2):\n        if c1 != c2:\n            if c1 == '0':\n                mismatched_zero += 1\n            else:\n                mismatched_one += 1\n    \n    if (mismatched_zero + mismatched_one) % 2 != 0:\n        return -1\n    \n    return (mismatched_zero + 1) \/\/ 2"
    },
    {
        "id":239,
        "response":"```python\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[0])\n```"
    },
    {
        "id":240,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef Check_Solution(n, n2, n3):\n    if n == 0:\n        return False\n    \n    discriminant = n2 * n2 - 4 * n * n3\n    \n    if discriminant < 0:\n        return False\n    \n    root1 = (-n2 + math.sqrt(discriminant)) \/ (2 * n)\n    root2 = (-n2 - math.sqrt(discriminant)) \/ (2 * n)\n    \n    return abs(root1) == abs(root2) and root1 * root2 < 0\n```"
    },
    {
        "id":241,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "id":242,
        "response":"```python\ndef get_odd_occurrence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result\n```"
    },
    {
        "id":243,
        "response":"```python\nimport heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n <= 0:\n        return 0\n    \n    ugly = [1]\n    heap = []\n    for i, prime in enumerate(primes):\n        heapq.heappush(heap, (prime, prime, 0))\n    \n    while len(ugly) < n:\n        next_ugly, prime, idx = heapq.heappop(heap)\n        \n        if next_ugly != ugly[-1]:\n            ugly.append(next_ugly)\n        \n        heapq.heappush(heap, (prime * ugly[idx + 1], prime, idx + 1))\n    \n    return ugly[-1]\n```"
    },
    {
        "id":244,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef get_Number(n, k):\n    odd_elements = [x for x in range(1, n+1) if x % 2 != 0]\n    even_elements = [x for x in range(1, n+1) if x % 2 == 0]\n    \n    combined_array = odd_elements + even_elements\n    \n    if k <= 0 or k > len(combined_array):\n        return None\n    \n    return combined_array[k-1]\n```"
    },
    {
        "id":245,
        "response":"```python\nimport math\n\ndef find_Digits(n):\n    if n <= 0:\n        return 0\n    \n    factorial = math.factorial(n)\n    count = 0\n    \n    while factorial > 0:\n        if factorial % 10 == 0:\n            count += 1\n            factorial \/\/= 10\n        else:\n            break\n    \n    return count\n```"
    },
    {
        "id":246,
        "response":"import re\nimport typing\nimport itertools\n\ndef find_platform(arr, dep, n):\n    if not arr or not dep or n <= 0:\n        return 0\n    \n    arr.sort()\n    dep.sort()\n    \n    platforms_needed = 1\n    max_platforms = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            platforms_needed += 1\n            i += 1\n        else:\n            platforms_needed -= 1\n            j += 1\n        \n        max_platforms = max(max_platforms, platforms_needed)\n    \n    return max_platforms"
    },
    {
        "id":247,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef lcopy(lst):\n    return lst.copy()"
    },
    {
        "id":248,
        "response":"import re\nimport typing\nimport itertools\n\ndef area_trapezium(n, n2, n3):\n    return 0.5 * (n + n2) * n3"
    },
    {
        "id":249,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef Sum(n):\n    if n <= 0:\n        return 0\n    \n    divisor_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_sum += i\n    \n    return divisor_sum"
    },
    {
        "id":250,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_triangleexists(angle1: int, angle2: int, angle3: int) -> bool:\n    if angle1 <= 0 or angle2 <= 0 or angle3 <= 0:\n        return False\n    \n    if angle1 + angle2 + angle3 == 180 and angle1 > 0 and angle2 > 0 and angle3 > 0:\n        return True\n    \n    return False\n```"
    },
    {
        "id":251,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef Sum_of_Inverse_Divisors(n: int, n2: int) -> float:\n    if n <= 0 or n2 <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total_sum += 1 \/ i\n    \n    return round(total_sum, 3)"
    },
    {
        "id":252,
        "response":"import re\nimport typing\nimport itertools\n\ndef remove_negs(lst):\n    return [num for num in lst if num >= 0]"
    },
    {
        "id":253,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    \n    odd_factors_sum = 0\n    \n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 != 0:\n            odd_factors_sum += i\n    \n    return odd_factors_sum"
    },
    {
        "id":254,
        "response":"import heapq\n\ndef raw_heap(lst):\n    if not lst:\n        return []\n    \n    heap = lst.copy()\n    heapq.heapify(heap)\n    return heap"
    },
    {
        "id":255,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_Even_Parity(n: int) -> bool:\n    return n % 2 == 0"
    },
    {
        "id":256,
        "response":"import re\nimport typing\nimport itertools\n\ndef find_Min_Swaps(lst, n):\n    ones_count = sum(lst)\n    zeros_count = n - ones_count\n    \n    if ones_count == 0 or zeros_count == 0:\n        return 0\n    \n    min_swaps = float('inf')\n    \n    for window_start in range(n - ones_count + 1):\n        ones_in_window = sum(lst[window_start:window_start + ones_count])\n        swaps_needed = ones_count - ones_in_window\n        min_swaps = min(min_swaps, swaps_needed)\n    \n    return min_swaps"
    },
    {
        "id":257,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef listify_list(lst):\n    return list(map(list, lst))\n```"
    },
    {
        "id":258,
        "response":"def count_list(lst):\n    return len(lst)"
    },
    {
        "id":259,
        "response":"from itertools import combinations\n\ndef sub_lists(lst):\n    result = [[]]\n    for length in range(1, len(lst) + 1):\n        for combo in combinations(lst, length):\n            result.append(list(combo))\n    return result"
    },
    {
        "id":260,
        "response":"import re\n\ndef check_alphanumeric(s: str) -> bool:\n    if not s:\n        return False\n    return bool(re.match(r'^.*[a-zA-Z0-9]$', s))"
    },
    {
        "id":261,
        "response":"```python\nfrom typing import List\n\ndef anagram_lambda(lst: List[str], s: str) -> List[str]:\n    return list(filter(lambda x: sorted(x) == sorted(s), lst))\n```"
    },
    {
        "id":262,
        "response":"from collections import Counter\n\ndef n_common_words(s, n):\n    if not s:\n        return []\n    \n    words = s.split()\n    word_counts = Counter(words)\n    \n    return sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))[:n]"
    },
    {
        "id":263,
        "response":"```python\ndef find_longest_conseq_subseq(lst, n):\n    if not lst:\n        return 0\n    \n    num_set = set(lst)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length\n```"
    },
    {
        "id":264,
        "response":"import re\nimport typing\nimport itertools\n\ndef palindrome_lambda(lst):\n    return list(filter(lambda x: str(x) == str(x)[::-1], lst))"
    },
    {
        "id":265,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef ntimes_list(lst, n):\n    return list(itertools.chain.from_iterable(itertools.repeat(lst, n)))\n```"
    },
    {
        "id":266,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_monthnumb(s: str) -> bool:\n    months_with_31_days = [\n        \"January\", \"March\", \"May\", \"July\", \n        \"August\", \"October\", \"December\"\n    ]\n    return s in months_with_31_days"
    },
    {
        "id":267,
        "response":"import re\nimport typing\nimport itertools\n\ndef min_Num(lst, n):\n    total_sum = sum(lst)\n    if total_sum % 2 == 0:\n        return 0\n    else:\n        return 1"
    },
    {
        "id":268,
        "response":"import re\nimport typing\nimport itertools\n\ndef length_Of_Last_Word(s: str) -> int:\n    s = s.strip()\n    if not s:\n        return 0\n    words = s.split()\n    return len(words[-1])"
    },
    {
        "id":269,
        "response":"```python\ndef remove_list_range(lst, n1, n2):\n    return [x for x in lst if n1 <= x <= n2]\n```"
    },
    {
        "id":270,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_positivenum(lst):\n    return sum(filter(lambda x: x > 0, lst))"
    },
    {
        "id":271,
        "response":"```python\ndef are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    temp = s1 + s1\n    return s2 in temp\n```"
    },
    {
        "id":272,
        "response":"```python\ndef check_subset(lst, lst2):\n    if not lst:\n        return True\n    if not lst2:\n        return False\n    \n    set_lst = set(tuple(sublist) for sublist in lst)\n    set_lst2 = set(tuple(sublist) for sublist in lst2)\n    \n    return set_lst.issubset(set_lst2)\n```"
    },
    {
        "id":273,
        "response":"import re\nimport typing\nimport itertools\n\ndef fibonacci(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)"
    },
    {
        "id":274,
        "response":"```python\ndef check_Concat(s, s2):\n    if not s or not s2:\n        return False\n    \n    if len(s2) % len(s) != 0:\n        return False\n    \n    repetitions = len(s2) \/\/ len(s)\n    return s * repetitions == s2\n```"
    },
    {
        "id":275,
        "response":"import math\nimport itertools\nimport typing\nimport re\n\ndef min_difference(lst: typing.List[typing.Tuple[int, int]]) -> int:\n    if not lst:\n        return 0\n    \n    differences = [abs(x[0] - x[1]) for x in lst]\n    return min(differences)"
    },
    {
        "id":276,
        "response":"import math\n\ndef lcm(n, n2):\n    if n <= 0 or n2 <= 0:\n        raise ValueError(\"Both numbers must be positive integers\")\n    return abs(n * n2) \/\/ math.gcd(n, n2)"
    },
    {
        "id":277,
        "response":"import re\nimport typing\nimport itertools\n\ndef sort_String(s: str) -> str:\n    return ''.join(sorted(s, key=str.lower))"
    },
    {
        "id":278,
        "response":"```python\ndef check_tuples(tup, lst):\n    return set(tup) == set(lst) and len(tup) == len(lst)\n```"
    },
    {
        "id":279,
        "response":"```python\nimport re\n\ndef text_match(s: str) -> bool:\n    pattern = r'^a.+b$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":280,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        return 2\n    elif discriminant == 0:\n        return 1\n    else:\n        return 0\n```"
    },
    {
        "id":281,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_even_odd(lst):\n    if not lst:\n        return 0\n    \n    first_even = next((num for num in lst if num % 2 == 0), 0)\n    first_odd = next((num for num in lst if num % 2 != 0), 0)\n    \n    return first_even + first_odd"
    },
    {
        "id":282,
        "response":"import re\nimport typing\nimport itertools\n\ndef parallelogram_perimeter(n: int, n2: int) -> int:\n    return 2 * (n + n2)"
    },
    {
        "id":283,
        "response":"import re\nimport typing\nimport itertools\n\ndef div_of_nums(lst, m, n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, lst))"
    },
    {
        "id":284,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    mask = ((1 << (end - start + 1)) - 1) << (start - 1)\n    return (n & mask) == mask\n```"
    },
    {
        "id":285,
        "response":"```python\ndef is_Isomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    \n    s_to_t = {}\n    t_to_s = {}\n    \n    for c1, c2 in zip(s, t):\n        if c1 in s_to_t:\n            if s_to_t[c1] != c2:\n                return False\n        else:\n            if c2 in t_to_s:\n                return False\n            s_to_t[c1] = c2\n            t_to_s[c2] = c1\n    \n    return True\n```"
    },
    {
        "id":286,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport statistics\n\ndef sum_num(nums):\n    if not nums:\n        return None\n    return sum(nums) \/ len(nums)\n```"
    },
    {
        "id":287,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef is_odd(n: int) -> bool:\n    return bool(n & 1)"
    },
    {
        "id":288,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef substract_elements(tup1: tuple, tup2: tuple) -> tuple:\n    return tuple(a - b for a, b in zip(tup1, tup2))\n```"
    },
    {
        "id":289,
        "response":"def reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst]"
    },
    {
        "id":290,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef find_Extra(lst, lst2, n):\n    for i in range(n):\n        if i == n - 1:\n            return i\n        if lst[i] != lst2[i]:\n            return i\n```"
    },
    {
        "id":291,
        "response":"import re\nimport typing\nimport itertools\n\ndef same_Length(n1: int, n2: int) -> bool:\n    return len(str(abs(n1))) == len(str(abs(n2)))"
    },
    {
        "id":292,
        "response":"import re\n\ndef remove_spaces(s: str) -> str:\n    return re.sub(r'\\s+', ' ', s)"
    },
    {
        "id":293,
        "response":"import re\nimport typing\nimport itertools\n\ndef Extract(lst):\n    return [sublist[-1] if sublist else None for sublist in lst]"
    },
    {
        "id":294,
        "response":"import re\n\ndef float_to_tuple(s):\n    parts = s.split('.')\n    whole_num = int(parts[0])\n    decimal_part = int(parts[1].ljust(2, '0')[:2])\n    return (whole_num, decimal_part)"
    },
    {
        "id":295,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef max_sum_subseq(lst):\n    if not lst:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    \n    n = len(lst)\n    dp = [0] * n\n    dp[0] = lst[0]\n    dp[1] = max(lst[0], lst[1])\n    \n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i])\n    \n    return dp[n-1]"
    },
    {
        "id":296,
        "response":"import re\nimport typing\nimport itertools\n\ndef sort_list_last(lst):\n    return sorted(lst)"
    },
    {
        "id":297,
        "response":"import re\n\ndef is_Word_Present(s, s2):\n    if not s or not s2:\n        return False\n    \n    words = s.split()\n    return s2 in words"
    },
    {
        "id":298,
        "response":"```python\nfrom typing import List, Any\n\ndef extract_elements(lst: List[Any], n: int) -> List[List[Any]]:\n    if n <= 0 or len(lst) < n:\n        return []\n    \n    result = []\n    for i in range(len(lst) - n + 1):\n        result.append(lst[i:i+n])\n    \n    return result\n```"
    },
    {
        "id":299,
        "response":"import re\nimport typing\nimport itertools\n\ndef check(lst, n):\n    sorted_lst = sorted(lst)\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        if lst[left] == sorted_lst[left]:\n            left += 1\n        elif lst[right] == sorted_lst[left]:\n            lst[left], lst[right] = lst[right], lst[left]\n            left += 1\n            right -= 1\n        elif lst[left] == sorted_lst[right]:\n            lst[left], lst[right] = lst[right], lst[left]\n            left += 1\n            right -= 1\n        elif lst[right] == sorted_lst[right]:\n            right -= 1\n        else:\n            return False\n    \n    return True"
    },
    {
        "id":300,
        "response":"import re\n\ndef match_num(s: str) -> bool:\n    return bool(re.match(r'^\\d+', s))"
    },
    {
        "id":301,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef num_comm_div(n1: int, n2: int) -> int:\n    if n1 == 0:\n        return abs(n2)\n    if n2 == 0:\n        return abs(n1)\n    \n    return math.gcd(abs(n1), abs(n2))"
    },
    {
        "id":302,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef find(n, n2):\n    return n % n2"
    },
    {
        "id":303,
        "response":"```python\ndef add_consecutive_nums(lst):\n    if len(lst) <= 1:\n        return []\n    return [lst[i] + lst[i+1] for i in range(len(lst)-1)]\n```"
    },
    {
        "id":304,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_Of_Series(n):\n    if n < 0:\n        return 0\n    return sum(i**3 for i in range(1, n+1))"
    },
    {
        "id":305,
        "response":"import re\nimport typing\nimport itertools\n\ndef re_order(lst):\n    return [x for x in lst if x != 0]"
    },
    {
        "id":306,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport math\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    if k < 0 or k > n:\n        return 0\n    \n    if k == 0 or k == n:\n        return 1\n    \n    result = 1\n    for i in range(k):\n        result *= (n - i)\n    \n    return result\n```"
    },
    {
        "id":307,
        "response":"def remove_words(lst, lst2):\n    return [word for word in lst if word not in lst2]"
    },
    {
        "id":308,
        "response":"import re\nimport typing\nimport itertools\n\ndef same_order(lst1, lst2):\n    common_elements = [x for x in lst1 if x in lst2]\n    \n    if not common_elements:\n        return True\n    \n    indices1 = [lst1.index(x) for x in common_elements]\n    indices2 = [lst2.index(x) for x in common_elements]\n    \n    return indices1 == sorted(indices2)"
    },
    {
        "id":309,
        "response":"import re\nimport typing\nimport itertools\n\ndef average_Odd(n):\n    if n <= 0 or n % 2 == 0:\n        return 0\n    \n    odd_numbers = list(range(1, n + 1, 2))\n    return sum(odd_numbers) \/\/ len(odd_numbers)"
    },
    {
        "id":310,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef no_of_subsequences(arr, k):\n    if not arr:\n        return 1\n    \n    n = len(arr)\n    count = 1\n    \n    for length in range(1, n + 1):\n        for subset in itertools.combinations(arr, length):\n            product = 1\n            for num in subset:\n                product *= num\n            \n            if product < k:\n                count += 1\n    \n    return count\n```"
    },
    {
        "id":311,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\nimport sys\n\ndef find_Min_Sum(n):\n    if n <= 1:\n        return n\n    \n    min_sum = float('inf')\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factor1 = i\n            factor2 = n \/\/ i\n            current_sum = factor1 + factor2\n            min_sum = min(min_sum, current_sum)\n    \n    return min_sum if min_sum != float('inf') else n\n```"
    },
    {
        "id":312,
        "response":"```python\nfrom collections import Counter\nfrom typing import Tuple, Any\n\ndef count_element_freq(tup: Tuple[Any, ...]) -> dict:\n    def flatten(item):\n        if isinstance(item, tuple):\n            for sub_item in item:\n                yield from flatten(sub_item)\n        else:\n            yield item\n    \n    return dict(Counter(flatten(tup)))\n```"
    },
    {
        "id":313,
        "response":"```python\ndef add_str(tup, s):\n    return [str(elem) + s for elem in tup]\n```"
    },
    {
        "id":314,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_elements(tup):\n    return sum(sum(x) for x in tup)"
    },
    {
        "id":315,
        "response":"```python\nfrom itertools import combinations\n\ndef modular_sum(lst, n, m):\n    for k in range(1, n + 1):\n        for subset in combinations(lst, k):\n            if sum(subset) % m == 0:\n                return True\n    return False\n```"
    },
    {
        "id":316,
        "response":"import typing\nimport itertools\nimport re\nimport math\n\ndef radix_sort(arr):\n    if not arr:\n        return arr\n\n    is_negative = any(x < 0 for x in arr)\n    \n    if is_negative:\n        neg_arr = [abs(x) for x in arr]\n        pos_arr = [x for x in arr if x >= 0]\n        \n        max_val = max(max(neg_arr), max(pos_arr) if pos_arr else 0)\n    else:\n        max_val = max(arr) if arr else 0\n\n    max_digits = len(str(max_val))\n\n    for digit in range(max_digits):\n        buckets = [[] for _ in range(10)]\n        \n        for num in arr:\n            bucket_index = abs(num) \/\/ (10 ** digit) % 10\n            buckets[bucket_index].append(num)\n        \n        arr = [x for bucket in buckets for x in bucket]\n\n    if is_negative:\n        neg_result = sorted([-x for x in arr if x < 0], reverse=True)\n        pos_result = sorted([x for x in arr if x >= 0])\n        return neg_result + pos_result\n\n    return arr"
    },
    {
        "id":317,
        "response":"import re\nimport typing\nimport itertools\n\ndef largest_pos(lst):\n    pos_nums = [num for num in lst if num > 0]\n    return max(pos_nums) if pos_nums else None"
    },
    {
        "id":318,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sqrt_root(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Cannot compute square root of negative number\")\n    \n    if n == 0 or n == 1:\n        return n\n    \n    left, right = 0, n\n    \n    while left <= right:\n        mid = (left + right) \/\/ 2\n        square = mid * mid\n        \n        if square == n:\n            return mid\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right\n```"
    },
    {
        "id":319,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef volume_tetrahedron(n):\n    return (n**3) \/ (6 * math.sqrt(2))\n```"
    },
    {
        "id":320,
        "response":"```python\nimport math\nfrom typing import List\n\ndef get_lcm(lst: List[int]) -> int:\n    def lcm(a: int, b: int) -> int:\n        return abs(a * b) \/\/ math.gcd(a, b)\n    \n    result = lst[0]\n    for i in range(1, len(lst)):\n        result = lcm(result, lst[i])\n    \n    return result\n```"
    },
    {
        "id":321,
        "response":"import re\nimport typing\nimport itertools\n\ndef check_isosceles(n: int, n2: int, n3: int) -> bool:\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    \n    if n == n2 or n2 == n3 or n == n3:\n        return True\n    \n    return False"
    },
    {
        "id":322,
        "response":"import re\nimport typing\nimport itertools\n\ndef lbs(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    increasing = [1] * n\n    decreasing = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing[i] = max(increasing[i], increasing[j] + 1)\n    \n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing[i] = max(decreasing[i], decreasing[j] + 1)\n    \n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, increasing[i] + decreasing[i] - 1)\n    \n    return max_length"
    },
    {
        "id":323,
        "response":"```python\nimport re\n\ndef check_string(s):\n    has_uppercase = lambda x: any(c.isupper() for c in x)\n    has_lowercase = lambda x: any(c.islower() for c in x)\n    has_number = lambda x: any(c.isdigit() for c in x)\n    has_valid_length = lambda x: len(x) >= 8\n    \n    return has_uppercase(s) and has_lowercase(s) and has_number(s) and has_valid_length(s)\n```"
    },
    {
        "id":324,
        "response":"import re\nimport typing\nimport itertools\nimport sys\n\ndef max_sum_increasing_subsequence(arr, n):\n    if not arr or n <= 0:\n        return 0\n    \n    dp = arr.copy()\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    \n    return max(dp)"
    },
    {
        "id":325,
        "response":"```python\nimport math\n\ndef parallel_lines(line1, line2):\n    def calculate_slope(point1, point2):\n        x1, y1 = point1\n        x2, y2 = point2\n        if x2 - x1 == 0:\n            return float('inf')\n        return (y2 - y1) \/ (x2 - x1)\n    \n    slope1 = calculate_slope(line1[0], line1[1])\n    slope2 = calculate_slope(line2[0], line2[1])\n    \n    return math.isclose(slope1, slope2, rel_tol=1e-9)\n```"
    },
    {
        "id":326,
        "response":"import re\n\ndef capitalize_first_last_letters(s):\n    if not s:\n        return s\n    \n    words = s.split()\n    capitalized_words = []\n    \n    for word in words:\n        if len(word) == 1:\n            capitalized_words.append(word.upper())\n        else:\n            capitalized_word = word[0].upper() + word[1:-1] + word[-1].upper()\n            capitalized_words.append(capitalized_word)\n    \n    return ' '.join(capitalized_words)"
    },
    {
        "id":327,
        "response":"```python\nfrom typing import List\n\ndef get_pairs_count(lst: List[int], n: int, target: int) -> int:\n    if not lst or n == 0:\n        return 0\n    \n    count = 0\n    num_freq = {}\n    \n    for num in lst:\n        complement = target - num\n        if complement in num_freq:\n            count += num_freq[complement]\n        \n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    return count\n```"
    },
    {
        "id":328,
        "response":"import re\nimport typing\nimport itertools\n\ndef min_length(lst):\n    if not lst:\n        return 0\n    return min(len(str(item)) for item in lst)"
    },
    {
        "id":329,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef jacobsthal_lucas(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 2\n    \n    if n == 1:\n        return 1\n    \n    prev, curr = 2, 1\n    \n    for _ in range(2, n + 1):\n        prev, curr = curr, curr + 2 * prev\n    \n    return curr"
    },
    {
        "id":330,
        "response":"import re\nimport typing\nimport itertools\n\ndef negative_count(lst):\n    if not lst:\n        return 0\n    negative_nums = sum(1 for num in lst if num < 0)\n    return negative_nums \/ len(lst)"
    },
    {
        "id":331,
        "response":"import sys\nimport typing\nimport itertools\n\ndef min_coins(coins: typing.List[int], n: int, target: int) -> int:\n    dp = [sys.maxsize] * (target + 1)\n    dp[0] = 0\n\n    for i in range(1, target + 1):\n        for j in range(n):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n\n    return dp[target] if dp[target] != sys.maxsize else -1"
    },
    {
        "id":332,
        "response":"```python\nfrom typing import Optional\n\ndef check_permutation(s1: str, s2: str) -> bool:\n    if len(s1) != len(s2):\n        return False\n    \n    char_count = {}\n    \n    for char in s1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in s2:\n        if char not in char_count:\n            return False\n        char_count[char] -= 1\n        if char_count[char] < 0:\n            return False\n    \n    return True\n```"
    },
    {
        "id":333,
        "response":"```python\ndef remove_datatype(tup, param):\n    return tuple(item for item in tup if not isinstance(item, param))\n```"
    },
    {
        "id":334,
        "response":"import re\nimport typing\nimport itertools\n\ndef search_literal(s: str, pattern: str) -> int:\n    if not pattern:\n        return -1\n    \n    for i in range(len(s) - len(pattern) + 1):\n        if s[i:i+len(pattern)] == pattern:\n            return i\n    \n    return -1"
    },
    {
        "id":335,
        "response":"```python\nimport math\n\ndef topbottom_surfacearea(radius):\n    return round(math.pi * radius ** 2, 2)\n```"
    },
    {
        "id":336,
        "response":"import re\nimport typing\nimport itertools\n\ndef nth_items(lst, n):\n    if not isinstance(lst, list):\n        raise TypeError(\"First argument must be a list\")\n    \n    if not isinstance(n, int):\n        raise TypeError(\"Second argument must be an integer\")\n    \n    if n < 0 or n >= len(lst):\n        raise IndexError(\"Index out of range\")\n    \n    return lst[n]"
    },
    {
        "id":337,
        "response":"import re\nfrom typing import Optional\n\ndef first_repeated_word(s: str) -> Optional[str]:\n    if not s:\n        return None\n    \n    words = s.split()\n    word_set = set()\n    \n    for word in words:\n        if word in word_set:\n            return word\n        word_set.add(word)\n    \n    return None"
    },
    {
        "id":338,
        "response":"import re\nimport typing\nimport itertools\n\ndef string_list_to_tuple(tup):\n    return tuple(tup)"
    },
    {
        "id":339,
        "response":"import re\nimport typing\nimport itertools\n\ndef basesnum_coresspondingnum(lst1, lst2):\n    return list(map(pow, lst1, lst2))"
    },
    {
        "id":340,
        "response":"```python\nfrom collections import Counter\n\ndef find_Diff(lst, n):\n    if not lst or n == 0:\n        return 0\n    \n    freq_count = Counter(lst)\n    frequencies = list(freq_count.values())\n    \n    if not frequencies:\n        return 0\n    \n    return max(frequencies) - min(frequencies)\n```"
    },
    {
        "id":341,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef check_abundant(n: int) -> bool:\n    if n <= 0:\n        return False\n    \n    divisor_sum = sum(i for i in range(1, n) if n % i == 0)\n    \n    return divisor_sum > n"
    },
    {
        "id":342,
        "response":"import re\n\ndef fill_spaces(s: str) -> str:\n    return re.sub(r'[ ,.]', '|', s) + '|' if s else ''"
    },
    {
        "id":343,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_digits(n, n2):\n    return n + n2\n```"
    },
    {
        "id":344,
        "response":"import re\nimport typing\nimport itertools\n\ndef flatten_tuple(lst: typing.List[typing.Tuple[str, int]]) -> str:\n    return ''.join(str(item) for tuple_item in lst for item in tuple_item)"
    },
    {
        "id":345,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    \n    bits = len(bin(n)[2:])\n    \n    first_bit_mask = 1 << (bits - 1)\n    last_bit_mask = 1\n    \n    return n ^ first_bit_mask ^ last_bit_mask"
    },
    {
        "id":346,
        "response":"import re\nimport typing\nimport itertools\n\ndef last_occurence_char(s: str, s2: str) -> int:\n    if not s or not s2:\n        return -1\n    \n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == s2:\n            return i\n    \n    return -1"
    },
    {
        "id":347,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef Total_Hamming_Distance(n):\n    if n < 0:\n        return 0\n    \n    total_hamming = 0\n    for i in range(n):\n        total_hamming += bin(i ^ (i+1)).count('1')\n    \n    return total_hamming"
    },
    {
        "id":348,
        "response":"import typing\nimport itertools\nimport re\n\ndef longest_increasing_subsequence(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"
    },
    {
        "id":349,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**5\n    \n    return total_sum"
    },
    {
        "id":350,
        "response":"import re\nimport typing\nimport itertools\n\ndef find_Max(lst: list[int], n: int, k: int) -> int:\n    if n == 1:\n        return lst[0]\n    \n    left, right = 0, n - 1\n    \n    while left <= right:\n        if lst[left] <= lst[right]:\n            return lst[right]\n        \n        mid = (left + right) \/\/ 2\n        next_mid = (mid + 1) % n\n        prev_mid = (mid - 1 + n) % n\n        \n        if lst[mid] <= lst[next_mid] and lst[mid] <= lst[prev_mid]:\n            return lst[mid]\n        \n        if lst[mid] <= lst[right]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return lst[0]"
    },
    {
        "id":351,
        "response":"def extract_column(lst, n):\n    return [row[n] for row in lst] if lst else []"
    },
    {
        "id":352,
        "response":"```python\nimport math\nimport typing\nimport itertools\nimport re\n\ndef Seq_Linear(lst: typing.List[int]) -> bool:\n    if len(lst) <= 1:\n        return True\n    \n    diff_set = set()\n    for i in range(1, len(lst)):\n        diff_set.add(lst[i] - lst[i-1])\n    \n    return len(diff_set) <= 1\n```"
    },
    {
        "id":353,
        "response":"```python\ndef tuple_to_float(tup):\n    return float(f\"{tup[0]}.{tup[1]}\")\n```"
    },
    {
        "id":354,
        "response":"def Split(lst):\n    return [num for num in lst if num % 2 != 0]"
    },
    {
        "id":355,
        "response":"import re\nimport typing\nimport itertools\n\ndef difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers**2"
    },
    {
        "id":356,
        "response":"```python\ndef find_Odd_Pair(lst, n):\n    odd_nums = [num for num in lst if num % 2 != 0]\n    \n    if len(odd_nums) < 2:\n        return 0\n    \n    result = 0\n    for i in range(0, len(odd_nums), 2):\n        if i + 1 < len(odd_nums):\n            result ^= odd_nums[i] ^ odd_nums[i+1]\n    \n    return result\n```"
    },
    {
        "id":357,
        "response":"import re\nimport typing\nimport itertools\n\ndef toggle_string(s: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in s)"
    },
    {
        "id":358,
        "response":"import re\nimport typing\nimport itertools\n\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    str1 = str(n1).zfill(max(len(str(n1)), len(str(n2))))\n    str2 = str(n2).zfill(max(len(str(n1)), len(str(n2))))\n    \n    total_distance = 0\n    for d1, d2 in zip(str1, str2):\n        total_distance += abs(int(d1) - int(d2))\n    \n    return total_distance"
    },
    {
        "id":359,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef max_sub_array_sum(lst, n):\n    if n == 0:\n        return 0\n    \n    if all(x < 0 for x in lst):\n        return max(lst)\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n - 1):\n        current_sum = max(lst[i] + lst[i+1], current_sum)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "id":360,
        "response":"def union_elements(tup1, tup2):\n    return tuple(set(tup1 + tup2))"
    },
    {
        "id":361,
        "response":"```python\nfrom typing import List, Tuple, Any\n\ndef assign_elements(lst: List[Tuple[Any, ...]]) -> List[Tuple[Any, ...]]:\n    if not lst:\n        return []\n    \n    result = [[] for _ in range(len(lst[0]))]\n    \n    for tuple_item in lst:\n        for i, element in enumerate(tuple_item):\n            result[i].append(element)\n    \n    return [tuple(group) for group in result]\n```"
    },
    {
        "id":362,
        "response":"import re\nimport typing\nimport itertools\n\ndef Find_Max_Length(lst):\n    if not lst:\n        return 0\n    return max(len(sublist) for sublist in lst)"
    },
    {
        "id":363,
        "response":"import re\n\ndef extract_values(s: str) -> list[str]:\n    pattern = r\"(?:'|\\\")([^'\\\"]*(?:(?:'|\\\")(?:[^'\\\"]*)?(?:'|\\\"))?[^'\\\"]*?)(?:'|\\\")\"\n    matches = re.findall(pattern, s)\n    return matches"
    },
    {
        "id":364,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_Pairs(lst: list, n: int) -> int:\n    if not lst or n == 0:\n        return 0\n    \n    pair_count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] != lst[j]:\n                pair_count += 1\n    \n    return pair_count"
    },
    {
        "id":365,
        "response":"import re\nimport typing\nimport itertools\n\ndef split(s: str) -> typing.List[str]:\n    return list(s)"
    },
    {
        "id":366,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_digits(n: int) -> int:\n    if n < 0:\n        return 0\n    total = 0\n    while n > 0:\n        total += n % 10\n        n \/\/= 10\n    return total"
    },
    {
        "id":367,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True\n```"
    },
    {
        "id":368,
        "response":"import re\nimport typing\nimport itertools\n\ndef empty_list(n: int) -> list:\n    return [{} for _ in range(n)]"
    },
    {
        "id":369,
        "response":"```python\ndef sort_sublists(lst):\n    if not lst:\n        return []\n    \n    result = []\n    for s in lst:\n        parts = s.split()\n        sorted_parts = sorted(parts, key=lambda x: x)\n        result.append(' '.join(sorted_parts))\n    \n    return result\n```"
    },
    {
        "id":370,
        "response":"```python\ndef remove_words(words, remove_chars):\n    return [word for word in words if not any(char in word for char in remove_chars)]\n```"
    },
    {
        "id":371,
        "response":"```python\nimport itertools\nimport typing\n\ndef max_sum_pair_diff_lessthan_K(arr: list[int], n: int, k: int) -> int:\n    arr.sort(reverse=True)\n    total_sum = 0\n    used = [False] * n\n    \n    for i in range(n):\n        if used[i]:\n            continue\n        \n        for j in range(i+1, n):\n            if not used[j] and abs(arr[i] - arr[j]) < k:\n                total_sum += arr[i] + arr[j]\n                used[i] = True\n                used[j] = True\n                break\n    \n    return total_sum\n```"
    },
    {
        "id":372,
        "response":"from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(lst: List[int]) -> List[int]:\n    count = Counter(lst)\n    return [num for num in lst if count[num] == 1]"
    },
    {
        "id":373,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef unique_product(lst):\n    if not lst:\n        return 1\n    unique_nums = set(lst)\n    return math.prod(unique_nums)"
    },
    {
        "id":374,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef surfacearea_cylinder(radius, height):\n    lateral_surface_area = 2 * math.pi * radius * height\n    circular_surface_areas = 2 * math.pi * radius * radius\n    total_surface_area = lateral_surface_area + circular_surface_areas\n    return total_surface_area"
    },
    {
        "id":375,
        "response":"import re\nimport typing\nimport itertools\n\ndef count_no(n, n2, n3, n4):\n    count = 0\n    current = 1\n    \n    while True:\n        if current % n2 != 0 and current % n3 != 0 and current % n4 != 0:\n            count += 1\n            \n        if count == n:\n            return current\n        \n        current += 1"
    },
    {
        "id":376,
        "response":"import re\nimport typing\nimport itertools\n\ndef is_Sub_Array(lst, lst2, n, n2):\n    if n2 > n or n2 == 0:\n        return False\n    \n    if n2 == 0:\n        return True\n    \n    for i in range(n - n2 + 1):\n        if lst[i:i+n2] == lst2:\n            return True\n    \n    return False"
    },
    {
        "id":377,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef last_Digit_Factorial(n):\n    if n < 0:\n        return None\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n        result %= 10\n    return result"
    },
    {
        "id":378,
        "response":"import re\nimport typing\nimport itertools\n\ndef interleave_lists(*lists):\n    if not lists:\n        return []\n    \n    length = len(lists[0])\n    if not all(len(lst) == length for lst in lists):\n        raise ValueError(\"All input lists must have the same length\")\n    \n    result = []\n    for i in range(length):\n        for lst in lists:\n            result.append(lst[i])\n    \n    return result"
    },
    {
        "id":379,
        "response":"def find_dissimilar(tup, tup2):\n    set1 = set(tup)\n    set2 = set(tup2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)"
    },
    {
        "id":380,
        "response":"import re\nimport typing\nimport itertools\n\ndef extract_even(tup):\n    def flatten(item):\n        if isinstance(item, tuple):\n            return list(itertools.chain.from_iterable(flatten(x) for x in item))\n        return [item]\n    \n    flattened = list(itertools.chain.from_iterable(flatten(x) for x in tup))\n    return tuple(num for num in flattened if isinstance(num, int) and num % 2 == 0)"
    },
    {
        "id":381,
        "response":"import math\nimport re\nimport typing\nimport itertools\n\ndef surface_Area(base_length, slant_height):\n    base_area = base_length * base_length\n    triangular_face_area = 0.5 * base_length * slant_height * 4\n    total_surface_area = base_area + triangular_face_area\n    return round(total_surface_area, 1)"
    },
    {
        "id":382,
        "response":"import re\nimport typing\nimport itertools\n\ndef my_dict(dct):\n    if not isinstance(dct, dict):\n        return False\n    return len(dct) == 0"
    },
    {
        "id":383,
        "response":"```python\nimport math\n\ndef catalan_number(n):\n    if n < 0:\n        return 0\n    \n    return math.comb(2*n, n) \/\/ (n + 1)\n```"
    },
    {
        "id":384,
        "response":"```python\nimport re\nimport typing\n\ndef find_adjectives(sentence: str) -> typing.List[typing.Tuple[str, int]]:\n    words = sentence.split()\n    adjectives = []\n    \n    for i, word in enumerate(words):\n        cleaned_word = word.strip('.,;:!?')\n        if re.match(r'^[A-Z]?[a-z]+(?:ly)?$', cleaned_word) and \\\n           not re.match(r'^(is|am|are|was|were|be|been|being)$', cleaned_word.lower()) and \\\n           not re.match(r'^(a|an|the)$', cleaned_word.lower()):\n            \n            if i > 0 and words[i-1].lower() in ['very', 'really', 'extremely', 'quite']:\n                continue\n            \n            if i < len(words) - 1 and words[i+1].lower() in ['noun', 'person', 'place', 'thing']:\n                continue\n            \n            adjectives.append((cleaned_word, i))\n    \n    return adjectives\n```"
    },
    {
        "id":385,
        "response":"```python\ndef expensive_items(lst, n):\n    if not lst or n <= 0:\n        return []\n    \n    return sorted(lst, key=lambda x: x['price'], reverse=True)[:n]\n```"
    },
    {
        "id":386,
        "response":"import re\nimport typing\nimport itertools\n\ndef split_Arr(lst, n, n2):\n    if not lst or n == n2:\n        return lst\n    \n    if n < 0 or n2 > len(lst) or n >= n2:\n        return lst\n    \n    return lst[n:n2] + lst[:n] + lst[n2:]"
    },
    {
        "id":387,
        "response":"import re\nimport typing\nimport itertools\n\ndef list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "id":388,
        "response":"import re\nimport typing\nimport itertools\n\ndef big_diff(lst):\n    if not lst:\n        return 0\n    return max(lst) - min(lst)"
    },
    {
        "id":389,
        "response":"import math\n\ndef perfect_squares(n, n2):\n    result = []\n    for num in range(n, n2 + 1):\n        sqrt = int(math.sqrt(num))\n        if sqrt * sqrt == num:\n            result.append(num)\n    return result"
    },
    {
        "id":390,
        "response":"```python\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n```"
    },
    {
        "id":391,
        "response":"import re\nimport typing\nimport itertools\n\ndef swap_List(lst):\n    if len(lst) <= 1:\n        return lst\n    \n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":392,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef sum_Of_product(n):\n    total = 0\n    for k in range(n + 1):\n        total += math.comb(n, k) * math.comb(n, n - k)\n    return total\n```"
    },
    {
        "id":393,
        "response":"```python\nimport re\n\ndef removezero_ip(s):\n    parts = s.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)\n```"
    },
    {
        "id":394,
        "response":"import re\nimport typing\nimport itertools\n\ndef diff_even_odd(lst):\n    if not lst:\n        return 0\n    \n    first_even = next((num for num in lst if num % 2 == 0), None)\n    first_odd = next((num for num in lst if num % 2 != 0), None)\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even - first_odd"
    },
    {
        "id":395,
        "response":"import re\nimport typing\nimport itertools\n\ndef min_Swaps(s1: str, s2: str) -> int:\n    if len(s1) != len(s2):\n        return -1\n    \n    if s1.count('1') != s2.count('1'):\n        return -1\n    \n    mismatches = [i for i in range(len(s1)) if s1[i] != s2[i]]\n    \n    if len(mismatches) % 2 != 0:\n        return -1\n    \n    return len(mismatches) \/\/ 2"
    },
    {
        "id":396,
        "response":"import re\nimport typing\nimport itertools\n\ndef tuple_size(tup):\n    return len(tup)"
    },
    {
        "id":397,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef find_kth(lst1, lst2, n1, n2, k):\n    if not lst1:\n        return lst2[k-1]\n    if not lst2:\n        return lst1[k-1]\n    \n    if k == 1:\n        return min(lst1[0], lst2[0])\n    \n    i = min(n1, k\/\/2)\n    j = min(n2, k\/\/2)\n    \n    if lst1[i-1] <= lst2[j-1]:\n        return find_kth(lst1[i:], lst2, n1-i, n2, k-i)\n    else:\n        return find_kth(lst1, lst2[j:], n1, n2-j, k-j)\n```"
    },
    {
        "id":398,
        "response":"import re\nimport typing\nimport itertools\nimport math\n\ndef armstrong_number(n: int) -> bool:\n    if n < 0:\n        return False\n    \n    str_n = str(n)\n    num_digits = len(str_n)\n    \n    total = sum(int(digit) ** num_digits for digit in str_n)\n    \n    return total == n"
    },
    {
        "id":399,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sum_average(n):\n    if n <= 0:\n        return (0, 0)\n    \n    total_sum = (n * (n + 1)) \/\/ 2\n    avg = total_sum \/ n\n    \n    return (total_sum, avg)\n```"
    },
    {
        "id":400,
        "response":"```python\nimport re\nimport typing\nimport itertools\nimport split\n\ndef is_Even(n):\n    return (n & 1) == 0\n```"
    }
]