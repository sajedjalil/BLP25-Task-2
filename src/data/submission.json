[
    {
        "id":1,
        "response":"def max_chain_length(pairs, n):\n    if not pairs or n <= 0:\n        return 0\n    \n    pairs.sort(key=lambda x: x[1])\n    \n    max_length = 1\n    current_end = pairs[0][1]\n    \n    for i in range(1, n):\n        if pairs[i][0] > current_end:\n            max_length += 1\n            current_end = pairs[i][1]\n    \n    return max_length"
    },
    {
        "id":2,
        "response":"def first_repeated_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "id":3,
        "response":"def get_ludic(n):\n    if n < 1:\n        return []\n    \n    ludic = list(range(1, n + 1))\n    \n    i = 1\n    while i < len(ludic):\n        current = ludic[i]\n        \n        j = i + current\n        while j < len(ludic):\n            ludic.pop(j)\n            j = j - 1 + current\n        \n        i += 1\n    \n    return ludic"
    },
    {
        "id":4,
        "response":"def reverse_words(s):\n    if not s:\n        return s\n    \n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)"
    },
    {
        "id":5,
        "response":"def prime_num(n):\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "id":6,
        "response":"import math\n\ndef radian_degree(n):\n    return n * (math.pi \/ 180)"
    },
    {
        "id":7,
        "response":"import re\n\ndef find_literals(s, s2):\n    if not s or not s2:\n        return -1\n    \n    match = re.search(re.escape(s2), s)\n    \n    if match:\n        return match.start()\n    \n    return -1"
    },
    {
        "id":8,
        "response":"\n```python\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]"
    },
    {
        "id":9,
        "response":"import math\n\ndef floor_Min(*args):\n    if not args:\n        return None\n    \n    min_value = float('inf')\n    \n    for arg in args:\n        if isinstance(arg, (int, float)):\n            min_value = min(min_value, math.floor(arg))\n        elif isinstance(arg, complex):\n            min_value = min(min_value, math.floor(abs(arg)))\n    \n    return min_value"
    },
    {
        "id":10,
        "response":"\n```python\ndef remove_kth_element(lst, k):\n    if not lst:\n        return lst\n    \n    if k < 1 or k > len(lst):\n        return lst\n    \n    return lst[:k-1] + lst[k:]"
    },
    {
        "id":11,
        "response":"def max_of_nth(lst, n):\n    if not lst:\n        return None\n    \n    try:\n        return max(item[n] for item in lst)\n    except (IndexError, TypeError):\n        return None"
    },
    {
        "id":12,
        "response":"def merge(lst):\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    return [lst[0], lst[-1]]"
    },
    {
        "id":13,
        "response":"from typing import List, Tuple\n\ndef maximum_value(lst: List[Tuple]) -> int:\n    if not lst:\n        return None\n    \n    return max(record[1] for record in lst)"
    },
    {
        "id":14,
        "response":"def cumulative_sum(lst):\n    if not lst:\n        return []\n    \n    result = []\n    total = 0\n    \n    for num in lst:\n        total += num\n        result.append(total)\n    \n    return result"
    },
    {
        "id":15,
        "response":"def average_tuple(tup):\n    if not tup:\n        return 0\n    return sum(len(item) if isinstance(item, tuple) else 0 for item in tup) \/ len(tup)"
    },
    {
        "id":16,
        "response":"def tuple_modulo(tup, tup2):\n    if len(tup) != len(tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    \n    if not all(isinstance(x, (int, float)) and isinstance(y, (int, float)) for x, y in zip(tup, tup2)):\n        raise TypeError(\"Tuple elements must be numeric\")\n    \n    if any(y == 0 for y in tup2):\n        raise ZeroDivisionError(\"Cannot perform modulo with zero\")\n    \n    return tuple(x % y for x, y in zip(tup, tup2))"
    },
    {
        "id":17,
        "response":"import math\n\ndef min_Jumps(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return -1\n    \n    target = n1\n    jumps = float('inf')\n    \n    for x in range(target \/\/ n2 + 1):\n        for y in range(target \/\/ n3 + 1):\n            remaining = target - (x * n2 + y * n3)\n            \n            if remaining >= 0 and remaining % n1 == 0:\n                z = remaining \/\/ n1\n                jumps = min(jumps, x + y + z)\n    \n    return jumps if jumps != float('inf') else -1"
    },
    {
        "id":18,
        "response":"def div_list(lst1, lst2):\n    try:\n        return list(map(lambda x, y: x \/ y if y != 0 else None, lst1, lst2))\n    except (TypeError, ValueError):\n        return None"
    },
    {
        "id":19,
        "response":"\n```python\ndef move_num(s):\n    nums = ''.join(char for char in s if char.isdigit())\n    chars = ''.join(char for char in s if not char.isdigit())\n    return chars + nums"
    },
    {
        "id":20,
        "response":"from typing import List\n\ndef largest_subset(arr: List[int], n: int) -> int:\n    if not arr or n <= 0:\n        return 0\n    \n    arr.sort()\n    dp = [1] * n\n    max_subset = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] % arr[j] == 0 or arr[j] % arr[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_subset = max(max_subset, dp[i])\n    \n    return max_subset"
    },
    {
        "id":21,
        "response":"import re\n\ndef increment_numerics(lst, k):\n    def increment_number(match):\n        return str(int(match.group()) + k)\n\n    return [re.sub(r'\\d+', increment_number, item) for item in lst]"
    },
    {
        "id":22,
        "response":"def get_median(lst1, lst2, n):\n    if not lst1 or not lst2 or len(lst1) != n or len(lst2) != n:\n        return None\n\n    if n == 0:\n        return None\n\n    if n == 1:\n        return (lst1[0] + lst2[0]) \/ 2\n\n    if n == 2:\n        return (max(lst1[0], lst2[0]) + min(lst1[1], lst2[1])) \/ 2\n\n    m1, m2 = lst1[n \/\/ 2], lst2[n \/\/ 2]\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(lst1[n \/\/ 2 - 1:], lst2[:n \/\/ 2 + 1], n \/\/ 2 + 1)\n        return get_median(lst1[n \/\/ 2:], lst2[:n \/\/ 2 + 1], n \/\/ 2 + 1)\n    else:\n        if n % 2 == 0:\n            return get_median(lst2[n \/\/ 2 - 1:], lst1[:n \/\/ 2 + 1], n \/\/ 2 + 1)\n        return get_median(lst2[n \/\/ 2:], lst1[:n \/\/ 2 + 1], n \/\/ 2 + 1)"
    },
    {
        "id":23,
        "response":"def nth_nums(lst, n):\n    return list(map(lambda x: x**n, lst))"
    },
    {
        "id":24,
        "response":"def is_upper(s):\n    if not isinstance(s, str):\n        return False\n    return s.isupper()"
    },
    {
        "id":25,
        "response":"def swap_List(lst):\n    if len(lst) < 2:\n        return lst\n    \n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":26,
        "response":"import math\n\ndef triangle_area(n):\n    if n <= 0:\n        return 0\n    \n    radius = n \/ 2\n    base = n\n    height = math.sqrt(3) * radius \/ 2\n    \n    area = 0.5 * base * height\n    \n    return round(area, 2)"
    },
    {
        "id":27,
        "response":"def find_First_Missing(lst, n, n2):\n    s = set(lst)\n    for i in range(1, n2 + 2):\n        if i not in s:\n            return i\n    return n2 + 1"
    },
    {
        "id":28,
        "response":"def replace_spaces(s):\n    if s is None:\n        return None\n    return s.replace(' ', '%20')"
    },
    {
        "id":29,
        "response":"def split(lst):\n    return [num for num in lst if isinstance(num, int) and num % 2 == 0]"
    },
    {
        "id":30,
        "response":"from typing import Tuple, List\n\ndef get_coordinates(tup: Tuple[int, int]) -> List[Tuple[int, int]]:\n    x, y = tup\n    adjacent_coords = [\n        (x-1, y-1), (x-1, y), (x-1, y+1),\n        (x, y-1), (x, y+1),\n        (x+1, y-1), (x+1, y), (x+1, y+1)\n    ]\n    return adjacent_coords"
    },
    {
        "id":31,
        "response":"import re\n\ndef replace_spaces(s):\n    if s is None:\n        return None\n    \n    if '_' in s:\n        return re.sub(r'_', ' ', s)\n    else:\n        return re.sub(r'\\s', '_', s)"
    },
    {
        "id":32,
        "response":"    non_zero = [x for x in lst if x != 0]\n    zeros = [x for x in lst if x == 0]"
    },
    {
        "id":33,
        "response":"from itertools import combinations\n\ndef pair_OR_Sum(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    total_sum = 0\n    \n    for a, b in combinations(lst, 2):\n        total_sum += a ^ b\n    \n    return total_sum"
    },
    {
        "id":34,
        "response":"def even_Power_Sum(n):\n    if n <= 0:\n        return 0\n    \n    sum = 0\n    for i in range(1, n + 1):\n        even_num = 2 * i\n        sum += even_num ** 4\n    \n    return sum"
    },
    {
        "id":35,
        "response":"import heapq\n\ndef heap_sort(lst):\n    if not lst:\n        return []\n    \n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "id":36,
        "response":"\n```python\nimport math\n\ndef Check_Solution(n, n2, n3):\n    if n == 0:\n        return False\n    \n    discriminant = n2**2 - 4*n*n3\n    \n    if discriminant < 0:\n        return False\n    \n    root1 = (-n2 + math.sqrt(discriminant)) \/ (2*n)\n    root2 = (-n2 - math.sqrt(discriminant)) \/ (2*n)\n    \n    return abs(root1 + root2) < 1e-10"
    },
    {
        "id":37,
        "response":"def noprofit_noloss(n, n2):\n    return n == n2"
    },
    {
        "id":38,
        "response":"import math\n\ndef wind_chill(temperature, wind_speed):\n    if temperature > 50 or wind_speed < 3:\n        return temperature\n    \n    wind_chill_index = 35.74 + (0.6215 * temperature) - (35.75 * (wind_speed ** 0.16)) + (0.4275 * temperature * (wind_speed ** 0.16))\n    \n    return round(wind_chill_index, 1)"
    },
    {
        "id":39,
        "response":"def sample_nam(names):\n    filtered_names = [name for name in names if name and name[0].isupper()]\n    return sum(len(name) for name in filtered_names)"
    },
    {
        "id":40,
        "response":"import re\n\ndef remove_parenthesis(lst):\n    result = []\n    for item in lst:\n        cleaned_item = re.sub(r'\\([^)]*\\)', '', item)\n        result.append(cleaned_item.strip())\n    return result"
    },
    {
        "id":41,
        "response":"def is_nonagonal(n):\n    if n <= 0:\n        return 0\n    return n * (7 * n - 5) \/\/ 2"
    },
    {
        "id":42,
        "response":"def remove_similar_row(lst):\n    if not lst:\n        return []\n    \n    unique_rows = []\n    for row in lst:\n        if row not in unique_rows:\n            unique_rows.append(row)\n    \n    return unique_rows"
    },
    {
        "id":43,
        "response":"import re\n\ndef text_match_wordz_middle(s):\n    pattern = r'\\b\\w+z\\w+\\b'\n    return bool(re.search(pattern, s))"
    },
    {
        "id":44,
        "response":"\n```python\ndef reverse_Array_Upto_K(lst, n):\n    if not lst or n <= 0 or n > len(lst):\n        return lst\n    \n    left = 0\n    right = n - 1\n    \n    while left < right:\n        lst[left], lst[right] = lst[right], lst[left]\n        left += 1\n        right -= 1\n    \n    return lst"
    },
    {
        "id":45,
        "response":"def find_k_product(lst, k):\n    if not lst or k < 0:\n        return None\n    \n    product = 1\n    for tuple_item in lst:\n        if k >= len(tuple_item):\n            return None\n        product *= tuple_item[k]\n    \n    return product"
    },
    {
        "id":46,
        "response":"def No_of_cubes(n, k):\n    if k > n or k <= 0 or n <= 0:\n        return 0\n    \n    return ((n - k + 1) ** 3)"
    },
    {
        "id":47,
        "response":"def split_upperstring(s):\n    return [char for char in s if char.isupper()]"
    },
    {
        "id":48,
        "response":"def exchange_elements(lst):\n    if not lst or len(lst) < 2:\n        return lst\n    \n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    \n    return lst"
    },
    {
        "id":49,
        "response":"def sum_Range_list(lst, n, n2):\n    if not lst or n < 0 or n2 < 0 or n >= len(lst) or n2 >= len(lst) or n > n2:\n        return 0\n    return sum(lst[n:n2+1])"
    },
    {
        "id":50,
        "response":"def are_Equal(lst, lst2, n, n2):\n    if n != n2:\n        return False\n    \n    lst.sort()\n    lst2.sort()\n    \n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return False\n    \n    return True"
    },
    {
        "id":51,
        "response":"def check_subset(tup1, tup2):\n    if not tup1 or not tup2:\n        return False\n    \n    set1 = set(tup1)\n    set2 = set(tup2)\n    \n    return set1.issubset(set2)"
    },
    {
        "id":52,
        "response":"def matrix_to_list(matrix):\n    if not matrix or not matrix[0]:\n        return []\n    \n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    result = []\n    \n    for col in range(num_cols):\n        column_tuple = tuple(matrix[row][col] for row in range(num_rows))\n        result.append(column_tuple)\n    \n    return result"
    },
    {
        "id":53,
        "response":"from collections import defaultdict\n\ndef grouping_dictionary(lst):\n    result = defaultdict(list)\n    for key, value in lst:\n        result[key].append(value)\n    return dict(result)"
    },
    {
        "id":54,
        "response":"def rectangle_perimeter(n, n2):\n    if not isinstance(n, (int, float)) or not isinstance(n2, (int, float)):\n        return None\n    \n    if n <= 0 or n2 <= 0:\n        return None\n    \n    return 2 * (n + n2)"
    },
    {
        "id":55,
        "response":"def fifth_Power_Sum(n):\n    if n <= 0:\n        return 0\n    return sum(i**5 for i in range(1, n+1))"
    },
    {
        "id":56,
        "response":"import itertools\n\ndef find_Min_Sum(lst, lst2, n):\n    if not lst or not lst2 or len(lst) != n or len(lst2) != n:\n        return 0\n    \n    lst.sort()\n    lst2.sort()\n    \n    return sum(abs(a - b) for a, b in zip(lst, lst2))"
    },
    {
        "id":57,
        "response":"\n```python\nimport math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    \n    if n == 0 or n == 1:\n        return 1\n    \n    factorial = math.factorial(n)\n    \n    while factorial >= 10:\n        factorial \/\/= 10\n    \n    return factorial"
    },
    {
        "id":58,
        "response":"from collections import Counter\n\ndef max_occurrences(lst):\n    if not lst:\n        return None\n    \n    counter = Counter(lst)\n    max_item = max(counter, key=counter.get)\n    return max_item"
    },
    {
        "id":59,
        "response":"def Repeat(lst):\n    seen = set()\n    duplicates = set()\n    \n    for num in lst:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    \n    return list(duplicates)"
    },
    {
        "id":60,
        "response":"def find_Points(n, n2, n3, n4):\n    if n > n2:\n        n, n2 = n2, n\n    if n3 > n4:\n        n3, n4 = n4, n3\n    \n    if n2 < n3 or n4 < n:\n        return list(range(n, n2 + 1)) + list(range(n3, n4 + 1))\n    \n    return list(range(min(n, n3), max(n2, n4) + 1))"
    },
    {
        "id":61,
        "response":"def max_sum_of_three_consecutive(lst, n):\n    if n < 3:\n        return sum(lst)\n    \n    dp = [0] * n\n    dp[0] = lst[0]\n    dp[1] = lst[0] + lst[1]\n    dp[2] = max(dp[1], lst[1] + lst[2], lst[0] + lst[2])\n    \n    for i in range(3, n):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i], dp[i-3] + lst[i-1] + lst[i])\n    \n    return dp[n-1]"
    },
    {
        "id":62,
        "response":"def sorted_dict(dct):\n    if not isinstance(dct, dict):\n        return dct\n    \n    return {key: sorted(value) if isinstance(value, list) else value for key, value in dct.items()}"
    },
    {
        "id":63,
        "response":"def find_max_val(n, x, y):\n    if x == 0:\n        return -1\n    if y >= x:\n        return -1\n    \n    k = n - (n % x) + y\n    \n    if k > n:\n        k -= x\n    \n    return k"
    },
    {
        "id":64,
        "response":"def average_Even(n):\n    if n <= 0:\n        return 0\n    \n    even_sum = sum(range(2, n + 1, 2))\n    even_count = len(range(2, n + 1, 2))\n    \n    return even_sum \/ even_count if even_count > 0 else 0"
    },
    {
        "id":65,
        "response":"def move_last(lst):\n    if not lst:\n        return lst\n    \n    first_element = lst.pop(0)\n    lst.append(first_element)\n    \n    return lst"
    },
    {
        "id":66,
        "response":"from collections import Counter\n\ndef count_char(s, s2):\n    if not s or not s2:\n        return 0\n    \n    char_counts = Counter(s)\n    return char_counts[s2]"
    },
    {
        "id":67,
        "response":"\n```python\ndef Check_Vow(s, s2):\n    vowels = set('aeiouAEIOU')\n    count = sum(1 for char in s if char in vowels)\n    count += sum(1 for char in s2 if char in vowels)\n    return count"
    },
    {
        "id":68,
        "response":"def replace(s, s2):\n    if not s or not s2:\n        return s\n    \n    result = []\n    for char in s:\n        if not result or char != result[-1] or char not in s2:\n            result.append(char)\n    \n    return ''.join(result)"
    },
    {
        "id":69,
        "response":"import re\n\ndef check_IP(s):\n    pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n    if not re.match(pattern, s):\n        return False\n    \n    parts = s.split('.')\n    for part in parts:\n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n        \n        if len(part) > 1 and part[0] == '0':\n            return False\n    \n    return True"
    },
    {
        "id":70,
        "response":"\ndef decreasing_trend(lst: typing.List[int]) -> bool:\n    if not lst:\n        return False\n    \n    if len(lst) == 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] >= lst[i-1]:\n            return False\n    "
    },
    {
        "id":71,
        "response":"def set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 0\n    \n    if n & (n + 1) == 0:\n        return n\n    \n    mask = 1\n    while n & mask:\n        mask <<= 1\n    \n    return n | mask"
    },
    {
        "id":72,
        "response":"def max_of_three(n1, n2, n3):\n    return max(n1, n2, n3)"
    },
    {
        "id":73,
        "response":"def convert(lst):\n    if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        result = result * 10 + num\n    \n    return result"
    },
    {
        "id":74,
        "response":"def remove_duplicate(s):\n    if not s:\n        return \"\"\n    \n    words = s.split()\n    unique_words = []\n    seen = set()\n    \n    for word in words:\n        if word.lower() not in seen:\n            unique_words.append(word)\n            seen.add(word.lower())\n    \n    return \" \".join(unique_words)"
    },
    {
        "id":75,
        "response":"def sum_nums(n, n2, n3, n4):\n    total_sum = n + n2 + n3 + n4\n    \n    if 10 <= total_sum <= 20:\n        return 20\n    \n    return total_sum"
    },
    {
        "id":76,
        "response":"import re\n\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":77,
        "response":"def validity_triangle(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    \n    if (n1 + n2 > n3) and (n1 + n3 > n2) and (n2 + n3 > n1):\n        return True\n    \n    return False"
    },
    {
        "id":78,
        "response":"def remove_spaces(s):\n    return s.replace(\" \", \"\")"
    },
    {
        "id":79,
        "response":"def access_key(dct, n):\n    if not isinstance(dct, dict) or not dct:\n        return None\n    \n    if n < 0 or n >= len(dct):\n        return None\n    \n    return list(dct.keys())[n]"
    },
    {
        "id":80,
        "response":"def increasing_trend(lst):\n    if not lst or len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    \n    return True"
    },
    {
        "id":81,
        "response":"\n```python\ndef smallest_Divisor(n):\n    if n <= 0:\n        return None\n    \n    for i in range(ord('a'), ord('z') + 1):\n        letter = chr(i)\n        if n % int(letter) == 0:\n            return letter\n    \n    return None"
    },
    {
        "id":82,
        "response":"def mul_list(lst, lst2):\n    if not lst or not lst2 or len(lst) != len(lst2):\n        return []\n    return list(map(lambda x, y: x * y, lst, lst2))"
    },
    {
        "id":83,
        "response":"import math\n\ndef sum_Square(n):\n    if n < 0:\n        return False\n    \n    for a in range(int(math.sqrt(n)) + 1):\n        for b in range(int(math.sqrt(n)) + 1):\n            if a*a + b*b == n:\n                return True\n    \n    return False"
    },
    {
        "id":84,
        "response":"\n```python\ndef count_Char(s, s2):\n    if not s or not s2:\n        return 0\n    \n    total_length = len(s2)\n    repeat_count = total_length \/\/ len(s)\n    remainder = total_length % len(s)\n    \n    char_count = {}\n    for char in s:\n        char_count[char] = s.count(char) * repeat_count\n    \n    for char in s[:remainder]:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    return char_count.get(s2[0], 0)"
    },
    {
        "id":85,
        "response":"def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    \n    prime_sum = 0\n    for num in range(2, n + 1):\n        if is_prime(num):\n            prime_sum += num\n    \n    return prime_sum"
    },
    {
        "id":86,
        "response":"from collections import Counter\n\ndef freq_element(tup):\n    if not tup:\n        return {}\n    \n    frequency = Counter(tup)\n    return dict(frequency)"
    },
    {
        "id":87,
        "response":"def recur_gcd(n1, n2):\n    n1, n2 = abs(n1), abs(n2)\n    if n2 == 0:\n        return n1\n    return recur_gcd(n2, n1 % n2)"
    },
    {
        "id":88,
        "response":"import math\n\ndef len_complex(n1, n2):\n    if not isinstance(n1, complex) or not isinstance(n2, complex):\n        raise TypeError(\"Both arguments must be complex numbers\")\n    \n    return math.sqrt((n1.real - n2.real)**2 + (n1.imag - n2.imag)**2)"
    },
    {
        "id":89,
        "response":"def min_jumps(lst, n):\n    if n <= 1:\n        return 0\n\n    if lst[0] == 0:\n        return float('inf')\n\n    max_reach = lst[0]\n    steps_left = lst[0]\n    jumps = 1\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n\n        max_reach = max(max_reach, i + lst[i])\n        steps_left -= 1\n\n        if steps_left == 0:\n            jumps += 1\n\n            if i >= max_reach:\n                return float('inf')\n\n            steps_left = max_reach - i\n\n    return float('inf')"
    },
    {
        "id":90,
        "response":"def mul_consecutive_nums(lst):\n    if not lst or len(lst) < 2:\n        return []\n    \n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] * lst[i + 1])\n    \n    return result"
    },
    {
        "id":91,
        "response":"from collections import defaultdict\n\ndef group_element(lst):\n    if not lst:\n        return {}\n    \n    grouped = defaultdict(list)\n    \n    for item in lst:\n        if len(item) < 2:\n            continue\n        grouped[item[1]].append(item[0])\n    \n    return dict(grouped)"
    },
    {
        "id":92,
        "response":"def last_Two_Digits(n):\n    if n < 0:\n        return None\n    \n    if n <= 1:\n        return 1\n    \n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % 100\n    \n    return result"
    },
    {
        "id":93,
        "response":"import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r'\\s+', ' ', s)"
    },
    {
        "id":94,
        "response":"def extract_unique(dct):\n    unique_values = set()\n    for values in dct.values():\n        if isinstance(values, list):\n            unique_values.update(values)\n        else:\n            unique_values.add(values)\n    return list(unique_values)"
    },
    {
        "id":95,
        "response":"def check_greater(tup, tup2):\n    if len(tup) != len(tup2):\n        return False\n    \n    return all(b > a for a, b in zip(tup, tup2))"
    },
    {
        "id":96,
        "response":"\ndef zip_list(lst1: List, lst2: List) -> List:\n    if lst1 is None:\n        return lst2 if lst2 is not None else []\n    if lst2 is None:\n        return lst1\n    \n    result = []\n    max_length = max(len(lst1), len(lst2))\n    \n    for i in range(max_length):\n        if i < len(lst1):\n            result.append(lst1[i])\n        if i < len(lst2):\n            result.append(lst2[i])\n    "
    },
    {
        "id":97,
        "response":"def count_even(lst):\n    return len(list(filter(lambda x: x % 2 == 0, lst)))"
    },
    {
        "id":98,
        "response":"def sort_dict_item(dct):\n    return dict(sorted(dct.items(), key=lambda x: x[0][0] * x[0][1]))"
    },
    {
        "id":99,
        "response":"def min_Swaps(s, s2):\n    if len(s) != len(s2):\n        return -1\n    \n    if s.count('1') != s2.count('1'):\n        return -1\n    \n    mismatches = [i for i in range(len(s)) if s[i] != s2[i]]\n    \n    return len(mismatches) \/\/ 2"
    },
    {
        "id":100,
        "response":"def count_range_in_list(lst, n, n2):\n    if not lst:\n        return 0\n    \n    return sum(1 for num in lst if n <= num <= n2)"
    },
    {
        "id":101,
        "response":"def equilibrium_index(lst):\n    total_sum = sum(lst)\n    left_sum = 0\n    \n    for i in range(len(lst)):\n        right_sum = total_sum - left_sum - lst[i]\n        \n        if left_sum == right_sum:\n            return i\n        \n        left_sum += lst[i]\n    \n    return -1"
    },
    {
        "id":102,
        "response":"import bisect\n\ndef removals(arr, n, k):\n    arr.sort()\n    min_removals = n\n    \n    for i in range(n):\n        j = bisect.bisect_right(arr, arr[i] + k)\n        curr_length = j - i\n        min_removals = min(min_removals, n - curr_length)\n    \n    return min_removals"
    },
    {
        "id":103,
        "response":"def is_key_present(dct, n):\n    return n in dct"
    },
    {
        "id":104,
        "response":"def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    \n    sum = 0\n    for i in range(1, n):\n        sum += 1 \/ i\n    \n    return sum"
    },
    {
        "id":105,
        "response":"\n```python\ndef sort_sublists(lst):\n    if not lst:\n        return []\n    \n    return sorted(lst, key=lambda x: (len(x), x))"
    },
    {
        "id":106,
        "response":"def is_subset(lst, n, lst2, n2):\n    if n2 > n:\n        return False\n    \n    lst_set = set(lst)\n    \n    for item in lst2:\n        if item not in lst_set:\n            return False\n    \n    return True"
    },
    {
        "id":107,
        "response":"def count_Set_Bits(n):\n    if n <= 0:\n        return 0\n    \n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    power -= 1\n    \n    totalBits = 0\n    \n    totalBits += power * (1 << (power - 1))\n    totalBits += n - (1 << power) + 1\n    \n    totalBits += count_Set_Bits(n - (1 << power))\n    \n    return totalBits"
    },
    {
        "id":108,
        "response":"\n```python\ndef Convert(s):\n    if s is None or s == \"\":\n        return []\n    return list(s)"
    },
    {
        "id":109,
        "response":"from typing import List, Tuple\n\ndef get_unique(lst: List[Tuple]) -> List[int]:\n    if not lst:\n        return []\n    \n    unique_keys = []\n    value_count = {}\n    \n    for item in lst:\n        value = item[1]\n        if value not in value_count:\n            value_count[value] = 1\n        else:\n            value_count[value] += 1\n    \n    for item in lst:\n        key, value = item\n        if value_count[value] == 1:\n            unique_keys.append(key)\n    \n    return sorted(unique_keys)"
    },
    {
        "id":110,
        "response":"\ndef front_and_rear(tup: typing.Tuple) -> typing.Tuple:\n    if not tup:\n        raise ValueError(\"Tuple is empty\")"
    },
    {
        "id":111,
        "response":"def product_Equal(n):\n    str_n = str(n)\n    even_product = 1\n    odd_product = 1\n    \n    for i in range(len(str_n)):\n        digit = int(str_n[i])\n        if i % 2 == 0:\n            even_product *= digit\n        else:\n            odd_product *= digit\n    \n    return even_product == odd_product"
    },
    {
        "id":112,
        "response":"def remove_duplicate(lst):\n    return list(dict.fromkeys(lst))"
    },
    {
        "id":113,
        "response":"def check_valid(tup):\n    if not tup:\n        return False\n    \n    for item in tup:\n        if item is None or (isinstance(item, (int, float)) and not isinstance(item, bool)):\n            return False\n    \n    return True"
    },
    {
        "id":114,
        "response":"import math\n\ndef count_Fac(n):\n    if n <= 1:\n        return 0\n    \n    distinct_powers = set()\n    \n    for p in range(2, int(math.sqrt(n)) + 1):\n        if n % p == 0:\n            power = 0\n            while n % p == 0:\n                n \/\/= p\n                power += 1\n            distinct_powers.add(power)\n    \n    if n > 1:\n        distinct_powers.add(1)\n    \n    return len(distinct_powers)"
    },
    {
        "id":115,
        "response":"def str_to_tuple(s):\n    if not s or not isinstance(s, str):\n        return ()\n    \n    try:\n        return tuple(int(x) for x in s.split())\n    except ValueError:\n        return ()"
    },
    {
        "id":116,
        "response":"import math\n\ndef rhombus_perimeter(side_length):\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number\")\n    \n    return 4 * side_length"
    },
    {
        "id":117,
        "response":"import math\n\ndef sd_calc(lst):\n    if not lst or len(lst) < 2:\n        return 0\n    \n    n = len(lst)\n    mean = sum(lst) \/ n\n    \n    variance = sum((x - mean) ** 2 for x in lst) \/ (n - 1)\n    \n    return math.sqrt(variance)"
    },
    {
        "id":118,
        "response":"def alternate_elements(lst):\n    if not lst:\n        return []\n    return lst[::2]"
    },
    {
        "id":119,
        "response":"import re\n\ndef text_match(text):\n    pattern = r'b*a'\n    if re.search(pattern, text):\n        return True\n    return False"
    },
    {
        "id":120,
        "response":"def add_dict_to_tuple(tup, dct):\n    if not isinstance(tup, tuple) or not isinstance(dct, dict):\n        raise TypeError(\"First argument must be a tuple and second argument must be a dictionary\")\n    \n    return tup + tuple(dct.items())"
    },
    {
        "id":121,
        "response":"def maxAverageOfPath(lst, n):\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = lst[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + lst[i][0]\n        dp[0][i] = dp[0][i-1] + lst[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + lst[i][j]\n    \n    return dp[n-1][n-1] \/ (2*n - 1)"
    },
    {
        "id":122,
        "response":"def filter_data(dct, height, width):\n    return {name: stats for name, stats in dct.items() \n            if stats['height'] >= height and stats['width'] >= width}"
    },
    {
        "id":123,
        "response":"from typing import List\n\ndef count_same_pair(lst1: List[int], lst2: List[int]) -> int:\n    if not lst1 or not lst2 or len(lst1) != len(lst2):\n        return 0\n    \n    return sum(map(lambda x, y: x == y, lst1, lst2))"
    },
    {
        "id":124,
        "response":"def power_base_sum(base, power):\n    if base <= 0 or power < 0:\n        return 0\n    \n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    \n    return digit_sum"
    },
    {
        "id":125,
        "response":"import re\n\ndef extract_quotation(s):\n    if not isinstance(s, str):\n        return []\n    \n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, s)\n    \n    return matches"
    },
    {
        "id":126,
        "response":"def multiply_elements(tup):\n    if not tup or len(tup) < 2:\n        return []\n    \n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] * tup[i+1])\n    \n    return result"
    },
    {
        "id":127,
        "response":"import re\n\ndef remove_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":128,
        "response":"def sum_list(lst, lst2):\n    if len(lst) != len(lst2):\n        return None\n    \n    return [lst[i] + lst2[i] for i in range(len(lst))]"
    },
    {
        "id":129,
        "response":"def add_list(lst1, lst2):\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Lists must have the same length\")\n    return list(map(lambda x, y: x + y, lst1, lst2))"
    },
    {
        "id":130,
        "response":"def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    \n    return result"
    },
    {
        "id":131,
        "response":"import math\n\ndef lateralsurface_cone(r, h):\n    if r <= 0 or h <= 0:\n        return 0\n    return math.pi * r * math.sqrt(r**2 + h**2)"
    },
    {
        "id":132,
        "response":"\ndef replace_specialchar(s):\n    if s is None:\n        return None"
    },
    {
        "id":133,
        "response":"def find_first_occurrence(lst, n):\n    left, right = 0, len(lst) - 1\n    \n    while left <= right:\n        mid = (left + right) \/\/ 2\n        \n        if lst[mid] == n:\n            if mid == 0 or lst[mid - 1] < n:\n                return mid\n            right = mid - 1\n        elif lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "id":134,
        "response":"def sum_Of_Subarray_Prod(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= lst[j]\n            total_sum += product\n    \n    return total_sum"
    },
    {
        "id":135,
        "response":"def toggle_middle_bits(n):\n    if n <= 3:\n        return n\n    \n    bit_length = n.bit_length()\n    \n    if bit_length <= 2:\n        return n\n    \n    mask = ((1 << (bit_length - 2)) - 1) << 1\n    \n    return n ^ mask"
    },
    {
        "id":136,
        "response":"import bisect\n\ndef left_insertion(lst, n):\n    return bisect.bisect_left(lst, n)"
    },
    {
        "id":137,
        "response":"import re\n\ndef check_str(s):\n    if not s:\n        return False\n    return bool(re.match(r'^[aeiouAEIOU]', s))"
    },
    {
        "id":138,
        "response":"def geometric_sum(n):\n    if n <= 0:\n        return 0\n    \n    sum = 0\n    for i in range(n):\n        sum += 1 \/ (2 ** i)\n    \n    return sum"
    },
    {
        "id":139,
        "response":"import math\n\ndef find_Index(n):\n    if n <= 0:\n        return -1\n    \n    index = 1\n    while True:\n        triangular_num = (index * (index + 1)) \/\/ 2\n        if len(str(triangular_num)) == n:\n            return index\n        index += 1"
    },
    {
        "id":140,
        "response":"    if not tup or len(tup) % 2 != 0:\n        return {}\n    "
    },
    {
        "id":141,
        "response":"def all_Characters_Same(s):\n    if not s:\n        return True\n    return len(set(s)) == 1"
    },
    {
        "id":142,
        "response":"import math\n\ndef area_tetrahedron(n):\n    if n <= 0:\n        return 0\n    return math.sqrt(3) * n * n"
    },
    {
        "id":143,
        "response":"def rotate_right(lst, n, n2):\n    if not lst:\n        return lst\n    \n    n2 = n2 % len(lst)\n    if n2 == 0:\n        return lst\n    \n    return lst[-n2:] + lst[:-n2]"
    },
    {
        "id":144,
        "response":"def check_none(tup):\n    return any(item is None for item in tup)"
    },
    {
        "id":145,
        "response":"def divisible_by_digits(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result"
    },
    {
        "id":146,
        "response":"import math\n\ndef sector_area(radius, angle):\n    if radius <= 0 or angle < 0:\n        return 0\n    return (angle \/ 360) * math.pi * radius ** 2"
    },
    {
        "id":147,
        "response":"def lcs_of_three(s1, s2, s3, m, n, o):\n    L = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif s1[i-1] == s2[j-1] == s3[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    return L[m][n][o]"
    },
    {
        "id":148,
        "response":"\ndef capital_words_spaces(s):\n    if not s:\n        return s\n    "
    },
    {
        "id":149,
        "response":"def sort_numeric_strings(lst):\n    try:\n        return sorted(lst, key=lambda x: int(x))\n    except (ValueError, TypeError):\n        return []"
    },
    {
        "id":150,
        "response":"def add_tuple(lst, tup):\n    if not isinstance(lst, list) or not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a list and a tuple\")\n    \n    result = lst.copy()\n    result.extend(tup)\n    return result"
    },
    {
        "id":151,
        "response":"    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and lst[i] > lst[left]:\n            return False\n        \n        if right < n and lst[i] > lst[right]:\n            return False\n    "
    },
    {
        "id":152,
        "response":"def jacobsthal_num(n):\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    \n    return b"
    },
    {
        "id":153,
        "response":"from typing import List, Tuple\n\ndef min_k(lst: List[Tuple], k: int) -> List[Tuple]:\n    if not lst or k <= 0:\n        return []\n    \n    k = min(k, len(lst))\n    return sorted(lst, key=lambda x: x[0])[:k]"
    },
    {
        "id":154,
        "response":"def extract_index_list(lst1, lst2, lst3):\n    result = []\n    for i in range(min(len(lst1), len(lst2), len(lst3))):\n        if lst1[i] == lst2[i] == lst3[i]:\n            result.append(lst1[i])\n    return result"
    },
    {
        "id":155,
        "response":"def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    unique_nums = sorted(set(lst))\n    \n    if len(unique_nums) < 2:\n        return None\n    \n    return unique_nums[1]"
    },
    {
        "id":156,
        "response":"import re\n\ndef text_match_zero_one(s):\n    pattern = r'[0b]'\n    if re.search(pattern, s):\n        return True\n    return False"
    },
    {
        "id":157,
        "response":"def count_reverse_pairs(lst):\n    count = 0\n    n = len(lst)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "id":158,
        "response":"from typing import List\n\ndef unique_sublists(lst: List[List]) -> int:\n    if not lst:\n        return 0\n    \n    unique_lists = set(tuple(sublist) for sublist in lst)\n    return len(unique_lists)"
    },
    {
        "id":159,
        "response":"import re\n\ndef is_decimal(s):\n    if not s:\n        return False\n    \n    pattern = r'^-?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))"
    },
    {
        "id":160,
        "response":"def unique_Element(lst, n):\n    if not lst or n <= 0:\n        return False\n    \n    first_element = lst[0]\n    for i in range(1, n):\n        if lst[i] != first_element:\n            return False\n    \n    return True"
    },
    {
        "id":161,
        "response":"import math\n\ndef arc_length(radius, angle):\n    if radius < 0:\n        raise ValueError(\"Radius must be non-negative\")\n    \n    if not isinstance(angle, (int, float)):\n        raise TypeError(\"Angle must be a number\")\n    \n    angle_radians = math.radians(angle)\n    arc_length = radius * angle_radians\n    \n    return arc_length"
    },
    {
        "id":162,
        "response":"def check_monthnumber_number(n):\n    if not isinstance(n, int) or n < 1 or n > 12:\n        return False\n    \n    months_with_30_days = [4, 6, 9, 11]\n    \n    return n in months_with_30_days"
    },
    {
        "id":163,
        "response":"import sys\n\ndef find_Min_Diff(tup, n):\n    if n < 2:\n        return 0\n    \n    tup = sorted(tup)\n    min_diff = sys.maxsize\n    \n    for i in range(1, n):\n        diff = tup[i] - tup[i-1]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff"
    },
    {
        "id":164,
        "response":"import re\n\ndef number_ctr(s):\n    if not s or not isinstance(s, str):\n        return 0\n    \n    matches = re.findall(r'\\d+', s)\n    \n    if not matches:\n        return 0\n    \n    return sum(int(num) for num in matches)"
    },
    {
        "id":165,
        "response":"def is_polite(n):\n    def sum_of_consecutive(start, count):\n        return (count * (2 * start + count - 1)) \/\/ 2\n\n    polite_count = 0\n    current_num = 2\n\n    while True:\n        for length in range(2, current_num):\n            start = (current_num - sum_of_consecutive(1, length) + length) \/\/ length\n            \n            if start > 0 and sum_of_consecutive(start, length) == current_num:\n                polite_count += 1\n                break\n        \n        if polite_count == n:\n            return current_num\n        \n        current_num += 1"
    },
    {
        "id":166,
        "response":"def pair_wise(lst):\n    if not lst or len(lst) < 2:\n        return []\n    \n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "id":167,
        "response":"from typing import List\n\ndef get_Pairs_Count(lst: List[int], n: int, n2: int) -> int:\n    if not lst or n <= 0 or n2 <= 0:\n        return 0\n    \n    count = 0\n    num_freq = {}\n    \n    for num in lst:\n        complement = n2 - num\n        if complement in num_freq:\n            count += num_freq[complement]\n        \n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    return count"
    },
    {
        "id":168,
        "response":"def check_Odd_Parity(n):\n    binary = bin(n)[2:]\n    count_ones = binary.count('1')\n    return count_ones % 2 != 0"
    },
    {
        "id":169,
        "response":"def Diff(lst, lst2):\n    set1 = set(lst)\n    set2 = set(lst2)\n    return list(set1.difference(set2)) + list(set2.difference(set1))"
    },
    {
        "id":170,
        "response":"def odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(n):\n        odd_num = 2 * i + 1\n        total_sum += odd_num ** 4\n    \n    return total_sum"
    },
    {
        "id":171,
        "response":"def check_expression(s):\n    stack = []\n    opening = \"({[\"\n    closing = \")}]\"\n    pairs = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in s:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    \n    return len(stack) == 0"
    },
    {
        "id":172,
        "response":"def remove_length(s, k):\n    if not s or k <= 0:\n        return s\n    \n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    \n    return ' '.join(filtered_words)"
    },
    {
        "id":173,
        "response":"def occurrence_substring(s, s2):\n    if not s or not s2:\n        return []\n    \n    result = []\n    start = 0\n    \n    while True:\n        index = s.find(s2, start)\n        if index == -1:\n            break\n        result.append(index)\n        start = index + 1\n    \n    return result"
    },
    {
        "id":174,
        "response":"import re\n\ndef check_email(s):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, s))"
    },
    {
        "id":175,
        "response":"\n```python\ndef odd_position(lst):\n    if not lst:\n        return False\n    \n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    \n    return True"
    },
    {
        "id":176,
        "response":"def count_vowels(s):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    \n    if not s or len(s) < 3:\n        return 0\n    \n    for i in range(1, len(s) - 1):\n        if s[i] not in vowels:\n            if s[i-1] in vowels and s[i+1] in vowels:\n                count += 1\n    \n    return count"
    },
    {
        "id":177,
        "response":"def find_Sum(lst, n):\n    unique_elements = set()\n    duplicates = set()\n    \n    for num in lst:\n        if num in unique_elements:\n            duplicates.add(num)\n        else:\n            unique_elements.add(num)\n    \n    non_repeating = unique_elements - duplicates\n    \n    return sum(non_repeating)"
    },
    {
        "id":178,
        "response":"from typing import List\n\ndef pack_consecutive_duplicates(lst: List) -> List[List]:\n    if not lst:\n        return []\n    \n    result = []\n    current_group = [lst[0]]\n    \n    for item in lst[1:]:\n        if item == current_group[-1]:\n            current_group.append(item)\n        else:\n            result.append(current_group)\n            current_group = [item]\n    \n    result.append(current_group)\n    \n    return result"
    },
    {
        "id":179,
        "response":"from typing import List\n\ndef unique_sublists(lst: List[List]) -> int:\n    if not lst:\n        return 0\n    \n    unique_lists = set(tuple(sublist) for sublist in lst)\n    return len(unique_lists)"
    },
    {
        "id":180,
        "response":"from itertools import combinations\n\ndef find_combinations(lst):\n    if not lst or len(lst) < 2:\n        return []\n    \n    result = []\n    for r in range(2, len(lst) + 1):\n        result.extend(list(combinations(lst, r)))\n    \n    return result"
    },
    {
        "id":181,
        "response":"def count_Divisors(n):\n    even_divisors = 0\n    odd_divisors = 0\n    \n    if n <= 0:\n        return 0, 0\n    \n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_divisors += 1\n            else:\n                odd_divisors += 1\n    \n    return even_divisors, odd_divisors"
    },
    {
        "id":182,
        "response":"def Odd_Length_Sum(lst):\n    n = len(lst)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(lst[i:j+1])\n    return total_sum"
    },
    {
        "id":183,
        "response":"\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r \/ 255.0, g \/ 255.0, b \/ 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    diff = mx - mn\n    \n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) \/ diff) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) \/ diff) + 120) % 360\n    else:\n        h = (60 * ((r - g) \/ diff) + 240) % 360\n    \n    if mx == 0:\n        s = 0\n    else:\n        s = (diff \/ mx) * 100\n    \n    v = mx * 100\n    "
    },
    {
        "id":184,
        "response":"\ndef mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    "
    },
    {
        "id":185,
        "response":"import ast\n\ndef tuple_str_int(s):\n    try:\n        parsed_tuple = ast.literal_eval(s)\n        return tuple(int(x) for x in parsed_tuple)\n    except (ValueError, SyntaxError, TypeError):\n        return ()"
    },
    {
        "id":186,
        "response":"def right_insertion(lst, n):\n    left, right = 0, len(lst)\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "id":187,
        "response":"import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    return False"
    },
    {
        "id":188,
        "response":"def new_tuple(lst, s):\n    if not isinstance(lst, list) or not isinstance(s, str):\n        return None\n    \n    result = tuple(lst) + tuple(s)\n    return result"
    },
    {
        "id":189,
        "response":"import math\n\ndef perimeter_polygon(n, side_length):\n    if n < 3:\n        raise ValueError(\"Number of sides must be at least 3\")\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive\")\n    \n    return n * side_length"
    },
    {
        "id":190,
        "response":"def even_position(lst):\n    if not lst:\n        return False\n    \n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    \n    return True"
    },
    {
        "id":191,
        "response":"def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, (list, tuple, set, dict)))"
    },
    {
        "id":192,
        "response":"def count_list(lst):\n    return sum(1 for item in lst if isinstance(item, list))"
    },
    {
        "id":193,
        "response":"def last(lst, n, n2):\n    left, right = 0, n - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) \/\/ 2\n\n        if lst[mid] == n2:\n            result = mid\n            left = mid + 1\n        elif lst[mid] < n2:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "id":194,
        "response":"import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))"
    },
    {
        "id":195,
        "response":"import heapq\n\ndef cheap_items(lst, n):\n    if not lst or n <= 0:\n        return []\n    \n    n = min(n, len(lst))\n    \n    return heapq.nsmallest(n, lst, key=lambda x: x['price'])"
    },
    {
        "id":196,
        "response":"def return_sum(dct):\n    if not isinstance(dct, dict):\n        return 0\n    \n    return sum(dct.values())"
    },
    {
        "id":197,
        "response":"def sum_in_Range(l, r):\n    if l > r:\n        l, r = r, l\n    \n    start = l if l % 2 != 0 else l + 1\n    end = r if r % 2 != 0 else r - 1\n    \n    count = (end - start) \/\/ 2 + 1\n    \n    return count * (start + end) \/\/ 2"
    },
    {
        "id":198,
        "response":"def _sum(lst):\n    if not lst:\n        return 0\n    return sum(lst)"
    },
    {
        "id":199,
        "response":"def left_Rotate(n, d):\n    if n == 0 or d == 0:\n        return n\n    \n    bits = n.bit_length()\n    d = d % bits\n    \n    left_part = (n << d) & ((1 << bits) - 1)\n    right_part = n >> (bits - d)\n    \n    return left_part | right_part"
    },
    {
        "id":200,
        "response":"def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"
    },
    {
        "id":201,
        "response":"\ndef test_three_equal(n, n2, n3):\n    if n == n2 == n3:\n        return 3\n    elif n == n2 or n == n3 or n2 == n3:\n        return 2\n    else:"
    },
    {
        "id":202,
        "response":"def count_Rotation(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    left, right = 0, n - 1\n    \n    while left <= right:\n        if lst[left] <= lst[right]:\n            return left\n        \n        mid = (left + right) \/\/ 2\n        next_mid = (mid + 1) % n\n        prev_mid = (mid - 1 + n) % n\n        \n        if lst[mid] <= lst[next_mid] and lst[mid] <= lst[prev_mid]:\n            return mid\n        \n        if lst[mid] <= lst[right]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return 0"
    },
    {
        "id":203,
        "response":"import math\n\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    \n    root = int(math.sqrt(n))\n    return root * root == n"
    },
    {
        "id":204,
        "response":"def is_Product_Even(lst, n):\n    if not lst or n <= 0:\n        return False\n    \n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    \n    return product % 2 == 0"
    },
    {
        "id":205,
        "response":"def max_sum_list(lst):\n    if not lst:\n        return []\n    \n    max_sum = float('-inf')\n    max_sum_lists = []\n    \n    for sublist in lst:\n        current_sum = sum(sublist)\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_lists = [sublist]\n        elif current_sum == max_sum:\n            max_sum_lists.append(sublist)\n    \n    return max_sum_lists"
    },
    {
        "id":206,
        "response":"def max_run_uppercase(s):\n    if not s:\n        return 0\n    \n    max_count = 0\n    current_count = 0\n    \n    for char in s:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    \n    return max_count"
    },
    {
        "id":207,
        "response":"def first_odd(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None"
    },
    {
        "id":208,
        "response":"def check_K(tup, k):\n    if not tup or k is None:\n        return False\n    \n    return k in tup"
    },
    {
        "id":209,
        "response":"def check_smaller(tup1, tup2):\n    if len(tup1) != len(tup2):\n        return False\n    \n    for i in range(len(tup1)):\n        if tup2[i] >= tup1[i]:\n            return False\n    \n    return True"
    },
    {
        "id":210,
        "response":"from typing import List, Any\n\ndef count_variable(*args: Any) -> List[int]:\n    result = []\n    for i, arg in enumerate(args, 1):\n        result.extend([arg] * i)\n    return result"
    },
    {
        "id":211,
        "response":"def check_identical(lst, lst2):\n    if len(lst) != len(lst2):\n        return False\n    \n    for tuple1, tuple2 in zip(lst, lst2):\n        if tuple1 != tuple2:\n            return False\n    \n    return True"
    },
    {
        "id":212,
        "response":"import re\n\ndef road_rd(s):\n    return re.sub(r'\\b[Rr]oad\\b', 'rd.', s)"
    },
    {
        "id":213,
        "response":"def string_length(s):\n    if s is None:\n        return 0\n    return len(s)"
    },
    {
        "id":214,
        "response":"import math\n\ndef rhombus_area(diagonal1, diagonal2):\n    if diagonal1 <= 0 or diagonal2 <= 0:\n        raise ValueError(\"Diagonals must be positive numbers\")\n    \n    area = (diagonal1 * diagonal2) \/ 2\n    return area"
    },
    {
        "id":215,
        "response":"def sort_by_dnf(lst, n):\n    low = 0\n    mid = 0\n    high = n - 1\n\n    while mid <= high:\n        if lst[mid] == 0:\n            lst[low], lst[mid] = lst[mid], lst[low]\n            low += 1\n            mid += 1\n        elif lst[mid] == 1:\n            mid += 1\n        else:\n            lst[mid], lst[high] = lst[high], lst[mid]\n            high -= 1\n\n    return lst"
    },
    {
        "id":216,
        "response":"def clear_tuple(tup):\n    return ()"
    },
    {
        "id":217,
        "response":"def div_of_nums(lst, m, n):\n    return list(filter(lambda x: x % m == 0 or x % n == 0, lst))"
    },
    {
        "id":218,
        "response":"def lower_ctr(s):\n    return sum(1 for char in s if char.islower())"
    },
    {
        "id":219,
        "response":"\ndef count_duplic(lst):\n    if not lst:\n        return {}\n    \n    freq = {}\n    current_num = lst[0]\n    current_count = 1\n    \n    for num in lst[1:]:\n        if num == current_num:\n            current_count += 1\n        else:\n            freq[current_num] = max(freq.get(current_num, 0), current_count)\n            current_num = num\n            current_count = 1\n    \n    freq[current_num] = max(freq.get(current_num, 0), current_count)\n    "
    },
    {
        "id":220,
        "response":"def check_monthnum_number(n):\n    if not isinstance(n, int) or n < 1 or n > 12:\n        return False\n    \n    return n == 2"
    },
    {
        "id":221,
        "response":"\n```python\ndef merge_dictionaries(dct, dct2):\n    if not isinstance(dct, dict) or not isinstance(dct2, dict):\n        raise TypeError(\"Both arguments must be dictionaries\")\n    \n    merged = dct.copy()\n    merged.update(dct2)\n    \n    return merged"
    },
    {
        "id":222,
        "response":"import re\n\ndef pass_validity(s):\n    if len(s) < 8:\n        return False\n    \n    if not re.search(r'[A-Z]', s):\n        return False\n    \n    if not re.search(r'[a-z]', s):\n        return False\n    \n    if not re.search(r'\\d', s):\n        return False\n    \n    special_chars = r'[!@#$%^&*(),.?\":{}|<>]'\n    if not re.search(special_chars, s):\n        return False\n    \n    return True"
    },
    {
        "id":223,
        "response":"import re\n\ndef check_substring(s, s2):\n    if not s or not s2:\n        return False\n    pattern = f'^{re.escape(s2)}'\n    return bool(re.match(pattern, s))"
    },
    {
        "id":224,
        "response":"def remove_even(lst):\n    return [num for num in lst if num % 2 != 0]"
    },
    {
        "id":225,
        "response":"def access_elements(lst, lst2):\n    try:\n        return [lst[index] for index in lst2]\n    except IndexError:\n        return []"
    },
    {
        "id":226,
        "response":"def check_Type_Of_Triangle(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return \"Not a valid triangle\"\n    \n    if n1 + n2 <= n3 or n1 + n3 <= n2 or n2 + n3 <= n1:\n        return \"Not a valid triangle\"\n    \n    if n1 == n2 == n3:\n        return \"Equilateral\"\n    \n    if n1 == n2 or n2 == n3 or n1 == n3:\n        return \"Isosceles\"\n    \n    return \"Scalene\""
    },
    {
        "id":227,
        "response":"def sum_column(lst, n):\n    if not lst or n < 0:\n        return 0\n    \n    try:\n        return sum(row[n] for row in lst if n < len(row))\n    except (IndexError, TypeError):\n        return 0"
    },
    {
        "id":228,
        "response":"def count_alpha_dig_spl(s):\n    alphabets = sum(c.isalpha() for c in s)\n    digits = sum(c.isdigit() for c in s)\n    special_chars = len(s) - alphabets - digits\n    return [alphabets, digits, special_chars]"
    },
    {
        "id":229,
        "response":"from collections import Counter\n\ndef second_frequent(lst):\n    if not lst or len(set(lst)) < 2:\n        return None\n    \n    counts = Counter(lst)\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_counts[1][0]"
    },
    {
        "id":230,
        "response":"import math\n\ndef round_up(n, decimals=0):\n    multiplier = 10 ** decimals\n    return math.ceil(n * multiplier) \/ multiplier"
    },
    {
        "id":231,
        "response":"def count_Pairs(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    pair_count = 0\n    frequency = {}\n    \n    for num in lst:\n        if num in frequency:\n            pair_count += frequency[num]\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    return pair_count"
    },
    {
        "id":232,
        "response":"import re\n\ndef extract_max(s):\n    numbers = re.findall(r'\\d+', s)\n    if not numbers:\n        return None\n    return max(map(int, numbers))"
    },
    {
        "id":233,
        "response":"def get_key(dct):\n    if not isinstance(dct, dict):\n        return []\n    return list(dct.keys())"
    },
    {
        "id":234,
        "response":"def generate_matrix(n):\n    if n <= 0:\n        return []\n    \n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    num = 1\n    top, bottom, left, right = 0, n-1, 0, n-1\n    \n    while top <= bottom and left <= right:\n        for col in range(left, right + 1):\n            matrix[top][col] = num ** 2\n            num += 1\n        top += 1\n        \n        for row in range(top, bottom + 1):\n            matrix[row][right] = num ** 2\n            num += 1\n        right -= 1\n        \n        if top <= bottom:\n            for col in range(right, left - 1, -1):\n                matrix[bottom][col] = num ** 2\n                num += 1\n            bottom -= 1\n        \n        if left <= right:\n            for row in range(bottom, top - 1, -1):\n                matrix[row][left] = num ** 2\n                num += 1\n            left += 1\n    \n    return matrix"
    },
    {
        "id":235,
        "response":"import math\n\ndef slope(n1, n2, n3, n4):\n    if n3 == n1:\n        if n4 == n2:\n            return 0\n        else:\n            return math.inf\n    return (n4 - n2) \/ (n3 - n1)"
    },
    {
        "id":236,
        "response":"\n```python\ndef max_sub_array_sum(lst, n):\n    if not lst:\n        return 0\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    current_length = 0\n    \n    for num in lst:\n        if current_sum + num > num:\n            current_sum += num\n            current_length += 1\n        else:\n            current_sum = num\n            current_length = 1\n        \n        if current_sum > max_sum or (current_sum == max_sum and current_length > max_length):\n            max_sum = current_sum\n            max_length = current_length\n    \n    return max_length"
    },
    {
        "id":237,
        "response":"def cube_Sum(n):\n    if n <= 0:\n        return 0\n    \n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    \n    return sum"
    },
    {
        "id":238,
        "response":"\n```python\ndef min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n\n    mismatched_zeros = 0\n    mismatched_ones = 0\n\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if s1[i] == '0':\n                mismatched_zeros += 1\n            else:\n                mismatched_ones += 1\n\n    if mismatched_zeros != mismatched_ones:\n        return -1\n\n    return mismatched_zeros"
    },
    {
        "id":239,
        "response":"def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[0])"
    },
    {
        "id":240,
        "response":"import math\n\ndef Check_Solution(n, n2, n3):\n    a, b, c = n, n2, n3\n    \n    if a == 0:\n        return False\n    \n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return False\n    \n    root1 = (-b + math.sqrt(discriminant)) \/ (2*a)\n    root2 = (-b - math.sqrt(discriminant)) \/ (2*a)\n    \n    return abs(root1) == abs(root2) and root1 * root2 < 0"
    },
    {
        "id":241,
        "response":"def get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "id":242,
        "response":"def get_odd_occurrence(lst, n):\n    if not lst or n <= 0:\n        return None\n    \n    result = 0\n    for num in lst:\n        result ^= num\n    \n    return result"
    },
    {
        "id":243,
        "response":"import heapq\n\ndef nth_super_ugly_number(n, primes):\n    if n <= 0 or not primes:\n        return 0\n    \n    ugly = [1]\n    heap = []\n    for p in primes:\n        heapq.heappush(heap, (p, p, 0))\n    \n    while len(ugly) < n:\n        next_ugly, prime, idx = heapq.heappop(heap)\n        \n        if next_ugly != ugly[-1]:\n            ugly.append(next_ugly)\n        \n        heapq.heappush(heap, (prime * ugly[idx + 1], prime, idx + 1))\n    \n    return ugly[-1]"
    },
    {
        "id":244,
        "response":"def get_Number(n, k):\n    if k <= 0 or k > n:\n        return -1\n    \n    odd_count = (n + 1) \/\/ 2\n    even_count = n \/\/ 2\n    \n    if k <= odd_count:\n        return 2 * k - 1\n    else:\n        return 2 * (k - odd_count)"
    },
    {
        "id":245,
        "response":"import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    \n    factorial = math.factorial(n)\n    return len(str(factorial))"
    },
    {
        "id":246,
        "response":"def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    \n    platforms_needed = 1\n    max_platforms = 1\n    i = 1\n    j = 0\n    \n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            platforms_needed += 1\n            i += 1\n        elif arr[i] > dep[j]:\n            platforms_needed -= 1\n            j += 1\n        \n        max_platforms = max(max_platforms, platforms_needed)\n    \n    return max_platforms"
    },
    {
        "id":247,
        "response":"def lcopy(lst):\n    if not isinstance(lst, tuple) or len(lst) != 1 or not isinstance(lst[0], list):\n        return []\n    return lst[0].copy()"
    },
    {
        "id":248,
        "response":"def area_trapezium(a, b, h):\n    if not all(isinstance(x, (int, float)) for x in [a, b, h]):\n        raise TypeError(\"Inputs must be numeric\")\n    if h <= 0:\n        raise ValueError(\"Height must be positive\")\n    return 0.5 * (a + b) * h"
    },
    {
        "id":249,
        "response":"def Sum(n):\n    if n <= 0:\n        return 0\n    \n    divisor_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_sum += i\n    \n    return divisor_sum"
    },
    {
        "id":250,
        "response":"def is_triangleexists(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    \n    if n1 + n2 + n3 != 180:\n        return False\n    \n    return True"
    },
    {
        "id":251,
        "response":"import math\n\ndef Sum_of_Inverse_Divisors(n, n2):\n    if n <= 0 or n2 <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i <= n2:\n            total_sum += 1 \/ i\n    \n    return round(total_sum, 2)"
    },
    {
        "id":252,
        "response":""
    },
    {
        "id":253,
        "response":"\n```python\ndef sum_of_odd_Factors(n):\n    if n <= 0:\n        return 0\n    \n    odd_factors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 != 0:\n            odd_factors_sum += i\n    \n    return odd_factors_sum"
    },
    {
        "id":254,
        "response":"import heapq\n\ndef raw_heap(lst):\n    if lst is None:\n        return []\n    heapq.heapify(lst)\n    return lst"
    },
    {
        "id":255,
        "response":"\n```python\ndef check_Even_Parity(n):\n    if n is None:\n        return False\n    \n    binary = bin(n)[2:]\n    count_ones = binary.count('1')\n    \n    return count_ones % 2 == 0"
    },
    {
        "id":256,
        "response":"def find_Min_Swaps(lst, n):\n    ones = sum(lst)\n    if ones == 0 or ones == n:\n        return 0\n    \n    max_ones_in_window = current_ones = sum(lst[:ones])\n    \n    for i in range(1, n - ones + 1):\n        current_ones = current_ones - lst[i-1] + lst[i+ones-1]\n        max_ones_in_window = max(max_ones_in_window, current_ones)\n    \n    return ones - max_ones_in_window"
    },
    {
        "id":257,
        "response":"from typing import List\n\ndef listify_list(lst: List[str]) -> List[List[str]]:\n    return list(map(list, lst))"
    },
    {
        "id":258,
        "response":"def count_list(lst):\n    if not lst:\n        return []\n    \n    count_list = []\n    squares_list = []\n    \n    for sublist in lst:\n        count_list.append(len(sublist))\n        squares_list.append([x**2 for x in sublist])\n    \n    return [count_list, squares_list]"
    },
    {
        "id":259,
        "response":"from itertools import combinations\n\ndef sub_lists(lst):\n    if not lst:\n        return [[]]\n    \n    result = [[]]\n    for length in range(1, len(lst) + 1):\n        result.extend(list(combinations(lst, length)))\n    \n    return [list(sublist) for sublist in result]"
    },
    {
        "id":260,
        "response":"import re\n\ndef check_alphanumeric(s):\n    if not s:\n        return False\n    \n    pattern = r'^.*[a-zA-Z0-9]$'\n    return bool(re.match(pattern, s))"
    },
    {
        "id":261,
        "response":"from typing import List\n\ndef anagram_lambda(lst: List[str], s: str) -> List[str]:\n    return list(filter(lambda x: sorted(x) == sorted(s), lst))"
    },
    {
        "id":262,
        "response":"from collections import Counter\nimport re\n\ndef n_common_words(s, n):\n    if not s or not isinstance(s, str):\n        return []\n    \n    words = re.findall(r'\\w+', s.lower())\n    \n    if not words:\n        return []\n    \n    return [word for word, count in Counter(words).most_common(n)]"
    },
    {
        "id":263,
        "response":"def find_longest_conseq_subseq(lst, n):\n    if not lst:\n        return 0\n    \n    num_set = set(lst)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length"
    },
    {
        "id":264,
        "response":"def palindrome_lambda(lst):\n    return list(filter(lambda x: x == x[::-1], lst))"
    },
    {
        "id":265,
        "response":"def ntimes_list(lst, n):\n    return list(map(lambda x: x, lst * n))"
    },
    {
        "id":266,
        "response":"def check_monthnumb(s):\n    months_with_31_days = ['january', 'march', 'may', 'july', 'august', 'october', 'december']\n    return s.lower() in months_with_31_days"
    },
    {
        "id":267,
        "response":"def min_Num(lst, n):\n    total_sum = sum(lst)\n    \n    if total_sum % 2 == 0:\n        return 0\n    \n    return 1"
    },
    {
        "id":268,
        "response":"def length_Of_Last_Word(s):\n    s = s.strip()\n    if not s:\n        return 0\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])"
    },
    {
        "id":269,
        "response":"def remove_list_range(lst, n, n2):\n    return [sublist for sublist in lst if n <= len(sublist) <= n2]"
    },
    {
        "id":270,
        "response":"def sum_positivenum(lst):\n    return sum(filter(lambda x: x > 0, lst))"
    },
    {
        "id":271,
        "response":"def are_Rotations(s, s2):\n    if len(s) != len(s2):\n        return False\n    \n    temp = s + s\n    if s2 in temp:\n        return True\n    \n    return False"
    },
    {
        "id":272,
        "response":"def check_subset(lst, lst2):\n    def flatten(nested_list):\n        flat = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flat.extend(flatten(item))\n            else:\n                flat.append(item)\n        return flat\n\n    flat1 = flatten(lst)\n    flat2 = flatten(lst2)\n\n    return all(item in flat1 for item in flat2)"
    },
    {
        "id":273,
        "response":"def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"
    },
    {
        "id":274,
        "response":"def check_Concat(s, s2):\n    if not s or not s2:\n        return False\n    \n    len_s = len(s)\n    len_s2 = len(s2)\n    \n    if len_s % len_s2 != 0:\n        return False\n    \n    repetitions = len_s \/\/ len_s2\n    \n    return s == s2 * repetitions"
    },
    {
        "id":275,
        "response":"def min_difference(lst):\n    if not lst or len(lst) < 2:\n        return None\n    \n    min_diff = float('inf')\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            diff = abs(lst[i][0] - lst[j][1])\n            min_diff = min(min_diff, diff)\n    \n    return min_diff"
    },
    {
        "id":276,
        "response":"import math\n\ndef lcm(n, n2):\n    if n <= 0 or n2 <= 0:\n        return None\n    return abs(n * n2) \/\/ math.gcd(n, n2)"
    },
    {
        "id":277,
        "response":"def sort_String(s):\n    if not s:\n        return \"\"\n    \n    lower_chars = [char for char in s if char.islower()]\n    upper_chars = [char for char in s if char.isupper()]\n    digits = [char for char in s if char.isdigit()]\n    special_chars = [char for char in s if not char.isalnum()]\n    \n    lower_chars.sort()\n    upper_chars.sort()\n    digits.sort()\n    special_chars.sort()\n    \n    return ''.join(lower_chars + upper_chars + digits + special_chars)"
    },
    {
        "id":278,
        "response":"def check_tuples(tup, lst):\n    if not tup or not lst:\n        return False\n    \n    unique_elements = set(tup)\n    \n    if len(unique_elements) > len(lst):\n        return False\n    \n    return all(elem in lst for elem in unique_elements)"
    },
    {
        "id":279,
        "response":"import re\n\ndef text_match(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    return False"
    },
    {
        "id":280,
        "response":"import math\n\ndef Check_Solution(n1, n2, n3):\n    discriminant = n2**2 - 4*n1*n3\n    \n    if discriminant > 0:\n        return 2\n    elif discriminant == 0:\n        return 1\n    else:\n        return 0"
    },
    {
        "id":281,
        "response":"def sum_even_odd(lst):\n    if not lst:\n        return 0\n    \n    first_even = next((num for num in lst if num % 2 == 0), 0)\n    first_odd = next((num for num in lst if num % 2 != 0), 0)\n    \n    return first_even + first_odd"
    },
    {
        "id":282,
        "response":"def parallelogram_perimeter(n, n2):\n    if not isinstance(n, (int, float)) or not isinstance(n2, (int, float)):\n        raise TypeError(\"Inputs must be numeric\")\n    if n <= 0 or n2 <= 0:\n        raise ValueError(\"Side lengths must be positive\")\n    return 2 * (n + n2)"
    },
    {
        "id":283,
        "response":"def div_of_nums(lst, m, n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, lst))"
    },
    {
        "id":284,
        "response":"def all_Bits_Set_In_The_Given_Range(n, start, end):\n    mask = ((1 << (end - start + 1)) - 1) << (start - 1)\n    return (n & mask) == mask"
    },
    {
        "id":285,
        "response":"def is_Isomorphic(s, s2):\n    if len(s) != len(s2):\n        return False\n    \n    mapping_s_to_t = {}\n    mapping_t_to_s = {}\n    \n    for char_s, char_t in zip(s, s2):\n        if char_s in mapping_s_to_t:\n            if mapping_s_to_t[char_s] != char_t:\n                return False\n        else:\n            if char_t in mapping_t_to_s:\n                return False\n            mapping_s_to_t[char_s] = char_t\n            mapping_t_to_s[char_t] = char_s\n    \n    return True"
    },
    {
        "id":286,
        "response":"def sum_num(tup):\n    if not tup:\n        return 0\n    try:\n        return sum(tup) \/ len(tup)\n    except TypeError:\n        return 0"
    },
    {
        "id":287,
        "response":""
    },
    {
        "id":288,
        "response":"def subtract_elements(tup1, tup2):\n    if len(tup1) != len(tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    result = []\n    for t1, t2 in zip(tup1, tup2):\n        if isinstance(t1, tuple) and isinstance(t2, tuple):\n            result.append(subtract_elements(t1, t2))\n        elif isinstance(t1, (int, float)) and isinstance(t2, (int, float)):\n            result.append(t1 - t2)\n        else:\n            raise TypeError(\"Elements must be numeric or nested tuples\")\n    \n    return tuple(result)"
    },
    {
        "id":289,
        "response":"def reverse_list_lists(lst):\n    if not lst:\n        return []\n    return [sublist[::-1] for sublist in lst]"
    },
    {
        "id":290,
        "response":"def find_Extra(lst, lst2, n):\n    if not lst or not lst2:\n        return -1\n    \n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return i\n    \n    return n"
    },
    {
        "id":291,
        "response":"def same_Length(n, n2):\n    return len(str(abs(n))) == len(str(abs(n2)))"
    },
    {
        "id":292,
        "response":"import re\n\ndef remove_spaces(s):\n    return re.sub(r'\\s+', ' ', s).strip()"
    },
    {
        "id":293,
        "response":"def Extract(lst):\n    if not lst:\n        return []\n    return [sublist[-1] if sublist else None for sublist in lst]"
    },
    {
        "id":294,
        "response":"def float_to_tuple(s):\n    try:\n        value = float(s)\n        integer_part = int(value)\n        decimal_part = abs(int((value - integer_part) * (10 ** len(str(abs(value - integer_part))[2:]))))\n        return (integer_part, decimal_part)\n    except (ValueError, TypeError):\n        return None"
    },
    {
        "id":295,
        "response":"def max_sum_subseq(lst):\n    if not lst:\n        return 0\n    \n    if len(lst) == 1:\n        return lst[0]\n    \n    if len(lst) == 2:\n        return max(lst[0], lst[1])\n    \n    dp = [0] * len(lst)\n    dp[0] = lst[0]\n    dp[1] = max(lst[0], lst[1])\n    \n    for i in range(2, len(lst)):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i])\n    \n    return dp[-1]"
    },
    {
        "id":296,
        "response":"def sort_list_last(lst):\n    if not lst:\n        return []\n    return sorted(lst, key=lambda x: x[-1])"
    },
    {
        "id":297,
        "response":"def is_Word_Present(s, s2):\n    if not s or not s2:\n        return False\n    \n    words = s.lower().split()\n    s2 = s2.lower()\n    \n    return s2 in words"
    },
    {
        "id":298,
        "response":"def extract_elements(lst, n):\n    if not lst or n <= 0:\n        return []\n    \n    result = []\n    for i in range(len(lst) - n + 1):\n        if len(set(lst[i:i+n])) == 1:\n            result.append(lst[i:i+n])\n    \n    return result"
    },
    {
        "id":299,
        "response":"def check(lst, n):\n    sorted_lst = sorted(lst)\n    left, right = 0, n - 1\n\n    while left <= right:\n        if lst[left] == sorted_lst[left]:\n            left += 1\n        elif lst[right] == sorted_lst[left]:\n            lst[left], lst[right] = lst[right], lst[left]\n            left += 1\n        elif lst[left] == sorted_lst[right]:\n            lst[right], lst[left] = lst[left], lst[right]\n            right -= 1\n        elif lst[right] == sorted_lst[right]:\n            right -= 1\n        else:\n            return False\n\n    return True"
    },
    {
        "id":300,
        "response":"import re\n\ndef match_num(s):\n    pattern = r'^\\d+'\n    match = re.match(pattern, s)\n    return match is not None"
    },
    {
        "id":301,
        "response":"def num_comm_div(n1, n2):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    if n1 == 0 or n2 == 0:\n        return 0\n    \n    return gcd(abs(n1), abs(n2))"
    },
    {
        "id":302,
        "response":"def find(n, n2):\n    if n2 == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    return n % n2"
    },
    {
        "id":303,
        "response":"def add_consecutive_nums(lst):\n    if not lst or len(lst) < 2:\n        return lst\n    \n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] + lst[i + 1])\n    \n    return result"
    },
    {
        "id":304,
        "response":"def sum_Of_Series(n):\n    if n < 1:\n        return 0\n    return sum(i**3 for i in range(1, n+1))"
    },
    {
        "id":305,
        "response":"def re_order(lst):\n    while lst and lst[-1] == 0:\n        lst.pop()\n    return lst"
    },
    {
        "id":306,
        "response":"import math\n\ndef permutation_coefficient(n, k):\n    if k > n or n < 0 or k < 0:\n        return 0\n    \n    return math.factorial(n) \/\/ math.factorial(n - k)"
    },
    {
        "id":307,
        "response":"def remove_words(lst, words_to_remove):\n    if not lst or not words_to_remove:\n        return lst\n    \n    return [word for word in lst if word not in words_to_remove]"
    },
    {
        "id":308,
        "response":"\n```python\ndef same_order(lst, lst2):\n    common_elements = [x for x in lst if x in lst2]\n    common_indices_lst = [lst.index(x) for x in common_elements]\n    common_indices_lst2 = [lst2.index(x) for x in common_elements]\n    \n    return common_indices_lst == common_indices_lst2"
    },
    {
        "id":309,
        "response":"def average_Odd(n):\n    if n <= 0 or n % 2 == 0:\n        return 0\n    \n    odd_numbers = list(range(1, n + 1, 2))\n    return sum(odd_numbers) \/ len(odd_numbers)"
    },
    {
        "id":310,
        "response":"def no_of_subsequences(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    count = 0\n    for i in range(1, 1 << n):\n        product = 1\n        for j in range(n):\n            if i & (1 << j):\n                product *= lst[j]\n        \n        if product < n:\n            count += 1\n    \n    return count"
    },
    {
        "id":311,
        "response":"def find_Min_Sum(n):\n    if n <= 1:\n        return n\n\n    min_sum = float('inf')\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factor1 = i\n            factor2 = n \/\/ i\n            current_sum = factor1 + factor2\n            min_sum = min(min_sum, current_sum)\n\n    return min_sum if min_sum != float('inf') else n"
    },
    {
        "id":312,
        "response":"from typing import Any\n\ndef count_element_freq(tup: tuple) -> dict:\n    def count_recursive(item: Any) -> dict:\n        freq = {}\n        if isinstance(item, tuple):\n            for sub_item in item:\n                sub_freq = count_recursive(sub_item)\n                for k, v in sub_freq.items():\n                    freq[k] = freq.get(k, 0) + v\n        else:\n            freq[item] = freq.get(item, 0) + 1\n        return freq\n\n    return count_recursive(tup)"
    },
    {
        "id":313,
        "response":"def add_str(tup, s):\n    if not isinstance(tup, tuple):\n        return []\n    \n    return [str(item) + s for item in tup]"
    },
    {
        "id":314,
        "response":"def sum_elements(tup):\n    if not tup:\n        return 0\n    \n    total = 0\n    for item in tup:\n        if isinstance(item, tuple):\n            total += sum(item)\n        elif isinstance(item, (int, float)):\n            total += item\n    \n    return total"
    },
    {
        "id":315,
        "response":"def modular_sum(lst, n, m):\n    if not lst or n <= 0 or m <= 0:\n        return False\n    \n    dp = [False] * m\n    dp[0] = True\n    \n    for num in lst:\n        temp = dp.copy()\n        for j in range(m):\n            if dp[j]:\n                temp[(j + num) % m] = True\n        dp = temp\n    \n    return dp[0] if m > 1 else False"
    },
    {
        "id":316,
        "response":"def radix_sort(lst):\n    if not lst:\n        return lst\n\n    max_num = max(abs(x) for x in lst)\n    exp = 1\n    \n    negative = [x for x in lst if x < 0]\n    non_negative = [x for x in lst if x >= 0]\n    \n    def counting_sort(arr, exp):\n        n = len(arr)\n        output = [0] * n\n        count = [0] * 10\n        \n        for i in range(n):\n            index = abs(arr[i]) \/\/ exp\n            count[index % 10] += 1\n        \n        for i in range(1, 10):\n            count[i] += count[i-1]\n        \n        i = n - 1\n        while i >= 0:\n            index = abs(arr[i]) \/\/ exp\n            output[count[index % 10] - 1] = arr[i]\n            count[index % 10] -= 1\n            i -= 1\n        \n        for i in range(n):\n            arr[i] = output[i]\n    \n    def radix_sort_positive(arr):\n        max_num = max(arr) if arr else 0\n        exp = 1\n        while max_num \/\/ exp > 0:\n            counting_sort(arr, exp)\n            exp *= 10\n        return arr\n    \n    negative = [-x for x in negative]\n    radix_sort_positive(negative)\n    negative = [-x for x in reversed(negative)]\n    \n    radix_sort_positive(non_negative)\n    \n    return negative + non_negative"
    },
    {
        "id":317,
        "response":"def largest_pos(lst):\n    positive_nums = [num for num in lst if num > 0]\n    return max(positive_nums) if positive_nums else None"
    },
    {
        "id":318,
        "response":"import math\n\ndef sqrt_root(n):\n    if n < 0:\n        raise ValueError(\"Cannot calculate square root of negative number\")\n    \n    if n == 0 or n == 1:\n        return n\n    \n    left, right = 1, n\n    \n    while left <= right:\n        mid = (left + right) \/\/ 2\n        square = mid * mid\n        \n        if square == n:\n            return mid\n        \n        if square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right"
    },
    {
        "id":319,
        "response":"import math\n\ndef volume_tetrahedron(n):\n    if n <= 0:\n        return 0\n    volume = (n ** 3) \/ (6 * math.sqrt(2))\n    return volume"
    },
    {
        "id":320,
        "response":"from math import gcd\nfrom functools import reduce\n\ndef get_lcm(lst):\n    def lcm(a, b):\n        return abs(a * b) \/\/ gcd(a, b)\n    \n    if not lst:\n        return None\n    \n    return reduce(lcm, lst)"
    },
    {
        "id":321,
        "response":"def check_isosceles(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    \n    if (n1 + n2 <= n3) or (n1 + n3 <= n2) or (n2 + n3 <= n1):\n        return False\n    \n    return (n1 == n2 and n1 != n3) or (n1 == n3 and n1 != n2) or (n2 == n3 and n2 != n1)"
    },
    {
        "id":322,
        "response":"def lbs(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    \n    increasing = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing[i] = max(increasing[i], increasing[j] + 1)\n    \n    decreasing = [1] * n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing[i] = max(decreasing[i], decreasing[j] + 1)\n    \n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, increasing[i] + decreasing[i] - 1)\n    \n    return max_length"
    },
    {
        "id":323,
        "response":"def check_string(s):\n    has_uppercase = lambda x: any(char.isupper() for char in x)\n    has_lowercase = lambda x: any(char.islower() for char in x)\n    has_number = lambda x: any(char.isdigit() for char in x)\n    check_length = lambda x, length: len(x) >= length\n    \n    return has_uppercase(s) and has_lowercase(s) and has_number(s) and check_length(s, 8)"
    },
    {
        "id":324,
        "response":"def max_sum_increasing_subsequence(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    dp = lst.copy()\n    \n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j] and dp[i] < dp[j] + lst[i]:\n                dp[i] = dp[j] + lst[i]\n    \n    return max(dp)"
    },
    {
        "id":325,
        "response":"def parallel_lines(lst, lst2):\n    x1, y1, x2, y2 = lst\n    x3, y3, x4, y4 = lst2\n    \n    try:\n        slope1 = (y2 - y1) \/ (x2 - x1) if x2 != x1 else float('inf')\n        slope2 = (y4 - y3) \/ (x4 - x3) if x4 != x3 else float('inf')\n        \n        return abs(slope1 - slope2) < 1e-10\n    except ZeroDivisionError:\n        return x2 - x1 == 0 and x4 - x3 == 0"
    },
    {
        "id":326,
        "response":"\ndef capitalize_first_last_letters(s):\n    if not s:\n        return s\n    \n    words = s.split()\n    capitalized_words = []\n    \n    for word in words:\n        if len(word) == 1:\n            capitalized_words.append(word.upper())\n        elif len(word) > 1:\n            capitalized_word = word[0].upper() + word[1:-1] + word[-1].upper()\n            capitalized_words.append(capitalized_word)\n    "
    },
    {
        "id":327,
        "response":"from typing import List\n\ndef get_pairs_count(lst: List[int], n: int, n2: int) -> int:\n    if not lst or n <= 0:\n        return 0\n    \n    count = 0\n    num_freq = {}\n    \n    for num in lst:\n        complement = n2 - num\n        if complement in num_freq:\n            count += num_freq[complement]\n        \n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    return count"
    },
    {
        "id":328,
        "response":"def min_length(lst):\n    if not lst:\n        return 0\n    return min(len(item) for item in lst)"
    },
    {
        "id":329,
        "response":"def jacobsthal_lucas(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 2\n    \n    if n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    \n    return b"
    },
    {
        "id":330,
        "response":"def negative_count(lst):\n    if not lst:\n        return 0\n    \n    negative_nums = sum(1 for num in lst if num < 0)\n    return negative_nums \/ len(lst)"
    },
    {
        "id":331,
        "response":"def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    \n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    \n    return dp[V] if dp[V] != float('inf') else -1"
    },
    {
        "id":332,
        "response":"def check_permutation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    char_count = {}\n    \n    for char in s1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in s2:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n    \n    return True"
    },
    {
        "id":333,
        "response":"def remove_datatype(tup, param):\n    return tuple(item for item in tup if not isinstance(item, type(param)))"
    },
    {
        "id":334,
        "response":"def search_literal(s, s2):\n    if not s or not s2:\n        return -1\n    \n    for i in range(len(s) - len(s2) + 1):\n        if s[i:i+len(s2)] == s2:\n            return i\n    \n    return -1"
    },
    {
        "id":335,
        "response":"import math\n\ndef topbottom_surfacearea(n):\n    if n <= 0:\n        return 0\n    return math.pi * (n ** 2)"
    },
    {
        "id":336,
        "response":"\ndef nth_items(lst, n):\n    if not lst or n <= 0:\n        return []\n    "
    },
    {
        "id":337,
        "response":"def first_repeated_word(s):\n    if not s or len(s.strip()) == 0:\n        return None\n    \n    words = s.lower().split()\n    word_set = set()\n    \n    for word in words:\n        if word in word_set:\n            return word\n        word_set.add(word)\n    \n    return None"
    },
    {
        "id":338,
        "response":"\n```python\ndef string_list_to_tuple(tup):\n    if not isinstance(tup, list):\n        return tuple(tup)\n    \n    return tuple(str(item) for item in tup)"
    },
    {
        "id":339,
        "response":"def basesnum_coresspondingnum(lst, lst2):\n    return list(map(pow, lst, lst2))"
    },
    {
        "id":340,
        "response":"from collections import Counter\n\ndef find_Diff(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    freq = Counter(lst)\n    frequencies = list(freq.values())\n    \n    if not frequencies:\n        return 0\n    \n    return max(frequencies) - min(frequencies)"
    },
    {
        "id":341,
        "response":"def check_abundant(n):\n    if n <= 0:\n        return False\n    \n    divisor_sum = sum(i for i in range(1, n) if n % i == 0)\n    \n    return divisor_sum > n"
    },
    {
        "id":342,
        "response":"import re\n\ndef fill_spaces(s):\n    if s is None:\n        return None\n    return re.sub(r'[ ,.]', ':', s)"
    },
    {
        "id":343,
        "response":"\n```python\ndef count_digits(n, n2):\n    return n + n2"
    },
    {
        "id":344,
        "response":"def flatten_tuple(lst):\n    if not lst:\n        return \"\"\n    \n    flattened = []\n    for item in lst:\n        if isinstance(item, tuple):\n            flattened.extend(str(x) for x in item)\n        else:\n            flattened.append(str(item))\n    \n    return \" \".join(flattened)"
    },
    {
        "id":345,
        "response":"def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    \n    bit_length = n.bit_length()\n    \n    first_bit_mask = 1 << (bit_length - 1)\n    last_bit_mask = 1\n    \n    return n ^ first_bit_mask ^ last_bit_mask"
    },
    {
        "id":346,
        "response":"def last_occurence_char(s, s2):\n    if not s or not s2:\n        return -1\n    \n    if len(s2) > 1:\n        return -1\n    \n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == s2:\n            return i\n    \n    return -1"
    },
    {
        "id":347,
        "response":"def Total_Hamming_Distance(n):\n    if n < 0:\n        return 0\n    \n    total_distance = 0\n    for i in range(n):\n        total_distance += bin(i ^ (i+1)).count('1')\n    \n    return total_distance"
    },
    {
        "id":348,
        "response":"def longest_increasing_subsequence(lst):\n    if not lst:\n        return 0\n    \n    n = len(lst)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"
    },
    {
        "id":349,
        "response":"def odd_Num_Sum(n):\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**5\n    \n    return total_sum"
    },
    {
        "id":350,
        "response":"def find_Max(lst, n, n2):\n    if not lst or n <= 0:\n        return None\n    \n    if n == 1:\n        return lst[0]\n    \n    left, right = 0, n - 1\n    \n    while left <= right:\n        if left == right:\n            return lst[left]\n        \n        mid = left + (right - left) \/\/ 2\n        \n        if mid < n - 1 and lst[mid] > lst[mid + 1]:\n            return lst[mid]\n        \n        if mid > 0 and lst[mid] < lst[mid - 1]:\n            return lst[mid - 1]\n        \n        if lst[left] > lst[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return lst[0]"
    },
    {
        "id":351,
        "response":"def extract_column(lst, n):\n    if not lst or n < 0:\n        return []\n    \n    try:\n        return [row[n] for row in lst]\n    except IndexError:\n        return []"
    },
    {
        "id":352,
        "response":"def Seq_Linear(lst):\n    if len(lst) <= 2:\n        return True\n    \n    diff = lst[1] - lst[0]\n    \n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != diff:\n            return False\n    \n    return True"
    },
    {
        "id":353,
        "response":"def tuple_to_float(tup):\n    try:\n        if not tup or not isinstance(tup, tuple):\n            return None\n        \n        str_num = ''.join(map(str, tup))\n        return float(str_num)\n    except (ValueError, TypeError):\n        return None"
    },
    {
        "id":354,
        "response":"def split(lst):\n    return [num for num in lst if num % 2 != 0]"
    },
    {
        "id":355,
        "response":"def difference(n):\n    if n < 0:\n        return 0\n    \n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    \n    return sum_of_cubes - sum_of_numbers**2"
    },
    {
        "id":356,
        "response":"def find_Odd_Pair(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    odd_nums = [num for num in lst if num % 2 != 0]\n    \n    if len(odd_nums) < 2:\n        return 0\n    \n    max_xor = 0\n    for i in range(len(odd_nums)):\n        for j in range(i+1, len(odd_nums)):\n            current_xor = odd_nums[i] ^ odd_nums[j]\n            if current_xor > max_xor:\n                max_xor = current_xor\n    \n    return max_xor if max_xor > 0 else 0"
    },
    {
        "id":357,
        "response":"def toggle_string(s):\n    if not s:\n        return s\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in s)"
    },
    {
        "id":358,
        "response":"def digit_distance_nums(n1, n2):\n    str1 = str(abs(n1))\n    str2 = str(abs(n2))\n    \n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    \n    total_distance = 0\n    for d1, d2 in zip(str1, str2):\n        total_distance += abs(int(d1) - int(d2))\n    \n    return total_distance"
    },
    {
        "id":359,
        "response":"def max_sub_array_sum(lst, n):\n    if not lst:\n        return 0\n    \n    if n == 1:\n        return lst[0]\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n - 1):\n        current_sum = max(lst[i] + lst[i+1], current_sum + lst[i] + lst[i+1])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "id":360,
        "response":"def union_elements(*tuples):\n    return tuple(set().union(*tuples))"
    },
    {
        "id":361,
        "response":"def assign_elements(lst):\n    if not lst or len(lst) < 2:\n        return []\n    \n    result = []\n    for i in range(0, len(lst), 2):\n        if i + 1 < len(lst):\n            pair = (lst[i], lst[i+1])\n            result.append(pair)\n    \n    return result"
    },
    {
        "id":362,
        "response":"def Find_Max_Length(lst):\n    if not lst:\n        return 0\n    \n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    \n    return max_length"
    },
    {
        "id":363,
        "response":"import re\n\ndef extract_values(s):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, s)\n    return matches"
    },
    {
        "id":364,
        "response":"def count_Pairs(lst, n):\n    if not lst or n <= 0:\n        return 0\n    \n    pair_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                pair_count += 1\n    \n    return pair_count"
    },
    {
        "id":365,
        "response":"def split(s):\n    if s is None:\n        return []\n    return list(s)"
    },
    {
        "id":366,
        "response":"\ndef sum_digits(n):\n    if n < 0:\n        return 0\n    \n    total = 0\n    while n > 0:\n        total += n % 10\n        n \/\/= 10\n    "
    },
    {
        "id":367,
        "response":"    if len(lst) <= 1:\n        return True\n    \n    ascending = descending = True\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            ascending = False\n        if lst[i] > lst[i-1]:\n            descending = False\n    "
    },
    {
        "id":368,
        "response":"def empty_list(n):\n    return [{} for _ in range(max(0, n))]"
    },
    {
        "id":369,
        "response":"def sort_sublists(lst):\n    if not lst:\n        return []\n    \n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.append(sorted(item))\n        else:\n            result.append(item)\n    \n    return result"
    },
    {
        "id":370,
        "response":"def remove_words(lst, lst2):\n    if not lst or not lst2:\n        return lst\n    \n    result = []\n    for word in lst:\n        if not any(char in word for char in lst2):\n            result.append(word)\n    \n    return result"
    },
    {
        "id":371,
        "response":"from typing import List\n\ndef max_sum_pair_diff_lessthan_K(lst: List[int], n: int, k: int) -> int:\n    if not lst or n <= 1:\n        return 0\n    \n    lst.sort()\n    max_sum = 0\n    i = 0\n    \n    while i < n - 1:\n        if lst[i+1] - lst[i] < k:\n            max_sum += lst[i] + lst[i+1]\n            i += 2\n        else:\n            i += 1\n    \n    return max_sum"
    },
    {
        "id":372,
        "response":"def two_unique_nums(lst):\n    if not lst:\n        return []\n    \n    count_dict = {}\n    for num in lst:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    return [num for num in lst if count_dict[num] == 1]"
    },
    {
        "id":373,
        "response":"def unique_product(lst):\n    if not lst:\n        return None\n    \n    unique_nums = set(lst)\n    product = 1\n    \n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "id":374,
        "response":"import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0\n    \n    lateral_surface_area = 2 * math.pi * radius * height\n    base_surface_area = 2 * math.pi * radius ** 2\n    total_surface_area = lateral_surface_area + base_surface_area\n    \n    return round(total_surface_area, 2)"
    },
    {
        "id":375,
        "response":"def count_no(n, *args):\n    if n <= 0:\n        return 0\n    \n    count = 0\n    current = 1\n    \n    while count < n:\n        is_multiple = False\n        for num in args:\n            if num > 0 and current % num == 0:\n                is_multiple = True\n                break\n        \n        if not is_multiple:\n            count += 1\n        \n        if count == n:\n            return current\n        \n        current += 1"
    },
    {
        "id":376,
        "response":"\n```python\ndef is_Sub_Array(lst, lst2, n, n2):\n    if n2 > n:\n        return False\n    \n    for i in range(n - n2 + 1):\n        j = 0\n        while j < n2:\n            if lst[i + j] != lst2[j]:\n                break\n            j += 1\n        \n        if j == n2:\n            return True\n    \n    return False\n```\n\nThis implementation covers the following aspects:\n- Checks if the length of the potential subarray is larger than the main array\n- Iterates through the main array to find potential matches\n- Compares elements sequentially\n- Returns True if a complete match is found"
    },
    {
        "id":377,
        "response":"import math\n\ndef last_Digit_Factorial(n):\n    if n < 0:\n        return None\n    \n    if n <= 1:\n        return 1\n    \n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % 10\n    \n    return result"
    },
    {
        "id":378,
        "response":"from typing import List, Any\n\ndef interleave_lists(*lists: List[Any]) -> List[Any]:\n    if not lists:\n        return []\n    \n    list_length = len(lists[0])\n    \n    if any(len(lst) != list_length for lst in lists):\n        raise ValueError(\"All lists must have the same length\")\n    \n    result = []\n    for i in range(list_length):\n        for lst in lists:\n            result.append(lst[i])\n    \n    return result"
    },
    {
        "id":379,
        "response":"\ndef find_dissimilar(tup: typing.Tuple, tup2: typing.Tuple) -> typing.List:\n    if not isinstance(tup, tuple) or not isinstance(tup2, tuple):\n        raise TypeError(\"Input must be tuples\")\n    \n    set1 = set(tup)\n    set2 = set(tup2)\n    \n    different_elements = list(set1.symmetric_difference(set2))\n    "
    },
    {
        "id":380,
        "response":"\ndef extract_even(tup):\n    def flatten(nested_tuple):\n        return list(itertools.chain.from_iterable(\n            (flatten(x) if isinstance(x, tuple) else [x]) for x in nested_tuple\n        ))\n    \n    flattened = flatten(tup)"
    },
    {
        "id":381,
        "response":"import math\n\ndef surface_Area(n, n2):\n    if n <= 0 or n2 <= 0:\n        return 0\n    \n    base_area = n * n\n    slant_height = math.sqrt((n2 ** 2) + ((n\/2) ** 2))\n    triangular_face_area = 0.5 * n * slant_height\n    \n    total_surface_area = base_area + (4 * triangular_face_area)\n    \n    return round(total_surface_area, 2)"
    },
    {
        "id":382,
        "response":"def my_dict(dct):\n    return len(dct) == 0"
    },
    {
        "id":383,
        "response":"from math import comb\n\ndef catalan_number(n):\n    if n < 0:\n        return 0\n    return comb(2*n, n) \/\/ (n + 1)"
    },
    {
        "id":384,
        "response":"import re\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\n\ndef find_adverbs(s):\n    if not s or not isinstance(s, str):\n        return []\n    \n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    \n    tokens = word_tokenize(s)\n    pos_tags = pos_tag(tokens)\n    \n    adverbs = [(word, idx) for idx, (word, tag) in enumerate(pos_tags) if tag.startswith('RB')]\n    \n    return adverbs"
    },
    {
        "id":385,
        "response":"import heapq\n\ndef expensive_items(lst, n):\n    if not lst or n <= 0:\n        return []\n    \n    if n >= len(lst):\n        return sorted(lst, reverse=True)\n    \n    return heapq.nlargest(n, lst)"
    },
    {
        "id":386,
        "response":"def split_Arr(lst, n, n2):\n    if not lst or n < 0 or n2 < 0:\n        return lst\n    \n    length = len(lst)\n    n = n % length\n    n2 = n2 % length\n    \n    if n + n2 > length:\n        return lst\n    \n    return lst[n:n+n2] + lst[:n] + lst[n+n2:]"
    },
    {
        "id":387,
        "response":"    if lst is None:\n        return None"
    },
    {
        "id":388,
        "response":"def big_diff(lst):\n    if not lst:\n        return 0\n    return max(lst) - min(lst)"
    },
    {
        "id":389,
        "response":"import math\n\ndef perfect_squares(n, n2):\n    if n > n2:\n        n, n2 = n2, n\n    \n    start = math.ceil(math.sqrt(n))\n    end = math.floor(math.sqrt(n2))\n    \n    return [num * num for num in range(start, end + 1)]"
    },
    {
        "id":390,
        "response":"import math\n\ndef polar_rect(r, theta):\n    if r < 0:\n        raise ValueError(\"Radius must be non-negative\")\n    \n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    return (x, y)"
    },
    {
        "id":391,
        "response":"def swap_List(lst):\n    if len(lst) < 2:\n        return lst\n    \n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":392,
        "response":"from math import comb\n\ndef sum_Of_product(n):\n    if n < 0:\n        return 0\n    \n    total_sum = 0\n    for k in range(n + 1):\n        total_sum += comb(n, k) * comb(n, n - k)\n    \n    return total_sum"
    },
    {
        "id":393,
        "response":"def removezero_ip(s):\n    parts = s.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)"
    },
    {
        "id":394,
        "response":"def diff_even_odd(lst):\n    if not lst:\n        return 0\n    \n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even - first_odd"
    },
    {
        "id":395,
        "response":"def min_Swaps(s, s2):\n    if len(s) != len(s2):\n        return -1\n    \n    if s.count('1') != s2.count('1'):\n        return -1\n    \n    mismatches = [i for i in range(len(s)) if s[i] != s2[i]]\n    \n    swaps = len(mismatches) \/\/ 2\n    \n    return swaps"
    },
    {
        "id":396,
        "response":"def tuple_size(tup):\n    return len(tup)"
    },
    {
        "id":397,
        "response":"\n```python\ndef find_kth(lst1, lst2, n1, n2, k):\n    if n1 > n2:\n        return find_kth(lst2, lst1, n2, n1, k)\n    \n    low = max(0, k - n2)\n    high = min(k, n1)\n    \n    while low <= high:\n        cut1 = (low + high) \/\/ 2\n        cut2 = k - cut1\n        \n        l1 = float('-inf') if cut1 == 0 else lst1[cut1 - 1]\n        l2 = float('-inf') if cut2 == 0 else lst2[cut2 - 1]\n        r1 = float('inf') if cut1 == n1 else lst1[cut1]\n        r2 = float('inf') if cut2 == n2 else lst2[cut2]\n        \n        if l1 <= r2 and l2 <= r1:\n            return max(l1, l2)\n        elif l1 > r2:\n            high = cut1 - 1\n        else:\n            low = cut1 + 1\n    \n    return -1"
    },
    {
        "id":398,
        "response":"\n```python\ndef armstrong_number(n):\n    if n < 0:\n        return False\n    \n    str_n = str(n)\n    num_digits = len(str_n)\n    \n    armstrong_sum = sum(int(digit) ** num_digits for digit in str_n)\n    \n    return armstrong_sum == n"
    },
    {
        "id":399,
        "response":"def sum_average(n):\n    if n <= 0:\n        return 0, 0\n    \n    total_sum = sum(range(1, n + 1))\n    average = total_sum \/ n\n    \n    return total_sum, average"
    },
    {
        "id":400,
        "response":"def is_Even(n):\n    return (n & 1) == 0"
    }
]