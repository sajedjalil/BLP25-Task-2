[
    {
        "id":1,
        "response":"```python\nfrom typing import List, Tuple\n\ndef max_chain_length(lst: List[Tuple[int, int]], n: int) -> int:\n    if not lst:\n        return 0\n\n    lst.sort(key=lambda x: x[1])\n    max_chain = 1\n    end = lst[0][1]\n\n    for i in range(1, n):\n        if lst[i][0] > end:\n            max_chain += 1\n            end = lst[i][1]\n\n    return max_chain\n```"
    },
    {
        "id":2,
        "response":"```python\nfrom typing import Optional\n\ndef first_repeated_char(s: str) -> Optional[str]:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None\n```"
    },
    {
        "id":3,
        "response":"```python\nimport math\n\ndef get_ludic(n):\n    ludic_numbers = []\n    is_ludic = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if is_ludic[i]:\n            ludic_numbers.append(i)\n            for j in range(i * i, n + 1, i):\n                is_ludic[j] = False\n    return ludic_numbers[-1] if ludic_numbers else None\n\ndef main():\n    print(get_ludic(10))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":4,
        "response":"```python\nfrom typing import List\n\ndef reverse_words(s: str) -> str:\n    words: List[str] = s.split()\n    reversed_words: List[str] = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n```"
    },
    {
        "id":5,
        "response":"```python\nimport math\n\ndef prime_num(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n```"
    },
    {
        "id":6,
        "response":"```python\nimport math\n\ndef radian_degree(n):\n    return n * math.pi \/ 180\n```"
    },
    {
        "id":7,
        "response":"```python\nimport re\n\ndef find_literals(s, s2):\n    try:\n        pos = re.search(re.escape(s2), s).start()\n        return pos\n    except AttributeError:\n        return -1\n\ndef main():\n    s = \"Hello, World!\"\n    s2 = \"World\"\n    print(find_literals(s, s2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":8,
        "response":"```python\nimport math\n\ndef bell_Number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n    return bell[n][0]\n\ndef main():\n    n = 5\n    print(bell_Number(n))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":9,
        "response":"```python\nimport math\n\ndef floor_Min(n, n2, n3):\n    return min(math.floor(n), math.floor(n2), math.floor(n3))\n```"
    },
    {
        "id":10,
        "response":"```python\nfrom typing import List\n\ndef remove_kth_element(lst: List[int], k: int) -> List[int]:\n    if k < 1 or k > len(lst):\n        return lst\n    return lst[:k-1] + lst[k:]\n```"
    },
    {
        "id":11,
        "response":"```python\nfrom typing import List, Tuple\n\ndef max_of_nth(lst: List[Tuple[int]], n: int) -> int:\n    if not lst or n < 1 or n > len(lst[0]):\n        raise ValueError(\"Invalid input\")\n    return max(col[n-1] for col in lst)\n```"
    },
    {
        "id":12,
        "response":"```python\nfrom typing import List\n\ndef merge(lst: List[List[int]]) -> List[int]:\n    result = []\n    for sub_list in lst:\n        if len(sub_list) > 0:\n            result.append(sub_list[0])\n        if len(sub_list) > 1:\n            result.append(sub_list[-1])\n    return result\n\n# Example usage:\nlst = [[1, 2, 3], [4, 5], [6], [7, 8, 9]]\nprint(merge(lst))\n```"
    },
    {
        "id":13,
        "response":"```python\nfrom typing import List, Tuple\n\ndef maximum_value(lst: List[Tuple[int, int]]) -> int:\n    return max(lst, key=lambda x: x[1])[1]\n```"
    },
    {
        "id":14,
        "response":"```python\nfrom typing import List, Tuple\n\ndef cummulative_sum(lst: List[Tuple[int, int]]) -> List[int]:\n    result = []\n    total = 0\n    for tup in lst:\n        total += sum(tup)\n        result.append(total)\n    return result\n```"
    },
    {
        "id":15,
        "response":"```python\nimport statistics\nimport typing\n\ndef average_tuple(tup: typing.Tuple[typing.Tuple[float, ...], ...]) -> float:\n    numbers = [num for tup in tup for num in tup]\n    return statistics.mean(numbers)\n```"
    },
    {
        "id":16,
        "response":"```python\nfrom typing import Tuple\n\ndef tuple_modulo(tup: Tuple[int, int], tup2: Tuple[int, int]) -> Tuple[int, int]:\n    if len(tup) != 2 or len(tup2) != 2:\n        raise ValueError(\"Both tuples must have exactly 2 elements\")\n    return (tup[0] % tup2[0], tup[1] % tup2[1])\n```"
    },
    {
        "id":17,
        "response":"```python\nfrom typing import List\nfrom collections import deque\n\ndef min_Jumps(n: int, n2: int, n3: int) -> int:\n    queue: deque = deque([(0, 0)])\n    visited: set = set([0])\n    \n    jumps: int = 0\n    while queue:\n        for _ in range(len(queue)):\n            x, y = queue.popleft()\n            \n            if x == n and y == 0:\n                return jumps\n            \n            for dx, dy in [(n2, 0), (-n2, 0), (0, n3), (0, -n3), (n2, n3), (n2, -n3), (-n2, n3), (-n2, -n3)]:\n                nx, ny = x + dx, y + dy\n                if (nx, ny) not in visited and nx**2 + ny**2 <= (n**2 + n**2):\n                    queue.append((nx, ny))\n                    visited.add((nx, ny))\n        jumps += 1\n    return -1\n```"
    },
    {
        "id":18,
        "response":"```python\nfrom typing import List\nimport itertools\n\ndef div_list(lst: List, lst2: List) -> List:\n    return list(map(lambda x, y: (x, y), lst, itertools.islice(itertools.cycle(lst2), len(lst))))\n```"
    },
    {
        "id":19,
        "response":"```python\nimport re\n\ndef move_num(s):\n    nums = re.findall('\\d', s)\n    non_nums = re.sub('\\d', '', s)\n    return ''.join(nums + list(non_nums))\n```"
    },
    {
        "id":20,
        "response":"```python\nfrom typing import List\n\ndef largest_subset(lst: List[int], n: int) -> List[int]:\n    dp = [[num] for num in lst]\n    dp.sort(key=lambda x: x[0])\n    \n    for i in range(len(dp)):\n        for j in range(i):\n            if dp[i][0] % dp[j][0] == 0 and len(dp[i]) < len(dp[j]) + 1:\n                dp[i] = dp[j] + [dp[i][0]]\n                \n    return max(dp, key=len)\n```"
    },
    {
        "id":21,
        "response":"```python\nimport re\nfrom typing import List\n\ndef increment_numerics(lst: List[str], n: int) -> List[str]:\n    result = []\n    for s in lst:\n        new_s = re.sub(r'\\d+', lambda x: str(int(x.group()) + n), s)\n        result.append(new_s)\n    return result\n```"
    },
    {
        "id":22,
        "response":"```python\nimport typing\n\ndef get_median(lst1: typing.List[int], lst2: typing.List[int], n: int) -> float:\n    merged = []\n    i, j = 0, 0\n    \n    while i < n and j < n:\n        if lst1[i] < lst2[j]:\n            merged.append(lst1[i])\n            i += 1\n        else:\n            merged.append(lst2[j])\n            j += 1\n            \n    while i < n:\n        merged.append(lst1[i])\n        i += 1\n        \n    while j < n:\n        merged.append(lst2[j])\n        j += 1\n\n    if len(merged) % 2 == 0:\n        return (merged[len(merged) \/\/ 2 - 1] + merged[len(merged) \/\/ 2]) \/ 2\n    else:\n        return merged[len(merged) \/\/ 2]\n```"
    },
    {
        "id":23,
        "response":"```python\nfrom typing import List\n\ndef nth_nums(lst: List[float], n: int) -> List[float]:\n    return list(map(lambda x: x ** n, lst))\n```"
    },
    {
        "id":24,
        "response":"```python\ndef is_upper(s: str) -> str:\n    return s.upper()\n```"
    },
    {
        "id":25,
        "response":"```python\nfrom typing import List\n\ndef swap_List(lst: List) -> List:\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":26,
        "response":"```python\nimport math\n\ndef triangle_area(n):\n    return (n * n) \/ 2\n```"
    },
    {
        "id":27,
        "response":"```python\nimport numpy as np\n\ndef find_First_Missing(lst, n, n2):\n    full_set = set(range(n2, n + 1))\n    lst_set = set(lst)\n    missing_nums = sorted(list(full_set - lst_set))\n    if missing_nums:\n        return missing_nums[0]\n    else:\n        return None\n```"
    },
    {
        "id":28,
        "response":"```python\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n\n# Example usage:\nprint(replace_spaces(\"Hello World\"))\n```"
    },
    {
        "id":29,
        "response":"```python\nfrom typing import List, Union\n\ndef split(lst: List[Union[int, str]]) -> List[int]:\n    return [i for i in lst if isinstance(i, int) and i % 2 == 0]\n```"
    },
    {
        "id":30,
        "response":"```python\nfrom typing import List, Tuple\n\ndef get_coordinates(tup: Tuple[int, int]) -> List[Tuple[int, int]]:\n    x, y = tup\n    coordinates = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return coordinates\n```"
    },
    {
        "id":31,
        "response":"```python\nimport re\n\ndef replace_spaces(s: str) -> str:\n    return re.sub(r' ', '_', re.sub(r'_', ' ', s))\n```"
    },
    {
        "id":32,
        "response":"```python\nfrom typing import List\n\ndef move_zero(lst: List[int]) -> List[int]:\n    return [i for i in lst if i != 0] + [i for i in lst if i == 0]\n```"
    },
    {
        "id":33,
        "response":"```python\nfrom typing import List\n\ndef pair_xor_sum(lst: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += lst[i] ^ lst[j]\n    return total_sum\n```"
    },
    {
        "id":34,
        "response":"```python\nimport math\n\ndef even_Power_Sum(n: int) -> int:\n    return sum(math.pow(2*i, 4) for i in range(1, n+1))\n```"
    },
    {
        "id":35,
        "response":"```python\nimport heapq\n\ndef heap_sort(lst):\n    heap = []\n    for val in lst:\n        heapq.heappush(heap, val)\n    sorted_lst = []\n    while heap:\n        sorted_lst.append(heapq.heappop(heap))\n    return sorted_lst\n\n# Example usage:\nlst = [5, 2, 8, 1, 9]\nprint(heap_sort(lst))\n```"
    },
    {
        "id":36,
        "response":"```python\nimport math\n\ndef Check_Solution(n, n2, n3):\n    D = n2**2 - 4*n*n3\n    if D < 0:\n        return False\n    else:\n        root1 = (-n2 + math.sqrt(D))\/(2*n)\n        root2 = (-n2 - math.sqrt(D))\/(2*n)\n        return root1 == 1\/root2 or root2 == 1\/root1\n\ndef main():\n    print(Check_Solution(1, -3, 2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":37,
        "response":"```python\ndef noprofit_noloss(cost_price, selling_price):\n    if cost_price == selling_price:\n        return True\n    else:\n        return False\n\ndef noprofit_noloss_alternative(cost_price, selling_price):\n    return cost_price == selling_price\n```"
    },
    {
        "id":38,
        "response":"```python\nimport math\n\ndef wind_chill(n, n2):\n    if n < -50 or n > 50 or n2 < 0 or n2 > 100:\n        raise ValueError(\"Invalid input\")\n    wind_chill_index = 35.74 + 0.6215 * n - 35.75 * math.pow(n2, 0.16) + 0.4275 * n * math.pow(n2, 0.16)\n    return round(wind_chill_index, 2)\n```"
    },
    {
        "id":39,
        "response":"```python\ndef sample_nam(lst):\n    return sum(len(name) for name in lst if name and name[0].isupper())\n```"
    },
    {
        "id":40,
        "response":"```python\nimport re\n\ndef remove_parenthesis(lst):\n    return re.sub(r'\\([^)]*\\)', '', lst)\n```"
    },
    {
        "id":41,
        "response":"```python\nimport math\n\ndef is_nonagonal(n):\n    x = (math.sqrt(8 * n + 1) - 1) \/ 2\n    return x == int(x)\n\ndef nth_nonagonal(n):\n    count = 0\n    i = 1\n    while True:\n        if is_nonagonal(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n```"
    },
    {
        "id":42,
        "response":"```python\nfrom typing import List, Tuple\n\ndef remove_similar_row(matrix: List[Tuple]) -> List[Tuple]:\n    seen = set()\n    result = []\n    for row in matrix:\n        if row not in seen:\n            result.append(row)\n            seen.add(row)\n    return result\n\n# Example usage:\nmatrix = [(1, 2, 3), (4, 5, 6), (1, 2, 3), (7, 8, 9), (4, 5, 6)]\nprint(remove_similar_row(matrix))\n```"
    },
    {
        "id":43,
        "response":"```python\nimport re\n\ndef text_match_wordz_middle(s):\n    return bool(re.search(r'\\Bz\\B', s))\n```"
    },
    {
        "id":44,
        "response":"```python\ndef reverse_Array_Upto_K(lst, k):\n    return lst[:k][::-1] + lst[k:]\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    n = 3\n    print(reverse_Array_Upto_K(lst, n))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":45,
        "response":"```python\nimport math\nfrom typing import List, Tuple\n\ndef find_k_product(lst: List[Tuple[int, int, int]], n: int) -> int:\n    product = 1\n    for tup in lst:\n        if n < len(tup):\n            product *= tup[n]\n    return product\n```"
    },
    {
        "id":46,
        "response":"```python\nimport math\n\ndef No_of_cubes(n, k):\n    if n < k or k <= 0 or n <= 0:\n        return 0\n    else:\n        return (n - k + 1) ** 3 if k == 1 else ((n \/\/ k) * (n \/\/ k) * (n \/\/ k))\n```"
    },
    {
        "id":47,
        "response":"```python\nimport re\n\ndef split_upperstring(s):\n    return re.sub('([A-Z])', r' \\1', s).strip()\n\ndef main():\n    print(split_upperstring(\"HelloWorld\")) \n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":48,
        "response":"```python\nfrom typing import List\n\ndef exchange_elements(lst: List[int]) -> List[int]:\n    if len(lst) < 2:\n        return lst\n    for i in range(len(lst) - 1):\n        if (i + 1) % 2 == 0:\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n```"
    },
    {
        "id":49,
        "response":"```python\ndef sum_Range_list(lst, n, n2):\n    import typing\n    if not isinstance(lst, list) or not all(isinstance(i, (int, float)) for i in lst):\n        raise TypeError(\"The input must be a list of numbers.\")\n    if not (isinstance(n, int) and isinstance(n2, int)):\n        raise TypeError(\"The start and end indices must be integers.\")\n    if n < 0 or n2 >= len(lst) or n > n2:\n        raise ValueError(\"Invalid start or end index.\")\n    return sum(lst[n:n2+1])\n```"
    },
    {
        "id":50,
        "response":"```python\nfrom typing import List\n\ndef are_Equal(lst: List[int], lst2: List[int], n: int, n2: int) -> bool:\n    if n != n2:\n        return False\n    lst.sort()\n    lst2.sort()\n    return lst == lst2\n```"
    },
    {
        "id":51,
        "response":"```python\nfrom typing import Tuple\n\ndef check_subset(tup1: Tuple, tup2: Tuple) -> bool:\n    return set(tup1).issubset(set(tup2))\n\n# Example usage:\ntup = (1, 2, 3)\ntup2 = (1, 2, 3, 4, 5)\nprint(check_subset(tup, tup2))  # Output: True\n\ntup3 = (1, 2, 6)\nprint(check_subset(tup3, tup2))  # Output: False\n```"
    },
    {
        "id":52,
        "response":"```python\nfrom typing import List, Tuple\n\ndef matrix_to_list(matrix: List[Tuple]) -> List[Tuple]:\n    return list(zip(*matrix))\n\n# Example usage:\nmatrix = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(matrix)) \n```"
    },
    {
        "id":53,
        "response":"```python\nfrom collections import defaultdict\nfrom typing import List, Dict\n\ndef grouping_dictionary(lst: List[tuple]) -> Dict:\n    result = defaultdict(list)\n    for key, value in lst:\n        result[key].append(value)\n    return dict(result)\n\nlst = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('b', 5), ('c', 6)]\nprint(grouping_dictionary(lst))\n```"
    },
    {
        "id":54,
        "response":"```python\ndef rectangle_perimeter(n: int, n2: int) -> int:\n    if n <= 0 or n2 <= 0:\n        raise ValueError(\"Both length and width must be positive\")\n    return 2 * (n + n2)\n```"
    },
    {
        "id":55,
        "response":"```python\ndef fifth_Power_Sum(n: int) -> int:\n    return sum(i ** 5 for i in range(1, n + 1))\n```"
    },
    {
        "id":56,
        "response":"```python\nimport numpy as np\n\ndef find_Min_Sum(lst1, lst2, n):\n    lst1.sort()\n    lst2.sort()\n    return sum(abs(a - b) for a, b in zip(lst1, lst2))\n```"
    },
    {
        "id":57,
        "response":"```python\nimport math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    if n == 0 or n == 1:\n        return 1\n    factorial = math.factorial(n)\n    return int(str(factorial)[0])\n```"
    },
    {
        "id":58,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(lst: List) -> object:\n    counter = Counter(lst)\n    return counter.most_common(1)[0][0]\n\n# Example usage:\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nprint(max_occurrences(lst))  # Output: 4\n```"
    },
    {
        "id":59,
        "response":"```python\nfrom typing import List\n\ndef Repeat(lst: List[int]) -> None:\n    seen = set()\n    duplicates = set()\n    for num in lst:\n        if num in seen:\n            duplicates.add(num)\n        seen.add(num)\n    for duplicate in duplicates:\n        print(duplicate)\n\n# Example usage:\nlst = [1, 2, 3, 2, 4, 5, 6, 7, 8, 9, 5]\nRepeat(lst)\n```"
    },
    {
        "id":60,
        "response":"```python\nimport random\nfrom typing import List, Tuple\n\ndef find_Points(n: int, n2: int, n3: int, n4: int) -> Tuple[List[int], List[int]]:\n    range1: List[int] = list(range(n, n2 + 1))\n    range2: List[int] = list(range(n3, n4 + 1))\n    common_points: List[int] = list(set(range1) & set(range2))\n    points_in_range1_not_in_range2: List[int] = list(set(range1) - set(range2))\n    points_in_range2_not_in_range1: List[int] = list(set(range2) - set(range1))\n    \n    if not points_in_range1_not_in_range2 or not points_in_range2_not_in_range1:\n        return [], []\n    \n    point1: int = random.choice(points_in_range1_not_in_range2)\n    point2: int = random.choice(points_in_range2_not_in_range1)\n    \n    return [point1], [point2]\n\n# Test the function\nprint(find_Points(1, 10, 5, 15))\n```"
    },
    {
        "id":61,
        "response":"```python\nfrom typing import List\n\ndef max_sum_of_three_consecutive(lst: List[int], n: int) -> int:\n    if n < 3:\n        return sum(lst)\n    if len(lst) < 3:\n        return 0\n    \n    dp = [0] * len(lst)\n    dp[0] = lst[0]\n    dp[1] = lst[0] + lst[1]\n    dp[2] = max(lst[0] + lst[1], lst[1] + lst[2], lst[0] + lst[2], lst[2])\n    \n    for i in range(3, len(lst)):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i], dp[i-3] + lst[i-1] + lst[i])\n    \n    return dp[-1]\n```"
    },
    {
        "id":62,
        "response":"```python\nfrom typing import Dict, List\n\ndef sorted_dict(dct: Dict) -> Dict:\n    return dict(sorted(dct.items(), key=lambda item: item[1]))\n```"
    },
    {
        "id":63,
        "response":"```python\nimport math\n\ndef find_max_val(n, n2, n3):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find_max_k(x, y):\n        max_k = 0\n        for k in range(x + 1):\n            if k % x == y:\n                max_k = k\n        return max_k\n\n    max_k = 0\n    for k in range(n3 + 1):\n        if k % n == n2:\n            max_k = max(max_k, k)\n    return max_k\n\n# alternative solution \ndef find_max_val_alt(n, n2, n3):\n    if n == 0:\n        return n2 if n2 <= n3 else -1\n    return n2 + (n3 - n2) \/\/ n * n\n```"
    },
    {
        "id":64,
        "response":"```python\ndef average_Even(n):\n    if n <= 0:\n        return 0\n    even_numbers = [i for i in range(2, n+1, 2)]\n    if not even_numbers:\n        return 0\n    return sum(even_numbers) \/ len(even_numbers)\n```"
    },
    {
        "id":65,
        "response":"```python\ndef move_last(lst):\n    if len(lst) > 1:\n        return lst[1:] + lst[:1]\n    else:\n        return lst\n```"
    },
    {
        "id":66,
        "response":"```python\nfrom typing import Dict\n\ndef count_char(s: str, s2: str) -> Dict[str, int]:\n    char_count = {}\n    for char in s2:\n        if char in s:\n            char_count[char] = s.count(char)\n    return char_count\n```"
    },
    {
        "id":67,
        "response":"```python\nimport re\nfrom typing import List\n\ndef Check_Vow(s: str, s2: str) -> List[int]:\n    s_vow = len(re.findall(r'[aeiou]', s, flags=re.IGNORECASE))\n    s2_vow = len(re.findall(r'[aeiou]', s2, flags=re.IGNORECASE))\n    return [s_vow, s2_vow]\n\ndef main():\n    s = \"Hello World\"\n    s2 = \"Python Programming\"\n    print(Check_Vow(s, s2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":68,
        "response":"```python\nfrom collections import OrderedDict\n\ndef replace(s, s2):\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            result.append(char)\n            seen.add(char)\n    return ''.join(result)\n\ndef replace_optimized(s):\n    seen = set()\n    return ''.join([c for c in s if not (c in seen or seen.add(c))])\n\ndef replace_ordered_dict(s):\n    return ''.join(OrderedDict.fromkeys(s))\n\n# Test\nprint(replace(\"Programming\", \"\")) \nprint(replace_optimized(\"Programming\")) \nprint(replace_ordered_dict(\"Programming\"))\n```"
    },
    {
        "id":69,
        "response":"```python\nimport re\n\ndef check_IP(s):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":70,
        "response":"```python\nfrom typing import List\n\ndef decreasing_trend(lst: List[float]) -> bool:\n    return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))\n```"
    },
    {
        "id":71,
        "response":"```python\ndef set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 1\n    rightmost_set_bit = n & -n\n    return n | rightmost_set_bit\n```"
    },
    {
        "id":72,
        "response":"```python\ndef max_of_three(n: int, n2: int, n3: int) -> int:\n    return max(n, n2, n3)\n```"
    },
    {
        "id":73,
        "response":"```python\nimport itertools\n\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n\n# Example usage:\nlst = [1, 2, 3, 4, 5]\nprint(convert(lst))  # Outputs: 12345\n```"
    },
    {
        "id":74,
        "response":"```python\nfrom typing import List\n\ndef remove_duplicate(s: str) -> str:\n    words: List[str] = s.split()\n    unique_words: List[str] = []\n    for word in words:\n        if word not in unique_words:\n            unique_words.append(word)\n    return ' '.join(unique_words)\n\ndef remove_duplicate_set(s: str) -> str:\n    words: List[str] = s.split()\n    unique_words: List[str] = list(set(words))\n    return ' '.join(unique_words)\n\ndef remove_duplicate_ordered(s: str) -> str:\n    words: List[str] = s.split()\n    seen: set = set()\n    unique_words: List[str] = [word for word in words if not (word in seen or seen.add(word))]\n    return ' '.join(unique_words)\n\n# Test \nprint(remove_duplicate(\"Hello world world\"))\nprint(remove_duplicate_set(\"Hello world world\"))\nprint(remove_duplicate_ordered(\"Hello world world\"))\n```"
    },
    {
        "id":75,
        "response":"```python\ndef sum_nums(n, n2, n3, n4):\n    import re\n    from typing import Tuple\n\n    def is_within_range(num: int, rng: Tuple[int, int]) -> bool:\n        return rng[0] <= num <= rng[1]\n\n    sum_val = n + n2 + n3 + n4\n    if is_within_range(sum_val, (n, n4)):\n        return 20\n    else:\n        return sum_val\n```"
    },
    {
        "id":76,
        "response":"```python\nimport re\n\ndef remove_extra_char(s: str) -> str:\n    return re.sub('[^a-zA-Z0-9]', '', s)\n```"
    },
    {
        "id":77,
        "response":"```python\ndef validity_triangle(n, n2, n3):\n    if n + n2 > n3 and n + n3 > n2 and n2 + n3 > n:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":78,
        "response":"```python\ndef remove_spaces(s: str) -> str:\n    return s.replace(\" \", \"\")\n```"
    },
    {
        "id":79,
        "response":"```python\nfrom typing import Dict, Any\n\ndef access_key(dct: Dict[Any, Any], n: int) -> Any:\n    keys = list(dct.keys())\n    if n < len(keys):\n        return dct[keys[n]]\n    else:\n        return None\n```"
    },
    {
        "id":80,
        "response":"```python\nfrom typing import List\n\ndef increasing_trend(lst: List[float]) -> bool:\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n```"
    },
    {
        "id":81,
        "response":"```python\nimport math\n\ndef smallest_divisor(n: int) -> int:\n    if n == 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n```"
    },
    {
        "id":82,
        "response":"```python\nfrom typing import List\n\ndef mul_list(lst: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x * y, lst, lst2))\n\n# Test\nlst = [1, 2, 3]\nlst2 = [4, 5, 6]\nprint(mul_list(lst, lst2))\n```"
    },
    {
        "id":83,
        "response":"```python\nimport math\n\ndef sum_Square(n: int) -> bool:\n    i = 0\n    while i * i <= n:\n        j = int(math.sqrt(n - i * i))\n        if i * i + j * j == n:\n            return True\n        i += 1\n    return False\n```"
    },
    {
        "id":84,
        "response":"```python\nfrom collections import Counter\n\ndef count_Char(s, s2):\n    if not s or not s2:\n        return {}\n    \n    count = Counter(s2)\n    repeat = len(s2) \/\/ len(s)\n    remain = len(s2) % len(s)\n    \n    total_count = Counter()\n    \n    for char in count:\n        total_count[char] = count[char] \/\/ repeat * repeat\n        if remain > 0 and s[:remain].count(char) > 0:\n            total_count[char] += s[:remain].count(char)\n    \n    result = {}\n    for char in s:\n        result[char] = total_count[char]\n    \n    return result\n```"
    },
    {
        "id":85,
        "response":"```python\nimport math\n\ndef sum_Of_Primes(n: int) -> int:\n    if n < 2:\n        return 0\n    \n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i):\n                sieve[j] = False\n    \n    return sum(num for num, is_prime in enumerate(sieve) if is_prime)\n\n# Example usage:\nprint(sum_Of_Primes(10))  # Output: 17\n```"
    },
    {
        "id":86,
        "response":"```python\nfrom typing import Tuple, Dict\nfrom collections import Counter\n\ndef freq_element(tup: Tuple) -> Dict:\n    return dict(Counter(tup))\n```"
    },
    {
        "id":87,
        "response":"```python\ndef recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n```"
    },
    {
        "id":88,
        "response":"```python\nimport math\n\ndef len_complex(n, n2):\n    return math.sqrt(n**2 + n2**2)\n```"
    },
    {
        "id":89,
        "response":"```python\nfrom typing import List\n\ndef min_jumps(lst: List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    if lst[0] == 0:\n        return -1\n\n    max_reach = lst[0]\n    step = lst[0]\n    jump = 1\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + lst[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return -1\n```"
    },
    {
        "id":90,
        "response":"```python\nfrom typing import List\n\ndef mul_consecutive_nums(lst: List[int]) -> List[int]:\n    if len(lst) < 2:\n        return []\n    \n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] * lst[i + 1])\n    \n    return result\n```"
    },
    {
        "id":91,
        "response":"```python\nfrom typing import List, Tuple, Dict\n\ndef group_element(lst: List[Tuple]) -> Dict:\n    result = {}\n    for tup in lst:\n        if len(tup) < 2:\n            raise ValueError(\"Tuple must have at least two elements\")\n        key, value = tup[1], tup[0]\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n# Example usage:\nlst = [(1, 'a'), (2, 'a'), (3, 'b'), (4, 'b'), (5, 'c')]\nprint(group_element(lst))\n```"
    },
    {
        "id":92,
        "response":"```python\ndef last_Two_Digits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n < 2:\n        return n\n    \n    MOD = 100\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % MOD\n    return result\n```"
    },
    {
        "id":93,
        "response":"```python\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +', ' ', s)\n\n# Example usage:\nprint(remove_multiple_spaces(\"Hello   World!  This is   a test.\"))\n```"
    },
    {
        "id":94,
        "response":"```python\nfrom typing import Dict, Any\n\ndef extract_unique(dct: Dict[Any, Any]) -> set:\n    return set(dct.values())\n```"
    },
    {
        "id":95,
        "response":"```python\nfrom typing import Tuple\n\ndef check_greater(tup1: Tuple[int, int, int], tup2: Tuple[int, int, int]) -> bool:\n    if len(tup1) != len(tup2):\n        return False\n    return all(a < b for a, b in zip(tup1, tup2))\n```"
    },
    {
        "id":96,
        "response":"```python\nfrom typing import List\n\ndef zip_list(lst1: List, lst2: List) -> List:\n    return list(zip(lst1, lst2))\n\ndef concat_list(lst1: List, lst2: List) -> List:\n    return lst1 + lst2\n\n# Test the functions\nlst1 = [1, 2, 3]\nlst2 = ['a', 'b', 'c']\n\nprint(zip_list(lst1, lst2))\nprint(concat_list(lst1, lst2))\n```"
    },
    {
        "id":97,
        "response":"```python\nfrom typing import List\n\ndef count_even(lst: List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 == 0, lst)))\n```"
    },
    {
        "id":98,
        "response":"```python\nfrom itertools import product\nfrom typing import Dict, Tuple\n\ndef sort_dict_item(dct: Dict[Tuple[int, int], int]) -> Dict[Tuple[int, int], int]:\n    keys = list(dct.keys())\n    sorted_keys = sorted(keys)\n    return {key: dct[key] for key in sorted_keys}\n\n# Example usage:\ndct = {(2, 1): 1, (1, 1): 2, (2, 2): 3, (1, 2): 4}\nprint(sort_dict_item(dct))\n```"
    },
    {
        "id":99,
        "response":"```python\nfrom collections import deque\n\ndef min_swaps(s, t):\n    if len(s) != len(t):\n        return -1\n    \n    s_list = list(s)\n    t_list = list(t)\n    queue = deque([(s_list, 0)])\n    visited = set()\n    visited.add(tuple(s_list))\n    \n    while queue:\n        current, steps = queue.popleft()\n        \n        if current == t_list:\n            return steps\n        \n        for i in range(len(current)):\n            for j in range(i + 1, len(current)):\n                new_list = current[:]\n                new_list[i], new_list[j] = new_list[j], new_list[i]\n                new_tuple = tuple(new_list)\n                \n                if new_tuple not in visited:\n                    queue.append((new_list, steps + 1))\n                    visited.add(new_tuple)\n                    \n    return -1\n```"
    },
    {
        "id":100,
        "response":"```python\nfrom typing import List\n\ndef count_range_in_list(lst: List[int], n: int, n2: int) -> int:\n    return sum(1 for i in lst if n <= i <= n2)\n```"
    },
    {
        "id":101,
        "response":"```python\ndef equilibrium_index(lst):\n    for i in range(len(lst)):\n        if sum(lst[:i]) == sum(lst[i+1:]):\n            return i\n    return -1\n```"
    },
    {
        "id":102,
        "response":"```python\nfrom typing import List\n\ndef removals(lst: List[int], n: int, k: int) -> int:\n    lst.sort()\n    i = 0\n    count = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst) and lst[j] - lst[i] <= k:\n            j += 1\n        count = max(count, j - i)\n        i += 1\n    return len(lst) - count\n```"
    },
    {
        "id":103,
        "response":"```python\ndef is_key_present(dct, key):\n    return key in dct\n\n# Example usage:\ndct = {\"a\": 1, \"b\": 2, \"c\": 3}\nprint(is_key_present(dct, \"a\"))  # Output: True\nprint(is_key_present(dct, \"d\"))  # Output: False\n```"
    },
    {
        "id":104,
        "response":"```python\nfrom typing import Union\n\ndef harmonic_sum(n: int) -> Union[float, str]:\n    if not isinstance(n, int) or n <= 0:\n        return \"Input should be a positive integer.\"\n    if n == 1:\n        return 1.0\n    harmonic_sum = 0.0\n    for i in range(1, n):\n        harmonic_sum += 1 \/ i\n    return harmonic_sum\n```"
    },
    {
        "id":105,
        "response":"```python\nfrom typing import List\n\ndef sort_sublists(lst: List[List[int]]) -> List[List[int]]:\n    return sorted(lst, key=lambda x: (len(x), x))\n```"
    },
    {
        "id":106,
        "response":"```python\nfrom typing import List\n\ndef is_subset(lst: List[int], n: int, lst2: List[int], n2: int) -> bool:\n    if n > n2:\n        return False\n\n    lst.sort()\n    lst2.sort()\n\n    i = j = 0\n    while i < n and j < n2:\n        if lst[i] < lst2[j]:\n            return False\n        elif lst[i] == lst2[j]:\n            i += 1\n        j += 1\n\n    return i == n\n```"
    },
    {
        "id":107,
        "response":"```python\ndef count_Set_Bits(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('1')\n    return count\n```"
    },
    {
        "id":108,
        "response":"```python\ndef Convert(s):\n    return list(s)\n\n# Example usage:\nprint(Convert(\"hello\"))\n```"
    },
    {
        "id":109,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\ndef get_unique(lst: List[Tuple[int, int]]) -> dict:\n    unique_count = defaultdict(int)\n    for tup in lst:\n        for val in tup:\n            unique_count[val] += 1\n    return dict(unique_count)\n\n# Example usage:\nlst = [(1, 2), (2, 3), (1, 4), (5, 6), (2, 7)]\nprint(get_unique(lst))\n```"
    },
    {
        "id":110,
        "response":"```python\nfrom typing import Tuple\n\ndef front_and_rear(tup: Tuple) -> Tuple:\n    if len(tup) == 0:\n        return None, None\n    return tup[0], tup[-1]\n```"
    },
    {
        "id":111,
        "response":"```python\nimport re\nfrom typing import Union\n\ndef product_Equal(n: Union[int, str]) -> bool:\n    if isinstance(n, int):\n        str_n = str(n)\n    else:\n        str_n = n\n    \n    if not str_n.isdigit():\n        raise ValueError(\"Input must be an integer or a string of digits\")\n    \n    digits = [int(i) for i in str_n]\n    \n    product_even = 1\n    product_odd = 1\n    \n    for i in range(len(digits)):\n        if i % 2 == 0:\n            product_even *= digits[i]\n        else:\n            product_odd *= digits[i]\n    \n    return product_even % 2 == product_odd % 2\n```"
    },
    {
        "id":112,
        "response":"```python\nfrom typing import List\n\ndef remove_duplicate(lst: List) -> List:\n    seen = set()\n    return [x for x in lst if not (x in seen or seen.add(x))]\n\n# Example usage:\nlst = [1, 2, 2, 3, 4, 4, 5, 6, 6]\nprint(remove_duplicate(lst))\n```"
    },
    {
        "id":113,
        "response":"```python\nimport re\n\ndef check_valid(tup):\n    for item in tup:\n        if not isinstance(item, (str, int, float, bool)):\n            return False\n        if isinstance(item, str) and not re.match('^[a-zA-Z0-9._%+-]+$', item):\n            return False\n    return True\n```"
    },
    {
        "id":114,
        "response":"```python\nimport math\n\ndef count_Fac(n):\n    factors = {}\n    while n % 2 == 0:\n        factors[2] = factors.get(2, 0) + 1\n        n = n \/\/ 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n = n \/\/ i\n    if n > 2:\n        factors[n] = factors.get(n, 0) + 1\n    return len(factors)\n\nprint(count_Fac(100)) \n```"
    },
    {
        "id":115,
        "response":"```python\nimport re\nfrom typing import Tuple\n\ndef str_to_tuple(s: str) -> Tuple[int, ...]:\n    return tuple(map(int, re.findall(r'-?\\d+', s)))\n```"
    },
    {
        "id":116,
        "response":"```python\ndef rombus_perimeter(n):\n    return 4 * n\n```"
    },
    {
        "id":117,
        "response":"```python\nimport math\nfrom typing import List\n\ndef sd_calc(lst: List[float]) -> float:\n    n = len(lst)\n    mean = sum(lst) \/ n\n    variance = sum((x - mean) ** 2 for x in lst) \/ n\n    return math.sqrt(variance)\n```"
    },
    {
        "id":118,
        "response":"```python\nfrom typing import List\n\ndef alternate_elements(lst: List) -> List:\n    return lst[::2]\n```"
    },
    {
        "id":119,
        "response":"```python\nimport re\ndef text_match(s):\n    pattern = r\"^a+b*$\"\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":120,
        "response":"```python\nfrom typing import Tuple, Dict, Any\n\ndef add_dict_to_tuple(tup: Tuple[Any], dct: Dict[str, Any]) -> Tuple[Any]:\n    return tup + (dct,)\n\n# Example usage:\ntup = (1, 2, 3)\ndct = {\"a\": 1, \"b\": 2}\nprint(add_dict_to_tuple(tup, dct))\n```"
    },
    {
        "id":121,
        "response":"```python\nfrom typing import List\n\ndef maxAverageOfPath(lst: List[List[int]], n: int) -> float:\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    dp = [[0.0]*n for _ in range(n)]\n    \n    dp[0][0] = lst[0][0]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            max_val = float('-inf')\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 0 <= x < n and 0 <= y < n:\n                    max_val = max(max_val, dp[x][y])\n            dp[i][j] = max_val \/ (lst[i][j] + 1)\n    \n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            max_avg = max(max_avg, dp[i][j] \/ (i + j + 1))\n    \n    return max_avg\n\ndef maxAverageOfPathCorrect(lst: List[List[int]], n: int) -> float:\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    dp = [[0.0]*n for _ in range(n)]\n    \n    dp[0][0] = lst[0][0]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            max_val = float('-inf')\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 0 <= x < n and 0 <= y < n:\n                    max_val = max(max_val, dp[x][y])\n            if max_val != float('-inf'):\n                dp[i][j] = max_val + lst[i][j]\n            else:\n                dp[i][j] = lst[i][j]\n    \n    max_avg = float('-inf')\n    return max(dp[i][j] \/ (i + j + 1) for i in range(n) for j in range(n))\n```"
    },
    {
        "id":122,
        "response":"```python\nfrom typing import Dict\n\ndef filter_data(dct: Dict, n: int, n2: int) -> Dict:\n    return {k: v for k, v in dct.items() if v['height'] > n and v['width'] > n2}\n\n# Example usage:\ndata = {\n    'student1': {'height': 160, 'width': 50},\n    'student2': {'height': 170, 'width': 60},\n    'student3': {'height': 150, 'width': 40}\n}\n\nprint(filter_data(data, 155, 55))\n```"
    },
    {
        "id":123,
        "response":"```python\nfrom typing import List\nfrom itertools import zip_longest, starmap\n\ndef count_same_pair(lst1: List, lst2: List) -> int:\n    return sum(starmap(lambda x, y: x == y, zip_longest(lst1, lst2, fillvalue=None)))\n```"
    },
    {
        "id":124,
        "response":"```python\ndef power_base_sum(n, n2):\n    import math\n    sum = 0\n    while n > 0:\n        sum += n % n2\n        n \/\/= n2\n    return sum\n```"
    },
    {
        "id":125,
        "response":"```python\nimport re\nfrom typing import List\n\ndef extract_quotation(s: str) -> List[str]:\n    return re.findall(r'\"[^\"]*\"|\\'[^\\']*\\'', s)\n\n# Example usage:\nprint(extract_quotation('He said \"Hello world\" and she replied \\'I am fine\\''))\n```"
    },
    {
        "id":126,
        "response":"```python\nfrom typing import Tuple\n\ndef multiply_elements(tup: Tuple[int, ...]) -> list:\n    if len(tup) < 2:\n        return []\n    return [tup[i] * tup[i + 1] for i in range(len(tup) - 1)]\n```"
    },
    {
        "id":127,
        "response":"```python\nimport re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)\n```"
    },
    {
        "id":128,
        "response":"```python\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    max_len = max(len(lst1), len(lst2))\n    lst1 += [0] * (max_len - len(lst1))\n    lst2 += [0] * (max_len - len(lst2))\n    return [x + y for x, y in zip(lst1, lst2)]\n```"
    },
    {
        "id":129,
        "response":"```python\nfrom typing import List\n\ndef add_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x + y, lst1, lst2))\n\n# or using zip\ndef add_list_zip(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x: x[0] + x[1], zip(lst1, lst2)))\n\n# handling lists of different lengths\ndef add_list_zip_longest(lst1: List[int], lst2: List[int]) -> List[int]:\n    from itertools import zip_longest\n    return list(map(lambda x: x[0] + x[1] if x[0] is not None and x[1] is not None else (x[0] if x[1] is None else x[1]), zip_longest(lst1, lst2, fillvalue=0)))\n```"
    },
    {
        "id":130,
        "response":"```python\nfrom typing import List\n\ndef consecutive_duplicates(lst: List) -> List:\n    result = []\n    for i in lst:\n        if not result or i != result[-1]:\n            result.append(i)\n    return result\n```"
    },
    {
        "id":131,
        "response":"```python\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)\n```"
    },
    {
        "id":132,
        "response":"```python\nimport re\n\ndef replace_specialchar(s: str) -> str:\n    return re.sub('[ ,.]', ':', s)\n```"
    },
    {
        "id":133,
        "response":"```python\nfrom typing import List\n\ndef find_first_occurrence(lst: List[int], n: int) -> int:\n    for i in range(len(lst)):\n        if lst[i] == n:\n            return i\n    return -1\n```"
    },
    {
        "id":134,
        "response":"```python\nimport math\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(lst: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= lst[j]\n            total_sum += product\n    return total_sum\n\n# Example usage:\nlst = [1, 2, 3]\nn = len(lst)\nprint(sum_Of_Subarray_Prod(lst, n))\n```"
    },
    {
        "id":135,
        "response":"```python\ndef toggle_middle_bits(n):\n    import math\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    if num_bits == 1:\n        return 0\n    mask = ((1 << (num_bits - 2)) - 1) << 1\n    return n ^ mask\n```"
    },
    {
        "id":136,
        "response":"```python\nfrom typing import List\n\ndef left_insertion(lst: List[int], n: int) -> int:\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```"
    },
    {
        "id":137,
        "response":"```python\ndef check_str(s):\n    if not s:\n        return False\n    vowels = 'aeiouAEIOU'\n    return s[0] in vowels\n```"
    },
    {
        "id":138,
        "response":"```python\nimport math\n\ndef geometric_sum(n: int) -> float:\n    if n <= 0:\n        return 0\n    else:\n        return (1 - math.pow(0.5, n)) \/ (1 - 0.5)\n```"
    },
    {
        "id":139,
        "response":"```python\nimport math\n\ndef find_Index(n):\n    if n <= 0:\n        return -1\n    i = 1\n    while True:\n        num = i * (i + 1) \/\/ 2\n        if len(str(num)) == n:\n            return i\n        i += 1\n```"
    },
    {
        "id":140,
        "response":"```python\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(tup: Tuple) -> Dict:\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple length must be even\")\n    return dict(zip(tup[::2], tup[1::2]))\n```"
    },
    {
        "id":141,
        "response":"```python\nfrom typing import Any\n\ndef all_Characters_Same(s: str) -> bool:\n    if not s:\n        return True\n    return len(set(s)) == 1\n```"
    },
    {
        "id":142,
        "response":"```python\nimport math\n\ndef area_tetrahedron(n):\n    return (math.sqrt(3) \/ 4) * (n ** 2)\n```"
    },
    {
        "id":143,
        "response":"```python\nfrom collections import deque\nfrom typing import List\n\ndef rotate_right(lst: List[int], n: int, n2: int) -> List[int]:\n    d = deque(lst)\n    d.rotate(n2)\n    return list(d)[:n]\n```"
    },
    {
        "id":144,
        "response":"```python\ndef check_none(tup):\n    return None in tup\n```"
    },
    {
        "id":145,
        "response":"```python\ndef divisible_by_digits(n, m):\n    result = []\n    for i in range(n, m + 1):\n        str_i = str(i)\n        divisible = True\n        for digit in str_i:\n            if digit == '0' or i % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(i)\n    return result\n```"
    },
    {
        "id":146,
        "response":"```python\nimport math\n\ndef sector_area(n, n2):\n    return (n2 \/ 360) * math.pi * n ** 2\n```"
    },
    {
        "id":147,
        "response":"```python\ndef lcs_of_three(s, s2, s3, n, n2, n3):\n    m, n, o = len(s), len(s2), len(s3)\n    dp = [[[0]*(o+1) for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif s[i-1] == s2[j-1] == s3[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    lcs = []\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if s[i-1] == s2[j-1] == s3[k-1]:\n            lcs.append(s[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        else:\n            max_val = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n            if max_val == dp[i-1][j][k]:\n                i -= 1\n            elif max_val == dp[i][j-1][k]:\n                j -= 1\n            else:\n                k -= 1\n    return \"\".join(reversed(lcs))\n\ns = \"abcde\"\ns2 = \"ace\"\ns3 = \"abcde\"\nn = len(s)\nn2 = len(s2)\nn3 = len(s3)\nprint(lcs_of_three(s, s2, s3, n, n2, n3))\n```"
    },
    {
        "id":148,
        "response":"```python\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", s)\n```"
    },
    {
        "id":149,
        "response":"```python\nfrom typing import List\n\ndef sort_numeric_strings(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: int(x))\n```"
    },
    {
        "id":150,
        "response":"```python\nfrom typing import List, Tuple\n\ndef add_tuple(lst: List, tup: Tuple) -> List:\n    lst.append(tup)\n    return lst\n\n# Example usage:\nmy_list = [1, 2, 3]\nmy_tuple = (4, 5, 6)\nprint(add_tuple(my_list, my_tuple))\n```"
    },
    {
        "id":151,
        "response":"```python\nimport math\n\ndef check_min_heap(lst, n):\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n\n        if left_child < n and lst[i] > lst[left_child]:\n            return False\n\n        if right_child < n and lst[i] > lst[right_child]:\n            return False\n\n    return True\n```"
    },
    {
        "id":152,
        "response":"```python\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * a + b\n    \n    return b\n```"
    },
    {
        "id":153,
        "response":"```python\nimport heapq\nfrom typing import List, Tuple\n\ndef min_k(lst: List[Tuple[int, int]], n: int) -> List[Tuple[int, int]]:\n    return heapq.nsmallest(n, lst)\n```"
    },
    {
        "id":154,
        "response":"```python\nfrom typing import List\n\ndef extract_index_list(lst: List, lst2: List, lst3: List) -> List:\n    min_len = min(len(lst), len(lst2), len(lst3))\n    return [lst[i] for i in range(min_len) if lst[i] == lst2[i] == lst3[i]]\n```"
    },
    {
        "id":155,
        "response":"```python\nfrom typing import List, Optional\n\ndef second_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    unique_nums = set(lst)\n    if len(unique_nums) < 2:\n        return None\n    return sorted(unique_nums)[1]\n```"
    },
    {
        "id":156,
        "response":"```python\nimport re\ndef text_match_zero_one(s):\n    pattern = re.compile(r'0|b', re.IGNORECASE)\n    return bool(pattern.search(s))\n```"
    },
    {
        "id":157,
        "response":"```python\nfrom typing import List\n\ndef count_reverse_pairs(lst: List[str]) -> int:\n    str_set = set()\n    reverse_count = 0\n    for s in lst:\n        if s[::-1] in str_set:\n            reverse_count += 1\n        str_set.add(s)\n    return reverse_count\n```"
    },
    {
        "id":158,
        "response":"```python\nfrom typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    seen = set()\n    count = 0\n    for sublist in lst:\n        tuple_sublist = tuple(sorted(sublist))\n        if tuple_sublist not in seen:\n            seen.add(tuple_sublist)\n            count += 1\n    return count\n```"
    },
    {
        "id":159,
        "response":"```python\nimport re\ndef is_decimal(s):\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":160,
        "response":"```python\nfrom typing import List\n\ndef unique_Element(lst: List[int], n: int) -> bool:\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    unique_count = 0\n    for count in count_dict.values():\n        if count == 1:\n            unique_count += 1\n    return unique_count == 1\n```"
    },
    {
        "id":161,
        "response":"```python\nimport math\n\ndef arc_length(n, n2):\n    theta = math.radians(n2)\n    return abs(n * theta)\n```"
    },
    {
        "id":162,
        "response":"```python\ndef check_monthnumber_number(n):\n    if n in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif n in [4, 6, 9, 11]:\n        return True\n    elif n == 2:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")\n```"
    },
    {
        "id":163,
        "response":"```python\nfrom typing import Tuple\n\ndef find_Min_Diff(tup: Tuple[int], n: int) -> int:\n    tup = sorted(tup)\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = tup[i+1] - tup[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```"
    },
    {
        "id":164,
        "response":"```python\nimport re\ndef number_ctr(s):\n    return len(re.findall(r'\\d', s))\n```"
    },
    {
        "id":165,
        "response":"```python\nimport math\n\ndef is_polite(n: int) -> bool:\n    for i in range(1, n):\n        total = 0\n        for j in range(i, n):\n            total += j\n            if total == n:\n                return True\n            if total > n:\n                break\n    return False\n\ndef nth_polite_number(n: int) -> int:\n    count = 0\n    num = 1\n    while True:\n        if is_polite(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n```"
    },
    {
        "id":166,
        "response":"```python\nfrom typing import List, Tuple\n\ndef pair_wise(lst: List) -> List[Tuple]:\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n```"
    },
    {
        "id":167,
        "response":"```python\nfrom typing import List\n\ndef get_Pairs_Count(lst: List[int], n: int, target_sum: int) -> int:\n    count = 0\n    freq = {}\n    for i in range(n):\n        complement = target_sum - lst[i]\n        if complement in freq:\n            count += freq[complement]\n        if lst[i] in freq:\n            freq[lst[i]] += 1\n        else:\n            freq[lst[i]] = 1\n    return count\n\ndef get_Pairs_Count(lst: List[int], n: int, target_sum: int) -> int:\n    count = 0\n    freq = {}\n    for num in lst:\n        complement = target_sum - num\n        if complement in freq:\n            count += freq[complement]\n        freq[num] = freq.get(num, 0) + 1\n    return count\n```"
    },
    {
        "id":168,
        "response":"```python\ndef check_Odd_Parity(n: int) -> bool:\n    import math\n    if n < 0:\n        n = -n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count % 2 != 0\n```"
    },
    {
        "id":169,
        "response":"```python\nfrom typing import List\n\ndef Diff(lst1: List, lst2: List) -> List:\n    set1 = set(lst1)\n    set2 = set(lst2)\n    return list(set1.symmetric_difference(set2))\n\n# Example usage:\nlst1 = [1, 2, 3, 4]\nlst2 = [3, 4, 5, 6]\nprint(Diff(lst1, lst2))\n```"
    },
    {
        "id":170,
        "response":"```python\nimport math\n\ndef odd_Num_Sum(n: int) -> int:\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    total_sum = 0\n    count = 0\n    num = 1\n    \n    while count < n:\n        if num % 2 != 0:\n            total_sum += math.pow(num, 4)\n            count += 1\n        num += 1\n    \n    return int(total_sum)\n```"
    },
    {
        "id":171,
        "response":"```python\nfrom typing import List\n\ndef check_expression(s: str) -> bool:\n    stack: List[str] = []\n    bracket_map: dict = {')': '(', '}': '{', ']': '['}\n\n    for char in s:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack\n```"
    },
    {
        "id":172,
        "response":"```python\nimport re\ndef remove_length(s, n):\n    return re.sub(r'\\b\\w{' + str(n) + r'}\\b', '', s)\n```"
    },
    {
        "id":173,
        "response":"```python\nimport re\n\ndef occurance_substring(s, s2):\n    if not s or not s2:\n        return []\n    \n    result = [(m.start(), m.group()) for m in re.finditer(s2, s)]\n    return result\n\ndef main():\n    s = \"Hello world, world is beautiful\"\n    s2 = \"world\"\n    print(occurance_substring(s, s2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":174,
        "response":"```python\nimport re\n\ndef check_email(s):\n    def is_valid_local_part(local_part):\n        return len(local_part) <= 64 and all(c.isalnum() or c in ['.', '_', '%', '+', '-'] for c in local_part)\n\n    def is_valid_domain(domain):\n        domain_parts = domain.split('.')\n        if len(domain_parts) < 2:\n            return False\n        for part in domain_parts:\n            if not part.isalnum() or len(part) > 63:\n                return False\n        return True\n\n    at_index = s.find('@')\n    if at_index == -1 or at_index == 0 or at_index == len(s) - 1:\n        return False\n    local_part = s[:at_index]\n    domain = s[at_index + 1:]\n    return is_valid_local_part(local_part) and is_valid_domain(domain)\n\n# Test cases:\nprint(check_email(\"test@example.com\"))  # True\nprint(check_email(\"invalid_email\"))  # False\nprint(check_email(\"test@.com\"))  # False\nprint(check_email(\"@example.com\"))  # False\nprint(check_email(\"test@example\"))  # False\n```"
    },
    {
        "id":175,
        "response":"```python\ndef odd_position(lst):\n    import re\n    return [bool(re.search(r'odd', str(x))) for x in lst[1::2]]\n```"
    },
    {
        "id":176,
        "response":"```python\nfrom typing import Dict\n\ndef count_vowels(s: str) -> Dict[str, int]:\n    vowels = 'aeiou'\n    count: Dict[str, int] = {'preceding': 0, 'following': 0}\n\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if i > 0 and s[i-1].lower() in vowels:\n                count['preceding'] += 1\n            if i < len(s) - 1 and s[i+1].lower() in vowels:\n                count['following'] += 1\n\n    return count\n```"
    },
    {
        "id":177,
        "response":"```python\nfrom typing import List\n\ndef find_Sum(lst: List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    unique_elements = set(lst)\n    return sum(unique_elements)\n```"
    },
    {
        "id":178,
        "response":"```python\nfrom typing import List\n\ndef pack_consecutive_duplicates(lst: List) -> List:\n    if not lst:\n        return []\n\n    result = [[lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result\n```"
    },
    {
        "id":179,
        "response":"```python\nfrom typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    seen = set()\n    count = 0\n    for sublist in lst:\n        frozenset_sublist = frozenset(sublist)\n        if frozenset_sublist not in seen:\n            seen.add(frozenset_sublist)\n            count += 1\n    return count\n```"
    },
    {
        "id":180,
        "response":"```python\nfrom typing import List, Tuple\nimport itertools\n\ndef find_combinations(lst: List[Tuple[int, int]]) -> List[List[Tuple[int, int]]]:\n    result = []\n    for r in range(1, len(lst) + 1):\n        combinations = list(itertools.combinations(lst, r))\n        result.extend(combinations)\n    return result\n\n# Example usage:\nlst = [(1, 2), (3, 4), (5, 6)]\nprint(find_combinations(lst))\n```"
    },
    {
        "id":181,
        "response":"```python\nimport math\n\ndef count_Divisors(n: int) -> tuple:\n    count = 0\n    even_count = 0\n    odd_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n            else:\n                count += 2\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n                if (n \/\/ i) % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n    return even_count, odd_count\n```"
    },
    {
        "id":182,
        "response":"```python\nfrom typing import List\n\ndef Odd_Length_Sum(lst: List[int]) -> int:\n    total_sum = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            if (j - i) % 2 != 0:\n                total_sum += sum(lst[i:j])\n    return total_sum\n```"
    },
    {
        "id":183,
        "response":"```python\nimport math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r \/ 255.0, g \/ 255.0, b \/ 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) \/ df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) \/ df) + 120) % 360\n    else:\n        h = (60 * ((r - g) \/ df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df \/ mx\n    v = mx\n    return round(h, 2), round(s, 2), round(v, 2)\n```"
    },
    {
        "id":184,
        "response":"```python\nfrom typing import List\n\ndef mul_even_odd(lst: List[int]) -> int:\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is None or odd_num is None:\n        return 0\n    return even_num * odd_num\n```"
    },
    {
        "id":185,
        "response":"```python\nimport re\nfrom typing import Tuple\n\ndef tuple_str_int(s: str) -> Tuple[int, ...]:\n    return tuple(map(int, re.findall(r'\\d+', s)))\n```"
    },
    {
        "id":186,
        "response":"```python\nfrom typing import List\n\ndef right_insertion(lst: List[int], n: int) -> int:\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```"
    },
    {
        "id":187,
        "response":"```python\nimport re\ndef text_match_three(s):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, s))\n```"
    },
    {
        "id":188,
        "response":"```python\nfrom typing import List, Tuple\n\ndef new_tuple(lst: List, s: str) -> Tuple:\n    return (*lst, s)\n\n# Test the function\nlst = [1, 2, 3]\ns = \"hello\"\nprint(new_tuple(lst, s))\n```"
    },
    {
        "id":189,
        "response":"```python\nimport math\n\ndef perimeter_polygon(n, side_length):\n    return n * side_length\n\n# Example usage:\nprint(perimeter_polygon(5, 6))\n```"
    },
    {
        "id":190,
        "response":"```python\ndef even_position(lst):\n    return all(isinstance(lst[i], int) and lst[i] % 2 == 0 for i in range(0, len(lst), 2) if i < len(lst))\n```"
    },
    {
        "id":191,
        "response":"```python\nimport typing\n\ndef remove_nested(tup: typing.Tuple) -> list:\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result\n\n# Test the function\ntup = (1, 2, (3, 4, (5, 6)), 7, (8, 9))\nprint(remove_nested(tup))\n```"
    },
    {
        "id":192,
        "response":"```python\nfrom typing import List\n\ndef count_list(lst: List) -> int:\n    return len(lst)\n```"
    },
    {
        "id":193,
        "response":"```python\nfrom typing import List\n\ndef last(lst: List[int], n: int, n2: int) -> int:\n    left, right = 0, n - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] == n2:\n            result = mid\n            left = mid + 1\n        elif lst[mid] < n2:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\ndef main():\n    lst = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    n = len(lst)\n    n2 = 2\n    print(last(lst, n, n2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":194,
        "response":"```python\nimport re\n\ndef text_starta_endb(s: str) -> bool:\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":195,
        "response":"```python\nimport heapq\nfrom typing import List, Tuple\n\ndef cheap_items(lst: List[Tuple[str, float]], n: int) -> List[Tuple[str, float]]:\n    return heapq.nsmallest(n, lst, key=lambda x: x[1])\n```"
    },
    {
        "id":196,
        "response":"```python\ndef return_sum(dct):\n    import re\n    total = 0\n    for value in dct.values():\n        if isinstance(value, (int, float)):\n            total += value\n        elif isinstance(value, str):\n            if re.match('^-?\\d+\\.?\\d*$', value):\n                total += float(value)\n    return total\n```"
    },
    {
        "id":197,
        "response":"```python\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)\n```"
    },
    {
        "id":198,
        "response":"```python\nfrom typing import List\n\ndef _sum(lst: List[int]) -> int:\n    return sum(lst)\n```"
    },
    {
        "id":199,
        "response":"```python\ndef left_Rotate(n, k):\n    import math\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Both n and k must be integers.\")\n    if n == 0:\n        return 0\n    k = k % (int(math.log2(n)) + 1)\n    return ((n << k) | (n >> (int(math.log2(n)) + 1 - k))) & ((1 << (int(math.log2(n)) + 1)) - 1)\n\n# Test the function\nprint(left_Rotate(16, 1)) \nprint(left_Rotate(16, 2))\n```"
    },
    {
        "id":200,
        "response":"```python\ndef remove_all_spaces(s: str) -> str:\n    return s.replace(\" \", \"\")\n```"
    },
    {
        "id":201,
        "response":"```python\nfrom typing import List\n\ndef test_three_equal(n: int, n2: int, n3: int) -> int:\n    numbers: List[int] = [n, n2, n3]\n    count: int = 0\n    for num in set(numbers):\n        if numbers.count(num) == 3:\n            count += 1\n    return count\n```"
    },
    {
        "id":202,
        "response":"```python\nfrom typing import List\n\ndef count_Rotation(lst: List[int], n: int) -> int:\n    min_index = lst.index(min(lst))\n    return min_index\n```"
    },
    {
        "id":203,
        "response":"```python\nimport math\n\ndef is_Perfect_Square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt = math.sqrt(n)\n    return sqrt == int(sqrt)\n```"
    },
    {
        "id":204,
        "response":"```python\nimport math\nfrom typing import List\n\ndef is_Product_Even(lst: List[int], n: int) -> bool:\n    product = 1\n    for i in range(n):\n        if i < len(lst):\n            product *= lst[i]\n        else:\n            return False\n    return product % 2 == 0\n```"
    },
    {
        "id":205,
        "response":"```python\nfrom typing import List\n\ndef max_sum_list(lst: List[List[int]]) -> List[List[int]]:\n    if not lst:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for sub_list in lst:\n        sub_sum = sum(sub_list)\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            max_list = sub_list\n    \n    return max_list\n```"
    },
    {
        "id":206,
        "response":"```python\nimport re\n\ndef max_run_uppercase(s: str) -> int:\n    if not s:\n        return 0\n    \n    max_count = 0\n    current_count = 0\n    \n    for char in s:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n            \n    return max_count\n```"
    },
    {
        "id":207,
        "response":"```python\nfrom typing import List\n\ndef first_odd(lst: List[int]) -> int:\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None\n```"
    },
    {
        "id":208,
        "response":"```python\nfrom typing import Tuple\n\ndef check_K(tup: Tuple, n: int) -> bool:\n    return n in tup\n```"
    },
    {
        "id":209,
        "response":"```python\nfrom typing import Tuple\n\ndef check_smaller(tup1: Tuple[int, int, int], tup2: Tuple[int, int, int]) -> bool:\n    if len(tup1) != len(tup2):\n        return False\n    return all(a < b for a, b in zip(tup1, tup2))\n```"
    },
    {
        "id":210,
        "response":"```python\nfrom itertools import repeat\n\ndef count_variable(*args):\n    result = []\n    for arg in args:\n        result.extend(repeat(arg, arg))\n    return result\n\nprint(count_variable(2, 3, 4))\n```"
    },
    {
        "id":211,
        "response":"```python\nfrom typing import List, Tuple\n\ndef check_identical(lst1: List[Tuple], lst2: List[Tuple]) -> bool:\n    if len(lst1) != len(lst2):\n        return False\n    lst1.sort()\n    lst2.sort()\n    return lst1 == lst2\n```"
    },
    {
        "id":212,
        "response":"```python\nimport re\n\ndef road_rd(s):\n    return re.sub(r'\\broad\\b', 'rd.', s)\n```"
    },
    {
        "id":213,
        "response":"```python\ndef string_length(s: str) -> int:\n    return len(s)\n```"
    },
    {
        "id":214,
        "response":"```python\nimport math\n\ndef rombus_area(n, n2):\n    return 0.5 * n * n2\n```"
    },
    {
        "id":215,
        "response":"```python\nfrom typing import List\n\ndef sort_by_dnf(lst: List[int], n: int) -> List[int]:\n    low, mid, high = 0, 0, n - 1\n\n    while mid <= high:\n        if lst[mid] == 0:\n            lst[low], lst[mid] = lst[mid], lst[low]\n            low += 1\n            mid += 1\n        elif lst[mid] == 1:\n            mid += 1\n        else:\n            lst[mid], lst[high] = lst[high], lst[mid]\n            high -= 1\n    return lst\n```"
    },
    {
        "id":216,
        "response":"```python\ndef clear_tuple(tup):\n    return ()\n\n# Example usage:\ntup = (1, 2, 3, 4, 5)\nprint(clear_tuple(tup))  # Output: ()\n```"
    },
    {
        "id":217,
        "response":"```python\nfrom typing import List\n\ndef div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n    return list(filter(lambda x: x % m == 0 or x % n == 0, lst))\n```"
    },
    {
        "id":218,
        "response":"```python\ndef lower_ctr(s: str) -> int:\n    return sum(1 for c in s if c.islower())\n```"
    },
    {
        "id":219,
        "response":"```python\nfrom typing import List\n\ndef count_duplic(lst: List[int]) -> dict:\n    if not lst:\n        return {}\n\n    result = {}\n    current_num = lst[0]\n    current_count = 1\n\n    for num in lst[1:]:\n        if num == current_num:\n            current_count += 1\n        else:\n            if current_count > 1:\n                result[current_num] = result.get(current_num, 0) + 1\n            current_num = num\n            current_count = 1\n\n    if current_count > 1:\n        result[current_num] = result.get(current_num, 0) + 1\n\n    return result\n```"
    },
    {
        "id":220,
        "response":"```python\ndef check_monthnum_number(n):\n    if not isinstance(n, int) or n < 1 or n > 12:\n        return False\n    months_with_28_days = [2, 4, 6, 9, 11]\n    return n in months_with_28_days or (n == 2 and not (n == 2 and (n > 29 or n < 28)))\n#However, above is not good. lets try with more generic approach \n\ndef check_monthnum_number(n):\n    if not isinstance(n, int) or n < 1 or n > 12:\n        return False\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    return month_days[n-1] == 28 \n```"
    },
    {
        "id":221,
        "response":"```python\ndef merge_dictionaries(dct1, dct2):\n    return {**dct1, **dct2}\n\n# Example usage:\ndct = {\"a\": 1, \"b\": 2}\ndct2 = {\"c\": 3, \"d\": 4}\nprint(merge_dictionaries(dct, dct2))\n```"
    },
    {
        "id":222,
        "response":"```python\nimport re\n\ndef pass_validity(s: str) -> bool:\n    if len(s) < 8:\n        return False\n    has_upper = re.search(r\"[A-Z]\", s)\n    has_lower = re.search(r\"[a-z]\", s)\n    has_digit = re.search(r\"\\d\", s)\n    has_special = re.search(r\"[!@#$%^&*()_+=-{};:'<>,.\/?]\", s)\n    return bool(has_upper and has_lower and has_digit and has_special)\n```"
    },
    {
        "id":223,
        "response":"```python\nimport re\n\ndef check_substring(s, s2):\n    pattern = '^' + re.escape(s2)\n    return bool(re.match(pattern, s))\n\n# Example usage:\nprint(check_substring(\"Hello, World!\", \"Hello\"))  # Returns: True\nprint(check_substring(\"Hello, World!\", \"World\"))  # Returns: False\n```"
    },
    {
        "id":224,
        "response":"```python\nfrom typing import List\n\ndef remove_even(lst: List[int]) -> List[int]:\n    return [i for i in lst if i % 2 != 0]\n```"
    },
    {
        "id":225,
        "response":"```python\nfrom typing import List\n\ndef access_elements(lst: List, lst2: List) -> List:\n    return [lst[i] for i in lst2 if i < len(lst)]\n```"
    },
    {
        "id":226,
        "response":"```python\nfrom typing import Optional\n\ndef check_Type_Of_Triangle(n: int, n2: int, n3: int) -> Optional[str]:\n    if n + n2 <= n3 or n + n3 <= n2 or n2 + n3 <= n:\n        return None\n    elif n == n2 == n3:\n        return \"Equilateral\"\n    elif n == n2 or n == n3 or n2 == n3:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n\n# Test cases\nprint(check_Type_Of_Triangle(3, 3, 3))  \nprint(check_Type_Of_Triangle(3, 4, 4))  \nprint(check_Type_Of_Triangle(3, 4, 5))  \nprint(check_Type_Of_Triangle(1, 2, 5))  \n```"
    },
    {
        "id":227,
        "response":"```python\nfrom typing import List\n\ndef sum_column(lst: List[List[int]], n: int) -> int:\n    return sum(row[n] for row in lst if len(row) > n)\n```"
    },
    {
        "id":228,
        "response":"```python\nimport re\nfrom typing import Tuple\n\ndef count_alpha_dig_spl(s: str) -> Tuple[int, int, int]:\n    alpha_count = len(re.findall(r'[a-zA-Z]', s))\n    dig_count = len(re.findall(r'\\d', s))\n    spl_count = len(re.findall(r'[^a-zA-Z0-9\\s]', s))\n    return alpha_count, dig_count, spl_count\n```"
    },
    {
        "id":229,
        "response":"```python\nfrom collections import Counter\nfrom typing import List\n\ndef second_frequent(lst: List[str]) -> str:\n    if len(lst) == 0:\n        return \"\"\n    \n    count = Counter(lst)\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    \n    if len(sorted_count) < 2:\n        return \"\"\n    \n    return sorted_count[1][0]\n```"
    },
    {
        "id":230,
        "response":"```python\nimport math\n\ndef round_up(n, n2):\n    return math.ceil(n \/ n2) * n2\n```"
    },
    {
        "id":231,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    count_map = Counter(lst)\n    count = 0\n    for freq in count_map.values():\n        if freq > 1:\n            count += freq * (freq - 1) \/\/ 2\n    return count\n\n# Example usage:\nlst = [1, 2, 3, 2, 1]\nn = len(lst)\nprint(count_Pairs(lst, n))\n```"
    },
    {
        "id":232,
        "response":"```python\nimport re\nfrom typing import Union\n\ndef extract_max(s: str) -> Union[int, float, None]:\n    numbers = re.findall(r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\", s)\n    if not numbers:\n        return None\n    numbers = [float(num) for num in numbers]\n    return max(numbers)\n```"
    },
    {
        "id":233,
        "response":"```python\ndef get_key(dct):\n    return list(dct.keys())\n```"
    },
    {
        "id":234,
        "response":"```python\nimport numpy as np\n\ndef generate_matrix(n):\n    matrix = np.zeros((n, n), dtype=int)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] \n    dir_index = 0\n    row, col = 0, 0\n    for i in range(1, n*n + 1):\n        matrix[row, col] = 2 ** i\n        next_row, next_col = row + directions[dir_index][0], col + directions[dir_index][1]\n        if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row, next_col] == 0:\n            row, col = next_row, next_col\n        else:\n            dir_index = (dir_index + 1) % 4\n            row, col = row + directions[dir_index][0], col + directions[dir_index][1]\n    return matrix\n```"
    },
    {
        "id":235,
        "response":"```python\ndef slope(n, n2, n3, n4):\n    if n == n3:\n        return float('inf')\n    else:\n        return (n4 - n2) \/ (n3 - n)\n```"
    },
    {
        "id":236,
        "response":"```python\nfrom typing import List\n\ndef max_sub_array_sum(lst: List[int], n: int) -> int:\n    max_sum = float('-inf')\n    max_length = 0\n    current_sum = 0\n    start = 0\n    end = 0\n    temp_start = 0\n\n    for end in range(n):\n        current_sum += lst[end]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - temp_start + 1\n\n        if current_sum < 0:\n            current_sum = 0\n            temp_start = end + 1\n\n    return max_length\n```"
    },
    {
        "id":237,
        "response":"```python\ndef cube_Sum(n):\n    sum = 0\n    i = 1\n    while i <= n*2:\n        if i % 2 != 0:\n            sum += i ** 3\n        i += 1\n    return sum\n```"
    },
    {
        "id":238,
        "response":"```python\nfrom collections import Counter\n\ndef minSwaps(s1: str, s2: str) -> int:\n    if len(s1) != len(s2):\n        return -1\n    \n    diff_count = sum(1 for a, b in zip(s1, s2) if a != b)\n    if diff_count % 2 != 0:\n        return -1\n    \n    count = Counter()\n    ans = 0\n    for a, b in zip(s1, s2):\n        count[a] += 1\n        count[b] -= 1\n        ans = max(ans, abs(sum(count.values())))\n    return ans \/\/ 2\n```"
    },
    {
        "id":239,
        "response":"```python\nfrom typing import List, Tuple\n\ndef sort_tuple(lst: List[Tuple]) -> List[Tuple]:\n    return sorted(lst, key=lambda x: x[0])\n```"
    },
    {
        "id":240,
        "response":"```python\nimport math\n\ndef Check_Solution(n, n2, n3):\n    D = n2**2 - 4*n*n3\n    if D < 0:\n        return False\n    root1 = (-n2 + math.sqrt(D))\/(2*n)\n    root2 = (-n2 - math.sqrt(D))\/(2*n)\n    return root1 == -root2\n\ndef main():\n    n = 1\n    n2 = 0\n    n3 = -1\n    print(Check_Solution(n, n2, n3))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":241,
        "response":"```python\nfrom typing import List\n\ndef get_inv_count(lst: List[int], n: int) -> int:\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] > lst[j]:\n                inv_count += 1\n    return inv_count\n```"
    },
    {
        "id":242,
        "response":"```python\nfrom typing import List\n\ndef get_odd_occurence(lst: List[int], n: int) -> int:\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n\n    return -1\n\n# Example usage:\nlst = [1, 2, 3, 2, 3, 1, 2]\nn = len(lst)\nprint(get_odd_occurence(lst, n))\n```"
    },
    {
        "id":243,
        "response":"```python\nimport heapq\n\ndef nth_super_ugly_number(n, lst):\n    ugly = [1]\n    pointers = [0] * len(lst)\n    while len(ugly) < n:\n        next_ugly = [ugly[pointers[i]] * lst[i] for i in range(len(lst))]\n        next_ugly = min(next_ugly)\n        ugly.append(next_ugly)\n        for i in range(len(lst)):\n            if next_ugly == ugly[pointers[i]] * lst[i]:\n                pointers[i] += 1\n    return ugly[-1]\n```"
    },
    {
        "id":244,
        "response":"```python\nfrom typing import List\n\ndef get_Number(n: int, n2: int) -> int:\n    arr: List[int] = [i for i in range(1, n2+1) if i % 2 != 0] + [i for i in range(1, n2+1) if i % 2 == 0]\n    if n > len(arr):\n        return -1\n    else:\n        return arr[n-1]\n```"
    },
    {
        "id":245,
        "response":"```python\nimport math\n\ndef find_Digits(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers\"\n    elif n == 0:\n        return 1\n    else:\n        factorial = math.factorial(n)\n        return len(str(factorial))\n\nprint(find_Digits(100))\n```"
    },
    {
        "id":246,
        "response":"```python\nfrom typing import List\n\ndef find_platform(arr: List[int], dep: List[int], n: int) -> int:\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        elif arr[i] > dep[j]:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result\n```"
    },
    {
        "id":247,
        "response":"```python\nfrom typing import List, Tuple\n\ndef lcopy(sngltn_tpl: Tuple[List]) -> List:\n    return sngltn_tpl[0].copy()\n```"
    },
    {
        "id":248,
        "response":"```python\nimport typing\n\ndef area_trapezium(n: float, n2: float, n3: float) -> float:\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        raise ValueError(\"Inputs must be positive numbers\")\n    return 0.5 * (n + n2) * n3\n```"
    },
    {
        "id":249,
        "response":"```python\nimport math\n\ndef Sum(n):\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                total += i\n            else:\n                total += i\n                total += n \/\/ i\n    return total - n\n```"
    },
    {
        "id":250,
        "response":"```python\ndef is_triangleexists(n, n2, n3):\n    if n + n2 > n3 and n + n3 > n2 and n2 + n3 > n:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":251,
        "response":"```python\nimport math\n\ndef Sum_of_Inverse_Divisors(n, n2):\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                sum += 1 \/ i\n            else:\n                sum += 1 \/ i + 1 \/ (n \/\/ i)\n    return sum\n```"
    },
    {
        "id":252,
        "response":"```python\nfrom typing import List\n\ndef remove_negs(lst: List[int]) -> List[int]:\n    return [i for i in lst if i >= 0]\n```"
    },
    {
        "id":253,
        "response":"```python\nimport math\n\ndef sum_of_odd_factors(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 != 0:\n                sum += i\n            if (n \/\/ i) % 2 != 0 and i != n \/\/ i:\n                sum += n \/\/ i\n    return sum\n```"
    },
    {
        "id":254,
        "response":"```python\nimport heapq\nfrom typing import List, Any\n\ndef raw_heap(lst: List[Any]) -> List[Any]:\n    heapq.heapify(lst)\n    return lst\n\n# Example usage:\nlst = [5, 3, 8, 4, 1, 2]\nprint(raw_heap(lst))\n```"
    },
    {
        "id":255,
        "response":"```python\ndef check_Even_Parity(n: int) -> bool:\n    import re\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    return (n & 1) == 0\n```"
    },
    {
        "id":256,
        "response":"```python\nfrom typing import List\n\ndef find_Min_Swaps(lst: List[int], n: int) -> int:\n    swaps = 0\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if lst[j] < lst[min_idx]:\n                min_idx = j\n        if min_idx != i:\n            lst[i], lst[min_idx] = lst[min_idx], lst[i]\n            swaps += 1\n    return swaps\n\n# Example usage:\nlst = [1, 0, 1, 0, 1]\nn = len(lst)\nprint(find_Min_Swaps(lst, n))\n```"
    },
    {
        "id":257,
        "response":"```python\nfrom typing import List\n\ndef listify_list(lst: List[str]) -> List[List[str]]:\n    return list(map(list, lst))\n```"
    },
    {
        "id":258,
        "response":"```python\nimport typing\n\ndef count_list(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    return [sum(1 for _ in sublst) for sublst in lst]\n\ndef count_squares_list(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    return [sum(i**2 for i in sublst) for sublst in lst]\n```"
    },
    {
        "id":259,
        "response":"```python\nfrom typing import List\n\ndef sub_lists(lst: List) -> List:\n    result = []\n    n = len(lst)\n    for i in range(2**n):\n        subset = []\n        for j in range(n):\n            if (i & (1 << j)) != 0:\n                subset.append(lst[j])\n        result.append(subset)\n    return result\n\nprint(sub_lists([1, 2, 3]))\n```"
    },
    {
        "id":260,
        "response":"```python\ndef check_alphanumeric(s):\n    for char in reversed(s):\n        if not char.isalnum():\n            return False\n        if char.isalnum():\n            break\n    return True\n```"
    },
    {
        "id":261,
        "response":"```python\nfrom typing import List\nfrom functools import reduce\n\ndef anagram_lambda(lst: List[str], s: str) -> List[str]:\n    sorted_str = \"\".join(sorted(s))\n    return list(filter(lambda x: \"\".join(sorted(x)) == sorted_str and x != s, lst))\n\n# Example usage:\nlst = [\"cat\", \"dog\", \"tac\", \"god\", \"good\", \"act\"]\ns = \"cat\"\nprint(anagram_lambda(lst, s))\n```"
    },
    {
        "id":262,
        "response":"```python\nimport re\nfrom collections import Counter\nimport typing\n\ndef n_common_words(s: str, n: int) -> typing.List[typing.Tuple[str, int]]:\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    common_words = Counter(words).most_common(n)\n    return common_words\n```"
    },
    {
        "id":263,
        "response":"```python\nfrom typing import List\n\ndef find_longest_conseq_subseq(lst: List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    \n    num_set = set(lst)\n    longest_subseq = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_subseq = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_subseq += 1\n            \n            longest_subseq = max(longest_subseq, current_subseq)\n    \n    return longest_subseq\n```"
    },
    {
        "id":264,
        "response":"```python\nfrom typing import List\n\ndef palindrome_lambda(lst: List[str]) -> List[str]:\n    palindrome = list(filter(lambda s: s == s[::-1], lst))\n    return palindrome\n```"
    },
    {
        "id":265,
        "response":"```python\nfrom typing import List\nfrom itertools import repeat\n\ndef ntimes_list(lst: List, n: int) -> List:\n    return list(map(lambda x: x * n, lst))\n\n# \u09ac\u09be \n\ndef ntimes_list(lst: List, n: int) -> List:\n    return list(map(lambda x: list(repeat(x, n)), lst))\n```"
    },
    {
        "id":266,
        "response":"```python\nfrom calendar import monthrange\n\ndef check_monthnumb(s):\n    months = {\n        \"January\": 1, \"February\": 2, \"March\": 3, \"April\": 4,\n        \"May\": 5, \"June\": 6, \"July\": 7, \"August\": 8,\n        \"September\": 9, \"October\": 10, \"November\": 11, \"December\": 12\n    }\n    if s in months:\n        return monthrange(2024, months[s])[1] == 31\n    else:\n        return False\n\nprint(check_monthnumb(\"January\")) \nprint(check_monthnumb(\"February\")) \nprint(check_monthnumb(\"March\")) \nprint(check_monthnumb(\"April\")) \nprint(check_monthnumb(\"May\")) \nprint(check_monthnumb(\"June\")) \nprint(check_monthnumb(\"July\")) \nprint(check_monthnumb(\"August\")) \nprint(check_monthnumb(\"September\")) \nprint(check_monthnumb(\"October\")) \nprint(check_monthnumb(\"November\")) \nprint(check_monthnumb(\"December\")) \nprint(check_monthnumb(\"Invalid\"))\n```"
    },
    {
        "id":267,
        "response":"```python\ndef min_Num(lst, n):\n    total_sum = sum(lst)\n    if total_sum % 2 == 0:\n        return 0\n    else:\n        return 1\n```"
    },
    {
        "id":268,
        "response":"```python\ndef length_Of_Last_Word(s: str) -> int:\n    words = s.strip().split()\n    if not words:\n        return 0\n    return len(words[-1])\n```"
    },
    {
        "id":269,
        "response":"```python\nfrom typing import List\n\ndef remove_list_range(lst: List[int], n: int, n2: int) -> List[int]:\n    return [i for i in lst if n <= i <= n2]\n```"
    },
    {
        "id":270,
        "response":"```python\nfrom typing import List\n\ndef sum_positivenum(lst: List[int]) -> int:\n    positive_sum = list(filter(lambda x: x > 0, lst))\n    return sum(positive_sum)\n```"
    },
    {
        "id":271,
        "response":"```python\ndef are_Rotations(s, s2):\n    if len(s) != len(s2):\n        return False\n    return s2 in s + s\n```"
    },
    {
        "id":272,
        "response":"```python\nfrom typing import List\n\ndef check_subset(lst: List, lst2: List) -> bool:\n    def flatten(lst: List) -> set:\n        flat_set = set()\n        for i in lst:\n            if isinstance(i, list):\n                flat_set.update(flatten(i))\n            else:\n                flat_set.add(i)\n        return flat_set\n\n    flat_set = flatten(lst)\n    flat_set2 = flatten(lst2)\n    return flat_set.issubset(flat_set2)\n```"
    },
    {
        "id":273,
        "response":"```python\ndef fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```"
    },
    {
        "id":274,
        "response":"```python\nimport itertools\n\ndef check_Concat(s, s2):\n    if len(s) + len(s2) != len(s + s2):\n        return False\n    for i in range(1, len(s) + 1):\n        if s[:i] in s2 and s[i:] in s2:\n            return True\n    return False\n\ndef check_ConcatOptimized(s, s2):\n    combined = s + s2\n    for i in range(1, len(s)):\n        if s2.startswith(s[i:]) and s2.endswith(s[:i]):\n            return True\n    return False\n\ndef check_ConcatPythonic(s, s2):\n    return s in s2 + s2\n\n# Test \nprint(check_Concat(\"abc\", \"bcd\")) \nprint(check_ConcatOptimized(\"abc\", \"bcd\")) \nprint(check_ConcatPythonic(\"abc\", \"bcd\"))\n```"
    },
    {
        "id":275,
        "response":"```python\nfrom typing import List, Tuple\n\ndef min_difference(lst: List[Tuple[int, int]]) -> int:\n    lst.sort(key=lambda x: x[0])\n    min_diff = float('inf')\n    for i in range(1, len(lst)):\n        diff = lst[i][0] - lst[i-1][1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff if min_diff != float('inf') else 0\n```"
    },
    {
        "id":276,
        "response":"```python\nimport math\n\ndef lcm(n, n2):\n    return abs(n*n2) \/\/ math.gcd(n, n2)\n```"
    },
    {
        "id":277,
        "response":"```python\ndef sort_String(s: str) -> str:\n    return ''.join(sorted(s))\n```"
    },
    {
        "id":278,
        "response":"```python\nfrom typing import Tuple, List\n\ndef check_tuples(tup: Tuple, lst: List) -> bool:\n    return len(tup) == len(lst)\n```"
    },
    {
        "id":279,
        "response":"```python\nimport re\n\ndef text_match(s):\n    pattern = r\".*a.*b$\"\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":280,
        "response":"```python\nimport math\n\ndef Check_Solution(n, n2, n3):\n    D = n2**2 - 4*n*n3\n    if D > 0:\n        return 2\n    elif D == 0:\n        return 1\n    else:\n        return 0\n```"
    },
    {
        "id":281,
        "response":"```python\nfrom typing import List\n\ndef sum_even_odd(lst: List[int]) -> tuple:\n    even_sum = sum(num for num in lst if num % 2 == 0)\n    odd_sum = sum(num for num in lst if num % 2 != 0)\n    return even_sum, odd_sum\n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 6]\neven_sum, odd_sum = sum_even_odd(lst)\nprint(f\"Sum of even numbers: {even_sum}\")\nprint(f\"Sum of odd numbers: {odd_sum}\")\n```"
    },
    {
        "id":282,
        "response":"```python\ndef parallelogram_perimeter(n, n2):\n    return 2 * (n + n2)\n```"
    },
    {
        "id":283,
        "response":"```python\nfrom typing import List\n\ndef div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n    return list(filter(lambda x: x % m == 0 and x % n == 0, lst))\n```"
    },
    {
        "id":284,
        "response":"```python\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    import math\n    if start > end:\n        return False\n    mask = ((1 << (end - start + 1)) - 1) << start\n    return (n & mask) == mask\n```"
    },
    {
        "id":285,
        "response":"```python\nfrom typing import Dict\n\ndef is_Isomorphic(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n\n    s_to_t: Dict[str, str] = {}\n    t_to_s: Dict[str, str] = {}\n\n    for char_s, char_t in zip(s, t):\n        if (char_s in s_to_t and s_to_t[char_s] != char_t) or (char_t in t_to_s and t_to_s[char_t] != char_s):\n            return False\n        s_to_t[char_s] = char_t\n        t_to_s[char_t] = char_s\n\n    return True\n```"
    },
    {
        "id":286,
        "response":"```python\nfrom typing import Union\n\ndef sum_num(tup: Union[tuple, list]) -> float:\n    if not tup:\n        return 0\n    return sum(tup) \/ len(tup)\n```"
    },
    {
        "id":287,
        "response":"```python\ndef is_odd(n: int) -> bool:\n    return (n & 1) != 0\n```"
    },
    {
        "id":288,
        "response":"```python\nfrom typing import Tuple\n\ndef subtract_elements(tup: Tuple[float, ...], tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    if len(tup) != len(tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a - b for a, b in zip(tup, tup2))\n\ndef subtract_elements_nested(tup: Tuple[Tuple[float, ...], ...], tup2: Tuple[Tuple[float, ...], ...]) -> Tuple[Tuple[float, ...], ...]:\n    if len(tup) != len(tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(subtract_elements(t1, t2) for t1, t2 in zip(tup, tup2))\n\n# Example usage:\ntup = ((1, 2, 3), (4, 5, 6))\ntup2 = ((7, 8, 9), (10, 11, 12))\nprint(subtract_elements_nested(tup, tup2))\n```"
    },
    {
        "id":289,
        "response":"```python\nfrom typing import List\n\ndef reverse_list_lists(lst: List[List]) -> List[List]:\n    return [sublist[::-1] for sublist in lst[::-1]]\n\n# Example usage:\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(reverse_list_lists(lst))  # Output: [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\n```"
    },
    {
        "id":290,
        "response":"```python\nfrom typing import List\n\ndef find_Extra(lst: List[int], lst2: List[int], n: int) -> int:\n    i, j = 0, 0\n    while i < n and j < n:\n        if lst[i] == lst2[j]:\n            i += 1\n            j += 1\n        else:\n            return j\n    return i if i < n else j\n```"
    },
    {
        "id":291,
        "response":"```python\ndef same_length(n, n2):\n    return len(str(abs(n))) == len(str(abs(n2)))\n```"
    },
    {
        "id":292,
        "response":"```python\nimport re\n\ndef remove_spaces(s: str) -> str:\n    return re.sub(' +', ' ', s)\n\ndef main():\n    s = \"Hello    World\"\n    print(remove_spaces(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":293,
        "response":"```python\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    return [sublist[-1] for sublist in lst]\n```"
    },
    {
        "id":294,
        "response":"```python\nimport re\nfrom typing import Tuple\n\ndef float_to_tuple(s: str) -> Tuple[float, ...]:\n    return tuple(map(float, re.findall(r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\", s)))\n```"
    },
    {
        "id":295,
        "response":"```python\nfrom typing import List\n\ndef max_sum_subseq(lst: List[int]) -> int:\n    if not lst:\n        return 0\n    if len(lst) <= 2:\n        return max(0, max(lst))\n    \n    dp = [0]*len(lst)\n    dp[0] = max(0, lst[0])\n    dp[1] = max(dp[0], lst[1])\n    \n    for i in range(2, len(lst)):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i])\n    \n    return dp[-1]\n```"
    },
    {
        "id":296,
        "response":"```python\nfrom typing import List\n\ndef sort_list_asc(lst: List[int]) -> List[int]:\n    return sorted(lst)\n```"
    },
    {
        "id":297,
        "response":"```python\nimport re\n\ndef is_Word_Present(s, s2):\n    words = re.findall(r'\\b\\w+\\b', s)\n    return s2.lower() in [word.lower() for word in words]\n\n# Example usage:\nprint(is_Word_Present(\"Hello world, this is a test\", \"world\"))  # Returns: True\nprint(is_Word_Present(\"Hello world, this is a test\", \"Universe\"))  # Returns: False\n```"
    },
    {
        "id":298,
        "response":"```python\nfrom typing import List\n\ndef extract_elements(lst: List[int], n: int) -> List[List[int]]:\n    if n <= 0 or n > len(lst):\n        return []\n    result = []\n    for i in range(len(lst) - n + 1):\n        result.append(lst[i:i+n])\n    return result\n```"
    },
    {
        "id":299,
        "response":"```python\ndef check(lst, n):\n    import sys\n    if len(lst) != n * n:\n        return False\n    sorted_lst = sorted(lst)\n    corner_elements = []\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or i == n - 1 or j == 0 or j == n - 1:\n                corner_elements.append(lst[i * n + j])\n    corner_elements.sort()\n    return corner_elements == sorted_lst\n```"
    },
    {
        "id":300,
        "response":"```python\nimport re\ndef match_num(s: str) -> bool:\n    return bool(re.match(r'^\\d+', s))\n```"
    },
    {
        "id":301,
        "response":"```python\nimport math\n\ndef num_comm_div(n, n2):\n    return math.gcd(n, n2)\n\nprint(num_comm_div(12, 18)) \nprint(num_comm_div(7, 5)) \n```"
    },
    {
        "id":302,
        "response":"```python\ndef find(n, n2):\n    if n2 == 0:\n        return \"Error: Division by zero is not allowed\"\n    return n % n2\n\nprint(find(17, 5))  \nprint(find(13, 3))  \nprint(find(10, 2))  \nprint(find(7, 0))  \n```"
    },
    {
        "id":303,
        "response":"```python\nfrom typing import List\n\ndef add_consecutive_nums(lst: List[int]) -> List[int]:\n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] + lst[i + 1])\n    return result\n```"
    },
    {
        "id":304,
        "response":"```python\ndef sum_Of_Series(n: int) -> int:\n    return sum(i**3 for i in range(1, n+1))\n```"
    },
    {
        "id":305,
        "response":"```python\nfrom typing import List\n\ndef re_order(lst: List[int]) -> List[int]:\n    return [i for i in lst if i != 0] + [0] * lst.count(0)\n```"
    },
    {
        "id":306,
        "response":"```python\nimport math\n\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    return math.factorial(n) \/\/ math.factorial(n-k)\n\ndef main():\n    n = 5\n    k = 2\n    print(permutation_coefficient(n, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":307,
        "response":"```python\nfrom typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    return [word for word in lst if word not in lst2]\n```"
    },
    {
        "id":308,
        "response":"```python\nfrom typing import List\n\ndef same_order(lst1: List, lst2: List) -> bool:\n    common_elements = [element for element in lst1 if element in lst2]\n    index_lst1 = []\n    index_lst2 = []\n    \n    for element in common_elements:\n        index_lst1.append(lst1.index(element))\n        index_lst2.append(lst2.index(element))\n        \n    return index_lst1 == index_lst2\n```"
    },
    {
        "id":309,
        "response":"```python\nimport typing\n\ndef average_Odd(n: int) -> float:\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    odd_numbers = [i for i in range(1, n+1) if i % 2 != 0]\n    if not odd_numbers:\n        return 0.0\n\n    return sum(odd_numbers) \/ len(odd_numbers)\n```"
    },
    {
        "id":310,
        "response":"```python\nimport math\nimport itertools\n\ndef no_of_subsequences(lst, k):\n    count = 0\n    for r in range(len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if math.prod(subset) < k:\n                count += 1\n    return count\n```"
    },
    {
        "id":311,
        "response":"```python\nimport math\n\ndef find_Min_Sum(n):\n    if n < 1:\n        return -1\n    \n    if n == 1:\n        return 1\n    \n    min_sum = n \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_val = i + n \/\/ i\n            if sum_val < min_sum:\n                min_sum = sum_val\n                \n    return min_sum\n```"
    },
    {
        "id":312,
        "response":"```python\nfrom typing import Tuple, Any\nfrom collections import Counter\n\ndef count_element_freq(tup: Tuple[Any, ...]) -> dict:\n    def flatten(tup: Tuple[Any, ...]) -> list:\n        result = []\n        for item in tup:\n            if isinstance(item, tuple):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flat_list = flatten(tup)\n    freq = Counter(flat_list)\n    return dict(freq)\n```"
    },
    {
        "id":313,
        "response":"```python\nfrom typing import Tuple, List\n\ndef add_str(tup: Tuple, s: str) -> List[str]:\n    return [str(elem) + s for elem in tup]\n```"
    },
    {
        "id":314,
        "response":"```python\nfrom typing import List, Tuple\n\ndef sum_elements(tup: List[Tuple[int, int]]) -> int:\n    return sum(sum(element) for element in tup)\n```"
    },
    {
        "id":315,
        "response":"```python\nfrom typing import List\n\ndef modular_sum(lst: List[int], n: int, m: int) -> bool:\n    dp = [False] * n\n    dp[0] = True\n    for i in range(n):\n        for j in range(n - 1, -1, -1):\n            if dp[j]:\n                dp[(j + lst[i]) % n] = True\n    return dp[m]\n```"
    },
    {
        "id":316,
        "response":"```python\nfrom typing import List\n\ndef radix_sort(lst: List[int]) -> List[int]:\n    RADIX = 10\n    placement = 1\n\n    max_digit = max(lst)\n\n    while placement < max_digit:\n      buckets = [list() for _ in range(RADIX)]\n      for i in lst:\n        tmp = int((i \/ placement) % RADIX)\n        buckets[tmp].append(i)\n      a = 0\n      for b in range(RADIX):\n        buck = buckets[b]\n        for i in buck:\n          lst[a] = i\n          a += 1\n      placement *= RADIX\n    return lst\n```"
    },
    {
        "id":317,
        "response":"```python\ndef largest_pos(lst):\n    pos_nums = [num for num in lst if num > 0]\n    if pos_nums:\n        return max(pos_nums)\n    else:\n        return None\n```"
    },
    {
        "id":318,
        "response":"```python\nimport math\n\ndef sqrt_root(n: int) -> float:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return math.sqrt(n)\n```"
    },
    {
        "id":319,
        "response":"```python\nimport math\ndef volume_tetrahedron(n):\n    a = n\n    volume = (math.sqrt(2)\/12) * (a ** 3)\n    return volume\n```"
    },
    {
        "id":320,
        "response":"```python\nimport math\nfrom functools import reduce\nfrom typing import List\n\ndef get_lcm(lst: List[int]) -> int:\n    def lcm(a: int, b: int) -> int:\n        return a * b \/\/ math.gcd(a, b)\n\n    return reduce(lcm, lst, 1)\n```"
    },
    {
        "id":321,
        "response":"```python\ndef check_scalene(n, n2, n3):\n    if n + n2 > n3 and n + n3 > n2 and n2 + n3 > n:\n        if n != n2 and n != n3 and n2 != n3:\n            return True\n        else:\n            return False\n    else:\n        return False\n```"
    },
    {
        "id":322,
        "response":"```python\nfrom typing import List\n\ndef lbs(lst: List[int]) -> List[int]:\n    n = len(lst)\n    \n    if n == 0:\n        return []\n    \n    increase = [1]*n\n    decrease = [1]*n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j] and increase[i] < increase[j] + 1:\n                increase[i] = increase[j] + 1\n                \n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if lst[i] > lst[j] and decrease[i] < decrease[j] + 1:\n                decrease[i] = decrease[j] + 1\n                \n    max_len = 0\n    index = 0\n    for i in range(n):\n        if increase[i] + decrease[i] - 1 > max_len:\n            max_len = increase[i] + decrease[i] - 1\n            index = i\n            \n    res = []\n    i = index - increase[index] + 1\n    while i <= index:\n        res.append(lst[i])\n        i += 1\n    i = index + 1\n    while i < index + decrease[index]:\n        res.append(lst[i])\n        i += 1\n    return res\n```"
    },
    {
        "id":323,
        "response":"```python\nimport re\nfrom typing import Callable\n\ndef check_string(s: str) -> bool:\n    checks: list[Callable[[str], bool]] = [\n        lambda s: re.search(r\"[A-Z]\", s) is not None,\n        lambda s: re.search(r\"[a-z]\", s) is not None,\n        lambda s: re.search(r\"\\d\", s) is not None,\n        lambda s: len(s) >= 8\n    ]\n    return all(check(s) for check in checks)\n```"
    },
    {
        "id":324,
        "response":"```python\ndef max_sum_increasing_subsequence(lst, n):\n    import sys\n\n    if n == 0:\n        return 0\n\n    dp = [0]*n\n    dp[0] = lst[0]\n\n    for i in range(1, n):\n        dp[i] = lst[i]\n        for j in range(i):\n            if lst[i] > lst[j] and dp[i] < dp[j] + lst[i]:\n                dp[i] = dp[j] + lst[i]\n\n    return max(dp)\n```"
    },
    {
        "id":325,
        "response":"```python\nfrom typing import List\n\ndef parallel_lines(line1: List[float], line2: List[float]) -> bool:\n    if len(line1) != 2 or len(line2) != 2:\n        raise ValueError(\"Lines must be represented as a list of two floats\")\n\n    a1, b1 = line1\n    a2, b2 = line2\n\n    if a1 == 0 and a2 == 0:\n        return True\n    elif a1 == 0 or a2 == 0:\n        return False\n    else:\n        return a1 \/ a2 == b1 \/ b2\n```"
    },
    {
        "id":326,
        "response":"```python\ndef capitalize_first_last_letters(s: str) -> str:\n    import re\n    return re.sub(r'\\b\\w+(\\w)\\b', lambda m: m.group(0)[0].upper() + m.group(0)[1:-1] + m.group(1).upper(), s)\n```"
    },
    {
        "id":327,
        "response":"```python\nfrom typing import List\n\ndef get_pairs_count(lst: List[int], n: int, target: int) -> int:\n    count = 0\n    freq = {}\n    for i in range(len(lst)):\n        complement = target - lst[i]\n        if complement in freq:\n            count += freq[complement]\n        if lst[i] in freq:\n            freq[lst[i]] += 1\n        else:\n            freq[lst[i]] = 1\n    return count\n\ndef main():\n    lst = [1, 5, 7, 1]\n    n = len(lst)\n    n2 = 6\n    print(get_pairs_count(lst, n, n2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":328,
        "response":"```python\nfrom typing import List\n\ndef min_length(lst: List[List]) -> int:\n    if not lst:\n        return 0\n    return min(len(sublist) for sublist in lst)\n```"
    },
    {
        "id":329,
        "response":"```python\ndef jacobsthal_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * a + b\n    return b\n```"
    },
    {
        "id":330,
        "response":"```python\nfrom typing import List\n\ndef negative_count(lst: List[int]) -> float:\n    if not lst:\n        return 0.0\n    count = sum(1 for num in lst if num < 0)\n    return count \/ len(lst)\n```"
    },
    {
        "id":331,
        "response":"```python\nimport sys\nfrom typing import List\n\ndef min_coins(coins: List[int], n: int, amount: int) -> int:\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n\n    return dp[amount] if dp[amount] != float('inf') else -1\n\ndef main():\n    coins = [1, 2, 5]\n    n = len(coins)\n    amount = 11\n    print(min_coins(coins, n, amount))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":332,
        "response":"```python\nfrom collections import Counter\n\ndef check_permutation(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    return Counter(s) == Counter(s2)\n```"
    },
    {
        "id":333,
        "response":"```python\nfrom typing import Tuple, Any\n\ndef remove_datatype(tup: Tuple[Any], param: type) -> Tuple[Any]:\n    return tuple(i for i in tup if not isinstance(i, param))\n```"
    },
    {
        "id":334,
        "response":"```python\nimport re\n\ndef search_literal(s, s2):\n    try:\n        return re.search(re.escape(s2), s).start()\n    except AttributeError:\n        return -1\n\ndef main():\n    print(search_literal(\"Hello, World!\", \"World\"))  # Output: 7\n    print(search_literal(\"Hello, World!\", \"Universe\"))  # Output: -1\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":335,
        "response":"```python\nimport math\nfrom typing import Union\n\ndef topbottom_surfacearea(radius: Union[float, int], height: Union[float, int] = None) -> float:\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return math.pi * (radius ** 2)\n```"
    },
    {
        "id":336,
        "response":"```python\nfrom typing import List\n\ndef nth_items(lst: List, n: int):\n    if n > len(lst) or n < 1:\n        raise IndexError(\"n is out of range\")\n    return lst[n - 1]\n```"
    },
    {
        "id":337,
        "response":"```python\nfrom typing import Optional\n\ndef first_repeated_word(s: str) -> Optional[str]:\n    words = s.split()\n    seen = set()\n    for word in words:\n        word = word.lower().strip('.,!?\"\\'')\n        if word in seen:\n            return word\n        seen.add(word)\n    return None\n```"
    },
    {
        "id":338,
        "response":"```python\nfrom typing import List, Tuple\n\ndef string_list_to_tuple(string_list: List[str]) -> Tuple[str, ...]:\n    return tuple(string_list)\n```"
    },
    {
        "id":339,
        "response":"```python\nfrom typing import List\n\ndef basesnum_coresspondingnum(lst: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: y ** x, lst, lst2))\n```"
    },
    {
        "id":340,
        "response":"```python\nfrom collections import Counter\ndef find_Diff(lst, n):\n    freq = Counter(lst)\n    return max(freq.values()) - min(freq.values())\n```"
    },
    {
        "id":341,
        "response":"```python\nimport math\n\ndef check_abundant(n):\n    if n < 1:\n        return False\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                sum_divisors += i\n            else:\n                sum_divisors += i + n \/\/ i\n    return sum_divisors - n > n\n```"
    },
    {
        "id":342,
        "response":"```python\nimport re\n\ndef fill_spaces(s: str) -> str:\n    return re.sub('[ ,.]', ':', s)\n```"
    },
    {
        "id":343,
        "response":"```python\ndef count_digits(n, n2):\n    import re\n    sum_of_nums = n + n2\n    return len(re.findall(r'\\d', str(sum_of_nums)))\n\nprint(count_digits(12, 34))\n```"
    },
    {
        "id":344,
        "response":"```python\nfrom typing import List, Tuple, Any\n\ndef flatten_tuple(lst: List[Any]) -> List[Any]:\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n\n# Example usage:\nlst: List[Any] = [(1, 2), 3, (4, 5), 6]\nprint(flatten_tuple(lst))  # Output: [1, 2, 3, 4, 5, 6]\n```"
    },
    {
        "id":345,
        "response":"```python\ndef toggle_F_and_L_bits(n: int) -> int:\n    import math\n    if n == 0:\n        return 0\n    num_bits = math.floor(math.log2(n)) + 1\n    first_bit_mask = 1 << (num_bits - 1)\n    last_bit_mask = 1\n    toggle_mask = first_bit_mask | last_bit_mask\n    return n ^ toggle_mask\n```"
    },
    {
        "id":346,
        "response":"```python\ndef last_occurence_char(s, s2):\n    try:\n        return s.rindex(s2)\n    except ValueError:\n        return -1\n```"
    },
    {
        "id":347,
        "response":"```python\ndef Total_Hamming_Distance(n: int) -> int:\n    import math\n    res = 0\n    for i in range(30):\n        res += (n \/\/ (1 << (i + 1))) * (1 << i) + max(0, n % (1 << (i + 1)) - (1 << i) + 1)\n    return res\n```"
    },
    {
        "id":348,
        "response":"```python\nfrom typing import List\n\ndef longest_increasing_subsequence(lst: List[int]) -> int:\n    if not lst:\n        return 0\n\n    dp = [1] * len(lst)\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```"
    },
    {
        "id":349,
        "response":"```python\ndef odd_Num_Sum(n: int) -> int:\n    import math\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 != 0:\n            sum += math.pow(num, 5)\n            count += 1\n        num += 1\n    return int(sum)\n```"
    },
    {
        "id":350,
        "response":"```python\ndef find_Max(lst, n, n2):\n    for i in range(n2):\n        if i == n2 - 1:\n            return max(lst[n - n2 + i:n])\n        if lst[n - n2 + i] > lst[n - n2 + i + 1]:\n            return lst[n - n2 + i]\n    return lst[-1]\n\ndef find_Max_optimized(lst, n, n2):\n    return max(lst[n - n2:])\n```"
    },
    {
        "id":351,
        "response":"```python\nfrom typing import List, Any\n\ndef extract_column(lst: List[Any], n: int) -> List[Any]:\n    return [sublist[n] for sublist in lst if len(sublist) > n]\n```"
    },
    {
        "id":352,
        "response":"```python\nfrom typing import List\n\ndef Seq_Linear(lst: List[int]) -> bool:\n    if len(lst) < 2:\n        return True\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != diff:\n            return False\n    return True\n```"
    },
    {
        "id":353,
        "response":"```python\nimport re\n\ndef tuple_to_float(tup):\n    if not isinstance(tup, tuple) or len(tup) != 3:\n        raise ValueError(\"Input must be a tuple of three elements\")\n    if not all(isinstance(i, (int, float)) for i in tup):\n        raise ValueError(\"Tuple elements must be numbers\")\n    return float(f\"{tup[0]}.{tup[1]}{tup[2]}\")\n```"
    },
    {
        "id":354,
        "response":"```python\nfrom typing import List, Union\n\ndef Split(lst: List[Union[int, float]]) -> List[Union[int, float]]:\n    return [i for i in lst if i % 2 != 0]\n```"
    },
    {
        "id":355,
        "response":"```python\ndef difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = n * (n + 1) \/\/ 2\n    return sum_of_cubes - sum_of_numbers**2\n```"
    },
    {
        "id":356,
        "response":"```python\nfrom typing import List\n\ndef find_Odd_Pair(lst: List[int], n: int) -> int:\n    xor_result = 0\n    for i in range(n):\n        xor_result ^= lst[i]\n    return xor_result\n```"
    },
    {
        "id":357,
        "response":"```python\ndef toggle_string(s: str) -> str:\n    return s.swapcase()\n```"
    },
    {
        "id":358,
        "response":"```python\nfrom typing import Tuple\n\ndef digit_distance_nums(n: int, n2: int) -> int:\n    digits_n = [int(d) for d in str(abs(n))]\n    digits_n2 = [int(d) for d in str(abs(n2))]\n    max_len = max(len(digits_n), len(digits_n2))\n    digits_n = [0] * (max_len - len(digits_n)) + digits_n\n    digits_n2 = [0] * (max_len - len(digits_n2)) + digits_n2\n    return sum(abs(a - b) for a, b in zip(digits_n, digits_n2))\n```"
    },
    {
        "id":359,
        "response":"```python\nfrom typing import List\n\ndef max_sub_array_sum(lst: List[int], n: int) -> int:\n    if not lst or n == 0:\n        return 0\n\n    max_sum = float('-inf')\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += lst[j]\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum\n```"
    },
    {
        "id":360,
        "response":"```python\nfrom typing import Tuple, Union\n\ndef union_elements(tup1: Tuple[Union[int, str]], tup2: Tuple[Union[int, str]]) -> Tuple[Union[int, str]]:\n    return tuple(set(tup1 + tup2))\n\n# Example usage:\ntup1 = (1, 2, 3, 4)\ntup2 = (3, 4, 5, 6)\nprint(union_elements(tup1, tup2))\n\ntup3 = ('a', 'b', 'c')\ntup4 = ('c', 'd', 'e')\nprint(union_elements(tup3, tup4))\n\ntup5 = (1, 'a', 2, 'b')\ntup6 = (2, 'b', 3, 'c')\nprint(union_elements(tup5, tup6))\n```"
    },
    {
        "id":361,
        "response":"```python\nfrom typing import List, Tuple\n\ndef assign_elements(lst: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    if len(lst) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of tuples\")\n\n    result = []\n    for i in range(0, len(lst), 2):\n        result.append((lst[i][0], lst[i+1][0]))\n        result.append((lst[i][1], lst[i+1][1]))\n\n    return result\n```"
    },
    {
        "id":362,
        "response":"```python\nfrom typing import List\n\ndef Find_Max_Length(lst: List[List]) -> int:\n    return max(len(sublist) for sublist in lst) if lst else 0\n```"
    },
    {
        "id":363,
        "response":"```python\nimport re\nfrom typing import List\n\ndef extract_values(s: str) -> List[str]:\n    return re.findall(r'\"([^\"]*)\"', s)\n```"
    },
    {
        "id":364,
        "response":"```python\nfrom typing import List\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    count = 0\n    for i in freq:\n        count += freq[i] * (n - freq[i])\n    return count \/\/ 2\n```"
    },
    {
        "id":365,
        "response":"```python\nimport re\ndef split(s: str) -> list[str]:\n    return re.findall('[a-zA-Z]', s)\n```"
    },
    {
        "id":366,
        "response":"```python\ndef sum_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))\n```"
    },
    {
        "id":367,
        "response":"```python\nfrom typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)\n```"
    },
    {
        "id":368,
        "response":"```python\ndef empty_list(n):\n    return [{} for _ in range(n)]\n```"
    },
    {
        "id":369,
        "response":"```python\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\n# Example usage:\nlst = [[\"dog\", \"cat\", \"apple\"], [\"banana\", \"orange\", \"grape\"], [\"elephant\", \"bird\", \"lion\"]]\nprint(sort_sublists(lst))\n```"
    },
    {
        "id":370,
        "response":"```python\nfrom typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    return [s for s in lst if not any(c in s for c in lst2)]\n```"
    },
    {
        "id":371,
        "response":"```python\nimport heapq\ndef max_sum_pair_diff_lessthan_K(lst, n, k):\n    if n < 2:\n        return []\n    lst.sort()\n    max_sum = float('-inf')\n    left = 0\n    right = n - 1\n    while left < right:\n        if lst[right] - lst[left] < k:\n            current_sum = lst[right] + lst[left]\n            max_sum = max(max_sum, current_sum)\n            left += 1\n            right -= 1\n        elif lst[right] - lst[left] >= k:\n            right -= 1\n    return max_sum\n```"
    },
    {
        "id":372,
        "response":"```python\nfrom typing import List\n\ndef two_unique_nums(lst: List[int]) -> List[int]:\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    result = []\n    for num, count in count_dict.items():\n        if count == 2:\n            result.append(num)\n\n    return result\n```"
    },
    {
        "id":373,
        "response":"```python\nimport math\nfrom typing import List\n\ndef unique_product(lst: List[int]) -> int:\n    seen = set()\n    product = 1\n    for num in lst:\n        if num not in seen:\n            product *= num\n            seen.add(num)\n    return product\n```"
    },
    {
        "id":374,
        "response":"```python\nimport math\n\ndef surfacearea_cylinder(n, n2):\n    return 2 * math.pi * n * (n + n2)\n```"
    },
    {
        "id":375,
        "response":""
    },
    {
        "id":376,
        "response":"```python\nfrom typing import List\n\ndef is_Sub_Array(lst: List[int], lst2: List[int], n: int, n2: int) -> bool:\n    if n > n2:\n        return False\n\n    i = 0\n    j = 0\n\n    while i < n2 and j < n:\n        if lst2[i] == lst[j]:\n            j += 1\n        i += 1\n\n    return j == n\n```"
    },
    {
        "id":377,
        "response":"```python\nimport math\n\ndef last_Digit_Factorial(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n < 2:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial = (factorial * i) % 10\n    return factorial\n\n# Example usage:\nprint(last_Digit_Factorial(5))  # Output: 0\n```"
    },
    {
        "id":378,
        "response":"```python\nfrom typing import List\nimport itertools\n\ndef interleave_lists(*lists: List) -> List:\n    return [item for tup in zip(*lists) for item in tup]\n\n# Example usage:\nlst1 = [1, 2, 3]\nlst2 = ['a', 'b', 'c']\nlst3 = [True, False, True]\n\nprint(interleave_lists(lst1, lst2, lst3))\n```"
    },
    {
        "id":379,
        "response":"```python\nfrom typing import Tuple\n\ndef find_dissimilar(tup1: Tuple, tup2: Tuple) -> Tuple:\n    set1 = set(tup1)\n    set2 = set(tup2)\n    dissimilar1 = tuple(set1.symmetric_difference(set2))\n    return dissimilar1\n\n# Example usage:\ntup1 = (1, 2, 3, 4)\ntup2 = (3, 4, 5, 6)\nprint(find_dissimilar(tup1, tup2))\n```"
    },
    {
        "id":380,
        "response":"```python\nfrom typing import Tuple, Union\n\ndef extract_even(tup: Tuple[Union[int, Tuple]]) -> list:\n    even_nums = []\n    for item in tup:\n        if isinstance(item, tuple):\n            even_nums.extend(extract_even(item))\n        elif isinstance(item, int) and item % 2 == 0:\n            even_nums.append(item)\n    return even_nums\n```"
    },
    {
        "id":381,
        "response":"```python\nimport math\n\ndef surface_Area(n, n2):\n    base_area = n ** 2\n    side_area = 4 * (0.5 * n * math.sqrt((n\/2)**2 + n2**2))\n    return base_area + side_area\n```"
    },
    {
        "id":382,
        "response":"```python\ndef my_dict(dct: dict) -> bool:\n    return len(dct) == 0\n```"
    },
    {
        "id":383,
        "response":"```python\nimport math\n\ndef catalan_number(n):\n    return math.comb(2 * n, n) \/\/ (n + 1)\n```"
    },
    {
        "id":384,
        "response":"```python\nimport re\nfrom typing import List, Tuple\n\ndef find_adjectives(sentence: str) -> List[Tuple[str, int]]:\n    adjectives = re.findall(r'\\b(very|good|great|excellent|amazing|awesome|nice|beautiful|lovely|gorgeous)\\b', sentence, flags=re.IGNORECASE)\n    positions = [(word, sentence.lower().find(word)) for word in adjectives]\n    return positions\n\n# Example usage:\nsentence = \"The very beautiful sunny day made me feel great and amazing.\"\nprint(find_adjectives(sentence))\n```"
    },
    {
        "id":385,
        "response":"```python\nimport heapq\nfrom typing import List, Tuple\n\ndef expensive_items(lst: List[Tuple[str, int]], n: int) -> List[Tuple[str, int]]:\n    return heapq.nlargest(n, lst, key=lambda x: x[1])\n```"
    },
    {
        "id":386,
        "response":"```python\nfrom typing import List\n\ndef split_Arr(lst: List[int], n: int, n2: int) -> List[int]:\n    if n + n2 > len(lst):\n        raise ValueError(\"n and n2 cannot be greater than the length of the list\")\n    return lst[n:n+n2] + lst[:n] + lst[n+n2:]\n```"
    },
    {
        "id":387,
        "response":"```python\nfrom typing import List, Tuple\n\ndef list_tuple(lst: List) -> Tuple:\n    return tuple(lst)\n```"
    },
    {
        "id":388,
        "response":"```python\ndef big_diff(lst):\n    if len(lst) < 1:\n        return 0\n    return max(lst) - min(lst)\n```"
    },
    {
        "id":389,
        "response":"```python\nimport math\n\ndef perfect_squares(n, n2):\n    if n > n2:\n        n, n2 = n2, n\n    start = math.ceil(math.sqrt(n))\n    end = math.floor(math.sqrt(n2))\n    return [i**2 for i in range(start, end + 1)]\n\nprint(perfect_squares(4, 20)) \nprint(perfect_squares(50, 100)) \nprint(perfect_squares(10, 2)) \nprint(perfect_squares(1, 1)) \n```"
    },
    {
        "id":390,
        "response":"```python\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(math.radians(theta))\n    y = r * math.sin(math.radians(theta))\n    return x, y\n```"
    },
    {
        "id":391,
        "response":"```python\nfrom typing import List\n\ndef swap_List(lst: List) -> List:\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":392,
        "response":"```python\nimport math\n\ndef sum_Of_product(n):\n    total = 0\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i + j == n:\n                total += math.comb(n, i) * math.comb(n, j)\n    return total\n```"
    },
    {
        "id":393,
        "response":"```python\ndef removezero_ip(s):\n    return '.'.join(str(int(i)) for i in s.split('.'))\n```"
    },
    {
        "id":394,
        "response":"```python\nfrom typing import List\n\ndef diff_even_odd(lst: List[int]) -> int:\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2 != 0]\n    \n    if not even or not odd:\n        return 0\n    return min(even) - max(odd)\n```"
    },
    {
        "id":395,
        "response":"```python\nfrom collections import deque\n\ndef minSwaps(s, s2):\n    n = len(s)\n    diff = sum(1 for a, b in zip(s, s2) if a != b)\n    if diff % 2 != 0:\n        return -1\n    queue = deque([(s, 0)])\n    visited = {s}\n    while queue:\n        curr, step = queue.popleft()\n        if curr == s2:\n            return step\n        for i in range(n - 1):\n            next_str = list(curr)\n            next_str[i], next_str[i + 1] = next_str[i + 1], next_str[i]\n            next_str = ''.join(next_str)\n            if next_str not in visited:\n                queue.append((next_str, step + 1))\n                visited.add(next_str)\n    return -1\n```"
    },
    {
        "id":396,
        "response":"```python\nfrom typing import Tuple\n\ndef tuple_size(tup: Tuple) -> int:\n    return len(tup)\n```"
    },
    {
        "id":397,
        "response":"```python\nimport heapq\n\ndef find_kth(lst, lst2, n, n2, k):\n    merged = list(heapq.merge(lst, lst2))\n    if k > len(merged):\n        return None\n    return merged[k-1]\n\ndef find_kth_optimized(lst, lst2, n, n2, k):\n    i, j = 0, 0\n    count = 0\n    while i < n and j < n2:\n        if lst[i] < lst2[j]:\n            count += 1\n            if count == k:\n                return lst[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return lst2[j]\n            j += 1\n    while i < n:\n        count += 1\n        if count == k:\n            return lst[i]\n        i += 1\n    while j < n2:\n        count += 1\n        if count == k:\n            return lst2[j]\n        j += 1\n    return None\n```"
    },
    {
        "id":398,
        "response":"```python\ndef armstrong_number(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    return sum == n\n```"
    },
    {
        "id":399,
        "response":"```python\ndef sum_average(n: int) -> tuple:\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    total_sum = n * (n + 1) \/\/ 2\n    average = total_sum \/ n\n    \n    return total_sum, average\n\n# Example usage:\nn = 10\nresult_sum, result_average = sum_average(n)\nprint(f\"Sum: {result_sum}, Average: {result_average}\")\n```"
    },
    {
        "id":400,
        "response":"```python\ndef is_Even(n: int) -> bool:\n    import re\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    return (n & 1) == 0\n```"
    }
]