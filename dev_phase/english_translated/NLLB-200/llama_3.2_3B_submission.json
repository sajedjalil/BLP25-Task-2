[
    {
        "id":1,
        "response":"```python\nfrom itertools import combinations\n\ndef max_chain_length(lst, n):\n    max_len = 0\n    for i in range(1, n+1):\n        for pair in combinations(lst, i):\n            curr_len = len(''.join(map(str, pair)))\n            max_len = max(max_len, curr_len)\n    return max_len\n```"
    },
    {
        "id":2,
        "response":"```python\nfrom collections import Counter\n\ndef first_repeated_char(s):\n    counter = Counter(s)\n    for char in s:\n        if counter[char] > 1:\n            return char\n    return None\n```"
    },
    {
        "id":3,
        "response":"```python\nimport math\n\ndef get_ludic(n):\n    if n < 1:\n        return None\n    sqrt_n = math.sqrt(n)\n    if sqrt_n == int(sqrt_n):\n        return int(sqrt_n)\n    else:\n        return math.floor(sqrt_n)\n```"
    },
    {
        "id":4,
        "response":"```python\nfrom typing import List\n\ndef reverse_words(s: str) -> str:\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n```"
    },
    {
        "id":5,
        "response":"```python\nfrom typing import Union\n\ndef prime_num(n: int) -> Union[bool, str]:\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```"
    },
    {
        "id":6,
        "response":"```python\nimport math\n\ndef radian_degree(n):\n    if not isinstance(n, (int, float)):\n        raise TypeError(\"Input must be a number\")\n    return n * 180 \/ math.pi\n```"
    },
    {
        "id":7,
        "response":"```python\nimport re\n\ndef find_literals(s, s2):\n    return re.search(rf'({s2})', s).start()\n```"
    },
    {
        "id":8,
        "response":"```python\nfrom collections import deque\n\ndef bell_number(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 1\n    else:\n        bell = deque([1])\n        for _ in range(n):\n            bell.append(sum(bell))\n        return bell[-1]\n```"
    },
    {
        "id":9,
        "response":"```python\nfrom functools import reduce\n\ndef floor_min(*args):\n    return reduce(min, args)\n```"
    },
    {
        "id":10,
        "response":"```python\nfrom typing import List\n\ndef remove_kth_element(lst: List, k: int) -> List:\n    if k < 1 or k > len(lst):\n        return lst\n    return lst[:k-1] + lst[k:]\n\n```"
    },
    {
        "id":11,
        "response":"```python\nimport itertools\n\ndef max_of_nth(lst, n):\n    return max(itertools.chain(*lst), default=0) if n > 0 else 0\n```"
    },
    {
        "id":12,
        "response":"```python\nfrom itertools import zip_longest\n\ndef merge(lst):\n    first, *middle, last = lst\n    return [item for pair in zip_longest([first, last], middle) for item in pair if item is not None]\n\nprint(merge([1, 2, 3, 4, 5]))\nprint(merge(['a', 'b', 'c', 'd', 'e']))\nprint(merge([10, 20, 30, 40, 50]))\n```"
    },
    {
        "id":13,
        "response":"```python\nfrom typing import List, Tuple\n\ndef maximum_value(lst: List[Tuple]) -> Tuple:\n    return max(lst, key=lambda x: x[1])\n```"
    },
    {
        "id":14,
        "response":"```python\nfrom typing import List, Tuple\n\ndef cummulative_sum(lst: List[Tuple[int, int]]) -> int:\n    total = 0\n    for num in lst:\n        total += num[0] + num[1]\n    return total\n```"
    },
    {
        "id":15,
        "response":"```python\nfrom typing import Tuple\n\ndef average_tuple(tup: Tuple[int, ...]) -> float:\n    if len(tup) == 0:\n        raise ValueError(\"\u099f\u09c1\u09aa\u09b2\u099f\u09bf \u0996\u09be\u09b2\u09bf \u09a8\u09af\u09bc\")\n    return sum(tup) \/ len(tup)\n```"
    },
    {
        "id":16,
        "response":"```python\nimport math\n\ndef tuple_modulo(tup, tup2):\n    if len(tup) != 2 or len(tup2) != 2:\n        raise ValueError(\"\u0989\u09ad\u09af\u09bc \u099f\u09c1\u09aa\u09b2\u0987 \u09a6\u09c1\u099f\u09bf \u0989\u09aa\u09be\u09a6\u09be\u09a8 \u09a5\u09be\u0995\u09be \u0989\u099a\u09bf\u09a4\")\n    return (math.fmod(tup[0], tup2[0]), math.fmod(tup[1], tup2[1]))\n```"
    },
    {
        "id":17,
        "response":"```python\nimport math\n\ndef min_Jumps(n, n2, n3):\n    return math.ceil(math.sqrt((n2 - n)**2 + (n3 - n)**2))\n```"
    },
    {
        "id":18,
        "response":"```python\nfrom typing import List\n\ndef div_list(lst: List[int], lst2: List[int]) -> (List[int], List[int]):\n    result1 = [num for num in lst if num % lst2[0] == 0]\n    result2 = [num for num in lst if num % lst2[0] != 0]\n    return result1, result2\n```"
    },
    {
        "id":19,
        "response":"```python\nfrom typing import List\n\ndef move_num(s: str) -> str:\n    nums = [int(i) for i in s.split()]\n    nums.sort()\n    return ' '.join(map(str, nums))\n```"
    },
    {
        "id":20,
        "response":"```python\nfrom typing import List\n\ndef largest_subset(lst: List[int], n: int) -> List[int]:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def is_divisible(a: int, b: int) -> bool:\n        return b % gcd(a, b) == 0\n\n    def backtrack(start: int, current_subset: List[int]) -> None:\n        if len(current_subset) == n:\n            result.append(current_subset[:])\n            return\n        for i in range(start, len(lst)):\n            if is_divisible(lst[i], current_subset[-1]):\n                current_subset.append(lst[i])\n                backtrack(i + 1, current_subset)\n                current_subset.pop()\n\n    result = []\n    backtrack(0, [])\n    return result\n```"
    },
    {
        "id":21,
        "response":"```python\nfrom typing import List\n\ndef increment_numerics(lst: List[str], n: int) -> List[str]:\n    result = []\n    for s in lst:\n        num = int(s)\n        num += n\n        result.append(str(num))\n    return result\n\ndef increment_numerics_alt(lst: List[str], n: int) -> List[str]:\n    return [str(int(s) + n) for s in lst]\n\ndef increment_numerics_list_comprehension(lst: List[str], n: int) -> List[str]:\n    return [(str(i + n) for i in lst)]\n\ndef increment_numerics_generator(lst: List[str], n: int) -> List[str]:\n    return [str(i + n) for i in lst]\n\nprint(increment_numerics([\"1\", \"2\", \"3\"], 2))\nprint(increment_numerics_alt([\"1\", \"2\", \"3\"], 2))\nprint(increment_numerics_list_comprehension([\"1\", \"2\", \"3\"], 2))\nprint(increment_numerics_generator([\"1\", \"2\", \"3\"], 2))\n```"
    },
    {
        "id":22,
        "response":"```python\nfrom typing import List\n\ndef get_median(lst: List[int], lst2: List[int], n: int) -> float:\n    combined = sorted(lst + lst2)\n    if n % 2 == 0:\n        return (combined[n\/\/2 - 1] + combined[n\/\/2]) \/ 2\n    else:\n        return combined[n\/\/2]\n```"
    },
    {
        "id":23,
        "response":"```python\nfrom typing import List\n\ndef nth_nums(lst: List[int], n: int) -> List[int]:\n    return [i ** n for i in lst]\n\ndef nth_nums_alt(lst: List[int], n: int) -> List[int]:\n    return [pow(i, n) for i in lst]\n\ndef nth_nums_listcomp(lst: List[int], n: int) -> List[int]:\n    return [(i := i ** n) for i in lst]\n\ndef nth_nums_generator(lst: List[int], n: int) -> List[int]:\n    return [i ** n for i in lst]\n\ndef nth_nums_map(lst: List[int], n: int) -> List[int]:\n    return list(map(lambda i: i ** n, lst))\n```"
    },
    {
        "id":24,
        "response":"```python\nfrom typing import Dict\n\ndef is_upper(s: str) -> Dict[str, bool]:\n    return {'lower': s.islower(), 'upper': s.isupper(), 'title': s.istitle(), 'capitalize': s.istitle()}\n\ndef to_upper(s: str) -> str:\n    return s.upper()\n\ndef to_lower(s: str) -> str:\n    return s.lower()\n\ndef to_title(s: str) -> str:\n    return s.title()\n\ndef to_capitalize(s: str) -> str:\n    return s.capitalize()\n```"
    },
    {
        "id":25,
        "response":"```python\nfrom typing import List\n\ndef swap_list(lst: List) -> List:\n    if len(lst) < 2:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":26,
        "response":"```python\nimport math\n\ndef triangle_area(n):\n    radius = n\n    max_area = 0\n    for i in range(1, radius):\n        for j in range(i, radius):\n            for k in range(j, radius):\n                a = i\n                b = j\n                c = k\n                s = (a + b + c) \/ 2\n                area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n                if area > max_area:\n                    max_area = area\n    return max_area\n```"
    },
    {
        "id":27,
        "response":"```python\nfrom typing import List\n\ndef find_First_Missing(lst: List[int], n: int, n2: int) -> int:\n    lst = set(lst)\n    for i in range(1, n2 + 1):\n        if i not in lst:\n            return i\n    return n2 + 1\n\ndef find_First_Missing(lst: List[int], n: int, n2: int) -> int:\n    lst = set(lst)\n    for i in range(1, n2 + 1):\n        if i not in lst:\n            return i\n    return n2 + 1\n```"
    },
    {
        "id":28,
        "response":"```python\nfrom typing import List\n\ndef replace_spaces(s: str) -> str:\n    result: List[str] = []\n    for char in s:\n        if char == ' ':\n            result.append('20')\n        else:\n            result.append(char)\n    return ''.join(result)\n```"
    },
    {
        "id":29,
        "response":"```python\nfrom typing import List, Union\n\ndef Split(lst: List[Union[int, str]]) -> List[Union[int, str]]:\n    result = []\n    temp = []\n    for item in lst:\n        if isinstance(item, (int, str)):\n            temp.append(item)\n        else:\n            if temp:\n                result.append(temp)\n                temp = []\n            result.append(item)\n    if temp:\n        result.append(temp)\n    return result\n```"
    },
    {
        "id":30,
        "response":"```python\nfrom typing import Tuple\n\ndef get_coordinates(tup: Tuple[Tuple[int, int], Tuple[int, int]]) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    x1, y1 = tup[0]\n    x2, y2 = tup[1]\n    return ((x1, y1), (x2, y2))\n```"
    },
    {
        "id":31,
        "response":"```python\nimport re\n\ndef replace_spaces(s):\n    return re.sub(r'(?<!\\w)\\s+(?!\\w)', '__UNDER__', s).replace('__UNDER__', ' ').replace('__UNDER__', '\\n')\n```"
    },
    {
        "id":32,
        "response":"```python\nfrom typing import List\n\ndef move_zero(lst: List[int]) -> List[int]:\n    return [i for i in lst if i != 0] + [0] * lst.count(0)\n\n```"
    },
    {
        "id":33,
        "response":"```python\nfrom itertools import combinations\n\ndef pair_OR_Sum(lst, n):\n    return sum(x ^ y for x, y in combinations(lst, n))\n```"
    },
    {
        "id":34,
        "response":"```python\nimport math\n\ndef even_Power_Sum(n):\n    return sum(int(math.pow(2, i)) for i in range(4, n+1, 2))\n```"
    },
    {
        "id":35,
        "response":"```python\nimport heapq\n\ndef heap_sort(lst):\n    heap = []\n    for val in lst:\n        heapq.heappush(heap, val)\n    sorted_lst = []\n    while heap:\n        sorted_lst.append(heapq.heappop(heap))\n    return sorted_lst\n```"
    },
    {
        "id":36,
        "response":"```python\nimport math\n\ndef Check_Solution(n, n2, n3):\n    D = (n2 - n3)**2 - 4*n*(n-n2)*(n-n3)\n    if D >= 0:\n        return math.sqrt(D) == round(math.sqrt(D))\n    else:\n        return False\n```"
    },
    {
        "id":37,
        "response":"```python\nfrom typing import Tuple\n\ndef no_profit_noloss(n, n2):\n    return n == n2\n```"
    },
    {
        "id":38,
        "response":"```python\nfrom math import sqrt\n\ndef wind_chill(n, n2):\n    return 35.74 + 0.6215*n - 35.75*(n**0.16) + 0.4275*n*(n**0.16)\n```"
    },
    {
        "id":39,
        "response":"```python\nfrom typing import List\n\ndef sample_nam(lst: List[str]) -> int:\n    return sum(len(name) for name in lst if name[0].lower() >= 'a')\n```"
    },
    {
        "id":40,
        "response":"```python\nfrom typing import List\n\ndef remove_parenthesis(lst: List[str]) -> List[str]:\n    result = []\n    for char in lst[0]:\n        if char not in ['(', ')']:\n            result.append(char)\n    return result\n```"
    },
    {
        "id":41,
        "response":"```python\nfrom math import sqrt\n\ndef is_nonagonal(n):\n    phi = (1 + sqrt(5)) \/ 2\n    return round(n * phi) == n\n```"
    },
    {
        "id":42,
        "response":"```python\nfrom typing import List, Tuple\n\ndef remove_similar_row(matrix: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    seen = set()\n    result = []\n    for row in matrix:\n        row_tuple = tuple(sorted(row))\n        if row_tuple not in seen:\n            seen.add(row_tuple)\n            result.append(row)\n    return result\n```"
    },
    {
        "id":43,
        "response":"```python\nfrom typing import List\n\ndef text_match_wordz_middle(text: str) -> List[str]:\n    words = text.split()\n    result = []\n    for word in words:\n        if 'z' in word and word[0].lower() != 'z' and word[-1].lower() != 'z':\n            result.append(word)\n    return result\n```"
    },
    {
        "id":44,
        "response":"```python\nfrom typing import List\n\ndef reverse_Array_Upto_K(lst: List[int], n: int) -> List[int]:\n    return lst[:n][::-1] + lst[n:][::-1]\n\ndef reverse_Array_Upto_K_Slice(lst: List[int], n: int) -> List[int]:\n    return lst[:n][::-1] + lst[n:][::-1]\n\ndef reverse_Array_Upto_K_List_Slicing(lst: List[int], n: int) -> List[int]:\n    return lst[:n][::-1] + lst[n:][::-1]\n\ndef reverse_Array_Upto_K_Without_Slicing(lst: List[int], n: int) -> List[int]:\n    result = []\n    for i in range(n):\n        result.append(lst[n-1-i])\n    for i in range(n):\n        result.append(lst[i])\n    return result\n```"
    },
    {
        "id":45,
        "response":"```python\nfrom math import prod\nfrom typing import List, Tuple\n\ndef find_k_product(lst: List[Tuple[int, int]], k: int) -> int:\n    return prod(x[k] for x in lst)\n\n# \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be \u0995\u09b0\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0989\u09a6\u09be\u09b9\u09b0\u09a3 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09c1\u09a8\nprint(find_k_product([(1, 2), (3, 4), (5, 6)], 1))  # 2\nprint(find_k_product([(1, 2), (3, 4), (5, 6)], 2))  # 12\nprint(find_k_product([(1, 2), (3, 4), (5, 6)], 3))  # 24\n```"
    },
    {
        "id":46,
        "response":"```python\nimport math\n\ndef no_of_cubes(n, n2):\n    return math.floor((n**3) \/ (n2**3))\n```"
    },
    {
        "id":47,
        "response":"```python\nfrom typing import List\n\ndef split_upperstring(s: str) -> List[str]:\n    result = []\n    word = ''\n    for char in s:\n        if char.isupper() and word:\n            result.append(word)\n            word = ''\n        word += char\n    if word:\n        result.append(word)\n    return result\n```"
    },
    {
        "id":48,
        "response":"```python\nfrom typing import List\n\ndef exchange_elements(lst: List) -> List:\n    n = len(lst)\n    for i in range(n \/\/ 2):\n        lst[i], lst[n - i - 1] = lst[n - i - 1], lst[i]\n    return lst\n```"
    },
    {
        "id":49,
        "response":"```python\nfrom typing import List\n\ndef sum_Range_list(lst: List[int], n: int, n2: int) -> int:\n    return sum(i for i in range(n, n2+1) if i in lst)\n\n# \u0989\u09a6\u09be\u09b9\u09b0\u09a3 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\nprint(sum_Range_list([1, 2, 3, 4, 5], 1, 5))\n```"
    },
    {
        "id":50,
        "response":"```python\nfrom typing import List, Tuple\n\ndef are_Equal(lst: List[int], lst2: List[int], n: int, n2: int) -> bool:\n    if len(lst) != n or len(lst2) != n2:\n        return False\n    return lst == lst2\n```"
    },
    {
        "id":51,
        "response":"```python\nfrom typing import Tuple\n\ndef check_subset(tup: Tuple, tup2: Tuple) -> bool:\n    return set(tup).issubset(set(tup2))\n```"
    },
    {
        "id":52,
        "response":"```python\nfrom typing import List, Tuple\n\ndef matrix_to_list(matrix: List[List[Tuple[int, int]]]) -> List[Tuple[int, int]]:\n    return [tuple(row) for row in zip(*matrix)]\n```"
    },
    {
        "id":53,
        "response":"```python\nfrom collections import defaultdict\nfrom typing import List\n\ndef grouping_dictionary(lst: List[tuple]) -> dict:\n    result = defaultdict(list)\n    for key, value in lst:\n        result[key].append(value)\n    return dict(result)\n```"
    },
    {
        "id":54,
        "response":"```python\nfrom typing import Tuple\n\ndef rectangle_perimeter(n: int, n2: int) -> int:\n    return 2 * (n + n2)\n\ndef rectangle_perimeter_v2(length: int, width: int) -> int:\n    return 2 * (length + width)\n```"
    },
    {
        "id":55,
        "response":"```python\nimport math\n\ndef fifth_Power_Sum(n):\n    return sum(math.pow(i, 5) for i in range(1, n+1))\n```"
    },
    {
        "id":56,
        "response":"```python\nfrom itertools import combinations\n\ndef find_Min_Sum(lst, lst2, n):\n    min_sum = float('inf')\n    for x, y in combinations(zip(lst, lst2), n):\n        diff = sum(abs(a - b) for a, b in x)\n        min_sum = min(min_sum, diff)\n    return min_sum\n```"
    },
    {
        "id":57,
        "response":"```python\nimport math\n\ndef first_Digit(n):\n    return math.floor(math.log10(n)) + 1\n```"
    },
    {
        "id":58,
        "response":"```python\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    return Counter(lst).most_common(1)[0][0]\n```"
    },
    {
        "id":59,
        "response":"```python\nfrom typing import List\n\ndef repeat(lst: List[int]) -> List[int]:\n    result = []\n    for i in lst:\n        result.append(i)\n        result.append(i)\n    return result\n```"
    },
    {
        "id":60,
        "response":"```python\nimport itertools\n\ndef find_Points(n, n2, n3, n4):\n    return list(set(itertools.chain(n, n2)) - set(itertools.chain(n3, n4)))\n```"
    },
    {
        "id":61,
        "response":"```python\nfrom itertools import groupby\nfrom operator import itemgetter\n\ndef max_sum_of_three_consecutive(lst, n):\n    max_sum = float('-inf')\n    for key, group in groupby(lst, key=itemgetter(0)):\n        if len(list(group)) >= n:\n            window_sum = sum(lst[i:i+n] for i in range(len(lst)-2*n+1))\n            max_sum = max(max_sum, window_sum)\n    return max_sum\n```"
    },
    {
        "id":62,
        "response":"```python\nfrom collections import OrderedDict\n\ndef sorted_dict(dct):\n    return OrderedDict(sorted(dct.items()))\n```"
    },
    {
        "id":63,
        "response":"```python\nimport math\n\ndef find_max_val(n, n2, n3):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    max_k = min(n, n2, n3)\n    for k in range(max_k, 0, -1):\n        if gcd(k, n2) == 1 and gcd(k, n3) == 1:\n            return k\n    return 1\n```"
    },
    {
        "id":64,
        "response":"```python\nfrom typing import Union\n\ndef average_Even(n: int) -> Union[float, int]:\n    if n < 2:\n        return None\n    even_nums = [i for i in range(2, n+1) if i % 2 == 0]\n    return sum(even_nums) \/ len(even_nums)\n```"
    },
    {
        "id":65,
        "response":"```python\nfrom collections import deque\n\ndef move_last(lst):\n    return deque(lst)[-1] + deque(lst)[:-1]\n```"
    },
    {
        "id":66,
        "response":"```python\nfrom collections import Counter\n\ndef count_char(s, s2):\n    return Counter(s2) - Counter(s)\n```"
    },
    {
        "id":67,
        "response":"```python\nfrom typing import List\n\ndef Check_Vow(s: str, s2: str) -> int:\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\ndef Check_Vow2(s: str, s2: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)\n\ndef Check_Vow3(s: str, s2: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(s.count(vowel) for vowel in vowels)\n```"
    },
    {
        "id":68,
        "response":"```python\nfrom collections import Counter\n\ndef replace(s, s2):\n    c1 = Counter(s)\n    c2 = Counter(s2)\n    result = ''\n    for char, count in c1.items():\n        result += char * min(count, c2[char])\n    return result\n```"
    },
    {
        "id":69,
        "response":"```python\nimport re\n\ndef check_IP(ip):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    return bool(re.match(pattern, ip))\n\ndef check_IPs ips):\n    return [check_IP(ip) for ip in ips]\n\n# Test\nprint(check_IP(\"192.168.1.1\"))  # True\nprint(check_IP(\"256.1.1.1\"))  # False\nprint(check_IPs([\"192.168.1.1\", \"256.1.1.1\"]))  # [True, False]\n```"
    },
    {
        "id":70,
        "response":"```python\nimport statistics\n\ndef decreasing_trend(lst):\n    if len(lst) < 2:\n        return False\n    return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))\n```"
    },
    {
        "id":71,
        "response":"```python\nimport re\n\ndef set_Right_most_Unset_Bit(n):\n    bin_str = bin(n)[2:]\n    max_idx = len(bin_str) - 1 - bin_str[::-1].rfind('0')\n    bin_str = bin_str[:max_idx] + '1' + bin_str[max_idx+1:]\n    return int(bin_str, 2)\n```"
    },
    {
        "id":72,
        "response":"```python\nimport re\n\ndef max_of_three(n, n2, n3):\n    return max(map(int, re.findall(r'\\d+', str(n) + str(n2) + str(n3))))\n```"
    },
    {
        "id":73,
        "response":"```python\nfrom typing import List\n\ndef convert(lst: List[int]) -> int:\n    return sum(lst)\n```"
    },
    {
        "id":74,
        "response":"```python\nfrom collections import Counter\n\ndef remove_duplicate(s):\n    return ' '.join([word for word in s.split() if s.count(word) == 1])\n```"
    },
    {
        "id":75,
        "response":"```python\nfrom typing import Tuple\n\ndef sum_nums(n: int, n2: int, n3: int, n4: int) -> int:\n    def is_in_range(num: int) -> bool:\n        return n <= num <= n4\n\n    def sum_nums_in_range(num: int) -> int:\n        if is_in_range(num):\n            return 20\n        else:\n            return num\n\n    return sum(sum_nums_in_range(i) for i in range(n, n4 + 1))\n\n```"
    },
    {
        "id":76,
        "response":"```python\nimport re\n\ndef remove_extra_char(s):\n    return re.sub('[^a-zA-Z]', '', s)\n```"
    },
    {
        "id":77,
        "response":"```python\nfrom typing import Tuple\n\ndef validity_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and b + c > a\n\ndef validity_triangle(n, m, o):\n    return validity_triangle(n, m, o)\n```"
    },
    {
        "id":78,
        "response":"```python\nimport re\n\ndef remove_spaces(s):\n    return re.sub(' +', '', s)\n```"
    },
    {
        "id":79,
        "response":"```python\nfrom collections import defaultdict\n\ndef access_key(dct, n):\n    keys = sorted(dct.keys())\n    for i, key in enumerate(keys):\n        if i == n:\n            return key\n        elif key > keys[n]:\n            return None\n    return None\n```"
    },
    {
        "id":80,
        "response":"```python\nfrom typing import List\n\ndef increasing_trend(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\ndef decreasing_trend(lst: List[int]) -> bool:\n    return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))\n\ndef constant_trend(lst: List[int]) -> bool:\n    return len(set(lst)) == 1\n\ndef trend(lst: List[int]) -> str:\n    if increasing_trend(lst):\n        return \"Increasing\"\n    elif decreasing_trend(lst):\n        return \"Decreasing\"\n    else:\n        return \"Constant\"\n\ndef check_trend(lst: List[int]) -> str:\n    if constant_trend(lst):\n        return trend(lst)\n    else:\n        if increasing_trend(lst):\n            return \"Increasing trend, but may be fluctuating\"\n        else:\n            return \"Decreasing trend, but may be fluctuating\"\n```"
    },
    {
        "id":81,
        "response":"```python\nfrom math import sqrt\n\ndef smallest_Divisor(n):\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n```"
    },
    {
        "id":82,
        "response":"```python\nfrom typing import List\n\ndef mul_list(lst1: List, lst2: List) -> List:\n    return [a * b for a, b in zip(lst1, lst2)]\n\ndef mul_list_alt(lst1: List, lst2: List) -> List:\n    return [sum(a * b for a, b in zip(lst1, lst2))]\n\ndef mul_list_map(lst1: List, lst2: List) -> List:\n    return list(map(lambda a, b: a * b, lst1, lst2))\n\ndef mul_list_zip(lst1: List, lst2: List) -> List:\n    return [a * b for a, b in zip(lst1, lst2)]\n\ndef mul_list_listcomp(lst1: List, lst2: List) -> List:\n    return [a * b for a in lst1 for b in lst2]\n```"
    },
    {
        "id":83,
        "response":"```python\nimport math\n\ndef sum_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(math.sqrt(n)) + 1):\n        for j in range(int(math.sqrt(n)) + 1):\n            if i * i + j * j == n:\n                return True\n    return False\n```"
    },
    {
        "id":84,
        "response":"```python\nfrom collections import Counter\n\ndef count_Char(s, s2):\n    counter1 = Counter(s)\n    counter2 = Counter(s2)\n    for char, count in counter1.items():\n        if char not in counter2:\n            return 0\n        else:\n            return count - counter2[char]\n    return 0\n```"
    },
    {
        "id":85,
        "response":"```python\nimport math\n\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    total = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            total += i\n    return total\n```"
    },
    {
        "id":86,
        "response":"```python\nfrom collections import Counter\n\ndef freq_element(tup):\n    return dict(Counter(tup))\n```"
    },
    {
        "id":87,
        "response":"```python\nimport math\n\ndef recur_gcd(n, n2):\n    if n == 0:\n        return n2\n    else:\n        return recur_gcd(n2 % n, n)\n\ndef gcd_iterative(n, n2):\n    while n != n2:\n        if n > n2:\n            n = n - n2\n        else:\n            n2 = n2 - n\n    return n\n\ndef gcd_recuritive(n, n2):\n    if n == 0:\n        return n2\n    elif n2 == 0:\n        return n\n    elif n > n2:\n        return gcd_recuritive(n2, n % n2)\n    else:\n        return gcd_recuritive(n, n2 % n)\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\nprint(gcd_recur_simp(a, b))\n```"
    },
    {
        "id":88,
        "response":"```python\nfrom math import sqrt\n\ndef len_complex(n, n2):\n    return sqrt(n**2 + n2**2)\n```"
    },
    {
        "id":89,
        "response":"```python\nfrom collections import deque\n\ndef min_jumps(lst, n):\n    queue = deque([(0, 0)])\n    visited = set([0])\n    while queue:\n        index, jumps = queue.popleft()\n        if index == n - 1:\n            return jumps\n        for i in range(index + 1, min(index + 10, n)):\n            if i not in visited:\n                queue.append((i, jumps + 1))\n                visited.add(i)\n```"
    },
    {
        "id":90,
        "response":"```python\nfrom typing import List\n\ndef mul_consecutive_nums(lst: List[int]) -> int:\n    if not lst:\n        return 1\n    result = lst[0]\n    for num in lst[1:]:\n        result *= num\n    return result\n```"
    },
    {
        "id":91,
        "response":"```python\nfrom typing import List, Tuple\n\ndef group_element(lst: List[Tuple[int, int]]) -> List[List[int]]:\n    if len(lst) < 2:\n        return []\n    result = {}\n    for first, second in lst:\n        if second not in result:\n            result[second] = [first]\n        else:\n            result[second].append(first)\n    return list(result.values())\n```"
    },
    {
        "id":92,
        "response":"```python\nimport math\n\ndef last_Two_Digits(n):\n    return str(math.factorial(n))[-2:]\n```"
    },
    {
        "id":93,
        "response":"```python\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +', ' ', s)\n```"
    },
    {
        "id":94,
        "response":"```python\nfrom collections import Counter\n\ndef extract_unique(dct):\n    return [k for k, v in dct.items() if Counter(dct[k]).most_common(1)[0][1] == 1]\n```"
    },
    {
        "id":95,
        "response":"```python\nfrom typing import Tuple\n\ndef check_greater(tup: Tuple, tup2: Tuple) -> bool:\n    if len(tup) != len(tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    for i in range(len(tup)):\n        if tup[i] <= tup2[i]:\n            return False\n    return True\n```"
    },
    {
        "id":96,
        "response":"```python\nfrom typing import List, Tuple\n\ndef zip_list(lst: List, lst2: List) -> List[Tuple]:\n    return list(zip(lst, lst2))\n\ndef unzip_list(zipped: List[Tuple]) -> List[List]:\n    return [list(i) for i in zip(*zipped)]\n\ndef combine_lists(lst: List, lst2: List) -> List:\n    return list(zip(lst, lst2))\n\ndef combine_lists_unzip(zipped: List[Tuple]) -> List[List]:\n    return [list(i) for i in zip(*zipped)]\n```"
    },
    {
        "id":97,
        "response":"```python\nfrom typing import List\n\ndef count_even(lst: List[int]) -> int:\n    return len([num for num in lst if num % 2 == 0])\n```"
    },
    {
        "id":98,
        "response":"```python\nfrom collections import namedtuple\n\nItem = namedtuple('Item', 'word frequency')\n\ndef sort_dict_item(dct):\n    triple = namedtuple('Triple', 'word frequency index')\n    items = [(item, freq) for word, freq in dct.items()]\n    items.sort(key=lambda x: x[1])\n    return [triple(*item) for item in items]\n\ndct = {'apple': 5, 'banana': 3, 'cherry': 2, 'date': 4, 'elderberry': 1}\nprint(sort_dict_item(dct))\n```"
    },
    {
        "id":99,
        "response":"```python\nfrom collections import deque\n\ndef min_Swaps(s, s2):\n    n = len(s)\n    s2 = s2 + '#' + s2\n    i = j = k = 0\n    swaps = 0\n    while k < 2 * n:\n        if s[k] == s2[2 * i + j]:\n            i += 1\n            j += 1\n            k += 1\n        else:\n            if s[k] != s2[2 * i]:\n                i += 1\n            if s[k] != s2[2 * i + 1]:\n                j += 1\n            swaps += 1\n            k += 1\n    return swaps\n```"
    },
    {
        "id":100,
        "response":"```python\nfrom typing import List\n\ndef count_range_in_list(lst: List[int], n: int, n2: int) -> int:\n    count = 0\n    for i in lst:\n        if n <= i <= n2:\n            count += 1\n    return count\n```"
    },
    {
        "id":101,
        "response":"```python\nimport numpy as np\n\ndef equilibrium_index(lst):\n    if not lst:\n        return None\n    total_sum = sum(lst)\n    left_sum = 0\n    for i, num in enumerate(lst):\n        if 2 * left_sum == total_sum - num:\n            return i + 1\n        left_sum += num\n    return None\n```"
    },
    {
        "id":102,
        "response":"```python\nfrom typing import List\n\ndef removals(lst: List[int], n: int, n2: int) -> int:\n    removals = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] <= n and lst[i] <= n2:\n            removals += 1\n            lst.pop(i)\n        else:\n            i += 1\n    return removals\n```"
    },
    {
        "id":103,
        "response":"```python\nfrom typing import Dict\n\ndef is_key_present(dct: Dict, n: str) -> bool:\n    return n in dct\n\ndef is_key_present_alt(dct: Dict, n: str) -> bool:\n    return any(n in v for v in dct.values())\n\ndef is_key_present_list(dct: Dict, n: str) -> bool:\n    return n in dct.values()\n```"
    },
    {
        "id":104,
        "response":"```python\nfrom fractions import Fraction\n\ndef harmonic_sum(n: int) -> Fraction:\n    return sum(Fraction(1, i) for i in range(1, n + 1))\n```"
    },
    {
        "id":105,
        "response":"```python\nfrom typing import List\n\ndef sort_sublists(lst: List[List[int]]) -> List[List[int]]:\n    return sorted(lst, key=lambda x: (len(x), x[0]))\n```"
    },
    {
        "id":106,
        "response":"```python\nfrom typing import List, Tuple\n\ndef is_subset(lst: List[int], n: int, lst2: List[int], n2: int) -> bool:\n    if len(lst) > n or len(lst2) > n2:\n        return False\n    for i in range(n2):\n        if i >= n and lst2[i] not in lst:\n            return False\n    return True\n```"
    },
    {
        "id":107,
        "response":"```python\nfrom typing import Union\n\ndef count_Set_Bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```"
    },
    {
        "id":108,
        "response":"```python\nfrom typing import List\n\ndef convert(s: str) -> List[str]:\n    result = []\n    temp = ''\n    for char in s:\n        if char.isalnum():\n            temp += char\n        else:\n            if temp:\n                result.append(temp)\n                temp = ''\n    if temp:\n        result.append(temp)\n    return result\n```"
    },
    {
        "id":109,
        "response":"```python\nfrom typing import Tuple\n\ndef get_unique(lst: Tuple) -> dict:\n    result = {}\n    for item in lst:\n        key = str(item)\n        if key not in result:\n            result[key] = item\n    return result\n```"
    },
    {
        "id":110,
        "response":"```python\nfrom typing import Tuple\n\ndef front_and_rear(tup: Tuple) -> Tuple:\n    if len(tup) == 0:\n        return (None, None)\n    return tup[0], tup[-1]\n```"
    },
    {
        "id":111,
        "response":"```python\nfrom typing import Dict\n\ndef product_Equal(n: int) -> bool:\n    num_to_words = {\n        0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\n        6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten',\n        11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen',\n        15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen',\n        19: 'nineteen', 20: 'twenty',\n        30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty',\n        70: 'seventy', 80: 'eighty', 90: 'ninety'\n    }\n\n    def num_to_str(num: int) -> str:\n        if num < 20:\n            return num_to_words[num]\n        elif num < 100:\n            tens, units = divmod(num, 10)\n            return num_to_words[tens * 10] + '-' + num_to_words[units]\n        elif num < 1000:\n            hundreds, rest = divmod(num, 100)\n            return num_to_words[hundreds] + ' hundred' + (' and ' + num_to_str(rest) if rest else '')\n\n    def product(s: str) -> int:\n        result = 1\n        for char in s:\n            if char.isdigit():\n                result *= int(char)\n        return result\n\n    str_num = num_to_str(n)\n    str_num = str_num.replace('-', '')\n    return product(str_num) == n\n```"
    },
    {
        "id":112,
        "response":"```python\nfrom typing import List\n\ndef remove_duplicate(lst: List) -> List:\n    return list(set(lst))\n```"
    },
    {
        "id":113,
        "response":"```python\nfrom typing import Tuple\n\ndef check_valid(tup: Tuple[int, int]) -> bool:\n    return tup[0] > 0 and tup[1] > 0\n```"
    },
    {
        "id":114,
        "response":"```python\nimport math\n\ndef count_Fac(n):\n    factors = set()\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return len(factors)\n\nprint(count_Fac(100))\n```"
    },
    {
        "id":115,
        "response":"```python\nfrom typing import Tuple\n\ndef str_to_tuple(s: str) -> Tuple[int, int]:\n    try:\n        return tuple(map(int, s.split()))\n    except ValueError:\n        return None\n```"
    },
    {
        "id":116,
        "response":"```python\nfrom typing import List\n\ndef rombus_perimeter(n: int) -> float:\n    if n < 3:\n        return 0\n    return 4 * sum([i for i in range(1, n+1)])\n\ndef rombus_perimeter(n: int) -> float:\n    if n < 3:\n        return 0\n    return 4 * sum([i for i in range(1, n+1)])\n```"
    },
    {
        "id":117,
        "response":"```python\nfrom typing import List\n\ndef sd_calc(lst: List[float]) -> float:\n    n = len(lst)\n    mean = sum(lst) \/ n\n    sq_sum = sum((x - mean) ** 2 for x in lst)\n    return (sq_sum \/ n) ** 0.5\n```"
    },
    {
        "id":118,
        "response":"```python\nfrom itertools import chain, islice\n\ndef alternate_elements(lst):\n    return list(chain(*zip(*map(lambda x: islice(x, 0, len(x)\/\/2), lst))))\n\n# \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be\nprint(alternate_elements(['a', 'b', 'c', 'd']))\nprint(alternate_elements(['apple', 'banana', 'cherry']))\nprint(alternate_elements([1, 2, 3, 4]))\n```"
    },
    {
        "id":119,
        "response":"```python\nfrom typing import Optional\n\ndef text_match(s: str) -> Optional[int]:\n    try:\n        return s.index('a') + 1 if 'a' in s and s.index('a') != 0 and (s[s.index('a') + 1] == '0' or s.count('b') > 1) else None\n    except ValueError:\n        return None\n```"
    },
    {
        "id":120,
        "response":"```python\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(tup: Tuple, dct: Dict) -> Tuple:\n    return tup + (dict(dct),)\n```"
    },
    {
        "id":121,
        "response":"```python\nfrom itertools import product\n\ndef maxAverageOfPath(lst, n):\n    rows, cols = len(lst), len(lst[0])\n    max_avg = float('-inf')\n    max_path = None\n\n    for r1, r2 in product(range(rows), range(rows)):\n        for c1, c2 in product(range(cols), range(cols)):\n            if r1 == r2 or c1 == c2:\n                continue\n            total = 0\n            for r, c in product(range(r1, r2 + 1), range(c1, c2 + 1)):\n                total += lst[r][c]\n            avg = total \/ ((r2 - r1 + 1) * (c2 - c1 + 1))\n            if avg > max_avg:\n                max_avg = avg\n                max_path = [(r1, c1), (r1, c1 + 1), (r1 + 1, c1 + 1), (r2, c2), (r2, c2 - 1), (r2 - 1, c2 - 1), (r2 - 1, c2), (r2 - 1, c1), (r2 - 1, c1 + 1)]\n\n    return max_path, max_avg\n```"
    },
    {
        "id":122,
        "response":"```python\nfrom typing import Dict\n\ndef filter_data(dct: Dict, n: float, n2: float) -> Dict:\n    filtered_data = {}\n    for key, value in dct.items():\n        if n <= value['height'] <= n2 and n <= value['width'] <= n2:\n            filtered_data[key] = value\n    return filtered_data\n```"
    },
    {
        "id":123,
        "response":"```python\nimport re\n\ndef count_same_pair(lst, lst2):\n    set1 = set(map(str, lst))\n    set2 = set(map(str, lst2))\n    return len(set1 & set2)\n\ndef count_same_pair2(lst, lst2):\n    return sum(1 for x, y in zip(map(str, lst), map(str, lst2)) if x == y)\n\ndef count_same_pair3(lst, lst2):\n    return sum(1 for x, y in zip(lst, lst2) if x == y)\n\ndef count_same_pair4(lst, lst2):\n    return sum(1 for x in lst if x in lst2)\n```"
    },
    {
        "id":124,
        "response":"```python\nfrom typing import Tuple\n\ndef power_base_sum(n: int, power: int) -> int:\n    return sum(int(digit) for digit in str(n)**power)\n\ndef power_base_sum2(n: int, power: int) -> int:\n    return sum(int(digit) for digit in bin(n)[2:].zfill(power))\n\ndef power_base_sum3(n: int, power: int) -> int:\n    return sum(int(digit) for digit in oct(n)[2:].zfill(power))\n\ndef power_base_sum4(n: int, power: int) -> int:\n    return sum(int(digit) for digit in hex(n)[2:].zfill(power))\n```"
    },
    {
        "id":125,
        "response":"```python\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"[^\"]*\"', s)\n```"
    },
    {
        "id":126,
        "response":"```python\nfrom typing import Tuple\n\ndef multiply_elements(tup: Tuple) -> int:\n    if len(tup) < 2:\n        return 0\n    return tup[0] * tup[1]\n```"
    },
    {
        "id":127,
        "response":"```python\nfrom re import sub\n\ndef remove_char(s):\n    return sub('[^a-zA-Z0-9]', '', s)\n```"
    },
    {
        "id":128,
        "response":"```python\nfrom typing import List\n\ndef sum_list(lst: List, lst2: List) -> List:\n    return lst + lst2\n```"
    },
    {
        "id":129,
        "response":"```python\nfrom typing import List\n\ndef add_list(lst1: List, lst2: List) -> List:\n    return lst1 + lst2\n```"
    },
    {
        "id":130,
        "response":"```python\nfrom collections import deque\n\ndef consecutive_duplicates(lst):\n    if len(lst) == 0:\n        return lst\n    stack = deque([lst[0]])\n    for i in range(1, len(lst)):\n        if lst[i] == stack[-1]:\n            stack.pop()\n        else:\n            stack.append(lst[i])\n    return list(stack)\n```"
    },
    {
        "id":131,
        "response":"```python\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\n\ndef lateralsurface_cone2(r, h):\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\n\ndef lateralsurface_cone3(r, h):\n    return math.pi * r * (r + math.sqrt((r+h)**2))\n\ndef lateralsurface_cone4(r, h):\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\n\ndef lateralsurface_cone5(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone6(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone7(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone8(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone9(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone10(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone11(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone12(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone13(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone14(r, h):\n    return math.pi * r * (r + h)\n\ndef lateralsurface_cone15(r, h):\n    return math.pi * r * (r + h)\n```"
    },
    {
        "id":132,
        "response":"```python\nimport re\n\ndef replace_specialchar(s):\n    s = re.sub(r'[^\\w\\s]', '', s)\n    return s\n```"
    },
    {
        "id":133,
        "response":"```python\nfrom typing import List\n\ndef find_first_occurrence(lst: List[int], n: int) -> int:\n    try:\n        return lst.index(n)\n    except ValueError:\n        return -1\n```"
    },
    {
        "id":134,
        "response":"```python\nfrom functools import lru_cache\n\ndef sum_Of_Subarray_Prod(lst, n):\n    @lru_cache(None)\n    def dp(i, j):\n        if j == i:\n            return lst[i]\n        return lst[i] * dp(i + 1, j)\n    \n    total = 0\n    for i in range(n):\n        for j in range(i, n):\n            total += dp(i, j)\n    return total\n```"
    },
    {
        "id":135,
        "response":"```python\nfrom typing import Union\n\ndef toggle_middle_bits(n: int) -> int:\n    return ((n >> 1) ^ (n << (n % 2))) & ((1 << 32) - 1) if n % 2 else n\n```"
    },
    {
        "id":136,
        "response":"```python\nfrom typing import List\n\ndef left_insertion(lst: List[int], n: int) -> int:\n    left = 0\n    right = len(lst)\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```"
    },
    {
        "id":137,
        "response":"```python\nimport re\n\ndef check_str(s):\n    if s and s[0] in 'aeiouAEIOU':\n        return True\n    return re.match('^[aeiouAEIOU].*', s) is not None\n```"
    },
    {
        "id":138,
        "response":"```python\nimport math\n\ndef geometric_sum(n):\n    if n < 1:\n        return 0\n    return (n - 1) * (1 - (1 \/ n)) \/ (1 - 1\/n)\n\ndef geometric_sum_alt(n):\n    if n < 1:\n        return 0\n    return n - 1\n```"
    },
    {
        "id":139,
        "response":"```python\nimport math\n\ndef find_index(n):\n    i = 1\n    while True:\n        s = (i * (i + 1)) \/\/ 2\n        if s > n:\n            return i - 1\n        i += 1\n```"
    },
    {
        "id":140,
        "response":"```python\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(tup: Tuple) -> Dict:\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}\n\ndef tuple_to_dict_alt(tup: Tuple) -> Dict:\n    return dict(zip(tup[::2], tup[1::2]))\n\ndef tuple_to_dict_list(tup: Tuple) -> Dict:\n    return dict(list(zip(tup[::2], tup[1::2])))\n\ndef tuple_to_dict_dict(tup: Tuple) -> Dict:\n    return dict(tup)\n```"
    },
    {
        "id":141,
        "response":"```python\nfrom typing import str\n\ndef all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1\n```"
    },
    {
        "id":142,
        "response":"```python\nimport math\n\ndef area_tetrahedron(n):\n    return math.sqrt(2 * (n ** 2) * math.sin(math.pi \/ n))\n```"
    },
    {
        "id":143,
        "response":"```python\nfrom collections import deque\n\ndef rotate_right(lst, n, n2):\n    if len(lst) == 0:\n        return lst\n    \n    n = n % len(lst)\n    n2 = n2 % len(lst)\n    \n    if n2 == 0:\n        return lst\n    \n    d = deque(lst)\n    d.rotate(-n)\n    return list(d)\n```"
    },
    {
        "id":144,
        "response":"```python\nfrom typing import Tuple\n\ndef check_none(tup: Tuple[int, int, int]) -> bool:\n    return 0 in tup\n```"
    },
    {
        "id":145,
        "response":"```python\nfrom typing import Tuple\n\ndef divisible_by_digits(n: int, n2: int) -> Tuple[bool, int]:\n    def is_divisible(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n\n    return is_divisible(n), is_divisible(n2)\n\n# Test the function\nprint(divisible_by_digits(12, 24))\n```"
    },
    {
        "id":146,
        "response":"```python\nimport math\n\ndef sector_area(n, n2):\n    return (math.pi \/ 6) * (n2 ** 2 - n ** 2)\n```"
    },
    {
        "id":147,
        "response":"```python\nfrom itertools import combinations\n\ndef lcs_of_three(s, s2, s3):\n    def lcs(s1, s2):\n        m, n = len(s1), len(s2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n\n    def lcs_of_three_helper(s, s2, s3):\n        max_lcs = 0\n        for i, j in combinations(range(3), 2):\n            lcs_val = lcs(s[i], s[j])\n            if lcs_val > max_lcs:\n                max_lcs = lcs_val\n        return max_lcs\n\n    return lcs_of_three_helper(s, s2, s3)\n```"
    },
    {
        "id":148,
        "response":"```python\nfrom typing import List\n\ndef capital_words_spaces(s: str) -> str:\n    result: List[str] = []\n    for char in s:\n        if char.isupper() and result and result[-1].isalpha():\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n```"
    },
    {
        "id":149,
        "response":"```python\nfrom typing import List\n\ndef sort_numeric_strings(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: int(x))\n\ndef sort_numeric_strings_alt(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: x.isdigit() and int(x) or float('inf'))\n\ndef sort_numeric_strings_desc(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: int(x), reverse=True)\n\ndef sort_numeric_strings_desc_alt(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: x.isdigit() and int(x) or float('-inf'), reverse=True)\n```"
    },
    {
        "id":150,
        "response":"```python\nfrom typing import List, Tuple\n\ndef add_tuple(lst: List[Tuple], tup: Tuple) -> List[Tuple]:\n    lst.append(tup)\n    return lst\n```"
    },
    {
        "id":151,
        "response":"```python\nimport heapq\n\ndef check_min_heap(lst, n):\n    return all(heapq.heappop(lst) == min(lst) for _ in range(n))\n```"
    },
    {
        "id":152,
        "response":"```python\nfrom math import gcd\n\ndef jacobsthal_num(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, (a + b) % 1000000007\n        return b\n```"
    },
    {
        "id":153,
        "response":"```python\nimport heapq\n\ndef min_k(lst, n):\n    return heapq.nsmallest(n, lst)[-1]\n```"
    },
    {
        "id":154,
        "response":"```python\nfrom typing import List\n\ndef extract_index_list(lst: List, lst2: List, lst3: List) -> List[int]:\n    return list(set(lst) & set(lst2) & set(lst3))\n\nlst = [1, 2, 3, 4, 5]\nlst2 = [4, 5, 6, 7, 8]\nlst3 = [5, 6, 9, 10, 11]\n\nprint(extract_index_list(lst, lst2, lst3))  # Output: [5]\n```"
    },
    {
        "id":155,
        "response":"```python\nfrom typing import List\n\ndef second_smallest(lst: List[int]) -> int:\n    if len(lst) < 2:\n        raise ValueError(\"\u09a4\u09be\u09b2\u09bf\u0995\u09be\u09b0 \u0995\u09ae\u09aa\u0995\u09cd\u09b7\u09c7 \u09a6\u09c1\u099f\u09bf \u09b8\u0982\u0996\u09cd\u09af\u09be \u09a5\u09be\u0995\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    min_num = max_num = float('inf')\n    for num in lst:\n        if num < min_num:\n            min_num = num\n        elif num < max_num:\n            max_num = num\n    return min_num if min_num != max_num else None\n```"
    },
    {
        "id":156,
        "response":"```python\nfrom typing import Union\n\ndef text_match_zero_one(s: Union[str, bytes]) -> bool:\n    if isinstance(s, bytes):\n        s = s.decode('utf-8')\n    return '0' in s or '1' in s or 'b' in s\n```"
    },
    {
        "id":157,
        "response":"```python\nfrom typing import List\n\ndef count_reverse_pairs(lst: List[str]) -> int:\n    count = 0\n    seen = set()\n    for string in lst:\n        rev_string = string[::-1]\n        if rev_string in seen:\n            count += 1\n        seen.add(string)\n    return count\n```"
    },
    {
        "id":158,
        "response":"```python\nfrom typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    return len(set(tuple(sorted(sublist)) for sublist in lst))\n```"
    },
    {
        "id":159,
        "response":"```python\nimport re\n\ndef is_decimal(s: str) -> bool:\n    return bool(re.match(r'^-?\\d+(\\.\\d+)?$', s))\n```"
    },
    {
        "id":160,
        "response":"```python\nfrom typing import List\n\ndef unique_element(lst: List) -> bool:\n    return len(lst) == len(set(lst))\n```"
    },
    {
        "id":161,
        "response":"```python\nimport math\n\ndef arc_length(n, n2):\n    if n2 <= n:\n        raise ValueError(\"n2 must be greater than n\")\n    return math.sqrt((n2 - n)**3 + (n + n2)**2)\n```"
    },
    {
        "id":162,
        "response":"```python\nimport re\n\ndef check_month_number(n):\n    return bool(re.match(r'^3[0-1]$', str(n)))\n```"
    },
    {
        "id":163,
        "response":"```python\nfrom typing import Tuple\n\ndef find_Min_Diff(tup: Tuple[Tuple[int], ...], n: int) -> int:\n    min_diff = float('inf')\n    for i in range(len(tup)):\n        for j in range(i + 1, len(tup)):\n            diff = abs(tup[i][0] - tup[j][0])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff if min_diff != float('inf') else -1\n\n# \u0989\u09a6\u09be\u09b9\u09b0\u09a3\ntup = ((1, 2), (3, 4), (5, 6))\nn = 2\nprint(find_Min_Diff(tup, n))\n```"
    },
    {
        "id":164,
        "response":"```python\nfrom typing import List\n\ndef number_ctr(s: str) -> int:\n    res = 0\n    for char in s:\n        if char.isdigit():\n            res = res * 10 + int(char)\n    return res\n\ndef number_ctr_alt(s: str) -> int:\n    return int(''.join(filter(str.isdigit, s)))\n\ndef number_ctr_list(s: str) -> List[int]:\n    return [int(char) for char in s if char.isdigit()]\n\ndef number_ctr_set(s: str) -> set:\n    return set(int(char) for char in s if char.isdigit())\n```"
    },
    {
        "id":165,
        "response":"```python\nimport math\n\ndef is_polite(n: int) -> bool:\n    sum = 1\n    i = 1\n    while True:\n        sum += (n ** i) \/ (i + 1)\n        if sum > 1 + 1e-10:\n            return False\n        i += 1\n    return True\n```"
    },
    {
        "id":166,
        "response":"```python\nfrom typing import List\n\ndef pair_wise(lst: List) -> List:\n    return [item for i in range(0, len(lst), 2) for item in lst[i:i+2]]\n```"
    },
    {
        "id":167,
        "response":"```python\nfrom typing import List\n\ndef get_Pairs_Count(lst: List[int], n: int, n2: int) -> int:\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == n + n2:\n                count += 1\n    return count\n```"
    },
    {
        "id":168,
        "response":"```python\nfrom typing import Union\n\ndef check_Odd_Parity(n: Union[int, float]) -> Union[bool, str]:\n    if not isinstance(n, (int, float)):\n        return \"Error: Input must be a number\"\n    if n % 1 != 0:\n        return \"Error: Input must be an integer or a float with no decimal places\"\n    if n % 2 == 0:\n        return \"Odd and even\"\n    else:\n        return \"Odd\"\n\nprint(check_Odd_Parity(10))  # Odd and even\nprint(check_Odd_Parity(11))  # Odd\nprint(check_Odd_Parity(20))  # Odd and even\nprint(check_Odd_Parity(3.5))  # Error: Input must be an integer or a float with no decimal places\nprint(check_Odd_Parity(\"10\"))  # Error: Input must be a number\n```"
    },
    {
        "id":169,
        "response":"```python\nfrom typing import List\n\ndef Diff(lst: List, lst2: List) -> List:\n    return list(set(lst) ^ set(lst2))\n\ndef Diff2(lst: List, lst2: List) -> List:\n    return [element for element in lst if element not in lst2] + [element for element in lst2 if element not in lst]\n\ndef Diff3(lst: List, lst2: List) -> List:\n    result = []\n    for element in lst:\n        if element not in lst2:\n            result.append(element)\n    for element in lst2:\n        if element not in lst:\n            result.append(element)\n    return result\n```"
    },
    {
        "id":170,
        "response":"```python\nimport math\n\ndef odd_Num_Sum(n):\n    return sum(math.pow(i, 4) for i in range(1, n+1, 2))\n\n# Test the function\nprint(odd_Num_Sum(10))\n```"
    },
    {
        "id":171,
        "response":"```python\nfrom sympy import symbols, sympify\n\ndef check_expression(s):\n    x = symbols('x')\n    try:\n        expression = sympify(s)\n        return expression.free_symbols == set()\n    except Exception:\n        return False\n```"
    },
    {
        "id":172,
        "response":"```python\nfrom collections import Counter\n\ndef remove_length(s, n):\n    words = s.split()\n    counter = Counter(words)\n    new_words = [word for word in words if counter[word] > 0]\n    return ' '.join(new_words)\n```"
    },
    {
        "id":173,
        "response":"```python\nfrom typing import List\n\ndef occurance_substring(s: str, s2: str) -> List[tuple]:\n    indices: List[tuple] = []\n    for i in range(len(s)):\n        if s2 in s[i:]:\n            indices.append((i, s2.index(s2, i)))\n    return indices\n```"
    },
    {
        "id":174,
        "response":"```python\nimport re\n\ndef check_email(s):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":175,
        "response":"```python\nfrom typing import List\n\ndef odd_position(lst: List[int]) -> bool:\n    return lst[1::2] != []\n\n```"
    },
    {
        "id":176,
        "response":"```python\nfrom collections import Counter\n\ndef count_vowels(s):\n    vowels = 'aeiou'\n    return sum(1 for c in Counter(s) if c in vowels)\n```"
    },
    {
        "id":177,
        "response":"```python\nfrom itertools import groupby\n\ndef find_Sum(lst, n):\n    total = 0\n    for key, group in groupby(lst, key=lambda x: x % n):\n        total += sum(group)\n    return total\n```"
    },
    {
        "id":178,
        "response":"```python\nfrom itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return [' '.join(k) for k in groupby(lst)]\n```"
    },
    {
        "id":179,
        "response":"```python\nimport itertools\n\ndef unique_sublists(lst):\n    return len(list(set(tuple(sublist) for sublist in itertools.combinations(lst, 2))))\n```"
    },
    {
        "id":180,
        "response":"```python\nfrom itertools import combinations\n\ndef find_combinations(lst):\n    result = []\n    for r in range(1, len(lst) + 1):\n        for comb in combinations(lst, r):\n            if len(comb) > 0 and all(isinstance(x, tuple) and len(x) == 2 for x in comb):\n                result.append(sum(comb))\n    return result\n```"
    },
    {
        "id":181,
        "response":"```python\nfrom math import sqrt\n\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count\n```"
    },
    {
        "id":182,
        "response":"```python\nfrom itertools import chain, combinations\n\ndef Odd_Length_Sum(lst):\n    return sum(sum(length for length in r) for r in chain(*combinations(lst, 2)))\n```"
    },
    {
        "id":183,
        "response":"```python\nfrom typing import Tuple\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> Tuple[float, float, float]:\n    r, g, b = r \/ 255.0, g \/ 255.0, b \/ 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) \/ df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) \/ df) + 120) % 360\n    else:\n        h = (60 * ((r - g) \/ df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df \/ mx\n    v = mx\n    return h \/ 360.0, s, v\n```"
    },
    {
        "id":184,
        "response":"```python\nfrom typing import List\n\ndef mul_even_odd(lst: List[int]) -> int:\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    return even * odd if even is not None and odd is not None else 1\n```"
    },
    {
        "id":185,
        "response":"```python\nfrom typing import Tuple\n\ndef tuple_str_int(s: str) -> Tuple[int, int]:\n    try:\n        return (int(s[0]), int(s[1]))\n    except (IndexError, ValueError):\n        return None\n```"
    },
    {
        "id":186,
        "response":"```python\nfrom typing import List\n\ndef right_insertion(lst: List[int], n: int) -> int:\n    left, right = 0, len(lst)\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```"
    },
    {
        "id":187,
        "response":"```python\nfrom typing import Optional\n\ndef text_match_three(s: str) -> Optional[int]:\n    index = s.find('a')\n    if index == -1:\n        return None\n    index += 1\n    return s.find('b', index) == index + 2\n```"
    },
    {
        "id":188,
        "response":"```python\nfrom typing import Tuple, List\n\ndef new_tuple(lst: List, s: str) -> Tuple[List, str]:\n    return lst + [s]\n\ndef new_tuple_alt(lst: List, s: str) -> Tuple[List, str]:\n    return (lst, s)\n\ndef new_tuple_with_index(lst: List, s: str) -> Tuple[List, str, int]:\n    return (lst, s, len(lst))\n```"
    },
    {
        "id":189,
        "response":"```python\nimport math\n\ndef perimeter_polygon(n, side_length):\n    return n * side_length\n\ndef perimeter_polygon(n, n2):\n    return perimeter_polygon(n2, n)\n```"
    },
    {
        "id":190,
        "response":"```python\nfrom typing import List\n\ndef even_position(lst: List[int]) -> bool:\n    return all(i % 2 == 0 for i, _ in enumerate(lst) if i % 2 == 0)\n```"
    },
    {
        "id":191,
        "response":"```python\nfrom collections import namedtuple\n\ndef remove_nested(tup):\n    if not tup:\n        return tup\n    if isinstance(tup[0], tuple):\n        return remove_nested(tup[1:])\n    return tup\n```"
    },
    {
        "id":192,
        "response":"```python\nfrom typing import List\n\ndef count_list(lst: List) -> int:\n    return len(lst)\n\ndef count_list(lst: List) -> int:\n    return sum(1 for _ in lst)\n\ndef count_list(lst: List) -> int:\n    return len(lst)\n\ndef count_list(lst: List) -> int:\n    return len(lst)\n\ndef count_list(lst: List) -> int:\n    return sum(1 for _ in lst)\n\ndef count_list(lst: List) -> int:\n    return len(lst)\n```"
    },
    {
        "id":193,
        "response":"```python\nfrom typing import List\n\ndef last(lst: List, n: int, n2: int) -> int:\n    return lst[-1] if len(lst) >= n2 else lst[-1] if n2 == 1 else None\n```"
    },
    {
        "id":194,
        "response":"```python\nfrom typing import Optional\n\ndef text_starta_endb(s: Optional[str]) -> bool:\n    return s is not None and s.endswith('b') and 'a' in s[:-1]\n```"
    },
    {
        "id":195,
        "response":"```python\nfrom typing import List\n\ndef cheap_items(lst: List[int], n: int) -> List[int]:\n    return sorted([x for x in lst if x <= n])\n```"
    },
    {
        "id":196,
        "response":"```python\nfrom collections import defaultdict\n\ndef return_sum(dct):\n    result = defaultdict(int)\n    for key, value in dct.items():\n        result[key] += value\n    return sum(result.values())\n```"
    },
    {
        "id":197,
        "response":"```python\nfrom itertools import islice\n\ndef sum_in_Range(n, n2):\n    return sum(islice(filter(lambda x: x % 2 != 0, range(n, n2 + 1)))\n```"
    },
    {
        "id":198,
        "response":"```python\nfrom typing import List\n\ndef _sum(lst: List) -> int:\n    return sum(lst)\n\ndef sum(lst: List) -> int:\n    return _sum(lst)\n```"
    },
    {
        "id":199,
        "response":"```python\nfrom typing import List\n\ndef left_rotate(n: int, num_bits: int) -> int:\n    bin_str = bin(n)[2:].zfill(num_bits)\n    reversed_bin_str = bin_str[::-1]\n    return int(reversed_bin_str, 2)\n```"
    },
    {
        "id":200,
        "response":"```python\nfrom typing import List\n\ndef remove_all_spaces(s: str) -> str:\n    result = []\n    for char in s:\n        if char != ' ':\n            result.append(char)\n    return ''.join(result)\n```"
    },
    {
        "id":201,
        "response":"```python\nfrom collections import Counter\n\ndef test_three_equal(n, n2, n3):\n    return Counter(str(n))['1'] + Counter(str(n2))['1'] + Counter(str(n3))['1']\n```"
    },
    {
        "id":202,
        "response":"```python\nimport math\n\ndef count_Rotation(lst, n):\n    return len(lst) * (n % len(lst))\n\ndef count_Flip(lst, n):\n    return len(lst) * (n % 2)\n\ndef count_Swap(lst, n):\n    return math.factorial(n)\n\ndef count_Rotate_Flip_Swap(lst, n):\n    return count_Rotation(lst, n) + count_Flip(lst, n) + count_Swap(lst, n)\n\ndef count_Symmetric(lst, n):\n    return count_Rotate_Flip_Swap(lst, n) - len(lst)\n```"
    },
    {
        "id":203,
        "response":"```python\nimport math\n\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    sqrt = math.sqrt(n)\n    return sqrt == int(sqrt)\n```"
    },
    {
        "id":204,
        "response":"```python\nfrom typing import List\n\ndef is_Product_Even(lst: List[int], n: int) -> bool:\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0\n```"
    },
    {
        "id":205,
        "response":"```python\nfrom itertools import combinations\n\ndef max_sum_list(lst):\n    max_sum = float('-inf')\n    max_sum_list = []\n    for r in range(1, len(lst) + 1):\n        for combo in combinations(lst, r):\n            current_sum = sum(combo)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_list = list(combo)\n    return max_sum_list\n```"
    },
    {
        "id":206,
        "response":"```python\nfrom typing import List\n\ndef max_run_uppercase(s: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```"
    },
    {
        "id":207,
        "response":"```python\nfrom typing import List\n\ndef first_odd(lst: List[int]) -> int:\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None\n```"
    },
    {
        "id":208,
        "response":"```python\nfrom typing import Tuple\n\ndef check_K(tup: Tuple[int], n: int) -> bool:\n    return len(tup) == n\n```"
    },
    {
        "id":209,
        "response":"```python\nfrom typing import Tuple\n\ndef check_smaller(tup: Tuple, tup2: Tuple) -> bool:\n    return all(tup[i] < tup2[i] for i in range(len(tup)))\n```"
    },
    {
        "id":210,
        "response":"```python\nfrom collections import Counter\n\ndef count_variable(*args):\n    counter = Counter(args)\n    return {k: v for k, v in counter.items() if v > 1}\n\n# \u0989\u09a6\u09be\u09b9\u09b0\u09a3\nprint(count_variable(1, 2, 2, 3, 3, 3, 4, 4, 4, 4))\n```"
    },
    {
        "id":211,
        "response":"```python\nfrom typing import List, Tuple\n\ndef check_identical(lst: List[Tuple], lst2: List[Tuple]) -> bool:\n    return len(lst) != len(lst2) or set(map(tuple, lst)) != set(map(tuple, lst2))\n```"
    },
    {
        "id":212,
        "response":"```python\nfrom typing import Dict\n\ndef road_rd(s: str) -> str:\n    road_map: Dict[str, str] = {'road': 'rd'}\n    return road_map.get(s, s)\n```"
    },
    {
        "id":213,
        "response":"```python\nfrom typing import Union\n\ndef string_length(s: Union[str, bytes]) -> int:\n    return len(s)\n```"
    },
    {
        "id":214,
        "response":"```python\nimport math\n\ndef rombus_area(n, n2):\n    if n != n2:\n        return \"\u09a6\u09c1\u099f\u09bf \u09ac\u09be\u09b9\u09c1 \u09b8\u09ae\u09be\u09a8 \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\"\n    return n * n * math.sin(math.pi \/ 2)\n\ndef main():\n    n = int(input(\"\u09a6\u09c1\u099f\u09bf \u09ac\u09be\u09b9\u09c1 \u09a6\u09bf\u09a8: \"))\n    n2 = int(input(\"\u09a6\u09cd\u09ac\u09bf\u09a4\u09c0\u09af\u09bc \u09ac\u09be\u09b9\u09c1 \u09a6\u09bf\u09a8: \"))\n    print(rombus_area(n, n2))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":215,
        "response":"```python\nfrom collections import Counter\n\ndef sort_by_dnf(lst, n):\n    freq = Counter(lst)\n    sorted_lst = sorted(lst, key=lambda x: (freq[x], lst.index(x)))\n    return sorted_lst[:n]\n```"
    },
    {
        "id":216,
        "response":"```python\nfrom typing import Tuple\n\ndef clear_tuple(tup: Tuple) -> Tuple:\n    return tuple(x for x in tup if x != 0)\n```"
    },
    {
        "id":217,
        "response":"```python\nfrom typing import List\n\ndef div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n    return [num for num in lst if num % m == 0 or num % n == 0]\n```"
    },
    {
        "id":218,
        "response":"```python\nfrom typing import Dict\n\ndef lower_ctr(s: str) -> int:\n    freq: Dict[str, int] = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for char in s.lower():\n        if char.isalpha():\n            freq[char] += 1\n    return sum(freq.values())\n```"
    },
    {
        "id":219,
        "response":"```python\nfrom collections import Counter\nimport re\n\ndef count_duplic(lst):\n    s = re.sub('(\\d)\\1*', r'\\1', str(lst))\n    return Counter(s).values()\n```"
    },
    {
        "id":220,
        "response":"```python\nfrom typing import Union\n\ndef check_monthnum_number(n: int) -> bool:\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    return 28 in months[n-1:]\n```"
    },
    {
        "id":221,
        "response":"```python\nfrom typing import Dict\n\ndef merge_dictionaries(dct: Dict, dct2: Dict) -> Dict:\n    return {**dct, **dct2}\n```"
    },
    {
        "id":222,
        "response":"```python\nfrom re import match\n\ndef pass_validity(s):\n    pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$\"\n    return bool(match(pattern, s))\n```"
    },
    {
        "id":223,
        "response":"```python\nfrom re import search\n\ndef check_substring(s, s2):\n    return bool(search(s2, s))\n\nprint(check_substring(\"Hello, World!\", \"World\"))\nprint(check_substring(\"Hello, World!\", \"Universe\"))\n```"
    },
    {
        "id":224,
        "response":"```python\nfrom typing import List\n\ndef remove_even(lst: List[int]) -> List[int]:\n    return [num for num in lst if num % 2 != 0]\n\ndef remove_even_alt(lst: List[int]) -> List[int]:\n    result = []\n    for num in lst:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n\ndef remove_even_list_comprehension(lst: List[int]) -> List[int]:\n    return [num for i, num in enumerate(lst) if i % 2 != 0]\n\ndef remove_even_set_comprehension(lst: List[int]) -> List[int]:\n    return [{num for i, num in enumerate(lst) if i % 2 != 0}]\n```"
    },
    {
        "id":225,
        "response":"```python\nfrom typing import List\n\ndef access_elements(lst: List, lst2: List) -> List:\n    result = []\n    for i in range(min(len(lst), len(lst2))):\n        result.append((lst[i], lst2[i]))\n    return result\n```"
    },
    {
        "id":226,
        "response":"```python\nfrom typing import Tuple\n\ndef check_Type_Of_Triangle(a: int, b: int, c: int) -> str:\n    if a + b > c and a + c > b and b + c > a:\n        if a == b == c:\n            return \"Equilateral\"\n        elif a == b or a == c or b == c:\n            return \"Isosceles\"\n        else:\n            return \"Scalene\"\n    else:\n        return \"Not a Triangle\"\n\ndef check_Type_Of_Triangle(n: int, n2: int, n3: int) -> str:\n    return check_Type_Of_Triangle(n, n2, n3)\n```"
    },
    {
        "id":227,
        "response":"```python\nfrom typing import List\n\ndef sum_column(lst: List[List[int]], n: int) -> int:\n    return sum(row[n] for row in lst)\n```"
    },
    {
        "id":228,
        "response":"```python\nfrom typing import Dict\n\ndef count_alpha_dig_spl(s: str) -> Dict[str, int]:\n    alpha = 0\n    dig = 0\n    spl = 0\n    mapping: Dict[str, int] = {'a': 1, 'A': 1, '1': 1, '0': 1, '@': 1}\n    for char in s:\n        if char in mapping:\n            spl += 1\n        elif char.isalpha():\n            alpha += 1\n        elif char.isdigit():\n            dig += 1\n    return {'alpha': alpha, 'dig': dig, 'spl': spl}\n```"
    },
    {
        "id":229,
        "response":"```python\nfrom collections import Counter\nfrom typing import List\n\ndef second_frequent(lst: List[str]) -> str:\n    counter = Counter(lst)\n    max_count = max(counter.values())\n    second_max_count = [k for k, v in counter.items() if v == max_count - 1]\n    return second_max_count[0]\n```"
    },
    {
        "id":230,
        "response":"```python\nfrom math import ceil\n\ndef round_up(n: int, n2: int) -> int:\n    return ceil(n \/ n2) * n2\n```"
    },
    {
        "id":231,
        "response":"```python\nfrom typing import List\n\ndef count_Pairs(lst: List) -> int:\n    from collections import Counter\n    counter = Counter(lst)\n    count = 0\n    for val in counter.values():\n        count += val * (val - 1) \/\/ 2\n    return count\n```"
    },
    {
        "id":232,
        "response":"```python\nfrom re import findall\n\ndef extract_max(s):\n    nums = findall(r'\\d+', s)\n    return max(map(int, nums)) if nums else None\n```"
    },
    {
        "id":233,
        "response":"```python\nfrom collections import defaultdict\n\ndef get_key(dct):\n    return list(dct.keys())[0]\n```"
    },
    {
        "id":234,
        "response":"```python\nimport numpy as np\n\ndef generate_matrix(n):\n    matrix = np.zeros((n, n), dtype=int)\n    index = 0\n    row, col = 0, 0\n    for i in range(1, n*n + 1):\n        matrix[row, col] = i\n        if col == n - 1 or matrix[row, col + 1] != 0:\n            row += 1\n            col = 0\n        else:\n            col += 1\n            if col == n:\n                row += 1\n                col = 0\n        index = (index + 1) % (n*n)\n    return matrix\n```"
    },
    {
        "id":235,
        "response":"```python\nfrom typing import Tuple\n\ndef slope(n: int, n2: int, n3: int, n4: int) -> float:\n    return (n4 - n2) \/ (n3 - n2)\n```"
    },
    {
        "id":236,
        "response":"```python\nfrom typing import List\n\ndef max_sub_array_sum(lst: List[int], n: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum = max(lst[i], current_sum + lst[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```"
    },
    {
        "id":237,
        "response":"```python\nimport math\n\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, n+1))\n```"
    },
    {
        "id":238,
        "response":"```python\nfrom typing import BinaryIO\n\ndef min_Swaps(s: str, s2: str) -> int:\n    n = len(s)\n    m = len(s2)\n    if n != m:\n        return -1\n\n    count = 0\n    i = 0\n    while i < n:\n        if s[i] != s2[i]:\n            count += 1\n            j = i + 1\n            while j < n and s[j] != s2[i]:\n                j += 1\n            i = j\n        else:\n            i += 1\n\n    return count\n```"
    },
    {
        "id":239,
        "response":"```python\nfrom typing import List, Tuple\n\ndef sort_tuple(lst: List[Tuple]) -> List[Tuple]:\n    return sorted(lst, key=lambda x: x[0])\n```"
    },
    {
        "id":240,
        "response":"```python\nfrom typing import Tuple\n\ndef Check_Solution(n: int, n2: int, n3: int) -> bool:\n    def check_solution(a: int, b: int, c: int, d: int) -> bool:\n        return (a + b == c + d) and (a * b * c * d < 0)\n\n    return check_solution(n, n2, n3, -n3)\n```"
    },
    {
        "id":241,
        "response":"```python\nfrom typing import List\n\ndef get_inv_count(lst: List[int], n: int) -> int:\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, len(lst)):\n            if lst[j] % lst[i] == 0:\n                inv_count += 1\n    return inv_count\n```"
    },
    {
        "id":242,
        "response":"```python\nfrom collections import Counter\n\ndef get_odd_occurence(lst, n):\n    counter = Counter(lst)\n    for num, freq in counter.items():\n        if freq % 2 != 0 and freq == n:\n            return num\n    return None\n```"
    },
    {
        "id":243,
        "response":"```python\nimport math\n\ndef nth_super_ugly_number(n, lst):\n    if n < 1:\n        return None\n    if not lst:\n        return None\n\n    dp = [1] * n\n    prime_factors = [0] * len(lst)\n    for i, p in enumerate(lst):\n        prime_factors[i] = p\n\n    while True:\n        for i in range(len(lst)):\n            dp[i] *= prime_factors[i]\n\n        max_idx = 0\n        max_val = max(dp)\n        for i in range(len(lst)):\n            if dp[i] == max_val:\n                max_idx = i\n                break\n\n        if max_val > n:\n            return max_val\n        else:\n            prime_factors[max_idx] += 1\n\n        dp[max_idx] = 1\n        for i in range(len(lst)):\n            if prime_factors[i] > 0:\n                dp[max_idx] *= lst[i]\n                prime_factors[i] -= 1\n```"
    },
    {
        "id":244,
        "response":"```python\nfrom typing import List\n\ndef get_kth_element(arr: List[int], k: int) -> int:\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return arr[k - 1]\n\ndef get_kth_element_odd(arr: List[int], k: int) -> int:\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return arr[k - 1] if k % 2 != 0 else arr[-1]\n\ndef get_kth_element_even(arr: List[int], k: int) -> int:\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return arr[-1] if k % 2 == 0 else arr[k - 1]\n```"
    },
    {
        "id":245,
        "response":"```python\nimport math\n\ndef find_Digits(n):\n    return len(str(math.factorial(n)))\n```"
    },
    {
        "id":246,
        "response":"```python\nfrom typing import List\n\ndef find_platform(lst: List[int], lst2: List[int], n: int) -> int:\n    lst.sort()\n    lst2.sort()\n    p = 0\n    res = 0\n    i = 0\n    while p < len(lst) and i < len(lst2):\n        if lst[p] <= lst2[i]:\n            res += 1\n            p += 1\n            i += 1\n        else:\n            i += 1\n    return res\n```"
    },
    {
        "id":247,
        "response":"```python\nfrom typing import List, Tuple\n\ndef lcopy(lst: List[Tuple]) -> List[Tuple]:\n    return lst.copy()\n```"
    },
    {
        "id":248,
        "response":"```python\nfrom typing import Union\n\ndef area_trapezium(n: Union[int, float], n2: Union[int, float], n3: Union[int, float]) -> float:\n    return 0.5 * (n + n2) * n3\n\n# \u0989\u09a6\u09be\u09b9\u09b0\u09a3 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0:\nprint(area_trapezium(2, 5, 3))\n```"
    },
    {
        "id":249,
        "response":"```python\nfrom typing import Dict\n\ndef sum_divisors(n: int) -> int:\n    num_str = str(n)\n    divisors_sum: int = 0\n    for char in num_str:\n        if char.isdigit():\n            digit: int = int(char)\n            divisors_sum += sum(i for i in range(1, digit + 1) if digit % i == 0)\n        else:\n            divisors_sum += sum(i for i in range(1, ord(char) - 96) if ord(char) - 96 % i == 0)\n    return divisors_sum\n```"
    },
    {
        "id":250,
        "response":"```python\nimport math\n\ndef is_triangleexists(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    s = (a + b + c) \/ 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area > 0\n```"
    },
    {
        "id":251,
        "response":"```python\nfrom math import sqrt\n\ndef Sum_of_Inverse_Divisors(n, n2):\n    def prime_factors(num):\n        factors = {}\n        i = 2\n        while i * i <= num:\n            if num % i:\n                i += 1\n            else:\n                num \/\/= i\n                factors[i] = factors.get(i, 0) + 1\n        if num > 1:\n            factors[num] = factors.get(num, 0) + 1\n        return factors\n\n    def inverse_divisors(num):\n        factors = prime_factors(num)\n        inverse_sum = 1\n        for p in factors:\n            inverse_sum *= (p + 1) \/ p ** (factors[p] + 1)\n        return inverse_sum\n\n    return inverse_divisors(n) + inverse_divisors(n2)\n```"
    },
    {
        "id":252,
        "response":"```python\nfrom typing import List\n\ndef remove_negs(lst: List[int]) -> List[int]:\n    return [num for num in lst if num >= 0]\n\ndef remove_negs_alt(lst: List[int]) -> List[int]:\n    return lst[:lst.index(0) if 0 in lst else len(lst)]\n\ndef remove_negs_list_comprehension(lst: List[int]) -> List[int]:\n    return [num for num in lst if num >= 0]\n\ndef remove_negs_set(lst: List[int]) -> List[int]:\n    return list(set(lst) - set([num for num in lst if num < 0]))\n```"
    },
    {
        "id":253,
        "response":"```python\nimport math\n\ndef sum_of_odd_factors(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 != 0:\n                sum += i\n            if n \/\/ i % 2 != 0:\n                sum += n \/\/ i\n    return sum\n```"
    },
    {
        "id":254,
        "response":"```python\nfrom collections import deque\n\ndef raw_heap(lst):\n    heap = deque(lst)\n    while len(heap) > 1:\n        smallest = heap.popleft()\n        smallest_child = min(heap)\n        heap.remove(smallest_child)\n        heap.appendleft(smallest_child)\n    return list(heap)\n```"
    },
    {
        "id":255,
        "response":"```python\nfrom typing import Union\n\ndef check_Even_Parity(n: Union[int, float]) -> str:\n    if not isinstance(n, (int, float)):\n        raise TypeError(\"Input must be an integer or a float.\")\n    if n % 2 == 0:\n        return \"Even\"\n    elif n % 2 != 0:\n        return \"Odd\"\n```"
    },
    {
        "id":256,
        "response":"```python\nfrom typing import List\n\ndef find_Min_Swaps(lst: List[int], n: int) -> int:\n    swaps = 0\n    visited = [False] * n\n    queue = []\n    \n    for i in range(n):\n        if not visited[i]:\n            swaps += 1\n            queue.append(i)\n            while queue:\n                index = queue.pop(0)\n                visited[index] = True\n                if index > 0 and lst[index] < lst[index - 1]:\n                    queue.append(index - 1)\n                if index < n - 1 and lst[index] < lst[index + 1]:\n                    queue.append(index + 1)\n                    \n    return swaps\n```"
    },
    {
        "id":257,
        "response":"```python\nfrom typing import List\nimport matplotlib.pyplot as plt\n\ndef listify_list(lst: List[str]) -> List[List[str]]:\n    return [[i] for i in lst]\n```"
    },
    {
        "id":258,
        "response":"```python\nfrom typing import List\n\ndef count_list(lst: List[List[int]]) -> List[int]:\n    return [len(sublist) for sublist in lst]\n```"
    },
    {
        "id":259,
        "response":"```python\nfrom typing import List\n\ndef sub_lists(lst: List) -> List[List]:\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            result.append(lst[i:j])\n    return result\n```"
    },
    {
        "id":260,
        "response":"```python\nimport re\n\ndef check_alphanumeric(s):\n    return bool(re.match('^[a-zA-Z0-9]*$', s))\n```"
    },
    {
        "id":261,
        "response":"```python\nfrom itertools import permutations\n\ndef anagram_lambda(lst, s):\n    return [tup for tup in permutations(s) if ''.join(tup) in lst]\n\nfrom collections import Counter\n\ndef anagram_lambda_alt(lst, s):\n    return [tup for tup in permutations(s) if Counter(''.join(tup)) == Counter(s)]\n```"
    },
    {
        "id":262,
        "response":"```python\nfrom collections import Counter\nimport re\n\ndef n_common_words(s, n):\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    counter = Counter(words)\n    return sum(1 for word in counter if counter[word] >= n)\n```"
    },
    {
        "id":263,
        "response":"```python\nfrom itertools import count\n\ndef find_longest_conseq_subseq(lst, n):\n    max_len = 0\n    current_len = 1\n    current_num = lst[0]\n    current_seq = [current_num]\n\n    for num in lst[1:]:\n        if num - current_num == 1:\n            current_len += 1\n            current_seq.append(num)\n        else:\n            if current_len > max_len:\n                max_len = current_len\n                max_seq = current_seq\n            current_len = 1\n            current_num = num\n            current_seq = [num]\n\n    if current_len > max_len:\n        max_len = current_len\n        max_seq = current_seq\n\n    return max_len, max_seq\n\nlst = [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]\nn = 5\nprint(find_longest_conseq_subseq(lst, n))\n```"
    },
    {
        "id":264,
        "response":"```python\nfrom typing import List\n\ndef palindrome_lambda(lst: List[str]) -> List[str]:\n    return [s for s in lst if s == s[::-1]]\n\npalindrome_lambda(['radar', 'python', 'level', 'world', 'madam'])\n```"
    },
    {
        "id":265,
        "response":"```python\nfrom typing import List\n\ndef ntimes_list(lst: List, n: int) -> None:\n    for _ in range(n):\n        print(lst)\n```"
    },
    {
        "id":266,
        "response":"```python\nfrom calendar import monthrange\n\ndef check_monthnumb(s):\n    month_num = list('JANFEBMARAPRMAYJUNJULAUGSEP OCTNOVDEC')\n    if s not in month_num:\n        return False\n    month_num = month_num.index(s)\n    return monthrange(2024, month_num + 1)[1] == 31\n```"
    },
    {
        "id":267,
        "response":"```python\nfrom typing import List\n\ndef min_Num(lst: List[int], n: int) -> int:\n    total = sum(lst)\n    return min(abs(total - i) for i in range(n + 1))\n```"
    },
    {
        "id":268,
        "response":"```python\nfrom typing import List\n\ndef length_Of_Last_Word(s: str) -> int:\n    words = s.split()\n    if len(words) == 0:\n        return 0\n    return len(words[-1])\n\ndef length_Of_Last_Word(s: str) -> int:\n    words = s.split()\n    if len(words) == 0:\n        return 0\n    return len(words[-1])\n\ndef length_Of_Last_Word(s: str) -> int:\n    words = s.split()\n    if len(words) == 0:\n        return 0\n    return len(words[-1])\n```"
    },
    {
        "id":269,
        "response":"```python\nfrom typing import List\n\ndef remove_list_range(lst: List[int], n: int, n2: int) -> List[int]:\n    return [i for i in lst if n <= i <= n2]\n\ndef remove_list_range2(lst: List[int], n: int, n2: int) -> List[int]:\n    return [i for i in lst if i < n or i > n2]\n\ndef remove_list_range3(lst: List[int], n: int, n2: int) -> List[int]:\n    return lst[:n] + lst[n2+1:]\n\ndef remove_list_range4(lst: List[int], n: int, n2: int) -> List[int]:\n    return lst[:n] + lst[n2+1:]\n```"
    },
    {
        "id":270,
        "response":"```python\nfrom functools import reduce\nfrom operator import add\n\ndef sum_positivenum(lst):\n    return reduce(add, filter(lambda x: x > 0, lst))\n```"
    },
    {
        "id":271,
        "response":"```python\nfrom typing import List\n\ndef are_Rotations(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    return s in s2 + s2\n```"
    },
    {
        "id":272,
        "response":"```python\nfrom typing import List, Set\n\ndef check_subset(lst: List, lst2: List) -> bool:\n    if not lst:\n        return True\n    if not lst2:\n        return False\n    if lst[0] in lst2:\n        return check_subset(lst[1:], [x for x in lst2 if x != lst[0]])\n    return check_subset(lst[1:], lst2)\n```"
    },
    {
        "id":273,
        "response":"```python\nfrom typing import List\n\ndef fibonacci(n: int) -> List[int]:\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_sequence = [0, 1]\n        while len(fib_sequence) < n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return fib_sequence\n```"
    },
    {
        "id":274,
        "response":"```python\nfrom typing import Union\n\ndef check_Concat(s: str, s2: str) -> Union[bool, str]:\n    return s + s2 == s2 + s\n\nprint(check_Concat(\"abc\", \"cda\"))  # True\nprint(check_Concat(\"abc\", \"bca\"))  # False\n```"
    },
    {
        "id":275,
        "response":"```python\nfrom typing import List, Tuple\n\ndef min_difference(lst: List[Tuple[int, int]]) -> int:\n    lst.sort(key=lambda x: x[0])\n    min_diff = float('inf')\n    for i in range(len(lst) - 1):\n        min_diff = min(min_diff, lst[i + 1][0] - lst[i][0])\n    return min_diff\n```"
    },
    {
        "id":276,
        "response":"```python\nfrom math import gcd\nfrom typing import Tuple\n\ndef lcm(n: int, n2: int) -> int:\n    return abs(n * n2) \/\/ gcd(n, n2)\n\ndef lcm_pair(a: Tuple[int, int]) -> int:\n    return lcm(a[0], a[1])\n```"
    },
    {
        "id":277,
        "response":"```python\nfrom typing import List\n\ndef sort_String(s: str) -> str:\n    words = s.split()\n    words.sort()\n    return ' '.join(words)\n\ndef sort_String_alt(s: str) -> str:\n    return ' '.join(sorted(s.split()))\n\ndef sort_String_list(s: str) -> str:\n    words = s.split()\n    words.sort()\n    return ''.join(words)\n\ndef sort_String_list_alt(s: str) -> str:\n    return ''.join(sorted(s))\n```"
    },
    {
        "id":278,
        "response":"```python\nfrom typing import Tuple, List\n\ndef check_tuples(tup: Tuple, lst: List) -> bool:\n    return len(tup) == len(lst)\n```"
    },
    {
        "id":279,
        "response":"```python\nimport re\n\ndef text_match(s):\n    return bool(re.search(r'a.*b', s))\n```"
    },
    {
        "id":280,
        "response":"```python\nfrom math import sqrt\n\ndef Check_Solution(n, n2, n3):\n    x = (n2 - n3) \/ (2 * n)\n    y = (n2 + n3) \/ (2 * n)\n    if x * x == y and sqrt(x * x + y) % 1 == 0:\n        return 1\n    else:\n        return 0\n```"
    },
    {
        "id":281,
        "response":"```python\nfrom typing import List\n\ndef sum_even_odd(lst: List[int]) -> int:\n    even_sum = sum(num for num in lst if num % 2 == 0)\n    odd_sum = sum(num for num in lst if num % 2 != 0)\n    return even_sum + odd_sum\n```"
    },
    {
        "id":282,
        "response":"```python\nimport math\n\ndef parallelogram_perimeter(n, n2):\n    return 2 * (n + n2)\n```"
    },
    {
        "id":283,
        "response":"```python\nfrom typing import List\n\ndef div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n    return [num for num in lst if num % m == 0 and num % n == 0]\n\ndef div_of_nums2(lst: List[int], m: int, n: int) -> List[int]:\n    return [num for num in lst if num % m == 0 or num % n == 0]\n\ndef div_of_nums3(lst: List[int], m: int, n: int) -> List[int]:\n    return [num for num in lst if (m <= num <= n or n <= num <= m)]\n\ndef div_of_nums4(lst: List[int], m: int, n: int) -> List[int]:\n    return [num for num in lst if num % m == 0 and num % n == 0] or [num for num in lst if num % m == 0 or num % n == 0]\n\ndef div_of_nums5(lst: List[int], m: int, n: int) -> List[int]:\n    return [num for num in lst if (num % m == 0 and num % n == 0) or (num % m == 0 or num % n == 0)]\n```"
    },
    {
        "id":284,
        "response":"```python\nimport re\n\ndef all_Bits_Set_In_The_Given_Range(n, n2, n3):\n    bits = bin(n)[2:]\n    bits2 = bin(n2)[2:]\n    bits3 = bin(n3)[2:]\n    length = max(len(bits), len(bits2), len(bits3))\n    bits = bits.zfill(length)\n    bits2 = bits2.zfill(length)\n    bits3 = bits3.zfill(length)\n    return re.search('1' * length, ''.join([bits, bits2, bits3])) is not None\n```"
    },
    {
        "id":285,
        "response":"```python\nfrom typing import Optional\n\ndef is_isomorphic(s: str, s2: str) -> Optional[bool]:\n    if len(s) != len(s2):\n        return False\n    \n    mapping = {}\n    for c1, c2 in zip(s, s2):\n        if c1 in mapping and mapping[c1] != c2:\n            return False\n        if c1 not in mapping and c2 in mapping.values():\n            return False\n        mapping[c1] = c2\n    \n    return True\n```"
    },
    {
        "id":286,
        "response":"```python\nfrom typing import Tuple\n\ndef sum_num(tup: Tuple[int, ...]) -> float:\n    total_sum = sum(tup)\n    length = len(tup)\n    return total_sum \/ length if length != 0 else 0\n```"
    },
    {
        "id":287,
        "response":"```python\nfrom typing import Union\n\ndef is_odd(n: Union[int, float]) -> bool:\n    return n % 2 != 0\n```"
    },
    {
        "id":288,
        "response":"```python\nfrom typing import Tuple\n\ndef substract_elements(tup: Tuple[Tuple, ...], tup2: Tuple[Tuple, ...]) -> Tuple[Tuple, ...]:\n    result = []\n    for t1, t2 in zip(tup, tup2):\n        if len(t1) != len(t2):\n            raise ValueError(\"Tuples must be of equal length\")\n        result.append(tuple(x - y for x, y in zip(t1, t2)))\n    return tuple(result)\n```"
    },
    {
        "id":289,
        "response":"```python\nfrom collections import deque\n\ndef reverse_list_lists(lst):\n    return [deque(reversed(i)) for i in lst]\n```"
    },
    {
        "id":290,
        "response":"```python\nfrom typing import List\n\ndef find_Extra(lst: List, lst2: List, n: int) -> int:\n    extra = 0\n    for i in range(n):\n        if lst[i] != lst2[i]:\n            extra += 1\n    return extra\n```"
    },
    {
        "id":291,
        "response":"```python\nfrom typing import List\n\ndef same_Length(n: int, n2: int) -> bool:\n    def count_digits(num: int) -> int:\n        return len(str(abs(num)))\n\n    return count_digits(n) == count_digits(n2)\n```"
    },
    {
        "id":292,
        "response":"```python\nimport re\n\ndef remove_spaces(s):\n    return re.sub(' +', ' ', s).strip()\n```"
    },
    {
        "id":293,
        "response":"```python\nfrom typing import List\n\ndef Extract(lst: List) -> List:\n    return [lst[-1]] if lst else []\n\ndef Extract(lst):\n    return [lst[-1]] if lst else []\n\nprint(Extract([1, 2, 3, 4, 5]))  # Output: [5]\nprint(Extract([]))  # Output: []\n```"
    },
    {
        "id":294,
        "response":"```python\nfrom typing import Tuple\n\ndef float_to_tuple(s: str) -> Tuple[float, float]:\n    try:\n        return tuple(map(float, s.split()))\n    except ValueError:\n        return None\n```"
    },
    {
        "id":295,
        "response":"```python\nfrom typing import List\n\ndef max_sum_subseq(lst: List[int]) -> int:\n    n = len(lst)\n    dp = [0] * n\n    dp[0] = lst[0]\n    for i in range(1, n):\n        dp[i] = max(lst[i], dp[i-1] + lst[i])\n    return dp[-1]\n```"
    },
    {
        "id":296,
        "response":"```python\nfrom typing import List\n\ndef sort_list_last(lst: List) -> List:\n    return sorted(lst, reverse=True)\n```"
    },
    {
        "id":297,
        "response":"```python\nfrom typing import Set\n\ndef is_word_present(s: str, s2: str) -> bool:\n    s_set: Set[str] = set(s.split())\n    return s2.lower() in s_set\n```"
    },
    {
        "id":298,
        "response":"```python\nfrom typing import List\n\ndef extract_elements(lst: List, n: int) -> List:\n    if n > len(lst):\n        raise ValueError(\"n cannot be greater than the length of the list\")\n    return lst[:n]\n\n```"
    },
    {
        "id":299,
        "response":"```python\nfrom typing import List\n\ndef check(lst: List[int], n: int) -> bool:\n    return all(x % 2 == n % 2 for x in lst)\n```"
    },
    {
        "id":300,
        "response":"```python\nfrom typing import Union\n\ndef match_num(s: str, num: int) -> Union[str, int]:\n    if len(s) < num:\n        return \"Invalid input\"\n    return s[:num]\n```"
    },
    {
        "id":301,
        "response":"```python\nimport math\n\ndef num_comm_div(n, n2):\n    return math.gcd(n, n2)\n```"
    },
    {
        "id":302,
        "response":"```python\nfrom typing import Tuple\n\ndef find(n: int, n2: int) -> Tuple[int, int]:\n    return n % n2, n2 % n\n```"
    },
    {
        "id":303,
        "response":"```python\nfrom typing import List\n\ndef add_consecutive_nums(lst: List[int]) -> int:\n    if not lst:\n        return 0\n    total = lst[0]\n    for num in lst[1:]:\n        total += num\n    return total\n```"
    },
    {
        "id":304,
        "response":"```python\nimport math\n\ndef sum_Of_Series(n):\n    return sum(math.pow(i, 3) for i in range(1, n+1))\n```"
    },
    {
        "id":305,
        "response":"```python\nfrom typing import List\n\ndef re_order(lst: List[int]) -> List[int]:\n    return [x for x in lst if x != 0] + [0] * lst.count(0)\n```"
    },
    {
        "id":306,
        "response":"```python\nfrom math import factorial\n\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    return factorial(n) \/\/ factorial(k) \/\/ factorial(n - k)\n```"
    },
    {
        "id":307,
        "response":"```python\nfrom typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    return [word for word in lst if word not in lst2]\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    return [word for word in lst if word not in lst2]\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    return [word for word in lst if word not in lst2]\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    return [word for word in lst if word not in lst2]\n\nfrom typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    return [word for word in lst if word not in lst2]\n```"
    },
    {
        "id":308,
        "response":"```python\nfrom typing import List\n\ndef same_order(lst: List, lst2: List) -> bool:\n    return set(lst).issubset(set(lst2)) and set(lst2).issubset(set(lst))\n```"
    },
    {
        "id":309,
        "response":"```python\nfrom typing import List\n\ndef average_Odd(n: int) -> float:\n    total = 0\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            total += i\n            count += 1\n    return total \/ count if count != 0 else 0\n```"
    },
    {
        "id":310,
        "response":"```python\nfrom typing import List\n\ndef no_of_subsequences(lst: List[int], n: int) -> int:\n    count = 0\n    for i in range(1 << len(lst)):\n        product = 1\n        for j in range(len(lst)):\n            if (i & (1 << j)):\n                product *= lst[j]\n        if product < n:\n            count += 1\n    return count\n```"
    },
    {
        "id":311,
        "response":"```python\nimport itertools\n\ndef find_Min_Sum(n):\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    min_sum = float('inf')\n    for r in range(1, len(factors) + 1):\n        for combination in itertools.combinations(factors, r):\n            total = sum(combination)\n            min_sum = min(min_sum, total)\n    return min_sum\n```"
    },
    {
        "id":312,
        "response":"```python\nfrom collections import Counter\nimport re\n\ndef count_element_freq(tup):\n    s = ''.join(map(str, tup))\n    return Counter(re.findall(r'\\d+', s))\n```"
    },
    {
        "id":313,
        "response":"```python\nfrom typing import Tuple\n\ndef add_str(tup: Tuple[int, int, int], s: str) -> Tuple[int, int, int]:\n    return (tup[0] + ord(s[0]), tup[1] + len(s), tup[2] + len(s))\n\nfrom collections import deque\ndef add_str_deque(tup: Tuple[int, int, int], s: str) -> deque:\n    return deque([tup] + [add_str(tup, c) for c in s])\n```"
    },
    {
        "id":314,
        "response":"```python\nfrom typing import Tuple\n\ndef sum_elements(tup: Tuple[Tuple[int, int, int], ...]) -> Tuple[int, int, int]:\n    return tuple(sum(elements) for elements in zip(*tup))\n```"
    },
    {
        "id":315,
        "response":"```python\nfrom typing import Set\n\ndef modular_sum(lst: list, m: int, n: int) -> bool:\n    return sum(i for i in lst if i % m == 0) % m == 0\n```"
    },
    {
        "id":316,
        "response":"```python\nfrom typing import List\nimport random\n\ndef radix_sort(lst: List[int]) -> List[int]:\n    RADIX = 10\n    placement = 1\n\n    max_digit = max(lst)\n    while placement < max_digit:\n        buckets = [list() for _ in range(RADIX)]\n        for i in lst:\n            tmp = int((i \/ placement) % RADIX)\n            buckets[tmp].append(i)\n        a = 0\n        for b in range(RADIX):\n            buck = buckets[b]\n            for i in buck:\n                lst[a] = i\n                a += 1\n        placement *= RADIX\n    return lst\n\ndef random_list(size: int, min_val: int, max_val: int) -> List[int]:\n    return [random.randint(min_val, max_val) for _ in range(size)]\n\nlst = random_list(10, 1, 100)\nprint(\"Original List:\", lst)\nsorted_lst = radix_sort(lst)\nprint(\"Sorted List:\", sorted_lst)\n```"
    },
    {
        "id":317,
        "response":"```python\nfrom typing import List\n\ndef largest_pos(lst: List[int]) -> int:\n    return max(lst)\n```"
    },
    {
        "id":318,
        "response":"```python\nfrom math import sqrt\n\ndef sqrt_root(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return int(sqrt(n))\n```"
    },
    {
        "id":319,
        "response":"```python\nimport math\n\ndef volume_tetrahedron(n):\n    return (math.sqrt(2) \/ 27) * (n ** 3)\n```"
    },
    {
        "id":320,
        "response":"```python\nimport math\n\ndef get_lcm(lst):\n    lcm = lst[0]\n    for i in lst[1:]:\n        lcm = lcm*i\/\/math.gcd(lcm, i)\n    return lcm\n```"
    },
    {
        "id":321,
        "response":"```python\nfrom math import sqrt\n\ndef check_isosceles(n, n2, n3):\n    a = n**2\n    b = n2**2\n    c = n3**2\n    \n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":322,
        "response":"```python\nfrom typing import List\n\ndef lbs(lst: List[int]) -> str:\n    def binary(n: int) -> str:\n        if n == 0:\n            return '0'\n        result = ''\n        while n > 0:\n            result = str(n % 2) + result\n            n \/\/= 2\n        return result\n\n    max_len = 0\n    max_bin = ''\n    for num in lst:\n        bin_num = binary(num)\n        if len(bin_num) > max_len:\n            max_len = len(bin_num)\n            max_bin = bin_num\n    return max_bin\n```"
    },
    {
        "id":323,
        "response":"```python\nimport re\n\ndef check_string(s):\n    return bool(re.match(r'^[A-Z][a-z]\\d{4}$', s))\n```"
    },
    {
        "id":324,
        "response":"```python\nimport itertools\n\ndef max_sum_increasing_subsequence(lst, n):\n    max_sum = float('-inf')\n    for L in range(1, n+1):\n        for subsequence in itertools.combinations(lst, L):\n            if len(set(subsequence)) == L and all(subsequence[i] < subsequence[i+1] for i in range(len(subsequence)-1)):\n                max_sum = max(max_sum, sum(subsequence))\n    return max_sum\n```"
    },
    {
        "id":325,
        "response":"```python\nfrom typing import List\n\ndef parallel_lines(lst: List, lst2: List) -> bool:\n    if len(lst) != len(lst2):\n        return False\n    return all(x == y for x, y in zip(lst, lst2))\n```"
    },
    {
        "id":326,
        "response":"```python\nfrom typing import List\n\ndef capitalize_first_last_letters(s: str) -> str:\n    words = s.split()\n    capitalized_words = [word[0].upper() + word[1:-1] + word[-1].upper() for word in words]\n    return ' '.join(capitalized_words)\n```"
    },
    {
        "id":327,
        "response":"```python\nfrom typing import List\n\ndef get_pairs_count(lst: List[int], n: int) -> int:\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n:\n                count += 1\n    return count\n```"
    },
    {
        "id":328,
        "response":"```python\nfrom typing import List\n\ndef min_length(lst: List[int]) -> int:\n    return min(lst) if lst else 0\n```"
    },
    {
        "id":329,
        "response":"```python\nfrom math import sqrt\n\ndef jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        a, b, c = 2, 1, 3\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c\n```"
    },
    {
        "id":330,
        "response":"```python\nfrom typing import List\n\ndef negative_count(lst: List[int]) -> float:\n    negative = sum(1 for x in lst if x < 0)\n    total = len(lst)\n    return negative \/ total if total != 0 else 0\n```"
    },
    {
        "id":331,
        "response":"```python\nfrom typing import List\n\ndef min_coins(lst: List[int], n: int, n2: int) -> int:\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(len(lst)):\n            if i >= lst[j]:\n                dp[i] = min(dp[i], dp[i - lst[j]] + 1)\n\n    return dp[n] if dp[n] != float('inf') else -1\n```"
    },
    {
        "id":332,
        "response":"```python\nfrom typing import List\n\ndef check_permutation(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    \n    s_list = list(s)\n    s2_list = list(s2)\n    \n    for i in range(len(s)):\n        s_list[i] = s2_list[i]\n        if s_list != list(s):\n            return False\n        s_list[i] = s_list[i-1]\n        s2_list[i] = s2_list[i-1]\n    \n    return True\n```"
    },
    {
        "id":333,
        "response":"```python\nfrom typing import Tuple, Any\n\ndef remove_datatype(tup: Tuple[Any], param: type) -> Tuple[Any]:\n    return tuple(i for i in tup if isinstance(i, param))\n```"
    },
    {
        "id":334,
        "response":"```python\nfrom re import search\n\ndef search_literal(s, s2):\n    match = search(s2, s)\n    if match:\n        return match.start()\n    else:\n        return -1\n```"
    },
    {
        "id":335,
        "response":"```python\nimport math\n\ndef topbottom_surfacearea(n):\n    radius = n\n    height = n\n    top_area = math.pi * radius ** 2\n    bottom_area = math.pi * radius ** 2\n    return top_area + bottom_area\n```"
    },
    {
        "id":336,
        "response":"```python\nfrom typing import List\n\ndef nth_items(lst: List, n: int) -> object:\n    if n < 1 or n > len(lst):\n        raise IndexError(\"n is out of range\")\n    return lst[n-1]\n```"
    },
    {
        "id":337,
        "response":"```python\nimport re\n\ndef first_repeated_word(s):\n    words = re.findall(r'\\w+', s.lower())\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word in words:\n        if word_count[word] > 1:\n            return word\n    return None\n```"
    },
    {
        "id":338,
        "response":"```python\nfrom typing import List, Tuple\n\ndef string_list_to_tuple(string_list: List[str]) -> Tuple[str, ...]:\n    return tuple(string_list)\n\ndef tup_to_string_list(tup: Tuple[str, ...]) -> List[str]:\n    return list(tup)\n\ndef string_list_to_tuple_string_list(string_list: List[str]) -> Tuple[List[str], ...]:\n    return tuple(tup_to_string_list(string_list))\n\ndef string_list_to_tuple_string_list_alternative(string_list: List[str]) -> Tuple[str, ...]:\n    return tuple(string for string in string_list)\n\ndef string_list_to_tuple_string_list_with_index(string_list: List[str]) -> Tuple[tuple, str, ...]:\n    return tuple((i, string) for i, string in enumerate(string_list))\n\ndef string_list_to_tuple_string_list_with_index_alternative(string_list: List[str]) -> Tuple[tuple, str, ...]:\n    return tuple((i, string) for i, string in enumerate(string_list, start=1))\n```"
    },
    {
        "id":339,
        "response":"```python\nimport re\n\ndef basesnum_coresspondingnum(lst, lst2):\n    dict1 = {}\n    for i in range(len(lst)):\n        dict1[lst[i]] = lst2[i]\n    result = []\n    for num in lst:\n        if num in dict1:\n            result.append(dict1[num] ** num)\n        else:\n            result.append(0)\n    return result\n\ndef basesnum_list(lst):\n    result = []\n    for num in lst:\n        if num in ['2', '3', '4', '5', '6', '7', '8', '9']:\n            result.append(num)\n    return result\n\ndef basesnum_dict(lst):\n    dict1 = {}\n    for num in lst:\n        if num in ['2', '3', '4', '5', '6', '7', '8', '9']:\n            dict1[num] = num\n    return dict1\n\ndef basesnum_coresspondingnum2(lst, lst2):\n    dict1 = basesnum_dict(lst)\n    result = []\n    for num in lst2:\n        if num in dict1:\n            result.append(dict1[num] ** num)\n        else:\n            result.append(0)\n    return result\n\n```"
    },
    {
        "id":340,
        "response":"```python\nfrom typing import List\n\ndef find_Diff(lst: List[int], n: int) -> int:\n    if len(lst) < n:\n        return None\n    min_freq = min(lst[:n])\n    max_freq = max(lst[-n:])\n    return max_freq - min_freq\n```"
    },
    {
        "id":341,
        "response":"```python\nfrom math import sqrt\n\ndef check_abundant(n):\n    if n < 1:\n        return False\n    sum_divisors = 1\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                sum_divisors += i\n            else:\n                sum_divisors += i + n \/\/ i\n    return sum_divisors > n\n```"
    },
    {
        "id":342,
        "response":"```python\nimport re\n\ndef fill_spaces(s):\n    s = re.sub(r'(\\s+|,|\\.)', ' ', s)\n    return re.sub(r'\\s+', ' ', s).strip()\n```"
    },
    {
        "id":343,
        "response":"```python\nfrom typing import Tuple\n\ndef count_digits(n: int, n2: int) -> int:\n    return len(str(n + n2))\n```"
    },
    {
        "id":344,
        "response":"```python\nfrom typing import List, Tuple\n\ndef flatten_tuple(lst: List[Tuple]) -> List:\n    return [item for sublist in lst for item in sublist]\n```"
    },
    {
        "id":345,
        "response":"```python\nfrom typing import Union\n\ndef toggle_F_and_L_bits(n: int) -> int:\n    return (n ^ 0x0000000F) ^ 0x0000000F\n```"
    },
    {
        "id":346,
        "response":"```python\nfrom collections import deque\n\ndef last_occurence_char(s, s2):\n    dq = deque(s)\n    dq.appendleft(s2)\n    while dq[0] != s2:\n        dq.popleft()\n    return dq[0]\n```"
    },
    {
        "id":347,
        "response":"```python\nfrom functools import reduce\n\ndef Total_Hamming_Distance(n):\n    def hamming_distance(x, y):\n        return sum(abs(a - b) for a, b in zip(str(x), str(y)))\n\n    return reduce(hamming_distance, range(n + 1), 0)\n```"
    },
    {
        "id":348,
        "response":"```python\nfrom typing import List\n\ndef longest_increasing_subsequence(lst: List[int]) -> int:\n    if not lst:\n        return 0\n    dp = [1] * len(lst)\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```"
    },
    {
        "id":349,
        "response":"```python\nimport math\n\ndef odd_Num_Sum(n):\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            total += math.pow(i, 5)\n    return total\n```"
    },
    {
        "id":350,
        "response":"```python\nimport math\n\ndef find_max(lst, n, n2):\n    if len(lst) != n:\n        raise ValueError(\"\u09a4\u09be\u09b2\u09bf\u0995\u09be\u09b0 \u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af \u0985\u09ac\u09b6\u09cd\u09af\u0987 \u09aa\u09cd\u09b0\u09a6\u09a4\u09cd\u09a4 \u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af\u09c7\u09b0 \u09b8\u09ae\u09be\u09a8 \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    if n2 <= 0 or n2 > n:\n        raise ValueError(\"\u0998\u09c2\u09b0\u09cd\u09a3\u09a8\u09c7\u09b0 \u09b8\u0982\u0996\u09cd\u09af\u09be \u0985\u09ac\u09b6\u09cd\u09af\u0987 \u09a7\u09a8\u09be\u09a4\u09cd\u09ae\u0995 \u098f\u09ac\u0982 \u09a4\u09be\u09b2\u09bf\u0995\u09be\u09b0 \u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af\u09c7\u09b0 \u099a\u09c7\u09af\u09bc\u09c7 \u0995\u09ae \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    \n    max_val = float('-inf')\n    for i in range(n):\n        for j in range(i, n, n2):\n            for k in range(j, j + n2):\n                if lst[k] > max_val:\n                    max_val = lst[k]\n                    \n    return max_val\n```"
    },
    {
        "id":351,
        "response":"```python\nfrom typing import List, Any\n\ndef extract_column(lst: List[Any], n: int) -> List[Any]:\n    return [sublist[n] for sublist in lst if len(sublist) > n]\n```"
    },
    {
        "id":352,
        "response":"```python\nimport math\nfrom typing import List\n\ndef Seq_Linear(lst: List[float]) -> bool:\n    if len(lst) < 2:\n        return True\n    diff = [lst[i] - lst[i - 1] for i in range(1, len(lst))]\n    return all(math.isclose(x, diff[0]) for x in diff)\n\n# Test cases\nprint(Seq_Linear([1, 2, 3, 4, 5]))  # True\nprint(Seq_Linear([1, 3, 5, 7, 9]))  # True\nprint(Seq_Linear([1, 2, 4, 5, 7]))  # False\n```"
    },
    {
        "id":353,
        "response":"```python\nfrom typing import Tuple\n\ndef tuple_to_float(tup: Tuple[float]) -> float:\n    return float(tup[0])\n```"
    },
    {
        "id":354,
        "response":"```python\nfrom typing import List\n\ndef split(lst: List[int]) -> List[int]:\n    def is_odd(num: int) -> bool:\n        return num % 2 != 0\n\n    return [num for num in lst if is_odd(num)]\n\n# \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n```"
    },
    {
        "id":355,
        "response":"```python\nimport math\n\ndef difference(n):\n    sum_cubes = sum(math.pow(i, 3) for i in range(1, n + 1))\n    sum_numbers = sum(range(1, n + 1))\n    return sum_cubes - sum_numbers\n```"
    },
    {
        "id":356,
        "response":"```python\nfrom typing import List\n\ndef find_Odd_Pair(lst: List[int], n: int) -> List[List[int]]:\n    odd_pairs = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] ^ lst[j] == n:\n                odd_pairs.append([lst[i], lst[j]])\n    return odd_pairs\n\ndef find_Odd_PairAlternative(lst: List[int], n: int) -> List[List[int]]:\n    odd_pairs = [x for i, x in enumerate(lst) for y in lst[i + 1:] if x ^ y == n]\n    return odd_pairs\n```"
    },
    {
        "id":357,
        "response":"```python\nfrom typing import List\n\ndef toggle_string(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char.upper())\n        else:\n            result.append(char)\n    return ''.join(result)\n```"
    },
    {
        "id":358,
        "response":"```python\nimport math\n\ndef digit_distance_nums(n, n2):\n    return math.sqrt((n - n2)**2)\n```"
    },
    {
        "id":359,
        "response":"```python\nfrom itertools import accumulate\n\ndef max_sub_array_sum(lst, n):\n    sub_sums = list(accumulate(lst))\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            current_sum = sub_sums[j] - sub_sums[i-1] if i > 0 else sub_sums[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n```"
    },
    {
        "id":360,
        "response":"```python\nfrom typing import Tuple\n\ndef union_elements(tup: Tuple, tup2: Tuple) -> Tuple:\n    return (*tup, *tup2)\n```"
    },
    {
        "id":361,
        "response":"```python\nfrom typing import List, Tuple\n\ndef assign_elements(lst: List[Tuple[int, int]]) -> List[List[int]]:\n    if not lst:\n        return []\n\n    lst.sort()\n    result = [[lst[0][0], lst[0][1]]]\n    remaining = [lst[1]]\n\n    for i in range(1, len(lst)):\n        if lst[i][0] == lst[i-1][1]:\n            result[-1].append(lst[i][1])\n            remaining.append(lst[i+1])\n        else:\n            result.append([lst[i][0], lst[i][1]])\n            remaining = [lst[i+1]]\n\n    for elem in remaining:\n        result[-1].append(elem[1])\n        remaining = [elem[0]]\n\n    return result\n```"
    },
    {
        "id":362,
        "response":"```python\nfrom typing import List\n\ndef Find_Max_Length(lst: List) -> int:\n    return max(len(item) for item in lst) if lst else 0\n```"
    },
    {
        "id":363,
        "response":"```python\nfrom re import findall\n\ndef extract_values(s):\n    return findall(r'\\d+', s)\n```"
    },
    {
        "id":364,
        "response":"```python\nfrom collections import Counter\n\ndef count_Pairs(lst, n):\n    counter = Counter(lst)\n    return sum((v - 1) * v \/\/ 2 for v in counter.values() if v >= n)\n```"
    },
    {
        "id":365,
        "response":"```python\nfrom collections import namedtuple\n\nSplit = namedtuple('Split', 'words')\n\ndef split(s):\n    return Split(*s.split())\n```"
    },
    {
        "id":366,
        "response":"```python\nfrom typing import List\n\ndef sum_digits(n: int) -> int:\n    digits: List[int] = [int(d) for d in str(abs(n))]\n    return sum(digits)\n```"
    },
    {
        "id":367,
        "response":"```python\nimport random\n\ndef issort_list(lst):\n    return lst == sorted(lst)\n```"
    },
    {
        "id":368,
        "response":"```python\nfrom typing import List\n\ndef empty_list(n: int) -> List[str]:\n    return [''] * n\n```"
    },
    {
        "id":369,
        "response":"```python\nfrom typing import List, Any\n\ndef sort_sublists(lst: List[Any]) -> List[List[Any]]:\n    return sorted(lst, key=lambda x: len(x))\n```"
    },
    {
        "id":370,
        "response":"```python\nfrom typing import List, Union\n\ndef remove_words(lst: List[Union[str, str]], lst2: List[Union[str, str]]) -> List[Union[str, str]]:\n    return [word for word in lst if word not in lst2]\n\n# \u0989\u09a6\u09be\u09b9\u09b0\u09a3 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0:\nwords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nwords_to_remove = [\"banana\", \"date\"]\nprint(remove_words(words, words_to_remove))  # Output: ['apple', 'cherry', 'elderberry']\n```"
    },
    {
        "id":371,
        "response":"```python\nfrom typing import List\n\ndef max_sum_pair_diff_lessthan_K(lst: List[int], n: int, k: int) -> int:\n    lst.sort(reverse=True)\n    i = 0\n    j = n - 1\n    max_sum = 0\n    while i < j:\n        if lst[i] + lst[j] <= k:\n            max_sum = max(max_sum, lst[i] + lst[j])\n            i += 1\n        j -= 1\n    return max_sum\n```"
    },
    {
        "id":372,
        "response":"```python\nfrom typing import List\n\ndef two_unique_nums(lst: List[int]) -> List[int]:\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return [num for num, freq in count.items() for _ in range(freq - 1) if freq > 1]\n```"
    },
    {
        "id":373,
        "response":"```python\nfrom functools import reduce\n\ndef unique_product(lst):\n    return reduce(lambda x, y: x * y, set(lst))\n```"
    },
    {
        "id":374,
        "response":"```python\nimport math\n\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)\n```"
    },
    {
        "id":375,
        "response":"```python\nfrom typing import List\n\ndef count_no(*numbers: List[int]) -> int:\n    if len(numbers) != 4:\n        raise ValueError(\"\u0985\u09b0\u09cd\u09a1\u09be\u09b0 \u0995\u09b0\u09be \u09b8\u0982\u0996\u09cd\u09af\u09be\u09b0 \u09b8\u0982\u0996\u09cd\u09af\u09be \u0985\u09ac\u09b6\u09cd\u09af\u0987 4 \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    \n    n1, n2, n3, n4 = numbers\n    if not all(isinstance(x, int) for x in numbers):\n        raise ValueError(\"\u0985\u09b0\u09cd\u09a1\u09be\u09b0 \u0995\u09b0\u09be \u09b8\u0982\u0996\u09cd\u09af\u09be\u0997\u09c1\u09b2\u09bf \u0985\u09ac\u09b6\u09cd\u09af\u0987 \u09aa\u09c2\u09b0\u09cd\u09a3\u09b8\u0982\u0996\u09cd\u09af\u09be \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    \n    if n1 > n4:\n        n1, n4 = n4, n1\n    \n    if n2 > n4:\n        n2, n4 = n4, n2\n    \n    if n3 > n4:\n        n3, n4 = n4, n3\n    \n    return n4\n\n# \u0989\u09a6\u09be\u09b9\u09b0\u09a3 \u09b9\u09bf\u09b8\u09be\u09ac\u09c7:\nprint(count_no(1, 2, 3, 4))  # 4\n```"
    },
    {
        "id":376,
        "response":"```python\nfrom typing import List\n\ndef is_Sub_Array(lst: List, lst2: List, n: int, n2: int) -> bool:\n    if n2 > len(lst):\n        return False\n    for i in range(len(lst) - n2 + 1):\n        if lst[i:i+n2] == lst2:\n            return True\n    return False\n```"
    },
    {
        "id":377,
        "response":"```python\nimport math\n\ndef last_Digit_Factorial(n):\n    return (math.factorial(n)) % 10\n```"
    },
    {
        "id":378,
        "response":"```python\nfrom typing import List\n\ndef interleave_lists(lst: List, lst2: List, lst3: List) -> List:\n    result = []\n    while len(lst) > 0 and len(lst2) > 0 and len(lst3) > 0:\n        result.append(lst.pop(0))\n        result.append(lst2.pop(0))\n        result.append(lst3.pop(0))\n    result.extend(lst)\n    result.extend(lst2)\n    result.extend(lst3)\n    return result\n```"
    },
    {
        "id":379,
        "response":"```python\nfrom typing import Tuple\n\ndef find_dissimilar(tup: Tuple, tup2: Tuple) -> Tuple[Tuple, Tuple]:\n    if len(tup) != len(tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    dissimilar = []\n    for i in range(len(tup)):\n        if tup[i] != tup2[i]:\n            dissimilar.append((tup[i], tup2[i]))\n\n    return dissimilar\n```"
    },
    {
        "id":380,
        "response":"```python\nfrom typing import Tuple, Iterable\n\ndef extract_even(tup: Tuple[Tuple[int], ...]) -> Iterable[int]:\n    return (item for pair in tup for item in pair if item % 2 == 0)\n```"
    },
    {
        "id":381,
        "response":"```python\nimport math\n\ndef surface_Area(n, n2):\n    if n <= 0 or n2 <= 0:\n        raise ValueError(\"\u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af \u098f\u09ac\u0982 \u09aa\u09cd\u09b0\u09b8\u09cd\u09a5 \u0985\u09ac\u09b6\u09cd\u09af\u0987 \u09a7\u09a8\u09be\u09a4\u09cd\u09ae\u0995 \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    return n * n2 + (n * n2 * math.sqrt(2)) \/ 2\n```"
    },
    {
        "id":382,
        "response":"```python\nfrom collections import Counter\n\ndef my_dict(dct):\n    return bool(Counter(dct).values())\n```"
    },
    {
        "id":383,
        "response":"```python\nfrom math import factorial\n\ndef catalan_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n > 32:\n        raise ValueError(\"n cannot be greater than 32\")\n    catalan = [0 for _ in range(n + 1)]\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]\n```"
    },
    {
        "id":384,
        "response":"```python\nimport re\n\ndef find_adverbs(s):\n    adverbs = re.findall(r'\\b(\u0985\u09ad\u09bf\u09ac\u09cd\u09af\u0995\u09cd\u09a4\u09bf|\u0989\u09aa\u09ac\u09be\u099a\u0995|\u0989\u09aa\u09ac\u09be\u099a\u0995\u09ac\u09be\u099a\u0995)\\b', s)\n    return adverbs\n\ndef find_adverb_pos(s):\n    adverbs = re.findall(r'\\b(\u0985\u09ad\u09bf\u09ac\u09cd\u09af\u0995\u09cd\u09a4\u09bf|\u0989\u09aa\u09ac\u09be\u099a\u0995|\u0989\u09aa\u09ac\u09be\u099a\u0995\u09ac\u09be\u099a\u0995)\\b(?=\\s\\w)', s)\n    return adverbs\n\ndef find_adverb_pos_with_index(s):\n    adverbs = re.findall(r'\\b(\u0985\u09ad\u09bf\u09ac\u09cd\u09af\u0995\u09cd\u09a4\u09bf|\u0989\u09aa\u09ac\u09be\u099a\u0995|\u0989\u09aa\u09ac\u09be\u099a\u0995\u09ac\u09be\u099a\u0995)\\b(?=\\s\\w)', s)\n    return [(m.start(), m.group()) for m in adverbs]\n\ndef find_adverb_pos_with_word(s):\n    adverbs = re.findall(r'\\b(\u0985\u09ad\u09bf\u09ac\u09cd\u09af\u0995\u09cd\u09a4\u09bf|\u0989\u09aa\u09ac\u09be\u099a\u0995|\u0989\u09aa\u09ac\u09be\u099a\u0995\u09ac\u09be\u099a\u0995)\\b', s)\n    return [(m, s[m:m+10]) for m in adverbs]\n\ndef find_adverb_pos_with_word_and_index(s):\n    adverbs = re.findall(r'\\b(\u0985\u09ad\u09bf\u09ac\u09cd\u09af\u0995\u09cd\u09a4\u09bf|\u0989\u09aa\u09ac\u09be\u099a\u0995|\u0989\u09aa\u09ac\u09be\u099a\u0995\u09ac\u09be\u099a\u0995)\\b', s)\n    return [(m, s[m:m+10], m) for m in adverbs]\n```"
    },
    {
        "id":385,
        "response":"```python\nfrom typing import List\n\ndef expensive_items(lst: List[int], n: int) -> List[int]:\n    return sorted([item for item in lst if item >= n])\n\ndef expensive_items_alt(lst: List[int], n: int) -> List[int]:\n    return [item for item in lst if item >= n]\n\ndef expensive_items_set(lst: List[int], n: int) -> set:\n    return set(item for item in lst if item >= n)\n\ndef expensive_items_dict(lst: List[int], n: int) -> dict:\n    return {item: lst.count(item) for item in lst if item >= n}\n```"
    },
    {
        "id":386,
        "response":"```python\nfrom typing import List\n\ndef split_Arr(lst: List[int], n: int, n2: int) -> List[List[int]]:\n    return [lst[:n], lst[n:n2]]\n\n# \u0989\u09a6\u09be\u09b9\u09b0\u09a3 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0\nprint(split_Arr([1, 2, 3, 4, 5, 6], 3, 4))\n```"
    },
    {
        "id":387,
        "response":"```python\nfrom typing import List, Tuple\n\ndef list_tuple(lst: List) -> Tuple:\n    return tuple(lst)\n```"
    },
    {
        "id":388,
        "response":"```python\nfrom typing import List\n\ndef big_diff(lst: List[int]) -> int:\n    if len(lst) < 2:\n        return 0\n    return max(lst) - min(lst)\n```"
    },
    {
        "id":389,
        "response":"```python\nimport math\n\ndef perfect_squares(n, n2):\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        sqrt = math.sqrt(num)\n        return sqrt == int(sqrt)\n\n    for i in range(math.ceil(math.sqrt(n)), math.floor(math.sqrt(n2)) + 1):\n        if is_perfect_square(i * i):\n            return i * i\n    return None\n```"
    },
    {
        "id":390,
        "response":"```python\nfrom typing import Tuple\n\ndef polar_rect(r: float, theta: float) -> Tuple[float, float]:\n    x = r * (1 - theta * 2)\n    y = r * (1 + theta * 2)\n    return x, y\n```"
    },
    {
        "id":391,
        "response":"```python\nfrom typing import List\n\ndef swap_list(lst: List) -> List:\n    if len(lst) < 2:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":392,
        "response":"```python\nfrom math import comb\n\ndef sum_Of_product(n):\n    total = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            total += comb(n, i) * comb(n, j)\n    return total\n```"
    },
    {
        "id":393,
        "response":"```python\nfrom typing import List\n\ndef removezero_ip(s: str) -> str:\n    parts = s.split('.')\n    parts = [part for part in parts if part != '0']\n    return '.'.join(parts)\n```"
    },
    {
        "id":394,
        "response":"```python\nfrom typing import List\n\ndef diff_even_odd(lst: List[int]) -> int:\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return abs(even_sum - odd_sum)\n```"
    },
    {
        "id":395,
        "response":"```python\nfrom collections import Counter\n\ndef min_Swaps(s, s2):\n    m, n = len(s), len(s2)\n    if m != n:\n        return -1\n\n    s_count = Counter(s)\n    s2_count = Counter(s2)\n\n    swaps = 0\n    for c in '0123456789':\n        swaps += abs(s_count[c] - s2_count[c])\n\n    return min(swaps, (m + n) \/\/ 2)\n```"
    },
    {
        "id":396,
        "response":"```python\nimport sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)\n```"
    },
    {
        "id":397,
        "response":"```python\nfrom typing import List, Tuple\n\ndef find_kth(lst: List[int], lst2: List[int], n: int, n2: int, n3: int) -> int:\n    return lst[n] + lst2[n2] + lst3[n3]\n```"
    },
    {
        "id":398,
        "response":"```python\nimport math\n\ndef armstrong_number(n):\n    s = str(n)\n    return n == sum(int(i) ** len(s) for i in s)\n\n# Test the function\nprint(armstrong_number(371))  # True\nprint(armstrong_number(123))  # False\n```"
    },
    {
        "id":399,
        "response":"```python\nfrom typing import List\n\ndef sum_average(n: int) -> tuple:\n    total = sum(range(1, n + 1))\n    average = total \/ n\n    return total, average\n```"
    },
    {
        "id":400,
        "response":"```python\nfrom typing import Union\n\ndef is_Even(n: Union[int, float]) -> bool:\n    return n % 2 == 0\n```"
    }
]