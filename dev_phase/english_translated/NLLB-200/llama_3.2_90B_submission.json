[
    {
        "id":1,
        "response":"```python\nimport sys\nfrom typing import List\n\ndef max_chain_length(lst: List[int], n: int) -> int:\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i][0] > lst[j][1] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n```"
    },
    {
        "id":2,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef first_repeated_char(s: typing.Optional[str]) -> typing.Optional[str]:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None\n```"
    },
    {
        "id":3,
        "response":"```python\nimport math\n\ndef get_ludic(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b \/\/ gcd(a, b)\n\n    result = 1\n    for i in range(1, n + 1):\n        result = lcm(result, i)\n    return result\n```"
    },
    {
        "id":4,
        "response":"```python\nimport re\nfrom typing import List\n\ndef reverse_words(s: str) -> str:\n    words = re.split('\\s+', s)\n    words = words[::-1]\n    return ' '.join(words)\n```"
    },
    {
        "id":5,
        "response":"```python\nimport math\n\ndef prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n```"
    },
    {
        "id":6,
        "response":"```python\nimport math\n\ndef radian_degree(n):\n    return math.radians(n)\n```"
    },
    {
        "id":7,
        "response":"```python\nimport re\n\ndef find_literals(s: str, s2: str) -> tuple:\n    pattern = re.escape(s2)\n    match = re.search(pattern, s)\n    if match:\n        return (match.start(), match.end())\n    else:\n        return (-1, -1)\n```"
    },
    {
        "id":8,
        "response":"```python\nimport math\n\ndef bell_Number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n```"
    },
    {
        "id":9,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef floor_Min(n, n2, n3):\n    return min(n, n2, n3)\n```"
    },
    {
        "id":10,
        "response":"```python\nimport typing\n\ndef remove_kth_element(lst: typing.List[typing.Any], n: int) -> typing.List[typing.Any]:\n    if n < 1 or n > len(lst):\n        return lst\n    return lst[:n-1] + lst[n:]\n```"
    },
    {
        "id":11,
        "response":"```python\nfrom typing import List, Tuple\n\ndef max_of_nth(lst: List[Tuple[int]], n: int) -> int:\n    return max(tpl[n - 1] for tpl in lst)\n```"
    },
    {
        "id":12,
        "response":"```python\nfrom typing import List\n\ndef merge(lst: List[List[int]]) -> List[int]:\n    first_elements = [sublist[0] for sublist in lst if sublist]\n    last_elements = [sublist[-1] for sublist in lst if sublist]\n    return first_elements + last_elements\n```"
    },
    {
        "id":13,
        "response":"```python\nimport typing\nimport itertools\n\ndef maximum_value(lst: typing.List[typing.Tuple]) -> typing.Any:\n    if not lst:\n        return None\n    return max(max(sublist) for sublist in zip(*lst))\n```"
    },
    {
        "id":14,
        "response":"```python\nimport typing\n\ndef cummulative_sum(lst: typing.Tuple) -> typing.List:\n    return [sum(lst[:i+1]) for i in range(len(lst))]\n```"
    },
    {
        "id":15,
        "response":"```python\nimport statistics\nimport typing\n\ndef average_tuple(tup: typing.Tuple[int, ...]) -> float:\n    return statistics.mean(tup)\n```"
    },
    {
        "id":16,
        "response":"```python\nfrom typing import Tuple\nimport itertools\n\ndef tuple_modulo(tup: Tuple[int, ...], tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(map(lambda x, y: x % y, itertools.zip_longest(tup, tup2, fillvalue=1)))\n```"
    },
    {
        "id":17,
        "response":"```python\nimport math\n\ndef min_Jumps(n, n2, n3):\n    jumps = 0\n    remaining = n2\n    while remaining > 0:\n        remaining -= n3\n        jumps += 1\n    return jumps\n```"
    },
    {
        "id":18,
        "response":"```python\nfrom typing import List\n\ndef div_list(lst: List[int], lst2: List[int]) -> List[float]:\n    return list(map(lambda x, y: x \/ y if y != 0 else float('inf'), lst, lst2))\n```"
    },
    {
        "id":19,
        "response":"```python\nimport re\n\ndef move_num(s: str) -> str:\n    nums = re.findall('\\d', s)\n    return s + ' '.join(nums)\n```"
    },
    {
        "id":20,
        "response":"```python\nimport typing\nimport itertools\n\ndef largest_subset(lst: typing.List[int], n: int) -> typing.List[int]:\n    subsets = []\n    for r in range(len(lst) + 1):\n        subsets.extend(itertools.combinations(lst, r))\n    valid_subsets = [subset for subset in subsets if all(i % n == 0 for i in subset)]\n    return max(valid_subsets, key=len, default=())\n```"
    },
    {
        "id":21,
        "response":"```python\nimport re\nimport typing\n\ndef increment_numerics(lst: typing.List[str], n: int) -> typing.List[str]:\n    return [re.sub(r'\\d+', lambda x: str(int(x.group()) + n), s) for s in lst]\n```"
    },
    {
        "id":22,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef get_median(lst1: List[int], lst2: List[int], n: int) -> float:\n    merged = list(heapq.merge(lst1, lst2))\n    if n % 2 == 0:\n        return (merged[n \/\/ 2 - 1] + merged[n \/\/ 2]) \/ 2\n    else:\n        return merged[n \/\/ 2]\n```"
    },
    {
        "id":23,
        "response":"```python\nimport math\nfrom typing import List\n\ndef nth_nums(lst: List[int], n: int) -> List[int]:\n    return list(map(lambda x: x ** n, set(lst)))\n```"
    },
    {
        "id":24,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_upper(s: str) -> str:\n    return s.upper()\n```"
    },
    {
        "id":25,
        "response":"```python\nimport typing\n\ndef swap_List(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":26,
        "response":"```python\nimport math\n\ndef triangle_area(n):\n    r = n\n    h = math.sqrt(r**2 - (r\/2)**2)\n    area = 0.5 * r * h\n    return area\n```"
    },
    {
        "id":27,
        "response":"```python\nimport sys\nimport math\nfrom typing import List\nimport itertools\n\ndef find_First_Missing(lst: List[int], n: int, n2: int) -> int:\n    lst.sort()\n    for i in range(n):\n        if i + 1 != lst[i]:\n            return i + 1\n    return n + 1\n```"
    },
    {
        "id":28,
        "response":"```python\nimport re\nimport typing\n\ndef replace_spaces(s: str) -> str:\n    return re.sub(r' ', '*%20*', s)\n```"
    },
    {
        "id":29,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef Split(lst: typing.List[typing.Union[int, str, float]]) -> typing.List[int]:\n    return [i for i in lst if isinstance(i, int) and i % 2 == 0]\n```"
    },
    {
        "id":30,
        "response":"```python\nimport typing\nimport itertools\n\ndef get_coordinates(tup: typing.Tuple[int, int]) -> typing.List[typing.Tuple[int, int]]:\n    x, y = tup\n    coordinates = []\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        coordinates.append((x + dx, y + dy))\n    return coordinates\n```"
    },
    {
        "id":31,
        "response":"```python\nimport re\n\ndef replace_spaces(s: str) -> str:\n    return re.sub(r'\\s', '_', s)\n\ndef reverse_replace_spaces(s: str) -> str:\n    return re.sub(r'_', ' ', s)\n```"
    },
    {
        "id":32,
        "response":"```python\nimport typing\n\ndef move_zero(lst: typing.List[int]) -> typing.List[int]:\n    return [i for i in lst if i != 0] + [0] * lst.count(0)\n```"
    },
    {
        "id":33,
        "response":"```python\nimport typing\nimport itertools\n\ndef pair_OR_Sum(lst: typing.List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += lst[i] ^ lst[j]\n    return xor_sum\n```"
    },
    {
        "id":34,
        "response":"```python\nimport math\n\ndef even_Power_Sum(n):\n    return sum(i ** 4 for i in range(2, n + 1, 2))\n```"
    },
    {
        "id":35,
        "response":"```python\nimport heapq\n\ndef heap_sort(lst):\n    heapq.heapify(lst)\n    while lst:\n        yield heapq.heappop(lst)\n```"
    },
    {
        "id":36,
        "response":"```python\nimport cmath\nimport math\nimport re\nimport typing\nimport itertools\n\ndef Check_Solution(n, n2, n3):\n    a, b, c, d = n, n2, n3, 0\n    D = (b**2 - 4*a*c)\n    sol1 = (-b-cmath.sqrt(D))\/(2*a)\n    sol2 = (-b+cmath.sqrt(D))\/(2*a)\n    return sol1 == sol1.conjugate() and sol2 == sol2.conjugate()\n```"
    },
    {
        "id":37,
        "response":"```python\nimport typing\n\ndef noprofit_noloss(n: int, n2: int) -> bool:\n    return n == n2\n```"
    },
    {
        "id":38,
        "response":"```python\nimport math\n\ndef wind_chill(temp, wind_speed):\n    if temp > 50 or wind_speed < 3:\n        return temp\n    wind_chill_index = 35.74 + 0.6215 * temp - 35.75 * math.pow(wind_speed, 0.16) + 0.4275 * temp * math.pow(wind_speed, 0.16)\n    return wind_chill_index\n```"
    },
    {
        "id":39,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef sample_nam(lst: typing.List[str]) -> int:\n    total_length = 0\n    for name in lst:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length\n```"
    },
    {
        "id":40,
        "response":"```python\nimport re\nfrom typing import List\n\ndef remove_parenthesis(lst: List[str]) -> List[str]:\n    result = []\n    for s in lst:\n        result.append(re.sub(r'\\([^)]*\\)', '', s))\n    return result\n```"
    },
    {
        "id":41,
        "response":"```python\nimport math\n\ndef is_nonagonal(n):\n    x = (n + (n * 8) ** 0.5) \/ 9\n    return x == int(x)\n```"
    },
    {
        "id":42,
        "response":"```python\nfrom typing import List, Tuple\n\ndef remove_similar_row(lst: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int]]:\n    result = []\n    for row in lst:\n        if row not in result:\n            result.append(row)\n    return result\n```"
    },
    {
        "id":43,
        "response":"```python\nimport re\n\ndef text_match_wordz_middle(s):\n    return re.findall(r'\\b\\w*z\\w*\\b', s)\n```"
    },
    {
        "id":44,
        "response":"```python\nimport typing\nimport itertools\n\ndef reverse_Array_Upto_K(lst: typing.List[int], n: int) -> typing.List[int]:\n    left = lst[:n]\n    right = lst[n:]\n    return left[::-1] + right\n```"
    },
    {
        "id":45,
        "response":"```python\nimport math\nfrom typing import List, Tuple\n\ndef find_k_product(lst: List[Tuple[int, ...]], n: int) -> int:\n    product = 1\n    for tup in lst:\n        product *= tup[n]\n    return product\n```"
    },
    {
        "id":46,
        "response":"```python\nimport math\n\ndef No_of_cubes(n, k):\n    return math.floor(n \/ k) ** 3\n```"
    },
    {
        "id":47,
        "response":"```python\nimport re\nimport typing\n\ndef split_upperstring(s: str) -> typing.List[str]:\n    return re.sub('([A-Z])', r' \\1', s).split()\n```"
    },
    {
        "id":48,
        "response":"```python\nimport typing\n\ndef exchange_elements(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n```"
    },
    {
        "id":49,
        "response":"```python\nimport typing\n\ndef sum_Range_list(lst: typing.List[int], n: int, n2: int) -> int:\n    return sum(lst[n:n2+1])\n```"
    },
    {
        "id":50,
        "response":"```python\nimport typing\n\ndef are_Equal(lst: typing.List[int], lst2: typing.List[int], n: int, n2: int) -> bool:\n    if n != n2:\n        return False\n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return False\n    return True\n```"
    },
    {
        "id":51,
        "response":"```python\nimport typing\n\ndef check_subset(tup: typing.Tuple, tup2: typing.Tuple) -> bool:\n    return set(tup).issubset(set(tup2))\n```"
    },
    {
        "id":52,
        "response":"```python\nimport itertools\nimport typing\n\ndef matrix_to_list(lst: typing.List[typing.List[typing.Tuple[int, int, int]]]) -> typing.List[typing.Tuple[int, int, int]]:\n    return list(itertools.chain(*lst))\n```"
    },
    {
        "id":53,
        "response":"```python\nimport collections\nfrom typing import List, Dict, Any\n\ndef grouping_dictionary(lst: List[Any]) -> Dict[Any, List[Any]]:\n    result = collections.defaultdict(list)\n    for key, value in lst:\n        result[key].append(value)\n    return dict(result)\n```"
    },
    {
        "id":54,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef rectangle_perimeter(n, n2):\n    return 2 * (n + n2)\n```"
    },
    {
        "id":55,
        "response":"```python\nimport math\n\ndef fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))\n```"
    },
    {
        "id":56,
        "response":"```python\nimport sys\nimport math\nimport itertools\n\ndef find_Min_Sum(lst, lst2, n):\n    lst.sort()\n    lst2.sort()\n    sum = 0\n    for i in range(n):\n        sum += abs(lst[i] - lst2[i])\n    return sum\n```"
    },
    {
        "id":57,
        "response":"```python\nimport math\n\ndef first_Digit(n):\n    return int(str(math.factorial(n))[0])\n```"
    },
    {
        "id":58,
        "response":"```python\nfrom typing import List, Any\nfrom collections import Counter\n\ndef max_occurrences(lst: List[Any]) -> Any:\n    if not lst:\n        return None\n    counter = Counter(lst)\n    max_count = max(counter.values())\n    max_items = [item for item, count in counter.items() if count == max_count]\n    return max_items[0]\n```"
    },
    {
        "id":59,
        "response":"```python\nimport typing\nimport itertools\n\ndef Repeat(lst: typing.List[int]) -> None:\n    for i in lst:\n        if lst.count(i) > 1:\n            print(i)\n            break\n```"
    },
    {
        "id":60,
        "response":""
    },
    {
        "id":61,
        "response":"```python\nimport sys\nimport itertools\n\ndef max_sum_of_three_consecutive(lst, n):\n    if n < 3:\n        return -sys.maxsize\n    max_sum = float('-inf')\n    for i in range(n - 2):\n        if lst[i] + lst[i + 1] + lst[i + 2] > max_sum and lst[i] != lst[i + 1] and lst[i + 1] != lst[i + 2]:\n            max_sum = lst[i] + lst[i + 1] + lst[i + 2]\n    return max_sum\n```"
    },
    {
        "id":62,
        "response":"```python\nimport operator\nfrom typing import Dict, List, Any\n\ndef sorted_dict(dct: Dict[str, List[Any]]) -> Dict[str, List[Any]]:\n    return {k: sorted(v) for k, v in dct.items()}\n```"
    },
    {
        "id":63,
        "response":"```python\nimport math\n\ndef find_max_val(x: int, y: int) -> int:\n    return x + y - 1 if x > y else y\n```"
    },
    {
        "id":64,
        "response":"```python\nimport math\n\ndef average_Even(n):\n    even_numbers = [i for i in range(2, n+1, 2)]\n    return sum(even_numbers) \/ len(even_numbers)\n```"
    },
    {
        "id":65,
        "response":"```python\nimport typing\nfrom typing import List\n\ndef move_last(lst: List[int]) -> List[int]:\n    if len(lst) > 1:\n        return lst[1:] + lst[:1]\n    return lst\n```"
    },
    {
        "id":66,
        "response":"```python\nimport re\nfrom typing import Dict\nfrom collections import Counter\n\ndef count_char(s: str, s2: str) -> Dict[str, int]:\n    s = s.lower()\n    s2 = s2.lower()\n    counter = Counter(s)\n    result = {char: counter[char] for char in s2 if char in counter}\n    return result\n```"
    },
    {
        "id":67,
        "response":"```python\nimport re\nimport typing\n\ndef Check_Vow(s: str, s2: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s2 if char in vowels)\n```"
    },
    {
        "id":68,
        "response":"```python\nimport re\nfrom typing import List, Tuple\n\ndef replace(s: str, s2: str) -> str:\n    for char in s2:\n        s = re.sub(char + '+', char, s)\n    return s\n```"
    },
    {
        "id":69,
        "response":"```python\nimport re\n\ndef check_IP(s):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":70,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef decreasing_trend(lst: typing.List[int]) -> bool:\n    for i in range(len(lst) - 1):\n        if lst[i] <= lst[i + 1]:\n            return False\n    return True\n```"
    },
    {
        "id":71,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef set_Right_most_Unset_Bit(n: int) -> int:\n    if n == 0:\n        return 1\n    rightmost_unset_bit = n & -n\n    return n | rightmost_unset_bit\n```"
    },
    {
        "id":72,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef max_of_three(n: int, n2: int, n3: int) -> int:\n    return max(n, n2, n3)\n```"
    },
    {
        "id":73,
        "response":"```python\nimport functools\nimport operator\n\ndef convert(lst):\n    return functools.reduce(operator.add, [int(i) for i in lst])\n```"
    },
    {
        "id":74,
        "response":"```python\nimport re\nfrom typing import List\n\ndef remove_duplicate(s: str) -> str:\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    unique_words = []\n    for word in words:\n        if word not in unique_words:\n            unique_words.append(word)\n    return ' '.join(unique_words)\n```"
    },
    {
        "id":75,
        "response":"```python\nimport typing\n\ndef sum_nums(n: int, n2: int, n3: int, n4: int) -> int:\n    if n3 <= n + n2 <= n4:\n        return 20\n    else:\n        return n + n2\n```"
    },
    {
        "id":76,
        "response":"```python\nimport re\n\ndef remove_extra_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)\n```"
    },
    {
        "id":77,
        "response":"```python\nimport math\n\ndef validity_triangle(n, n2, n3):\n    if n + n2 > n3 and n + n3 > n2 and n2 + n3 > n:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":78,
        "response":"```python\nimport re\nimport typing\n\ndef remove_spaces(s: str) -> str:\n    return re.sub(r'\\s+', '', s)\n```"
    },
    {
        "id":79,
        "response":"```python\nimport typing\n\ndef access_key(dct: typing.Dict, n: int):\n    keys = list(dct.keys())\n    return keys[n]\n```"
    },
    {
        "id":80,
        "response":"```python\nimport typing\n\ndef increasing_trend(lst: typing.List[int]) -> bool:\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n```"
    },
    {
        "id":81,
        "response":"```python\nimport math\n\ndef smallest_Divisor(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n```"
    },
    {
        "id":82,
        "response":"```python\nimport itertools\nimport typing\nimport re\nfrom functools import reduce\n\ndef mul_list(lst: typing.List[int], lst2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x[0] * x[1], zip(lst, lst2)))\n```"
    },
    {
        "id":83,
        "response":"```python\nimport math\n\ndef sum_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        a = n - i * i\n        b = int(math.sqrt(a))\n        if b * b == a:\n            return True\n    return False\n```"
    },
    {
        "id":84,
        "response":"```python\nimport re\nfrom typing import Dict\nfrom collections import defaultdict\n\ndef count_Char(s: str, s2: str) -> Dict[str, int]:\n    s = s * (len(s2) \/\/ len(s)) + s[:len(s2) % len(s)]\n    char_count = defaultdict(int)\n    for char in s2:\n        char_count[char] += 1\n    return dict(char_count)\n```"
    },
    {
        "id":85,
        "response":"```python\nimport math\n\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(1, n + 1) if is_prime(num))\n```"
    },
    {
        "id":86,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef freq_element(tup: Tuple) -> List[Tuple]:\n    freq_dict = Counter(tup)\n    return list(freq_dict.items())\n```"
    },
    {
        "id":87,
        "response":"```python\nimport math\n\ndef recur_gcd(n, n2):\n    if n2 == 0:\n        return n\n    else:\n        return recur_gcd(n2, n % n2)\n```"
    },
    {
        "id":88,
        "response":"```python\nimport math\nimport cmath\n\ndef len_complex(n, n2):\n    return math.sqrt(n**2 + n2**2)\n```"
    },
    {
        "id":89,
        "response":"```python\nimport sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport bisect\nimport functools\nimport random\n\ndef min_jumps(lst, n):\n    jumps = [sys.maxsize] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if j + lst[j] >= i:\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    return jumps[-1]\n```"
    },
    {
        "id":90,
        "response":"```python\nimport typing\nimport itertools\n\ndef mul_consecutive_nums(lst: typing.List[int]) -> typing.List[int]:\n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] * lst[i + 1])\n    return result\n```"
    },
    {
        "id":91,
        "response":"```python\nfrom collections import defaultdict\nfrom itertools import groupby\nfrom operator import itemgetter\n\ndef group_element(lst):\n    result = defaultdict(list)\n    for key, group in groupby(sorted(lst, key=itemgetter(1)), key=itemgetter(1)):\n        for item in group:\n            result[key].append(item[0])\n    return dict(result)\n```"
    },
    {
        "id":92,
        "response":"```python\nimport math\n\ndef last_Two_Digits(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers\"\n    elif n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial = (factorial * i) % 100\n        return factorial\n```"
    },
    {
        "id":93,
        "response":"```python\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +', ' ', s)\n```"
    },
    {
        "id":94,
        "response":"```python\nimport typing\n\ndef extract_unique(dct: typing.Dict) -> typing.List:\n    return list(set(dct.values()))\n```"
    },
    {
        "id":95,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_greater(tup: typing.Tuple, tup2: typing.Tuple) -> bool:\n    if len(tup) != len(tup2):\n        return False\n    for i in range(len(tup)):\n        if tup[i] >= tup2[i]:\n            return False\n    return True\n```"
    },
    {
        "id":96,
        "response":"```python\nimport itertools\n\ndef zip_list(lst, lst2):\n    return list(itertools.zip_longest(lst, lst2))\n```"
    },
    {
        "id":97,
        "response":"```python\nimport typing\n\ndef count_even(lst: typing.List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 == 0, lst)))\n```"
    },
    {
        "id":98,
        "response":"```python\nimport itertools\nimport operator\nfrom typing import Dict, Tuple\n\ndef sort_dict_item(dct: Dict[Tuple[int, int], int]) -> Dict[Tuple[int, int], int]:\n    return dict(sorted(dct.items(), key=operator.itemgetter(0), reverse=True))\n```"
    },
    {
        "id":99,
        "response":"```python\nfrom collections import deque\nfrom typing import List, Deque\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    queue: Deque[tuple[int, int, int]] = deque([(0, 0, 0)])\n    visited: set[int] = set()\n    while queue:\n        swaps, i, j = queue.popleft()\n        if i == len(s):\n            return swaps\n        if (i, j) in visited:\n            continue\n        visited.add((i, j))\n        if s[i] == s2[j]:\n            queue.append((swaps, i + 1, j + 1))\n        else:\n            queue.append((swaps + 1, i + 1, j + 1))\n            if j + 1 < len(s2) and s[i] == s2[j + 1]:\n                queue.append((swaps + 1, i + 1, j + 2))\n    return -1\n```"
    },
    {
        "id":100,
        "response":"```python\nimport typing\n\ndef count_range_in_list(lst: typing.List[int], n: int, n2: int) -> int:\n    return sum(1 for i in lst if n <= i <= n2)\n```"
    },
    {
        "id":101,
        "response":"```python\nimport typing\n\ndef equilibrium_index(lst: typing.List[int]) -> int:\n    for i in range(len(lst)):\n        if sum(lst[:i]) == sum(lst[i+1:]):\n            return i\n    return -1\n```"
    },
    {
        "id":102,
        "response":"```python\nimport sys\nimport math\nfrom typing import List\n\ndef removals(lst: List[int], n: int, n2: int) -> int:\n    lst.sort()\n    count = 0\n    for i in lst:\n        if i <= n2:\n            count += 1\n        else:\n            break\n    return count\n```"
    },
    {
        "id":103,
        "response":"```python\nimport typing\n\ndef is_key_present(dct: typing.Dict, n) -> bool:\n    return n in dct\n```"
    },
    {
        "id":104,
        "response":"```python\nimport math\nimport typing\n\ndef harmonic_sum(n: int) -> float:\n    if n <= 0:\n        return 0\n    sum = 0\n    for i in range(1, n):\n        sum += 1 \/ i\n    return sum\n```"
    },
    {
        "id":105,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))\n```"
    },
    {
        "id":106,
        "response":"```python\nimport typing\n\ndef is_subset(lst1: typing.List[typing.Any], n1: int, lst2: typing.List[typing.Any], n2: int) -> bool:\n    if n1 > n2:\n        return False\n    for i in range(n1):\n        if lst1[i] not in lst2:\n            return False\n    return True\n```"
    },
    {
        "id":107,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef count_Set_Bits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1')\n    return count\n```"
    },
    {
        "id":108,
        "response":"```python\nimport re\nfrom typing import List\n\ndef Convert(s: str) -> List[str]:\n    return list(s)\n```"
    },
    {
        "id":109,
        "response":"```python\nfrom typing import Tuple, Dict\n\ndef get_unique(lst: Tuple) -> Dict:\n    unique_dict = {}\n    for i, value in enumerate(lst):\n        unique_dict[value] = i\n    return unique_dict\n```"
    },
    {
        "id":110,
        "response":"```python\nimport typing\n\ndef front_and_rear(tup: typing.Tuple) -> typing.Tuple:\n    return tup[0], tup[-1]\n```"
    },
    {
        "id":111,
        "response":"```python\nimport math\n\ndef product_Equal(n):\n    num_str = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(num_str)):\n        if (i + 1) % 2 == 0:\n            even_product *= int(num_str[i])\n        else:\n            odd_product *= int(num_str[i])\n    return even_product % 2 == 0 and odd_product % 2 == 0\n```"
    },
    {
        "id":112,
        "response":"```python\nimport typing\n\ndef remove_duplicate(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return list(set(lst))\n```"
    },
    {
        "id":113,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_valid(tup):\n    valid_values = ['a', 'b', 'c']\n    return all(val in valid_values for val in tup)\n```"
    },
    {
        "id":114,
        "response":"```python\nimport math\n\ndef count_Fac(n):\n    factors = {}\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n            factors[i] = factors.get(i, 0) + 1\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    return len(factors)\n```"
    },
    {
        "id":115,
        "response":"```python\nimport re\nfrom typing import Tuple\n\ndef str_to_tuple(s: str) -> Tuple[int, int, int]:\n    nums = re.findall('\\d+', s)\n    if len(nums) < 3:\n        nums += ['0'] * (3 - len(nums))\n    return tuple(map(int, nums[:3]))\n```"
    },
    {
        "id":116,
        "response":"```python\nimport math\n\ndef rombus_perimeter(n):\n    return 4 * n\n```"
    },
    {
        "id":117,
        "response":"```python\nimport math\nimport statistics\nimport typing\n\ndef sd_calc(numbers: typing.List[float]) -> float:\n    mean = statistics.mean(numbers)\n    variance = sum((x - mean) ** 2 for x in numbers) \/ len(numbers)\n    return math.sqrt(variance)\n```"
    },
    {
        "id":118,
        "response":"```python\nimport itertools\n\ndef alternate_elements(lst):\n    return list(itertools.islice(lst, 0, None, 2)) + list(itertools.islice(lst, 1, None, 2))\n```"
    },
    {
        "id":119,
        "response":"```python\nimport re\n\ndef text_match(s):\n    return bool(re.search(r'ab*', s))\n```"
    },
    {
        "id":120,
        "response":"```python\nimport typing\n\ndef add_dict_to_tuple(tup: typing.Tuple, dct: typing.Dict) -> typing.Tuple:\n    return tup + (dct,)\n```"
    },
    {
        "id":121,
        "response":"```python\nimport typing\nimport itertools\n\ndef maxAverageOfPath(lst, n):\n    max_avg = float('-inf')\n    max_path = []\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(i, j, path, total_sum):\n        nonlocal max_avg, max_path\n        if len(path) == n * n:\n            avg = total_sum \/ n * n\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path[:]\n            return\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in path:\n                dfs(ni, nj, path + [(ni, nj)], total_sum + lst[ni][nj])\n    \n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [(i, j)], lst[i][j])\n    \n    return max_path\n```"
    },
    {
        "id":122,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef filter_data(dct: typing.Dict[str, typing.Tuple[int, int]], n: int, n2: int) -> typing.Dict[str, typing.Tuple[int, int]]:\n    return {key: value for key, value in dct.items() if value[0] > n and value[1] > n2}\n```"
    },
    {
        "id":123,
        "response":"```python\nfrom typing import List, Tuple\nfrom collections import Counter\nfrom itertools import starmap\n\ndef count_same_pair(lst: List[Tuple], lst2: List[Tuple]) -> int:\n    counter1 = Counter(lst)\n    counter2 = Counter(lst2)\n    return sum(starmap(min, zip(counter1.values(), counter2.values())))\n```"
    },
    {
        "id":124,
        "response":"```python\nimport math\n\ndef power_base_sum(n, n2):\n    sum = 0\n    for digit in str(n):\n        sum += math.pow(int(digit), n2)\n    return sum\n```"
    },
    {
        "id":125,
        "response":"```python\nimport re\n\ndef extract_quotation(s: str) -> list:\n    return re.findall(r'\"([^\"]*)\"', s)\n```"
    },
    {
        "id":126,
        "response":"```python\nimport itertools\nimport operator\n\ndef multiply_elements(tup):\n    result = 1\n    for i in range(len(tup) - 1):\n        result = result * tup[i] * tup[i + 1]\n    return result\n```"
    },
    {
        "id":127,
        "response":"```python\nimport re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)\n```"
    },
    {
        "id":128,
        "response":"```python\nimport itertools\nimport operator\n\ndef sum_list(lst, lst2):\n    return list(map(operator.add, lst, lst2))\n```"
    },
    {
        "id":129,
        "response":"```python\nimport typing\nimport itertools\nimport operator\n\ndef add_list(lst: typing.List[int], lst2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x, y: x + y, lst, lst2))\n```"
    },
    {
        "id":130,
        "response":"```python\nimport typing\n\ndef consecutive_duplicates(lst: typing.List[int]) -> typing.List[int]:\n    result = []\n    for i in lst:\n        if not result or i != result[-1]:\n            result.append(i)\n    return result\n```"
    },
    {
        "id":131,
        "response":"```python\nimport math\nfrom typing import Union\n\ndef lateralsurface_cone(n: Union[int, float], n2: Union[int, float]) -> float:\n    pi = math.pi\n    r = n\n    l = n2\n    return pi * r * math.sqrt(l**2 + r**2)\n```"
    },
    {
        "id":132,
        "response":"```python\nimport re\n\ndef replace_specialchar(s: str) -> str:\n    return re.sub('[\\s,.]', ':', s)\n```"
    },
    {
        "id":133,
        "response":"```python\nimport bisect\nimport typing\n\ndef find_first_occurrence(lst: typing.List[int], n: int) -> int:\n    lst.sort()\n    idx = bisect.bisect_left(lst, n)\n    if idx != len(lst) and lst[idx] == n:\n        return idx\n    raise ValueError('n not in lst')\n```"
    },
    {
        "id":134,
        "response":"```python\nimport itertools\n\ndef sum_Of_Subarray_Prod(lst, n):\n    total_sum = 0\n    for r in range(1, n + 1):\n        for subarray in itertools.combinations(lst, r):\n            prod = 1\n            for num in subarray:\n                prod *= num\n            total_sum += prod\n    return total_sum\n```"
    },
    {
        "id":135,
        "response":"```python\nimport math\n\ndef toggle_middle_bits(n):\n    num_bits = n.bit_length()\n    mask = (1 << (num_bits - 2)) - 1\n    return n ^ (mask << 1)\n```"
    },
    {
        "id":136,
        "response":"```python\nimport bisect\n\ndef left_insertion(lst, n):\n    return bisect.bisect_left(lst, n)\n```"
    },
    {
        "id":137,
        "response":"```python\nimport re\n\ndef check_str(s):\n    vowels = 'aeiouAEIOU'\n    return s and s[0] in vowels\n```"
    },
    {
        "id":138,
        "response":"```python\nimport math\n\ndef geometric_sum(n):\n    if n <= 0:\n        return 0\n    return (1 - (1 \/ n)) \/ (1 - 1)\n```"
    },
    {
        "id":139,
        "response":"```python\nimport math\n\ndef find_Index(n):\n    triangular = 0\n    index = 0\n    while True:\n        index += 1\n        triangular += index\n        if len(str(triangular)) == n:\n            return index\n```"
    },
    {
        "id":140,
        "response":"```python\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(tup: Tuple) -> Dict:\n    return dict(zip(tup[::2], tup[1::2]))\n```"
    },
    {
        "id":141,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1\n```"
    },
    {
        "id":142,
        "response":"```python\nimport math\n\ndef area_tetrahedron(n):\n    return (math.sqrt(3) \/ 4) * (n ** 2)\n```"
    },
    {
        "id":143,
        "response":"```python\nfrom typing import List\n\ndef rotate_right(lst: List, n: int, n2: int) -> List:\n    n2 = n2 % len(lst)\n    return lst[-n2:] + lst[:-n2]\n```"
    },
    {
        "id":144,
        "response":"```python\nimport typing\n\ndef check_none(tup: typing.Tuple[typing.Any, ...]) -> bool:\n    return any(val is None for val in tup)\n```"
    },
    {
        "id":145,
        "response":"```python\nimport math\n\ndef divisible_by_digits(n, n2):\n    result = []\n    for num in range(n, n2 + 1):\n        if num > 0:\n            digits = [int(d) for d in str(num)]\n            if all(d != 0 and num % d == 0 for d in digits):\n                result.append(num)\n    return result\n```"
    },
    {
        "id":146,
        "response":"```python\nimport math\n\ndef sector_area(n, n2):\n    return (n2 \/ 360) * math.pi * (n ** 2)\n```"
    },
    {
        "id":147,
        "response":"```python\nimport typing\n\ndef lcs_of_three(s: str, s2: str, s3: str, n: int, n2: int, n3: int) -> str:\n    L = [[[0 for i in range(n3 + 1)] for j in range(n2 + 1)] for k in range(n + 1)]\n    \n    for i in range(n + 1):\n        for j in range(n2 + 1):\n            for k in range(n3 + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif s[i - 1] == s2[j - 1] and s2[j - 1] == s3[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1])\n                    \n    index = L[n][n2][n3]\n    lcs = [\"\"] * (index + 1)\n    lcs[index] = \"\"\n    \n    i = n\n    j = n2\n    k = n3\n    while i > 0 and j > 0 and k > 0:\n        if s[i - 1] == s2[j - 1] and s2[j - 1] == s3[k - 1]:\n            lcs[index - 1] = s[i - 1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif L[i - 1][j][k] >= L[i][j - 1][k] and L[i - 1][j][k] >= L[i][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] >= L[i - 1][j][k] and L[i][j - 1][k] >= L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n            \n    return \"\".join(lcs)\n```"
    },
    {
        "id":148,
        "response":"```python\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", s)\n```"
    },
    {
        "id":149,
        "response":"```python\nimport re\n\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: [int(i) for i in re.split('([0-9]+)', x) if i.isdigit()])\n```"
    },
    {
        "id":150,
        "response":"```python\nfrom typing import List, Tuple\n\ndef add_tuple(lst: List[Tuple[int, int]], tup: Tuple[int, int]) -> List[Tuple[int, int]]:\n    lst.append(tup)\n    return lst\n```"
    },
    {
        "id":151,
        "response":"```python\nimport math\nimport typing\n\ndef check_min_heap(lst: typing.List[int], n: int) -> bool:\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n\n        if left_child < n and lst[i] > lst[left_child]:\n            return False\n\n        if right_child < n and lst[i] > lst[right_child]:\n            return False\n\n    return True\n```"
    },
    {
        "id":152,
        "response":"```python\nimport typing\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, 2 * a + b\n        return b\n```"
    },
    {
        "id":153,
        "response":"```python\nimport heapq\nfrom typing import List, Tuple\n\ndef min_k(lst: List[Tuple], n: int) -> List[Tuple]:\n    return heapq.nsmallest(n, lst)\n```"
    },
    {
        "id":154,
        "response":"```python\nimport itertools\n\ndef extract_index_list(lst, lst2, lst3):\n    set1 = set(lst)\n    set2 = set(lst2)\n    set3 = set(lst3)\n    common_elements = set1 & set2 & set3\n    return [i for i, x in enumerate(lst) if x in common_elements]\n```"
    },
    {
        "id":155,
        "response":"```python\nimport sys\nimport typing\n\ndef second_smallest(lst: typing.List[int]) -> int:\n    if len(lst) < 2:\n        return None\n    return sorted(set(lst))[1]\n```"
    },
    {
        "id":156,
        "response":"```python\nimport re\n\ndef text_match_zero_one(s: str) -> bool:\n    return bool(re.search('0|1', s))\n```"
    },
    {
        "id":157,
        "response":"```python\nfrom typing import List\n\ndef count_reverse_pairs(lst: List[str]) -> int:\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n            if lst[j] == lst[i][::-1]:\n                count += 1\n    return count\n```"
    },
    {
        "id":158,
        "response":"```python\nimport itertools\n\ndef unique_sublists(lst):\n    seen = set()\n    count = 0\n    for r in range(len(lst) + 1):\n        for sublst in itertools.combinations(lst, r):\n            sublst_tuple = tuple(sorted(sublst))\n            if sublst_tuple not in seen:\n                seen.add(sublst_tuple)\n                count += 1\n    return count\n```"
    },
    {
        "id":159,
        "response":"```python\nimport re\n\ndef is_decimal(s: str) -> bool:\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":160,
        "response":"```python\nimport typing\nimport itertools\n\ndef unique_Element(lst, n):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            return num\n    return -1\n```"
    },
    {
        "id":161,
        "response":"```python\nimport math\n\ndef arc_length(n, n2):\n    theta = math.radians(n2)\n    return n * theta\n```"
    },
    {
        "id":162,
        "response":"```python\nimport calendar\n\ndef check_monthnumber_number(n):\n    return calendar.monthrange(2024, n)[1] == 30\n```"
    },
    {
        "id":163,
        "response":"```python\nimport sys\n\ndef find_Min_Diff(tup, n):\n    if n < 2:\n        return 0\n    tup = sorted(tup)\n    min_diff = sys.maxsize\n    for i in range(1, n):\n        diff = tup[i] - tup[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```"
    },
    {
        "id":164,
        "response":"```python\nimport re\nfrom typing import Dict\n\ndef number_ctr(s: str) -> Dict[str, int]:\n    numbers = re.findall(r'\\d+', s)\n    number_counts = {}\n    for number in numbers:\n        if number in number_counts:\n            number_counts[number] += 1\n        else:\n            number_counts[number] = 1\n    return number_counts\n```"
    },
    {
        "id":165,
        "response":"```python\nimport math\n\ndef is_polite(n):\n    count = 0\n    i = 1\n    while True:\n        if math.floor(i * (i + 1) \/ 2) == n:\n            return True\n        elif math.floor(i * (i + 1) \/ 2) > n:\n            return False\n        i += 1\n```"
    },
    {
        "id":166,
        "response":"```python\nimport itertools\nfrom typing import List, Tuple\n\ndef pair_wise(lst: List) -> List[Tuple]:\n    return list(zip(lst, lst[1:]))\n```"
    },
    {
        "id":167,
        "response":"```python\nfrom typing import List\n\ndef get_Pairs_Count(lst: List[int], n: int, n2: int) -> int:\n    count = 0\n    freq = {}\n    for num in lst:\n        diff = n2 - num\n        if diff in freq:\n            count += freq[diff]\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count\n```"
    },
    {
        "id":168,
        "response":"```python\nimport math\n\ndef check_Odd_Parity(n):\n    return n % 2 != 0\n```"
    },
    {
        "id":169,
        "response":"```python\nimport typing\nfrom typing import List\n\ndef Diff(lst: List, lst2: List) -> List:\n    return list(set(lst) - set(lst2)) + list(set(lst2) - set(lst))\n```"
    },
    {
        "id":170,
        "response":"```python\nimport math\n\ndef odd_Num_Sum(n):\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 != 0:\n            sum += i ** 4\n            count += 1\n        i += 1\n    return sum\n```"
    },
    {
        "id":171,
        "response":"```python\nimport re\nfrom typing import Dict, List\n\ndef check_expression(s: str) -> bool:\n    stack: List[str] = []\n    pairs: Dict[str, str] = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack.pop() != pairs[char]:\n                return False\n                \n    return not stack\n```"
    },
    {
        "id":172,
        "response":"```python\nimport re\nfrom typing import List\n\ndef remove_length(s: str, n: int) -> str:\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != n]\n    return ' '.join(filtered_words)\n```"
    },
    {
        "id":173,
        "response":"```python\nimport re\nfrom typing import List, Tuple\n\ndef occurance_substring(s: str, s2: str) -> List[Tuple[int, int]]:\n    indices = [(m.start(), m.end()) for m in re.finditer(s2, s)]\n    return indices\n```"
    },
    {
        "id":174,
        "response":"```python\nimport re\nimport typing\n\ndef check_email(s: str) -> bool:\n    if '@' not in s:\n        return False\n    parts = s.split('@')\n    if len(parts) != 2:\n        return False\n    local, domain = parts\n    if '.' not in domain:\n        return False\n    domain_parts = domain.split('.')\n    if len(domain_parts) < 2:\n        return False\n    if not local.replace('-', '').replace('_', '').isalnum():\n        return False\n    for part in domain_parts:\n        if not part.isalnum():\n            return False\n    return True\n```"
    },
    {
        "id":175,
        "response":"```python\nimport typing\n\ndef odd_position(lst: typing.List[int]) -> bool:\n    return all(num % 2 != 0 for idx, num in enumerate(lst) if idx % 2 != 0)\n```"
    },
    {
        "id":176,
        "response":"```python\nimport re\nfrom typing import List\n\ndef count_vowels(s: str) -> int:\n    vowels = 'aeiou'\n    s = s.lower()\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] in vowels and s[i + 1] in vowels:\n            count += 1\n    return count\n```"
    },
    {
        "id":177,
        "response":"```python\nfrom collections import Counter\n\ndef find_Sum(lst, n):\n    count = Counter(lst)\n    return sum(i for i in lst if count[i] == 1)\n```"
    },
    {
        "id":178,
        "response":"```python\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(lst: List[Any]) -> List[List[Any]]:\n    result = []\n    current_group = [lst[0]] if lst else []\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_group.append(lst[i])\n        else:\n            result.append(current_group)\n            current_group = [lst[i]]\n            \n    if current_group:\n        result.append(current_group)\n        \n    return result\n```"
    },
    {
        "id":179,
        "response":"```python\nfrom typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    unique_lists = set(tuple(sorted(sublist)) for sublist in lst)\n    return len(unique_lists)\n```"
    },
    {
        "id":180,
        "response":"```python\nimport itertools\n\ndef find_combinations(lst):\n    result = []\n    for r in range(1, len(lst) + 1):\n        combinations = list(itertools.combinations(lst, r))\n        for combination in combinations:\n            total = sum(combination)\n            result.append((combination, total))\n    return result\n```"
    },
    {
        "id":181,
        "response":"```python\nimport math\nimport typing\n\ndef count_Divisors(n: int) -> int:\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n```"
    },
    {
        "id":182,
        "response":"```python\nimport itertools\n\ndef Odd_Length_Sum(lst):\n    return sum(sum(sublist) for i in range(len(lst), 0, -1) if i % 2 != 0 for sublist in itertools.combinations(lst, i))\n```"
    },
    {
        "id":183,
        "response":"```python\nimport colorsys\nimport typing\n\ndef rgb_to_hsv(n: typing.Union[int, float], n2: typing.Union[int, float], n3: typing.Union[int, float]) -> typing.Tuple[float, float, float]:\n    r, g, b = n \/ 255.0, n2 \/ 255.0, n3 \/ 255.0\n    h, s, v = colorsys.rgb_to_hsv(r, g, b)\n    return h, s, v\n```"
    },
    {
        "id":184,
        "response":"```python\nimport math\n\ndef mul_even_odd(lst):\n    even = next((num for num in lst if num % 2 == 0), None)\n    odd = next((num for num in lst if num % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None\n```"
    },
    {
        "id":185,
        "response":"```python\nimport re\nfrom typing import Tuple\n\ndef tuple_str_int(s: str) -> Tuple[int, ...]:\n    return tuple(map(int, re.findall(r'\\d+', s)))\n```"
    },
    {
        "id":186,
        "response":"```python\nfrom typing import List\n\ndef right_insertion(lst: List[int], n: int) -> int:\n    left, right = 0, len(lst)\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] <= n:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```"
    },
    {
        "id":187,
        "response":"```python\nimport re\n\ndef text_match_three(s: str) -> bool:\n    return bool(re.search('ab{3}', s))\n```"
    },
    {
        "id":188,
        "response":"```python\nimport typing\nimport itertools\n\ndef new_tuple(lst, s):\n    return tuple(itertools.chain(lst, [s]))\n```"
    },
    {
        "id":189,
        "response":"```python\nimport math\n\ndef perimeter_polygon(n, n2):\n    return n * n2\n```"
    },
    {
        "id":190,
        "response":"```python\nimport typing\n\ndef even_position(lst: typing.List[int]) -> bool:\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n```"
    },
    {
        "id":191,
        "response":"```python\nfrom typing import Tuple, Any\n\ndef remove_nested(tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)\n```"
    },
    {
        "id":192,
        "response":"```python\nimport typing\nfrom typing import List\n\ndef count_list(lst: List[typing.Any]) -> int:\n    return sum(1 for elem in lst if isinstance(elem, list))\n```"
    },
    {
        "id":193,
        "response":"```python\nimport bisect\nimport typing\n\ndef last(lst: typing.List[int], n: int, n2: int) -> int:\n    try:\n        return len(lst) - 1 - lst[::-1].index(n)\n    except ValueError:\n        return -1\n```"
    },
    {
        "id":194,
        "response":"```python\nimport re\n\ndef text_starta_endb(s):\n    pattern = r'^.*a.*b$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":195,
        "response":"```python\nimport typing\n\ndef cheap_items(lst: typing.List[typing.Tuple[str, int]], n: int) -> typing.List[typing.Tuple[str, int]]:\n    return sorted(lst, key=lambda x: x[1])[:n]\n```"
    },
    {
        "id":196,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef return_sum(dct: typing.Dict[str, int]) -> int:\n    return sum(dct.values())\n```"
    },
    {
        "id":197,
        "response":"```python\nimport math\n\ndef sum_in_Range(n, n2):\n    l = min(n, n2)\n    r = max(n, n2)\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n```"
    },
    {
        "id":198,
        "response":"```python\nimport typing\n\ndef _sum(lst: typing.List[int]) -> int:\n    return sum(lst)\n```"
    },
    {
        "id":199,
        "response":"```python\nimport math\n\ndef left_Rotate(n, n2):\n    num_bits = math.floor(math.log2(n)) + 1\n    n2 = n2 % num_bits\n    return (n << n2) | (n >> (num_bits - n2))\n```"
    },
    {
        "id":200,
        "response":"```python\nimport re\nimport typing\n\ndef remove_all_spaces(s: str) -> str:\n    return re.sub(r'\\s+', '', s)\n```"
    },
    {
        "id":201,
        "response":"```python\nimport math\n\ndef test_three_equal(n, n2, n3):\n    return sum(1 for i in [n, n2, n3] if i == [n, n2, n3].count(i) > 1)\n```"
    },
    {
        "id":202,
        "response":"```python\nimport math\nimport typing\n\ndef count_Rotation(lst: typing.List[int], n: int) -> int:\n    min_idx = lst.index(min(lst))\n    return min_idx\n```"
    },
    {
        "id":203,
        "response":"```python\nimport math\n\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    sqrt = math.sqrt(n)\n    return sqrt == int(sqrt)\n```"
    },
    {
        "id":204,
        "response":"```python\nimport math\nimport itertools\nimport typing\nimport re\n\ndef is_Product_Even(lst, n):\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product % 2 == 0\n```"
    },
    {
        "id":205,
        "response":"```python\nimport itertools\n\ndef max_sum_list(lst):\n    return max(lst, key=sum)\n```"
    },
    {
        "id":206,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef max_run_uppercase(s: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```"
    },
    {
        "id":207,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef first_odd(lst: typing.List[int]) -> int:\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None\n```"
    },
    {
        "id":208,
        "response":"```python\nimport typing\nimport itertools\n\ndef check_K(tup, n):\n    return n in tup\n```"
    },
    {
        "id":209,
        "response":"```python\nimport typing\n\ndef check_smaller(tup: typing.Tuple[int, ...], tup2: typing.Tuple[int, ...]) -> bool:\n    return all(tup[i] > tup2[i] for i in range(len(tup)))\n```"
    },
    {
        "id":210,
        "response":"```python\nimport itertools\n\ndef count_variable(*args):\n    result = []\n    for i in args:\n        result.extend(itertools.repeat(i, i))\n    return result\n```"
    },
    {
        "id":211,
        "response":"```python\nimport typing\n\ndef check_identical(lst: typing.List[typing.Tuple], lst2: typing.List[typing.Tuple]) -> bool:\n    return sorted(lst) == sorted(lst2)\n```"
    },
    {
        "id":212,
        "response":"```python\nimport re\n\ndef road_rd(s):\n    return re.sub(r'\\broad\\b', 'rd.', s)\n```"
    },
    {
        "id":213,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef string_length(s: str) -> int:\n    return len(s)\n```"
    },
    {
        "id":214,
        "response":"```python\nimport math\n\ndef rombus_area(n, n2):\n    return (n * n2) \/ 2\n```"
    },
    {
        "id":215,
        "response":"```python\nimport typing\n\ndef sort_by_dnf(lst: typing.List[int], n: int) -> typing.List[int]:\n    low, mid, high = 0, 0, n - 1\n    while mid <= high:\n        if lst[mid] == 0:\n            lst[low], lst[mid] = lst[mid], lst[low]\n            low += 1\n            mid += 1\n        elif lst[mid] == 1:\n            mid += 1\n        else:\n            lst[mid], lst[high] = lst[high], lst[mid]\n            high -= 1\n    return lst\n```"
    },
    {
        "id":216,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef clear_tuple(tup: typing.Tuple[str, str]) -> typing.Tuple[str, str]:\n    return (re.sub(r'\\s+', '', tup[0]), re.sub(r'\\s+', '', tup[1]))\n```"
    },
    {
        "id":217,
        "response":"```python\nimport typing\n\ndef div_of_nums(lst: typing.List[int], n: int, n2: int) -> typing.List[int]:\n    return list(filter(lambda x: x % n == 0 or x % n2 == 0, lst))\n```"
    },
    {
        "id":218,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef lower_ctr(s: str) -> int:\n    return sum(1 for c in s if c.islower())\n```"
    },
    {
        "id":219,
        "response":"```python\nfrom collections import defaultdict\nfrom typing import List\n\ndef count_duplic(lst: List[int]) -> dict:\n    freq_dict = defaultdict(int)\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            freq_dict[lst[i]] += 1\n    return dict(freq_dict)\n```"
    },
    {
        "id":220,
        "response":"```python\nimport calendar\nimport typing\n\ndef check_monthnum_number(n: int) -> bool:\n    for year in range(1, 10000):\n        if calendar.monthrange(year, n)[1] == 28:\n            return True\n    return False\n```"
    },
    {
        "id":221,
        "response":"```python\nimport typing\n\ndef merge_dictionaries(dct: typing.Dict, dct2: typing.Dict) -> typing.Dict:\n    return {**dct, **dct2}\n```"
    },
    {
        "id":222,
        "response":"```python\nimport re\n\ndef pass_validity(s: str) -> bool:\n    if len(s) < 8:\n        return False\n    elif not re.search(\"[a-z]\", s):\n        return False\n    elif not re.search(\"[A-Z]\", s):\n        return False\n    elif not re.search(\"[0-9]\", s):\n        return False\n    elif not re.search(\"[_@$]\", s):\n        return False\n    else:\n        return True\n```"
    },
    {
        "id":223,
        "response":"```python\nimport re\n\ndef check_substring(s: str, s2: str) -> bool:\n    return bool(re.match(s2, s))\n```"
    },
    {
        "id":224,
        "response":"```python\nimport typing\n\ndef remove_even(lst: typing.List[int]) -> typing.List[int]:\n    return [i for i in lst if i % 2 != 0]\n```"
    },
    {
        "id":225,
        "response":"```python\nimport typing\n\ndef access_elements(lst: typing.List[typing.Any], lst2: typing.List[int]) -> typing.List[typing.Any]:\n    return [lst[i] for i in lst2 if i < len(lst)]\n```"
    },
    {
        "id":226,
        "response":"```python\nimport math\n\ndef check_Type_Of_Triangle(n, n2, n3):\n    sides = [n, n2, n3]\n    sides.sort()\n    if sides[0] + sides[1] <= sides[2]:\n        return \"Not a Triangle\"\n    elif n == n2 == n3:\n        return \"Equilateral\"\n    elif n == n2 or n2 == n3 or n == n3:\n        if math.pow(sides[0], 2) + math.pow(sides[1], 2) == math.pow(sides[2], 2):\n            return \"Right Isosceles\"\n        else:\n            return \"Isosceles\"\n    else:\n        if math.pow(sides[0], 2) + math.pow(sides[1], 2) == math.pow(sides[2], 2):\n            return \"Right\"\n        else:\n            return \"Scalene\"\n```"
    },
    {
        "id":227,
        "response":"```python\nimport typing\nimport itertools\n\ndef sum_column(lst: typing.List[typing.List[int]], n: int) -> int:\n    return sum(row[n] for row in lst)\n```"
    },
    {
        "id":228,
        "response":"```python\nimport re\n\ndef count_alpha_dig_spl(s):\n    alpha_count = sum(c.isalpha() for c in s)\n    dig_count = sum(c.isdigit() for c in s)\n    spl_count = sum(not c.isalnum() and not c.isspace() for c in s)\n    return alpha_count, dig_count, spl_count\n```"
    },
    {
        "id":229,
        "response":"```python\nfrom collections import Counter\n\ndef second_frequent(lst):\n    if len(lst) < 2:\n        return None\n    count = Counter(lst)\n    max_count = max(count.values())\n    second_max_count = max([c for c in count.values() if c != max_count] or [None])\n    if second_max_count is None:\n        return None\n    return next(s for s, c in count.items() if c == second_max_count)\n```"
    },
    {
        "id":230,
        "response":"```python\nimport math\n\ndef round_up(n, n2):\n    multiplier = 10 ** n2\n    return math.ceil(n * multiplier) \/ multiplier\n```"
    },
    {
        "id":231,
        "response":"```python\nimport itertools\nfrom typing import List\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] == lst[j]:\n                count += 1\n    return count\n```"
    },
    {
        "id":232,
        "response":"```python\nimport re\n\ndef extract_max(s: str) -> int:\n    numbers = re.findall(r'\\d+', s)\n    if numbers:\n        return max(map(int, numbers))\n    else:\n        return None\n```"
    },
    {
        "id":233,
        "response":"```python\nimport typing\n\ndef get_key(dct: typing.Dict[typing.Any, typing.Any]) -> typing.List[typing.Any]:\n    return list(dct.keys())\n```"
    },
    {
        "id":234,
        "response":"```python\nimport numpy as np\nimport itertools\n\ndef generate_matrix(n):\n    matrix = np.zeros((n, n), dtype=int)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    direction = 0\n    row, col = 0, 0\n    for num in itertools.chain.from_iterable(itertools.repeat(range(1, n*n+1), 2)):\n        matrix[row, col] = num ** 2\n        dr, dc = directions[direction]\n        nr, nc = row + dr, col + dc\n        if 0 <= nr < n and 0 <= nc < n and matrix[nr, nc] == 0:\n            row, col = nr, nc\n        else:\n            direction = (direction + 1) % 4\n            dr, dc = directions[direction]\n            row, col = row + dr, col + dc\n    return matrix\n```"
    },
    {
        "id":235,
        "response":"```python\nimport math\n\ndef slope(x1, y1, x2, y2):\n    if x2 - x1 == 0:\n        return float('inf')\n    return (y2 - y1) \/ (x2 - x1)\n```"
    },
    {
        "id":236,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    max_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_array_sum = sum(lst[i:j+1])\n            if sub_array_sum > max_sum:\n                max_sum = sub_array_sum\n                max_length = j - i + 1\n    return max_length\n```"
    },
    {
        "id":237,
        "response":"```python\nimport math\n\ndef cube_Sum(n):\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 != 0:\n            sum += i ** 3\n            count += 1\n        i += 1\n    return sum\n```"
    },
    {
        "id":238,
        "response":"```python\nfrom collections import deque\nfrom itertools import permutations\n\ndef min_Swaps(s, s2):\n    if len(s) != len(s2):\n        return -1\n\n    s = list(s)\n    s2 = list(s2)\n    n = len(s)\n    res = n + 1\n\n    for p in permutations(range(n)):\n        temp = [s[i] for i in p]\n        swaps = 0\n        for i in range(n):\n            if temp[i] != s2[i]:\n                swaps += 1\n        res = min(res, swaps)\n\n    return res\n```"
    },
    {
        "id":239,
        "response":"```python\nimport operator\nimport functools\n\ndef sort_tuple(lst):\n    return sorted(lst, key=operator.itemgetter(0))\n```"
    },
    {
        "id":240,
        "response":"```python\nimport numpy as np\nimport sympy as sp\n\ndef Check_Solution(n, n2, n3):\n    a, b, c, d = n\n    a2, b2, c2, d2 = n2\n    a3, b3, c3, d3 = n3\n    x = sp.symbols('x')\n    p1 = a*x**3 + b*x**2 + c*x + d\n    p2 = a2*x**3 + b2*x**2 + c2*x + d2\n    p3 = a3*x**3 + b3*x**2 + c3*x + d3\n    r1 = sp.roots(p1)\n    r2 = sp.roots(p2)\n    r3 = sp.roots(p3)\n    if np.allclose(np.sort([r1, r2, r3]), np.sort([r1, -r2, -r3])):\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":241,
        "response":"```python\nimport typing\n\ndef get_inv_count(lst: typing.List[int], n: int) -> int:\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] > lst[j]:\n                inv_count += 1\n    return inv_count\n```"
    },
    {
        "id":242,
        "response":"```python\nfrom collections import Counter\nfrom typing import List\n\ndef get_odd_occurence(lst: List[int], n: int) -> int:\n    count = Counter(lst)\n    for num in count:\n        if count[num] % 2 != 0:\n            return num\n```"
    },
    {
        "id":243,
        "response":"```python\nimport heapq\n\ndef nth_super_ugly_number(n, lst):\n    if n <= 0:\n        return None\n    if not lst:\n        return None\n\n    heap = [1]\n    seen = set([1])\n    ugly_numbers = []\n\n    while len(ugly_numbers) < n:\n        num = heapq.heappop(heap)\n        ugly_numbers.append(num)\n\n        for i in lst:\n            if i * num not in seen:\n                seen.add(i * num)\n                heapq.heappush(heap, i * num)\n\n    return ugly_numbers[-1]\n```"
    },
    {
        "id":244,
        "response":"```python\nimport typing\nimport itertools\nimport re\n\ndef get_Number(n: int, n2: int) -> int:\n    odd = []\n    even = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    odd.extend(even)\n    return odd[n2-1]\n```"
    },
    {
        "id":245,
        "response":"```python\nimport math\n\ndef find_Digits(n):\n    count = 0\n    for i in str(n):\n        if int(i) != 0 and n % int(i) == 0:\n            count += 1\n    return count\n```"
    },
    {
        "id":246,
        "response":"```python\nimport math\nfrom typing import List\n\ndef find_platform(arr: List[int], dep: List[int], n: int) -> int:\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n            if plat_needed > result:\n                result = plat_needed\n        else:\n            plat_needed -= 1\n            j += 1\n    return result\n```"
    },
    {
        "id":247,
        "response":"```python\nimport copy\n\nclass Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass SingletonTuple(metaclass=Singleton):\n    def __init__(self, lst):\n        self.lst = lst\n\ndef lcopy(lst):\n    return copy.deepcopy(lst.lst)\n\nlst = SingletonTuple([1, 2, 3])\nprint(lcopy(lst))\n```"
    },
    {
        "id":248,
        "response":"```python\nimport math\n\ndef area_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n```"
    },
    {
        "id":249,
        "response":"```python\nimport math\n\ndef Sum(n: int) -> int:\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n```"
    },
    {
        "id":250,
        "response":"```python\nimport math\n\ndef is_triangleexists(n, n2, n3):\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    if n + n2 + n3 == 180:\n        return True\n    return False\n```"
    },
    {
        "id":251,
        "response":"```python\nimport math\n\ndef Sum_of_Inverse_Divisors(n, n2):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    divisors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_sum += 1 \/ i\n    for i in range(1, n2 + 1):\n        if n2 % i == 0:\n            divisors_sum += 1 \/ i\n    return divisors_sum\n```"
    },
    {
        "id":252,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_negs(lst: typing.List[int]) -> typing.List[int]:\n    return [num for num in lst if num >= 0]\n```"
    },
    {
        "id":253,
        "response":"```python\nimport math\n\ndef sum_of_odd_Factors(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 != 0:\n                sum += i\n            if (n \/\/ i) % 2 != 0 and i != n \/\/ i:\n                sum += n \/\/ i\n    return sum\n```"
    },
    {
        "id":254,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef raw_heap(lst: List[int]) -> List[int]:\n    heapq.heapify(lst)\n    return lst\n```"
    },
    {
        "id":255,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_Even_Parity(n: int) -> bool:\n    return n % 2 == 0\n```"
    },
    {
        "id":256,
        "response":"```python\nimport itertools\nimport typing\nimport re\n\ndef find_Min_Swaps(lst, n):\n    arr_pos = list(range(n))\n    vis = [False] * n\n    ans = 0\n    for i in range(n):\n        if vis[i] or arr_pos[i] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arr_pos[j]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans\n```"
    },
    {
        "id":257,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef listify_list(lst):\n    return list(map(list, map(str.split, lst)))\n```"
    },
    {
        "id":258,
        "response":"```python\nimport typing\nimport itertools\n\ndef count_list(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    return [len(sublist) ** 2 for sublist in lst]\n```"
    },
    {
        "id":259,
        "response":"```python\nimport itertools\n\ndef sub_lists(lst):\n    result = [[]]\n    for elem in lst:\n        result.extend([curr + [elem] for curr in result])\n    return result\n```"
    },
    {
        "id":260,
        "response":"```python\nimport re\nimport typing\n\ndef check_alphanumeric(s: typing.Any) -> bool:\n    if not isinstance(s, str):\n        return False\n    s = s.strip()\n    if len(s) == 0:\n        return False\n    return s[-1].isalnum()\n```"
    },
    {
        "id":261,
        "response":"```python\nfrom itertools import permutations\nfrom typing import List\n\ndef anagram_lambda(lst: List[str], s: str) -> List[str]:\n    anagrams = list(filter(lambda x: ''.join(x) in lst, permutations(s)))\n    return [''.join(anagram) for anagram in anagrams]\n```"
    },
    {
        "id":262,
        "response":"```python\nimport re\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef n_common_words(s: str, n: int) -> List[Tuple[str, int]]:\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    common_words = Counter(words).most_common(n)\n    return common_words\n```"
    },
    {
        "id":263,
        "response":"```python\nfrom typing import List\n\ndef find_longest_conseq_subseq(lst: List[int], n: int) -> int:\n    if n == 0:\n        return 0\n\n    s = set(lst)\n    res = 0\n\n    for i in s:\n        if i - 1 not in s:\n            num = i\n            while num in s:\n                num += 1\n            res = max(res, num - i)\n\n    return res\n```"
    },
    {
        "id":264,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef palindrome_lambda(lst: typing.List[str]) -> typing.List[str]:\n    palindrome = lambda s: s == s[::-1]\n    return list(filter(palindrome, lst))\n```"
    },
    {
        "id":265,
        "response":"```python\nimport typing\nimport itertools\n\ndef ntimes_list(lst: typing.List[typing.Any], n: int) -> None:\n    list(map(print, itertools.chain.from_iterable(itertools.repeat(lst, n))))\n```"
    },
    {
        "id":266,
        "response":"```python\nimport calendar\n\ndef check_monthnumb(s):\n    month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if s in month_names:\n        month_index = month_names.index(s) + 1\n        return calendar.monthrange(2024, month_index)[1] == 31\n    else:\n        return False\n```"
    },
    {
        "id":267,
        "response":"```python\nimport math\nimport random\nimport re\nimport typing\nimport itertools\n\ndef min_Num(lst, n):\n    total_sum = sum(lst)\n    if total_sum % 2 == 0:\n        return 0\n    else:\n        return 1\n```"
    },
    {
        "id":268,
        "response":"```python\nimport re\nfrom typing import Union\n\ndef length_Of_Last_Word(s: Union[str, bytes, bytearray]) -> int:\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])\n```"
    },
    {
        "id":269,
        "response":"```python\nimport typing\n\ndef remove_list_range(lst: typing.List[int], n: int, n2: int) -> typing.List[int]:\n    return [i for i in lst if n <= i <= n2]\n```"
    },
    {
        "id":270,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef sum_positivenum(lst: typing.List[int]) -> int:\n    return sum(num for num in lst if num > 0)\n```"
    },
    {
        "id":271,
        "response":"```python\nimport re\nfrom typing import Union\n\ndef are_Rotations(s: str, s2: str) -> Union[bool, str]:\n    if len(s) != len(s2):\n        return False\n    return s in s2 + s2\n```"
    },
    {
        "id":272,
        "response":"```python\nimport typing\n\ndef check_subset(lst: typing.List[typing.Any], lst2: typing.List[typing.Any]) -> bool:\n    set1 = set(tuple(sorted(sublist)) for sublist in lst if isinstance(sublist, list))\n    set2 = set(tuple(sorted(sublist)) for sublist in lst2 if isinstance(sublist, list))\n    return set1.issubset(set2)\n```"
    },
    {
        "id":273,
        "response":"```python\nimport itertools\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n```"
    },
    {
        "id":274,
        "response":"```python\nimport re\n\ndef check_Concat(s, s2):\n    for i in range(1, len(s)):\n        if s2.startswith(s[:i]) and s2.endswith(s[i:]):\n            return True\n    return False\n```"
    },
    {
        "id":275,
        "response":"```python\nimport sys\nimport itertools\n\ndef min_difference(lst):\n    min_diff = sys.maxsize\n    for (a, b), (c, d) in itertools.combinations(lst, 2):\n        diff = abs((a - c) ** 2 + (b - d) ** 2) ** 0.5\n        min_diff = min(min_diff, diff)\n    return min_diff\n```"
    },
    {
        "id":276,
        "response":"```python\nimport math\n\ndef lcm(n, n2):\n    return abs(n*n2) \/\/ math.gcd(n, n2)\n```"
    },
    {
        "id":277,
        "response":"```python\nimport re\nimport itertools\nimport string\n\ndef sort_String(s):\n    s = ''.join(sorted(s))\n    return s\n```"
    },
    {
        "id":278,
        "response":"```python\nimport typing\nimport itertools\n\ndef check_tuples(tup: typing.Tuple, lst: typing.List) -> bool:\n    return len(tup) == lst[0]\n```"
    },
    {
        "id":279,
        "response":"```python\nimport re\n\ndef text_match(s: str) -> bool:\n    pattern = re.compile(r'a.*b$')\n    return bool(pattern.match(s))\n```"
    },
    {
        "id":280,
        "response":"```python\nimport math\n\ndef Check_Solution(n, n2, n3):\n    if n**2 + n2**2 == n3**2:\n        return 1\n    elif n**2 + n3**2 == n2**2:\n        return 1\n    elif n2**2 + n3**2 == n**2:\n        return 1\n    else:\n        return 0\n```"
    },
    {
        "id":281,
        "response":"```python\nimport typing\n\ndef sum_even_odd(lst: typing.List[int]) -> int:\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum + odd_sum\n```"
    },
    {
        "id":282,
        "response":"```python\nimport math\n\ndef parallelogram_perimeter(n, n2):\n    return 2 * (n + n2)\n```"
    },
    {
        "id":283,
        "response":"```python\nimport typing\nimport itertools\n\ndef div_of_nums(lst: typing.List[int], n: int, n2: int) -> typing.List[int]:\n    return list(filter(lambda x: x % n == 0 and x % n2 == 0, lst))\n```"
    },
    {
        "id":284,
        "response":"```python\nimport math\n\ndef all_Bits_Set_In_The_Given_Range(n, n2, n3):\n    for i in range(n2, n3 + 1):\n        if not (n & (1 << i)):\n            return False\n    return True\n```"
    },
    {
        "id":285,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_Isomorphic(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n\n    s_to_s2 = {}\n    s2_to_s = {}\n\n    for char1, char2 in zip(s, s2):\n        if char1 not in s_to_s2 and char2 not in s2_to_s:\n            s_to_s2[char1] = char2\n            s2_to_s[char2] = char1\n        elif s_to_s2.get(char1) != char2 or s2_to_s.get(char2) != char1:\n            return False\n\n    return True\n```"
    },
    {
        "id":286,
        "response":"```python\nimport typing\n\ndef sum_num(tup: typing.Tuple[int, ...]) -> float:\n    return sum(tup) \/ len(tup)\n```"
    },
    {
        "id":287,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_odd(n: int) -> bool:\n    return n & 1\n```"
    },
    {
        "id":288,
        "response":"```python\nfrom typing import Tuple, Any\n\ndef substract_elements(tup: Tuple[Any, ...], tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(tup[i] - tup2[i] for i in range(len(tup)))\n```"
    },
    {
        "id":289,
        "response":"```python\nimport typing\n\ndef reverse_list_lists(lst: typing.List[typing.List[typing.Any]]) -> typing.List[typing.List[typing.Any]]:\n    return [i[::-1] for i in lst]\n```"
    },
    {
        "id":290,
        "response":"```python\nimport typing\nimport itertools\n\ndef find_Extra(lst, lst2, n):\n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return i\n    return -1\n```"
    },
    {
        "id":291,
        "response":"```python\nimport math\n\ndef same_Length(n, n2):\n    return len(str(abs(n))) == len(str(abs(n2)))\n```"
    },
    {
        "id":292,
        "response":"```python\nimport re\n\ndef remove_spaces(s):\n    return re.sub(' +', ' ', s)\n```"
    },
    {
        "id":293,
        "response":"```python\nimport typing\nfrom typing import List\n\ndef Extract(lst: List[List[typing.Any]]) -> List[typing.Any]:\n    return [sublist[-1] for sublist in lst]\n```"
    },
    {
        "id":294,
        "response":"```python\nimport re\nimport typing\n\ndef float_to_tuple(s: str) -> typing.Tuple[float, ...]:\n    return tuple(map(float, re.findall(r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\", s)))\n```"
    },
    {
        "id":295,
        "response":"```python\nimport itertools\n\ndef max_sum_subseq(lst):\n    max_sum = 0\n    for r in range(len(lst) + 1):\n        for subseq in itertools.combinations(lst, r):\n            if all(abs(subseq[i] - subseq[i - 1]) > 1 for i in range(1, len(subseq))):\n                max_sum = max(max_sum, sum(subseq))\n    return max_sum\n```"
    },
    {
        "id":296,
        "response":"```python\nimport typing\n\ndef sort_list_last(lst: typing.List[int]) -> typing.List[int]:\n    return sorted(lst)\n```"
    },
    {
        "id":297,
        "response":"```python\nimport re\n\ndef is_Word_Present(s: str, s2: str) -> bool:\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    return s2.lower() in words\n```"
    },
    {
        "id":298,
        "response":"```python\nimport typing\n\ndef extract_elements(lst: typing.List[typing.Any], n: int) -> typing.List[typing.Any]:\n    result = []\n    i = 0\n    while i < len(lst) and len(result) < n:\n        result.append(lst[i])\n        i += 1\n    return result\n```"
    },
    {
        "id":299,
        "response":"```python\nimport numpy as np\nimport math\n\ndef check(lst, n):\n    arr = np.array(lst).reshape(n, n)\n    corners = [arr[0, 0], arr[0, n-1], arr[n-1, 0], arr[n-1, n-1]]\n    return all(i in lst for i in corners)\n```"
    },
    {
        "id":300,
        "response":"```python\nimport re\n\ndef match_num(s: str, num: str) -> bool:\n    return bool(re.match(num, s))\n```"
    },
    {
        "id":301,
        "response":"```python\nimport math\nimport typing\n\ndef num_comm_div(n: int, n2: int) -> int:\n    return math.gcd(n, n2)\n```"
    },
    {
        "id":302,
        "response":"```python\nimport math\n\ndef find(n, n2):\n    return n % n2\n```"
    },
    {
        "id":303,
        "response":"```python\nimport itertools\n\ndef add_consecutive_nums(lst):\n    result = []\n    for key, group in itertools.groupby(enumerate(lst), key=lambda x: x[0] - x[1]):\n        group = [x[1] for x in group]\n        result.append(sum(group))\n    return result\n```"
    },
    {
        "id":304,
        "response":"```python\nimport math\n\ndef sum_Of_Series(n):\n    return sum(i**3 for i in range(1, n+1))\n```"
    },
    {
        "id":305,
        "response":"```python\nimport itertools\nimport typing\n\ndef re_order(lst: typing.List[int]) -> typing.List[int]:\n    return list(itertools.filterfalse(lambda x: x == 0, lst)) + [0] * lst.count(0)\n```"
    },
    {
        "id":306,
        "response":"```python\nimport math\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Input must be integers\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Input must be non-negative integers\")\n    if k > n:\n        raise ValueError(\"k cannot be greater than n\")\n    \n    return math.factorial(n) \/\/ math.factorial(n - k)\n```"
    },
    {
        "id":307,
        "response":"```python\nimport typing\n\ndef remove_words(lst: typing.List[str], lst2: typing.List[str]) -> typing.List[str]:\n    return [word for word in lst if word not in lst2]\n```"
    },
    {
        "id":308,
        "response":"```python\nimport typing\n\ndef same_order(lst: typing.List, lst2: typing.List) -> bool:\n    common = set(lst) & set(lst2)\n    return all(lst.index(x) == lst2.index(x) for x in common)\n```"
    },
    {
        "id":309,
        "response":"```python\nimport statistics\n\ndef average_Odd(n):\n    odd_numbers = [i for i in range(1, n+1) if i % 2 != 0]\n    return statistics.mean(odd_numbers)\n```"
    },
    {
        "id":310,
        "response":"```python\nimport itertools\nimport math\n\ndef no_of_subsequences(lst, n):\n    count = 0\n    for r in range(len(lst) + 1):\n        for sub in itertools.combinations(lst, r):\n            if math.prod(sub) < n:\n                count += 1\n    return count\n```"
    },
    {
        "id":311,
        "response":"```python\nimport math\nimport itertools\n\ndef find_Min_Sum(n):\n    factors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n \/\/ i)\n    return sum(factors)\n```"
    },
    {
        "id":312,
        "response":"```python\nimport collections\nimport typing\n\ndef count_element_freq(tup: typing.Tuple[typing.Any]) -> typing.Dict[typing.Any, int]:\n    freq = collections.defaultdict(int)\n    stack = [tup]\n    while stack:\n        item = stack.pop()\n        if isinstance(item, (list, tuple)):\n            stack.extend(item)\n        else:\n            freq[item] += 1\n    return dict(freq)\n```"
    },
    {
        "id":313,
        "response":"```python\nimport typing\n\ndef add_str(tup: typing.Tuple, s: str) -> typing.List:\n    return [str(i) + s for i in tup]\n```"
    },
    {
        "id":314,
        "response":"```python\nimport typing\nimport itertools\n\ndef sum_elements(tup: typing.Tuple[typing.Tuple[int, int, int]]) -> int:\n    return sum(sum(subtup) for subtup in tup)\n```"
    },
    {
        "id":315,
        "response":"```python\nimport itertools\nimport math\n\ndef modular_sum(lst, m, n2):\n    total = sum(lst)\n    if total % m == 0:\n        return True\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) % m == 0:\n                return True\n    return False\n```"
    },
    {
        "id":316,
        "response":"```python\nimport typing\n\ndef radix_sort(lst: typing.List[int]) -> typing.List[int]:\n    RADIX = 10\n    placement = 1\n    max_digit = max(lst)\n    while placement < max_digit:\n        buckets = [list() for _ in range(RADIX)]\n        for i in lst:\n            tmp = int((i \/ placement) % RADIX)\n            buckets[tmp].append(i)\n        a = 0\n        for b in range(RADIX):\n            buck = buckets[b]\n            for i in buck:\n                lst[a] = i\n                a += 1\n        placement *= RADIX\n    return lst\n```"
    },
    {
        "id":317,
        "response":"```python\nimport typing\n\ndef largest_pos(lst: typing.List[int]) -> int:\n    max_num = float('-inf')\n    for num in lst:\n        if num > 0 and num > max_num:\n            max_num = num\n    return max_num if max_num != float('-inf') else None\n```"
    },
    {
        "id":318,
        "response":"```python\nimport math\n\ndef sqrt_root(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return math.sqrt(n)\n```"
    },
    {
        "id":319,
        "response":"```python\nimport math\n\ndef volume_tetrahedron(n):\n    return (n**3) \/ (6 * math.sqrt(2))\n```"
    },
    {
        "id":320,
        "response":"```python\nimport math\nfrom functools import reduce\n\ndef get_lcm(lst):\n    def lcm(a, b):\n        return a * b \/\/ math.gcd(a, b)\n\n    return reduce(lcm, lst, 1)\n```"
    },
    {
        "id":321,
        "response":"```python\nimport math\n\ndef check_isosceles(n, n2, n3):\n    if n == n2 or n == n3 or n2 == n3:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":322,
        "response":"```python\nimport typing\nimport itertools\n\ndef lbs(lst: typing.List[int]) -> typing.List[int]:\n    n = len(lst)\n    if n == 0:\n        return []\n    \n    dp = [[num] for num in lst]\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j] and len(dp[i]) < len(dp[j]) + 1:\n                dp[i] = dp[j] + [lst[i]]\n    \n    return max(dp, key=len)\n```"
    },
    {
        "id":323,
        "response":"```python\nimport re\n\ncheck_string = lambda s: len(s) >= 8 and bool(re.search(r\"[a-z]\", s)) and bool(re.search(r\"[A-Z]\", s)) and bool(re.search(r\"\\d\", s))\n```"
    },
    {
        "id":324,
        "response":"```python\nimport sys\n\ndef max_sum_increasing_subsequence(lst, n):\n    max_sum = [0] * n\n    max_sum[0] = lst[0]\n    \n    for i in range(1, n):\n        max_sum[i] = lst[i]\n        for j in range(i):\n            if lst[i] > lst[j] and max_sum[i] < max_sum[j] + lst[i]:\n                max_sum[i] = max_sum[j] + lst[i]\n                \n    return max(max_sum)\n```"
    },
    {
        "id":325,
        "response":"```python\nimport math\nfrom typing import List\n\ndef parallel_lines(lst: List[float], lst2: List[float]) -> bool:\n    x1, y1, x2, y2 = lst\n    x3, y3, x4, y4 = lst2\n\n    if x2 - x1 == 0 and x4 - x3 == 0:\n        return True\n    elif x2 - x1 == 0 or x4 - x3 == 0:\n        return False\n    else:\n        slope1 = (y2 - y1) \/ (x2 - x1)\n        slope2 = (y4 - y3) \/ (x4 - x3)\n        return math.isclose(slope1, slope2)\n```"
    },
    {
        "id":326,
        "response":"```python\nimport re\n\ndef capitalize_first_last_letters(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 1:\n            result.append(word[0].upper() + word[1:-1] + word[-1].upper())\n        else:\n            result.append(word.upper())\n    return ' '.join(result)\n```"
    },
    {
        "id":327,
        "response":"```python\nfrom typing import List, Tuple\n\ndef get_pairs_count(lst: List[int], n: int, n2: int) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] == n2:\n                result.append((lst[i], lst[j]))\n    return result\n```"
    },
    {
        "id":328,
        "response":"```python\nimport sys\nfrom typing import List\n\ndef min_length(lst: List) -> int:\n    return min(len(i) for i in lst) if lst else 0\n```"
    },
    {
        "id":329,
        "response":"```python\nimport typing\n\ndef jacobsthal_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    jacobsthal = [0] * (n + 1)\n    lucas = [0] * (n + 1)\n    \n    jacobsthal[0] = 0\n    jacobsthal[1] = 1\n    lucas[0] = 2\n    lucas[1] = 1\n    \n    for i in range(2, n + 1):\n        jacobsthal[i] = jacobsthal[i - 1] + 2 * jacobsthal[i - 2]\n        lucas[i] = lucas[i - 1] + 2 * lucas[i - 2]\n    \n    return lucas[n]\n```"
    },
    {
        "id":330,
        "response":"```python\nimport math\nfrom typing import List\n\ndef negative_count(lst: List[int]) -> float:\n    negative = sum(1 for num in lst if num < 0)\n    return negative \/ len(lst)\n```"
    },
    {
        "id":331,
        "response":"```python\nimport sys\nfrom typing import List\n\ndef min_coins(lst: List[int], n: int, n2: int) -> int:\n    coins = [sys.maxsize] * (n2 + 1)\n    coins[0] = 0\n\n    for coin in lst:\n        for i in range(coin, n2 + 1):\n            coins[i] = min(coins[i], coins[i - coin] + 1)\n\n    return coins[n2] if coins[n2] != sys.maxsize else -1\n```"
    },
    {
        "id":332,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef check_permutation(s: str, s2: str) -> bool:\n    return sorted(s) == sorted(s2)\n```"
    },
    {
        "id":333,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_datatype(tup, param):\n    if param == int:\n        return tuple(i for i in tup if not isinstance(i, int))\n    elif param == str:\n        return tuple(i for i in tup if not isinstance(i, str))\n    elif param == float:\n        return tuple(i for i in tup if not isinstance(i, float))\n    elif param == bool:\n        return tuple(i for i in tup if not isinstance(i, bool))\n    elif param == list:\n        return tuple(i for i in tup if not isinstance(i, list))\n    elif param == dict:\n        return tuple(i for i in tup if not isinstance(i, dict))\n    elif param == tuple:\n        return tuple(i for i in tup if not isinstance(i, tuple))\n    elif param == set:\n        return tuple(i for i in tup if not isinstance(i, set))\n    else:\n        return tup\n```"
    },
    {
        "id":334,
        "response":"```python\nimport re\n\ndef search_literal(s, s2):\n    try:\n        return s.index(s2)\n    except ValueError:\n        return -1\n```"
    },
    {
        "id":335,
        "response":"```python\nimport math\n\ndef topbottom_surfacearea(n):\n    pi = math.pi\n    return pi * n * n\n```"
    },
    {
        "id":336,
        "response":"```python\nfrom typing import List, Any\n\ndef nth_items(lst: List[Any], n: int) -> Any:\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"Index must be an integer\")\n    if n < 0 or n >= len(lst):\n        raise IndexError(\"Index out of range\")\n    return lst[n]\n```"
    },
    {
        "id":337,
        "response":"```python\nimport re\nfrom typing import List, Dict\n\ndef first_repeated_word(s: str) -> str:\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    word_count: Dict[str, int] = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word in words:\n        if word_count[word] > 1:\n            return word\n    return \"\"\n```"
    },
    {
        "id":338,
        "response":"```python\nimport typing\nimport itertools\n\ndef string_list_to_tuple(tup: typing.List[str]) -> typing.Tuple[str]:\n    return tuple(tup)\n```"
    },
    {
        "id":339,
        "response":"```python\nimport typing\nimport itertools\n\ndef basesnum_coresspondingnum(lst: typing.List[int], lst2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x: x[0]**x[1], zip(lst, lst2)))\n```"
    },
    {
        "id":340,
        "response":"```python\nfrom collections import Counter\nimport sys\n\ndef find_Diff(lst, n):\n    freq = Counter(lst)\n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    return max_freq - min_freq\n```"
    },
    {
        "id":341,
        "response":"```python\nimport math\n\ndef check_abundant(n: int) -> bool:\n    if n < 1:\n        return False\n    sum_divisors = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n \/\/ i:\n                sum_divisors += n \/\/ i\n    return sum_divisors > n\n```"
    },
    {
        "id":342,
        "response":"```python\nimport re\n\ndef fill_spaces(s: str) -> str:\n    return re.sub('[ ,.]', '|', s)\n```"
    },
    {
        "id":343,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef count_digits(n: int, n2: int) -> int:\n    sum = n + n2\n    return len(str(abs(sum)))\n```"
    },
    {
        "id":344,
        "response":"```python\nimport typing\nimport itertools\n\ndef flatten_tuple(lst: typing.Union[typing.List, typing.Tuple]) -> typing.List:\n    result = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            result.extend(flatten_tuple(item))\n        else:\n            result.append(item)\n    return result\n```"
    },
    {
        "id":345,
        "response":"```python\nimport math\n\ndef toggle_F_and_L_bits(n):\n    bits = bin(n)[2:]\n    first_bit = bits[0]\n    last_bit = bits[-1]\n    first_bit_toggled = '1' if first_bit == '0' else '0'\n    last_bit_toggled = '1' if last_bit == '0' else '0'\n    if len(bits) == 1:\n        return int(last_bit_toggled, 2)\n    else:\n        return int(first_bit_toggled + bits[1:-1] + last_bit_toggled, 2)\n```"
    },
    {
        "id":346,
        "response":"```python\nimport re\nfrom typing import Union\n\ndef last_occurence_char(s: str, s2: Union[str, list]) -> dict:\n    result = {}\n    if isinstance(s2, str):\n        for char in s2:\n            result[char] = s.rfind(char)\n    elif isinstance(s2, list):\n        for char in s2:\n            result[char] = s.rfind(char)\n    return result\n```"
    },
    {
        "id":347,
        "response":"```python\nimport math\n\ndef Total_Hamming_Distance(n):\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x = bin(i)[2:].zfill(30)\n            y = bin(j)[2:].zfill(30)\n            total += sum(c1 != c2 for c1, c2 in zip(x, y))\n    return total\n```"
    },
    {
        "id":348,
        "response":"```python\nimport typing\n\ndef longest_increasing_subsequence(lst: typing.List[int]) -> int:\n    if not lst:\n        return 0\n\n    dp = [1] * len(lst)\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n```"
    },
    {
        "id":349,
        "response":"```python\nimport math\n\ndef odd_Num_Sum(n):\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 != 0:\n            sum += num ** 5\n            count += 1\n        num += 1\n    return sum\n```"
    },
    {
        "id":350,
        "response":"```python\nimport sys\n\ndef find_Max(lst, n, n2):\n    max_val = -sys.maxsize - 1\n    for i in range(n):\n        for j in range(n2):\n            if lst[i][j] > max_val:\n                max_val = lst[i][j]\n    return max_val\n```"
    },
    {
        "id":351,
        "response":"```python\nimport typing\n\ndef extract_column(lst: typing.List[typing.List[typing.Any]], n: int) -> typing.List[typing.Any]:\n    result = []\n    for row in lst:\n        if len(row) > n:\n            result.append(row[n])\n    return result\n```"
    },
    {
        "id":352,
        "response":"```python\nimport typing\n\ndef Seq_Linear(lst: typing.List[int]) -> bool:\n    if len(lst) < 2:\n        return True\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != diff:\n            return False\n    return True\n```"
    },
    {
        "id":353,
        "response":"```python\nimport math\nimport re\nimport typing\nimport itertools\n\ndef tuple_to_float(tup: typing.Tuple[str]) -> float:\n    return float(''.join(tup))\n```"
    },
    {
        "id":354,
        "response":"```python\nimport typing\nimport itertools\n\ndef Split(lst: typing.List[typing.Union[int, str]]) -> typing.Tuple[typing.List[int], typing.List[str]]:\n    even_numbers = [i for i in lst if isinstance(i, int) and i % 2 == 0]\n    odd_numbers = [i for i in lst if isinstance(i, int) and i % 2 != 0]\n    strings = [i for i in lst if isinstance(i, str)]\n    return odd_numbers, strings\n```"
    },
    {
        "id":355,
        "response":"```python\nimport math\n\ndef difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n```"
    },
    {
        "id":356,
        "response":"```python\nimport itertools\nimport re\nimport typing\n\ndef find_Odd_Pair(lst, n):\n    xor_result = 0\n    for num in lst:\n        xor_result ^= num\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] ^ lst[j] == xor_result:\n                return (lst[i], lst[j])\n    return None\n```"
    },
    {
        "id":357,
        "response":"```python\nimport re\n\ndef toggle_string(s: str) -> str:\n    return s.swapcase()\n```"
    },
    {
        "id":358,
        "response":"```python\nimport math\n\ndef digit_distance_nums(n, n2):\n    n_str = str(n)\n    n2_str = str(n2)\n    max_len = max(len(n_str), len(n2_str))\n    n_str = n_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    return sum(abs(int(a) - int(b)) for a, b in zip(n_str, n2_str))\n```"
    },
    {
        "id":359,
        "response":"```python\nimport sys\nimport math\nimport itertools\n\ndef max_sub_array_sum(lst, n):\n    max_sum = -sys.maxsize - 1\n    current_sum = 0\n\n    for i in range(n):\n        current_sum = current_sum + lst[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n```"
    },
    {
        "id":360,
        "response":"```python\nimport typing\nimport itertools\n\ndef union_elements(tup: typing.Tuple, tup2: typing.Tuple) -> typing.Set:\n    return set(tup) | set(tup2)\n```"
    },
    {
        "id":361,
        "response":"```python\nimport itertools\nimport typing\n\ndef assign_elements(lst: typing.Tuple[typing.Any, typing.Any, typing.Any]) -> typing.Tuple[typing.Any, typing.Any, typing.Any]:\n    a, b, c = lst\n    return (a, b, c), (a, c, b), (b, a, c), (b, c, a), (c, a, b), (c, b, a)\n```"
    },
    {
        "id":362,
        "response":"```python\nimport typing\n\ndef Find_Max_Length(lst: typing.List[typing.List[int]]) -> int:\n    max_length = 0\n    for sub_list in lst:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n```"
    },
    {
        "id":363,
        "response":"```python\nimport re\nfrom typing import List\n\ndef extract_values(s: str) -> List[str]:\n    return re.findall(r'\"([^\"]*)\"', s)\n```"
    },
    {
        "id":364,
        "response":"```python\nimport itertools\nimport math\n\ndef count_Pairs(lst, n):\n    count = 0\n    pairs = list(itertools.combinations(lst, 2))\n    for pair in pairs:\n        if math.gcd(pair[0], pair[1]) == 1:\n            count += 1\n    return count\n```"
    },
    {
        "id":365,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef split(s: str) -> typing.List[str]:\n    return list(s)\n```"
    },
    {
        "id":366,
        "response":"```python\nimport math\n\ndef sum_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))\n```"
    },
    {
        "id":367,
        "response":"```python\nimport typing\n\ndef issort_list(lst: typing.List[int]) -> bool:\n    return lst == sorted(lst)\n```"
    },
    {
        "id":368,
        "response":"```python\nimport typing\n\ndef empty_list(n: int) -> typing.List[dict]:\n    return [{} for _ in range(n)]\n```"
    },
    {
        "id":369,
        "response":"```python\nimport typing\n\ndef sort_sublists(lst: typing.List[typing.List[str]]) -> typing.List[typing.List[str]]:\n    return [sorted(sublist) for sublist in lst]\n```"
    },
    {
        "id":370,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef remove_words(lst, lst2):\n    result = [word for word in lst if not any(char in word for char in lst2)]\n    return result\n```"
    },
    {
        "id":371,
        "response":"```python\nimport itertools\nimport typing\n\ndef max_sum_pair_diff_lessthan_K(lst: typing.List[int], n: int, n2: int) -> int:\n    max_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(lst[i] - lst[j]) < n2 and lst[i] + lst[j] > max_sum:\n                max_sum = lst[i] + lst[j]\n    return max_sum\n```"
    },
    {
        "id":372,
        "response":"```python\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(lst: List[int]) -> List[int]:\n    count = Counter(lst)\n    result = []\n    for num, freq in count.items():\n        if freq == 1:\n            result.append(num)\n    return result\n```"
    },
    {
        "id":373,
        "response":"```python\nimport math\nimport functools\nimport operator\n\ndef unique_product(lst):\n    return functools.reduce(operator.mul, set(lst), 1)\n```"
    },
    {
        "id":374,
        "response":"```python\nimport math\n\ndef surfacearea_cylinder(n, n2):\n    return 2 * math.pi * n * (n + n2)\n```"
    },
    {
        "id":375,
        "response":""
    },
    {
        "id":376,
        "response":"```python\nimport typing\n\ndef is_Sub_Array(lst: typing.List[int], lst2: typing.List[int], n: int, n2: int) -> bool:\n    for i in range(n - n2 + 1):\n        if lst[i:i+n2] == lst2:\n            return True\n    return False\n```"
    },
    {
        "id":377,
        "response":"```python\nimport math\n\ndef last_Digit_Factorial(n):\n    if n <= 9:\n        return math.factorial(n) % 10\n    else:\n        return 0\n```"
    },
    {
        "id":378,
        "response":"```python\nimport itertools\n\ndef interleave_lists(*args):\n    return list(itertools.chain(*zip(*args)))\n```"
    },
    {
        "id":379,
        "response":"```python\nimport itertools\n\ndef find_dissimilar(tup, tup2):\n    set1 = set(tup)\n    set2 = set(tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)\n```"
    },
    {
        "id":380,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef extract_even(tup):\n    def flatten(nested_tup):\n        for item in nested_tup:\n            if isinstance(item, (list, tuple)):\n                yield from flatten(item)\n            else:\n                yield item\n\n    even_nums = [item for item in flatten(tup) if isinstance(item, int) and item % 2 == 0]\n    return even_nums\n```"
    },
    {
        "id":381,
        "response":"```python\nimport math\n\ndef surface_Area(n, n2):\n    return 4 * n2 + 2 * n * (n2 - n)\n```"
    },
    {
        "id":382,
        "response":"```python\nimport typing\n\ndef my_dict(dct: typing.Dict) -> bool:\n    return len(dct) == 0\n```"
    },
    {
        "id":383,
        "response":"```python\nimport math\n\ndef catalan_number(n):\n    return math.factorial(2*n) \/\/ (math.factorial(n+1) * math.factorial(n))\n```"
    },
    {
        "id":384,
        "response":"```python\nimport re\nfrom typing import List, Tuple\n\ndef find_adverbs(s: str) -> List[Tuple[str, int]]:\n    adverbs = re.findall(r'\\b\\w+(ly|wise|wards|ways)\\b', s)\n    positions = [(m.start(), m.group()) for m in re.finditer(r'\\b\\w+(ly|wise|wards|ways)\\b', s)]\n    return [(word, pos) for word, pos in positions]\n```"
    },
    {
        "id":385,
        "response":"```python\nimport heapq\nfrom typing import List, Tuple\n\ndef expensive_items(lst: List[Tuple[str, int]], n: int) -> List[Tuple[str, int]]:\n    return heapq.nlargest(n, lst, key=lambda x: x[1])\n```"
    },
    {
        "id":386,
        "response":"```python\nimport typing\n\ndef split_Arr(lst: typing.List[int], n: int, n2: int) -> typing.List[int]:\n    return lst[n:] + lst[:n]\n```"
    },
    {
        "id":387,
        "response":"```python\nimport typing\n\ndef list_tuple(lst: typing.List[typing.Any]) -> typing.Tuple[typing.Any, ...]:\n    return tuple(lst)\n```"
    },
    {
        "id":388,
        "response":"```python\nimport math\nimport statistics\nimport re\nfrom typing import List\n\ndef big_diff(lst: List[int]) -> int:\n    return max(lst) - min(lst)\n```"
    },
    {
        "id":389,
        "response":"```python\nimport math\n\ndef perfect_squares(n, n2):\n    result = []\n    for i in range(n, n2+1):\n        root = math.sqrt(i)\n        if root == int(root):\n            result.append(i)\n    return result\n```"
    },
    {
        "id":390,
        "response":"```python\nimport math\n\ndef polar_rect(n, n2):\n    return n * math.cos(n2), n * math.sin(n2)\n```"
    },
    {
        "id":391,
        "response":"```python\nimport typing\n\ndef swap_List(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":392,
        "response":"```python\nimport math\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(n + 1):\n        sum += math.comb(n, i) * i * (n - i)\n    return sum\n```"
    },
    {
        "id":393,
        "response":"```python\nimport re\n\ndef removezero_ip(s):\n    return re.sub(r'\\b0+(\\d)', r'\\1', s)\n```"
    },
    {
        "id":394,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef diff_even_odd(lst: typing.List[int]) -> int:\n    even = next((num for num in lst if num % 2 == 0), None)\n    odd = next((num for num in lst if num % 2 != 0), None)\n    if even is not None and odd is not None:\n        return abs(even - odd)\n    else:\n        return None\n```"
    },
    {
        "id":395,
        "response":"```python\nfrom collections import deque\nimport itertools\n\ndef min_Swaps(s1, s2):\n    s1 = list(s1)\n    s2 = list(s2)\n    n = len(s1)\n    diff = [i for i in range(n) if s1[i] != s2[i]]\n    res = 0\n    i = 0\n    while i < len(diff):\n        if s1[diff[i]] == s1[diff[i+1]] and s2[diff[i]] == s2[diff[i+1]]:\n            res += 1\n            i += 2\n        else:\n            res += 1\n            i += 1\n    return res\n```"
    },
    {
        "id":396,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef tuple_size(tup: typing.Tuple) -> int:\n    return len(tup)\n```"
    },
    {
        "id":397,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef find_kth(lst: List[int], lst2: List[int], n: int, n2: int, n3: int) -> int:\n    i = j = 0\n    for _ in range(n3):\n        if i < n and (j == n2 or lst[i] < lst2[j]):\n            result = lst[i]\n            i += 1\n        else:\n            result = lst2[j]\n            j += 1\n    return result\n```"
    },
    {
        "id":398,
        "response":"```python\nimport math\n\ndef armstrong_number(n):\n    temp = n\n    sum = 0\n    digits = math.floor(math.log10(n)) + 1\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** digits\n        temp \/\/= 10\n    return sum == n\n```"
    },
    {
        "id":399,
        "response":"```python\nimport math\nimport statistics\nimport typing\n\ndef sum_average(n: int) -> typing.Tuple[int, float]:\n    numbers = list(range(1, n + 1))\n    total_sum = sum(numbers)\n    average = statistics.mean(numbers)\n    return total_sum, average\n```"
    },
    {
        "id":400,
        "response":"```python\nimport re\nimport typing\nimport itertools\n\ndef is_Even(n):\n    return not (n & 1)\n```"
    }
]