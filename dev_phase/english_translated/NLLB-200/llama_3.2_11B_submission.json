[
    {
        "id":1,
        "response":"from typing import List\n\ndef max_chain_length(lst: List[str], n: int) -> str:\n    memo = {}\n\n    def longest_common_subsequence(i: int, j: int) -> str:\n        if (i, j) in memo:\n            return memo[(i, j)]\n\n        if i == n or j == n:\n            return \"\"\n\n        if lst[i] == lst[j]:\n            result = lst[i] + longest_common_subsequence(i + 1, j + 1)\n        else:\n            result = max(longest_common_subsequence(i + 1, j), longest_common_subsequence(i, j + 1), key=len)\n\n        memo[(i, j)] = result\n        return result\n\n    return longest_common_subsequence(0, 0)"
    },
    {
        "id":2,
        "response":"import itertools\n\ndef first_repeated_char(s):\n    s = s.lower()\n    for char, group in itertools.groupby(s):\n        if len(list(group)) > 1:\n            return char\n    return None"
    },
    {
        "id":3,
        "response":"import random\n\ndef get_ludic(n: int) -> float:\n    return random.random()"
    },
    {
        "id":4,
        "response":"import re\n\ndef reverse_words(s):\n    words = re.split('(\\W)', s)\n    return ' '.join(word[::-1] for word in words if word.isalnum())"
    },
    {
        "id":5,
        "response":"import math\n\ndef prime_num(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "id":6,
        "response":"import math\n\ndef radian_degree(n):\n    return math.degrees(n)"
    },
    {
        "id":7,
        "response":"import re\n\ndef find_literals(s, s2):\n    pattern = re.compile(s2)\n    matches = pattern.finditer(s)\n    return [match.start() for match in matches]"
    },
    {
        "id":8,
        "response":"import math\n\ndef bell_Number(n):\n    if n < 0:\n        return \"Error: n should be a non-negative integer\"\n    elif n == 0:\n        return 1\n    else:\n        bell = [0]*(n+1)\n        bell[0] = 1\n        for i in range(1, n+1):\n            bell[i] = 0\n            for j in range(i):\n                bell[i] += math.comb(i-1, j) * bell[j]\n        return bell[n]"
    },
    {
        "id":9,
        "response":"import math\nfrom typing import List\n\ndef floor_Min(n: List[int]) -> int:\n    return min(n)"
    },
    {
        "id":10,
        "response":"import typing\n\ndef remove_kth_element(lst: typing.List[int], k: int) -> typing.List[int]:\n    if k < 1 or k > len(lst):\n        raise ValueError(\"k \u098f\u09b0 \u09ae\u09be\u09a8 \u0985\u09ac\u09b6\u09cd\u09af\u0987 1 \u098f\u09ac\u0982 \u09a4\u09be\u09b2\u09bf\u0995\u09be\u09b0 \u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af\u09c7\u09b0 \u09ae\u09a7\u09cd\u09af\u09c7 \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    return lst[:k-1] + lst[k:]"
    },
    {
        "id":11,
        "response":"from typing import List, Tuple\n\ndef max_of_nth(lst: List[Tuple], n: int) -> int:\n    if not lst or n < 1:\n        return 0\n    return max(col[n-1] for col in lst if len(col) > n-1)"
    },
    {
        "id":12,
        "response":"import itertools\n\ndef merge(lst):\n    return list(itertools.chain([lst[0]], lst[1:-1], [lst[-1]]))"
    },
    {
        "id":13,
        "response":"import itertools\n\ndef maximum_value(lst):\n    return max(lst, key=lambda x: max(x))"
    },
    {
        "id":14,
        "response":"from typing import List, Tuple\n\ndef cummulative_sum(lst: List[Tuple[int, int]]) -> int:\n    total = 0\n    for pair in lst:\n        total += pair[0] + pair[1]\n    return total"
    },
    {
        "id":15,
        "response":"import math\n\ndef average_tuple(tup):\n    flat_list = [item for sublist in tup for item in sublist]\n    return sum(flat_list) \/ len(flat_list)"
    },
    {
        "id":16,
        "response":"import itertools\n\ndef tuple_modulo(tup, tup2):\n    result = []\n    for a, b in itertools.zip_longest(tup, tup2):\n        if a is not None and b is not None:\n            result.append((a % b, a, b))\n        elif a is not None:\n            result.append((a, a, b))\n        elif b is not None:\n            result.append((a, a, b))\n    return result"
    },
    {
        "id":17,
        "response":"import math\n\ndef min_Jumps(n, n2, n3):\n    return math.ceil(math.sqrt(n**2 + n2**2))"
    },
    {
        "id":18,
        "response":"import math\nfrom typing import List, Tuple\n\ndef div_list(lst: List[int], lst2: List[int]) -> Tuple[List[int], List[int]]:\n    lst1 = []\n    lst3 = []\n    for i in lst:\n        if i % 2 == 0:\n            lst1.append(i)\n        else:\n            lst3.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            lst1.append(i)\n        else:\n            lst3.append(i)\n    return lst1, lst3"
    },
    {
        "id":19,
        "response":"import re\n\ndef move_num(s):\n    return re.sub(r'\\D', '', s)"
    },
    {
        "id":20,
        "response":"from typing import List\n\ndef largest_subset(lst: List[int], n: int) -> int:\n    dp = [0] * (n + 1)\n    max_val = 0\n    for num in lst:\n        if num <= n:\n            dp[num] = max(dp[num], 1 + dp[num \/\/ 2])\n            max_val = max(max_val, dp[num])\n    return max_val"
    },
    {
        "id":21,
        "response":"import re\n\ndef increment_numerics(lst, n):\n    result = []\n    for string in lst:\n        result.append(re.sub(r'(\\d+)', lambda x: str(int(x.group()) + n), string))\n    return result"
    },
    {
        "id":22,
        "response":"import numpy as np\nfrom typing import List\n\ndef get_median(lst: List[int], lst2: List[int], n: int) -> float:\n    if len(lst) != n or len(lst2) != n:\n        raise ValueError(\"\u0989\u09ad\u09af\u09bc \u09a4\u09be\u09b2\u09bf\u0995\u09be\u09b0 \u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af \u098f\u0995\u0987 \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n\n    combined = np.sort(np.concatenate((lst, lst2)))\n    size = len(combined)\n\n    if size % 2 == 0:\n        median = (combined[size \/\/ 2 - 1] + combined[size \/\/ 2]) \/ 2\n    else:\n        median = combined[size \/\/ 2]\n\n    return median"
    },
    {
        "id":23,
        "response":"import math\n\ndef nth_nums(lst, n):\n    return [i ** n for i in lst]"
    },
    {
        "id":24,
        "response":"import re\n\ndef is_upper(s):\n    return re.match(\"^[A-Z]+$\", s) is not None"
    },
    {
        "id":25,
        "response":"import typing\n\ndef swap_List(lst: typing.List[int]) -> typing.List[int]:\n    if len(lst) <= 1:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":26,
        "response":"import math\n\ndef triangle_area(n):\n    r = n \/ (2 * math.pi)  # \u09b8\u09c7\u09ae\u09bf \u09b8\u09be\u09b0\u09cd\u0995\u09c7\u09b2\u09c7\u09b0 \u09ac\u09cd\u09af\u09be\u09b8\u09be\u09b0\u09cd\u09a7\n    a = r  # \u09aa\u09cd\u09b0\u09a5\u09ae \u09ac\u09be\u09b9\u09c1\u09b0 \u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af\n    b = r  # \u09a6\u09cd\u09ac\u09bf\u09a4\u09c0\u09af\u09bc \u09ac\u09be\u09b9\u09c1\u09b0 \u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af\n    c = 2 * r  # \u09a4\u09c3\u09a4\u09c0\u09af\u09bc \u09ac\u09be\u09b9\u09c1\u09b0 \u09a6\u09c8\u09b0\u09cd\u0998\u09cd\u09af\n    s = (a + b + c) \/ 2  # \u09b8\u09c7\u09ae\u09bf \u09aa\u09c7\u09b0\u09bf\u09ae\u09bf\u099f\u09be\u09b0\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))  # \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c\u09c7\u09b0 \u0995\u09cd\u09b7\u09c7\u09a4\u09cd\u09b0\u09ab\u09b2\n    return area"
    },
    {
        "id":27,
        "response":"import itertools\n\ndef find_First_Missing(lst, n, n2):\n    if n > n2:\n        return \"Invalid input\"\n    lst.sort()\n    for i in range(n, n2 + 1):\n        if i not in lst:\n            return i\n    return n2 + 1"
    },
    {
        "id":28,
        "response":"import re\n\ndef replace_spaces(s):\n    return re.sub(' ', '*', s)"
    },
    {
        "id":29,
        "response":"import itertools\n\ndef Split(lst):\n    even_nums = [num for num in lst if num % 2 == 0]\n    return even_nums"
    },
    {
        "id":30,
        "response":"import itertools\n\ndef get_coordinates(tup):\n    n = len(tup)\n    coordinates = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            coordinates.add(tuple(sorted((tup[i], tup[j]))))\n    return coordinates"
    },
    {
        "id":31,
        "response":"import re\n\ndef replace_spaces(s):\n    s = re.sub(' ', '_', s)\n    s = re.sub('_', ' ', s)\n    return s"
    },
    {
        "id":32,
        "response":"import itertools\n\ndef move_zero(lst):\n    return list(itertools.filterfalse(lambda x: x == 0, lst)) + [x for x in lst if x == 0]"
    },
    {
        "id":33,
        "response":"import itertools\n\ndef pair_OR_Sum(lst, n):\n    result = 0\n    for pair in itertools.combinations(lst, 2):\n        result += pair[0] ^ pair[1]\n    return result"
    },
    {
        "id":34,
        "response":"import math\n\ndef even_Power_Sum(n: int) -> int:\n    return sum([i**4 for i in range(1, n+1) if i % 2 == 0])"
    },
    {
        "id":35,
        "response":"import heapq\n\ndef heap_sort(lst):\n    heapq.heapify(lst)\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(heapq.heappop(lst))\n    return sorted_lst"
    },
    {
        "id":36,
        "response":"import numpy as np\n\ndef Check_Solution(n, n2, n3, n4):\n    coefficients = [n4, n3, n2, n]\n    roots = np.roots(coefficients)\n    return len(np.unique(roots)) == 4"
    },
    {
        "id":37,
        "response":"import math\n\ndef noprofit_noloss(n: int, n2: int) -> bool:\n    return n == n2"
    },
    {
        "id":38,
        "response":"import math\n\ndef wind_chill(n, n2):\n    if n < 50 or n2 < 3:\n        return \"\u09ac\u09be\u09af\u09bc\u09c1 \u09b6\u09c0\u09a4\u09b2\u09a4\u09be \u09b8\u09c2\u099a\u0995 \u0997\u09a3\u09a8\u09be \u0995\u09b0\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u09a4\u09be\u09aa\u09ae\u09be\u09a4\u09cd\u09b0\u09be \u098f\u09ac\u0982 \u09ac\u09c7\u0997 \u0989\u09ad\u09af\u09bc\u0987 50 \u098f\u09ac\u0982 3 \u098f\u09b0 \u09a5\u09c7\u0995\u09c7 \u0995\u09ae \u09b9\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7 \u09a8\u09be\"\n    else:\n        return 13.12 + 0.6215 * n - 11.37 * math.pow(n2, 0.16) + 0.3965 * n * math.pow(n2, 0.16)"
    },
    {
        "id":39,
        "response":"import re\n\ndef sample_nam(lst):\n    return sum(len(re.sub('[^a-zA-Z]', '', name)) for name in lst if re.match('^[a-z]', name))"
    },
    {
        "id":40,
        "response":"import re\n\ndef remove_parenthesis(s: str) -> str:\n    return re.sub(r'\\([^)]*\\)', '', s)"
    },
    {
        "id":41,
        "response":"import math\n\ndef is_nonagonal(n: int) -> bool:\n    return (math.sqrt(8*n + 1) - 1) \/ 2 % 1 == 0"
    },
    {
        "id":42,
        "response":"import typing\nimport itertools\n\ndef remove_similar_row(lst: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    if not lst:\n        return []\n    \n    unique_rows = []\n    for row in lst:\n        if not any(itertools.starmap(lambda x, y: x == y, zip(row, unique_rows))):\n            unique_rows.append(row)\n    \n    return unique_rows"
    },
    {
        "id":43,
        "response":"import re\n\ndef text_match_wordz_middle(s: str) -> bool:\n    return bool(re.search(r'\\Bz\\B|\\Bz\\b|\\bz\\B', s))"
    },
    {
        "id":44,
        "response":"import typing\n\ndef reverse_Array_Upto_K(lst: typing.List[int], k: int) -> typing.List[int]:\n    return lst[-k:][::-1] + lst[:-k]"
    },
    {
        "id":45,
        "response":"import math\n\ndef find_k_product(lst, k):\n    if not lst or k < 1:\n        return None\n    product = 1\n    for i in range(k):\n        if i < len(lst):\n            product *= lst[i]\n        else:\n            return None\n    return product"
    },
    {
        "id":46,
        "response":"import math\n\ndef No_of_cubes(n, k):\n    return math.ceil(n ** 3 \/ k ** 3)"
    },
    {
        "id":47,
        "response":"import re\n\ndef split_upperstring(s: str) -> list:\n    return re.findall(r'[A-Z]+', s)"
    },
    {
        "id":48,
        "response":"import typing\n\ndef exchange_elements(lst: typing.List[int]) -> typing.List[int]:\n    if len(lst) <= 1:\n        return lst\n    for i in range(len(lst) - 1):\n        if i + 1 < len(lst) and lst[i] > lst[i + 1]:\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst"
    },
    {
        "id":49,
        "response":"import typing\n\ndef sum_Range_list(lst: typing.List[int], n: int, n2: int) -> int:\n    return sum(i for i in lst if n <= i <= n2)"
    },
    {
        "id":50,
        "response":"import itertools\n\ndef are_Equal(lst, lst2, n, n2):\n    if len(lst) != n or len(lst2) != n2:\n        return False\n    return sorted(lst) == sorted(lst2)"
    },
    {
        "id":51,
        "response":"import itertools\n\ndef check_subset(tup, tup2):\n    return set(tup).issubset(set(tup2))"
    },
    {
        "id":52,
        "response":"import typing\n\ndef matrix_to_list(matrix: typing.List[typing.List[typing.Any]]) -> typing.List[typing.List[typing.List[typing.Any]]]:\n    return [[element] for row in matrix for element in row]"
    },
    {
        "id":53,
        "response":"import collections\nimport typing\n\ndef grouping_dictionary(lst: typing.List[typing.Tuple[str, str]]) -> typing.Dict[str, typing.List[str]]:\n    result = collections.defaultdict(list)\n    for key, value in lst:\n        result[key].append(value)\n    return dict(result)"
    },
    {
        "id":54,
        "response":"import math\n\ndef rectangle_perimeter(n, n2):\n    return 2 * (n + n2)"
    },
    {
        "id":55,
        "response":"import math\n\ndef fifth_Power_Sum(n: int) -> int:\n    return sum([i**5 for i in range(1, n+1)])"
    },
    {
        "id":56,
        "response":"import itertools\n\ndef find_Min_Sum(lst, lst2, n):\n    min_sum = float('inf')\n    for p in itertools.permutations(range(n)):\n        diff_sum = 0\n        for i in range(n):\n            diff_sum += abs(lst[i] - lst2[p[i]])\n        min_sum = min(min_sum, diff_sum)\n    return min_sum"
    },
    {
        "id":57,
        "response":"import math\n\ndef first_Digit(n: int) -> int:\n    return int(math.factorial(n) \/ 10**int(math.log10(math.factorial(n))) % 10)"
    },
    {
        "id":58,
        "response":"import collections\n\ndef max_occurrences(lst):\n    return max(collections.Counter(lst).values())"
    },
    {
        "id":59,
        "response":"import itertools\n\ndef Repeat(lst):\n    return list(itertools.chain.from_iterable(itertools.repeat(lst, 2)))"
    },
    {
        "id":60,
        "response":"import itertools\n\ndef find_Points(n, n2, n3, n4):\n    range1 = list(range(n, n2))\n    range2 = list(range(n3, n4))\n    points = list(itertools.product(range1, range2))\n    return [point for point in points if point[0] not in range2 and point[1] not in range1]"
    },
    {
        "id":61,
        "response":"import itertools\n\ndef max_sum_of_three_consecutive(lst, n):\n    max_sum = float('-inf')\n    for i in range(len(lst) - 2):\n        for triplet in itertools.combinations(lst, 3):\n            if i < triplet[0] and triplet[0] < i+2 and triplet[1] == triplet[0]+1 and triplet[2] == triplet[1]+1:\n                max_sum = max(max_sum, sum(triplet))\n    return max_sum"
    },
    {
        "id":62,
        "response":"import re\nfrom typing import Dict\n\ndef sorted_dict(dct: Dict) -> Dict:\n    return dict(sorted(dct.items(), key=lambda item: item[0]))"
    },
    {
        "id":63,
        "response":"import math\nfrom typing import Tuple\n\ndef find_max_val(x: int, y: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b \/\/ gcd(a, b)\n\n    def find_k(x: int, y: int) -> int:\n        lcm_xy = lcm(x, y)\n        return lcm_xy \/\/ y\n\n    return find_k(x, y)"
    },
    {
        "id":64,
        "response":"import numpy as np\n\ndef average_Even(n):\n    even_numbers = [i for i in range(1, n) if i % 2 == 0]\n    return np.mean(even_numbers)"
    },
    {
        "id":65,
        "response":"import itertools\n\ndef move_last(lst):\n    if len(lst) == 0:\n        return []\n    return [lst[-1]] + lst[:-1]"
    },
    {
        "id":66,
        "response":"import re\n\ndef count_char(s, s2):\n    return len(re.findall(s2, s))"
    },
    {
        "id":67,
        "response":"import re\n\ndef Check_Vow(s, s2):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)"
    },
    {
        "id":68,
        "response":"import re\n\ndef replace(s, s2):\n    return re.sub(s, '', s2)"
    },
    {
        "id":69,
        "response":"import re\n\ndef check_IP(s):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    return bool(re.match(pattern, s))"
    },
    {
        "id":70,
        "response":"import numpy as np\n\ndef decreasing_trend(lst):\n    if len(lst) < 2:\n        return False\n    diff = np.diff(lst)\n    return np.all(diff <= 0)"
    },
    {
        "id":71,
        "response":"import math\ndef set_Right_most_Unset_Bit(n):\n    return n | (n + 1)"
    },
    {
        "id":72,
        "response":"import typing\n\ndef max_of_three(n: int, n2: int, n3: int) -> int:\n    return max(n, n2, n3)"
    },
    {
        "id":73,
        "response":"import functools\nimport operator\n\ndef convert(lst):\n    return functools.reduce(operator.mul, lst, 1)"
    },
    {
        "id":74,
        "response":"import re\nfrom typing import List\n\ndef remove_duplicate(s: str) -> str:\n    words = re.findall(r'\\b\\w+\\b', s)\n    return ' '.join(sorted(set(words), key=words.index))"
    },
    {
        "id":75,
        "response":"import typing\n\ndef sum_nums(n: int, n2: int, n3: int, n4: int) -> int:\n    total = n + n2\n    if n3 <= total <= n4:\n        return 20\n    else:\n        return total"
    },
    {
        "id":76,
        "response":"import re\n\ndef remove_extra_char(s: str) -> str:\n    return re.sub('[^a-zA-Z]', '', s)"
    },
    {
        "id":77,
        "response":"import math\n\ndef validity_triangle(n, n2, n3):\n    sides = [n, n2, n3]\n    sides.sort()\n    return sides[0] + sides[1] > sides[2]"
    },
    {
        "id":78,
        "response":"import re\n\ndef remove_spaces(s: str) -> str:\n    return re.sub(' ', '', s)"
    },
    {
        "id":79,
        "response":"from typing import Dict\n\ndef access_key(dct: Dict, n: int) -> any:\n    keys = list(dct.keys())\n    if n < 0 or n >= len(keys):\n        return None\n    return dct[keys[n]]"
    },
    {
        "id":80,
        "response":"import itertools\n\ndef increasing_trend(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "id":81,
        "response":"import math\n\ndef smallest_Divisor(n: int) -> int:\n    if n < 2:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n"
    },
    {
        "id":82,
        "response":"import numpy as np\n\ndef mul_list(lst, lst2):\n    return np.multiply(lst, lst2)"
    },
    {
        "id":83,
        "response":"import math\n\ndef sum_Square(n: int) -> bool:\n    for i in range(1, int(math.sqrt(n)) + 1):\n        for j in range(i, int(math.sqrt(n)) + 1):\n            if i * i + j * j == n:\n                return True\n    return False"
    },
    {
        "id":84,
        "response":"import re\n\ndef count_Char(s, s2):\n    return len(re.findall(s2, s))"
    },
    {
        "id":85,
        "response":"import math\n\ndef sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in range(2, n + 1) if is_prime(num))"
    },
    {
        "id":86,
        "response":"from typing import Tuple, Dict\nfrom collections import Counter\n\ndef freq_element(tup: Tuple) -> Dict:\n    freq = Counter(tup)\n    return dict(freq)"
    },
    {
        "id":87,
        "response":"import math\n\ndef recur_gcd(n, n2):\n    if n2 == 0:\n        return n\n    else:\n        return recur_gcd(n2, n % n2)"
    },
    {
        "id":88,
        "response":"import re\n\ndef len_complex(n, n2):\n    return len(str(n)) + len(str(n2))"
    },
    {
        "id":89,
        "response":"import sys\n\ndef min_jumps(lst, n):\n    if n <= 1:\n        return 0\n    jumps = [0] * n\n    jumps[0] = 0\n    max_reach = lst[0]\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps[i - 1] + 1\n        jumps[i] = sys.maxsize\n        for j in range(i):\n            if j + lst[j] >= i and j + lst[j] >= max_reach:\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                max_reach = max(max_reach, j + lst[j])\n    return jumps[n - 1]"
    },
    {
        "id":90,
        "response":"import itertools\n\ndef mul_consecutive_nums(lst):\n    result = 1\n    for num in itertools.groupby(lst, key=lambda x: x - int(x)):\n        group = list(num[1])\n        if len(group) > 1:\n            result *= int(group[0])\n    return result"
    },
    {
        "id":91,
        "response":"from typing import List, Tuple\n\ndef group_element(lst: List[Tuple]) -> List[List[Tuple]]:\n    result = {}\n    for item in lst:\n        key = item[1]\n        if key not in result:\n            result[key] = []\n        result[key].append(item)\n    return list(result.values())"
    },
    {
        "id":92,
        "response":"import math\n\ndef last_Two_Digits(n: int) -> int:\n    result = math.factorial(n)\n    return result % 100"
    },
    {
        "id":93,
        "response":"import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +', ' ', s)"
    },
    {
        "id":94,
        "response":"from typing import Dict\n\ndef extract_unique(dct: Dict[str, str]) -> list:\n    return list(set(dct.values()))"
    },
    {
        "id":95,
        "response":"import typing\n\ndef check_greater(tup: typing.Tuple[int, int], tup2: typing.Tuple[int, int]) -> typing.Tuple[bool, bool]:\n    return (tup[0] > tup2[0], tup[1] > tup2[1])"
    },
    {
        "id":96,
        "response":"import typing\n\ndef zip_list(lst: typing.List, lst2: typing.List) -> typing.List[typing.Tuple]:\n    return list(zip(lst, lst2))"
    },
    {
        "id":97,
        "response":"from typing import List\n\ndef count_even(lst: List[int]) -> int:\n    return sum(1 for num in lst if num % 2 == 0)"
    },
    {
        "id":98,
        "response":"import itertools\nfrom typing import Tuple, Dict\n\ndef sort_dict_item(dct: Dict) -> Tuple[Tuple]:\n    return tuple(sorted(dct.items(), key=lambda x: x[0]))"
    },
    {
        "id":99,
        "response":"import math\nfrom collections import Counter\n\ndef min_Swaps(s, s2):\n    if len(s) != len(s2):\n        return -1\n\n    diff = [a for a, b in zip(s, s2) if a != b]\n    if len(diff) != 0:\n        return -1\n\n    count = Counter(s)\n    odd_count = sum(val % 2 for val in count.values())\n    if odd_count > 1:\n        return -1\n\n    swaps = 0\n    for i, char in enumerate(s):\n        if char != s2[i]:\n            if s2[i] in s[:i] or s2[i] in s[i+1:]:\n                return -1\n            index = s.index(s2[i])\n            s = list(s)\n            s[i], s[index] = s[index], s[i]\n            swaps += 1\n            s = ''.join(s)\n\n    return swaps"
    },
    {
        "id":100,
        "response":"import typing\n\ndef count_range_in_list(lst: typing.List[int], n: int, n2: int) -> int:\n    return sum(1 for i in lst if n <= i <= n2)"
    },
    {
        "id":101,
        "response":"import numpy as np\n\ndef equilibrium_index(lst):\n    for i in range(len(lst)):\n        if np.sum(lst[:i]) == np.sum(lst[i+1:]):\n            return i\n    return -1"
    },
    {
        "id":102,
        "response":"import math\n\ndef removals(lst, n, n2):\n    lst.sort()\n    count = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] <= n:\n            i += 1\n        else:\n            if i > 0 and lst[i-1] <= n:\n                count += 1\n            i += 1\n    return count"
    },
    {
        "id":103,
        "response":"import typing\n\ndef is_key_present(dct: typing.Dict[str, str], n: str) -> bool:\n    return n in dct"
    },
    {
        "id":104,
        "response":"from typing import List\nimport math\n\ndef harmonic_sum(n: int) -> float:\n    if n < 1:\n        raise ValueError(\"n \u0985\u09ac\u09b6\u09cd\u09af\u0987 1 \u098f\u09b0 \u09ac\u09c7\u09b6\u09bf \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    return sum(1.0 \/ i for i in range(1, n + 1))"
    },
    {
        "id":105,
        "response":"import typing\nfrom typing import List\n\ndef sort_sublists(lst: List[List[int]]) -> List[List[int]]:\n    return sorted(lst, key=lambda x: (len(x), x))"
    },
    {
        "id":106,
        "response":"import typing\n\ndef is_subset(lst: typing.List[int], n: int, lst2: typing.List[int], n2: int) -> bool:\n    return set(lst) <= set(lst2)"
    },
    {
        "id":107,
        "response":"import math\n\ndef count_Set_Bits(n):\n    return bin(n).count('1')"
    },
    {
        "id":108,
        "response":"import typing\n\ndef Convert(s: str) -> typing.List[str]:\n    return list(s)"
    },
    {
        "id":109,
        "response":"from typing import Tuple, List\n\ndef get_unique(lst: List[Tuple]) -> List[str]:\n    unique_keys = set()\n    unique_values = set()\n    unique_keys_values = set()\n    result = {}\n    \n    for key, value in lst:\n        key_str = str(key)\n        value_str = str(value)\n        \n        if key_str not in unique_keys:\n            unique_keys.add(key_str)\n            result[key_str] = {}\n        \n        if value_str not in unique_values:\n            unique_values.add(value_str)\n            result[key_str][value_str] = 0\n        \n        unique_keys_values.add((key_str, value_str))\n    \n    return [f\"({key}, {value})\" for key, value in unique_keys_values]"
    },
    {
        "id":110,
        "response":"from typing import Tuple\n\ndef front_and_rear(tup: Tuple) -> tuple:\n    return tup[0], tup[-1]"
    },
    {
        "id":111,
        "response":"import math\n\ndef product_Equal(n: int) -> bool:\n    str_n = str(n)\n    product = 1\n    for char in str_n:\n        product *= int(char)\n    return product % 2 == 0 and product % 3 == 0"
    },
    {
        "id":112,
        "response":"import typing\n\ndef remove_duplicate(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return list(dict.fromkeys(lst))"
    },
    {
        "id":113,
        "response":"import re\nfrom typing import Tuple\n\ndef check_valid(tup: Tuple[int, int, int]) -> bool:\n    pattern = r\"^\\d{1,2}\/\\d{1,2}\/\\d{4}$\"\n    return bool(re.match(pattern, tup[0])) and bool(re.match(pattern, tup[1])) and bool(re.match(pattern, tup[2]))"
    },
    {
        "id":114,
        "response":"import math\n\ndef count_Fac(n: int) -> int:\n    factors = set()\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.add(i)\n            n \/\/= i\n    if n > 1:\n        factors.add(n)\n    return len(factors)"
    },
    {
        "id":115,
        "response":"import re\n\ndef str_to_tuple(s):\n    return tuple(map(int, re.findall(r'\\d+', s)))"
    },
    {
        "id":116,
        "response":"import math\n\ndef rombus_perimeter(n):\n    return 4 * n"
    },
    {
        "id":117,
        "response":"import math\n\ndef sd_calc(lst):\n    mean = sum(lst) \/ len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) \/ len(lst)\n    return math.sqrt(variance)"
    },
    {
        "id":118,
        "response":"from typing import List\n\ndef alternate_elements(lst: List[int]) -> List[int]:\n    return [x for pair in zip(lst[::2], lst[1::2]) for x in pair]"
    },
    {
        "id":119,
        "response":"import re\n\ndef text_match(s: str) -> bool:\n    pattern = r'a\\s*(?:b)*'\n    return bool(re.search(pattern, s))"
    },
    {
        "id":120,
        "response":"import typing\n\ndef add_dict_to_tuple(tup: typing.Tuple, dct: typing.Dict) -> typing.Tuple:\n    return tup + (dct,)"
    },
    {
        "id":121,
        "response":"import numpy as np\n\ndef maxAverageOfPath(lst, n):\n    matrix = np.array(lst)\n    dp = np.zeros((n, n))\n    \n    for i in range(n):\n        dp[i, i] = matrix[i, i]\n    \n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            dp[i, j] = matrix[i, j] + max(dp[i, k] for k in range(i, j)) + max(dp[k, j] for k in range(j, i, -1))\n    \n    return max(dp[i, j] \/ (j - i + 1) for i in range(n) for j in range(i, n))"
    },
    {
        "id":122,
        "response":"import typing\n\ndef filter_data(dct: typing.Dict, n: int, n2: int) -> typing.List:\n    return [student for student in dct if student['height'] == n and student['width'] == n2]"
    },
    {
        "id":123,
        "response":"import collections\n\ndef count_same_pair(lst, lst2):\n    counter = collections.Counter(lst)\n    counter2 = collections.Counter(lst2)\n    return sum(min(counter[pair], counter2[pair]) for pair in set(tuple(sorted(p)) for p in zip(lst, lst2)))"
    },
    {
        "id":124,
        "response":"from typing import List\n\ndef power_base_sum(n: int, power: int) -> int:\n    def get_digits(num: int) -> List[int]:\n        return [int(d) for d in str(num)]\n\n    digits = get_digits(n)\n    return sum(d ** power for d in digits)"
    },
    {
        "id":125,
        "response":"import re\nfrom typing import List, Tuple\n\ndef extract_quotation(s: str) -> List[Tuple[int, int]]:\n    pattern = r'\"[^\"]*\"|\\'[^\\']*\\''\n    matches = re.findall(pattern, s)\n    result = []\n    for match in matches:\n        start = s.index(match)\n        end = start + len(match)\n        result.append((start, end))\n    return result"
    },
    {
        "id":126,
        "response":"import math\nfrom typing import Tuple\n\ndef multiply_elements(tup: Tuple[int, int]) -> int:\n    return tup[0] * tup[1]"
    },
    {
        "id":127,
        "response":"import re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z]', '', s)"
    },
    {
        "id":128,
        "response":"import typing\n\ndef sum_list(lst: typing.List[int], lst2: typing.List[int]) -> typing.List[int]:\n    return [a + b for a, b in zip(lst, lst2)]"
    },
    {
        "id":129,
        "response":"import numpy as np\n\ndef add_list(lst, lst2):\n    return np.add(lst, lst2)"
    },
    {
        "id":130,
        "response":"import itertools\n\ndef consecutive_duplicates(lst):\n    result = []\n    for key, group in itertools.groupby(lst):\n        if len(list(group)) > 1:\n            result.extend([key] * (len(list(group)) - 1))\n    return result"
    },
    {
        "id":131,
        "response":"import math\n\ndef lateralsurface_cone(n, n2):\n    pi = math.pi\n    r = n\n    h = n2\n    return pi * r * math.sqrt(r**2 + h**2)"
    },
    {
        "id":132,
        "response":"import re\n\ndef replace_specialchar(s):\n    return re.sub('[\\s.,]', '', s)"
    },
    {
        "id":133,
        "response":"import typing\n\ndef find_first_occurrence(lst: typing.List[int], n: int) -> int:\n    try:\n        return lst.index(n)\n    except ValueError:\n        return -1"
    },
    {
        "id":134,
        "response":"import numpy as np\n\ndef sum_Of_Subarray_Prod(lst, n):\n    prefix = np.ones(n+1)\n    suffix = np.ones(n+1)\n    prefix[1] = lst[0]\n    suffix[n] = lst[n-1]\n\n    for i in range(1, n):\n        prefix[i+1] = prefix[i] * lst[i]\n        suffix[n-i-1] = suffix[n-i] * lst[n-i-1]\n\n    total_sum = 0\n    for i in range(n):\n        total_sum += (prefix[i+1] \/\/ lst[i]) * (suffix[i+1] \/\/ lst[i])\n\n    return total_sum"
    },
    {
        "id":135,
        "response":"import math\n\ndef toggle_middle_bits(n):\n    num_bits = math.floor(math.log2(n)) + 1\n    mask = (1 << num_bits) - 1\n    return (n & ~mask) | ((~n) & mask)"
    },
    {
        "id":136,
        "response":"import itertools\n\ndef left_insertion(lst, n):\n    for i in range(len(lst)):\n        if lst[i] == n:\n            return i\n    return -1"
    },
    {
        "id":137,
        "response":"import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU].*', s))"
    },
    {
        "id":138,
        "response":"import math\n\ndef geometric_sum(n: int) -> float:\n    return 1 - (1 \/ n) if n != 0 else 0"
    },
    {
        "id":139,
        "response":"import math\nimport itertools\n\ndef find_Index(n):\n    for i in itertools.count(1):\n        triangle_number = i * (i + 1) \/\/ 2\n        if len(str(triangle_number)) == n:\n            return i\n    return -1"
    },
    {
        "id":140,
        "response":"import typing\n\ndef tuple_to_dict(tup: typing.Tuple) -> dict:\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}"
    },
    {
        "id":141,
        "response":"import re\n\ndef all_Characters_Same(s):\n    return len(set(s)) == 1 or (len(s) == 1 and s.isalpha())"
    },
    {
        "id":142,
        "response":"import math\n\ndef area_tetrahedron(n):\n    return (math.sqrt(2) \/ 12) * n**2"
    },
    {
        "id":143,
        "response":"from typing import List\n\ndef rotate_right(lst: List[int], n: int, n2: int) -> List[int]:\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "id":144,
        "response":"import itertools\n\ndef check_none(tup):\n    return any(itertools.chain(*tup)) is None"
    },
    {
        "id":145,
        "response":"import typing\n\ndef divisible_by_digits(n: int, n2: int) -> typing.List[int]:\n    result = []\n    for i in range(n, n2+1):\n        digits = [int(x) for x in str(i)]\n        if all(i % digit == 0 for digit in digits):\n            result.append(i)\n    return result"
    },
    {
        "id":146,
        "response":"import math\n\ndef sector_area(n, n2):\n    return (n * n2) \/ 2"
    },
    {
        "id":147,
        "response":"import numpy as np\n\ndef lcs_of_three(s, s2, s3, n, n2, n3):\n    dp = np.zeros((n+1, n2+1, n3+1))\n    for i in range(1, n+1):\n        for j in range(1, n2+1):\n            for k in range(1, n3+1):\n                if s[i-1] == s2[j-1] == s3[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = 0\n    return dp[n][n2][n3]"
    },
    {
        "id":148,
        "response":"import re\n\ndef capital_words_spaces(s: str) -> str:\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', s)\n    return ' '.join(words)"
    },
    {
        "id":149,
        "response":"import re\nfrom typing import List\n\ndef sort_numeric_strings(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: int(''.join(filter(str.isdigit, x))))"
    },
    {
        "id":150,
        "response":"import typing\n\ndef add_tuple(lst: typing.List[typing.Tuple], tup: typing.Tuple) -> typing.List[typing.Tuple]:\n    lst.append(tup)\n    return lst"
    },
    {
        "id":151,
        "response":"import heapq\n\ndef check_min_heap(lst, n):\n    for i in range(n):\n        if i * 2 + 1 < n and lst[i] > lst[i * 2 + 1]:\n            return False\n        if i * 2 + 2 < n and lst[i] > lst[i * 2 + 2]:\n            return False\n    return True"
    },
    {
        "id":152,
        "response":"import math\n\ndef jacobsthal_num(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "id":153,
        "response":"from typing import List, Tuple\n\ndef min_k(lst: List[Tuple[int, int]], k: int) -> List[Tuple[int, int]]:\n    return sorted(lst, key=lambda x: x[1])[:k]"
    },
    {
        "id":154,
        "response":"import itertools\n\ndef extract_index_list(lst, lst2, lst3):\n    common_elements = list(set(lst) & set(lst2) & set(lst3))\n    if common_elements:\n        return [lst.index(common_elements[0])]\n    else:\n        return []"
    },
    {
        "id":155,
        "response":"import typing\n\ndef second_smallest(lst: typing.List[int]) -> int:\n    if len(lst) < 2:\n        raise ValueError(\"\u09a4\u09be\u09b2\u09bf\u0995\u09be\u099f\u09bf \u0995\u09ae\u09aa\u0995\u09cd\u09b7\u09c7 \u09a6\u09c1\u099f\u09bf \u09b8\u0982\u0996\u09cd\u09af\u09be \u09b8\u09b9 \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    lst.sort()\n    return lst[1]"
    },
    {
        "id":156,
        "response":"import re\n\ndef text_match_zero_one(s: str) -> bool:\n    return bool(re.search(r'[0b]', s))"
    },
    {
        "id":157,
        "response":"import re\nfrom typing import List\n\ndef count_reverse_pairs(lst: List[str]) -> int:\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if re.sub('[^A-Za-z0-9]', '', lst[i]) == re.sub('[^A-Za-z0-9]', '', lst[j][::-1]):\n                count += 1\n    return count"
    },
    {
        "id":158,
        "response":"import itertools\nfrom typing import List\n\ndef unique_sublists(lst: List[int]) -> int:\n    n = len(lst)\n    count = 0\n    for r in range(1, n + 1):\n        for subset in itertools.combinations(lst, r):\n            if sorted(subset) not in [sorted(x) for x in lst if x != subset]:\n                count += 1\n    return count"
    },
    {
        "id":159,
        "response":"import math\n\ndef is_decimal(s: str) -> bool:\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "id":160,
        "response":"import itertools\n\ndef unique_Element(lst, n):\n    return len(set(lst)) == 1 and lst[0] != lst[n-1]"
    },
    {
        "id":161,
        "response":"import math\n\ndef arc_length(r, theta):\n    return r * (math.pi - (math.atan2(math.sin(math.pi - theta), math.cos(math.pi - theta))))"
    },
    {
        "id":162,
        "response":"import calendar\n\ndef check_monthnumber_number(n: int) -> bool:\n    return n in calendar.monthrange(2024, n)[1]"
    },
    {
        "id":163,
        "response":"import itertools\n\ndef find_Min_Diff(tup, n):\n    min_diff = float('inf')\n    for a, b in itertools.combinations(tup, 2):\n        diff = abs(a - b)\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "id":164,
        "response":"import re\n\ndef number_ctr(s):\n    return len(re.findall(r'\\d+', s))"
    },
    {
        "id":165,
        "response":"import math\n\ndef is_polite(n: int) -> int:\n    if n <= 0:\n        return 0\n    else:\n        return math.floor(math.log10(n)) + 1"
    },
    {
        "id":166,
        "response":"import itertools\n\ndef pair_wise(lst):\n    return [lst[i] for i in range(0, len(lst), 2)]"
    },
    {
        "id":167,
        "response":"import itertools\n\ndef get_Pairs_Count(lst, n, n2):\n    pairs = list(itertools.combinations(lst, 2))\n    count = 0\n    for pair in pairs:\n        if sum(pair) == n:\n            count += 1\n    return count"
    },
    {
        "id":168,
        "response":"import math\n\ndef check_Odd_Parity(n: int) -> bool:\n    return n % 2 != 0"
    },
    {
        "id":169,
        "response":"import typing\nfrom typing import List, Tuple\n\ndef Diff(lst: List[int], lst2: List[int]) -> Tuple[List[int], List[int]]:\n    return ([x for x in lst if x not in lst2], [x for x in lst2 if x not in lst])"
    },
    {
        "id":170,
        "response":""
    },
    {
        "id":171,
        "response":"import re\n\ndef check_expression(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "id":172,
        "response":"import re\n\ndef remove_length(s: str, n: int) -> str:\n    words = re.findall(r'\\b\\w+\\b', s)\n    return ' '.join([word for word in words if len(word) != n])"
    },
    {
        "id":173,
        "response":"import re\n\ndef occurance_substring(s, s2):\n    pattern = re.compile(s2)\n    matches = pattern.finditer(s)\n    return [(m.start(), m.end()) for m in matches]"
    },
    {
        "id":174,
        "response":"import re\nfrom typing import List\n\ndef check_email(s: str) -> bool:\n    def is_valid_domain(domain: str) -> bool:\n        return '.' in domain\n\n    def is_valid_local_part(local_part: str) -> bool:\n        return not any(char in local_part for char in ['@', ' ', '.', ',', ';', ':', '\\\\', '\/', '[', ']'])\n\n    if not s or not isinstance(s, str):\n        return False\n\n    local_part, domain = s.rsplit('@', 1)\n    return is_valid_local_part(local_part) and is_valid_domain(domain)"
    },
    {
        "id":175,
        "response":"import re\n\ndef odd_position(lst):\n    return [i for i in lst if re.match(r'^[13579]$', str(i)) and i % 2 != 0]"
    },
    {
        "id":176,
        "response":"import re\n\ndef count_vowels(s: str) -> int:\n    vowels = 'aeiou'\n    return sum(1 for char in s if char.lower() in vowels and (s[s.index(char)-1].lower() in vowels or s[s.index(char)+1].lower() in vowels))"
    },
    {
        "id":177,
        "response":"import itertools\n\ndef find_Sum(lst, n):\n    return sum(set(itertools.chain(*[lst[i:i+n] for i in range(0, len(lst), n)])))"
    },
    {
        "id":178,
        "response":"from typing import List, Tuple\n\ndef pack_consecutive_duplicates(lst: List[int]) -> List[List[int]]:\n    result = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    if current_sublist:\n        result.append(current_sublist)\n    \n    return result"
    },
    {
        "id":179,
        "response":"import itertools\nfrom typing import List\n\ndef unique_sublists(lst: List[int]) -> int:\n    n = len(lst)\n    unique_count = 0\n    for r in range(1, n + 1):\n        for subset in itertools.combinations(lst, r):\n            if list(subset) not in [list(subset2) for subset2 in itertools.chain(*[itertools.combinations(lst, r) for r in range(1, n + 1)]) if subset2 != subset]:\n                unique_count += 1\n    return unique_count"
    },
    {
        "id":180,
        "response":"from typing import List, Tuple\n\ndef find_combinations(lst: List[Tuple[int, int, int]]) -> int:\n    combinations = set()\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i][0] + lst[i][1] == lst[j][0] + lst[j][1] and lst[i][2] + lst[i][1] == lst[j][2] + lst[j][0]:\n                combinations.add((lst[i][0], lst[i][1], lst[i][2]))\n                combinations.add((lst[j][0], lst[j][1], lst[j][2]))\n    return len(combinations)"
    },
    {
        "id":181,
        "response":"import math\n\ndef count_Divisors(n: int) -> str:\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    if n != 1:\n        return \"\u099c\u09cb\u09a1\u09bc\u09be \u09ac\u09bf\u09ad\u09be\u099c\u0995 \u09b8\u0982\u0996\u09cd\u09af\u09be: \" + str(divisor_count)\n    else:\n        return \"\u098f\u0995\u099f\u09bf \u09b8\u0982\u0996\u09cd\u09af\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u09ac\u09bf\u09ad\u09be\u099c\u0995 \u09b8\u0982\u0996\u09cd\u09af\u09be \u0995\u09cb\u09a8\u099f\u09bf \u09a8\u09c7\u0987\""
    },
    {
        "id":182,
        "response":"import re\n\ndef Odd_Length_Sum(lst):\n    return sum(i for i in lst if re.match(r'^.*[^0-1].*$', str(i)))"
    },
    {
        "id":183,
        "response":"import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r \/ 255.0, g \/ 255.0, b \/ 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)\/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)\/df) + 120) % 360\n    else:\n        h = (60 * ((r-g)\/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df\/mx)*100\n    v = mx*100\n    return h, s, v"
    },
    {
        "id":184,
        "response":"import itertools\n\ndef mul_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2 != 0]\n    if not even or not odd:\n        return None\n    return even[0] * odd[0]"
    },
    {
        "id":185,
        "response":"import re\n\ndef tuple_str_int(s):\n    return tuple(int(i) for i in re.findall(r'\\d+', s))"
    },
    {
        "id":186,
        "response":"import itertools\n\ndef right_insertion(lst, n):\n    for i in range(len(lst) + 1):\n        for p in itertools.permutations(lst):\n            if p[:i] + [n] + p[i:] == sorted(p):\n                return i\n    return -1"
    },
    {
        "id":187,
        "response":"import re\n\ndef text_match_three(s: str) -> bool:\n    return bool(re.search(r'abbbb', s))"
    },
    {
        "id":188,
        "response":"import itertools\n\ndef new_tuple(lst, s):\n    return tuple(itertools.chain(lst, [s]))"
    },
    {
        "id":189,
        "response":"import math\n\ndef perimeter_polygon(n, side_length):\n    if n < 3:\n        return 0\n    return n * side_length"
    },
    {
        "id":190,
        "response":"import typing\n\ndef even_position(lst: typing.List[int]) -> bool:\n    return any(lst[i] % 2 == 0 for i in range(1, len(lst), 2))"
    },
    {
        "id":191,
        "response":"import typing\n\ndef remove_nested(tup: typing.Tuple[typing.Union[typing.Tuple, typing.List]]) -> typing.List:\n    result = []\n    for item in tup:\n        if isinstance(item, (tuple, list)):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":192,
        "response":"import itertools\n\ndef count_list(lst):\n    return len(lst)"
    },
    {
        "id":193,
        "response":"import typing\n\ndef last(lst: typing.List, n: int, n2: int) -> typing.Any:\n    if not isinstance(lst, list) or not isinstance(n, int) or not isinstance(n2, int):\n        raise TypeError(\"\u09aa\u09cd\u09b0\u09a5\u09ae \u09aa\u09cd\u09af\u09be\u09b0\u09be\u09ae\u09bf\u099f\u09be\u09b0 \u098f\u0995\u099f\u09bf \u09a4\u09be\u09b2\u09bf\u0995\u09be, \u09a6\u09cd\u09ac\u09bf\u09a4\u09c0\u09af\u09bc \u098f\u09ac\u0982 \u09a4\u09c3\u09a4\u09c0\u09af\u09bc \u09aa\u09cd\u09af\u09be\u09b0\u09be\u09ae\u09bf\u099f\u09be\u09b0 \u098f\u0995\u099f\u09bf \u09aa\u09c2\u09b0\u09cd\u09a3\u09b8\u0982\u0996\u09cd\u09af\u09be \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    if n < 0 or n2 < 0:\n        raise ValueError(\"\u09aa\u09c2\u09b0\u09cd\u09a3\u09b8\u0982\u0996\u09cd\u09af\u09be \u0985\u09ac\u09b6\u09cd\u09af\u0987 0 \u098f\u09b0 \u09ac\u09c7\u09b6\u09bf \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    if n >= len(lst):\n        return None\n    return lst[n]"
    },
    {
        "id":194,
        "response":"import re\n\ndef text_starta_endb(s):\n    return bool(re.search(r'a.*b$', s))"
    },
    {
        "id":195,
        "response":"import heapq\n\ndef cheap_items(lst, n):\n    return heapq.nsmallest(n, lst)"
    },
    {
        "id":196,
        "response":"from typing import Dict\n\ndef return_sum(dct: Dict) -> int:\n    total_sum = 0\n    for key, value in dct.items():\n        if isinstance(value, dict):\n            total_sum += return_sum(value)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    total_sum += return_sum(item)\n        else:\n            total_sum += value\n    return total_sum"
    },
    {
        "id":197,
        "response":"import math\n\ndef sum_in_Range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)"
    },
    {
        "id":198,
        "response":"import typing\n\ndef _sum(lst: typing.List[int]) -> int:\n    return sum(lst)"
    },
    {
        "id":199,
        "response":"import math\n\ndef left_Rotate(n, n2):\n    n = n << n2\n    n = n >> (32 - n2)\n    return n"
    },
    {
        "id":200,
        "response":"import re\n\ndef remove_all_spaces(s):\n    return re.sub(' ', '', s)"
    },
    {
        "id":201,
        "response":"import itertools\n\ndef test_three_equal(n, n2, n3):\n    permutations = list(itertools.permutations([n, n2, n3]))\n    return sum(1 for p in permutations if p[0] == p[1] == p[2])"
    },
    {
        "id":202,
        "response":"import itertools\n\ndef count_Rotation(lst, n):\n    max_sum = sum(lst)\n    rotation_sums = set()\n    for _ in range(n):\n        rotation_sum = sum(itertools.islice(lst, 1, None)) + lst[0]\n        if rotation_sum in rotation_sums:\n            return rotation_sum\n        rotation_sums.add(rotation_sum)\n    return -1"
    },
    {
        "id":203,
        "response":"import math\n\ndef is_Perfect_Square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt = math.sqrt(n)\n    return sqrt == int(sqrt)"
    },
    {
        "id":204,
        "response":"import itertools\n\ndef is_Product_Even(lst, n):\n    return any(all(x % 2 == 0 for x in pair) for pair in itertools.combinations(lst, n))"
    },
    {
        "id":205,
        "response":"import itertools\n\ndef max_sum_list(lst):\n    max_sum = float('-inf')\n    max_sublists = []\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) > max_sum:\n                max_sum = sum(subset)\n                max_sublists = [subset]\n            elif sum(subset) == max_sum:\n                max_sublists.append(subset)\n    return max_sublists"
    },
    {
        "id":206,
        "response":"import re\n\ndef max_run_uppercase(s):\n    return max(len(match[0]) for match in re.finditer(r\"[A-Z]+\", s))"
    },
    {
        "id":207,
        "response":"import itertools\n\ndef first_odd(lst):\n    return next((i for i in lst if i % 2 != 0), None)"
    },
    {
        "id":208,
        "response":"import itertools\n\ndef check_K(tup, n):\n    return any(itertools.count(k, 1) in tup for k in range(1, n+1))"
    },
    {
        "id":209,
        "response":"import typing\n\ndef check_smaller(tup: typing.Tuple[int], tup2: typing.Tuple[int]) -> typing.Tuple[bool]:\n    return tuple(x < tup2[i] for i, x in enumerate(tup))"
    },
    {
        "id":210,
        "response":""
    },
    {
        "id":211,
        "response":"from typing import List, Tuple\n\ndef check_identical(lst: List[Tuple], lst2: List[Tuple]) -> bool:\n    if len(lst) != len(lst2):\n        return False\n    for i in range(len(lst)):\n        if lst[i] != lst2[i]:\n            return False\n    return True"
    },
    {
        "id":212,
        "response":"import re\n\ndef road_rd(s):\n    return re.sub('road', 'rd.', s)"
    },
    {
        "id":213,
        "response":"import typing\n\ndef string_length(s: str) -> int:\n    return len(s)"
    },
    {
        "id":214,
        "response":"import math\n\ndef rombus_area(n, n2):\n    return n * n2 \/ 2"
    },
    {
        "id":215,
        "response":"import itertools\n\ndef sort_by_dnf(lst, n):\n    ones = [i for i, x in enumerate(lst) if x == 1]\n    twos = [i for i, x in enumerate(lst) if x == 2]\n    return [0] * n + [1] * len(ones) + [2] * len(twos)"
    },
    {
        "id":216,
        "response":"import re\nfrom typing import Tuple\n\ndef clear_tuple(tup: Tuple) -> Tuple:\n    return tuple(re.sub(r'\\s+', '', str(i)) for i in tup)"
    },
    {
        "id":217,
        "response":"import typing\n\ndef div_of_nums(lst: typing.List[int], n: int, n2: int) -> typing.Tuple[int, int]:\n    div_m = sum(1 for num in lst if num % n == 0)\n    div_n = sum(1 for num in lst if num % n2 == 0)\n    return div_m, div_n"
    },
    {
        "id":218,
        "response":"import re\n\ndef lower_ctr(s):\n    return len(re.findall(r'[a-z]', s))"
    },
    {
        "id":219,
        "response":"import itertools\n\ndef count_duplic(lst):\n    result = {}\n    for k, g in itertools.groupby(lst):\n        result[k] = len(list(g))\n    count = 0\n    for key, value in result.items():\n        if value > 1:\n            count += value - 1\n    return count"
    },
    {
        "id":220,
        "response":"import calendar\n\ndef check_monthnum_number(n: int) -> bool:\n    return calendar.monthrange(2024, n)[1] == 28"
    },
    {
        "id":221,
        "response":"from typing import Dict\n\ndef merge_dictionaries(dct: Dict, dct2: Dict) -> Dict:\n    for key, value in dct2.items():\n        if isinstance(value, dict) and key in dct and isinstance(dct[key], dict):\n            merge_dictionaries(dct[key], value)\n        else:\n            dct[key] = value\n    return dct"
    },
    {
        "id":222,
        "response":"import re\n\ndef pass_validity(s):\n    if not isinstance(s, str):\n        return False\n    if len(s) < 8:\n        return False\n    if not re.search(\"[a-z]\", s):\n        return False\n    if not re.search(\"[A-Z]\", s):\n        return False\n    if not re.search(\"[0-9]\", s):\n        return False\n    if not re.search(\"[^a-zA-Z0-9]\", s):\n        return False\n    return True"
    },
    {
        "id":223,
        "response":"import re\n\ndef check_substring(s: str, s2: str) -> bool:\n    return bool(re.search(r'^' + re.escape(s2), s))"
    },
    {
        "id":224,
        "response":"import itertools\n\ndef remove_even(lst):\n    return list(itertools.filterfalse(lambda x: x % 2 == 0, lst))"
    },
    {
        "id":225,
        "response":"import itertools\n\ndef access_elements(lst, index):\n    return list(itertools.islice(lst, index, None, index))"
    },
    {
        "id":226,
        "response":"import math\n\ndef check_Type_Of_Triangle(n, n2, n3):\n    if n + n2 > n3 and n + n3 > n2 and n2 + n3 > n:\n        if n == n2 == n3:\n            return \"\u09b8\u09ae\u09ac\u09be\u09b9\u09c1 \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c\"\n        elif n == n2 or n == n3 or n2 == n3:\n            return \"\u09b8\u09ae\u09a6\u09cd\u09ac\u09bf\u09ac\u09be\u09b9\u09c1 \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c\"\n        else:\n            return \"\u09b8\u09ae\u09ac\u09be\u09b9\u09c1 \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c \u09a8\u09af\u09bc\"\n    else:\n        return \"\u098f\u0987 \u09a4\u09bf\u09a8\u099f\u09bf \u09b8\u0982\u0996\u09cd\u09af\u09be \u098f\u0995\u099f\u09bf \u09a4\u09cd\u09b0\u09bf\u09ad\u09c1\u099c \u0997\u09a0\u09a8 \u0995\u09b0\u09c7 \u09a8\u09be\""
    },
    {
        "id":227,
        "response":"import typing\n\ndef sum_column(lst: typing.List[typing.List[int]], n: int) -> int:\n    return sum(col[n] for col in lst if len(col) > n)"
    },
    {
        "id":228,
        "response":"import re\n\ndef count_alpha_dig_spl(s: str) -> tuple:\n    alpha = re.findall(r'[a-zA-Z]', s)\n    dig = re.findall(r'\\d', s)\n    spl = re.findall(r'[^a-zA-Z0-9]', s)\n    return len(alpha), len(dig), len(spl)"
    },
    {
        "id":229,
        "response":"import collections\nfrom typing import List\n\ndef second_frequent(lst: List[str]) -> str:\n    count = collections.Counter(lst)\n    max_count = max(count.values())\n    second_max_count = max([val for val in count.values() if val != max_count])\n    result = [key for key, val in count.items() if val == second_max_count]\n    return result[0]"
    },
    {
        "id":230,
        "response":"import math\n\ndef round_up(n: int, n2: int) -> int:\n    return math.ceil(n \/ n2) * n2"
    },
    {
        "id":231,
        "response":"import itertools\n\ndef count_Pairs(lst, n):\n    return sum(1 for x in lst for y in lst if x != y and x + y == n) \/\/ 2"
    },
    {
        "id":232,
        "response":"import re\n\ndef extract_max(s: str) -> float:\n    numbers = re.findall(r'-?\\d+(?:\\.\\d+)?', s)\n    if not numbers:\n        return 0.0\n    return max(map(float, numbers))"
    },
    {
        "id":233,
        "response":"import collections\n\ndef get_key(dct):\n    return [key for key, value in collections.OrderedDict(sorted(dct.items())).items() if value == '\u098f\u0995\u099f\u09bf \u09a4\u09be\u09b2\u09bf\u0995\u09be']"
    },
    {
        "id":234,
        "response":"import numpy as np\n\ndef generate_matrix(n):\n    matrix = np.zeros((n, n), dtype=int)\n    num = 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i, j] = num\n            num = (num + 1) * 2\n    return matrix"
    },
    {
        "id":235,
        "response":"import math\n\ndef slope(n, n2, n3, n4):\n    if n == n2:\n        return \"\u0985\u09b8\u09c0\u09ae \u09a2\u09be\u09b2\"\n    else:\n        return (n3 - n4) \/ (n2 - n)"
    },
    {
        "id":236,
        "response":"import numpy as np\n\ndef max_sub_array_sum(lst, n):\n    max_sum = -np.inf\n    max_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_array = lst[i:j+1]\n            if len(sub_array) > max_length and np.sum(sub_array) > max_sum:\n                max_sum = np.sum(sub_array)\n                max_length = len(sub_array)\n    return max_length"
    },
    {
        "id":237,
        "response":"import math\n\ndef cube_Sum(n: int) -> float:\n    return sum(i**3 for i in range(1, n+1))"
    },
    {
        "id":238,
        "response":"import math\n\ndef min_Swaps(s, s2):\n    if len(s) != len(s2):\n        return -1\n\n    diff = [i for i in range(len(s)) if s[i] != s2[i]]\n    n = len(s)\n\n    if len(diff) == 0:\n        return 0\n\n    swaps = 0\n    for i in range(len(diff)):\n        j = (diff[i] + i) % n\n        k = (diff[i] - i) % n\n\n        if j > k:\n            j, k = k, j\n\n        swaps += k - j\n        diff[j], diff[k] = diff[k], diff[j]\n\n    return swaps"
    },
    {
        "id":239,
        "response":"import typing\n\ndef sort_tuple(lst: typing.List[typing.Tuple[int]]) -> typing.List[typing.Tuple[int]]:\n    return sorted(lst, key=lambda x: x[0])"
    },
    {
        "id":240,
        "response":"import cmath\nimport numpy as np\n\ndef Check_Solution(n, n2, n3):\n    a, b, c, d = n, n2, n3, 0\n    D = b**2 - 4*a*c\n    D2 = d**2 - 4*a*c\n    if D == D2 and (cmath.sqrt(D)).real == (cmath.sqrt(D2)).real and (cmath.sqrt(D)).imag == (cmath.sqrt(D2)).imag:\n        if (cmath.sqrt(D)).real > 0 and (cmath.sqrt(D2)).real > 0:\n            return True\n        elif (cmath.sqrt(D)).real < 0 and (cmath.sqrt(D2)).real < 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "id":241,
        "response":"import re\nfrom typing import List\n\ndef get_inv_count(lst: List[int], n: int) -> int:\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] > lst[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "id":242,
        "response":"import collections\nfrom typing import List\n\ndef get_odd_occurence(lst: List[int], n: int) -> int:\n    count = collections.Counter(lst)\n    for num in count:\n        if count[num] % 2 != 0:\n            return num\n    return -1"
    },
    {
        "id":243,
        "response":"import heapq\nfrom typing import List\n\ndef nth_super_ugly_number(n: int, lst: List[int]) -> int:\n    heap = [lst[0]]\n    visited = set([lst[0]])\n    for _ in range(n - 1):\n        next_num = heapq.heappop(heap)\n        for num in lst:\n            if next_num * num not in visited:\n                heapq.heappush(heap, next_num * num)\n                visited.add(next_num * num)\n    return heap[0]"
    },
    {
        "id":244,
        "response":"import itertools\n\ndef get_Number(n, n2):\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    odd = list(itertools.filterfalse(lambda x: x % 2 == 0, arr))\n    even = list(itertools.filterfalse(lambda x: x % 2 != 0, arr))\n    if n2 == \"odd\":\n        return odd[n-1]\n    elif n2 == \"even\":\n        return even[n-1]\n    else:\n        return \"Invalid input\""
    },
    {
        "id":245,
        "response":"import math\n\ndef find_Digits(n):\n    count = 0\n    while n > 4:\n        count += 1\n        n = math.factorial(n)\n    return count"
    },
    {
        "id":246,
        "response":"import math\n\ndef find_platform(lst, lst2, n):\n    i = 0\n    j = 0\n    platforms = 1\n    time = 0\n    while i < n or j < n:\n        if i < n and (lst[i] <= time or i == 0):\n            time += 1\n            i += 1\n        elif j < n and (lst2[j] <= time or j == 0):\n            time += 1\n            j += 1\n        else:\n            time += 1\n            platforms += 1\n    return platforms"
    },
    {
        "id":247,
        "response":"import typing\nimport copy\n\ndef lcopy(lst: typing.List) -> typing.List:\n    return copy.deepcopy(lst)"
    },
    {
        "id":248,
        "response":"import math\n\ndef area_trapezium(n, n2, n3):\n    return (n + n2) * n3 \/ 2"
    },
    {
        "id":249,
        "response":"import math\n\ndef Sum(n: int) -> int:\n    def get_divisors(num: int) -> list:\n        divisors = []\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i != num \/\/ i:\n                    divisors.append(num \/\/ i)\n        return divisors\n\n    divisors = get_divisors(n)\n    return sum(divisors)"
    },
    {
        "id":250,
        "response":"import math\n\ndef is_triangle_exists(n: int, n2: int, n3: int) -> bool:\n    return n + n2 > n3 and n + n3 > n2 and n2 + n3 > n"
    },
    {
        "id":251,
        "response":"import math\n\ndef Sum_of_Inverse_Divisors(n: int, n2: int) -> int:\n    def get_divisors(num: int) -> list:\n        divisors = set()\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                divisors.add(i)\n                divisors.add(num \/\/ i)\n        return divisors\n\n    divisors = get_divisors(n)\n    inverse_divisors = get_divisors(n2)\n    return sum(i for i in divisors if i in inverse_divisors)"
    },
    {
        "id":252,
        "response":"import itertools\n\ndef remove_negs(lst):\n    return list(itertools.filterfalse(lambda x: x < 0, lst))"
    },
    {
        "id":253,
        "response":"import math\n\ndef sum_of_odd_factors(n: int) -> int:\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 != 0:\n                sum += i\n            if (n \/\/ i) % 2 != 0 and i != n \/\/ i:\n                sum += n \/\/ i\n    return sum"
    },
    {
        "id":254,
        "response":"import heapq\n\ndef raw_heap(lst):\n    return [heapq.heappop(lst) for _ in range(len(lst))]"
    },
    {
        "id":255,
        "response":"import math\n\ndef check_Even_Parity(n: int) -> bool:\n    return n % 2 == 0"
    },
    {
        "id":256,
        "response":"import itertools\n\ndef find_Min_Swaps(lst, n):\n    min_swaps = float('inf')\n    for p in itertools.permutations(lst):\n        swaps = 0\n        for i in range(n):\n            if p[i] != lst[i]:\n                j = i\n                while p[j] != lst[i]:\n                    j += 1\n                swaps += j - i\n                i = j\n        min_swaps = min(min_swaps, swaps)\n    return min_swaps"
    },
    {
        "id":257,
        "response":"import re\n\ndef listify_list(lst):\n    result = []\n    for string in lst:\n        result.append(re.split('([a-zA-Z]+)', string))\n    return result"
    },
    {
        "id":258,
        "response":"from typing import List\n\ndef count_list(lst: List[List[int]]) -> List[int]:\n    return [len(sublist) for sublist in lst]"
    },
    {
        "id":259,
        "response":"from typing import List, Tuple\n\ndef sub_lists(lst: List[int]) -> List[List[int]]:\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "id":260,
        "response":"import re\nimport string\n\ndef check_alphanumeric(s: str) -> bool:\n    return s and s[-1] in string.ascii_letters"
    },
    {
        "id":261,
        "response":"import itertools\nimport re\n\ndef anagram_lambda(lst, s):\n    def anagram(word):\n        return ''.join(sorted(word))\n\n    return [w for w in lst if anagram(w) == anagram(s)]"
    },
    {
        "id":262,
        "response":"from typing import List, Dict\n\ndef n_common_words(s: str, n: int) -> int:\n    word_count: Dict[str, int] = {}\n    max_common_words: int = 0\n\n    words: List[str] = s.split()\n\n    for word in words:\n        word = word.lower()\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    for word, count in word_count.items():\n        if count > n:\n            del word_count[word]\n\n    for word, count in word_count.items():\n        max_common_words = max(max_common_words, count)\n\n    return max_common_words"
    },
    {
        "id":263,
        "response":"import itertools\n\ndef find_longest_conseq_subseq(lst, n):\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subseq = list(itertools.islice(lst, i, j))\n            if len(subseq) > 1 and all(subseq[k] + 1 == subseq[k + 1] for k in range(len(subseq) - 1)):\n                max_len = max(max_len, len(subseq))\n    return max_len"
    },
    {
        "id":264,
        "response":"import re\n\ndef palindrome_lambda(lst):\n    return list(filter(lambda x: re.match(r'^[a-zA-Z0-9]+$', x) and x == x[::-1], lst))"
    },
    {
        "id":265,
        "response":"from typing import List\n\ndef ntimes_list(lst: List, n: int) -> None:\n    for _ in range(n):\n        for item in lst:\n            print(item, end=' ')\n        print()"
    },
    {
        "id":266,
        "response":"import calendar\n\ndef check_monthnumb(s):\n    month = {\n        '\u099c\u09be\u09a8\u09c1\u09af\u09bc\u09be\u09b0\u09bf': 31, '\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09af\u09bc\u09be\u09b0\u09bf': 28, '\u09ae\u09be\u09b0\u09cd\u099a': 31, '\u098f\u09aa\u09cd\u09b0\u09bf\u09b2': 30,\n        '\u09ae\u09c7': 31, '\u099c\u09c1\u09a8': 30, '\u099c\u09c1\u09b2\u09be\u0987': 31, '\u0986\u0997\u09b8\u09cd\u099f': 31, '\u09b8\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0': 30,\n        '\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0': 31, '\u09a8\u09ad\u09c7\u09ae\u09cd\u09ac\u09b0': 30, '\u09a1\u09bf\u09b8\u09c7\u09ae\u09cd\u09ac\u09b0': 31\n    }\n    return s in month and month[s] >= 31"
    },
    {
        "id":267,
        "response":"import math\n\ndef min_Num(lst, n):\n    if not lst:\n        return 0\n    if n == 1:\n        return lst[0]\n    total = sum(lst)\n    if total % n == 0:\n        return 0\n    else:\n        remainder = total % n\n        return remainder"
    },
    {
        "id":268,
        "response":"import re\n\ndef length_Of_Last_Word(s: str) -> int:\n    words = re.split(' ', s)\n    return len(words[-1]) if words else 0"
    },
    {
        "id":269,
        "response":"import typing\n\ndef remove_list_range(lst: typing.List[int], n: int, n2: int) -> typing.List[int]:\n    return [i for i in lst if not (n <= i <= n2)]"
    },
    {
        "id":270,
        "response":"import re\n\ndef sum_positivenum(lst):\n    return sum(int(num) for num in re.findall(r'\\d+', ' '.join(map(str, lst))) if int(num) > 0)"
    },
    {
        "id":271,
        "response":"import re\n\ndef are_Rotations(s, s2):\n    if len(s) != len(s2):\n        return False\n    return s2 in s + s"
    },
    {
        "id":272,
        "response":"import itertools\n\ndef check_subset(lst, lst2):\n    if not isinstance(lst, list) or not isinstance(lst2, list):\n        return False\n    if len(lst) > len(lst2):\n        return False\n    for sub_lst in itertools.combinations(lst2, len(lst)):\n        if set(sub_lst) == set(lst):\n            return True\n    return False"
    },
    {
        "id":273,
        "response":"import math\n\ndef fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return math.comb(n + 1, 1)"
    },
    {
        "id":274,
        "response":"import re\n\ndef check_Concat(s, s2):\n    return bool(re.search(r'(?=.*' + re.escape(s) + ')(?=' + re.escape(s2) + ').*'))"
    },
    {
        "id":275,
        "response":"from typing import List, Tuple\n\ndef min_difference(lst: List[Tuple[int, int]]) -> int:\n    lst.sort(key=lambda x: x[0])\n    min_diff = float('inf')\n    for i in range(1, len(lst)):\n        diff = lst[i][0] - lst[i-1][1]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "id":276,
        "response":"import math\n\ndef lcm(n, n2):\n    return abs(n*n2) \/\/ math.gcd(n, n2)"
    },
    {
        "id":277,
        "response":"import re\nfrom collections import Counter\n\ndef sort_String(s):\n    s = re.sub(r'[^a-zA-Z0-9]', '', s)\n    return ''.join(sorted(s, key=Counter(s).get, reverse=True))"
    },
    {
        "id":278,
        "response":"import collections\n\ndef check_tuples(tup, lst):\n    return len(tup) == k and all(x in lst for x in tup)"
    },
    {
        "id":279,
        "response":"import re\n\ndef text_match(s: str) -> bool:\n    return bool(re.search(r'a.*b$', s))"
    },
    {
        "id":280,
        "response":"import math\nfrom typing import Union\n\ndef Check_Solution(n: int, n2: int, n3: int) -> int:\n    a = n\n    b = n2\n    c = n3\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return 0\n    elif discriminant == 0:\n        return 1\n    else:\n        root = math.sqrt(discriminant)\n        return 2"
    },
    {
        "id":281,
        "response":"import itertools\n\ndef sum_even_odd(lst):\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum, odd_sum"
    },
    {
        "id":282,
        "response":"import math\n\ndef parallelogram_perimeter(a, b):\n    return 2 * (a + b)"
    },
    {
        "id":283,
        "response":"from typing import List\n\ndef div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n    return [num for num in lst if num % m == 0 and num % n == 0]"
    },
    {
        "id":284,
        "response":"import math\n\ndef all_Bits_Set_In_The_Given_Range(n, n2, n3):\n    return (n & n2) == n2 and (n & n3) == n3"
    },
    {
        "id":285,
        "response":"import re\n\ndef is_Isomorphic(s, s2):\n    if len(s) != len(s2):\n        return False\n    s_map = {}\n    s2_map = {}\n    for i in range(len(s)):\n        if s[i] not in s_map and s2[i] not in s2_map:\n            s_map[s[i]] = s2[i]\n            s2_map[s2[i]] = s[i]\n        elif s_map.get(s[i]) != s2[i] or s2_map.get(s2[i]) != s[i]:\n            return False\n    return True"
    },
    {
        "id":286,
        "response":"import typing\n\ndef sum_num(tup: typing.Tuple[int]) -> float:\n    return sum(tup) \/ len(tup)"
    },
    {
        "id":287,
        "response":"import math\n\ndef is_odd(n: int) -> bool:\n    return n % 2 != 0"
    },
    {
        "id":288,
        "response":"import typing\n\ndef substract_elements(tup: typing.Tuple[typing.Tuple[int, int], typing.Tuple[int, int]]) -> typing.Tuple[typing.Tuple[int, int]]:\n    return (tup[0][0] - tup[1][0], tup[0][1] - tup[1][1])"
    },
    {
        "id":289,
        "response":"import typing\n\ndef reverse_list_lists(lst: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    return [sublist[::-1] for sublist in lst]"
    },
    {
        "id":290,
        "response":"import numpy as np\n\ndef find_Extra(lst, lst2, n):\n    arr1 = np.array(lst)\n    arr2 = np.array(lst2)\n    return np.where(arr1 == arr2)[0][n]"
    },
    {
        "id":291,
        "response":"import math\n\ndef same_Length(n, n2):\n    return len(str(abs(n))) == len(str(abs(n2)))"
    },
    {
        "id":292,
        "response":"import re\n\ndef remove_spaces(s: str) -> str:\n    return re.sub(' +', '', s)"
    },
    {
        "id":293,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    return [sublist[-1] for sublist in lst]"
    },
    {
        "id":294,
        "response":"import re\n\ndef float_to_tuple(s):\n    return tuple(map(float, re.findall(r\"-?\\d+(?:\\.\\d+)?\", s)))"
    },
    {
        "id":295,
        "response":"import itertools\n\ndef max_sum_subseq(lst):\n    max_sum = float('-inf')\n    for r in range(1, len(lst) + 1):\n        for subseq in itertools.combinations(lst, r):\n            max_sum = max(max_sum, sum(subseq))\n    return max_sum"
    },
    {
        "id":296,
        "response":"import typing\n\ndef sort_list_last(lst: typing.List[int]) -> typing.List[int]:\n    return sorted(lst, key=lambda x: x % 100, reverse=True)"
    },
    {
        "id":297,
        "response":"import re\n\ndef is_Word_Present(s, s2):\n    return bool(re.search(r'\\b' + re.escape(s) + r'\\b', s2))"
    },
    {
        "id":298,
        "response":"import itertools\n\ndef extract_elements(lst, n):\n    return list(itertools.islice(lst, n))"
    },
    {
        "id":299,
        "response":"import typing\n\ndef check(lst: typing.List[typing.List[int]], n: int) -> bool:\n    return len(lst) == n and all(len(sublist) == n for sublist in lst)"
    },
    {
        "id":300,
        "response":"import re\n\ndef match_num(s):\n    return bool(re.match(r'^\\d+', s))"
    },
    {
        "id":301,
        "response":"import math\n\ndef num_comm_div(n, n2):\n    return math.gcd(n, n2)"
    },
    {
        "id":302,
        "response":"import math\n\ndef find(n, n2):\n    return n % n2"
    },
    {
        "id":303,
        "response":"import itertools\n\ndef add_consecutive_nums(lst):\n    return sum(b - a for a, b in zip(lst, lst[1:]))"
    },
    {
        "id":304,
        "response":"import math\n\ndef sum_Of_Series(n: int) -> int:\n    return sum(i**3 for i in range(1, n+1))"
    },
    {
        "id":305,
        "response":"import re\n\ndef re_order(lst):\n    return [i for i in lst if i != 0] + [0] * (len(lst) - len([i for i in lst if i != 0]))"
    },
    {
        "id":306,
        "response":"import math\n\ndef permutation_coefficient(n, k):\n    return math.factorial(n) \/\/ math.factorial(n - k)"
    },
    {
        "id":307,
        "response":"import typing\n\ndef remove_words(lst: typing.List[str], lst2: typing.List[str]) -> typing.List[str]:\n    return [word for word in lst if word not in lst2]"
    },
    {
        "id":308,
        "response":"from typing import List\n\ndef same_order(lst: List[int], lst2: List[int]) -> bool:\n    if len(lst) != len(lst2):\n        return False\n    return lst == sorted(lst) == sorted(lst2)"
    },
    {
        "id":309,
        "response":"import math\n\ndef average_Odd(n):\n    count = 0\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            count += 1\n            sum += i\n    if count == 0:\n        return 0\n    return sum \/ count"
    },
    {
        "id":310,
        "response":"from typing import List\n\ndef no_of_subsequences(lst: List[int], k: int) -> int:\n    n = len(lst)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if j < lst[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - lst[i - 1]]\n    return dp[n][k]"
    },
    {
        "id":311,
        "response":"import math\nfrom typing import List\n\ndef find_Min_Sum(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num: int) -> List[int]:\n        factors = []\n        for i in range(2, num + 1):\n            while num % i == 0:\n                factors.append(i)\n                num \/\/= i\n        return factors\n\n    factors = prime_factors(n)\n    min_sum = float('inf')\n    for i in range(1 << len(factors)):\n        subset_sum = 0\n        for j in range(len(factors)):\n            if (i & (1 << j)) != 0:\n                subset_sum += factors[j]\n        if subset_sum != 0 and subset_sum < min_sum:\n            min_sum = subset_sum\n    return min_sum"
    },
    {
        "id":312,
        "response":"from typing import Tuple\nfrom collections import defaultdict\n\ndef count_element_freq(tup: Tuple) -> dict:\n    freq_dict = defaultdict(int)\n    for elem in tup:\n        if isinstance(elem, tuple):\n            for sub_elem in elem:\n                freq_dict[sub_elem] += 1\n        else:\n            freq_dict[elem] += 1\n    return dict(freq_dict)"
    },
    {
        "id":313,
        "response":"import itertools\n\ndef add_str(tup, s):\n    return [x + s for x in tup]"
    },
    {
        "id":314,
        "response":"import itertools\n\ndef sum_elements(tup):\n    return sum(sum(sublist) for sublist in tup)"
    },
    {
        "id":315,
        "response":"import itertools\n\ndef modular_sum(lst, n, n2):\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) % n == 0 and sum(subset) % n2 == 0:\n                return True\n    return False"
    },
    {
        "id":316,
        "response":"import typing\nfrom typing import List\n\ndef radix_sort(lst: List[int]) -> List[int]:\n    RADIX = 10\n    placement = 1\n    max_digit = max(lst)\n    while placement < max_digit:\n      buckets = [list() for _ in range(RADIX)]\n      for i in lst:\n        tmp = int((i \/ placement) % RADIX)\n        buckets[tmp].append(i)\n      a = 0\n      for b in range(RADIX):\n        buck = buckets[b]\n        for i in buck:\n          lst[a] = i\n          a += 1\n      placement *= RADIX\n    return lst"
    },
    {
        "id":317,
        "response":"import itertools\n\ndef largest_pos(lst):\n    return max(filter(lambda x: x > 0, lst))"
    },
    {
        "id":318,
        "response":"import math\n\ndef sqrt_root(n: int) -> float:\n    return math.sqrt(n)"
    },
    {
        "id":319,
        "response":"import math\n\ndef volume_tetrahedron(a: float, h: float) -> float:\n    return (1\/3) * a**2 * h"
    },
    {
        "id":320,
        "response":"import math\nfrom typing import List\n\ndef get_lcm(lst: List[int]) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    lcm = lst[0]\n    for num in lst[1:]:\n        lcm = lcm * num \/\/ gcd(lcm, num)\n    return lcm"
    },
    {
        "id":321,
        "response":"import math\n\ndef check_isosceles(n: int, n2: int, n3: int) -> bool:\n    return math.isclose(n, n2) or math.isclose(n2, n3) or math.isclose(n, n3)"
    },
    {
        "id":322,
        "response":"from typing import List\nimport itertools\n\ndef lbs(lst: List[int]) -> int:\n    max_len = 0\n    max_bitonic_subsequence = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            subsequence = []\n            for k in range(i, j + 1):\n                subsequence.append(lst[k])\n            if len(subsequence) > 1:\n                inc = 1\n                dec = 1\n                for m in range(1, len(subsequence)):\n                    if subsequence[m] > subsequence[m - 1]:\n                        inc += 1\n                    else:\n                        dec += 1\n                if inc > max_len or (inc == max_len and dec > max_len):\n                    max_len = max(inc, dec)\n                    max_bitonic_subsequence = max(inc, dec)\n                elif inc == max_len and dec == max_len:\n                    max_bitonic_subsequence = max(max_bitonic_subsequence, max(inc, dec))\n    return max_bitonic_subsequence"
    },
    {
        "id":323,
        "response":"import re\nfrom typing import Optional\n\ndef check_string(s: str) -> Optional[bool]:\n    pattern = re.compile(r'^[A-Z]{1}[a-z]{1}\\d{1}$')\n    return bool(pattern.match(s))"
    },
    {
        "id":324,
        "response":"from typing import List\n\ndef max_sum_increasing_subsequence(lst: List[int], n: int) -> int:\n    if n == 0:\n        return 0\n\n    dp = [[0, 0] for _ in range(n)]\n    dp[0][0] = lst[0]\n    dp[0][1] = 0\n\n    for i in range(1, n):\n        dp[i][0] = lst[i]\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i][0] = max(dp[i][0], dp[j][0] + lst[i])\n        dp[i][1] = max(dp[i][0], dp[i-1][1])\n\n    return dp[n-1][1]"
    },
    {
        "id":325,
        "response":"import math\n\ndef parallel_lines(lst, lst2):\n    x1, y1 = lst[0], lst[1]\n    x2, y2 = lst2[0], lst2[1]\n    slope1 = (y1 - x1) \/ (x1 - y1) if x1 != y1 else float('inf')\n    slope2 = (y2 - x2) \/ (x2 - y2) if x2 != y2 else float('inf')\n    return slope1 == slope2"
    },
    {
        "id":326,
        "response":"import re\n\ndef capitalize_first_last_letters(s):\n    return ' '.join(word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in re.findall(r'\\b\\w+\\b', s))"
    },
    {
        "id":327,
        "response":"import itertools\n\ndef get_pairs_count(lst, n, n2):\n    pairs = list(itertools.combinations(lst, 2))\n    return sum(1 for pair in pairs if pair[0] + pair[1] == n2)"
    },
    {
        "id":328,
        "response":"import itertools\n\ndef min_length(lst):\n    return min(lst, key=len)"
    },
    {
        "id":329,
        "response":"import math\n\ndef jacobsthal_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b"
    },
    {
        "id":330,
        "response":"import typing\n\ndef negative_count(lst: typing.List[int]) -> float:\n    negative_sum = sum(1 for num in lst if num < 0)\n    return negative_sum \/ len(lst) if lst else 0.0"
    },
    {
        "id":331,
        "response":"import sys\n\ndef min_coins(lst, n, n2):\n    dp = [sys.maxsize] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for coin in lst:\n            if i >= coin:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[n] if dp[n] != sys.maxsize else -1"
    },
    {
        "id":332,
        "response":"import re\n\ndef check_permutation(s, s2):\n    return sorted(s) == sorted(s2)"
    },
    {
        "id":333,
        "response":"from typing import Tuple, Any\n\ndef remove_datatype(tup: Tuple[Any, ...], param: type) -> Tuple[Any, ...]:\n    return tuple(i for i in tup if not isinstance(i, param))"
    },
    {
        "id":334,
        "response":"import re\n\ndef search_literal(s, s2):\n    pattern = re.escape(s2)\n    match = re.search(pattern, s)\n    if match:\n        return match.start()\n    else:\n        return -1"
    },
    {
        "id":335,
        "response":"import math\n\ndef topbottom_surfacearea(n):\n    r = n['radius']\n    h = n['height']\n    return 2 * math.pi * r * r"
    },
    {
        "id":336,
        "response":"import typing\n\ndef nth_items(lst: typing.List, n: int) -> typing.Any:\n    if n < 1:\n        raise ValueError(\"n \u0985\u09ac\u09b6\u09cd\u09af\u0987 1 \u098f\u09b0 \u09ac\u09c7\u09b6\u09bf \u09b9\u09a4\u09c7 \u09b9\u09ac\u09c7\")\n    if n > len(lst):\n        raise IndexError(\"\u09a4\u09be\u09b2\u09bf\u0995\u09be\u09af\u09bc n-\u09a4\u09ae \u0986\u0987\u099f\u09c7\u09ae \u09a8\u09c7\u0987\")\n    return lst[n - 1]"
    },
    {
        "id":337,
        "response":"import re\nfrom typing import List\n\ndef first_repeated_word(s: str) -> str:\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None"
    },
    {
        "id":338,
        "response":"import typing\n\ndef string_list_to_tuple(tup: typing.List[str]) -> tuple[str, ...]:\n    return tuple(tup)"
    },
    {
        "id":339,
        "response":"import math\n\ndef basesnum_coresspondingnum(lst, lst2):\n    return [math.pow(base, num) for base, num in zip(lst, lst2)]"
    },
    {
        "id":340,
        "response":"import collections\nimport math\n\ndef find_Diff(lst, n):\n    freq = collections.Counter(lst)\n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    return max_freq - min_freq"
    },
    {
        "id":341,
        "response":"from typing import List\n\ndef check_abundant(n: int) -> bool:\n    def get_proper_divisors(num: int) -> List[int]:\n        divisors = [i for i in range(1, num) if num % i == 0]\n        return divisors\n\n    proper_divisors = get_proper_divisors(n)\n    return sum(proper_divisors) > n"
    },
    {
        "id":342,
        "response":"import re\n\ndef fill_spaces(s):\n    return re.sub(r'[ ,\\.]', '|', s)"
    },
    {
        "id":343,
        "response":"import typing\n\ndef count_digits(n: int, n2: int) -> int:\n    return len(str(n + n2))"
    },
    {
        "id":344,
        "response":"import re\n\ndef flatten_tuple(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.extend(flatten_tuple(item))\n        elif isinstance(item, list):\n            result.extend(flatten_tuple(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "id":345,
        "response":"import math\n\ndef toggle_F_and_L_bits(n):\n    mask = (1 << 0) | (1 << (math.ceil(math.log2(n)) - 1))\n    return n ^ mask"
    },
    {
        "id":346,
        "response":"import re\n\ndef last_occurence_char(s, s2):\n    return re.search(s2, s).start() if re.search(s2, s) else -1"
    },
    {
        "id":347,
        "response":"import math\n\ndef Total_Hamming_Distance(n):\n    def hamming_distance(x, y):\n        return sum(c1 != c2 for c1, c2 in zip(bin(x)[2:], bin(y)[2:]))\n\n    total_distance = 0\n    for i in range(n, 0, -1):\n        for j in range(i-1, 0, -1):\n            total_distance += hamming_distance(i, j)\n    return total_distance"
    },
    {
        "id":348,
        "response":"from typing import List\n\ndef longest_increasing_subsequence(lst: List[int]) -> int:\n    if not lst:\n        return 0\n\n    dp = [1] * len(lst)\n\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"
    },
    {
        "id":349,
        "response":"import math\n\ndef odd_Num_Sum(n: int) -> int:\n    total_sum = 0\n    num = 1\n    power = 5\n    while n > 0:\n        total_sum += math.pow(num, power)\n        num += 2\n        n -= 1\n        power = 5\n    return int(total_sum)"
    },
    {
        "id":350,
        "response":"import itertools\nimport numpy as np\n\ndef find_Max(lst, n, n2):\n    arr = np.array(lst)\n    rotated_arrs = [np.rot90(arr, k) for k in range(n2)]\n    rotated_arrs = [arr for arr in rotated_arrs if arr.size != 0]\n    max_val = max(max(row) for col in rotated_arrs for row in col)\n    return max_val"
    },
    {
        "id":351,
        "response":"import typing\n\ndef extract_column(lst: typing.List[typing.List[typing.Any]], n: int) -> typing.List[typing.Any]:\n    return [sublist[n] for sublist in lst if len(sublist) > n]"
    },
    {
        "id":352,
        "response":"import math\n\ndef Seq_Linear(lst):\n    if len(lst) < 2:\n        return True\n    slope = (lst[1] - lst[0]) \/ (1 if lst[0] != lst[1] else 1)\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != slope:\n            return False\n    return True"
    },
    {
        "id":353,
        "response":"import re\n\ndef tuple_to_float(tup: tuple) -> float:\n    return float(''.join(map(str, tup)))"
    },
    {
        "id":354,
        "response":"import re\n\ndef Split(lst):\n    def is_odd(num):\n        return num % 2 != 0\n\n    def is_not_prime(num):\n        if num < 2:\n            return True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return True\n        return False\n\n    def is_not_palin(num):\n        return str(num) != str(num)[::-1]\n\n    return [num for num in lst if is_odd(num) or is_not_prime(num) or is_not_palin(num)]"
    },
    {
        "id":355,
        "response":"import math\n\ndef difference(n: int) -> int:\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_numbers = n * (n + 1) \/\/ 2\n    return sum_cubes - sum_numbers"
    },
    {
        "id":356,
        "response":"import itertools\n\ndef find_Odd_Pair(lst, n):\n    odd_numbers = [i for i in lst if i % 2 != 0]\n    pairs = list(itertools.combinations(odd_numbers, 2))\n    return sum([pair[0] ^ pair[1] for pair in pairs])"
    },
    {
        "id":357,
        "response":"import re\n\ndef toggle_string(s):\n    return re.sub(r'([a-z])', lambda m: m.group(1).upper(), re.sub(r'([A-Z])', lambda m: m.group(1).lower(), s))"
    },
    {
        "id":358,
        "response":"import math\n\ndef digit_distance_nums(n, n2):\n    digits1 = [int(d) for d in str(abs(n))]\n    digits2 = [int(d) for d in str(abs(n2))]\n    min_len = min(len(digits1), len(digits2))\n    max_len = max(len(digits1), len(digits2))\n    distance = 0\n    for i in range(max_len):\n        if i < min_len:\n            distance += abs(digits1[i] - digits2[i])\n        else:\n            distance += max(digits1[i], digits2[i])\n    return distance"
    },
    {
        "id":359,
        "response":"import numpy as np\n\ndef max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += lst[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum"
    },
    {
        "id":360,
        "response":"import typing\n\ndef union_elements(tup: typing.Tuple[int, int, int], tup2: typing.Tuple[int, int, int]) -> typing.Set[int]:\n    return set(tup).union(set(tup2))"
    },
    {
        "id":361,
        "response":"from typing import List, Tuple\n\ndef assign_elements(lst: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    if not lst or len(set(i for t in lst for i in t)) != len(lst):\n        return []\n\n    pairs = {}\n    for pair in lst:\n        if pair[0] not in pairs:\n            pairs[pair[0]] = pair[1]\n        elif pair[1] not in pairs.values():\n            pairs[pair[0]] = pair[1]\n\n    result = []\n    for pair in lst:\n        if pair[0] not in pairs or pair[1] not in pairs.values():\n            result.append(pair)\n        else:\n            result.append((pair[0], pairs[pair[0]]))\n            pairs[pair[0]] = pair[1]\n\n    return result"
    },
    {
        "id":362,
        "response":"import typing\nimport itertools\n\ndef Find_Max_Length(lst: typing.List[typing.List[int]]) -> int:\n    return max(len(sublist) for sublist in lst)"
    },
    {
        "id":363,
        "response":"import re\n\ndef extract_values(s: str) -> list:\n    pattern = r'\"([^\"]*)\"'  # \u0989\u09a6\u09cd\u09a7\u09c3\u09a4\u09bf \u099a\u09bf\u09b9\u09cd\u09a8\u09c7\u09b0 \u09ae\u09a7\u09cd\u09af\u09c7 \u09a5\u09c7\u0995\u09c7 \u09ae\u09be\u09a8 \u09ac\u09c7\u09b0 \u0995\u09b0\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u098f\u0995\u099f\u09bf \u09aa\u09cd\u09af\u09be\u099f\u09be\u09b0\u09cd\u09a8\n    matches = re.findall(pattern, s)  # \u09b8\u09cd\u099f\u09cd\u09b0\u09bf\u0982\u09af\u09bc\u09c7 \u09ae\u09cd\u09af\u09be\u099a \u0995\u09b0\u09be \u09ae\u09be\u09a8 \u09ac\u09c7\u09b0 \u0995\u09b0\u09c7\n    return matches"
    },
    {
        "id":364,
        "response":"import collections\n\ndef count_Pairs(lst, n):\n    freq_map = collections.Counter(lst)\n    count = 0\n    for num in freq_map:\n        complement = n - num\n        if complement != num and freq_map[num] > 0 and freq_map[complement] > 0:\n            count += freq_map[num] * freq_map[complement]\n    return count"
    },
    {
        "id":365,
        "response":"import re\n\ndef split(s):\n    return re.split('', s)"
    },
    {
        "id":366,
        "response":"import re\n\ndef sum_digits(n: int) -> int:\n    return sum(int(digit) for digit in re.findall('\\d', str(n)))"
    },
    {
        "id":367,
        "response":"import itertools\n\ndef issort_list(lst):\n    return lst == sorted(lst)"
    },
    {
        "id":368,
        "response":"import typing\n\ndef empty_list(n: int) -> list:\n    return [[] for _ in range(n)]"
    },
    {
        "id":369,
        "response":"import itertools\n\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"
    },
    {
        "id":370,
        "response":"import re\n\ndef remove_words(lst, lst2):\n    return [re.sub(r'\\b' + re.escape(word) + r'\\b', '', string) for string in lst]"
    },
    {
        "id":371,
        "response":"from typing import List\n\ndef max_sum_pair_diff_lessthan_K(lst: List[int], n: int, n2: int) -> int:\n    lst.sort()\n    total_sum = 0\n    for i in range(n2):\n        total_sum += lst[i]\n    max_sum = total_sum\n    for i in range(n2, n):\n        total_sum = total_sum - lst[i-n2] + lst[i]\n        max_sum = max(max_sum, total_sum)\n    return max_sum"
    },
    {
        "id":372,
        "response":"import itertools\n\ndef two_unique_nums(lst):\n    return list(itertools.islice(set(lst), 0, len(lst) - 2))"
    },
    {
        "id":373,
        "response":"import math\nfrom typing import List\n\ndef unique_product(lst: List[int]) -> int:\n    product = 1\n    seen = set()\n    for num in lst:\n        if num not in seen:\n            product *= num\n            seen.add(num)\n    return product"
    },
    {
        "id":374,
        "response":"import math\n\ndef surfacearea_cylinder(n, n2):\n    r = n\n    h = n2\n    l = 2 * math.pi * r\n    t = 2 * math.pi * r * h\n    return l + t"
    },
    {
        "id":375,
        "response":"import itertools\n\ndef count_no(*args):\n    sequence = list(itertools.chain(*args))\n    n = int(input(\"Enter the position of the number you want to find: \"))\n    if n <= 0:\n        return \"Position should be greater than 0\"\n    elif n > len(sequence):\n        return \"Position out of range\"\n    else:\n        return sequence[n-1]"
    },
    {
        "id":376,
        "response":"import typing\n\ndef is_Sub_Array(lst: typing.List[int], lst2: typing.List[int], n: int, n2: int) -> bool:\n    return sorted(lst) == sorted([lst2[i] for i in range(n2) if i < n])"
    },
    {
        "id":377,
        "response":"import math\n\ndef last_Digit_Factorial(n: int) -> int:\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        return math.factorial(n) % 10"
    },
    {
        "id":378,
        "response":"from typing import List, Tuple\n\ndef interleave_lists(lst1: List[int], lst2: List[int], lst3: List[int]) -> List[Tuple[int, int, int]]:\n    min_len = min(len(lst1), len(lst2), len(lst3))\n    result = []\n    for i in range(min_len):\n        result.append((lst1[i], lst2[i], lst3[i]))\n    return result"
    },
    {
        "id":379,
        "response":"import itertools\n\ndef find_dissimilar(tup, tup2):\n    dissimilar = list(itertools.chain(*zip(tup, tup2)))\n    return [x for x, y in dissimilar if x != y]"
    },
    {
        "id":380,
        "response":"from typing import Tuple, List\n\ndef extract_even(tup: Tuple[Tuple[int, ...], ...]) -> List[Tuple[int, ...]]:\n    return [sub_tup for sub_tup in tup if any(num % 2 == 0 for num in sub_tup)]"
    },
    {
        "id":381,
        "response":"import math\n\ndef surface_Area(n, n2):\n    side = n\n    base_area = n * n\n    height = n2\n    slant_height = math.sqrt(side**2 + (height\/2)**2)\n    area_of_triangle = 0.5 * side * slant_height\n    total_surface_area = base_area + 4 * area_of_triangle\n    return total_surface_area"
    },
    {
        "id":382,
        "response":"import collections\n\ndef my_dict(dct):\n    return len(dct) == 0"
    },
    {
        "id":383,
        "response":"import math\n\ndef catalan_number(n: int) -> int:\n    if n < 0:\n        return 0\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return math.comb(2 * n, n) - math.comb(2 * n, n - 1)"
    },
    {
        "id":384,
        "response":"import re\n\ndef find_adverbs(s):\n    pattern = r'\\b(\u09ad\u09be\u09b2\u09cb|\u0996\u09be\u09b0\u09be\u09aa|\u09b8\u09c1\u09a8\u09cd\u09a6\u09b0|\u09ae\u09a8\u09cd\u09a6|\u09b8\u09c1\u0996\u09c0|\u09a6\u09c1\u0983\u0996\u09c0|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u0987|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u0993|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7\u09ac\u09c7\u09b6\u09bf\u09b0\u09c2\u09aa\u09c7\u09a8\u09be|\u09b8\u09ac\u099a\u09c7"
    },
    {
        "id":385,
        "response":"import heapq\n\ndef expensive_items(lst, n):\n    return heapq.nlargest(n, lst)"
    },
    {
        "id":386,
        "response":"import numpy as np\n\ndef split_Arr(lst, n, n2):\n    arr = np.array(lst)\n    arr_split = np.split(arr, n)\n    arr_split = np.concatenate((arr_split[0], arr_split[-1]))\n    return arr_split.tolist()"
    },
    {
        "id":387,
        "response":"import typing\n\ndef list_tuple(lst: typing.List) -> typing.Tuple:\n    return tuple(lst)"
    },
    {
        "id":388,
        "response":"import typing\n\ndef big_diff(lst: typing.List[int]) -> int:\n    return max(lst) - min(lst)"
    },
    {
        "id":389,
        "response":"import math\n\ndef perfect_squares(n, n2):\n    perfect_squares = []\n    for i in range(int(math.sqrt(n)) + 1, int(math.sqrt(n2)) + 1):\n        perfect_squares.append(i * i)\n    return sorted(list(set(perfect_squares)))"
    },
    {
        "id":390,
        "response":"import math\n\ndef polar_rect(r, theta):\n    return (r * math.cos(theta), r * math.sin(theta))"
    },
    {
        "id":391,
        "response":"import itertools\n\ndef swap_List(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        lst[0], lst[-1] = lst[-1], lst[0]\n        return lst"
    },
    {
        "id":392,
        "response":"import math\n\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            sum += math.comb(n, i) * math.comb(n, j)\n    return sum"
    },
    {
        "id":393,
        "response":"import re\n\ndef removezero_ip(s):\n    return re.sub(r'^0+', '', s)"
    },
    {
        "id":394,
        "response":"from typing import List\n\ndef diff_even_odd(lst: List[int]) -> int:\n    even = 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even - odd"
    },
    {
        "id":395,
        "response":"import math\nfrom collections import Counter\n\ndef min_Swaps(s, s2):\n    if len(s) != len(s2):\n        return -1\n    diff = [i for i, j in enumerate(s) if s[i] != s2[i]]\n    count = Counter(s2)\n    ans = 0\n    for i in diff:\n        if count[s[i]] == 0:\n            return -1\n        count[s[i]] -= 1\n        ans += i - diff.index(i)\n    return ans"
    },
    {
        "id":396,
        "response":"import typing\n\ndef tuple_size(tup: typing.Tuple) -> int:\n    return len(tup)"
    },
    {
        "id":397,
        "response":"import itertools\n\ndef find_kth(lst, lst2, k, n, n2, n3):\n    merged_list = list(itertools.chain.from_iterable(zip(lst, lst2)))\n    return merged_list[k-1]"
    },
    {
        "id":398,
        "response":"import math\n\ndef armstrong_number(n: int) -> bool:\n    return n == sum(int(digit) ** len(str(n)) for digit in str(n))"
    },
    {
        "id":399,
        "response":"import math\n\ndef sum_average(n: int) -> tuple:\n    if n <= 0:\n        return 0, 0\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    average = sum \/ n\n    return sum, average"
    },
    {
        "id":400,
        "response":"import math\n\ndef is_Even(n: int) -> bool:\n    return n % 2 == 0"
    }
]