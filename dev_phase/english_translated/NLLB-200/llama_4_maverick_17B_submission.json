[
    {
        "id":1,
        "response":"```python\ndef max_chain_length(lst, n):\n    lst.sort(key=lambda x: x[1])\n    count = 1\n    end = lst[0][1]\n    for i in range(1, n):\n        if lst[i][0] > end:\n            count += 1\n            end = lst[i][1]\n    return count\n```"
    },
    {
        "id":2,
        "response":"```python\ndef first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] > 1:\n            return char\n    return None\n```"
    },
    {
        "id":3,
        "response":"```python\ndef get_ludic(n):\n    ludic_nums = []\n    nums = list(range(1, n + 1))\n    i = 0\n    while i < len(nums):\n        ludic_nums.append(nums[i])\n        nums = [num for j, num in enumerate(nums) if (j + 1) % nums[i] != 0]\n        i += 1\n    return ludic_nums\n```"
    },
    {
        "id":4,
        "response":"```python\ndef reverse_words(s):\n    words = s.split()\n    words = words[::-1]\n    return ' '.join(words)\n```"
    },
    {
        "id":5,
        "response":"```python\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n```"
    },
    {
        "id":6,
        "response":"```python\nimport math\n\ndef radian_degree(n):\n    return n * math.pi \/ 180\n```"
    },
    {
        "id":7,
        "response":"```python\nimport re\n\ndef find_literals(s, s2):\n    try:\n        pattern = re.compile(re.escape(s2))\n        match = pattern.search(s)\n        if match:\n            return match.start()\n        else:\n            return -1\n    except re.error:\n        return -1\n```"
    },
    {
        "id":8,
        "response":"```python\ndef bell_Number(n):\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n```"
    },
    {
        "id":9,
        "response":"```python\nimport math\n\ndef floor_Min(n, n2, n3):\n    return min(math.floor(n), math.floor(n2), math.floor(n3))\n```"
    },
    {
        "id":10,
        "response":"```python\ndef remove_kth_element(lst, n):\n    if n < 1 or n > len(lst):\n        return lst\n    return lst[:n-1] + lst[n:]\n```"
    },
    {
        "id":11,
        "response":"```python\ndef max_of_nth(lst, n):\n    return max(row[n] for row in lst)\n```"
    },
    {
        "id":12,
        "response":"```python\nfrom typing import List\n\ndef merge(lst: List[List[int]]) -> List[int]:\n    first_elements = [sublist[0] for sublist in lst if sublist]\n    last_elements = [sublist[-1] for sublist in lst if sublist]\n    return first_elements + last_elements\n```"
    },
    {
        "id":13,
        "response":"```python\nfrom typing import List, Tuple, Any\n\ndef maximum_value(lst: List[Tuple[Any]]) -> Any:\n    return max(max(inner_tuple) for inner_tuple in lst)\n```"
    },
    {
        "id":14,
        "response":"```python\nfrom typing import List, Tuple\n\ndef cummulative_sum(lst: List[Tuple[int]]) -> List[int]:\n    total = 0\n    result = []\n    for tup in lst:\n        for num in tup:\n            total += num\n            result.append(total)\n    return result\n```"
    },
    {
        "id":15,
        "response":"```python\ndef average_tuple(tup):\n    total_sum = sum(num for t in tup for num in t)\n    total_count = sum(len(t) for t in tup)\n    return total_sum \/ total_count if total_count != 0 else 0\n```"
    },
    {
        "id":16,
        "response":"```python\ndef tuple_modulo(tup1, tup2):\n    return tuple(a % b for a, b in zip(tup1, tup2))\n```"
    },
    {
        "id":17,
        "response":"```python\nimport math\n\ndef min_Jumps(d, n2, n3):\n    jumps = 0\n    current = 0\n    while current < d:\n        if d - current >= n2:\n            current += n2\n        elif d - current >= n3:\n            current += n3\n        else:\n            return -1\n        jumps += 1\n    if current == d:\n        return jumps\n    else:\n        return -1\n```"
    },
    {
        "id":18,
        "response":"```python\nfrom typing import List\n\ndef div_list(lst1: List[float], lst2: List[float]) -> List[float]:\n    return list(map(lambda x, y: x \/ y if y != 0 else float('inf'), lst1, lst2))\n```"
    },
    {
        "id":19,
        "response":"```python\ndef move_num(s):\n    nums = [c for c in s if c.isdigit()]\n    non_nums = [c for c in s if not c.isdigit()]\n    return ''.join(non_nums + nums)\n```"
    },
    {
        "id":20,
        "response":"```python\nfrom typing import List\nimport itertools\n\ndef largest_subset(lst: List[int], n: int) -> List[int]:\n    def is_valid_subset(subset):\n        for i in range(len(subset)):\n            for j in range(i + 1, len(subset)):\n                if (subset[i] + subset[j]) % n != 0:\n                    return False\n        return True\n\n    max_length = 0\n    max_subset = []\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if is_valid_subset(subset) and len(subset) > max_length:\n                max_length = len(subset)\n                max_subset = list(subset)\n    return max_subset\n```"
    },
    {
        "id":21,
        "response":"```python\nimport re\n\ndef increment_numerics(lst, k):\n    result = []\n    for s in lst:\n        result.append(re.sub(r'\\d+', lambda x: str(int(x.group()) + k), s))\n    return result\n```"
    },
    {
        "id":22,
        "response":"```python\ndef get_median(lst, lst2, n):\n    import numpy as np\n    merged = np.merge_sorted(lst + lst2)\n    if n % 2 == 0:\n        return (merged[n\/\/2 - 1] + merged[n\/\/2]) \/ 2\n    else:\n        return merged[n\/\/2]\n```"
    },
    {
        "id":23,
        "response":"```python\nfrom typing import List\n\ndef nth_nums(lst: List[int], n: int) -> List[int]:\n    return list(map(lambda x: x ** n, lst))\n```"
    },
    {
        "id":24,
        "response":"```python\ndef is_upper(s):\n    return s.upper()\n```"
    },
    {
        "id":25,
        "response":"```python\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":26,
        "response":"```python\nimport math\n\ndef triangle_area(n):\n    return n * n\n```"
    },
    {
        "id":27,
        "response":"```python\ndef find_First_Missing(lst, n, n2):\n    lst = list(set(lst))\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if lst[i] != i + n2:\n                return i + n2\n    return len(lst) + n2\n```"
    },
    {
        "id":28,
        "response":"```python\ndef replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')\n```"
    },
    {
        "id":29,
        "response":"```python\nfrom typing import List, Union\n\ndef Split(lst: List[Union[int, str]]) -> List[int]:\n    return [i for i in lst if isinstance(i, int) and i % 2 == 0]\n```"
    },
    {
        "id":30,
        "response":"```python\nfrom typing import Tuple, List\n\ndef get_adjacent_coordinates(tup: Tuple[int, int]) -> List[Tuple[int, int]]:\n    x, y = tup\n    adjacent_coordinates = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adjacent_coordinates\n\ndef main(tup: Tuple[int, int]) -> List[Tuple[int, int]]:\n    return get_adjacent_coordinates(tup)\n```"
    },
    {
        "id":31,
        "response":"```python\nimport re\n\ndef replace_spaces(s: str) -> str:\n    return re.sub(r'\\s|_', lambda x: '_' if x.group() == ' ' else ' ', s)\n```"
    },
    {
        "id":32,
        "response":"```python\ndef move_zero(lst):\n    return [i for i in lst if i != 0] + [0] * lst.count(0)\n```"
    },
    {
        "id":33,
        "response":"```python\ndef pair_OR_Sum(lst, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += lst[i] ^ lst[j]\n    return total\n\ndef pair_OR_Sum(lst, n):\n    total = 0\n    for bit in range(32):\n        count = sum(((val >> bit) & 1) for val in lst)\n        total += (count * (n - count) * (1 << bit))\n    return total\n```"
    },
    {
        "id":34,
        "response":"```python\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (2 * i) ** 4\n    return sum\n```"
    },
    {
        "id":35,
        "response":"```python\nimport heapq\nfrom typing import List\n\ndef heap_sort(lst: List[int]) -> List[int]:\n    heap = []\n    for val in lst:\n        heapq.heappush(heap, val)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n```"
    },
    {
        "id":36,
        "response":"```python\ndef Check_Solution(a, b, c):\n    import math\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        return False\n    root1 = (-b + math.sqrt(determinant)) \/ (2 * a)\n    root2 = (-b - math.sqrt(determinant)) \/ (2 * a)\n    if root1 * root2 == 1:\n        return True\n    return False\n```"
    },
    {
        "id":37,
        "response":"```python\ndef noprofit_noloss(selling_price, cost_price):\n    return selling_price == cost_price\n```"
    },
    {
        "id":38,
        "response":"```python\ndef wind_chill(temperature, wind_speed):\n    import math\n    if temperature > 50 or wind_speed < 3:\n        return None\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)\n    return wind_chill_index\n```"
    },
    {
        "id":39,
        "response":"```python\ndef sample_nam(lst):\n    return sum(len(name) for name in lst if name and name[0].isupper())\n\nlst = [\"John\", \"anna\", \"Tom\", \"jerry\"]\nprint(sample_nam(lst))\n```"
    },
    {
        "id":40,
        "response":"```python\nimport re\ndef remove_parenthesis(s):\n    return re.sub(r'\\([^)]*\\)', '', s)\n```"
    },
    {
        "id":41,
        "response":"```python\ndef is_nonagonal(n):\n    return (7 * n * n - 5 * n) \/\/ 2\n```"
    },
    {
        "id":42,
        "response":"```python\ndef remove_similar_row(lst):\n    seen = set()\n    result = []\n    for row in lst:\n        row_tuple = tuple(row)\n        if row_tuple not in seen:\n            result.append(row)\n            seen.add(row_tuple)\n    return result\n```"
    },
    {
        "id":43,
        "response":"```python\nimport re\n\ndef text_match_wordz_middle(s):\n    pattern = r'\\b\\w+z\\w+\\b'\n    return re.findall(pattern, s)\n```"
    },
    {
        "id":44,
        "response":"```python\ndef reverse_Array_Upto_K(lst, n):\n    return lst[:n][::-1] + lst[n:]\n```"
    },
    {
        "id":45,
        "response":"```python\ndef find_k_product(lst, n):\n    return sum(x[n] for x in lst if len(x) > n)\n```"
    },
    {
        "id":46,
        "response":"```python\ndef No_of_cubes(n, k):\n    import math\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Both n and k should be integers.\")\n    if n < 0 or k < 0:\n        raise ValueError(\"Both n and k should be non-negative.\")\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3\n```"
    },
    {
        "id":47,
        "response":"```python\nimport re\n\ndef split_upperstring(s):\n    return re.sub('([A-Z])', r' \\1', s).strip().split()\n```"
    },
    {
        "id":48,
        "response":"```python\ndef exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n```"
    },
    {
        "id":49,
        "response":"```python\ndef sum_Range_list(lst, n, n2):\n    if not lst or n < 0 or n2 >= len(lst) or n > n2:\n        return 0\n    return sum(lst[n:n2+1])\n```"
    },
    {
        "id":50,
        "response":"```python\nfrom typing import List\n\ndef are_Equal(lst1: List[int], lst2: List[int], n: int, n2: int) -> bool:\n    if n != n2:\n        return False\n    lst1.sort()\n    lst2.sort()\n    for i in range(n):\n        if lst1[i] != lst2[i]:\n            return False\n    return True\n```"
    },
    {
        "id":51,
        "response":"```python\ndef check_subset(tup1, tup2):\n    return set(tup1).issubset(set(tup2))\n```"
    },
    {
        "id":52,
        "response":"```python\nfrom typing import List, Tuple, Any\n\ndef matrix_to_list(matrix: Tuple[Tuple[Any], ...]) -> List[Tuple[Any, ...]]:\n    return list(zip(*matrix))\n```"
    },
    {
        "id":53,
        "response":"```python\nfrom collections import defaultdict\nfrom typing import List, Tuple, Dict\n\ndef grouping_dictionary(lst: List[Tuple]) -> Dict:\n    result = defaultdict(list)\n    for key, value in lst:\n        result[key].append(value)\n    return dict(result)\n```"
    },
    {
        "id":54,
        "response":"```python\ndef rectangle_perimeter(length, width):\n    return 2 * (length + width)\n```"
    },
    {
        "id":55,
        "response":"```python\ndef fifth_Power_Sum(n):\n    return sum(i ** 5 for i in range(1, n + 1))\n```"
    },
    {
        "id":56,
        "response":"```python\ndef find_Min_Sum(lst, lst2, n):\n    lst.sort()\n    lst2.sort()\n    return sum(abs(lst[i] - lst2[i]) for i in range(n))\n```"
    },
    {
        "id":57,
        "response":"```python\nimport math\n\ndef first_Digit(n):\n    factorial = math.factorial(n)\n    return int(str(factorial)[0])\n```"
    },
    {
        "id":58,
        "response":"```python\nfrom typing import List, Any\nfrom collections import Counter\n\ndef max_occurrences(lst: List[Any]) -> Any:\n    if not lst:\n        return None\n    counter = Counter(lst)\n    return counter.most_common(1)[0][0]\n```"
    },
    {
        "id":59,
        "response":"```python\nfrom typing import List\n\ndef Repeat(lst: List[int]) -> List[int]:\n    seen = set()\n    duplicates = set()\n    for num in lst:\n        if num in seen:\n            duplicates.add(num)\n        seen.add(num)\n    return list(duplicates)\n```"
    },
    {
        "id":60,
        "response":"```python\ndef find_Points(n, n2, n3, n4):\n    range1 = set(range(n, n2 + 1))\n    range2 = set(range(n3, n4 + 1))\n    union_range = range1.union(range2)\n    min_val = min(n, n2, n3, n4)\n    max_val = max(n, n2, n3, n4)\n    all_points = set(range(min_val, max_val + 1))\n    points_not_in_ranges = sorted(list(all_points - union_range))\n    return points_not_in_ranges\n```"
    },
    {
        "id":61,
        "response":"```python\ndef max_sum_of_three_consecutive(lst, n):\n    if n < 3:\n        return sum(lst)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = lst[0]\n    dp[2] = lst[0] + lst[1]\n    for i in range(3, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + lst[i - 1], dp[i - 3] + lst[i - 1] + lst[i - 2])\n    return dp[n]\n```"
    },
    {
        "id":62,
        "response":"```python\ndef sorted_dict(dct):\n    return dict(sorted(dct.items()))\n```"
    },
    {
        "id":63,
        "response":"```python\ndef find_max_val(x, y, n):\n    import math\n    k = n - (n % x - y + x) % x\n    if k >= y:\n        return k\n    else:\n        return -1\n```"
    },
    {
        "id":64,
        "response":"```python\ndef average_Even(n):\n    count = 0\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n        count += 1\n    return sum \/ count if count > 0 else 0\n```"
    },
    {
        "id":65,
        "response":"```python\ndef move_last(lst):\n    if len(lst) > 0:\n        first_element = lst.pop(0)\n        lst.append(first_element)\n    return lst\n```"
    },
    {
        "id":66,
        "response":"```python\ndef count_char(s, s2):\n    count = 0\n    for char in s:\n        if char == s2:\n            count += 1\n    return count\n```"
    },
    {
        "id":67,
        "response":"```python\ndef Check_Vow(s1, s2):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for char in s1:\n        if char in vowels:\n            count += 1\n    return count\n```"
    },
    {
        "id":68,
        "response":"```python\nimport re\ndef replace(s, s2):\n    return re.sub(r'(.)\\1+', r'\\1', s)\n```"
    },
    {
        "id":69,
        "response":"```python\nimport re\n\ndef check_IP(s):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":70,
        "response":"```python\ndef decreasing_trend(lst):\n    return all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n```"
    },
    {
        "id":71,
        "response":"```python\ndef set_Right_most_Unset_Bit(n: int) -> int:\n    import re\n    bin_n = bin(n)[2:]\n    bin_n = re.sub('0.*$', lambda x: '1' * len(x.group()), bin_n)\n    return int(bin_n, 2) if '0' in bin(n) else n + 1\n```"
    },
    {
        "id":72,
        "response":"```python\ndef max_of_three(n1, n2, n3):\n    return max(n1, n2, n3)\n```"
    },
    {
        "id":73,
        "response":"```python\ndef convert(lst):\n    return int(''.join(map(str, lst)))\n```"
    },
    {
        "id":74,
        "response":"```python\ndef remove_duplicate(s):\n    words = s.split()\n    unique_words = list(dict.fromkeys(words))\n    return ' '.join(unique_words)\n```"
    },
    {
        "id":75,
        "response":"```python\ndef sum_nums(n1, n2, n3, n4):\n    sum_of_nums = n1 + n2\n    if n3 <= sum_of_nums <= n4:\n        return 20\n    return sum_of_nums\n```"
    },
    {
        "id":76,
        "response":"```python\nimport re\n\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n```"
    },
    {
        "id":77,
        "response":"```python\ndef validity_triangle(n, n2, n3):\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    sides = sorted([n, n2, n3])\n    return sides[0] + sides[1] > sides[2]\n```"
    },
    {
        "id":78,
        "response":"```python\ndef remove_spaces(s: str) -> str:\n    return s.replace(\" \", \"\")\n```"
    },
    {
        "id":79,
        "response":"```python\nfrom typing import Dict, Any\n\ndef access_key(dct: Dict[Any, Any], n: int) -> Any:\n    keys = list(dct.keys())\n    if n < len(keys):\n        return keys[n]\n    else:\n        return None\n```"
    },
    {
        "id":80,
        "response":"```python\ndef increasing_trend(lst):\n    return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1))\n```"
    },
    {
        "id":81,
        "response":"```python\ndef smallest_Divisor(n):\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n```"
    },
    {
        "id":82,
        "response":"```python\nfrom typing import List\n\ndef mul_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x * y, lst1, lst2))\n```"
    },
    {
        "id":83,
        "response":"```python\nimport math\n\ndef sum_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        if math.sqrt(n - i * i) % 1 == 0:\n            return True\n    return False\n```"
    },
    {
        "id":84,
        "response":"```python\nfrom collections import Counter\n\ndef count_Char(s: str, s2: str) -> dict:\n    counter = Counter(s2)\n    n = len(s)\n    result = {}\n    for char, count in counter.items():\n        result[char] = count * (len(s2) \/\/ n) + Counter(s2[:len(s2) % n])[char]\n    return result\n```"
    },
    {
        "id":85,
        "response":"```python\ndef sum_Of_Primes(n):\n    sieve = [True] * (n + 1)\n    sieve[0:2] = [False, False]\n    for currentPrime in range(2, int(n ** 0.5) + 1):\n        if sieve[currentPrime]:\n            for multiple in range(currentPrime * currentPrime, n + 1, currentPrime):\n                sieve[multiple] = False\n    return sum(num for num, isPrime in enumerate(sieve) if isPrime)\n```"
    },
    {
        "id":86,
        "response":"```python\nfrom typing import Tuple\nfrom collections import Counter\n\ndef freq_element(tup: Tuple) -> dict:\n    counter = Counter(tup)\n    return dict(counter)\n```"
    },
    {
        "id":87,
        "response":"```python\ndef recur_gcd(n, n2):\n    if n2 == 0:\n        return n\n    else:\n        return recur_gcd(n2, n % n2)\n```"
    },
    {
        "id":88,
        "response":"```python\nimport math\n\ndef len_complex(real, imag):\n    return math.sqrt(real ** 2 + imag ** 2)\n```"
    },
    {
        "id":89,
        "response":"```python\ndef min_jumps(lst, n):\n    jumps = [0] + [float('inf')] * (n - 1)\n    for i in range(1, n):\n        for j in range(i):\n            if j + lst[j] >= i:\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    return jumps[-1] if jumps[-1] != float('inf') else -1\n```"
    },
    {
        "id":90,
        "response":"```python\nfrom typing import List\n\ndef mul_consecutive_nums(lst: List[int]) -> List[int]:\n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] * lst[i + 1])\n    return result\n```"
    },
    {
        "id":91,
        "response":"```python\nfrom typing import List, Tuple\nfrom itertools import defaultdict\n\ndef group_element(lst: List[Tuple[int, int]]) -> dict:\n    result = defaultdict(list)\n    for key, value in lst:\n        result[value].append(key)\n    return dict(result)\n```"
    },
    {
        "id":92,
        "response":"```python\ndef last_Two_Digits(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial = (factorial * i) % 100\n    return factorial\n```"
    },
    {
        "id":93,
        "response":"```python\nimport re\n\ndef remove_multiple_spaces(s):\n    return re.sub(' +', ' ', s)\n```"
    },
    {
        "id":94,
        "response":"```python\ndef extract_unique(dct):\n    return list(set(dct.values()))\n\n```"
    },
    {
        "id":95,
        "response":"```python\ndef check_greater(tup1, tup2):\n    if len(tup1) != len(tup2):\n        return False\n    return all(x < y for x, y in zip(tup1, tup2))\n```"
    },
    {
        "id":96,
        "response":"```python\ndef zip_list(lst, lst2):\n    return list(zip(lst, lst2))\n```"
    },
    {
        "id":97,
        "response":"```python\nfrom typing import List\n\ndef count_even(lst: List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 == 0, lst)))\n```"
    },
    {
        "id":98,
        "response":"```python\nfrom itertools import product\n\ndef sort_dict_item(dct):\n    sorted_keys = sorted(dct.keys(), key=lambda x: x if isinstance(x, tuple) else (x,))\n    sorted_product = sorted(product(*sorted_keys))\n    return [(key, dct[key]) for key in sorted_product if key in dct]\n```"
    },
    {
        "id":99,
        "response":"```python\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    if s.count('1') != s2.count('1'):\n        return -1\n    \n    s = list(s)\n    s2 = list(s2)\n    res = 0\n    count1, count2 = 0, 0\n    \n    for i in range(len(s)):\n        if s[i] != s2[i]:\n            if s[i] == '1':\n                count1 += 1\n            else:\n                count2 += 1\n    \n    return min(count1, count2)\n```"
    },
    {
        "id":100,
        "response":"```python\ndef count_range_in_list(lst, n, n2):\n    return len([i for i in lst if n <= i <= n2])\n```"
    },
    {
        "id":101,
        "response":"```python\ndef equilibrium_index(lst):\n    total_sum = sum(lst)\n    left_sum = 0\n    for i, num in enumerate(lst):\n        if left_sum == total_sum - left_sum - num:\n            return i\n        left_sum += num\n    return -1\n```"
    },
    {
        "id":102,
        "response":"```python\nfrom typing import List\n\ndef removals(lst: List[int], n: int, n2: int) -> int:\n    lst.sort()\n    min_rem = n\n    right = 0\n    for left in range(n):\n        while right < n and lst[right] - lst[left] <= n2:\n            right += 1\n        min_rem = min(min_rem, n - (right - left))\n    return min_rem\n```"
    },
    {
        "id":103,
        "response":"```python\ndef is_key_present(dct, n):\n    return n in dct\n```"
    },
    {
        "id":104,
        "response":"```python\ndef harmonic_sum(n):\n    return sum(1.0\/i for i in range(1, n))\n```"
    },
    {
        "id":105,
        "response":"```python\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))\n```"
    },
    {
        "id":106,
        "response":"```python\ndef is_subset(lst, n, lst2, n2):\n    set1 = set(lst[:n])\n    set2 = set(lst2[:n2])\n    return set2.issubset(set1)\n```"
    },
    {
        "id":107,
        "response":"```python\ndef count_Set_Bits(n: int) -> int:\n    total = 0\n    for i in range(1, n + 1):\n        total += bin(i).count('1')\n    return total\n```"
    },
    {
        "id":108,
        "response":"```python\ndef Convert(s):\n    return list(s)\n```"
    },
    {
        "id":109,
        "response":"```python\nfrom typing import List, Tuple\n\ndef get_unique(lst: List[Tuple]) -> dict:\n    unique_dict = {}\n    for tup in lst:\n        for val in tup:\n            if val not in unique_dict:\n                unique_dict[val] = 1\n            else:\n                unique_dict[val] += 1\n    return unique_dict\n```"
    },
    {
        "id":110,
        "response":"```python\ndef front_and_rear(tup):\n    if len(tup) == 0:\n        return None\n    return (tup[0], tup[-1])\n```"
    },
    {
        "id":111,
        "response":"```python\ndef product_Equal(n):\n    n = str(n)\n    even_product = 1\n    odd_product = 1\n    for i in range(len(n)):\n        if i % 2 == 0:\n            even_product *= int(n[i])\n        else:\n            odd_product *= int(n[i])\n    return even_product % 2 == 0 and odd_product % 2 == 0\n```"
    },
    {
        "id":112,
        "response":"```python\nfrom typing import List\n\ndef remove_duplicate(lst: List) -> List:\n    return list(dict.fromkeys(lst))\n```"
    },
    {
        "id":113,
        "response":"```python\ndef check_valid(tup):\n    return all(\n        isinstance(i, (int, float, str, bool, list, tuple, dict, set)) \n        for i in tup\n    )\n```"
    },
    {
        "id":114,
        "response":"```python\nfrom collections import defaultdict\n\ndef count_Fac(n):\n    factors = defaultdict(int)\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors[i] += 1\n            n \/\/= i\n        i += 1\n    if n > 1:\n        factors[n] += 1\n    return len(factors)\n```"
    },
    {
        "id":115,
        "response":"```python\ndef str_to_tuple(s):\n    import re\n    numbers = re.findall(r'-?\\d+', s)\n    return tuple(int(num) for num in numbers)\n```"
    },
    {
        "id":116,
        "response":"```python\ndef rombus_perimeter(n):\n    return 4 * n\n```"
    },
    {
        "id":117,
        "response":"import math\n\ndef sd_calc(lst):\n    n = len(lst)\n    mean = sum(lst) \/ n\n    variance = sum((x - mean) ** 2 for x in lst) \/ n\n    return math.sqrt(variance)"
    },
    {
        "id":118,
        "response":"```python\ndef alternate_elements(lst):\n    return lst[::2]\n```"
    },
    {
        "id":119,
        "response":"```python\nimport re\n\ndef text_match(s):\n    pattern = r'^ab*$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":120,
        "response":"```python\ndef add_dict_to_tuple(tup, dct):\n    return tup + (dct,)\n```"
    },
    {
        "id":121,
        "response":"```python\ndef maxAverageOfPath(lst, n):\n    dp = [[0.0] * n for _ in range(n)]\n    dp[0][0] = lst[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + lst[0][i]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + lst[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + lst[i][j]\n    return dp[n-1][n-1] \/ (2*n - 1)\n```"
    },
    {
        "id":122,
        "response":"```python\ndef filter_data(dct, min_height, max_height):\n    return {key: value for key, value in dct.items() if min_height <= value <= max_height}\n```"
    },
    {
        "id":123,
        "response":"```python\nfrom typing import List\n\ndef count_same_pair(lst1: List, lst2: List) -> int:\n    return sum(map(lambda x, y: x == y, lst1, lst2))\n```"
    },
    {
        "id":124,
        "response":"```python\ndef power_base_sum(n, n2):\n    return sum(int(digit) for digit in str(n ** n2))\n```"
    },
    {
        "id":125,
        "response":"```python\nimport re\nfrom typing import List\n\ndef extract_quotation(s: str) -> List[str]:\n    pattern = r'\"[^\"]*\"|\\'[^\\']*\\''\n    matches = re.findall(pattern, s)\n    return [match.strip('\"\\'') for match in matches]\n```"
    },
    {
        "id":126,
        "response":"```python\ndef multiply_elements(tup):\n    return tuple(a * b for a, b in zip(tup, tup[1:]))\n\n```"
    },
    {
        "id":127,
        "response":"```python\nimport re\n\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)\n```"
    },
    {
        "id":128,
        "response":"```python\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    max_len = max(len(lst1), len(lst2))\n    lst1 += [0] * (max_len - len(lst1))\n    lst2 += [0] * (max_len - len(lst2))\n    return [x + y for x, y in zip(lst1, lst2)]\n```"
    },
    {
        "id":129,
        "response":"```python\ndef add_list(lst1, lst2):\n    return list(map(lambda x, y: x + y, lst1, lst2))\n\n```"
    },
    {
        "id":130,
        "response":"```python\nfrom typing import List\nimport itertools\n\ndef consecutive_duplicates(lst: List[int]) -> List[int]:\n    return [x for x, _ in itertools.groupby(lst)]\n```"
    },
    {
        "id":131,
        "response":"import math\ndef lateralsurface_cone(r, l):\n    return math.pi * r * l"
    },
    {
        "id":132,
        "response":"```python\nimport re\n\ndef replace_specialchar(s: str) -> str:\n    return re.sub('[ ,.]', ':', s)\n```"
    },
    {
        "id":133,
        "response":"```python\nfrom typing import List\n\ndef find_first_occurrence(lst: List[int], n: int) -> int:\n    left, right = 0, len(lst) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] == n:\n            result = mid\n            right = mid - 1\n        elif lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```"
    },
    {
        "id":134,
        "response":"```python\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(lst: List[int], n: int) -> int:\n    total_sum = 0\n    mod = 10**9 + 7\n    prefix = [0] * n\n    prefix[0] = lst[0]\n    total_sum = lst[0]\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1] * lst[i] + lst[i]\n        total_sum = (total_sum + prefix[i]) % mod\n    return total_sum\n```"
    },
    {
        "id":135,
        "response":"```python\ndef toggle_middle_bits(n: int) -> int:\n    import math\n    if n == 0:\n        return 0\n    num_bits = math.floor(math.log2(n)) + 1\n    if num_bits <= 2:\n        return n\n    mask = ((1 << (num_bits - 2)) - 1) << 1\n    return n ^ mask\n```"
    },
    {
        "id":136,
        "response":"```python\nfrom typing import List\nimport bisect\n\ndef left_insertion(lst: List[int], n: int) -> int:\n    return bisect.bisect_left(lst, n)\n```"
    },
    {
        "id":137,
        "response":"```python\nimport re\n\ndef check_str(s):\n    pattern = re.compile('^[aeiouAEIOU]')\n    return bool(pattern.match(s))\n```"
    },
    {
        "id":138,
        "response":"```python\ndef geometric_sum(n):\n    if n <= 0:\n        return 0\n    r = 0.5\n    a = 1\n    return a * (1 - r ** n) \/ (1 - r)\n```"
    },
    {
        "id":139,
        "response":"```python\nimport math\n\ndef find_Index(n):\n    i = 1\n    while True:\n        triangular_num = i * (i + 1) \/\/ 2\n        if len(str(triangular_num)) == n:\n            return i\n        i += 1\n```"
    },
    {
        "id":140,
        "response":"```python\ndef tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup) - 1, 2)}\n```"
    },
    {
        "id":141,
        "response":"```python\ndef all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1\n```"
    },
    {
        "id":142,
        "response":"```python\nimport math\n\ndef area_tetrahedron(n):\n    return math.sqrt(3) * (n ** 2)\n```"
    },
    {
        "id":143,
        "response":"```python\ndef rotate_right(lst, n, n2):\n    from collections import deque\n    d = deque(lst)\n    d.rotate(n2)\n    return list(d)\n```"
    },
    {
        "id":144,
        "response":"```python\ndef check_none(tup):\n    return any(i is None for i in tup)\n```"
    },
    {
        "id":145,
        "response":"```python\ndef divisible_by_digits(n, n2):\n    def is_divisible(num):\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(n, n2 + 1):\n        if is_divisible(num):\n            count += 1\n    return count\n```"
    },
    {
        "id":146,
        "response":"```python\nimport math\n\ndef sector_area(radius, angle):\n    if radius < 0:\n        return None\n    if angle < 0 or angle > 360:\n        return None\n    return (angle \/ 360) * math.pi * radius ** 2\n```"
    },
    {
        "id":147,
        "response":"```python\ndef lcs_of_three(s, s2, s3, n, n2, n3):\n    dp = [[[0 for _ in range(n3 + 1)] for _ in range(n2 + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(n2 + 1):\n            for k in range(n3 + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif s[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1], \n                                      dp[i - 1][j - 1][k], dp[i - 1][j][k - 1], dp[i][j - 1][k - 1])\n    return dp[n][n2][n3]\n```"
    },
    {
        "id":148,
        "response":"```python\nimport re\n\ndef capital_words_spaces(s):\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", s)\n```"
    },
    {
        "id":149,
        "response":"```python\ndef sort_numeric_strings(lst):\n    import re\n    return sorted(lst, key=lambda x: [int(i) for i in re.findall(r'\\d+', x)])\n```"
    },
    {
        "id":150,
        "response":"```python\ndef add_tuple(lst, tup):\n    lst.append(tup)\n    return lst\n```"
    },
    {
        "id":151,
        "response":"```python\ndef check_min_heap(lst, n):\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        \n        if left_child < n and lst[i] > lst[left_child]:\n            return False\n        \n        if right_child < n and lst[i] > lst[right_child]:\n            return False\n    \n    return True\n```"
    },
    {
        "id":152,
        "response":"```python\ndef jacobsthal_num(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * a + b\n        return b\n```"
    },
    {
        "id":153,
        "response":"```python\nimport heapq\nfrom typing import List, Tuple, Any\n\ndef min_k(lst: List[Tuple[Any, ...]], n: int) -> List[Tuple[Any, ...]]:\n    return heapq.nsmallest(n, lst)\n```"
    },
    {
        "id":154,
        "response":"```python\nfrom typing import List\n\ndef extract_index_list(lst: List[int], lst2: List[int], lst3: List[int]) -> List[int]:\n    set1 = set(lst)\n    set2 = set(lst2)\n    set3 = set(lst3)\n    common_elements = set1 & set2 & set3\n    result = [element for element in lst if element in common_elements]\n    return result\n```"
    },
    {
        "id":155,
        "response":"```python\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return sorted(set(lst))[1]\n```"
    },
    {
        "id":156,
        "response":"```python\nimport re\n\ndef text_match_zero_one(s):\n    pattern = re.compile(r'ab*|a')\n    return bool(pattern.fullmatch(s))\n```"
    },
    {
        "id":157,
        "response":"```python\nfrom typing import List\n\ndef count_reverse_pairs(lst: List[str]) -> int:\n    count = 0\n    seen = set()\n    for s in lst:\n        if s[::-1] in seen:\n            count += lst.count(s[::-1])\n        seen.add(s)\n    return count\n```"
    },
    {
        "id":158,
        "response":"```python\nfrom typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    seen = set()\n    count = 0\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in seen:\n            seen.add(sublist_tuple)\n            count += 1\n    return count\n```"
    },
    {
        "id":159,
        "response":"```python\nimport re\n\ndef is_decimal(s):\n    pattern = r'^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)$'\n    return bool(re.match(pattern, s)) and len(s.split('.')[1]) <= 2 if '.' in s else True\n```"
    },
    {
        "id":160,
        "response":"```python\ndef unique_Element(lst, n):\n    return len(set(lst)) == 1\n```"
    },
    {
        "id":161,
        "response":"```python\nimport math\n\ndef arc_length(radius, angle):\n    angle_in_radians = math.radians(angle)\n    return radius * angle_in_radians\n```"
    },
    {
        "id":162,
        "response":"```python\ndef check_monthnumber_number(n):\n    if not isinstance(n, int) or n < 1 or n > 12:\n        return False\n    months_with_30_days = [4, 6, 9, 11]\n    return n in months_with_30_days\n```"
    },
    {
        "id":163,
        "response":"```python\ndef find_Min_Diff(tup, n):\n    lst = list(tup)\n    lst.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = abs(lst[i] - lst[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```"
    },
    {
        "id":164,
        "response":"```python\nimport re\n\ndef number_ctr(s):\n    return len(re.findall(r'\\d', s))\n```"
    },
    {
        "id":165,
        "response":"def is_polite(n):\n    def is_power_of_two(x):\n        return x != 0 and ((x & (x - 1)) == 0)\n\n    count = 0\n    i = 1\n    while True:\n        if not is_power_of_two(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1"
    },
    {
        "id":166,
        "response":"```python\nfrom typing import Iterable, Any\n\ndef pair_wise(lst: Iterable[Any]) -> Iterable[tuple[Any, Any]]:\n    it = iter(lst)\n    try:\n        prev = next(it)\n    except StopIteration:\n        return\n    for item in it:\n        yield prev, item\n        prev = item\n```"
    },
    {
        "id":167,
        "response":"```python\nfrom typing import List\n\ndef get_Pairs_Count(lst: List[int], n: int, sum: int) -> int:\n    count = 0\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in freq:\n        if sum - num in freq:\n            if sum - num == num:\n                count += freq[num] * (freq[num] - 1) \/\/ 2\n            elif num < sum - num:\n                count += freq[num] * freq[sum - num]\n    return count\n```"
    },
    {
        "id":168,
        "response":"```python\ndef check_Odd_Parity(n: int) -> bool:\n    count = bin(n).count('1')\n    return count % 2 != 0\n```"
    },
    {
        "id":169,
        "response":"```python\ndef Diff(lst1, lst2):\n    return list(set(lst1) - set(lst2)) + list(set(lst2) - set(lst1))\n```"
    },
    {
        "id":170,
        "response":"```python\ndef odd_Num_Sum(n):\n    return sum(i**4 for i in range(1, n*2, 2))\n```"
    },
    {
        "id":171,
        "response":"```python\ndef check_expression(s):\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack\n```"
    },
    {
        "id":172,
        "response":"```python\ndef remove_length(s, n):\n    words = s.split()\n    result = [word for word in words if len(word) != n]\n    return ' '.join(result)\n```"
    },
    {
        "id":173,
        "response":"```python\ndef occurance_substring(s, s2):\n    import re\n    occurrences = [m.start() for m in re.finditer(s2, s)]\n    return occurrences\n```"
    },
    {
        "id":174,
        "response":"```python\ndef check_email(s):\n    def is_valid_char(c):\n        return c.isalnum() or c in ['.', '_', '-']\n\n    if not s or '@' not in s:\n        return False\n\n    local_part, domain = s.rsplit('@', 1)\n\n    if not local_part or not domain:\n        return False\n\n    if local_part[0] == '.' or local_part[-1] == '.':\n        return False\n\n    if '..' in local_part:\n        return False\n\n    for c in local_part:\n        if not is_valid_char(c):\n            return False\n\n    if '.' not in domain:\n        return False\n\n    domain_name, tld = domain.rsplit('.', 1)\n\n    if not domain_name or not tld:\n        return False\n\n    if not domain_name.replace('-', '').isalnum():\n        return False\n\n    if not tld.isalpha() or len(tld) < 2:\n        return False\n\n    return True\n```"
    },
    {
        "id":175,
        "response":"```python\ndef odd_position(lst):\n    return all(lst[i] % 2 != 0 for i in range(1, len(lst), 2))\n```"
    },
    {
        "id":176,
        "response":"```python\ndef count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i > 0 and i < len(s) - 1:\n            if s[i-1] in vowels and s[i+1] in vowels:\n                count += 1\n        elif i == 0:\n            if len(s) > 1 and s[i+1] in vowels:\n                count += 1\n        elif i == len(s) - 1:\n            if len(s) > 1 and s[i-1] in vowels:\n                count += 1\n    return count\n```"
    },
    {
        "id":177,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef find_Sum(lst: List[int], n: int) -> int:\n    count = Counter(lst)\n    return sum(i for i in lst if count[i] == 1)\n```"
    },
    {
        "id":178,
        "response":"```python\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(lst: List[Any]) -> List[List[Any]]:\n    result = []\n    current_group = []\n    \n    for element in lst:\n        if not current_group or element == current_group[-1]:\n            current_group.append(element)\n        else:\n            result.append(current_group)\n            current_group = [element]\n    \n    if current_group:\n        result.append(current_group)\n    \n    return result\n```"
    },
    {
        "id":179,
        "response":"```python\nfrom typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    seen = set()\n    count = 0\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in seen:\n            seen.add(sublist_tuple)\n            count += 1\n    return count\n```"
    },
    {
        "id":180,
        "response":"```python\nfrom typing import List, Tuple\nimport itertools\n\ndef find_combinations(lst: List[Tuple[int]]) -> List[Tuple[int, ...]]:\n    result = []\n    for r in range(1, len(lst) + 1):\n        for combination in itertools.combinations(lst, r):\n            sums = set()\n            for item in itertools.product(*combination):\n                sums.add(sum(item))\n            result.extend([(r, sum_val) for sum_val in sums])\n    return result\n```"
    },
    {
        "id":181,
        "response":"```python\ndef count_Divisors(n: int) -> str:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n```"
    },
    {
        "id":182,
        "response":"```python\ndef Odd_Length_Sum(lst):\n    total_sum = 0\n    n = len(lst)\n    for length in range(1, n + 1, 2):\n        for i in range(n - length + 1):\n            total_sum += sum(lst[i:i + length])\n    return total_sum\n```"
    },
    {
        "id":183,
        "response":"```python\nimport colorsys\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r \/ 255.0, g \/ 255.0, b \/ 255.0\n    h, s, v = colorsys.rgb_to_hsv(r, g, b)\n    return round(h * 360), round(s * 100), round(v * 100)\n```"
    },
    {
        "id":184,
        "response":"```python\ndef mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return None\n    return even * odd\n```"
    },
    {
        "id":185,
        "response":"```python\ndef tuple_str_int(s):\n    s = s.strip('()')\n    return tuple(map(int, s.split(', ')))\n```"
    },
    {
        "id":186,
        "response":"```python\nfrom typing import List\nimport bisect\n\ndef right_insertion(lst: List[int], n: int) -> int:\n    return bisect.bisect_right(lst, n)\n```"
    },
    {
        "id":187,
        "response":"```python\nimport re\n\ndef text_match_three(s):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, s))\n```"
    },
    {
        "id":188,
        "response":"```python\ndef new_tuple(lst, s):\n    return tuple(list(lst) + [s])\n```"
    },
    {
        "id":189,
        "response":"```python\ndef perimeter_polygon(n, n2):\n    return n * n2\n```"
    },
    {
        "id":190,
        "response":"```python\ndef even_position(lst):\n    return all(lst[i] % 2 == 0 for i in range(0, len(lst), 2))\n```"
    },
    {
        "id":191,
        "response":"```python\ndef remove_nested(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)\n```"
    },
    {
        "id":192,
        "response":"```python\ndef count_list(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, list):\n            count += 1\n    return count\n```"
    },
    {
        "id":193,
        "response":"```python\nfrom typing import List\n\ndef last(lst: List[int], target: int, n: int) -> int:\n    for i in range(n - 1, -1, -1):\n        if lst[i] == target:\n            return i\n    return -1\n```"
    },
    {
        "id":194,
        "response":"```python\nimport re\n\ndef text_starta_endb(s):\n    pattern = re.compile(r'^a.*b$')\n    return bool(pattern.match(s))\n```"
    },
    {
        "id":195,
        "response":"```python\nimport heapq\nfrom typing import List, Tuple\n\ndef cheap_items(lst: List[Tuple[str, int]], n: int) -> List[Tuple[str, int]]:\n    return heapq.nsmallest(n, lst, key=lambda x: x[1])\n```"
    },
    {
        "id":196,
        "response":"```python\ndef return_sum(dct):\n    return sum(dct.values())\n```"
    },
    {
        "id":197,
        "response":"```python\ndef sum_in_Range(l, r):\n    sum = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            sum += num\n    return sum\n```"
    },
    {
        "id":198,
        "response":"```python\ndef _sum(lst):\n    return sum(lst)\n```"
    },
    {
        "id":199,
        "response":"```python\ndef left_Rotate(n, d):\n    from collections import deque\n    bits = deque(format(n, 'b'))\n    d = d % len(bits)\n    bits.rotate(-d)\n    return int(''.join(bits), 2)\n```"
    },
    {
        "id":200,
        "response":"```python\ndef remove_all_spaces(s: str) -> str:\n    return s.replace(\" \", \"\")\n```"
    },
    {
        "id":201,
        "response":"```python\ndef test_three_equal(n1, n2, n3):\n    nums = [n1, n2, n3]\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    max_count = max(count_dict.values())\n    if max_count == 3:\n        return 3\n    elif max_count == 2:\n        return 2\n    else:\n        return 0\n```"
    },
    {
        "id":202,
        "response":"```python\ndef count_Rotation(lst, n):\n    min_idx = lst.index(min(lst))\n    return min_idx\n```"
    },
    {
        "id":203,
        "response":"```python\nimport math\n\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    sqrt = math.sqrt(n)\n    return sqrt == int(sqrt)\n```"
    },
    {
        "id":204,
        "response":"```python\ndef is_Product_Even(lst, n):\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product % 2 == 0\n```"
    },
    {
        "id":205,
        "response":"```python\ndef max_sum_list(lst):\n    from typing import List\n    return max(lst, key=sum, default=[])\n```"
    },
    {
        "id":206,
        "response":"```python\ndef max_run_uppercase(s: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in s:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count\n```"
    },
    {
        "id":207,
        "response":"```python\ndef first_odd(lst):\n    return next((num for num in lst if num % 2 != 0), None)\n```"
    },
    {
        "id":208,
        "response":"```python\ndef check_K(tup, n):\n    return n in tup\n```"
    },
    {
        "id":209,
        "response":"```python\ndef check_smaller(tup1, tup2):\n    if len(tup1) != len(tup2):\n        return False\n    return all(x > y for x, y in zip(tup1, tup2))\n```"
    },
    {
        "id":210,
        "response":"```python\ndef count_variable(*args):\n    from collections import Counter\n    count = Counter(args)\n    return dict(count)\n\ndef main():\n    print(count_variable(1, 2, 2, 3, 3, 3))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":211,
        "response":"```python\nfrom typing import List, Tuple\n\ndef check_identical(lst1: List[Tuple], lst2: List[Tuple]) -> bool:\n    if len(lst1) != len(lst2):\n        return False\n    return set(lst1) == set(lst2)\n```"
    },
    {
        "id":212,
        "response":"```python\nimport re\n\ndef road_rd(s):\n    return re.sub(r'\\broad\\b', 'rd.', s)\n```"
    },
    {
        "id":213,
        "response":"```python\ndef string_length(s: str) -> int:\n    return len(s)\n```"
    },
    {
        "id":214,
        "response":"```python\ndef rombus_area(d1, d2):\n    return (d1 * d2) \/ 2\n```"
    },
    {
        "id":215,
        "response":"```python\ndef sort_by_dnf(lst, n):\n    low, mid, high = 0, 0, n - 1\n    while mid <= high:\n        if lst[mid] == 0:\n            lst[low], lst[mid] = lst[mid], lst[low]\n            low += 1\n            mid += 1\n        elif lst[mid] == 1:\n            mid += 1\n        else:\n            lst[mid], lst[high] = lst[high], lst[mid]\n            high -= 1\n    return lst\n```"
    },
    {
        "id":216,
        "response":"```python\ndef clear_tuple(tup):\n    return ()\n```"
    },
    {
        "id":217,
        "response":"```python\nfrom typing import List\n\ndef div_of_nums(lst: List[int], n: int, m: int) -> List[int]:\n    return list(filter(lambda x: x % n == 0 or x % m == 0, lst))\n```"
    },
    {
        "id":218,
        "response":"```python\ndef lower_ctr(s: str) -> int:\n    return sum(1 for c in s if c.islower())\n```"
    },
    {
        "id":219,
        "response":"```python\nfrom typing import List\n\ndef count_duplic(lst: List[int]) -> List[int]:\n    result = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            count += 1\n        else:\n            result.append(count)\n            count = 1\n    result.append(count)\n    return result\n```"
    },
    {
        "id":220,
        "response":"```python\ndef check_monthnum_number(n):\n    return 1 <= n <= 12\n```"
    },
    {
        "id":221,
        "response":"```python\ndef merge_dictionaries(dct, dct2):\n    return {**dct, **dct2}\n```"
    },
    {
        "id":222,
        "response":"```python\nimport re\n\ndef pass_validity(s):\n    if len(s) < 8:\n        return False\n    if not re.search(\"[a-z]\", s):\n        return False\n    if not re.search(\"[A-Z]\", s):\n        return False\n    if not re.search(\"[0-9]\", s):\n        return False\n    if not re.search(\"[_@$]\", s):\n        return False\n    return True\n```"
    },
    {
        "id":223,
        "response":"```python\nimport re\n\ndef check_substring(s, s2):\n    pattern = re.escape(s2)\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":224,
        "response":"```python\ndef remove_even(lst):\n    return [num for num in lst if num % 2 != 0]\n```"
    },
    {
        "id":225,
        "response":"```python\ndef access_elements(lst, lst2):\n    return [lst[i] for i in lst2 if i < len(lst)]\n```"
    },
    {
        "id":226,
        "response":"```python\ndef check_Type_Of_Triangle(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return \"Not a Triangle\"\n    if n1 + n2 <= n3 or n2 + n3 <= n1 or n1 + n3 <= n2:\n        return \"Not a Triangle\"\n    if n1 == n2 == n3:\n        return \"Equilateral\"\n    elif n1 == n2 or n2 == n3 or n1 == n3:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n```"
    },
    {
        "id":227,
        "response":"```python\ndef sum_column(lst, n):\n    return sum(row[n] for row in lst if len(row) > n)\n```"
    },
    {
        "id":228,
        "response":"```python\nimport re\n\ndef count_alpha_dig_spl(s: str) -> tuple:\n    alpha_count = len(re.findall(r'[a-zA-Z]', s))\n    dig_count = len(re.findall(r'\\d', s))\n    spl_count = len(re.findall(r'[^a-zA-Z0-9]', s))\n    return alpha_count, dig_count, spl_count\n```"
    },
    {
        "id":229,
        "response":"```python\nfrom collections import Counter\n\ndef second_frequent(lst):\n    freq = Counter(lst)\n    sorted_freq = sorted(freq.values(), reverse=True)\n    if len(sorted_freq) < 2 or sorted_freq[0] == sorted_freq[1]:\n        return None\n    second_max_freq = sorted_freq[1]\n    second_max_strings = [string for string, count in freq.items() if count == second_max_freq]\n    return min(second_max_strings)\n```"
    },
    {
        "id":230,
        "response":"```python\nimport math\n\ndef round_up(n, n2):\n    return math.ceil(n \/ n2) * n2\n```"
    },
    {
        "id":231,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    count = 0\n    freq = Counter(lst)\n    for k, v in freq.items():\n        count += v * (v - 1) \/\/ 2\n    return count\n```"
    },
    {
        "id":232,
        "response":"```python\nimport re\nfrom typing import Optional\n\ndef extract_max(s: str) -> Optional[int]:\n    numbers = re.findall(r'\\d+', s)\n    if not numbers:\n        return None\n    return max(map(int, numbers))\n```"
    },
    {
        "id":233,
        "response":"```python\ndef get_key(dct):\n    return list(dct.keys())\n```"
    },
    {
        "id":234,
        "response":"```python\ndef generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    dir_index = 0\n    row, col = 0, 0\n    for i in range(n*n):\n        matrix[row][col] = 2**(i+1)\n        next_row, next_col = row + directions[dir_index][0], col + directions[dir_index][1]\n        if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row][next_col] == 0:\n            row, col = next_row, next_col\n        else:\n            dir_index = (dir_index + 1) % 4\n            row, col = row + directions[dir_index][0], col + directions[dir_index][1]\n    return matrix\n```"
    },
    {
        "id":235,
        "response":"```python\ndef slope(x1, y1, x2, y2):\n    if x1 == x2:\n        return float('inf')\n    return (y2 - y1) \/ (x2 - x1)\n```"
    },
    {
        "id":236,
        "response":"```python\ndef max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    max_length = 0\n    current_sum = 0\n    start = 0\n    max_start = 0\n    max_end = 0\n    \n    for end in range(n):\n        current_sum += lst[end]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - start + 1\n            max_start = start\n            max_end = end\n            \n        if current_sum < 0:\n            current_sum = 0\n            start = end + 1\n            \n    return max_length\n```"
    },
    {
        "id":237,
        "response":"```python\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n, 2))\n```"
    },
    {
        "id":238,
        "response":"```python\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    count = 0\n    for i in range(len(s)):\n        if s[i] != s2[i]:\n            count += 1\n    if count % 2 != 0:\n        return -1\n    return count \/\/ 2\n```"
    },
    {
        "id":239,
        "response":"```python\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[0])\n```"
    },
    {
        "id":240,
        "response":"```python\ndef Check_Solution(a, b, c):\n    import math\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        return False\n    elif determinant == 0:\n        return True\n    else:\n        root1 = (-b + math.sqrt(determinant)) \/ (2*a)\n        root2 = (-b - math.sqrt(determinant)) \/ (2*a)\n        return root1 == -root2\n```"
    },
    {
        "id":241,
        "response":"```python\ndef get_inv_count(lst, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] > lst[j]:\n                inv_count += 1\n    return inv_count\n```"
    },
    {
        "id":242,
        "response":"```python\ndef get_odd_occurence(lst, n):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count % 2 != 0:\n            return num\n    return None\n```"
    },
    {
        "id":243,
        "response":"```python\nimport heapq\n\ndef nth_super_ugly_number(n, lst):\n    k = len(lst)\n    ugly_numbers = [1]\n    pointers = [0] * k\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (lst[i], i))\n    while len(ugly_numbers) < n:\n        next_ugly, idx = heapq.heappop(heap)\n        if next_ugly != ugly_numbers[-1]:\n            ugly_numbers.append(next_ugly)\n        pointers[idx] += 1\n        heapq.heappush(heap, (ugly_numbers[pointers[idx]] * lst[idx], idx))\n    return ugly_numbers[-1]\n```"
    },
    {
        "id":244,
        "response":"```python\ndef get_Number(n, n2):\n    arr = list(range(1, n + 1))\n    odd = [x for x in arr if x % 2 != 0]\n    even = [x for x in arr if x % 2 == 0]\n    merged = odd + even\n    if n2 > len(merged):\n        return -1\n    else:\n        return merged[n2 - 1]\n```"
    },
    {
        "id":245,
        "response":"```python\nimport math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    factorial = math.factorial(n)\n    count = 0\n    while factorial > 0:\n        count += 1\n        factorial \/\/= 10\n    return count\n```"
    },
    {
        "id":246,
        "response":"```python\ndef find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        result = max(result, plat_needed)\n    return result\n```"
    },
    {
        "id":247,
        "response":"```python\nfrom typing import List, Any\n\ndef lcopy(lst: List[Any]) -> List[Any]:\n    if len(lst) == 1 and isinstance(lst[0], tuple) and len(lst[0]) == 1:\n        return list(lst[0])\n    return lst\n```"
    },
    {
        "id":248,
        "response":"```python\ndef area_trapezium(a, b, height):\n    return 0.5 * (a + b) * height\n```"
    },
    {
        "id":249,
        "response":"```python\ndef Sum(n):\n    return sum(int(digit) for digit in str(n))\n```"
    },
    {
        "id":250,
        "response":"```python\ndef is_triangleexists(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    if n1 + n2 > n3 and n2 + n3 > n1 and n1 + n3 > n2:\n        return True\n    return False\n```"
    },
    {
        "id":251,
        "response":"```python\ndef Sum_of_Inverse_Divisors(n, n2):\n    def get_divisors(num):\n        divisors = []\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i != num \/\/ i:\n                    divisors.append(num \/\/ i)\n        return divisors\n\n    divisors_n = get_divisors(n)\n    divisors_n2 = get_divisors(n2)\n    common_divisors = set(divisors_n) & set(divisors_n2)\n    sum_inverse = sum(1 \/ divisor for divisor in common_divisors)\n    return sum_inverse\n```"
    },
    {
        "id":252,
        "response":"```python\ndef remove_negs(lst):\n    return [i for i in lst if i >= 0]\n```"
    },
    {
        "id":253,
        "response":"```python\ndef sum_of_odd_Factors(n):\n    import math\n    sum = 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count += 1\n            n = n \/\/ i\n            curr_term *= i\n            curr_sum += curr_term\n        sum *= curr_sum\n    if n >= 2:\n        sum *= (1 + n)\n    return sum\n```"
    },
    {
        "id":254,
        "response":"```python\nimport heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst\n```"
    },
    {
        "id":255,
        "response":"```python\ndef check_Even_Parity(n: int) -> bool:\n    count = bin(n).count('1')\n    return count % 2 == 0\n```"
    },
    {
        "id":256,
        "response":"```python\ndef find_Min_Swaps(lst, n):\n    count_ones = sum(lst)\n    count = 0\n    max_count = 0\n    left = 0\n    for right in range(n):\n        count += lst[right]\n        if right - left + 1 > count_ones:\n            count -= lst[left]\n            left += 1\n        max_count = max(max_count, count)\n    return count_ones - max_count\n```"
    },
    {
        "id":257,
        "response":"```python\ndef listify_list(lst):\n    return list(map(list, lst))\n```"
    },
    {
        "id":258,
        "response":"```python\ndef count_list(lst):\n    from typing import List\n    count = sum(1 for sub_lst in lst if isinstance(sub_lst, list))\n    square_count = sum(1 for num in lst if isinstance(num, (int, float)) and num ** 0.5 % 1 == 0)\n    return [count, square_count]\n```"
    },
    {
        "id":259,
        "response":"```python\nfrom typing import List\n\ndef sub_lists(lst: List) -> List[List]:\n    sublists = [[]]\n    for i in range(len(lst) + 1):\n        for j in range(i):\n            sublists.append(lst[j: i])\n    return sublists\n```"
    },
    {
        "id":260,
        "response":"```python\ndef check_alphanumeric(s: str) -> bool:\n    if not s:\n        return False\n    return s[-1].isalnum()\n```"
    },
    {
        "id":261,
        "response":"```python\nfrom typing import List\n\ndef anagram_lambda(lst: List[str], s: str) -> List[str]:\n    s_sorted = \"\".join(sorted(s))\n    return list(filter(lambda x: \"\".join(sorted(x)) == s_sorted, lst))\n```"
    },
    {
        "id":262,
        "response":"```python\nfrom collections import Counter\nimport re\nfrom typing import List, Tuple\n\ndef n_common_words(s: str, n: int) -> List[Tuple[str, int]]:\n    s = re.sub(r'[^\\w\\s]', '', s.lower())\n    words = s.split()\n    freq = Counter(words)\n    return freq.most_common(n)\n```"
    },
    {
        "id":263,
        "response":"```python\ndef find_longest_conseq_subseq(lst, n):\n    num_set = set(lst)\n    max_length = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            max_length = max(max_length, current_length)\n    return max_length\n```"
    },
    {
        "id":264,
        "response":"```python\nfrom typing import List\n\ndef palindrome_lambda(lst: List[str]) -> List[str]:\n    return list(filter(lambda s: s == s[::-1], lst))\n```"
    },
    {
        "id":265,
        "response":"```python\ndef ntimes_list(lst, n):\n    list(map(lambda x: print(x), lst*n))\n```"
    },
    {
        "id":266,
        "response":"```python\ndef check_monthnumb(s):\n    months_31 = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    return s.capitalize() in months_31\n```"
    },
    {
        "id":267,
        "response":"```python\ndef min_Num(lst, n):\n    total_sum = sum(lst)\n    if total_sum % 2 == 0:\n        return 0\n    else:\n        return 1\n```"
    },
    {
        "id":268,
        "response":"```python\ndef length_Of_Last_Word(s: str) -> int:\n    s = s.strip()\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])\n```"
    },
    {
        "id":269,
        "response":"```python\ndef remove_list_range(lst, n, n2):\n    return [sublist for sublist in lst if min(sublist) >= n and max(sublist) <= n2]\n```"
    },
    {
        "id":270,
        "response":"```python\nfrom typing import List\n\ndef sum_positivenum(lst: List[int]) -> int:\n    return sum(filter(lambda x: x > 0, lst))\n```"
    },
    {
        "id":271,
        "response":"```python\ndef are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return s2 in s1 + s1\n```"
    },
    {
        "id":272,
        "response":"```python\nfrom typing import List, Any\n\ndef check_subset(lst1: List[Any], lst2: List[Any]) -> bool:\n    def flatten(lst: List[Any]) -> List[Any]:\n        return [item for sublist in lst for item in (flatten(sublist) if isinstance(sublist, list) else [sublist])]\n\n    return set(flatten(lst2)).issubset(set(flatten(lst1)))\n```"
    },
    {
        "id":273,
        "response":"```python\ndef fibonacci(n):\n    def fib_helper(a, b, count):\n        if count == 0:\n            return a\n        else:\n            return fib_helper(b, a + b, count - 1)\n\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib_helper(0, 1, n - 1)\n```"
    },
    {
        "id":274,
        "response":"```python\nfrom typing import List\n\ndef check_Concat(s: str, s2: str) -> bool:\n    word_dict = {}\n    words = s2.split()\n    for word in words:\n        word_dict[word] = word_dict.get(word, 0) + 1\n\n    def can_break(s: str, word_dict: dict) -> bool:\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in word_dict:\n                    dp[i] = True\n                    break\n        return dp[-1]\n\n    return can_break(s, word_dict)\n```"
    },
    {
        "id":275,
        "response":"```python\ndef min_difference(lst):\n    return min(abs(x - y) for x, y in lst)\n```"
    },
    {
        "id":276,
        "response":"```python\nimport math\n\ndef lcm(n: int, n2: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    if n <= 0 or n2 <= 0:\n        raise ValueError(\"Both numbers must be positive\")\n\n    return abs(n * n2) \/\/ gcd(n, n2)\n```"
    },
    {
        "id":277,
        "response":"```python\ndef sort_String(s: str) -> str:\n    return ''.join(sorted(s))\n```"
    },
    {
        "id":278,
        "response":"```python\ndef check_tuples(tup, k):\n    return len(tup) == k\n```"
    },
    {
        "id":279,
        "response":"```python\nimport re\n\ndef text_match(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":280,
        "response":"```python\nimport math\n\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return 2\n    elif d == 0:\n        return 1\n    else:\n        return 0\n```"
    },
    {
        "id":281,
        "response":"```python\ndef sum_even_odd(lst):\n    even_sum = sum(num for num in lst if num % 2 == 0)\n    odd_sum = sum(num for num in lst if num % 2 != 0)\n    return even_sum + odd_sum\n```"
    },
    {
        "id":282,
        "response":"```python\ndef parallelogram_perimeter(a, b):\n    return 2 * (a + b)\n```"
    },
    {
        "id":283,
        "response":"```python\nfrom typing import List\n\ndef div_of_nums(lst: List[int], n: int, n2: int) -> List[int]:\n    return list(filter(lambda x: x % n == 0 and x % n2 == 0, lst))\n```"
    },
    {
        "id":284,
        "response":"```python\ndef all_Bits_Set_In_The_Given_Range(n, n2, n3):\n    mask = ((1 << (n3 - n2 + 1)) - 1) << n2\n    return (n & mask) == mask\n```"
    },
    {
        "id":285,
        "response":"```python\ndef is_Isomorphic(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n\n    s_to_s2 = {}\n    s2_to_s = {}\n\n    for char_s, char_s2 in zip(s, s2):\n        if char_s not in s_to_s2 and char_s2 not in s2_to_s:\n            s_to_s2[char_s] = char_s2\n            s2_to_s[char_s2] = char_s\n        elif s_to_s2.get(char_s) != char_s2 or s2_to_s.get(char_s2) != char_s:\n            return False\n\n    return True\n```"
    },
    {
        "id":286,
        "response":"```python\ndef sum_num(tup):\n    return sum(tup) \/ len(tup)\n```"
    },
    {
        "id":287,
        "response":"```python\ndef is_odd(n: int) -> bool:\n    return (n & 1) != 0\n```"
    },
    {
        "id":288,
        "response":"```python\nfrom typing import Tuple\n\ndef substract_elements(tup1: Tuple, tup2: Tuple) -> Tuple:\n    return tuple(a - b for a, b in zip(tup1, tup2))\n\ntup = (10, 20, 30, 40)\ntup2 = (1, 2, 3, 4)\nprint(substract_elements(tup, tup2))\n```"
    },
    {
        "id":289,
        "response":"```python\ndef reverse_list_lists(lst):\n    return [sublist[::-1] for sublist in lst[::-1]]\n```"
    },
    {
        "id":290,
        "response":"```python\ndef find_Extra(lst, lst2, n):\n    import bisect\n    if len(lst) > len(lst2):\n        longer_list = lst\n        shorter_list = lst2\n    else:\n        longer_list = lst2\n        shorter_list = lst\n    for i in range(len(shorter_list)):\n        if shorter_list[i] != longer_list[i]:\n            return i\n    return len(longer_list) - 1\n```"
    },
    {
        "id":291,
        "response":"```python\ndef same_Length(n, n2):\n    return len(str(abs(n))) == len(str(abs(n2)))\n```"
    },
    {
        "id":292,
        "response":"import re\ndef remove_spaces(s):\n    return re.sub(' +', ' ', s).strip()"
    },
    {
        "id":293,
        "response":"```python\nfrom typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[-1] for sublist in lst if sublist]\n```"
    },
    {
        "id":294,
        "response":"```python\ndef float_to_tuple(s):\n    import re\n    from typing import Tuple\n    numbers = re.findall(r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\", s)\n    return tuple(float(num) for num in numbers)\n```"
    },
    {
        "id":295,
        "response":"```python\ndef max_sum_subseq(lst):\n    if not lst:\n        return 0\n    if len(lst) <= 2:\n        return max(0, max(lst))\n    dp = [0]*len(lst)\n    dp[0] = max(0, lst[0])\n    dp[1] = max(dp[0], lst[1])\n    for i in range(2, len(lst)):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i])\n    return dp[-1]\n```"
    },
    {
        "id":296,
        "response":"```python\ndef sort_list_last(lst):\n    return sorted(lst)\n```"
    },
    {
        "id":297,
        "response":"```python\ndef is_Word_Present(s, s2):\n    words = s.split()\n    return s2.lower() in [word.lower() for word in words]\n```"
    },
    {
        "id":298,
        "response":"```python\ndef extract_elements(lst, n):\n    return [lst[i:i+n] for i in range(len(lst)-n+1)]\n```"
    },
    {
        "id":299,
        "response":"```python\ndef check(lst, n):\n    corner_elements = []\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            corner_elements.extend([lst[i][0], lst[i][-1]])\n        else:\n            corner_elements.extend([lst[i][0], lst[i][-1]])\n    sorted_corner_elements = sorted(corner_elements)\n    return corner_elements == sorted_corner_elements\n```"
    },
    {
        "id":300,
        "response":"```python\nimport re\n\ndef match_num(s):\n    pattern = r'^\\d+'\n    match = re.search(pattern, s)\n    if match:\n        return match.group()\n    else:\n        return None\n```"
    },
    {
        "id":301,
        "response":"```python\nimport math\n\ndef num_comm_div(n1, n2):\n    count = 0\n    gcd = math.gcd(n1, n2)\n    for i in range(1, int(math.sqrt(gcd)) + 1):\n        if gcd % i == 0:\n            if gcd \/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n```"
    },
    {
        "id":302,
        "response":"```python\ndef find(n, n2):\n    if n2 == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return n % n2\n```"
    },
    {
        "id":303,
        "response":"```python\ndef add_consecutive_nums(lst):\n    return [sum(lst[i:i+2]) for i in range(len(lst)-1)]\n```"
    },
    {
        "id":304,
        "response":"```python\ndef sum_Of_Series(n):\n    return (n * (n + 1) \/\/ 2) ** 2\n```"
    },
    {
        "id":305,
        "response":"```python\ndef re_order(lst):\n    return [i for i in lst if i != 0] + [0] * lst.count(0)\n```"
    },
    {
        "id":306,
        "response":"```python\nimport math\n\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    return math.factorial(n) \/\/ math.factorial(n - k)\n```"
    },
    {
        "id":307,
        "response":"```python\ndef remove_words(lst, lst2):\n    return [word for word in lst if word not in lst2]\n```"
    },
    {
        "id":308,
        "response":"```python\ndef same_order(lst1, lst2):\n    from collections import OrderedDict\n    common_elements = list(OrderedDict.fromkeys([element for element in lst1 if element in lst2]))\n    lst2_filtered = [element for element in lst2 if element in lst1]\n    return common_elements == lst2_filtered\n```"
    },
    {
        "id":309,
        "response":"```python\ndef average_Odd(n):\n    count = 0\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 != 0:\n            sum += i\n            count += 1\n        i += 1\n    return sum \/ count\n```"
    },
    {
        "id":310,
        "response":"```python\nfrom typing import List\nimport itertools\n\ndef no_of_subsequences(lst: List[int], n: int) -> int:\n    count = 0\n    product = 1\n    left = 0\n    for right in range(len(lst)):\n        product *= lst[right]\n        while left <= right and product >= n:\n            product \/\/= lst[left]\n            left += 1\n        count += right - left + 1\n    total_subsequences = 2 ** len(lst)\n    return total_subsequences - count\n```"
    },
    {
        "id":311,
        "response":"```python\nimport math\n\ndef find_Min_Sum(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return sum(factors)\n```"
    },
    {
        "id":312,
        "response":"```python\nfrom typing import Tuple, Any\n\ndef count_element_freq(tup: Tuple[Any, ...]) -> dict:\n    freq_dict = {}\n    stack = [tup]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, tuple):\n            for item in current:\n                stack.append(item)\n        else:\n            freq_dict[current] = freq_dict.get(current, 0) + 1\n    return freq_dict\n```"
    },
    {
        "id":313,
        "response":"```python\ndef add_str(tup, s):\n    return [str(i) + s for i in tup]\n```"
    },
    {
        "id":314,
        "response":"```python\ndef sum_elements(tup):\n    return sum(tup)\n```"
    },
    {
        "id":315,
        "response":"```python\ndef modular_sum(lst, n, m):\n    dp = [[False for _ in range(m)] for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(m):\n            dp[i][j] = dp[i - 1][j]\n            if not dp[i][j]:\n                dp[i][j] = dp[i - 1][(j - lst[i - 1]) % m]\n    return dp[n][0]\n```"
    },
    {
        "id":316,
        "response":"```python\ndef radix_sort(lst):\n    RADIX = 10\n    placement = 1\n    max_digit = max(lst)\n    while placement < max_digit:\n        buckets = [list() for _ in range(RADIX)]\n        for i in lst:\n            tmp = int((i \/ placement) % RADIX)\n            buckets[tmp].append(i)\n        a = 0\n        for b in range(RADIX):\n            buck = buckets[b]\n            for i in buck:\n                lst[a] = i\n                a += 1\n        placement *= RADIX\n    return lst\n```"
    },
    {
        "id":317,
        "response":"```python\ndef largest_pos(lst):\n    return max((i for i in lst if i > 0), default=None)\n```"
    },
    {
        "id":318,
        "response":"```python\nimport math\n\ndef sqrt_root(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return math.isqrt(n)\n```"
    },
    {
        "id":319,
        "response":"```python\nimport math\n\ndef volume_tetrahedron(n):\n    return (n ** 3) \/ (6 * math.sqrt(2))\n```"
    },
    {
        "id":320,
        "response":"```python\nimport math\n\ndef get_lcm(lst):\n    lcm = lst[0]\n    for num in lst[1:]:\n        lcm = (lcm * num) \/\/ math.gcd(lcm, num)\n    return lcm\n```"
    },
    {
        "id":321,
        "response":"```python\ndef check_isosceles(n1, n2, n3):\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    if n1 + n2 <= n3 or n1 + n3 <= n2 or n2 + n3 <= n1:\n        return False\n    sides = sorted([n1, n2, n3])\n    return sides[0] == sides[1] or sides[1] == sides[2]\n```"
    },
    {
        "id":322,
        "response":"```python\ndef lbs(lst):\n    n = len(lst)\n    lis = [1] * n\n    lds = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if lst[i] > lst[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n\n    max_len = 0\n    for i in range(n):\n        max_len = max(max_len, lis[i] + lds[i] - 1)\n\n    return max_len\n```"
    },
    {
        "id":323,
        "response":"```python\nimport re\nfrom typing import Callable\n\ncheck_string: Callable[[str, int], bool] = lambda s, length: (\n    len(s) >= length \n    and bool(re.search(r\"[A-Z]\", s)) \n    and bool(re.search(r\"[a-z]\", s)) \n    and bool(re.search(r\"\\d\", s))\n)\n\ndef validate_string(s: str, length: int = 8) -> bool:\n    return check_string(s, length)\n```"
    },
    {
        "id":324,
        "response":"```python\ndef max_sum_increasing_subsequence(lst, n):\n    if n == 0:\n        return 0\n    \n    max_sum = lst[:]\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                max_sum[i] = max(max_sum[i], max_sum[j] + lst[i])\n    \n    return max(max_sum)\n```"
    },
    {
        "id":325,
        "response":"```python\nfrom typing import List\n\ndef parallel_lines(lst: List[float], lst2: List[float]) -> bool:\n    if len(lst) != 2 or len(lst2) != 2:\n        raise ValueError(\"Input lists must have exactly two elements each\")\n    \n    a1, b1 = lst\n    a2, b2 = lst2\n    \n    if a1 == a2 == 0:\n        return True\n    \n    if a1 == 0 or a2 == 0:\n        return False\n    \n    return a1 \/ a2 == b1 \/ b2\n```"
    },
    {
        "id":326,
        "response":"```python\ndef capitalize_first_last_letters(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > 1:\n            result.append(word[0].upper() + word[1:-1] + word[-1].upper())\n        else:\n            result.append(word.upper())\n    return ' '.join(result)\n```"
    },
    {
        "id":327,
        "response":"```python\nfrom typing import List\nfrom collections import defaultdict\n\ndef get_pairs_count(lst: List[int], n: int, n2: int) -> int:\n    count_dict = defaultdict(int)\n    count = 0\n    for num in lst:\n        if n - num in count_dict:\n            count += count_dict[n - num]\n        count_dict[num] += 1\n    return count\n```"
    },
    {
        "id":328,
        "response":"```python\nfrom typing import List\n\ndef min_length(lst: List[List]) -> int:\n    if not lst:\n        return 0\n    return min(len(sublist) for sublist in lst)\n```"
    },
    {
        "id":329,
        "response":"```python\ndef jacobsthal_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    \n    return b\n```"
    },
    {
        "id":330,
        "response":"```python\ndef negative_count(lst):\n    total_count = len(lst)\n    if total_count == 0:\n        return 0\n    negative_numbers = len([num for num in lst if num < 0])\n    return negative_numbers \/ total_count\n```"
    },
    {
        "id":331,
        "response":"```python\ndef min_coins(lst, n, n2):\n    coins = lst[:n]\n    target = n2\n    dp = [float('inf')] * (target + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, target + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[target] if dp[target] != float('inf') else -1\n```"
    },
    {
        "id":332,
        "response":"```python\nfrom collections import Counter\n\ndef check_permutation(s1: str, s2: str) -> bool:\n    if len(s1) != len(s2):\n        return False\n    return Counter(s1) == Counter(s2)\n```"
    },
    {
        "id":333,
        "response":"```python\ndef remove_datatype(tup, param):\n    return tuple(i for i in tup if not isinstance(i, param))\n\ntup = (1, 'a', 2, 'b', 3.5, 'c', True, None)\nparam = str\nprint(remove_datatype(tup, param))\n```"
    },
    {
        "id":334,
        "response":"```python\ndef search_literal(s, s2):\n    try:\n        return s.index(s2)\n    except ValueError:\n        return -1\n```"
    },
    {
        "id":335,
        "response":"```python\nimport math\n\ndef topbottom_surfacearea(r):\n    return math.pi * (r ** 2)\n```"
    },
    {
        "id":336,
        "response":"```python\ndef nth_items(lst, n):\n    if n < 0 or n >= len(lst):\n        return None\n    return lst[n]\n```"
    },
    {
        "id":337,
        "response":"```python\nimport re\nfrom typing import Optional\n\ndef first_repeated_word(s: str) -> Optional[str]:\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None\n```"
    },
    {
        "id":338,
        "response":"```python\ndef string_list_to_tuple(lst):\n    return tuple(lst)\n```"
    },
    {
        "id":339,
        "response":"```python\ndef basesnum_coresspondingnum(lst, lst2):\n    return list(map(lambda x, y: x ** y, lst, lst2))\n```"
    },
    {
        "id":340,
        "response":"```python\nfrom collections import Counter\n\ndef find_Diff(lst, n):\n    freq = Counter(lst)\n    frequencies = list(freq.values())\n    return max(frequencies) - min(frequencies)\n```"
    },
    {
        "id":341,
        "response":"```python\ndef check_abundant(n: int) -> bool:\n    if n <= 0:\n        return False\n    divisors_sum = sum(i for i in range(1, n) if n % i == 0)\n    return divisors_sum > n\n```"
    },
    {
        "id":342,
        "response":"```python\nimport re\n\ndef fill_spaces(s: str) -> str:\n    return re.sub('[ ,.]', ':', s)\n```"
    },
    {
        "id":343,
        "response":"```python\ndef count_digits(n, n2):\n    sum_of_numbers = n + n2\n    count = 0\n    sum_of_numbers = abs(sum_of_numbers)\n    if sum_of_numbers == 0:\n        return 1\n    while sum_of_numbers > 0:\n        sum_of_numbers \/\/= 10\n        count += 1\n    return count\n```"
    },
    {
        "id":344,
        "response":"```python\nfrom typing import List, Tuple, Any\n\ndef flatten_tuple(lst: List[Tuple[Any]]) -> str:\n    result = []\n    for tup in lst:\n        for item in tup:\n            result.append(str(item))\n    return ' '.join(result)\n```"
    },
    {
        "id":345,
        "response":"```python\ndef toggle_F_and_L_bits(n):\n    import math\n    num_bits = math.floor(math.log2(n)) + 1\n    mask = (1 << (num_bits - 1)) | 1\n    return n ^ mask\n```"
    },
    {
        "id":346,
        "response":"```python\ndef last_occurence_char(s, s2):\n    return max([i for i, c in enumerate(s) if c in s2], default=-1)\n```"
    },
    {
        "id":347,
        "response":"```python\ndef Total_Hamming_Distance(n: int) -> int:\n    total = 0\n    for i in range(30):\n        mask = 1 << i\n        count = sum(((mask & j) != 0 for j in range(n + 1)))\n        total += count * (n - count + 1)\n    return total\n```"
    },
    {
        "id":348,
        "response":"```python\nfrom typing import List\nimport bisect\n\ndef longest_increasing_subsequence(lst: List[int]) -> int:\n    if not lst:\n        return 0\n\n    dp = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] > dp[-1]:\n            dp.append(lst[i])\n        else:\n            idx = bisect.bisect_left(dp, lst[i])\n            dp[idx] = lst[i]\n\n    return len(dp)\n```"
    },
    {
        "id":349,
        "response":"```python\ndef odd_Num_Sum(n):\n    return sum(i**5 for i in range(1, n*2, 2))\n```"
    },
    {
        "id":350,
        "response":"```python\ndef find_Max(lst, n, n2):\n    return max(lst)\n```"
    },
    {
        "id":351,
        "response":"```python\ndef extract_column(lst, n):\n    return [sublist[n] for sublist in lst if len(sublist) > n]\n```"
    },
    {
        "id":352,
        "response":"```python\ndef Seq_Linear(lst):\n    if len(lst) < 2:\n        return True\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != diff:\n            return False\n    return True\n```"
    },
    {
        "id":353,
        "response":"```python\ndef tuple_to_float(tup):\n    return float('.'.join(map(str, tup)))\n```"
    },
    {
        "id":354,
        "response":"```python\nfrom typing import List, Union\n\ndef Split(lst: List[Union[int, str]]) -> List[int]:\n    return [i for i in lst if isinstance(i, int) and i % 2 != 0]\n```"
    },
    {
        "id":355,
        "response":"```python\ndef difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = n * (n + 1) \/\/ 2\n    return sum_of_cubes - sum_of_numbers**2 + sum_of_numbers**2 - sum_of_numbers\n``` \ncan be simplified to \n```python\ndef difference(n):\n    sum_of_numbers = n * (n + 1) \/\/ 2\n    sum_of_cubes = sum_of_numbers ** 2\n    return sum_of_cubes - sum_of_numbers\n```"
    },
    {
        "id":356,
        "response":"```python\ndef find_Odd_Pair(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (lst[i] ^ lst[j]) % 2 != 0:\n                count += 1\n    return count\n```"
    },
    {
        "id":357,
        "response":"```python\ndef toggle_string(s: str) -> str:\n    return s.swapcase()\n```"
    },
    {
        "id":358,
        "response":"```python\ndef digit_distance_nums(n, n2):\n    import math\n    n = str(n)\n    n2 = str(n2)\n    max_len = max(len(n), len(n2))\n    n = n.zfill(max_len)\n    n2 = n2.zfill(max_len)\n    return sum(abs(int(a) - int(b)) for a, b in zip(n, n2))\n```"
    },
    {
        "id":359,
        "response":"```python\ndef max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum = max(lst[i], current_sum + lst[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```"
    },
    {
        "id":360,
        "response":"```python\ndef union_elements(*tuples):\n    return set().union(*tuples)\n\ntup = (1, 2, 3, 4)\ntup2 = (3, 4, 5, 6)\nprint(union_elements(tup, tup2))\n```"
    },
    {
        "id":361,
        "response":"```python\nfrom typing import List, Tuple\n\ndef assign_elements(lst: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                result.append((lst[i][0], lst[j][1]))\n    return result\n```"
    },
    {
        "id":362,
        "response":"```python\ndef Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst) if lst else 0\n```"
    },
    {
        "id":363,
        "response":"```python\nimport re\nfrom typing import List\n\ndef extract_values(s: str) -> List[str]:\n    return re.findall(r'\"([^\"]*)\"', s)\n```"
    },
    {
        "id":364,
        "response":"```python\nfrom typing import List\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    count = 0\n    for num in freq:\n        if freq[num] % 2 != 0:\n            count += freq[num] * (n - freq[num])\n    return count\n```"
    },
    {
        "id":365,
        "response":"```python\ndef split(s):\n    return list(s)\n```"
    },
    {
        "id":366,
        "response":"```python\ndef sum_digits(n):\n    n = abs(n)\n    total = 0\n    while n > 0:\n        total += n % 10\n        n \/\/= 10\n    return total\n```"
    },
    {
        "id":367,
        "response":"```python\ndef issort_list(lst):\n    return lst == sorted(lst) or lst == sorted(lst, reverse=True)\n```"
    },
    {
        "id":368,
        "response":"```python\ndef empty_list(n):\n    return [{} for _ in range(n)]\n```"
    },
    {
        "id":369,
        "response":"```python\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n```"
    },
    {
        "id":370,
        "response":"```python\nimport re\nfrom typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    result = []\n    for word in lst:\n        if not any(re.search(r'\\b' + re.escape(char) + r'\\b|' + re.escape(char), word) for char in lst2):\n            result.append(word)\n    return result\n```"
    },
    {
        "id":371,
        "response":"```python\ndef max_sum_pair_diff_lessthan_K(lst, n, k):\n    lst.sort()\n    i = n - 1\n    j = n - 2\n    max_sum = 0\n    while i >= 0 and j >= 0:\n        if lst[i] - lst[j] < k:\n            max_sum += lst[i] + lst[j]\n            i -= 2\n            j -= 2\n        else:\n            i -= 1\n    return max_sum\n```"
    },
    {
        "id":372,
        "response":"```python\nfrom typing import List\nfrom collections import Counter\n\ndef two_unique_nums(lst: List[int]) -> List[int]:\n    count = Counter(lst)\n    return [num for num, freq in count.items() if freq == 1][:2]\n```"
    },
    {
        "id":373,
        "response":"```python\nfrom typing import List\nimport math\n\ndef unique_product(lst: List[int]) -> int:\n    unique_nums = set(lst)\n    return math.prod(unique_nums)\n```"
    },
    {
        "id":374,
        "response":"import math\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)"
    },
    {
        "id":375,
        "response":""
    },
    {
        "id":376,
        "response":"```python\ndef is_Sub_Array(lst, lst2, n, n2):\n    if n2 > n:\n        return False\n    i = j = 0\n    while i < n and j < n2:\n        if lst[i] == lst2[j]:\n            j += 1\n        i += 1\n    return j == n2\n```"
    },
    {
        "id":377,
        "response":"```python\ndef last_Digit_Factorial(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n < 5:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result % 10\n    else:\n        return 0\n```"
    },
    {
        "id":378,
        "response":"```python\nfrom typing import List\nimport itertools\n\ndef interleave_lists(*args: List) -> List:\n    return list(itertools.chain(*zip(*args)))\n```"
    },
    {
        "id":379,
        "response":"```python\ndef find_dissimilar(tup1, tup2):\n    set1 = set(tup1)\n    set2 = set(tup2)\n    dissimilar_elements = list((set1 - set2) | (set2 - set1))\n    return tuple(dissimilar_elements)\n```"
    },
    {
        "id":380,
        "response":"```python\ndef extract_even(tup):\n    from collections import deque\n    result = []\n    queue = deque([tup])\n    while queue:\n        current = queue.popleft()\n        if isinstance(current, tuple):\n            for item in current:\n                queue.append(item)\n        elif isinstance(current, int) and current % 2 == 0:\n            result.append(current)\n    return result\n```"
    },
    {
        "id":381,
        "response":"```python\nimport math\n\ndef surface_Area(n, n2):\n    base_area = n ** 2\n    slant_height = math.sqrt((n \/ 2) ** 2 + n2 ** 2)\n    triangle_area = 4 * (0.5 * n * slant_height)\n    return base_area + triangle_area\n```"
    },
    {
        "id":382,
        "response":"```python\ndef my_dict(dct):\n    return len(dct) == 0\n```"
    },
    {
        "id":383,
        "response":"```python\nimport math\n\ndef catalan_number(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    try:\n        n = int(n)\n    except ValueError:\n        raise ValueError(\"n must be an integer\")\n    return math.comb(2 * n, n) \/\/ (n + 1)\n```"
    },
    {
        "id":384,
        "response":"```python\nimport re\nfrom typing import List, Tuple\n\ndef find_adverbs(s: str) -> List[Tuple[str, int]]:\n    adverbs = re.finditer(r'\\b\\w+ly\\b', s)\n    return [(match.group(), match.start()) for match in adverbs]\n```"
    },
    {
        "id":385,
        "response":"```python\ndef expensive_items(lst, n):\n    from typing import List, Tuple\n    lst.sort(key=lambda x: x[1], reverse=True)\n    return [item[0] for item in lst[:n]]\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "id":386,
        "response":"```python\ndef split_Arr(lst, n, n2):\n    return lst[n:] + lst[:n]\n```"
    },
    {
        "id":387,
        "response":"```python\ndef list_tuple(lst):\n    return tuple(lst)\n```"
    },
    {
        "id":388,
        "response":"```python\ndef big_diff(lst):\n    return max(lst) - min(lst)\n```"
    },
    {
        "id":389,
        "response":"```python\nimport math\n\ndef perfect_squares(n, n2):\n    start = math.ceil(math.sqrt(n))\n    end = math.floor(math.sqrt(n2))\n    return list(range(start**2, (end+1)**2, start**2 if start == end else 1)) if start <= end else []\n\n# Alternatively, a more straightforward solution\ndef perfect_squares(n, n2):\n    return [i for i in range(n, n2+1) if math.sqrt(i) % 1 == 0]\n```"
    },
    {
        "id":390,
        "response":"```python\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(math.radians(theta))\n    y = r * math.sin(math.radians(theta))\n    return x, y\n```"
    },
    {
        "id":391,
        "response":"```python\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":392,
        "response":"```python\nimport math\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for k in range(n + 1):\n        total_sum += math.comb(n, k) * math.comb(n, k)\n    return total_sum\n```"
    },
    {
        "id":393,
        "response":"```python\ndef removezero_ip(s):\n    import re\n    return re.sub(r'\\b0+(?!\\b)', '', s)\n```"
    },
    {
        "id":394,
        "response":"```python\ndef diff_even_odd(lst):\n    even = next((num for num in lst if num % 2 == 0), None)\n    odd = next((num for num in lst if num % 2 != 0), None)\n    if even is None or odd is None:\n        return None\n    return even - odd\n```"
    },
    {
        "id":395,
        "response":"```python\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    if s.count('1') != s2.count('1'):\n        return -1\n    \n    s = list(s)\n    s2 = list(s2)\n    res = 0\n    count1, count0 = 0, 0\n    \n    for i in range(len(s)):\n        if s[i] != s2[i]:\n            if s[i] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n    \n    return min(count1, count0)\n```"
    },
    {
        "id":396,
        "response":"```python\ndef tuple_size(tup):\n    return len(tup)\n```"
    },
    {
        "id":397,
        "response":"```python\nimport heapq\n\ndef find_kth(lst, lst2, n, n2, k):\n    return list(heapq.merge(lst, lst2))[k-1]\n```"
    },
    {
        "id":398,
        "response":"```python\ndef armstrong_number(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit) ** num_len for digit in num_str)\n```"
    },
    {
        "id":399,
        "response":"```python\ndef sum_average(n):\n    total_sum = n * (n + 1) \/\/ 2\n    average = total_sum \/ n if n > 0 else 0\n    return total_sum, average\n```"
    },
    {
        "id":400,
        "response":"```python\ndef is_Even(n: int) -> bool:\n    return (n & 1) == 0\n```"
    }
]