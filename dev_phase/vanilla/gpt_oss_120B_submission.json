[
    {
        "id":1,
        "response":"import typing\n\ndef max_chain_length(lst: typing.List[typing.Tuple[int, int]], n: int) -> int:\n    if not lst or n == 0:\n        return 0\n    sorted_pairs = sorted(lst, key=lambda x: x[1])\n    count = 1\n    _, last_end = sorted_pairs[0]\n    for i in range(1, n):\n        start, end = sorted_pairs[i]\n        if start > last_end:\n            count += 1\n            last_end = end\n    return count"
    },
    {
        "id":2,
        "response":"import typing\n\ndef first_repeated_char(s: str) -> typing.Optional[str]:\n    seen = set()\n    for ch in s:\n        if ch in seen:\n            return ch\n        seen.add(ch)\n    return None"
    },
    {
        "id":3,
        "response":"import typing\n\ndef get_ludic(n: int) -> typing.List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1, 2))\n    idx = 1\n    while idx < len(numbers):\n        step = numbers[idx]\n        if step > len(numbers):\n            break\n        del numbers[step - 1::step]\n        idx += 1\n    return numbers"
    },
    {
        "id":4,
        "response":"import typing\n\ndef reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])"
    },
    {
        "id":5,
        "response":"import math\n\ndef prime_num(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    limit = int(math.isqrt(n))\n    while i <= limit:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True"
    },
    {
        "id":6,
        "response":"import math\n\ndef radian_degree(n):\n    return n * math.pi \/ 180.0"
    },
    {
        "id":7,
        "response":"import re\n\ndef find_literals(s: str, s2: str) -> int:\n    if not s2:\n        return 0\n    match = re.search(re.escape(s2), s)\n    return match.start() if match else -1"
    },
    {
        "id":8,
        "response":"import math\n\ndef bell_Number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += math.comb(i - 1, j) * bell[j]\n    return bell[n]"
    },
    {
        "id":9,
        "response":"import math\n\ndef floor_Min(*values):\n    if not values:\n        raise ValueError(\"At least one argument is required\")\n    return math.floor(min(values))"
    },
    {
        "id":10,
        "response":"import typing\n\ndef remove_kth_element(lst: typing.List[typing.Any], k: int) -> typing.List[typing.Any]:\n    if k < 1 or k > len(lst):\n        return lst[:]\n    result = lst[:k-1] + lst[k:]\n    return result"
    },
    {
        "id":11,
        "response":"import typing\n\ndef max_of_nth(lst: typing.List[typing.Tuple], n: int):\n    if not lst or n < 0:\n        return None\n    try:\n        return max(item[n] for item in lst if len(item) > n)\n    except ValueError:\n        return None"
    },
    {
        "id":12,
        "response":"import typing\n\ndef merge(lst: typing.List[typing.Any]) -> typing.List[typing.List[typing.Any]]:\n    if not lst:\n        return []\n    return [[lst[0]], [lst[-1]]]"
    },
    {
        "id":13,
        "response":"import typing\n\ndef maximum_value(lst: typing.List[typing.Tuple[typing.Any, ...]]) -> typing.Any:\n    if not lst:\n        return None\n    max_val = None\n    for tup in lst:\n        for item in tup:\n            if max_val is None or item > max_val:\n                max_val = item\n    return max_val"
    },
    {
        "id":14,
        "response":"import typing\n\ndef cummulative_sum(lst: typing.List[typing.Tuple[int, ...]]) -> typing.List[int]:\n    result: typing.List[int] = []\n    total = 0\n    for tup in lst:\n        for value in tup:\n            total += value\n            result.append(total)\n    return result"
    },
    {
        "id":15,
        "response":"def average_tuple(tup: tuple) -> float:\n    if not tup:\n        return 0.0\n    return sum(tup) \/ len(tup)"
    },
    {
        "id":16,
        "response":"import typing\n\ndef tuple_modulo(tup1: typing.Tuple[int, ...], tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    length = min(len(tup1), len(tup2))\n    result = []\n    for i in range(length):\n        divisor = tup2[i]\n        if divisor == 0:\n            raise ZeroDivisionError(\"Modulo by zero encountered at index {}\".format(i))\n        result.append(tup1[i] % divisor)\n    return tuple(result)"
    },
    {
        "id":17,
        "response":""
    },
    {
        "id":18,
        "response":"import typing\n\ndef div_list(lst: typing.List[float], lst2: typing.List[float]) -> typing.List[float]:\n    return list(map(lambda x, y: x \/ y, lst, lst2))"
    },
    {
        "id":19,
        "response":"import re\n\ndef move_num(s: str) -> str:\n    digits = ''.join(filter(str.isdigit, s))\n    others = ''.join(filter(lambda ch: not ch.isdigit(), s))\n    return digits + others"
    },
    {
        "id":20,
        "response":"import typing\n\ndef largest_subset(lst: typing.List[int], n: int) -> typing.List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    dp = [1] * len(sorted_lst)\n    prev = [-1] * len(sorted_lst)\n    max_idx = 0\n    for i in range(len(sorted_lst)):\n        for j in range(i):\n            if sorted_lst[i] % sorted_lst[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n                prev[i] = j\n        if dp[i] > dp[max_idx]:\n            max_idx = i\n    result = []\n    while max_idx != -1:\n        result.append(sorted_lst[max_idx])\n        max_idx = prev[max_idx]\n    result.reverse()\n    return result"
    },
    {
        "id":21,
        "response":"import re\nfrom typing import List\n\ndef increment_numerics(lst: List[str], n: int) -> List[str]:\n    def replace_numbers(s: str) -> str:\n        return re.sub(r'\\d+', lambda m: str(int(m.group()) + n), s)\n    return [replace_numbers(s) for s in lst]"
    },
    {
        "id":22,
        "response":"import typing\n\ndef _median_sub(arr: typing.List[int], lo: int, hi: int) -> float:\n    length = hi - lo + 1\n    mid = lo + length \/\/ 2\n    if length % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) \/ 2.0\n    return float(arr[mid])\n\ndef get_median(lst: typing.List[int], lst2: typing.List[int], n: int) -> typing.Optional[float]:\n    if n == 0:\n        return None\n    i1, j1"
    },
    {
        "id":23,
        "response":"import typing\n\ndef nth_nums(lst: typing.List[float], n: int) -> typing.List[float]:\n    return list(map(lambda x: x ** n, lst))"
    },
    {
        "id":24,
        "response":"def is_upper(s: str) -> str:\n    return s.upper()"
    },
    {
        "id":25,
        "response":"def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":26,
        "response":"import math\n\ndef triangle_area(r):\n    if r <= 0:\n        return 0.0\n    return r * r"
    },
    {
        "id":27,
        "response":"import typing\n\ndef find_First_Missing(lst: typing.List[int], n: int, n2: int) -> typing.Optional[int]:\n    s = set(lst)\n    start, end = (n, n2) if n <= n2 else (n2, n)\n    for i in range(start, end + 1):\n        if i not in s:\n            return i\n    return None"
    },
    {
        "id":28,
        "response":"import typing\n\ndef replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')"
    },
    {
        "id":29,
        "response":"import typing\n\ndef Split(lst: typing.List[typing.Any]) -> typing.List[int]:\n    return [x for x in lst if type(x) is int and x % 2 == 0]"
    },
    {
        "id":30,
        "response":"import typing\n\ndef get_coordinates(tup: typing.Tuple[int, int]) -> typing.List[typing.Tuple[int, int]]:\n    x, y = tup\n    return [(x + dx, y + dy) for dx in (-1, 0, 1) for dy in (-1, 0, 1) if not (dx == 0 and dy == 0)]"
    },
    {
        "id":31,
        "response":"import re\n\ndef replace_spaces(s: str) -> str:\n    return re.sub(r'[\\s_]', lambda m: '_' if m.group().isspace() else ' ', s)"
    },
    {
        "id":32,
        "response":"def move_zero(lst):\n    non_zeros = [x for x in lst if x != 0]\n    zeros_count = len(lst) - len(non_zeros)\n    return non_zeros + [0] * zeros_count"
    },
    {
        "id":33,
        "response":"import itertools\n\ndef pair_OR_Sum(lst, n):\n    total = 0\n    max_bit = max(lst).bit_length() if lst else 0\n    for b in range(max_bit + 1):\n        mask = 1 << b\n        count1 = sum(1 for x in lst if x & mask)\n        count0 = n - count1\n        total += count1 * count0 * mask\n    return total"
    },
    {
        "id":34,
        "response":"import typing\n\ndef even_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 16 * n * (n + 1) * (2 * n + 1) * (3 * n * n + 3 * n - 1) \/\/ 30"
    },
    {
        "id":35,
        "response":"import heapq\n\ndef heap_sort(lst):\n    heap = lst[:]\n    heapq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "id":36,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    if a == 0:\n        return False\n    if b != 0:\n        return False\n    discriminant = b * b - 4 * a * c\n    if discriminant < 0:\n        return False\n    return True"
    },
    {
        "id":37,
        "response":"import typing\n\ndef noprofit_noloss(n: typing.Any, n2: typing.Any) -> bool:\n    try:\n        return float(n) == float(n2)\n    except (ValueError, TypeError):\n        return False"
    },
    {
        "id":38,
        "response":"import math\n\ndef wind_chill(temp_c: float, wind_speed_kmh: float) -> float:\n    if wind_speed_kmh < 4.8:\n        return round(temp_c, 2)\n    v_pow = math.pow(wind_speed_kmh, 0.16)\n    wc = 13.12 + 0.6215 * temp_c - 11.37 * v_pow + 0.3965 * temp_c * v_pow\n    return round(wc, 2)"
    },
    {
        "id":39,
        "response":"import typing\n\ndef sample_nam(lst: typing.List[str]) -> int:\n    total = 0\n    for name in lst:\n        if isinstance(name, str) and name and name[0].isupper():\n            total += len(name)\n    return total"
    },
    {
        "id":40,
        "response":"import re\n\ndef remove_parenthesis(s: str) -> str:\n    result = []\n    depth = 0\n    for ch in s:\n        if ch == '(':\n            depth += 1\n        elif ch == ')':\n            if depth > 0:\n                depth -= 1\n        else:\n            if depth == 0:\n                result.append(ch)\n    return ''.join(result)"
    },
    {
        "id":41,
        "response":"import typing\n\ndef is_nonagonal(n: int) -> int:\n    if n <= 0:\n        return 0\n    return n * (7 * n - 5) \/\/ 2"
    },
    {
        "id":42,
        "response":"import typing\n\ndef remove_similar_row(lst: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    seen = set()\n    result = []\n    for row in lst:\n        if row not in seen:\n            seen.add(row)\n            result.append(row)\n    return result"
    },
    {
        "id":43,
        "response":"import re\n\ndef text_match_wordz_middle(s):\n    return re.findall(r'\\b\\w+z\\w+\\b', s)"
    },
    {
        "id":44,
        "response":"import typing\n\ndef reverse_Array_Upto_K(lst: typing.List[int], n: int) -> typing.List[int]:\n    if n <= 0:\n        return lst\n    length = len(lst)\n    k = min(n, length)\n    left, right = 0, k - 1\n    while left < right:\n        lst[left], lst[right] = lst[right], lst[left]\n        left += 1\n        right -= 1\n    return lst"
    },
    {
        "id":45,
        "response":"import math\nfrom typing import List, Tuple, Any\n\ndef find_k_product(lst: List[Tuple[Any, ...]], k: int) -> int:\n    if not lst:\n        return 0\n    product = 1\n    for tup in lst:\n        if k < 0 or k >= len(tup):\n            raise IndexError(\"k is out of range for one of the tuples\")\n        product *= tup[k]\n    return product"
    },
    {
        "id":46,
        "response":"import math\n\ndef No_of_cubes(n, k):\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"Both n and k must be integers\")\n    if n < k or k <= 0:\n        return 0\n    return (n - k + 1) ** 3"
    },
    {
        "id":47,
        "response":"import re\nfrom typing import List\n\ndef split_upperstring(s: str) -> List[str]:\n    if not s:\n        return []\n    parts = []\n    current = s[0]\n    for ch in s[1:]:\n        if ch.isupper():\n            parts.append(current)\n            current = ch\n        else:\n            current += ch\n    parts.append(current)\n    return parts"
    },
    {
        "id":48,
        "response":"import typing\n\ndef exchange_elements(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result = lst[:]\n    i = 0\n    n = len(result)\n    while i + 1 < n:\n        result[i], result[i + 1] = result[i + 1], result[i]\n        i += 2\n    return result"
    },
    {
        "id":49,
        "response":"import typing\n\ndef sum_Range_list(lst: typing.List[typing.Union[int, float]], n: int, n2: int) -> typing.Union[int, float]:\n    length = len(lst)\n    if length == 0:\n        return 0\n    start = max(0, min(n, length - 1))\n    end = max(0, min(n2, length - 1))\n    if start > end:\n        start, end = end, start\n    total = 0\n    for i in range(start, end + 1):\n        total += lst[i]\n    return total"
    },
    {
        "id":50,
        "response":"import typing\n\ndef are_Equal(lst: typing.List[typing.Any], lst2: typing.List[typing.Any], n: int, n2: int) -> bool:\n    if n != n2:\n        return False\n    if n != len(lst) or n2 != len(lst2):\n        return False\n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return False\n    return True"
    },
    {
        "id":51,
        "response":"import typing\n\ndef check_subset(tup: tuple, tup2: tuple) -> bool:\n    return set(tup).issubset(set(tup2))"
    },
    {
        "id":52,
        "response":"import typing\n\ndef matrix_to_list(matrix: typing.Tuple[typing.Tuple, ...]) -> typing.List[typing.Tuple]:\n    if not matrix:\n        return []\n    return [tuple(col) for col in zip(*matrix)]"
    },
    {
        "id":53,
        "response":"import re\nimport typing\nimport itertools\nfrom collections import defaultdict\n\ndef grouping_dictionary(lst: typing.Iterable[typing.Tuple[typing.Any, typing.Any]]) -> dict:\n    grouped = defaultdict(list)\n    for key, value in lst:\n        grouped[key].append(value)\n    return dict(grouped)"
    },
    {
        "id":54,
        "response":"from typing import Union\n\ndef rectangle_perimeter(length: Union[int, float], width: Union[int, float]) -> Union[int, float]:\n    return 2 * (length + width)"
    },
    {
        "id":55,
        "response":"from typing import *\n\ndef fifth_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return (n * n * (n + 1) * (n + 1) * (2 * n * n + 2 * n - 1)) \/\/ 12"
    },
    {
        "id":56,
        "response":"import typing\n\ndef find_Min_Sum(lst: typing.List[int], lst2: typing.List[int], n: int) -> int:\n    if n <= 0:\n        return 0\n    a = sorted(lst[:n])\n    b = sorted(lst2[:n])\n    return sum(abs(x - y) for x, y in zip(a, b))"
    },
    {
        "id":57,
        "response":"import math\n\ndef first_Digit(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Negative input not allowed\")\n    if n <= 1:\n        return 1\n    if n <= 3:\n        fact = math.factorial(n)\n        while fact >= 10:\n            fact \/\/= 10\n        return fact\n    x = n * math.log10(n \/ math.e) + 0.5 * math.log10(2 * math.pi * n)\n    frac = x - math.floor(x)\n    return int(10 ** frac)"
    },
    {
        "id":58,
        "response":"import collections\nfrom typing import List, Any, Optional\n\ndef max_occurrences(lst: List[Any]) -> Optional[Any]:\n    if not lst:\n        return None\n    counter = collections.Counter(lst)\n    max_count = max(counter.values())\n    for item in lst:\n        if counter[item] == max_count:\n            return item"
    },
    {
        "id":59,
        "response":"import sys\nfrom typing import List\n\ndef Repeat(lst: List[int]) -> None:\n    seen = set()\n    printed = set()\n    for num in lst:\n        if num in seen and num not in printed:\n            print(num)\n            printed.add(num)\n        else:\n            seen.add(num)"
    },
    {
        "id":60,
        "response":"import typing\n\ndef find_Points(n: int, n2: int, n3: int, n4: int) -> typing.List[int]:\n    if n > n2:\n        n, n2 = n2, n\n    if n3 > n4:\n        n3, n4 = n4, n3\n    range1 = set(range(n, n2 + 1))\n    range2 = set(range(n3, n4 + 1))\n    result = sorted(range1.symmetric_difference(range2))\n    return result"
    },
    {
        "id":61,
        "response":"import typing\n\ndef max_sum_of_three_consecutive(lst: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return lst[0]\n    if n == 2:\n        return lst[0] + lst[1]\n    dp = [0] * n\n    dp[0] = lst[0]\n    dp[1] = lst[0] + lst[1]\n    dp[2] = max(dp[1], lst[0] + lst[2], lst[1] + lst[2])\n    for i in range(3, n):\n        include_i = dp[i - 2] + lst[i]\n        include_i_i1 = dp[i - 3] + lst[i - 1] + lst[i]\n        exclude_i = dp[i - 1]\n        dp[i] = max(exclude_i, include_i, include_i_i1)\n    return dp[-1]"
    },
    {
        "id":62,
        "response":"import typing\n\ndef sorted_dict(dct: typing.Dict[typing.Any, typing.Any]) -> typing.Dict[typing.Any, typing.Any]:\n    if not isinstance(dct, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    return dict(sorted(dct.items()))"
    },
    {
        "id":63,
        "response":"import typing\n\ndef find_max_val(n: int, x: int, y: int) -> int:\n    if x <= 0:\n        return -1\n    if y < 0 or y >= x:\n        return -1\n    if n < y:\n        return -1\n    return n - ((n - y) % x)"
    },
    {
        "id":64,
        "response":"import typing\n\ndef average_Even(n: int) -> float:\n    if n < 2:\n        return 0.0\n    count = n \/\/ 2\n    total = count * (count + 1)\n    return total \/ count if count else 0.0"
    },
    {
        "id":65,
        "response":"import copy\n\ndef move_last(lst):\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst[:]\n    result = lst[1:] + [lst[0]]\n    return result"
    },
    {
        "id":66,
        "response":"import collections\n\ndef count_char(s: str, chars: str):\n    if not chars:\n        return {}\n    counter = collections.Counter(s)\n    if len(chars) == 1:\n        return counter.get(chars, 0)\n    return {ch: counter.get(ch, 0) for ch in chars}"
    },
    {
        "id":67,
        "response":"import typing\n\ndef Check_Vow(s: str, s2: str) -> typing.Tuple[int, int]:\n    vowels = set('aeiouAEIOU')\n    count1 = sum(1 for ch in s if ch in vowels)\n    count2 = sum(1 for ch in s2 if ch in vowels)\n    return count1, count2"
    },
    {
        "id":68,
        "response":"import re\n\ndef replace(s: str, s2: str) -> str:\n    if not s2:\n        return s\n    return re.sub(re.escape(s2) + '+', s2, s)"
    },
    {
        "id":69,
        "response":"import re\n\ndef check_IP(s: str) -> bool:\n    pattern = re.compile(r'^(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)(?:\\.(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)){3}$')\n    return bool(pattern.fullmatch(s))"
    },
    {
        "id":70,
        "response":"import typing\n\ndef decreasing_trend(lst: typing.List[float]) -> bool:\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] >= lst[i - 1]:\n            return False\n    return True"
    },
    {
        "id":71,
        "response":"import typing\n\ndef set_Right_most_Unset_Bit(n: int) -> int:\n    return n | (n + 1)"
    },
    {
        "id":72,
        "response":"from typing import Union\n\ndef max_of_three(n1: Union[int, float], n2: Union[int, float], n3: Union[int, float]) -> Union[int, float]:\n    if n1 >= n2 and n1 >= n3:\n        return n1\n    if n2 >= n1 and n2 >= n3:\n        return n2\n    return n3"
    },
    {
        "id":73,
        "response":"import typing\n\ndef convert(lst: typing.List[int]) -> int:\n    result = 0\n    for num in lst:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements must be integers\")\n        result = result * 10 + abs(num) % 10\n    return result"
    },
    {
        "id":74,
        "response":"import re\n\ndef remove_duplicate(s: str) -> str:\n    words = re.findall(r'\\S+', s)\n    seen = set()\n    result = []\n    for word in words:\n        if word not in seen:\n            seen.add(word)\n            result.append(word)\n    return ' '.join(result)"
    },
    {
        "id":75,
        "response":"import typing\n\ndef sum_nums(a: int, b: int, low: int, high: int) -> int:\n    total = a + b\n    if low > high:\n        low, high = high, low\n    return 20 if low <= total <= high else total"
    },
    {
        "id":76,
        "response":"import re\n\ndef remove_extra_char(s: str) -> str:\n    return re.sub(r'[^A-Za-z0-9]', '', s)"
    },
    {
        "id":77,
        "response":"def validity_triangle(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a + b > c and a + c > b and b + c > a"
    },
    {
        "id":78,
        "response":"import re\n\ndef remove_spaces(s: str) -> str:\n    return re.sub(r'\\s+', '', s)"
    },
    {
        "id":79,
        "response":"import typing\n\ndef access_key(dct: typing.Dict[typing.Any, typing.Any], n: int):\n    return list(dct.keys())[n]"
    },
    {
        "id":80,
        "response":"import typing\n\ndef increasing_trend(lst: typing.List[float]) -> bool:\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True"
    },
    {
        "id":81,
        "response":"import math\nfrom typing import Optional\n\ndef smallest_Divisor(n: int) -> Optional[int]:\n    if n <= 1:\n        return None\n    limit = int(math.isqrt(n))\n    for i in range(2, limit + 1):\n        if n % i == 0:\n            return i\n    return n"
    },
    {
        "id":82,
        "response":"from typing import List\n\ndef mul_list(lst: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x * y, lst, lst2))"
    },
    {
        "id":83,
        "response":"import math\n\ndef sum_Square(n: int) -> bool:\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    temp = n\n    p = 2\n    while p * p <= temp:\n        exp = 0\n        while temp % p == 0:\n            temp \/\/= p\n            exp += 1\n        if p % 4 == 3 and exp % 2 == 1:\n            return False\n        p += 1 if p == 2 else 2\n    if temp > 1 and temp % 4 == 3:\n        return False\n    return True"
    },
    {
        "id":84,
        "response":"import collections\n\ndef count_Char(s: str, s2: str) -> dict:\n    freq = collections.Counter(s)\n    return {ch: freq.get(ch, 0) for ch in s2}"
    },
    {
        "id":85,
        "response":"import math\n\ndef sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0:2] = [False, False]\n    limit = int(math.isqrt(n))\n    for i in range(2, limit + 1):\n        if sieve[i]:\n            step = i\n            start = i * i\n            sieve[start:n+1:step] = [False] * ((n - start) \/\/ step + 1)\n    return sum(i for i, is_prime in enumerate(sieve) if is_prime)"
    },
    {
        "id":86,
        "response":"import collections\n\ndef freq_element(seq):\n    return dict(collections.Counter(seq))"
    },
    {
        "id":87,
        "response":"import typing\n\ndef recur_gcd(a: int, b: int) -> int:\n    a, b = abs(a), abs(b)\n    if a == 0 and b == 0:\n        return 0\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)"
    },
    {
        "id":88,
        "response":"import math\n\ndef len_complex(n, n2):\n    try:\n        real = float(n)\n        imag = float(n2)\n    except (TypeError, ValueError):\n        raise ValueError(\"Both arguments must be numeric\")\n    return math.hypot(real, imag)"
    },
    {
        "id":89,
        "response":"import typing\n\ndef min_jumps(lst: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    if lst[0] == 0:\n        return -1\n    max_reach = lst[0]\n    step = lst[0]\n    jumps = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + lst[i])\n        step -= 1\n        if step == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return -1"
    },
    {
        "id":90,
        "response":"import typing\n\ndef mul_consecutive_nums(lst: typing.List[int]) -> typing.List[int]:\n    if not lst or len(lst) < 2:\n        return []\n    return [lst[i] * lst[i + 1] for i in range(len(lst) - 1)]"
    },
    {
        "id":91,
        "response":"import collections\n\ndef group_element(lst):\n    grouped = collections.defaultdict(list)\n    for tup in lst:\n        if isinstance(tup, (list, tuple)) and len(tup) >= 2:\n            grouped[tup[1]].append(tup[0])\n    return dict(grouped)"
    },
    {
        "id":92,
        "response":"import math\n\ndef last_Two_Digits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative integers\")\n    if n >= 10:\n        return 0\n    return math.prod(range(1, n + 1)) % 100"
    },
    {
        "id":93,
        "response":"import re\n\ndef remove_multiple_spaces(s: str) -> str:\n    return re.sub(r' +', ' ', s)"
    },
    {
        "id":94,
        "response":"from typing import Any, Dict, List\n\ndef extract_unique(dct: Dict[Any, Any]) -> List[Any]:\n    return list(dict.fromkeys(dct.values()))"
    },
    {
        "id":95,
        "response":"import typing\n\ndef check_greater(tup1: tuple, tup2: tuple) -> bool:\n    if len(tup1) != len(tup2):\n        return False\n    for a, b in zip(tup1, tup2):\n        if not b > a:\n            return False\n    return True"
    },
    {
        "id":96,
        "response":"import itertools\nfrom typing import List, Tuple, Any\n\ndef zip_list(lst: List[Any], lst2: List[Any]) -> List[Tuple[Any, Any]]:\n    return list(itertools.zip_longest(lst, lst2, fillvalue=None))"
    },
    {
        "id":97,
        "response":"import typing\n\ndef count_even(lst: typing.List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 == 0, lst)))"
    },
    {
        "id":98,
        "response":"import math\n\ndef sort_dict_item(dct):\n    if not isinstance(dct, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    def key_product(item):\n        key = item[0]\n        if not isinstance(key, tuple):\n            raise TypeError(\"Dictionary keys must be tuples\")\n        return math.prod(key)\n    return sorted(dct.items(), key=key_product)"
    },
    {
        "id":99,
        "response":"import typing\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    cnt01 = cnt10 = 0\n    for a, b in zip(s, s2):\n        if a == b:\n            continue\n        if a == '0' and b == '1':\n            cnt01 += 1\n        elif a == '1' and b == '0':\n            cnt10 += 1\n        else:\n            return -1\n    if cnt01 != cnt10:\n        return -1\n    return cnt01"
    },
    {
        "id":100,
        "response":"import typing\n\ndef count_range_in_list(lst: typing.List[int], n: int, n2: int) -> int:\n    low, high = (n, n2) if n <= n2 else (n2, n) \n    return sum(1 for x in lst if low <= x <= high)"
    },
    {
        "id":101,
        "response":"import typing\n\ndef equilibrium_index(lst: typing.List[int]) -> int:\n    total = sum(lst)\n    left_sum = 0\n    for i, value in enumerate(lst):\n        total -= value\n        if left_sum == total:\n            return i\n        left_sum += value\n    return -1"
    },
    {
        "id":102,
        "response":"import typing\n\ndef removals(lst: typing.List[int], max_diff: int, _ignored: typing.Any = None) -> int:\n    if not lst:\n        return 0\n    sorted_lst = sorted(lst)\n    left = 0\n    max_len = 0\n    for right in range(len(sorted_lst)):\n        while sorted_lst[right] - sorted_lst[left] > max_diff:\n            left += 1\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n    return len(lst) - max_len"
    },
    {
        "id":103,
        "response":"def is_key_present(dct, key):\n    return key in dct"
    },
    {
        "id":104,
        "response":"import typing\n\ndef harmonic_sum(n: int) -> float:\n    if n <= 1:\n        return 0.0\n    total = 0.0\n    for i in range(1, n):\n        total += 1.0 \/ i\n    return total"
    },
    {
        "id":105,
        "response":"import typing\n\ndef sort_sublists(lst: typing.List[typing.List]) -> typing.List[typing.List]:\n    return sorted(lst, key=lambda sub: (len(sub), sub))"
    },
    {
        "id":106,
        "response":"import typing\n\ndef is_subset(lst: typing.List[int], n: int, lst2: typing.List[int], n2: int) -> bool:\n    if n == 0:\n        return True\n    set2 = set(lst2)\n    for i in range(min(n, len(lst))):\n        if lst[i] not in set2:\n            return False\n    return True"
    },
    {
        "id":107,
        "response":"import math\n\ndef count_Set_Bits(n: int) -> int:\n    if n <= 0:\n        return 0\n    total = 0\n    i = 0\n    while (1 << i) <= n:\n        cycle_len = 1 << (i + 1)\n        full_cycles = n \/\/ cycle_len\n        total += full_cycles * (cycle_len \/\/ 2)\n        remainder = n % cycle_len\n        extra = remainder - (cycle_len \/\/ 2) + 1\n        if extra > 0:\n            total += extra\n        i += 1\n    return total"
    },
    {
        "id":108,
        "response":"def Convert(s):\n    return list(s)"
    },
    {
        "id":109,
        "response":"import typing\n\ndef get_unique(lst: typing.Tuple[typing.Any, ...]) -> dict:\n    result = {}\n    for item in lst:\n        result[item] = result.get(item, 0) + 1\n    return result"
    },
    {
        "id":110,
        "response":"import typing\n\ndef front_and_rear(tup: tuple) -> typing.Tuple[typing.Any, typing.Any]:\n    if not tup:\n        return (None, None)\n    return (tup[0], tup[-1])"
    },
    {
        "id":111,
        "response":"import math\nfrom typing import List\n\ndef product_Equal(n: int) -> bool:\n    s = str(abs(n))\n    odd_prod = 1\n    even_prod = 1\n    for idx, ch in enumerate(s, start=1):\n        digit = int(ch)\n        if idx % 2 == 1:\n            odd_prod *= digit\n        else:\n            even_prod *= digit\n    return odd_prod == even_prod"
    },
    {
        "id":112,
        "response":"import typing\n\ndef remove_duplicate(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"
    },
    {
        "id":113,
        "response":"import typing\n\ndef check_valid(tup: typing.Tuple[typing.Any, ...]) -> bool:\n    if not isinstance(tup, tuple):\n        return False\n    for item in tup:\n        if item is None:\n            return False\n    return True"
    },
    {
        "id":114,
        "response":"import math\n\ndef count_Fac(n: int) -> int:\n    if n <= 1:\n        return 0\n    exponents = set()\n    temp = n\n    i = 2\n    while i * i <= temp:\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                temp \/\/= i\n                cnt += 1\n            exponents.add(cnt)\n        i += 1 if i == 2 else 2\n    if temp > 1:\n        exponents.add(1)\n    return len(exponents)"
    },
    {
        "id":115,
        "response":"import re\n\ndef str_to_tuple(s: str) -> tuple[int, ...]:\n    return tuple(map(int, re.findall(r'-?\\d+', s)))"
    },
    {
        "id":116,
        "response":"def rombus_perimeter(n):\n    return 4 * n"
    },
    {
        "id":117,
        "response":"import math\nfrom typing import List\n\ndef sd_calc(lst: List[float]) -> float:\n    n = len(lst)\n    if n == 0:\n        return 0.0\n    mean = sum(lst) \/ n\n    variance = sum((x - mean) ** 2 for x in lst) \/ n\n    return math.sqrt(variance)"
    },
    {
        "id":118,
        "response":"import typing\n\ndef alternate_elements(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return lst[::2]"
    },
    {
        "id":119,
        "response":"import re\n\ndef text_match(s: str) -> bool:\n    return bool(re.fullmatch(r'ab*', s))"
    },
    {
        "id":120,
        "response":""
    },
    {
        "id":121,
        "response":"import typing\n\ndef maxAverageOfPath(matrix: typing.List[typing.List[int]], n: int) -> float:\n    if n == 0 or not matrix:\n        return 0.0\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i - 1] + matrix[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + (dp[i - 1][j] if dp[i - 1][j] > dp[i][j - 1] else dp[i][j - 1])\n    max_sum = dp[n - 1][n - 1]\n    path_length = 2 * n - 1\n    return max_sum \/ path_length if path_length else 0.0"
    },
    {
        "id":122,
        "response":"import typing\n\ndef filter_data(dct: typing.Dict[typing.Any, typing.Dict[str, float]], n: float, n2: float) -> typing.Dict[typing.Any, typing.Dict[str, float]]:\n    result = {}\n    for key, attrs in dct.items():\n        if isinstance(attrs, dict):\n            height = attrs.get('height')\n            width = attrs.get('width')\n            if isinstance(height, (int, float)) and isinstance(width, (int, float)):\n                if height >= n and width >= n2:\n                    result[key] = attrs\n    return result"
    },
    {
        "id":123,
        "response":"import typing\n\ndef count_same_pair(lst: typing.List[typing.Any], lst2: typing.List[typing.Any]) -> int:\n    return sum(map(lambda x: 1 if x in lst2 else 0, lst))"
    },
    {
        "id":124,
        "response":"import typing\n\ndef power_base_sum(n: int, n2: int) -> int:\n    result = pow(n, n2)\n    return sum(int(d) for d in str(abs(result)))"
    },
    {
        "id":125,
        "response":"import re\n\ndef extract_quotation(s: str):\n    matches = re.findall(r'\"([^\"]*)\"|\\'([^\\']*)\\'', s)\n    return [m[0] or m[1] for m in matches]"
    },
    {
        "id":126,
        "response":"import typing\n\ndef multiply_elements(tup: typing.Tuple[typing.Any, ...]) -> typing.Tuple[typing.Any, ...]:\n    if len(tup) < 2:\n        return ()\n    return tuple(tup[i] * tup[i + 1] for i in range(len(tup) - 1))"
    },
    {
        "id":127,
        "response":"import re\n\ndef remove_char(s):\n    if not isinstance(s, str):\n        return ''\n    return re.sub(r'[^A-Za-z0-9]', '', s)"
    },
    {
        "id":128,
        "response":"import typing\n\ndef sum_list(lst: typing.List[typing.Union[int, float]], lst2: typing.List[typing.Union[int, float]]) -> typing.List[float]:\n    if len(lst) != len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a + b for a, b in zip(lst, lst2)]"
    },
    {
        "id":129,
        "response":"import itertools\n\ndef add_list(lst, lst2):\n    return list(map(lambda x, y: x + y, lst, lst2))"
    },
    {
        "id":130,
        "response":"import typing\n\ndef consecutive_duplicates(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result = []\n    for item in lst:\n        if not result or item != result[-1]:\n            result.append(item)\n    return result"
    },
    {
        "id":131,
        "response":"import math\n\ndef lateralsurface_cone(radius, height):\n    if radius <= 0 or height <= 0:\n        return 0.0\n    slant_height = math.sqrt(radius ** 2 + height ** 2)\n    return math.pi * radius * slant_height"
    },
    {
        "id":132,
        "response":"import re\n\ndef replace_specialchar(s: str) -> str:\n    if s is None:\n        return ''\n    return re.sub(r'[ ,.]', ':', s)"
    },
    {
        "id":133,
        "response":"import typing\n\ndef find_first_occurrence(lst: typing.List[int], n: int) -> int:\n    left, right = 0, len(lst) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] == n:\n            result = mid\n            right = mid - 1\n        elif lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "id":134,
        "response":"import typing\n\ndef sum_Of_Subarray_Prod(lst: typing.List[int], n: int) -> int:\n    if n == 0 or not lst:\n        return 0\n    total = 0\n    prev = 0\n    for i in range(n):\n        prev = lst[i] * (1 + prev)\n        total += prev\n    return total"
    },
    {
        "id":135,
        "response":"import typing\n\ndef toggle_middle_bits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Only non-negative integers are supported\")\n    length = n.bit_length()\n    if length <= 2:\n        return n\n    mask = ((1 << (length - 1)) - 1) & ~1\n    return n ^ mask"
    },
    {
        "id":136,
        "response":"import bisect\nfrom typing import List\n\ndef left_insertion(lst: List[int], n: int) -> int:\n    return bisect.bisect_left(lst, n)"
    },
    {
        "id":137,
        "response":"import typing\n\ndef check_str(s: str) -> bool:\n    if not s:\n        return False\n    first_char = s[0].lower()\n    return first_char in ('a', 'e', 'i', 'o', 'u')"
    },
    {
        "id":138,
        "response":"import math\n\ndef geometric_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return (1 << n) - 1"
    },
    {
        "id":139,
        "response":"import math\n\ndef find_Index(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    lower = 10 ** (n - 1)\n    k = math.ceil((-1 + math.sqrt(1 + 8 * lower)) \/ 2)\n    return k"
    },
    {
        "id":140,
        "response":"import typing\n\ndef tuple_to_dict(tup: tuple) -> dict:\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup) - 1, 2)}"
    },
    {
        "id":141,
        "response":"def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) <= 1"
    },
    {
        "id":142,
        "response":"import math\n\ndef area_tetrahedron(n):\n    return math.sqrt(3) * n * n"
    },
    {
        "id":143,
        "response":"import typing\n\ndef rotate_right(lst: typing.List[typing.Any], steps: int, times: int = 1) -> typing.List[typing.Any]:\n    if not lst or steps == 0 or times == 0:\n        return lst[:]\n    n = len(lst)\n    steps = steps % n\n    total_shift = (steps * times) % n\n    return lst[-total_shift:] + lst[:-total_shift]"
    },
    {
        "id":144,
        "response":"import typing\n\ndef check_none(tup: tuple) -> bool:\n    return any(item == 0 for item in tup)"
    },
    {
        "id":145,
        "response":"import typing\n\ndef divisible_by_digits(n: int, n2: int) -> typing.List[int]:\n    if n > n2:\n        return []\n    result = []\n    for num in range(n, n2 + 1):\n        if num == 0:\n            continue\n        temp = num\n        valid = True\n        while temp > 0:\n            digit = temp % 10\n            if digit == 0 or num % digit != 0:\n                valid = False\n                break\n            temp \/\/= 10\n        if valid:\n            result.append(num)\n    return result"
    },
    {
        "id":146,
        "response":"import math\n\ndef sector_area(radius, angle_degrees):\n    if radius < 0:\n        radius = abs(radius)\n    return (angle_degrees \/ 360.0) * math.pi * radius * radius"
    },
    {
        "id":147,
        "response":"import sys\n\ndef lcs_of_three(s1: str, s2: str, s3: str, n: int, n2: int, n3: int) -> str:\n    dp = [[[0] * (n3 + 1) for _ in range(n2 + 1)] for __ in range(n + 1)]\n    for i in range(1, n + 1):\n        c1 = s1[i - 1]\n        for j in range(1, n2 + 1):\n            c2 = s2[j - 1]\n            for k in range(1, n3 + 1):\n                if c1 == c2 == s3[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    a = dp[i - 1][j][k]\n                    b = dp[i][j - 1][k]\n                    c = dp[i][j][k - 1]\n                    dp[i][j][k] = a if a >= b and a >= c else (b if b >= c else c)\n    i, j, k = n, n2, n3\n    lcs_chars = []\n    while i > 0 and j > 0 and k > 0:\n        if s1[i - 1] == s2[j - 1] == s3[k - 1]:\n            lcs_chars.append(s1[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        else:\n            if dp[i - 1][j][k] >= dp[i][j - 1][k] and dp[i - 1][j][k] >= dp[i][j][k - 1]:\n                i -= 1\n            elif dp[i][j - 1][k] >= dp[i][j][k - 1]:\n                j -= 1\n            else:\n                k -= 1\n    return ''.join(reversed(lcs_chars))"
    },
    {
        "id":148,
        "response":"import re\n\ndef capital_words_spaces(s: str) -> str:\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', s)"
    },
    {
        "id":149,
        "response":"import re\nfrom typing import List\n\ndef sort_numeric_strings(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: int(x))"
    },
    {
        "id":150,
        "response":""
    },
    {
        "id":151,
        "response":"import typing\n\ndef check_min_heap(lst: typing.List[int], n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range((n \/\/ 2)):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and lst[i] > lst[left]:\n            return False\n        if right < n and lst[i] > lst[right]:\n            return False\n    return True"
    },
    {
        "id":152,
        "response":"def jacobsthal_num(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b"
    },
    {
        "id":153,
        "response":"import heapq\nfrom typing import List, Tuple, Any\n\ndef min_k(lst: List[Tuple[Any, ...]], k: int) -> List[Tuple[Any, ...]]:\n    if k <= 0:\n        return []\n    if k >= len(lst):\n        return sorted(lst)\n    return heapq.nsmallest(k, lst)"
    },
    {
        "id":154,
        "response":"import typing\n\ndef extract_index_list(lst1: typing.List[typing.Any], lst2: typing.List[typing.Any], lst3: typing.List[typing.Any]) -> typing.List[int]:\n    min_len = min(len(lst1), len(lst2), len(lst3))\n    result = []\n    for i in range(min_len):\n        if lst1[i] == lst2[i] == lst3[i]:\n            result.append(i)\n    return result"
    },
    {
        "id":155,
        "response":"import typing\n\ndef second_smallest(lst: typing.List[int]) -> typing.Optional[int]:\n    if not lst or len(lst) < 2:\n        return None\n    unique_vals = set(lst)\n    if len(unique_vals) < 2:\n        return None\n    smallest = second = None\n    for num in unique_vals:\n        if smallest is None or num < smallest:\n            second = smallest\n            smallest = num\n        elif second is None or (num < second and num != smallest):\n            second = num\n    return second"
    },
    {
        "id":156,
        "response":"import re\n\ndef text_match_zero_one(s: str) -> bool:\n    return bool(re.search(r'[0b]', s))"
    },
    {
        "id":157,
        "response":"import typing\n\ndef count_reverse_pairs(lst: typing.List[str]) -> int:\n    seen: typing.Dict[str, int] = {}\n    count = 0\n    for s in lst:\n        rev = s[::-1]\n        if rev in seen:\n            count += seen[rev]\n        seen[s] = seen.get(s, 0) + 1\n    return count"
    },
    {
        "id":158,
        "response":"import typing\n\ndef unique_sublists(lst: typing.List[typing.Any]) -> int:\n    seen = set()\n    n = len(lst)\n    for i in range(n):\n        current = []\n        for j in range(i, n):\n            current.append(lst[j])\n            seen.add(tuple(current))\n    return len(seen)"
    },
    {
        "id":159,
        "response":"import re\n\ndef is_decimal(s: str) -> bool:\n    return re.fullmatch(r'[+-]?\\d+\\.\\d{2}', s) is not None"
    },
    {
        "id":160,
        "response":"import typing\n\ndef unique_Element(lst: typing.List[int], n: int) -> bool:\n    if n <= 0 or not lst:\n        return False\n    first = lst[0]\n    for i in range(1, n):\n        if lst[i] != first:\n            return False\n    return True"
    },
    {
        "id":161,
        "response":"import math\n\ndef arc_length(radius: float, angle_degrees: float) -> float:\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    theta_rad = math.radians(angle_degrees)\n    return radius * theta_rad"
    },
    {
        "id":162,
        "response":"import typing\n\ndef check_monthnumber_number(n: int) -> bool:\n    return n in {4, 6, 9, 11}"
    },
    {
        "id":163,
        "response":"import sys\n\ndef find_Min_Diff(tup, n):\n    if n < 2:\n        return None\n    arr = list(tup)\n    arr.sort()\n    min_diff = sys.maxsize\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            if min_diff == 0:\n                break\n    return min_diff"
    },
    {
        "id":164,
        "response":"import typing\n\ndef number_ctr(s: str) -> int:\n    return sum(1 for c in s if c.isdigit())"
    },
    {
        "id":165,
        "response":"import sys\n\ndef is_polite(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    count = 0\n    num = 1\n    while True:\n        if num & (num - 1):\n            count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "id":166,
        "response":"import typing\n\ndef pair_wise(lst: typing.List[typing.Any]) -> typing.Iterator[typing.Tuple[typing.Any, typing.Any]]:\n    for i in range(len(lst) - 1):\n        yield (lst[i], lst[i + 1])"
    },
    {
        "id":167,
        "response":"import typing\n\ndef get_Pairs_Count(lst: typing.List[int], n: int, target_sum: int) -> int:\n    if n != len(lst):\n        n = len(lst)\n    freq = {}\n    count = 0\n    for num in lst:\n        complement = target_sum - num\n        count += freq.get(complement, 0)\n        freq[num] = freq.get(num, 0) + 1\n    return count"
    },
    {
        "id":168,
        "response":""
    },
    {
        "id":169,
        "response":"import typing\n\ndef Diff(lst: typing.List[typing.Any], lst2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    set2 = set(lst2)\n    return [item for item in lst if item not in set2]"
    },
    {
        "id":170,
        "response":"import typing\n\ndef odd_Num_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    total = 0\n    for k in range(1, n + 1):\n        odd = 2 * k - 1\n        total += odd ** 4\n    return total"
    },
    {
        "id":171,
        "response":"import re\n\ndef check_expression(s: str) -> bool:\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    opening = set(pairs.values())\n    for ch in s:\n        if ch in opening:\n            stack.append(ch)\n        elif ch in pairs:\n            if not stack or stack[-1] != pairs[ch]:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "id":172,
        "response":"import re\n\ndef remove_length(s: str, k: int) -> str:\n    words = re.findall(r'\\S+', s)\n    filtered = [w for w in words if len(w) != k]\n    return ' '.join(filtered)"
    },
    {
        "id":173,
        "response":"import re\nfrom typing import List, Tuple\n\ndef occurence_substring(s: str, s2: str) -> Tuple[int, List[int]]:\n    if not s2:\n        return (0, [])\n    positions = [m.start() for m in re.finditer(re.escape(s2), s)]\n    return (len(positions), positions)"
    },
    {
        "id":174,
        "response":""
    },
    {
        "id":175,
        "response":"import typing\n\ndef odd_position(lst: typing.List[int]) -> bool:\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "id":176,
        "response":"import re\n\ndef count_vowels(s: str) -> int:\n    vowels = set('aeiouAEIOU')\n    n = len(s)\n    count = 0\n    for i, ch in enumerate(s):\n        left = s[i - 1] if i > 0 else ''\n        right = s[i + 1] if i < n - 1 else ''\n        if (left in vowels) or (right in vowels):\n            count += 1\n    return count"
    },
    {
        "id":177,
        "response":"import collections\n\ndef find_Sum(lst, n):\n    if not isinstance(lst, list) or n != len(lst):\n        return 0\n    freq = collections.Counter(lst)\n    total = 0\n    for item in lst:\n        if freq[item] == 1:\n            total += item\n    return total"
    },
    {
        "id":178,
        "response":"import itertools\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(lst: List[Any]) -> List[List[Any]]:\n    if not lst:\n        return []\n    result: List[List[Any]] = []\n    for key, group in itertools.groupby(lst):\n        result.append(list(group))\n    return result"
    },
    {
        "id":179,
        "response":"import typing\n\ndef unique_sublists(lst: typing.List[typing.Any]) -> int:\n    seen = set()\n    n = len(lst)\n    for i in range(n):\n        current = []\n        for j in range(i, n):\n            current.append(lst[j])\n            seen.add(tuple(current))\n    return len(seen)"
    },
    {
        "id":180,
        "response":"import itertools\nfrom typing import List, Tuple, Any\n\ndef find_combinations(lst: List[Tuple[Any, ...]]) -> List[Tuple[Any, ...]]:\n    if not lst:\n        return []\n    result = []\n    for r in range(1, len(lst) + 1):\n        for combo in itertools.combinations(lst, r):\n            summed = tuple(sum(elements) for elements in zip(*combo))\n            result.append(summed)\n    return result"
    },
    {
        "id":181,
        "response":"import math\n\ndef count_Divisors(n):\n    if n <= 0:\n        return \"Even\"\n    cnt = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            cnt += 2\n    if limit * limit == n:\n        cnt -= 1\n    return \"Even\" if cnt % 2 == 0 else \"Odd\""
    },
    {
        "id":182,
        "response":"import typing\n\ndef Odd_Length_Sum(lst: typing.List[int]) -> int:\n    n = len(lst)\n    total = 0\n    for i, val in enumerate(lst):\n        count = ((i + 1) * (n - i) + 1) \/\/ 2\n        total += val * count\n    return total"
    },
    {
        "id":183,
        "response":"import math\n\ndef rgb_to_hsv(r, g, b):\n    r_norm, g_norm, b_norm = r \/ 255.0, g \/ 255.0, b \/ 255.0\n    c_max = max(r_norm, g_norm, b_norm)\n    c_min = min(r_norm, g_norm, b_norm)\n    delta = c_max - c_min\n\n    if delta == 0:\n        h = 0\n    elif c_max == r_norm:\n        h = (60 * ((g_norm - b_norm) \/ delta) + 360) % 360\n    elif c_max == g_norm:\n        h = (60 * ((b_norm - r_norm) \/ delta) + 120) % 360\n    else:\n        h = (60 * ((r_norm - g_norm) \/ delta) + 240) % 360\n\n    s = 0 if c_max == 0 else delta \/ c_max\n    v = c_max\n\n    return h, s, v"
    },
    {
        "id":184,
        "response":"import typing\n\ndef mul_even_odd(lst: typing.List[int]) -> typing.Optional[int]:\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even * first_odd"
    },
    {
        "id":185,
        "response":"import ast\n\ndef tuple_str_int(s: str) -> tuple[int, ...]:\n    try:\n        t = ast.literal_eval(s)\n        if isinstance(t, tuple):\n            return tuple(int(x) for x in t)\n    except Exception:\n        pass\n    s = s.strip()\n    if s.startswith('(') and s.endswith(')'):\n        s = s[1:-1]\n    if not s:\n        return ()\n    return tuple(int(x.strip()) for x in s.split(','))"
    },
    {
        "id":186,
        "response":"import bisect\n\ndef right_insertion(lst, n):\n    return bisect.bisect_right(lst, n)"
    },
    {
        "id":187,
        "response":"import re\n\ndef text_match_three(s: str) -> bool:\n    return bool(re.search(r\"abbb\", s))"
    },
    {
        "id":188,
        "response":"import typing\n\ndef new_tuple(lst: typing.List[typing.Any], s: str) -> tuple:\n    return tuple(lst) + (s,)"
    },
    {
        "id":189,
        "response":"import typing\n\ndef perimeter_polygon(n: int, side_length: float) -> float:\n    if n < 3 or side_length < 0:\n        raise ValueError(\"Number of sides must be at least 3 and side length must be non\u2011negative.\")\n    return n * side_length"
    },
    {
        "id":190,
        "response":"import typing\n\ndef even_position(lst: typing.List[typing.Any]) -> bool:\n    for i in range(0, len(lst), 2):\n        if not isinstance(lst[i], int) or lst[i] % 2 != 0:\n            return False\n    return True"
    },
    {
        "id":191,
        "response":"import typing\n\ndef remove_nested(tup: tuple) -> tuple:\n    return tuple(item for item in tup if not isinstance(item, tuple))"
    },
    {
        "id":192,
        "response":"import typing\n\ndef count_list(lst: typing.List[typing.Any]) -> int:\n    if not isinstance(lst, list):\n        return 0\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "id":193,
        "response":"import typing\n\ndef last(lst: typing.List[int], target: int, high: int = None) -> int:\n    if high is None or high >= len(lst):\n        high = len(lst) - 1\n    low = 0\n    result = -1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if lst[mid] == target:\n            result = mid\n            low = mid + 1\n        elif lst[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    },
    {
        "id":194,
        "response":"import re\n\ndef text_starta_endb(s: str) -> bool:\n    return bool(re.search(r'a.+b$', s))"
    },
    {
        "id":195,
        "response":"import heapq\nfrom typing import List, Any\n\ndef cheap_items(lst: List[Any], n: int) -> List[Any]:\n    if n <= 0:\n        return []\n    return heapq.nsmallest(n, lst)"
    },
    {
        "id":196,
        "response":"import typing\n\ndef return_sum(dct: typing.Dict[typing.Any, typing.Any]) -> float:\n    total = 0.0\n    for value in dct.values():\n        try:\n            total += float(value)\n        except (TypeError, ValueError):\n            continue\n    return total"
    },
    {
        "id":197,
        "response":"import typing\n\ndef sum_in_Range(l: int, r: int) -> int:\n    if l > r:\n        l, r = r, l\n    start = l if l % 2 == 1 else l + 1\n    end = r if r % 2 == 1 else r - 1\n    if start > end:\n        return 0\n    count = ((end - start) \/\/ 2) + 1\n    return count * (start + end) \/\/ 2"
    },
    {
        "id":198,
        "response":"def _sum(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total"
    },
    {
        "id":199,
        "response":"import typing\n\ndef left_Rotate(num: int, rot: int) -> int:\n    width = 32\n    rot %= width\n    mask = (1 << width) - 1\n    return ((num << rot) & mask) | ((num & mask) >> (width - rot))"
    },
    {
        "id":200,
        "response":"import re\n\ndef remove_all_spaces(s):\n    if not isinstance(s, str):\n        return s\n    return re.sub(r'\\s+', '', s)"
    },
    {
        "id":201,
        "response":""
    },
    {
        "id":202,
        "response":"import typing\n\ndef count_Rotation(lst: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    low, high = 0, n - 1\n    while low <= high:\n        if lst[low] <= lst[high]:\n            return low\n        mid = (low + high) \/\/ 2\n        next_idx = (mid + 1) % n\n        prev_idx = (mid - 1 + n) % n\n        if lst[mid] <= lst[next_idx] and lst[mid] <= lst[prev_idx]:\n            return mid\n        if lst[mid] >= lst[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0"
    },
    {
        "id":203,
        "response":"import math\n\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n"
    },
    {
        "id":204,
        "response":"import typing\n\ndef is_Product_Even(lst: typing.List[int], n: int) -> bool:\n    if n <= 0:\n        return False\n    limit = min(n, len(lst))\n    for i in range(limit):\n        if lst[i] % 2 == 0:\n            return True\n    return False"
    },
    {
        "id":205,
        "response":"import typing\n\ndef max_sum_list(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    if not lst:\n        return []\n    max_list = lst[0]\n    max_sum = sum(max_list) if max_list else float('-inf')\n    for sub in lst[1:]:\n        current_sum = sum(sub) if sub else float('-inf')\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sub\n    return max_list"
    },
    {
        "id":206,
        "response":"import re\n\ndef max_run_uppercase(s: str) -> int:\n    max_len = 0\n    current = 0\n    for ch in s:\n        if ch.isupper():\n            current += 1\n            if current > max_len:\n                max_len = current\n        else:\n            current = 0\n    return max_len"
    },
    {
        "id":207,
        "response":"import typing\n\ndef first_odd(lst: typing.List[int]) -> typing.Optional[int]:\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            return num\n    return None"
    },
    {
        "id":208,
        "response":"import itertools\n\ndef check_K(tup, n):\n    if not isinstance(tup, tuple):\n        return False\n    for element in tup:\n        if isinstance(element, tuple):\n            if n in element:\n                return True\n        else:\n            if element == n:\n                return True\n    return False"
    },
    {
        "id":209,
        "response":"import typing\n\ndef check_smaller(tup1: typing.Tuple, tup2: typing.Tuple) -> bool:\n    if len(tup1) != len(tup2):\n        return False\n    for a, b in zip(tup1, tup2):\n        if not b < a:\n            return False\n    return True"
    },
    {
        "id":210,
        "response":"import typing\n\ndef count_variable(*args: int) -> typing.List[int]:\n    result: typing.List[int] = []\n    for num in args:\n        if isinstance(num, int) and num > 0:\n            result.extend([num] * num)\n    return result"
    },
    {
        "id":211,
        "response":"import typing\n\ndef check_identical(lst: typing.List[tuple], lst2: typing.List[tuple]) -> bool:\n    if len(lst) != len(lst2):\n        return False\n    for a, b in zip(lst, lst2):\n        if a != b:\n            return False\n    return True"
    },
    {
        "id":212,
        "response":"import re\n\ndef road_rd(s: str) -> str:\n    return re.sub(r'road', 'rd.', s)"
    },
    {
        "id":213,
        "response":""
    },
    {
        "id":214,
        "response":"import typing\n\ndef rombus_area(d1: float, d2: float) -> float:\n    return (abs(d1) * abs(d2)) \/ 2.0"
    },
    {
        "id":215,
        "response":"import typing\n\ndef sort_by_dnf(lst: typing.List[int], n: int) -> typing.List[int]:\n    low, mid, high = 0, 0, n - 1\n    while mid <= high:\n        if lst[mid] == 0:\n            lst[low], lst[mid] = lst[mid], lst[low]\n            low += 1\n            mid += 1\n        elif lst[mid] == 1:\n            mid += 1\n        else:\n            lst[mid], lst[high] = lst[high], lst[mid]\n            high -= 1\n    return lst"
    },
    {
        "id":216,
        "response":"import typing\n\ndef clear_tuple(tup: tuple) -> tuple:\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    return ()"
    },
    {
        "id":217,
        "response":"import re\nfrom typing import List\n\ndef div_of_nums(lst: List[int], n: int, n2: int) -> List[int]:\n    if n == 0 or n2 == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    return list(filter(lambda x: x % n == 0 or x % n2 == 0, lst))"
    },
    {
        "id":218,
        "response":"def lower_ctr(s):\n    return sum(1 for c in s if 'a' <= c <= 'z')"
    },
    {
        "id":219,
        "response":"import typing\n\ndef count_duplic(lst: typing.List[int]) -> typing.Dict[int, int]:\n    result: typing.Dict[int, int] = {}\n    if not lst:\n        return result\n    prev = lst[0]\n    count = 1\n    for num in lst[1:]:\n        if num == prev:\n            count += 1\n        else:\n            if count > 1:\n                result[prev] = result.get(prev, 0) + count\n            prev = num\n            count = 1\n    if count > 1:\n        result[prev] = result.get(prev, 0) + count\n    return result"
    },
    {
        "id":220,
        "response":"import typing\n\ndef check_monthnum_number(n: int) -> bool:\n    return n == 2"
    },
    {
        "id":221,
        "response":"import typing\n\ndef merge_dictionaries(dct1: typing.Dict[typing.Any, typing.Any], dct2: typing.Dict[typing.Any, typing.Any]) -> typing.Dict[typing.Any, typing.Any]:\n    merged = dct1.copy()\n    merged.update(dct2)\n    return merged"
    },
    {
        "id":222,
        "response":"import re\n\ndef pass_validity(s: str) -> bool:\n    if not isinstance(s, str):\n        return False\n    if len(s) < 8:\n        return False\n    if not re.search(r'[A-Z]', s):\n        return False\n    if not re.search(r'[a-z]', s):\n        return False\n    if not re.search(r'\\d', s):\n        return False\n    if not re.search(r'[!@#$%^&*(),.?\":{}|<>]', s):\n        return False\n    return True"
    },
    {
        "id":223,
        "response":"import re\n\ndef check_substring(s: str, sub: str) -> bool:\n    if sub == \"\":\n        return True\n    pattern = r'^' + re.escape(sub)\n    return re.match(pattern, s) is not None"
    },
    {
        "id":224,
        "response":"import typing\n\ndef remove_even(lst: typing.List[int]) -> typing.List[int]:\n    return [x for x in lst if x % 2 != 0]"
    },
    {
        "id":225,
        "response":""
    },
    {
        "id":226,
        "response":"import math\n\ndef check_Type_Of_Triangle(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[0] <= 0 or sides[0] + sides[1] <= sides[2]:\n        return \"Not a triangle\"\n    if a == b == c:\n        return \"Equilateral\"\n    if a == b or b == c or a == c:\n        return \"Isosceles\"\n    return \"Scalene\""
    },
    {
        "id":227,
        "response":"import typing\n\ndef sum_column(lst: typing.List[typing.List[typing.Union[int, float]]], n: int) -> typing.Union[int, float]:\n    total = 0\n    for row in lst:\n        if isinstance(row, (list, tuple)) and 0 <= n < len(row):\n            val = row[n]\n            if isinstance(val, (int, float)):\n                total += val\n    return total"
    },
    {
        "id":228,
        "response":"import typing\n\ndef count_alpha_dig_spl(s: str) -> typing.Tuple[int, int, int]:\n    alpha = digit = special = 0\n    for ch in s:\n        if ch.isalpha():\n            alpha += 1\n        elif ch.isdigit():\n            digit += 1\n        else:\n            special += 1\n    return alpha, digit, special"
    },
    {
        "id":229,
        "response":"import collections\n\ndef second_frequent(lst):\n    if not lst:\n        return None\n    freq = collections.Counter(lst)\n    if len(freq) < 2:\n        return None\n    frequencies = sorted({count for count in freq.values()}, reverse=True)\n    second_max = frequencies[1]\n    seen = set()\n    for item in lst:\n        if freq[item] == second_max and item not in seen:\n            return item\n        seen.add(item)\n    return None"
    },
    {
        "id":230,
        "response":"import math\n\ndef round_up(n, n2):\n    if n2 == 0:\n        raise ValueError(\"n2 must not be zero\")\n    return math.ceil(n \/ n2) * n2"
    },
    {
        "id":231,
        "response":"import collections\nfrom typing import List\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    freq = collections.Counter(lst[:n])\n    total = 0\n    for count in freq.values():\n        if count > 1:\n            total += count * (count - 1) \/\/ 2\n    return total"
    },
    {
        "id":232,
        "response":"import re\n\ndef extract_max(s):\n    numbers = re.findall(r'\\d+', s)\n    if not numbers:\n        return None\n    return max(map(int, numbers))"
    },
    {
        "id":233,
        "response":"import typing\n\ndef get_key(dct: typing.Dict) -> typing.List:\n    if not isinstance(dct, dict):\n        return []\n    return list(dct.keys())"
    },
    {
        "id":234,
        "response":"import math\n\ndef generate_matrix(n):\n    if n <= 0:\n        return []\n    size = int(math.isqrt(n))\n    if size * size != n:\n        raise ValueError(\"n must be a perfect square\")\n    matrix = [[0] * size for _ in range(size)]\n    top, bottom = 0, size - 1\n    left, right = 0, size - 1\n    num = 1\n    while top <= bottom and left <= right:\n        for col in range(left, right + 1):\n            matrix[top][col] = num * num\n            num += 1\n        top += 1\n        for row in range(top, bottom + 1):\n            matrix[row][right] = num * num\n            num += 1\n        right -= 1\n        if top <= bottom:\n            for col in range(right, left - 1, -1):\n                matrix[bottom][col] = num * num\n                num += 1\n            bottom -= 1\n        if left <= right:\n            for row in range(bottom, top - 1, -1):\n                matrix[row][left] = num * num\n                num += 1\n            left += 1\n    return matrix"
    },
    {
        "id":235,
        "response":"import math\n\ndef slope(x1, y1, x2, y2):\n    if x2 == x1:\n        return math.inf\n    return (y2 - y1) \/ (x2 - x1)"
    },
    {
        "id":236,
        "response":"import typing\n\ndef max_sub_array_sum(lst: typing.List[int], n: int) -> typing.Tuple[int, int]:\n    if n == 0 or not lst:\n        return 0, 0\n    max_sum = lst[0]\n    max_len = 1\n    current_sum = lst[0]\n    current_start = 0\n    for i in range(1, n):\n        if current_sum + lst[i] < lst[i]:\n            current_sum = lst[i]\n            current_start = i\n        else:\n            current_sum += lst[i]\n        current_len = i - current_start + 1\n        if current_sum > max_sum or (current_sum == max_sum and current_len > max_len):\n            max_sum = current_sum\n            max_len = current_len\n    return max_sum, max_len"
    },
    {
        "id":237,
        "response":"import typing\n\ndef cube_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return 2 * n * n * (n + 1) * (n + 1) - 2 * n * (n + 1) * (2 * n + 1) + 3 * n * (n + 1) - n"
    },
    {
        "id":238,
        "response":"import typing\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    cnt01 = cnt10 = 0\n    for a, b in zip(s, s2):\n        if a == b:\n            continue\n        if a == '0' and b == '1':\n            cnt01 += 1\n        elif a == '1' and b == '0':\n            cnt10 += 1\n        else:\n            return -1\n    if cnt01 != cnt10:\n        return -1\n    return cnt01"
    },
    {
        "id":239,
        "response":"import typing\n\ndef sort_tuple(lst: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    return sorted(lst, key=lambda x: x[0])"
    },
    {
        "id":240,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    eps = 1e-9\n    if abs(a) < eps:\n        return False\n    if abs(b) > eps:\n        return False\n    return a * c < -eps"
    },
    {
        "id":241,
        "response":"import typing\n\ndef get_inv_count(lst: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n\n    temp = [0] * n\n\n    def merge_sort(left: int, right: int) -> int:\n        if left >= right:\n            return 0\n        mid = (left + right) \/\/ 2\n        inv_count = merge_sort(left, mid)\n        inv_count += merge_sort(mid + 1, right)\n\n        i, j, k = left, mid + 1, left\n        while i <= mid and j <= right:\n            if lst[i] <= lst[j]:\n                temp[k] = lst[i]\n                i += 1\n            else:\n                temp[k] = lst[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp[k] = lst[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp[k] = lst[j]\n            j += 1\n            k += 1\n\n        lst[left:right + 1] = temp[left:right + 1]\n        return inv_count\n\n    return merge_sort(0, n - 1)"
    },
    {
        "id":242,
        "response":"import typing\n\ndef get_odd_occurence(lst: typing.List[int], n: int) -> int:\n    result = 0\n    for i in range(n):\n        result ^= lst[i]\n    return result"
    },
    {
        "id":243,
        "response":"import heapq\nfrom typing import List\n\ndef nth_super_ugly_number(n: int, lst: List[int]) -> int:\n    if n <= 0 or not lst:\n        return 0\n    heap = [1]\n    seen = {1}\n    ugly = 1\n    for _ in range(n):\n        ugly = heapq.heappop(heap)\n        for p in lst:\n            nxt = ugly * p\n            if nxt not in seen:\n                seen.add(nxt)\n                heapq.heappush(heap, nxt)\n    return ugly"
    },
    {
        "id":244,
        "response":"import typing\n\ndef get_Number(n: int, k: int) -> typing.Optional[int]:\n    if k <= 0 or k > n:\n        return None\n    odds = (n + 1) \/\/ 2\n    if k <= odds:\n        return 2 * k - 1\n    else:\n        return 2 * (k - odds)"
    },
    {
        "id":245,
        "response":"import math\n\ndef find_Digits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 1\n    log_sum = 0.0\n    for i in range(2, n + 1):\n        log_sum += math.log10(i)\n    return int(log_sum) + 1"
    },
    {
        "id":246,
        "response":"import typing\n\ndef find_platform(arr: typing.List[int], dep: typing.List[int], n: int) -> int:\n    if n == 0 or not arr or not dep:\n        return 0\n    arr_sorted = sorted(arr[:n])\n    dep_sorted = sorted(dep[:n])\n    platform_needed = 0\n    max_platforms = 0\n    i = j = 0\n    while i < n and j < n:\n        if arr_sorted[i] <= dep_sorted[j]:\n            platform_needed += 1\n            if platform_needed > max_platforms:\n                max_platforms = platform_needed\n            i += 1\n        else:\n            platform_needed -= 1\n            j += 1\n    return max_platforms"
    },
    {
        "id":247,
        "response":"import copy\n\ndef lcopy(singleton_tuple):\n    if not isinstance(singleton_tuple, tuple) or len(singleton_tuple) != 1:\n        raise ValueError(\"Input must be a tuple with exactly one element\")\n    element = singleton_tuple[0]\n    if isinstance(element, list):\n        return element.copy()\n    return copy.deepcopy(element)"
    },
    {
        "id":248,
        "response":"import typing\n\ndef area_trapezium(a: float, b: float, h: float) -> float:\n    return (a + b) * h \/ 2."
    },
    {
        "id":249,
        "response":"import math\n\ndef Sum(n):\n    total = 0\n    for ch in str(abs(int(n))):\n        d = int(ch)\n        if d == 0:\n            continue\n        div_sum = 0\n        limit = int(math.isqrt(d))\n        for i in range(1, limit + 1):\n            if d % i == 0:\n                div_sum += i\n                other = d \/\/ i\n                if other != i:\n                    div_sum += other\n        total += div_sum\n    return total"
    },
    {
        "id":250,
        "response":"import math\n\ndef is_triangleexists(n, n2, n3):\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    return math.isclose(n + n2 + n3, 180.0, rel_tol=0, abs_tol=1e-9)"
    },
    {
        "id":251,
        "response":"import math\n\ndef Sum_of_Inverse_Divisors(*nums):\n    results = []\n    for n in nums:\n        if n <= 0:\n            results.append(0.0)\n            continue\n        total = 0.0\n        limit = int(math.isqrt(n))\n        for i in range(1, limit + 1):\n            if n % i == 0:\n                total += 1.0 \/ i\n                other = n \/\/ i\n                if other != i:\n                    total += 1.0 \/ other\n        results.append(total)\n    return results[0] if len(results) == 1 else results"
    },
    {
        "id":252,
        "response":"import typing\n\ndef remove_negs(lst: typing.List[int]) -> typing.List[int]:\n    return [x for x in lst if x >= 0]"
    },
    {
        "id":253,
        "response":"import math\n\ndef sum_of_odd_Factors(n):\n    if n == 0:\n        return 0\n    n = abs(n)\n    while n % 2 == 0:\n        n \/\/= 2\n    odd_part = n\n    result = 1\n    i = 3\n    limit = int(math.isqrt(odd_part)) + 1\n    while i <= limit and odd_part > 1:\n        if odd_part % i == 0:\n            power = 0\n            while odd_part % i == 0:\n                odd_part \/\/= i\n                power += 1\n            result *= (i ** (power + 1) - 1) \/\/ (i - 1)\n            limit = int(math.isqrt(odd_part)) + 1\n        i += 2\n    if odd_part > 1:\n        result *= (odd_part ** 2 - 1) \/\/ (odd_part - 1)\n    return result"
    },
    {
        "id":254,
        "response":"import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst"
    },
    {
        "id":255,
        "response":"import typing\n\ndef check_Even_Parity(n: typing.Any) -> bool:\n    try:\n        return int(n) % 2 == 0\n    except Exception:\n        raise ValueError(\"Input must be a numeric value\")"
    },
    {
        "id":256,
        "response":"import typing\n\ndef find_Min_Swaps(lst: typing.List[int], n: int) -> int:\n    swaps = 0\n    ones_seen = 0\n    length = min(n, len(lst))\n    for i in range(length):\n        if lst[i] == 1:\n            ones_seen += 1\n        else:\n            swaps += ones_seen\n    return swaps"
    },
    {
        "id":257,
        "response":"import typing\n\ndef listify_list(lst: typing.List[str]) -> typing.List[typing.List[str]]:\n    return list(map(list, lst))"
    },
    {
        "id":258,
        "response":"import math\n\ndef count_list(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and item >= 0:\n            root = int(math.isqrt(item))\n            if root * root == item:\n                count += 1\n    return count"
    },
    {
        "id":259,
        "response":"import typing\n\ndef sub_lists(lst: typing.List[typing.Any]) -> typing.List[typing.List[typing.Any]]:\n    result: typing.List[typing.List[typing.Any]] = [[]]\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "id":260,
        "response":"import typing\n\ndef check_alphanumeric(s: str) -> bool:\n    if not s:\n        return False\n    return all(c.isalnum() for c in s)"
    },
    {
        "id":261,
        "response":"from typing import List\n\ndef anagram_lambda(lst: List[str], s: str) -> List[str]:\n    return list(filter(lambda x: sorted(x) == sorted(s), lst))"
    },
    {
        "id":262,
        "response":"import re\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef n_common_words(s: str, n: int) -> List[Tuple[str, int]]:\n    if n <= 0:\n        return []\n    words = re.findall(r\"\\b\\w+\\b\", s.lower())\n    counter = Counter(words)\n    return counter.most_common(n)"
    },
    {
        "id":263,
        "response":"import typing\n\ndef find_longest_conseq_subseq(lst: typing.List[int], n: int) -> int:\n    if not lst:\n        return 0\n    num_set = set(lst)\n    longest = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current = num\n            length = 1\n            while current + 1 in num_set:\n                current += 1\n                length += 1\n            if length > longest:\n                longest = length\n    return longest"
    },
    {
        "id":264,
        "response":"import typing\n\ndef palindrome_lambda(lst: typing.List[str]) -> typing.List[str]:\n    return list(filter(lambda s: isinstance(s, str) and s == s[::-1], lst))"
    },
    {
        "id":265,
        "response":"import sys\n\ndef ntimes_list(lst, n):\n    if n <= 0:\n        return\n    list(map(lambda _: sys.stdout.write(str(lst) + \"\\n\"), range(n)))"
    },
    {
        "id":266,
        "response":"import typing\n\ndef check_monthnumb(s: str) -> bool:\n    month = s.strip().lower()\n    months_31 = {\n        \"january\",\n        \"march\",\n        \"may\",\n        \"july\",\n        \"august\",\n        \"october\",\n        \"december\",\n    }\n    return month in months_31"
    },
    {
        "id":267,
        "response":"import typing\n\ndef min_Num(lst: typing.List[int]) -> int:\n    total = sum(lst)\n    return 0 if total % 2 == 0 else 1"
    },
    {
        "id":268,
        "response":"import typing\n\ndef length_Of_Last_Word(s: str) -> int:\n    i = len(s) - 1\n    while i >= 0 and s[i].isspace():\n        i -= 1\n    if i < 0:\n        return 0\n    length = 0\n    while i >= 0 and not s[i].isspace():\n        length += 1\n        i -= 1\n    return length"
    },
    {
        "id":269,
        "response":"import typing\n\ndef remove_list_range(lst: typing.List[typing.Any], n: typing.Any, n2: typing.Any) -> typing.List[typing.Any]:\n    low, high = (n, n2) if n <= n2 else (n2, n)\n    return [x for x in lst if low <= x <= high]"
    },
    {
        "id":270,
        "response":"import functools\n\ndef sum_positivenum(lst):\n    return functools.reduce(lambda acc, x: acc + x, filter(lambda n: n > 0, lst), 0)"
    },
    {
        "id":271,
        "response":"import typing\n\ndef are_Rotations(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    return s in (s2 + s2)"
    },
    {
        "id":272,
        "response":"import collections\nfrom typing import Any, List\n\ndef _flatten(nested: List[Any]) -> List[Any]:\n    flat = []\n    stack = [nested]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, list):\n            for item in reversed(current):\n                stack.append(item)\n        else:\n            flat.append(current)\n    return flat\n\ndef check_subset(lst: List[Any], lst2: List[Any]) -> bool:\n    flat1 = _flatten(lst)\n    flat2 = _flatten(lst2)\n    counter1 = collections.Counter(flat1)\n    counter2 = collections.Counter(flat2)\n    for elem, cnt in counter1.items():\n        if counter2[elem] < cnt:\n            return False\n    return True"
    },
    {
        "id":273,
        "response":"import sys\n\ndef fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)"
    },
    {
        "id":274,
        "response":"import typing\n\ndef check_Concat(s: str, s2: str) -> bool:\n    return s == s2 + s2"
    },
    {
        "id":275,
        "response":"import math\nfrom typing import List, Tuple, Optional\n\ndef min_difference(lst: List[Tuple[float, ...]]) -> Optional[float]:\n    if len(lst) < 2:\n        return None\n    min_diff = None\n    n = len(lst)\n    for i in range(n):\n        ti = lst[i]\n        for j in range(i + 1, n):\n            tj = lst[j]\n            if len(ti) != len(tj):\n                continue\n            diff_sq = 0.0\n            for a, b in zip(ti, tj):\n                diff_sq += (a - b) ** 2\n            diff = math.sqrt(diff_sq)\n            if min_diff is None or diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "id":276,
        "response":""
    },
    {
        "id":277,
        "response":"import typing\n\ndef sort_String(s: str) -> str:\n    if not s:\n        return \"\"\n    return \"\".join(sorted(s))"
    },
    {
        "id":278,
        "response":"import typing\n\ndef check_tuples(tup: tuple, lst: list) -> bool:\n    if len(tup) != len(lst):\n        return False\n    return all(item in lst for item in tup)"
    },
    {
        "id":279,
        "response":"import re\n\ndef text_match(s: str) -> bool:\n    return bool(re.search(r'a.+b$', s))"
    },
    {
        "id":280,
        "response":"import math\n\ndef Check_Solution(a, b, c):\n    if a == 0:\n        if b == 0:\n            return -1 if c == 0 else 0\n        return 1\n    disc = b * b - 4 * a * c\n    if disc > 0:\n        return 2\n    if disc == 0:\n        return 1\n    return 0"
    },
    {
        "id":281,
        "response":"import typing\n\ndef sum_even_odd(lst: typing.List[int]) -> typing.Tuple[int, int]:\n    sum_even = 0\n    sum_odd = 0\n    for num in lst:\n        if isinstance(num, int):\n            if num % 2 == 0:\n                sum_even += num\n            else:\n                sum_odd += num\n    return sum_even, sum_odd"
    },
    {
        "id":282,
        "response":"import typing\n\ndef parallelogram_perimeter(side1: typing.Union[int, float], side2: typing.Union[int, float]) -> float:\n    return 2 * (side1 + side2)"
    },
    {
        "id":283,
        "response":"import typing\n\ndef div_of_nums(lst: typing.List[int], m: int, n: int) -> typing.List[int]:\n    if m == 0 or n == 0:\n        return []\n    return list(filter(lambda x: x % m == 0 and x % n == 0, lst))"
    },
    {
        "id":284,
        "response":"import typing\n\ndef all_Bits_Set_In_The_Given_Range(n: int, n2: int, n3: int) -> bool:\n    if n2 < 0 or n3 < 0 or n2 > n3:\n        return False\n    mask = ((1 << (n3 - n2 + 1)) - 1) << n2\n    return (n & mask) == mask"
    },
    {
        "id":285,
        "response":"import typing\n\ndef is_Isomorphic(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    map_s_to_s2: dict[str, str] = {}\n    map_s2_to_s: dict[str, str] = {}\n    for ch1, ch2 in zip(s, s2):\n        if ch1 in map_s_to_s2:\n            if map_s_to_s2[ch1] != ch2:\n                return False\n        else:\n            map_s_to_s2[ch1] = ch2\n        if ch2 in map_s2_to_s:\n            if map_s2_to_s[ch2] != ch1:\n                return False\n        else:\n            map_s2_to_s[ch2] = ch1\n    return True"
    },
    {
        "id":286,
        "response":"import typing\n\ndef sum_num(tup: typing.Sequence[float]) -> float:\n    if not tup:\n        return 0.0\n    return sum(tup) \/ len(tup)"
    },
    {
        "id":287,
        "response":"def is_odd(n):\n    return bool(n & 1)"
    },
    {
        "id":288,
        "response":"import typing\n\ndef substract_elements(tup1: typing.Tuple, tup2: typing.Tuple) -> typing.Tuple:\n    def recurse(a, b):\n        if isinstance(a, tuple) and isinstance(b, tuple):\n            if len(a) != len(b):\n                raise ValueError(\"Tuples must have the same structure\")\n            return tuple(recurse(x, y) for x, y in zip(a, b))\n        if isinstance(a, tuple) or isinstance(b, tuple):\n            raise ValueError(\"Tuples must have the same structure\")\n        return a - b\n    return recurse(tup1, tup2)"
    },
    {
        "id":289,
        "response":""
    },
    {
        "id":290,
        "response":"import typing\n\ndef find_Extra(lst: typing.List[int], lst2: typing.List[int], n: int) -> typing.List[int]:\n    if len(lst) != n:\n        raise ValueError(\"Length of lst does not match provided n\")\n    i = j = 0\n    extra_indices = []\n    len_lst = len(lst)\n    len_lst2 = len(lst2)\n    while j < len_lst2:\n        if i < len_lst and lst[i] == lst2[j]:\n            i += 1\n            j += 1\n        elif i < len_lst and lst[i] < lst2[j]:\n            i += 1\n        else:\n            extra_indices.append(j)\n            j += 1\n    return extra_indices"
    },
    {
        "id":291,
        "response":"import math\n\ndef same_Length(n, n2):\n    def digit_count(x):\n        x = abs(int(x))\n        if x == 0:\n            return 1\n        return int(math.log10(x)) + 1\n    return digit_count(n) == digit_count(n2)"
    },
    {
        "id":292,
        "response":"import re\n\ndef remove_spaces(s: str) -> str:\n    return re.sub(r'\\s+', ' ', s).strip()"
    },
    {
        "id":293,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result = []\n    for sub in lst:\n        if isinstance(sub, (list, tuple)) and sub:\n            result.append(sub[-1])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "id":294,
        "response":"import re\n\ndef float_to_tuple(s: str) -> tuple[int, int]:\n    s = s.strip()\n    if not s:\n        raise ValueError(\"Empty string\")\n    match = re.fullmatch(r'([+-]?)(\\d+)(?:\\.(\\d+))?', s)\n    if not match:\n        raise ValueError(f\"Invalid float string: {s}\")\n    sign, int_part_str, frac_part_str = match.groups()\n    int_part = int(int_part_str)\n    if sign == '-':\n        int_part = -int_part\n    frac_part = int(frac_part_str) if frac_part_str else 0\n    return (int_part, frac_part)"
    },
    {
        "id":295,
        "response":""
    },
    {
        "id":296,
        "response":"import typing\n\ndef sort_list_last(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return sorted(lst)"
    },
    {
        "id":297,
        "response":"import re\n\ndef is_Word_Present(s: str, s2: str) -> bool:\n    if not s or not s2:\n        return False\n    pattern = r'\\b' + re.escape(s2) + r'\\b'\n    return re.search(pattern, s, flags=re.IGNORECASE) is not None"
    },
    {
        "id":298,
        "response":"import typing\n\ndef extract_elements(lst: typing.List[typing.Any], n: int) -> typing.List[typing.Any]:\n    if n <= 0:\n        return []\n    return lst[:n]"
    },
    {
        "id":299,
        "response":"import typing\n\ndef check(lst: typing.List[int], n: int) -> bool:\n    if n <= 1:\n        return True\n    sorted_lst = sorted(lst)\n    if lst == sorted_lst:\n        return True\n    swapped = lst[:]\n    swapped[0], swapped[-1] = swapped[-1], swapped[0]\n    return swapped == sorted_lst"
    },
    {
        "id":300,
        "response":"import re\n\ndef match_num(s: str) -> bool:\n    return bool(re.match(r'^\\d+', s))"
    },
    {
        "id":301,
        "response":"import math\n\ndef num_comm_div(n, n2):\n    a, b = abs(n), abs(n2)\n    if a == 0 and b == 0:\n        return []\n    if a == 0:\n        a, b = b, a\n    g = math.gcd(a, b)\n    divisors = set()\n    for i in range(1, int(math.isqrt(g)) + 1):\n        if g % i == 0:\n            divisors.add(i)\n            divisors.add(g \/\/ i)\n    return sorted(divisors)"
    },
    {
        "id":302,
        "response":"def find(n, n2):\n    if n2 == 0:\n        return None\n    return n % n2"
    },
    {
        "id":303,
        "response":"import typing\n\ndef add_consecutive_nums(lst: typing.List[int]) -> typing.List[int]:\n    if not lst or len(lst) < 2:\n        return []\n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] + lst[i + 1])\n    return result"
    },
    {
        "id":304,
        "response":"def sum_Of_Series(n):\n    if n <= 0:\n        return 0\n    return (n * (n + 1) \/\/ 2) ** 2"
    },
    {
        "id":305,
        "response":"import typing\n\ndef re_order(lst: typing.List[int]) -> typing.List[int]:\n    non_zeros = [x for x in lst if x != 0]\n    zeros = [0] * (len(lst) - len(non_zeros))\n    return non_zeros + zeros"
    },
    {
        "id":306,
        "response":"import math\nfrom typing import Union\n\ndef permutation_coefficient(n: int, k: int) -> Union[int, None]:\n    if n < 0 or k < 0:\n        raise ValueError(\"n and k must be non\u2011negative integers\")\n    if k > n:\n        return 0\n    if k == 0 or n == k:\n        return 1\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result"
    },
    {
        "id":307,
        "response":"import typing\n\ndef remove_words(lst: typing.List[typing.Any], remove_lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    remove_set = set(remove_lst)\n    return [item for item in lst if item not in remove_set]"
    },
    {
        "id":308,
        "response":"import typing\n\ndef same_order(lst1: typing.List[typing.Any], lst2: typing.List[typing.Any]) -> bool:\n    common_set = set(lst1) & set(lst2)\n    filtered1 = [x for x in lst1 if x in common_set]\n    filtered2 = [x for x in lst2 if x in common_set]\n    return filtered1 == filtered2"
    },
    {
        "id":309,
        "response":"import typing\n\ndef average_Odd(n: int) -> float:\n    if n <= 0 or n % 2 == 0:\n        raise ValueError(\"n must be a positive odd integer\")\n    count = (n + 1) \/\/ 2\n    total = count * count\n    return total \/ count"
    },
    {
        "id":310,
        "response":"import typing\n\ndef no_of_subsequences(lst: typing.List[int], k: int) -> int:\n    if k <= 1:\n        return 0\n    prod = 1\n    left = 0\n    count = 0\n    for right, value in enumerate(lst):\n        prod *= value\n        while left <= right and prod >= k:\n            prod \/\/= lst[left] if lst[left] != 0 else 1\n            left += 1\n        count += right - left + 1\n    return count"
    },
    {
        "id":311,
        "response":"import math\n\ndef find_Min_Sum(n: int) -> int:\n    if n <= 1:\n        return 0\n    total = 0\n    while n % 2 == 0:\n        total += 2\n        n \/\/= 2\n    p = 3\n    limit = math.isqrt(n) + 1\n    while p <= limit and n > 1:\n        while n % p == 0:\n            total += p\n            n \/\/= p\n            limit = math.isqrt(n) + 1\n        p += 2\n    if n > 1:\n        total += n\n    return total"
    },
    {
        "id":312,
        "response":"import typing\n\ndef count_element_freq(tup: tuple) -> dict:\n    freq: typing.Dict[typing.Any, int] = {}\n    stack = [tup]\n    while stack:\n        current = stack.pop()\n        for item in current:\n            if isinstance(item, tuple):\n                stack.append(item)\n            else:\n                freq[item] = freq.get(item, 0) + 1\n    return freq"
    },
    {
        "id":313,
        "response":"import typing\n\ndef add_str(tup: typing.Tuple[typing.Any, ...], s: str) -> typing.List[str]:\n    return [str(item) + s for item in tup]"
    },
    {
        "id":314,
        "response":"import typing\n\ndef sum_elements(tuples: typing.List[typing.Tuple[typing.Any, ...]]) -> typing.Any:\n    total = 0\n    for t in tuples:\n        total += sum(t)\n    return total"
    },
    {
        "id":315,
        "response":"import typing\n\ndef modular_sum(lst: typing.List[int], n: int, m: int) -> bool:\n    if m == 0:\n        return False\n    reachable = set()\n    for num in lst[:n]:\n        new_rems = { (num % m) }\n        for r in reachable:\n            new_rems.add((r + num) % m)\n        reachable.update(new_rems)\n        if 0 in reachable:\n            return True\n    return False"
    },
    {
        "id":316,
        "response":"import typing\n\ndef radix_sort(lst: typing.List[int]) -> typing.List[int]:\n    if not lst:\n        return []\n    positives = [x for x in lst if x >= 0]\n    negatives = [-x for x in lst if x < 0]\n\n    def _radix_sort(nums: typing.List[int]) -> typing.List[int]:\n        if not nums:\n            return []\n        max_num = max(nums)\n        exp = 1\n        base = 10\n        while max_num \/\/ exp > 0:\n            output = [0] * len(nums)\n            count = [0] * base\n            for n in nums:\n                count[(n \/\/ exp) % base] += 1\n            for i in range(1, base):\n                count[i] += count[i - 1]\n            for n in reversed(nums):\n                idx = (n \/\/ exp) % base\n                count[idx] -= 1\n                output[count[idx]] = n\n            nums = output\n            exp *= base\n        return nums\n\n    sorted_positives = _radix_sort(positives)\n    sorted_negatives = _radix_sort(negatives)\n    sorted_negatives = [-x for x in reversed(sorted_negatives)]\n    return sorted_negatives + sorted_positives"
    },
    {
        "id":317,
        "response":"import typing\n\ndef largest_pos(lst: typing.List[float]) -> typing.Optional[float]:\n    max_val = None\n    for num in lst:\n        if isinstance(num, (int, float)) and num > 0:\n            if max_val is None or num > max_val:\n                max_val = num\n    return max_val"
    },
    {
        "id":318,
        "response":"import math\n\ndef sqrt_root(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Negative input not allowed\")\n    return math.isqrt(n)"
    },
    {
        "id":319,
        "response":"import math\n\ndef volume_tetrahedron(n):\n    if n <= 0:\n        return 0.0\n    return (n ** 3) \/ (6 * math.sqrt(2))"
    },
    {
        "id":320,
        "response":"import math\nfrom typing import List\n\ndef get_lcm(lst: List[int]) -> int:\n    if not lst:\n        return 0\n    lcm_val = abs(lst[0])\n    for num in lst[1:]:\n        if num == 0:\n            return 0\n        lcm_val = lcm_val * abs(num) \/\/ math.gcd(lcm_val, abs(num))\n    return lcm_val"
    },
    {
        "id":321,
        "response":"import typing\n\ndef check_scalene(a: float, b: float, c: float) -> bool:\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return a != b and b != c and a != c\n\ncheck_isosceles = check_scalene"
    },
    {
        "id":322,
        "response":"import typing\n\ndef lbs(arr: typing.List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    lis = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i] and lis[j] + 1 > lis[i]:\n                lis[i] = lis[j] + 1\n    lds = [1] * n\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i] and lds[j] + 1 > lds[i]:\n                lds[i] = lds[j] + 1\n    max_len = 0\n    for i in range(n):\n        current = lis[i] + lds[i] - 1\n        if current > max_len:\n            max_len = current\n    return max_len"
    },
    {
        "id":323,
        "response":"import re\nfrom typing import Callable\n\ndef check_string(s: str) -> bool:\n    has_upper: Callable[[str], bool] = lambda x: any(c.isupper() for c in x)\n    has_lower: Callable[[str], bool] = lambda x: any(c.islower() for c in x)\n    has_digit: Callable[[str], bool] = lambda x: any(c.isdigit() for c in x)\n    length_check: Callable[[str], bool] = lambda x: len(x) == 8\n    return has_upper(s) and has_lower(s) and has_digit(s) and length_check(s)"
    },
    {
        "id":324,
        "response":"import typing\n\ndef max_sum_increasing_subsequence(lst: typing.List[int], n: int) -> int:\n    if n <= 0 or not lst:\n        return 0\n    dp = lst[:n]\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j] and dp[i] < dp[j] + lst[i]:\n                dp[i] = dp[j] + lst[i]\n    return max(dp)"
    },
    {
        "id":325,
        "response":"import math\nfrom typing import List, Tuple\n\ndef parallel_lines(line1: List[Tuple[float, float]], line2: List[Tuple[float, float]]) -> bool:\n    if len(line1) < 2 or len(line2) < 2:\n        return False\n    x1, y1 = line1[0]\n    x2, y2 = line1[1]\n    x3, y3 = line2[0]\n    x4, y4 = line2[1]\n    dx1 = x2 - x1\n    dy1 = y2 - y1\n    dx2 = x4 - x3\n    dy2 = y4 - y3\n    if (dx1 == 0 and dy1 == 0) or (dx2 == 0 and dy2 == 0):\n        return False\n    return math.isclose(dx1 * dy2 - dy1 * dx2, 0.0, abs_tol=1e-9)"
    },
    {
        "id":326,
        "response":"import re\nfrom typing import List\n\ndef capitalize_first_last_letters(s: str) -> str:\n    def transform(word: str) -> str:\n        if not word:\n            return word\n        if len(word) == 1:\n            return word.upper()\n        return word[0].upper() + word[1:-1] + word[-1].upper()\n    words: List[str] = re.split(r'(\\s+)', s)\n    return ''.join(transform(w) if not w.isspace() else w for w in words)"
    },
    {
        "id":327,
        "response":"import collections\nfrom typing import List, Tuple\n\ndef get_pairs_count(lst: List[int], n: int, n2: int) -> Tuple[int, int]:\n    freq = collections.Counter(lst)\n    def count_pairs(target: int) -> int:\n        count = 0\n        for num in list(freq.keys()):\n            complement = target - num\n            if complement not in freq:\n                continue\n            if complement == num:\n                count += freq[num] * (freq[num] - 1) \/\/ 2\n            elif complement > num:\n                count += freq[num] * freq[complement]\n        return count\n    return count_pairs(n), count_pairs(n2)"
    },
    {
        "id":328,
        "response":"import typing\n\ndef min_length(lst: typing.List[typing.Any]) -> typing.Any:\n    if not lst:\n        return None\n    min_sub = lst[0]\n    try:\n        min_len = len(min_sub)\n    except TypeError:\n        min_len = 0\n    for sub in lst[1:]:\n        try:\n            cur_len = len(sub)\n        except TypeError:\n            cur_len = 0\n        if cur_len < min_len:\n            min_len = cur_len\n            min_sub = sub\n    return min_sub"
    },
    {
        "id":329,
        "response":"import typing\n\ndef jacobsthal_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b"
    },
    {
        "id":330,
        "response":"import typing\n\ndef negative_count(lst: typing.List[int]) -> float:\n    if not lst:\n        return 0.0\n    negative = sum(1 for x in lst if x < 0)\n    return negative \/ len(lst)"
    },
    {
        "id":331,
        "response":"import typing\n\ndef min_coins(lst: typing.List[int], n: int, n2: int) -> int:\n    if n2 == 0:\n        return 0\n    INF = n2 + 1\n    dp = [INF] * (n2 + 1)\n    dp[0] = 0\n    for amount in range(1, n2 + 1):\n        for coin in lst:\n            if coin <= amount:\n                prev = dp[amount - coin] + 1\n                if prev < dp[amount]:\n                    dp[amount] = prev\n    return dp[n2] if dp[n2] != INF else -1"
    },
    {
        "id":332,
        "response":"import collections\n\ndef check_permutation(s, s2):\n    if len(s) != len(s2):\n        return False\n    return collections.Counter(s) == collections.Counter(s2)"
    },
    {
        "id":333,
        "response":"import typing\n\ndef remove_datatype(tup: tuple, param: typing.Union[type, tuple]) -> tuple:\n    return tuple(item for item in tup if not isinstance(item, param))"
    },
    {
        "id":334,
        "response":"import typing\n\ndef search_literal(s: str, pattern: str) -> typing.List[int]:\n    if not pattern:\n        return []\n    positions = []\n    start = 0\n    while True:\n        idx = s.find(pattern, start)\n        if idx == -1:\n            break\n        positions.append(idx)\n        start = idx + 1\n    return positions"
    },
    {
        "id":335,
        "response":"import math\n\ndef topbottom_surfacearea(n):\n    return math.pi * n * n"
    },
    {
        "id":336,
        "response":"import typing\n\ndef nth_items(lst: typing.List[typing.Any], n: int) -> typing.Any:\n    if not isinstance(lst, list):\n        raise TypeError(\"First argument must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"Index must be an integer\")\n    if n < 0 or n >= len(lst):\n        raise IndexError(\"list index out of range\")\n    return lst[n]"
    },
    {
        "id":337,
        "response":"import re\nfrom typing import Optional\n\ndef first_repeated_word(s: str) -> Optional[str]:\n    words = re.findall(r\"\\b\\w+\\b\", s.lower())\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None"
    },
    {
        "id":338,
        "response":"import typing\n\ndef string_list_to_tuple(lst: typing.List[str]) -> tuple:\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    return tuple(lst)"
    },
    {
        "id":339,
        "response":"import typing\n\ndef basesnum_coresspondingnum(lst: typing.List[float], lst2: typing.List[float]) -> typing.List[float]:\n    return list(map(pow, lst, lst2))"
    },
    {
        "id":340,
        "response":"import collections\n\ndef find_Diff(lst, n):\n    if not lst or n == 0:\n        return 0\n    freq = collections.Counter(lst)\n    frequencies = list(freq.values())\n    return max(frequencies) - min(frequencies)"
    },
    {
        "id":341,
        "response":"import math\n\ndef check_abundant(n: int) -> bool:\n    if n <= 1:\n        return False\n    total = 1\n    limit = int(math.isqrt(n))\n    for i in range(2, limit + 1):\n        if n % i == 0:\n            total += i\n            other = n \/\/ i\n            if other != i:\n                total += other\n        if total > n:\n            return True\n    return total > n"
    },
    {
        "id":342,
        "response":"import re\n\ndef fill_spaces(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return re.sub(r\"[ ,\\.]\", \":\", s)"
    },
    {
        "id":343,
        "response":"import sys\n\ndef count_digits(n: int, n2: int) -> None:\n    total = n + n2\n    digit_count = len(str(abs(total)))\n    print(digit_count)"
    },
    {
        "id":344,
        "response":"import typing\n\ndef flatten_tuple(lst: typing.List[tuple]) -> str:\n    flat_elements = []\n    for item in lst:\n        if isinstance(item, (list, tuple)):\n            flat_elements.extend(item)\n        else:\n            flat_elements.append(item)\n    return \" \".join(map(str, flat_elements))"
    },
    {
        "id":345,
        "response":"import typing\n\ndef toggle_F_and_L_bits(n: int) -> int:\n    if n == 0:\n        return 1\n    msb_pos = n.bit_length() - 1\n    mask = (1 << msb_pos) | 1\n    return n ^ mask"
    },
    {
        "id":346,
        "response":"import typing\n\ndef last_occurence_char(s: str, ch: str) -> int:\n    return s.rfind(ch)"
    },
    {
        "id":347,
        "response":"import typing\n\ndef Total_Hamming_Distance(n: int) -> int:\n    total = 0\n    for i in range(n):\n        total += (i ^ (i + 1)).bit_count()\n    return total"
    },
    {
        "id":348,
        "response":"import bisect\n\ndef longest_increasing_subsequence(lst):\n    if not lst:\n        return 0\n    tails = []\n    for num in lst:\n        idx = bisect.bisect_left(tails, num)\n        if idx == len(tails):\n            tails.append(num)\n        else:\n            tails[idx] = num\n    return len(tails)"
    },
    {
        "id":349,
        "response":"import typing\n\ndef odd_Num_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    total = 0\n    for k in range(1, n + 1):\n        odd = 2 * k - 1\n        total += odd ** 5\n    return total"
    },
    {
        "id":350,
        "response":"import typing\n\ndef find_Max(lst: typing.List[int], low: int, high: int) -> typing.Optional[int]:\n    if not lst:\n        return None\n    n = len(lst)\n    while low <= high:\n        if lst[low] <= lst[high]:\n            return lst[high]\n        mid = (low + high) \/\/ 2\n        nxt = (mid + 1) % n\n        prev = (mid - 1 + n) % n\n        if lst[mid] >= lst[nxt] and lst[mid] >= lst[prev]:\n            return lst[mid]\n        elif lst[mid] >= lst[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None"
    },
    {
        "id":351,
        "response":"import typing\n\ndef extract_column(lst: typing.List[typing.List[typing.Any]], n: int) -> typing.List[typing.Any]:\n    if n < 0:\n        return []\n    return [row[n] for row in lst if isinstance(row, list) and len(row) > n]"
    },
    {
        "id":352,
        "response":"import typing\n\ndef Seq_Linear(lst: typing.List[float]) -> bool:\n    if len(lst) < 2:\n        return True\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i - 1] != diff:\n            return False\n    return True"
    },
    {
        "id":353,
        "response":"import typing\n\ndef tuple_to_float(tup: tuple) -> float:\n    if not tup:\n        return 0.0\n    try:\n        return float(''.join(str(item) for item in tup))\n    except (ValueError, TypeError):\n        raise ValueError(\"Tuple elements cannot be converted to a float\")"
    },
    {
        "id":354,
        "response":"import typing\n\ndef Split(lst: typing.List[typing.Any]) -> typing.List[int]:\n    result = []\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool) and item % 2 != 0:\n            result.append(item)\n    return result"
    },
    {
        "id":355,
        "response":"import typing\n\ndef difference(n: int) -> int:\n    if n <= 0:\n        return 0\n    s = n * (n + 1) \/\/ 2\n    return s * s - s"
    },
    {
        "id":356,
        "response":"import typing\n\ndef find_Odd_Pair(lst: typing.List[int], n: int) -> typing.Optional[typing.Tuple[int, int]]:\n    odd_counts = {}\n    for num in lst:\n        if num % 2 != 0:\n            odd_counts[num] = odd_counts.get(num, 0) + 1\n    odd_set = set(odd_counts.keys())\n    for x in odd_set:\n        y = x ^ n\n        if y % 2 == 0:\n            continue\n        if y in odd_set:\n            if x != y:\n                return (x, y)\n            if odd_counts[x] > 1:\n                return (x, y)\n    return None"
    },
    {
        "id":357,
        "response":"import typing\n\ndef toggle_string(s: str) -> str:\n    return s.swapcase()\n"
    },
    {
        "id":358,
        "response":"import typing\n\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    n1, n2 = abs(n1), abs(n2)\n    distance = 0\n    while n1 > 0 or n2 > 0:\n        d1 = n1 % 10\n        d2 = n2 % 10\n        distance += abs(d1 - d2)\n        n1 \/\/= 10\n        n2 \/\/= 10\n    return distance"
    },
    {
        "id":359,
        "response":"import typing\n\ndef max_sub_array_sum(lst: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    max_current = max_global = lst[0]\n    for i in range(1, n):\n        max_current = max(lst[i], max_current + lst[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global"
    },
    {
        "id":360,
        "response":""
    },
    {
        "id":361,
        "response":"import typing\n\ndef assign_elements(lst: typing.List[typing.Tuple]) -> dict:\n    if not lst:\n        return {}\n    if len(lst) == 1:\n        a, b = lst[0]\n        return {a: b, b: a}\n    result = {}\n    n = len(lst)\n    for i, (first, second) in enumerate(lst):\n        next_first, next_second = lst[(i + 1) % n]\n        result[first] = next_first\n        result[second] = next_second\n    return result"
    },
    {
        "id":362,
        "response":"import typing\n\ndef Find_Max_Length(lst: typing.List[typing.Any]) -> int:\n    max_len = 0\n    for item in lst:\n        try:\n            length = len(item)\n        except TypeError:\n            continue\n        if length > max_len:\n            max_len = length\n    return max_len"
    },
    {
        "id":363,
        "response":"import re\n\ndef extract_values(s: str):\n    matches = re.findall(r'\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'', s)\n    result = []\n    for double, single in matches:\n        if double:\n            result.append(double)\n        else:\n            result.append(single)\n    return result"
    },
    {
        "id":364,
        "response":"import typing\n\ndef count_Pairs(lst: typing.List[int], n: int) -> int:\n    odd_count = 0\n    limit = min(n, len(lst))\n    for i in range(limit):\n        if lst[i] % 2 != 0:\n            odd_count += 1\n    return odd_count * (odd_count - 1) \/\/ 2"
    },
    {
        "id":365,
        "response":"import typing\n\ndef split(s: str) -> list[str]:\n    if not isinstance(s, str):\n        return []\n    return list(s)"
    },
    {
        "id":366,
        "response":"def sum_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n % 10\n        n \/\/= 10\n    return total"
    },
    {
        "id":367,
        "response":"import typing\n\ndef issort_list(lst: typing.List[typing.Any]) -> bool:\n    n = len(lst)\n    if n < 2:\n        return True\n    for i in range(n - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"
    },
    {
        "id":368,
        "response":"import typing\n\ndef empty_list(n: int) -> typing.List[typing.Dict]:\n    if n <= 0:\n        return []\n    return [{} for _ in range(n)]"
    },
    {
        "id":369,
        "response":"import typing\n\ndef sort_sublists(lst: typing.List[str]) -> typing.List[str]:\n    return [''.join(sorted(s)) for s in lst]"
    },
    {
        "id":370,
        "response":"import typing\n\ndef remove_words(lst: typing.List[str], lst2: typing.List[str]) -> typing.List[str]:\n    if not lst or not lst2:\n        return lst.copy()\n    result = []\n    for word in lst:\n        if not any(sub in word for sub in lst2):\n            result.append(word)\n    return result"
    },
    {
        "id":371,
        "response":"import typing\n\ndef max_sum_pair_diff_lessthan_K(lst: typing.List[int], n: int, k: int) -> typing.Optional[int]:\n    if n < 2:\n        return None\n    lst.sort()\n    max_sum = None\n    j = 0\n    for i in range(n):\n        while j < n and lst[j] - lst[i] < k:\n            j += 1\n        # all indices from i+1 to j-1 satisfy the condition\n        for idx in range(i + 1, j):\n            cur_sum = lst[i] + lst[idx]\n            if max_sum is None or cur_sum > max_sum:\n                max_sum = cur_sum\n    return max_sum"
    },
    {
        "id":372,
        "response":"import collections\nfrom typing import List\n\ndef two_unique_nums(lst: List[int]) -> List[int]:\n    freq = collections.Counter(lst)\n    result = []\n    for num in lst:\n        if freq[num] == 1:\n            result.append(num)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "id":373,
        "response":"import functools\nimport operator\nfrom typing import List, Union\n\ndef unique_product(lst: List[Union[int, float]]) -> Union[int, float]:\n    unique_vals = set(lst)\n    if not unique_vals:\n        return 1\n    return functools.reduce(operator.mul, unique_vals, 1)"
    },
    {
        "id":374,
        "response":"import math\n\ndef surfacearea_cylinder(radius, height):\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    return 2 * math.pi * radius * (radius + height)"
    },
    {
        "id":375,
        "response":""
    },
    {
        "id":376,
        "response":"import typing\n\ndef is_Sub_Array(lst: typing.List[int], lst2: typing.List[int], n: int, n2: int) -> bool:\n    if n2 == 0:\n        return True\n    if n2 > n:\n        return False\n    for i in range(n - n2 + 1):\n        match = True\n        for j in range(n2):\n            if lst[i + j] != lst2[j]:\n                match = False\n                break\n        if match:\n            return True\n    return False"
    },
    {
        "id":377,
        "response":"import math\n\ndef last_Digit_Factorial(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Negative input not allowed\")\n    if n >= 5:\n        return 0\n    return math.prod(range(1, n + 1)) % 10"
    },
    {
        "id":378,
        "response":"import itertools\nfrom typing import List, Any\n\ndef interleave_lists(*lists: List[Any]) -> List[Any]:\n    if not lists:\n        return []\n    length = len(lists[0])\n    if any(len(lst) != length for lst in lists):\n        raise ValueError(\"All lists must have the same length\")\n    return list(itertools.chain.from_iterable(zip(*lists)))"
    },
    {
        "id":379,
        "response":"import itertools\nfrom typing import Tuple, Any\n\ndef find_dissimilar(tup1: Tuple[Any, ...], tup2: Tuple[Any, ...]) -> Tuple[Tuple[Any, Any], ...]:\n    max_len = max(len(tup1), len(tup2))\n    result = []\n    for i in range(max_len):\n        if i < len(tup1) and i < len(tup2):\n            if tup1[i] != tup2[i]:\n                result.append((tup1[i], tup2[i]))\n        elif i < len(tup1):\n            result.append((tup1[i], None))\n        else:\n            result.append((None, tup2[i]))\n    return tuple(result)"
    },
    {
        "id":380,
        "response":"import typing\n\ndef extract_even(tup: typing.Any) -> tuple:\n    result = []\n    stack = [tup]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, (list, tuple)):\n            for item in reversed(current):\n                stack.append(item)\n        elif isinstance(current, int) and current % 2 == 0:\n            result.append(current)\n    result.reverse()\n    return tuple(result)"
    },
    {
        "id":381,
        "response":"import math\n\ndef surface_Area(side_length, slant_height):\n    if side_length <= 0 or slant_height <= 0:\n        return 0\n    base_area = side_length ** 2\n    lateral_area = 2 * side_length * slant_height\n    return base_area + lateral_area"
    },
    {
        "id":382,
        "response":"def my_dict(dct):\n    return len(dct) == 0"
    },
    {
        "id":383,
        "response":"import math\n\ndef catalan_number(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return math.comb(2 * n, n) \/\/ (n + 1)"
    },
    {
        "id":384,
        "response":"import re\n\ndef find_adjectives(sentence: str):\n    pattern = r'\\b\\w+(?:able|ible|al|ful|ic|ive|ous|ish|y|est|er|less)\\b'\n    matches = re.finditer(pattern, sentence, flags=re.IGNORECASE)\n    return [(m.group(), m.start(), m.end()) for m in matches]"
    },
    {
        "id":385,
        "response":"import heapq\nfrom typing import List, Any\n\ndef expensive_items(lst: List[Any], n: int) -> List[Any]:\n    if n <= 0 or not lst:\n        return []\n    if all(isinstance(x, (int, float)) for x in lst):\n        return heapq.nlargest(n, lst)\n    try:\n        return heapq.nlargest(n, lst, key=lambda x: getattr(x, 'price', x))\n    except Exception:\n        return heapq.nlargest(n, lst)"
    },
    {
        "id":386,
        "response":"import typing\n\ndef split_Arr(lst: typing.List[typing.Any], n: int, n2: int) -> typing.List[typing.Any]:\n    length = len(lst)\n    if n < 0:\n        n = 0\n    if n2 < 0:\n        n2 = 0\n    if n > length:\n        n = length\n    if n2 > length:\n        n2 = length\n    if n > n2:\n        n, n2 = n2, n\n    first = lst[:n]\n    middle = lst[n:n2]\n    last = lst[n2:]\n    return middle + last + first"
    },
    {
        "id":387,
        "response":"def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "id":388,
        "response":"import typing\n\ndef big_diff(lst: typing.List[float]) -> float:\n    if not lst:\n        return 0.0\n    max_val = lst[0]\n    min_val = lst[0]\n    for num in lst[1:]:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val - min_val"
    },
    {
        "id":389,
        "response":"import math\n\ndef perfect_squares(n, n2):\n    low, high = (n, n2) if n <= n2 else (n2, n)\n    start = math.isqrt(low)\n    if start * start < low:\n        start += 1\n    end = math.isqrt(high)\n    return [i * i for i in range(start, end + 1)]"
    },
    {
        "id":390,
        "response":"import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)"
    },
    {
        "id":391,
        "response":"import typing\n\ndef swap_List(lst: typing.List) -> typing.List:\n    if not lst:\n        return lst\n    if len(lst) == 1:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":392,
        "response":"import math\n\ndef sum_Of_product(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return math.comb(2 * n, n)"
    },
    {
        "id":393,
        "response":"import re\nfrom typing import List\n\ndef removezero_ip(s: str) -> str:\n    s = s.strip()\n    parts: List[str] = s.split('.')\n    cleaned_parts = [str(int(part)) if part.isdigit() else part for part in parts]\n    return '.'.join(cleaned_parts)"
    },
    {
        "id":394,
        "response":"import typing\n\ndef diff_even_odd(lst: typing.List[int]) -> int:\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if isinstance(num, int):\n            if num % 2 == 0:\n                even_sum += num\n            else:\n                odd_sum += num\n    return even_sum - odd_sum"
    },
    {
        "id":395,
        "response":"import typing\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    count01 = 0\n    count10 = 0\n    for a, b in zip(s, s2):\n        if a == b:\n            continue\n        if a == '0' and b == '1':\n            count01 += 1\n        elif a == '1' and b == '0':\n            count10 += 1\n        else:\n            return -1\n    if count01 != count10:\n        return -1\n    return count01"
    },
    {
        "id":396,
        "response":"import typing\n\ndef tuple_size(tup: typing.Tuple[typing.Any, ...]) -> int:\n    return len(tup)"
    },
    {
        "id":397,
        "response":"import typing\n\ndef find_kth(arr1: typing.List[int], arr2: typing.List[int], n: int, m: int, k: int) -> typing.Optional[int]:\n    if n > m:\n        arr1, arr2 = arr2, arr1\n        n, m = m, n\n    if n == 0:\n        return arr2[k - 1] if 0 < k <= m else None\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    idx1 = idx2 = 0\n    while True:\n        if idx1 == n:\n            return arr2[idx2 + k - 1] if 0 < k <= m - idx2 else None\n        if idx2 == m:\n            return arr1[idx1 + k - 1] if 0 < k <= n - idx1 else None\n        if k == 1:\n            return min(arr1[idx1], arr2[idx2])\n        step = k \/\/ 2\n        new_idx1 = min(idx1 + step, n) - 1\n        new_idx2 = min(idx2 + step, m) - 1\n        if arr1[new_idx1] <= arr2[new_idx2]:\n            eliminated = new_idx1 - idx1 + 1\n            k -= eliminated\n            idx1 = new_idx1 + 1\n        else:\n            eliminated = new_idx2 - idx2 + 1\n            k -= eliminated\n            idx2 = new_idx2 + 1"
    },
    {
        "id":398,
        "response":"import math\n\ndef armstrong_number(n: int) -> bool:\n    if n < 0:\n        return False\n    digits = str(n)\n    power = len(digits)\n    total = sum(int(d) ** power for d in digits)\n    return total == n"
    },
    {
        "id":399,
        "response":"import typing\n\ndef sum_average(n: int) -> typing.Tuple[int, float]:\n    if n <= 0:\n        return 0, 0.0\n    total = n * (n + 1) \/\/ 2\n    avg = total \/ n\n    return total, avg"
    },
    {
        "id":400,
        "response":"def is_Even(n: int) -> bool:\n    return (n & 1) == 0"
    }
]