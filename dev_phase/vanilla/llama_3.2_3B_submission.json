[
    {
        "id":1,
        "response":" from itertools import combinations\n\n     def max_chain_length(lst, n):\n        max_len = 0\n        for r in range(1, n+1):\n            for combo in combinations(lst, r):\n                if len(''.join(combo)) > max_len:\n                    max_len = len(''.join(combo))\n        return max_len"
    },
    {
        "id":2,
        "response":" from collections import Counter\n\ndef first_repeated_char(s):\n    char_count = Counter(s)\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    return None"
    },
    {
        "id":3,
        "response":" from typing import List\n\n     def get_ludic(n: int) -> int:\n        for i in range(n, 0, -1):\n            if i % 2 == 0:\n                return i\n        return n"
    },
    {
        "id":4,
        "response":" from typing import List\n\n     def reverse_words(s: str) -> str:\n        return ' '.join(s.split()[::-1])"
    },
    {
        "id":5,
        "response":" from typing import Any\n\n     def prime_num(n: Any) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "id":6,
        "response":" from math import pi\n\ndef radian_degree(n):\n  return n * (180 \/ pi)"
    },
    {
        "id":7,
        "response":" from re import search\n     from typing import Tuple\n\n     def find_literals(s: str, s2: str) -> Tuple[int, int]:\n        match = search(r'\\b' + re.escape(s2) + r'\\b', s)\n        if match:\n            return (match.start(), match.end())\n        else:\n            return (-1, -1)"
    },
    {
        "id":8,
        "response":" from collections import deque\n\ndef bell_number(n):\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    q = deque([0, 1])\n    while len(q) > 0:\n        temp = q.popleft()\n        bell[temp + 1] += bell[temp]\n        q.append(temp + 1)\n        q.append(temp)\n    return bell[n]"
    },
    {
        "id":9,
        "response":" def floor_Min(*args):\n        return min(args)"
    },
    {
        "id":10,
        "response":" from typing import List\n\n     def remove_kth_element(lst: List[int], k: int) -> List[int]:\n        return lst[:k-1] + lst[k:]"
    },
    {
        "id":11,
        "response":" def max_of_nth(lst, n):\n        return max(x[n-1] for x in lst)"
    },
    {
        "id":12,
        "response":" from typing import List\n\n     def merge(lst: List) -> List:\n         return [lst[0]] + lst[1:-1] + [lst[-1]]"
    },
    {
        "id":13,
        "response":" def maximum_value(lst):\n        return max(lst, key=lambda x: len(x))"
    },
    {
        "id":14,
        "response":" from typing import List\n\n     def cummulative_sum(lst: List[int]) -> int:\n         return sum(lst)"
    },
    {
        "id":15,
        "response":" from typing import Tuple\n\n     def average_tuple(tup: Tuple[int, int]) -> float:\n        return (tup[0] + tup[1]) \/ 2"
    },
    {
        "id":16,
        "response":" from typing import Tuple\n\n     def tuple_modulo(tup, tup2):\n        return tuple(i % j for i, j in zip(tup, tup2))"
    },
    {
        "id":17,
        "response":" from math import sqrt\n     from typing import Tuple\n\n     def min_jumps(n: int, n2: int, n3: int) -> int:\n        return int(sqrt(n3) + sqrt(n2) + sqrt(n))"
    },
    {
        "id":18,
        "response":" from itertools import zip_longest\n     from operator import truediv\n\n     def div_list(lst, lst2):\n        result = []\n        for i, j in zip_longest(lst, lst2, fillvalue=0):\n            result.append(str(truediv(i, j)) if j != 0 else 'inf')\n        return result"
    },
    {
        "id":19,
        "response":" from typing import List\n\n     def move_num(s: str) -> str:\n        return ''.join(sorted(s))"
    },
    {
        "id":20,
        "response":" def largest_subset(lst, n):\n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n\n        def is_divisible(a, b):\n            return a % b == 0\n\n        def largest_subset_recursive(lst, n):\n            if len(lst) == 0:\n                return []\n            elif len(lst) == 1:\n                return lst\n            else:\n                max_len = 0\n                max_subset = []\n                for i in range(len(lst)):\n                    for j in range(i + 1, len(lst) + 1):\n                        subset = lst[i:j]\n                        if is_divisible(subset[0], n) and all(is_divisible(x, n) for x in subset):\n                            if len(subset) > max_len:\n                                max_len = len(subset)\n                                max_subset = subset\n                return max_subset\n\n        return largest_subset_recursive(lst, n)"
    },
    {
        "id":21,
        "response":" from typing import List\n\n     def increment_numerics(lst: List[int], n: int) -> List[int]:\n         return [i + n for i in lst]"
    },
    {
        "id":22,
        "response":" from typing import List\n\n     def get_median(lst: List[int], lst2: List[int], n: int) -> float:\n        lst = sorted(lst)\n        lst2 = sorted(lst2)\n        merged = sorted(lst + lst2)\n        return merged[n - 1]"
    },
    {
        "id":23,
        "response":" from typing import List\n\n     def nth_nums(lst: List[int], n: int) -> int:\n        return lst[n-1]**n"
    },
    {
        "id":24,
        "response":" from typing import List\n\n     def is_upper(s: str) -> bool:\n        return s == s.upper()"
    },
    {
        "id":25,
        "response":" from typing import List\n\n     def swap_list(lst: List) -> List:\n        if len(lst) < 2:\n            return lst\n        lst[0], lst[-1] = lst[-1], lst[0]\n        return lst"
    },
    {
        "id":26,
        "response":" from math import pi, sin\nfrom typing import Tuple\n\ndef triangle_area(n: int) -> Tuple[float, float]:\n    return (n * n) \/ (4 * pi), (n * sin(2 * pi \/ n))"
    },
    {
        "id":27,
        "response":" from typing import List\n\n     def find_First_Missing(lst: List[int], n: int, n2: int) -> int:\n        set1 = set(lst)\n        set2 = set(range(1, n2+1))\n        for i in set1:\n            if i not in set2:\n                return i\n        return n2 + 1"
    },
    {
        "id":28,
        "response":" from typing import List\n\n     def replace_spaces(s: str) -> str:\n        return s.replace(' ', '*')"
    },
    {
        "id":29,
        "response":" from typing import List\n\n     def find_even_numbers(lst: List[int]) -> List[int]:\n         return [num for num in lst if num % 2 == 0]"
    },
    {
        "id":30,
        "response":" from typing import Tuple\n\ndef get_coordinates(tup: Tuple[Tuple[int, int], Tuple[int, int]]) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n        return (tup[0], tup[1])"
    },
    {
        "id":31,
        "response":" from re import sub\n\n     def replace_spaces(s):\n        return sub(' +', lambda x: {' ': x.group(1), '\\n': x.group(1)}, s)"
    },
    {
        "id":32,
        "response":" from typing import List\n\n     def move_zero(lst: List[int]) -> List[int]:\n         return [i for i in lst if i != 0] + [i for i in lst if i == 0]"
    },
    {
        "id":33,
        "response":" from itertools import combinations\n\n     def pair_OR_Sum(lst, n):\n        return [sum(x ^ y for x, y in combinations(lst, 2)) for _ in range(n)]"
    },
    {
        "id":34,
        "response":" from typing import List\n\n     def even_Power_Sum(n: int) -> int:\n         return sum(i**4 for i in range(n) if i % 2 == 0)"
    },
    {
        "id":35,
        "response":" from heapq import heapify, heappop, heappush\n     def heapify(lst):\n         heapify(lst)\n         while len(lst) > 1:\n             heappop(lst)\n     def heap_sort(lst):\n         heapify(lst)\n         while len(lst) > 1:\n             heappop(lst)"
    },
    {
        "id":36,
        "response":" from sympy import symbols, Eq, solve\n\n     def Check_Solution(n, n2, n3):\n        x, y, z = symbols('x y z')\n        eq1 = Eq(n*x + y + z, n2)\n        eq2 = Eq(x + n*y + z, n3)\n        eq3 = Eq(x + y + n*z, n2)\n        eq4 = Eq(x + y + z, n3)\n        solution = solve((eq1, eq2, eq3, eq4), (x, y, z))\n        return solution"
    },
    {
        "id":37,
        "response":" def no_profit_noloss(n, n2):\n        if n > n2:\n            return False\n        return n == n2"
    },
    {
        "id":38,
        "response":" from typing import List\n\n     def wind_chill(temp: float, wind_speed: float) -> float:\n        return -42.379 + 2.04901523 * temp + 10.14333127 * wind_speed + 0.22475541 * temp * wind_speed - 0.00683783 * temp**2 - 0.05481717 * wind_speed**2 + 0.00122874 * temp**2 * wind_speed + 0.00085282 * temp**3 - 0.00000199 * wind_speed**3"
    },
    {
        "id":39,
        "response":" from typing import List\n\ndef sample_nam(lst: List[str]) -> int:\n        return sum(len(name) for name in lst if name[0].lower() > 'a')"
    },
    {
        "id":40,
        "response":" from typing import List\n\n     def remove_parenthesis(lst: List[str]) -> List[str]:\n         return [s.replace(\"(\", \"\").replace(\")\", \"\") for s in lst]"
    },
    {
        "id":41,
        "response":" from typing import List\n\n     def is_nonagonal(n: int) -> int:\n        return n - 1"
    },
    {
        "id":42,
        "response":" from typing import List\n\n     def remove_similar_rows(matrix: List[List[int]]) -> List[List[int]]:\n         unique_rows = []\n         unique_rows_set = set()\n         for row in matrix:\n             row_tuple = tuple(row)\n             if row_tuple not in unique_rows_set:\n                 unique_rows.append(row)\n                 unique_rows_set.add(row_tuple)\n         return unique_rows"
    },
    {
        "id":43,
        "response":" from re import search\n\ndef text_match_wordz_middle(text):\n    return bool(search(r'\\b\\w*z\\w*\\b', text))"
    },
    {
        "id":44,
        "response":" from typing import List\n\n     def reverse_array_upto_k(lst: List[int], k: int) -> List[int]:\n         return lst[-k:] + lst[:-k]"
    },
    {
        "id":45,
        "response":" from typing import List\n\n     def find_k_product(lst: List[int], k: int) -> int:\n         return lst[k-1]**len(lst)"
    },
    {
        "id":46,
        "response":" from math import ceil\n\ndef No_of_cubes(n, n2):\n  return (n2\/\/n)**3"
    },
    {
        "id":47,
        "response":" from typing import List\n\n     def split_upperstring(s: str) -> List[str]:\n        return [''.join(c for c in s if c.isupper())]"
    },
    {
        "id":48,
        "response":" from typing import List\n\n     def exchange_elements(lst: List[int]) -> List[int]:\n         return [lst[i] + lst[-i-1] for i in range(len(lst))]"
    },
    {
        "id":49,
        "response":" def sum_Range_list(lst, n, n2):\n        return sum(i for i in range(n, n2) if i in lst)"
    },
    {
        "id":50,
        "response":" from typing import List\n\n     def are_Equal(lst: List[int], lst2: List[int], n: int, n2: int) -> bool:\n        return len(lst) == n and len(lst2) == n2 and lst == lst2"
    },
    {
        "id":51,
        "response":" from typing import Tuple\n\n     def check_subset(tup: Tuple[int, int], tup2: Tuple[int, int]) -> bool:\n        return tup <= tup2"
    },
    {
        "id":52,
        "response":" from typing import List, Tuple\n\n     def matrix_to_list(matrix: List[Tuple[int, int]]) -> List[List[int]]:\n        return [list(row) for row in zip(*matrix)]"
    },
    {
        "id":53,
        "response":" from collections import defaultdict\nfrom typing import List\n\ndef grouping_dictionary(lst: List[tuple]) -> dict:\n     d = defaultdict(list)\n     for key, value in lst:\n         d[key].append(value)\n     return dict(d)"
    },
    {
        "id":54,
        "response":" def rectangle_perimeter(n, n2):\n        return 2 * (n + n2)"
    },
    {
        "id":55,
        "response":" from typing import List\n\n     def fifth_Power_Sum(n: int) -> int:\n         return sum(i**5 for i in range(1, n+1))"
    },
    {
        "id":56,
        "response":" from typing import List\n\n     def find_Min_Sum(lst: List[int], lst2: List[int], n: int) -> int:\n         return sum(min(a, b) for a, b in zip(lst, lst2)) - n\n\n     def find_Min_Sum(lst: List[int], lst2: List[int], n: int) -> int:\n         if len(lst) != len(lst2) or len(lst) == 0:\n             return float('inf')\n         return sum(min(a, b) for a, b in zip(lst, lst2)) - n"
    },
    {
        "id":57,
        "response":" def first_Digit(n):\n        return int(str(n)[0])"
    },
    {
        "id":58,
        "response":" from typing import List\n\n     def max_occurrences(lst: List[int]) -> int:\n        return max(lst.count(i) for i in set(lst))"
    },
    {
        "id":59,
        "response":" from collections import Counter\nfrom typing import List\n\ndef repeat(lst: List[int]) -> List[int]:\n    return [x for i, x in enumerate(lst) if lst.count(x) > 1]"
    },
    {
        "id":60,
        "response":" from typing import List\n\n     def find_Points(n: int, n2: int, n3: int, n4: int) -> List[int]:\n        points = list(range(n, n2))\n        points2 = list(range(n3, n4))\n        return [i for i in points if i not in points2]"
    },
    {
        "id":61,
        "response":" from itertools import groupby\n     def max_sum_of_three_consecutive(lst, n):\n        return max(sum(g) for k, g in groupby(lst) if len(g) >= n)"
    },
    {
        "id":62,
        "response":" from collections import OrderedDict\n\ndef sorted_dict(dct):\n  return OrderedDict(sorted(dct.items()))"
    },
    {
        "id":63,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef find_max_val(n, n2, n3):\n  return reduce(gcd, [n, n2, n3])"
    },
    {
        "id":64,
        "response":" def average_Even(n):\n        even_nums = [i for i in range(2, n) if i % 2 == 0]\n        return sum(even_nums) \/ len(even_nums)"
    },
    {
        "id":65,
        "response":" from typing import List\n\n     def move_last(lst: List[int]) -> List[int]:\n        return lst[-1:] + lst[:-1]"
    },
    {
        "id":66,
        "response":" from collections import Counter\n\ndef count_char(s, s2):\n     return Counter(s2).most_common(1)[0][1]"
    },
    {
        "id":67,
        "response":" from typing import List\n\ndef Check_Vow(s: str, s2: str) -> int:\n        vowels = 'aeiouAEIOU'\n        count = 0\n        for char in s:\n            if char in vowels:\n                count += 1\n        return count"
    },
    {
        "id":68,
        "response":" from collections import Counter\n\ndef replace(s, s2):\n     return ''.join(c for c1, c2 in zip(s, s2) if c1 == c2)"
    },
    {
        "id":69,
        "response":" from re import fullmatch\nfrom typing import List\n\ndef check_IP(ip: str) -> bool:\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    return bool(fullmatch(pattern, ip))"
    },
    {
        "id":70,
        "response":" from typing import List\n\n     def decreasing_trend(lst: List[int]) -> bool:\n        for i in range(1, len(lst)):\n            if lst[i] <= lst[i - 1]:\n                return False\n        return True"
    },
    {
        "id":71,
        "response":" from typing import List\n\n     def set_Right_most_Unset_Bit(n: int) -> int:\n        return n | (n & -n)"
    },
    {
        "id":72,
        "response":" def max_of_three(a, b, c):\n        return max(a, b, c)"
    },
    {
        "id":73,
        "response":" from typing import List\n\ndef convert(lst: List[int]) -> int:\n  return sum(lst)"
    },
    {
        "id":74,
        "response":" from collections import Counter\n\ndef remove_duplicate(s):\n    return ' '.join([i for i in s.split() if s.count(i) == 1])"
    },
    {
        "id":75,
        "response":" from typing import List\n\n     def sum_nums(*args: List[int]) -> int:\n        return sum(x for x in args if x >= n1 and x <= n2) or 20"
    },
    {
        "id":76,
        "response":" from re import sub\n\ndef remove_extra_char(s):\n  return sub('[^a-zA-Z\\s]', '', s)"
    },
    {
        "id":77,
        "response":" from math import sqrt\n\ndef validity_triangle(a, b, c):\n    s = (a + b + c) \/ 2\n    return (s * (s - a) * (s - b) * (s - c)) >= 0"
    },
    {
        "id":78,
        "response":" from typing import List\n\ndef remove_spaces(s: str) -> str:\n        return s.replace(\" \", \"\")"
    },
    {
        "id":79,
        "response":" from typing import Dict, Any\n\n     def access_key(dct: Dict[str, Any], n: int) -> Any:\n        return dct.get(n)"
    },
    {
        "id":80,
        "response":" from typing import List\n\n     def increasing_trend(lst: List[int]) -> bool:\n        return all(lst[i] < lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "id":81,
        "response":" from math import gcd\nfrom typing import List\n\ndef smallest_Divisor(n: int) -> int:\n  def get_prime_factors(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n      if n % i:\n        i += 1\n      else:\n        n \/\/= i\n        factors.append(i)\n    if n > 1:\n      factors.append(n)\n    return factors\n\n  def smallest_factor(factors: List[int]) -> int:\n    return min(factors)\n\n  return smallest_factor(get_prime_factors(n))"
    },
    {
        "id":82,
        "response":" from typing import List\n\n     def mul_list(lst1: List[int], lst2: List[int]) -> List[int]:\n        return [a * b for a, b in zip(lst1, lst2)]"
    },
    {
        "id":83,
        "response":" from typing import List\n\n     def sum_Square(n: int) -> bool:\n        squares = [i**2 for i in range(n+1)]\n        return sum(squares) == sum([i**2 for i in range(n)]) + sum([i**2 for i in range(n+1) if i>n])"
    },
    {
        "id":84,
        "response":" from collections import Counter\n\ndef count_Char(s, s2):\n     return Counter(s2).most_common(1)[0][1]"
    },
    {
        "id":85,
        "response":" from typing import List\n\n     def sum_Of_Primes(n: int) -> int:\n        def is_prime(num: int) -> bool:\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        primes: List[int] = [i for i in range(2, n+1) if is_prime(i)]\n        return sum(primes)"
    },
    {
        "id":86,
        "response":" from collections import Counter\n\ndef freq_element(tup):\n    return dict(Counter(tup)).most_common(1)[0]"
    },
    {
        "id":87,
        "response":" from math import gcd\nfrom typing import Tuple\n\ndef recur_gcd(n: int, n2: int) -> Tuple[int, bool]:\n  return gcd(n, n2), n == n2"
    },
    {
        "id":88,
        "response":" from math import sqrt\n\ndef len_complex(n):\n    return int(sqrt(n.real**2 + n.imag**2))"
    },
    {
        "id":89,
        "response":" from collections import deque\n\ndef min_jumps(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    queue = deque([0])\n    while queue:\n        size = len(queue)\n        for _ in range(size):\n            index = queue.popleft()\n            for i in range(1, arr[index] + 1):\n                next_index = index + i\n                if next_index < n and jumps[next_index] == float('inf'):\n                    jumps[next_index] = jumps[index] + 1\n                    queue.append(next_index)\n    return jumps[-1]"
    },
    {
        "id":90,
        "response":" def mul_consecutive_nums(lst):\n        result = 1\n        for i in lst:\n            result *= i\n        return result"
    },
    {
        "id":91,
        "response":" from typing import List, Tuple\n\n     def group_elements(lst: List[Tuple[int, int]]) -> List[List[Tuple[int, int]]]:\n        result = {}\n        for item in lst:\n            key = item[0]\n            if key not in result:\n                result[key] = []\n            result[key].append(item)\n        return list(result.values())"
    },
    {
        "id":92,
        "response":" def last_two_digits(n):\n        return str(n % 100)[:2]"
    },
    {
        "id":93,
        "response":" from re import sub\n\ndef remove_multiple_spaces(s):\n    return sub(' +', ' ', s)"
    },
    {
        "id":94,
        "response":" from typing import Dict\n\n     def extract_unique(dct: Dict) -> Dict:\n         return {k: list(set(v)) for k, v in dct.items()}"
    },
    {
        "id":95,
        "response":" from typing import Tuple\n\ndef check_greater(tup: Tuple[int, int], tup2: Tuple[int, int]) -> bool:\n     return tup2[0] > tup[0] and tup2[1] > tup[1]"
    },
    {
        "id":96,
        "response":" from itertools import zip_longest\n\ndef zip_list(lst, lst2):\n  return list(zip_longest(lst, lst2))"
    },
    {
        "id":97,
        "response":" from typing import List\n\ndef count_even(lst: List[int]) -> int:\n     return sum(1 for num in lst if num % 2 == 0)"
    },
    {
        "id":98,
        "response":" from collections import namedtuple\n\nItem = namedtuple('Item', ['key', 'value'])\n\ndef sort_dict_item(dct):\n    return [Item(k, v) for k, v in sorted(dct.items())]"
    },
    {
        "id":99,
        "response":" from collections import Counter\n\n     def min_Swaps(s, s2):\n        n = len(s)\n        m = len(s2)\n        s_count = Counter(s)\n        s2_count = Counter(s2)\n        swaps = 0\n        for char in s2_count:\n            if s_count[char] < s2_count[char]:\n                swaps += s_count[char]\n        return swaps"
    },
    {
        "id":100,
        "response":" from typing import List\n\n     def count_range_in_list(lst: List[int], n: int, n2: int) -> int:\n        count = 0\n        for i in range(n, n2 + 1):\n            if i in lst:\n                count += 1\n        return count"
    },
    {
        "id":101,
        "response":" from typing import List\n\n     def equilibrium_index(lst: List[int]) -> int:\n        slow = fast = 0\n        while fast < len(lst):\n            fast = fast + 2 * fast\n            slow = slow + 1\n            if fast >= len(lst):\n                fast = len(lst) - 1\n            if slow == fast:\n                return slow"
    },
    {
        "id":102,
        "response":" from typing import List\n\n     def removals(lst: List[int], n: int, n2: int) -> int:\n         stack = []\n         for i in lst:\n             while stack and stack[-1] >= i:\n                 stack.pop()\n             stack.append(i)\n         return len(stack)"
    },
    {
        "id":103,
        "response":" from typing import Dict, Any\n\n     def is_key_present(dct: Dict[str, Any], n: str) -> bool:\n        return n in dct"
    },
    {
        "id":104,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef harmonic_sum(n):\n    return reduce(lambda x, y: x - y\/gcd(x,y), range(1, n+1))"
    },
    {
        "id":105,
        "response":" from typing import List\n\n     def sort_sublists(lst: List[List[int]]) -> List[List[int]]:\n        return sorted(lst, key=lambda x: (len(x), x[0]))"
    },
    {
        "id":106,
        "response":" from typing import List, Tuple\n\n     def is_subset(lst: List[int], n: int, lst2: List[int], n2: int) -> bool:\n         return set(lst).issubset(set(lst2)) and set(n).issubset(set(n2))"
    },
    {
        "id":107,
        "response":" from typing import List\n\n     def count_Set_Bits(n: int) -> int:\n         count = 0\n         while n:\n             count += n & 1\n             n >>= 1\n         return count"
    },
    {
        "id":108,
        "response":" from typing import List\n\n     def convert(s: str) -> List[str]:\n         return list(s)"
    },
    {
        "id":109,
        "response":" from typing import List\n\n     def get_unique(lst: List) -> List:\n         return list(set(lst))"
    },
    {
        "id":110,
        "response":" from typing import Tuple\n\n     def front_and_rear(tup: Tuple) -> Tuple:\n         return tup[0], tup[-1]"
    },
    {
        "id":111,
        "response":" from itertools import product\n\ndef product_Equal(n):\n  s = [int(i) for i in str(n)]\n  return all(x * y == z for x, y, z in product(s, repeat=3))"
    },
    {
        "id":112,
        "response":" from collections import OrderedDict\n\ndef remove_duplicate(lst):\n    return list(OrderedDict.fromkeys(lst))"
    },
    {
        "id":113,
        "response":" from typing import Tuple\n\ndef check_valid(tup):\n     return tup and len(tup) == 2 and all(isinstance(x, int) for x in tup)"
    },
    {
        "id":114,
        "response":" from math import sqrt\n     def count_Fac(n):\n      ans = 0\n      i = 2\n      while i*i <= n:\n       if n%i == 0:\n        while n%i == 0:\n         ans += 1\n         n = n\/\/i\n        i += 1\n      return ans"
    },
    {
        "id":115,
        "response":" from typing import Tuple\n\ndef str_to_tuple(s: str) -> Tuple[int, int]:\n     return tuple(int(i) for i in s)"
    },
    {
        "id":116,
        "response":" from math import sqrt\n\ndef rombus_perimeter(n):\n    return 4 * sqrt(2 * n * n + n * n)"
    },
    {
        "id":117,
        "response":" from typing import List\n\n     def sd_calc(lst: List[float]) -> float:\n         return sum(lst)**2"
    },
    {
        "id":118,
        "response":" from typing import List\n\n     def alternate_elements(lst: List) -> List:\n         return [x for i in range(0, len(lst), 2) for x in lst[i:i+2]]"
    },
    {
        "id":119,
        "response":" from typing import List\n\n     def text_match(s: str) -> bool:\n        return 'a' in s and (s.index('a') > 0 or s.count('b') > 0)"
    },
    {
        "id":120,
        "response":" from typing import Tuple, Dict\n\n     def add_dict_to_tuple(tup: Tuple, dct: Dict) -> Tuple:\n         return tup + (dict(dct),)"
    },
    {
        "id":121,
        "response":" from itertools import product\n\n     def maxAverageOfPath(lst, n):\n        def average(lst):\n            return sum(lst) \/ len(lst)\n\n        def is_valid(x, y):\n            return 0 <= x < n and 0 <= y < n\n\n        max_avg = float('-inf')\n        max_path = None\n\n        for x, y in product(range(n), range(n)):\n            curr_avg = 0\n            curr_path = []\n            stack = [(x, y)]\n            while stack:\n                curr_x, curr_y = stack.pop()\n                curr_avg += lst[curr_x][curr_y]\n                curr_path.append((curr_x, curr_y))\n                if not is_valid(curr_x + 1, curr_y):\n                    continue\n                stack.append((curr_x + 1, curr_y))\n                stack.append((curr_x, curr_y + 1))\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n                max_path = curr_path\n\n        return max_path"
    },
    {
        "id":122,
        "response":" from typing import List, Dict\n\n     def filter_data(dct: Dict[str, Dict[str, float]], n: int, n2: int) -> List[Dict[str, float]]:\n        return [x for x in dct.values() if x['\u0989\u099a\u09cd\u099a\u09a4\u09be'] >= n and x['\u09aa\u09cd\u09b0\u09b8\u09cd\u09a5'] >= n2]"
    },
    {
        "id":123,
        "response":" from typing import List\n\n     def count_same_pair(lst: List[int], lst2: List[int]) -> int:\n        return sum(a == b for a, b in zip(lst, lst2))"
    },
    {
        "id":124,
        "response":" from typing import List\n\n     def power_base_sum(n: int, power: int) -> int:\n         return sum(int(digit) for digit in str(n)**power)"
    },
    {
        "id":125,
        "response":" from re import search\n\ndef extract_quotation(s):\n     return [match.group(1) for match in search(r'\"[^\"]*\"', s)]"
    },
    {
        "id":126,
        "response":" from typing import Tuple\n\n     def multiply_elements(tup: Tuple[int, int]) -> Tuple[int, int]:\n         return tup[0] * tup[1], tup[0] * tup[1]"
    },
    {
        "id":127,
        "response":" from re import sub\n     from typing import List\n\n     def remove_char(s: str) -> str:\n        return sub('[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":128,
        "response":" from typing import List\n\n     def sum_list(lst: List[int], lst2: List[int]) -> List[int]:\n        return [a + b for a, b in zip(lst, lst2)]"
    },
    {
        "id":129,
        "response":" from itertools import chain\nfrom typing import List, Union\n\ndef add_list(lst: List[Union[int, str]], lst2: List[Union[int, str]]) -> List[Union[int, str]]:\n    return list(chain(lst, lst2))"
    },
    {
        "id":130,
        "response":" from collections import deque\n\ndef consecutive_duplicates(lst):\n  stack = deque()\n  for elem in lst:\n    if stack and stack[-1] == elem:\n      stack.pop()\n    else:\n      stack.append(elem)\n  return list(stack)"
    },
    {
        "id":131,
        "response":" from math import pi\nfrom typing import List\n\ndef lateralsurface_cone(n: int, n2: int) -> float:\n    return (pi * n2 * (n2 + n)) \/ 3"
    },
    {
        "id":132,
        "response":" from re import sub\nfrom typing import List\n\ndef replace_specialchar(s: str) -> str:\n    return sub('[\\(\\)\\[\\]\\{\\}\\*\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\)\\+\\_\\~\\%\\$\\@\\#\\'\\\"\\'\\&\\(\\"
    },
    {
        "id":133,
        "response":" from typing import List\n\n     def find_first_occurrence(lst: List[int], n: int) -> int:\n        for i, num in enumerate(lst):\n            if num == n:\n                return i\n        return -1"
    },
    {
        "id":134,
        "response":" from typing import List\n\n     def sum_Of_Subarray_Prod(lst: List[int], n: int) -> int:\n        stack = []\n        prod = 1\n        for i in range(n):\n            while stack and stack[-1][0] <= i:\n                prod *= stack[-1][1]\n                stack.pop()\n            stack.append((i, lst[i]))\n        while stack:\n            prod *= stack[-1][1]\n            stack.pop()\n        return prod"
    },
    {
        "id":135,
        "response":" from typing import List\n\n     def toggle_middle_bits(n: int) -> int:\n        return (n ^ ((n >> 1) & 0xffffffff)) & 0xffffffff"
    },
    {
        "id":136,
        "response":" from bisect import bisect_left\n\ndef left_insertion(lst, n):\n    return bisect_left(lst, n)"
    },
    {
        "id":137,
        "response":" from re import search\n\n     def check_str(s):\n        return bool(search(r'^[aeiouAEIOU]+', s)) or bool(search(r'^\\D', s))"
    },
    {
        "id":138,
        "response":" from typing import Union\n\n     def geometric_sum(n: int) -> Union[int, float]:\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 1 + (n - 1) * geometric_sum(n - 1)"
    },
    {
        "id":139,
        "response":" from math import sqrt\nfrom collections import defaultdict\n\ndef find_index(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factors = defaultdict(int)\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n            prime_factors[i] += 1\n    if n > 1:\n        prime_factors[n] += 1\n    min_prime_index = 10**9\n    for key in prime_factors:\n        min_prime_index = min(min_prime_index, key)\n    return min_prime_index"
    },
    {
        "id":140,
        "response":" from collections import defaultdict\nfrom typing import Tuple\n\ndef tuple_to_dict(tup):\n  return defaultdict(int, tup)"
    },
    {
        "id":141,
        "response":" from typing import List\n\n     def all_Characters_Same(s: str) -> bool:\n         return len(set(s)) == 1"
    },
    {
        "id":142,
        "response":" from math import sqrt\n\n     def area_tetrahedron(n):\n      return (sqrt(2 * (n ** 2) + (n ** 3)) \/ 12)"
    },
    {
        "id":143,
        "response":" from typing import List\n\n     def rotate(lst: List[int], n: int, n2: int) -> List[int]:\n         return lst[n:] + lst[:n]"
    },
    {
        "id":144,
        "response":" from typing import Tuple\n\n     def check_none(tup: Tuple[int, int, int]) -> bool:\n        return 0 in tup"
    },
    {
        "id":145,
        "response":" from typing import List\nfrom itertools import product\n\ndef divisible_by_digits(n: int, n2: int) -> List[int]:\n    def is_divisible(num: int) -> bool:\n        for digit in str(num):\n            if num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(n, n2 + 1):\n        if is_divisible(i):\n            result.append(i)\n    return result"
    },
    {
        "id":146,
        "response":" def sector_area(n, n2):\n        return (n * n2) \/ 2"
    },
    {
        "id":147,
        "response":" from itertools import combinations\n\ndef lcs_of_three(s, s2, s3):\n     def lcs(s1, s2):\n      a, b = 0, 0\n      for c in s1:\n        if c in s2:\n          a += 1\n          b += 1\n          s2 = s2[s2.index(c)+1:]\n      return max(a, b)\n\n     return max(lcs(s, s2), lcs(s, s3), lcs(s2, s3))"
    },
    {
        "id":148,
        "response":" from itertools import groupby\n\n     def capital_words_spaces(s):\n        return ' '.join(' '.join(g) for _, g in groupby(s, str.isupper))"
    },
    {
        "id":149,
        "response":" from typing import List\n\n     def sort_numeric_strings(lst: List[str]) -> List[str]:\n         return sorted(lst, key=lambda x: int(x))"
    },
    {
        "id":150,
        "response":" from typing import Tuple\n\ndef add_tuple(lst: list, tup: Tuple) -> list:\n     return lst + list(tup)"
    },
    {
        "id":151,
        "response":" from typing import List\n\n     def check_min_heap(lst: List[int]) -> bool:\n        n = len(lst)\n        for i in range(n):\n            left_child = 2 * i + 1\n            right_child = 2 * i + 2\n            smallest = i\n            if left_child < n and lst[i] > lst[left_child]:\n                smallest = left_child\n            if right_child < n and lst[smallest] > lst[right_child]:\n                smallest = right_child\n            if smallest != i:\n                return False\n        return True"
    },
    {
        "id":152,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef jacobsthal_num(n):\n  def gcd_two_numbers(a, b):\n    while b:\n      a, b = b, a % b\n    return a\n\n  def jacobsthal_sequence(n):\n    if n <= 1:\n      return n\n    a, b = 0, 1\n    for _ in range(n):\n      a, b = b, a + b\n    return b\n\n  def jacobsthal_number(n):\n    return jacobsthal_sequence(n) * jacobsthal_sequence(n+1)\n\n  return jacobsthal_number(n)"
    },
    {
        "id":153,
        "response":" from typing import List, Tuple\n     def min_k(lst: List[Tuple], k: int) -> Tuple:\n        return min(lst, key=lambda x: x[0], k)"
    },
    {
        "id":154,
        "response":" from typing import List\n\n     def extract_common_index(lst: List[int], lst2: List[int], lst3: List[int]) -> List[int]:\n        set1 = set(lst)\n        set2 = set(lst2)\n        set3 = set(lst3)\n        common = set1.intersection(set2, set3)\n        return list(common)"
    },
    {
        "id":155,
        "response":" from typing import List\n\n     def second_smallest(nums: List[int]) -> int:\n         if len(nums) < 2:\n             raise ValueError(\"List should have at least two elements\")\n         nums.sort()\n         return nums[1]"
    },
    {
        "id":156,
        "response":" from typing import List\n\n     def text_match_zero_one(s: str) -> bool:\n         return '0' in s or '1' in s"
    },
    {
        "id":157,
        "response":" from typing import List\n\ndef count_reverse_pairs(lst: List[str]) -> int:\n        pairs = {}\n        count = 0\n        for string in lst:\n            reverse = string[::-1]\n            if reverse in pairs:\n                count += pairs[reverse]\n            pairs[string] = pairs.get(string, 0) + 1\n        return count"
    },
    {
        "id":158,
        "response":" from typing import List\n\n     def unique_sublists(lst: List[List[int]]) -> int:\n        return len(set(tuple(sorted(sublist)) for sublist in lst))"
    },
    {
        "id":159,
        "response":" from decimal import Decimal\n\ndef is_decimal(s):\n    try:\n        Decimal(s)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "id":160,
        "response":" from typing import List\n\n     def unique_Element(lst: List) -> bool:\n        return len(lst) == len(set(lst))"
    },
    {
        "id":161,
        "response":" from math import sin, cos\nfrom typing import Tuple\n\ndef arc_length(n: int, n2: int) -> float:\n    import math\n    return math.sqrt((n2 - n)**2 + (1 - n*n)**2)"
    },
    {
        "id":162,
        "response":" from datetime import datetime\n\ndef check_month_number(n):\n     d = datetime(2024, n, 1)\n     return d.day == 30"
    },
    {
        "id":163,
        "response":" from typing import Tuple\n\n     def find_Min_Diff(tup: Tuple[int, int]) -> int:\n        return abs(tup[0] - tup[1])"
    },
    {
        "id":164,
        "response":" from typing import Dict\n\n     def number_ctr(s: str) -> Dict[str, int]:\n         return {chr(i): s.count(chr(i)) for i in range(97, 123)}"
    },
    {
        "id":165,
        "response":" from typing import List\n\n     def is_polite(n: int) -> bool:\n        return n % 2 == 0"
    },
    {
        "id":166,
        "response":" def pair_wise(lst):\n        return [list(i) for i in zip(*lst)]"
    },
    {
        "id":167,
        "response":" from typing import List\n\n     def get_Pairs_Count(lst: List[int], n: int, n2: int) -> int:\n        count = 0\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                if lst[i] + lst[j] == n + n2:\n                    count += 1\n        return count"
    },
    {
        "id":168,
        "response":" from typing import Any\n\n     def check_Odd_Parity(n: Any) -> bool:\n         return n % 2 != 0"
    },
    {
        "id":169,
        "response":" from typing import List\n\n     def diff(list1: List, list2: List) -> List:\n        return [a for a, b in zip(list1, list2) if a != b]"
    },
    {
        "id":170,
        "response":" from math import pow\nfrom typing import List\n\ndef odd_Num_Sum(n: int) -> int:\n  sum = 0\n  for i in range(n):\n    if i % 2 != 0:\n      sum += pow(i, 4)\n  return sum"
    },
    {
        "id":171,
        "response":" from typing import List\n\n     def check_expression(s: str) -> bool:\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack"
    },
    {
        "id":172,
        "response":" from collections import deque\nfrom typing import List\n\ndef remove_length(s: str, n: int) -> str:\n     q = deque()\n     for char in s:\n          if len(q) == n:\n               q.popleft()\n          else:\n               q.append(char)\n     return ''.join(q)"
    },
    {
        "id":173,
        "response":" from collections import defaultdict\n\ndef occurance_substring(s, s2):\n  d = defaultdict(int)\n  for i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n      d[s[i:j]] += 1\n  return d.get(s2, 0)"
    },
    {
        "id":174,
        "response":" from re import fullmatch\n\ndef check_email(s):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    return bool(fullmatch(pattern, s))"
    },
    {
        "id":175,
        "response":" from typing import List\n\n     def odd_position(lst: List[int]) -> bool:\n        return lst[1::2]"
    },
    {
        "id":176,
        "response":" from collections import Counter\nfrom typing import List\n\ndef count_vowels(s: str) -> int:\n     vowels = 'aeiou'\n     counter = Counter()\n     for char in s:\n          if char.lower() in vowels:\n               counter[char.lower()] += 1\n     return sum(counter.values())"
    },
    {
        "id":177,
        "response":" from collections import Counter\nfrom typing import List\n\ndef find_Sum(lst: List[int], n: int) -> int:\n     return sum(i for i in lst if lst.count(i) < n)"
    },
    {
        "id":178,
        "response":" from itertools import groupby\n     def pack_consecutive_duplicates(lst):\n        return [' '.join(g) for k, g in groupby(lst)]"
    },
    {
        "id":179,
        "response":" from typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n     return len(set(tuple(sorted(sublist)) for sublist in lst))"
    },
    {
        "id":180,
        "response":" from typing import List, Tuple\n\n     def find_combinations(lst: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int]]:\n         result = []\n         for i in range(len(lst)):\n             for j in range(i, len(lst)):\n                 for k in range(j, len(lst)):\n                     result.append((lst[i] + lst[j] + lst[k], lst[i] * lst[j] * lst[k]))\n         return result"
    },
    {
        "id":181,
        "response":" from typing import List\n\n     def count_Divisors(n: int) -> int:\n         count = 0\n         for i in range(1, int(n**0.5) + 1):\n             if n % i == 0:\n                 if n \/\/ i == i:\n                     count += 1\n                 else:\n                     count += 2\n         return count"
    },
    {
        "id":182,
        "response":" from itertools import chain\n     from typing import List\n\n     def Odd_Length_Sum(lst: List) -> int:\n         return sum(filter(lambda x: len(x) % 2 != 0, chain(*lst)))"
    },
    {
        "id":183,
        "response":" from colorsys import rgb_to_hsv\n\ndef rgb_to_hsv(n, n2, n3):\n  return rgb_to_hsv(n\/255.0, n2\/255.0, n3\/255.0)"
    },
    {
        "id":184,
        "response":" from typing import List\n\n     def mul_even_odd(lst: List[int]) -> int:\n        result = 1\n        for num in lst:\n            if num % 2 == 0:\n                result *= num\n        return result"
    },
    {
        "id":185,
        "response":" from typing import Tuple\n\n     def tuple_str_int(s: str) -> Tuple[int, int]:\n         return tuple(map(int, s.split()))"
    },
    {
        "id":186,
        "response":" from bisect import bisect_left\n\ndef right_insertion(lst, n):\n     return bisect_left(lst, n, lo=-1, key=None)"
    },
    {
        "id":187,
        "response":" from typing import List\n\n     def text_match_three(s: str) -> bool:\n        return 'abbb' in s"
    },
    {
        "id":188,
        "response":" from typing import Tuple\n\ndef new_tuple(lst, s):\n  return (s,) + tuple(lst)"
    },
    {
        "id":189,
        "response":" from math import sin\nfrom typing import List\n\ndef perimeter_polygon(n: int, sides: List[float]) -> float:\n    return sum(sides)"
    },
    {
        "id":190,
        "response":" from typing import List\n\n     def even_position(lst: List[int]) -> bool:\n         return all(x % 2 == 0 for i, x in enumerate(lst) if i % 2 == 0)"
    },
    {
        "id":191,
        "response":" from typing import Any\n\ndef remove_nested(tup):\n     return [i for i in tup if not isinstance(i, tuple)]"
    },
    {
        "id":192,
        "response":" from typing import List\n\n     def count_list(lst: List[int]) -> int:\n        return len(lst)"
    },
    {
        "id":193,
        "response":" from typing import List\n\n     def last(lst: List[int], n: int, n2: int) -> int:\n         return lst[n2-1]"
    },
    {
        "id":194,
        "response":" from typing import List\n\n     def text_starta_endb(s: str) -> bool:\n        return s.endswith('b') and 'a' in s"
    },
    {
        "id":195,
        "response":" from typing import List\n\n     def cheap_items(lst: List, n: int) -> List:\n        return sorted([x for x in lst if x <= n])"
    },
    {
        "id":196,
        "response":" from typing import Dict\n\ndef return_sum(dct: Dict[str, int]) -> int:\n        return sum(dct.values())"
    },
    {
        "id":197,
        "response":" from typing import List\n\n     def sum_in_Range(n: int, n2: int) -> int:\n        return sum(i for i in range(n, n2) if i % 2 != 0)"
    },
    {
        "id":198,
        "response":" from typing import List\n\n     def _sum(lst: List[int]) -> int:\n         return sum(lst)"
    },
    {
        "id":199,
        "response":" from collections import deque\n\ndef leftRotate(n, n2):\n  q = deque(str(n))\n  return int(q.rotate(-n2)"
    },
    {
        "id":200,
        "response":" from typing import List\n\ndef remove_all_spaces(s: str) -> str:\n        return s.replace(\" \", \"\")"
    },
    {
        "id":201,
        "response":" from collections import Counter\n\ndef test_three_equal(n, n2, n3):\n  return Counter(str(n))['1'] + Counter(str(n2))['1'] + Counter(str(n3))['1']"
    },
    {
        "id":202,
        "response":" from math import gcd\nfrom typing import List\n\ndef count_Rotation(lst: List[int], n: int) -> int:\n  def lcm(a, b):\n    return a * b \/\/ gcd(a, b)\n  res = 0\n  for i in range(n):\n    res += lcm(i, len(lst))\n  return res"
    },
    {
        "id":203,
        "response":" from math import sqrt\n\ndef is_Perfect_Square(n):\n  return n == int(sqrt(n))**2"
    },
    {
        "id":204,
        "response":" from typing import List\n\n     def is_Product_Even(lst: List[int], n: int) -> bool:\n         return all(x % 2 == 0 for x in lst) and all(x % n == 0 for x in lst)"
    },
    {
        "id":205,
        "response":" from typing import List\n\n     def max_sum_list(lst: List[int]) -> int:\n        return max(sum(lst))"
    },
    {
        "id":206,
        "response":" from typing import List\n\ndef max_run_uppercase(s: str) -> int:\n        max_run = 0\n        current_run = 0\n        for char in s:\n            if char.isupper():\n                current_run += 1\n            else:\n                max_run = max(max_run, current_run)\n                current_run = 0\n        return max(max_run, current_run)"
    },
    {
        "id":207,
        "response":" from typing import List\n\ndef first_odd(lst: List[int]) -> int:\n        for i in lst:\n            if i % 2 != 0:\n                return i\n        return lst[-1]"
    },
    {
        "id":208,
        "response":" from typing import Tuple\n\n     def check_K(tup: Tuple[int, int], n: int) -> bool:\n        return tup[0] == n or tup[1] == n"
    },
    {
        "id":209,
        "response":" from typing import Tuple\n\ndef check_smaller(tup, tup2):\n  return tup[0] < tup2[0]"
    },
    {
        "id":210,
        "response":" from collections import Counter\n\ndef count_variable(n, n2, n3, n4):\n     return Counter(n)"
    },
    {
        "id":211,
        "response":" from typing import List, Tuple\n\n     def check_identical(lst: List[Tuple], lst2: List[Tuple]) -> bool:\n        return lst == lst2"
    },
    {
        "id":212,
        "response":" from typing import List\n\n     def road_rd(s: str) -> str:\n        return s.replace('road', 'rd')"
    },
    {
        "id":213,
        "response":" from typing import List\n\n     def string_length(s: str) -> int:\n        return len(s)"
    },
    {
        "id":214,
        "response":" def rombus_area(n):\n        area = n * (n + 1) * (2 * n + 1) \/\/ 2\n        return area"
    },
    {
        "id":215,
        "response":" def sort_by_dnf(lst):\n        def f(x):\n            return x.count(0), x.count(1), x.count(2)\n        return sorted(lst, key=f)"
    },
    {
        "id":216,
        "response":" from typing import Tuple\n\ndef clear_tuple(tup: Tuple) -> Tuple:\n    return tup"
    },
    {
        "id":217,
        "response":" from typing import List\nfrom collections import Counter\n\ndef div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n  def get_divisors(num: int) -> List[int]:\n    return [i for i in range(1, num + 1) if num % i == 0]\n\n  return [num for num in lst if any(i in get_divisors(num) for i in (m, n))]"
    },
    {
        "id":218,
        "response":" from collections import Counter\n\ndef lower_ctr(s):\n    return Counter(c for c in s if c.islower())"
    },
    {
        "id":219,
        "response":" from collections import Counter\nfrom typing import List\n\ndef count_duplic(lst: List[int]) -> dict:\n    counter = Counter(lst)\n    duplic = {}\n    for key, value in counter.items():\n        if value > 1:\n            duplic[key] = value\n    return duplic"
    },
    {
        "id":220,
        "response":" from typing import Any\n\n     def check_monthnum_number(n: Any) -> bool:\n        month_days = {\n            1: 31,\n            2: 28,\n            3: 31,\n            4: 30,\n            5: 31,\n            6: 30,\n            7: 31,\n            8: 31,\n            9: 30,\n            10: 31,\n            11: 30,\n            12: 31\n        }\n        return n in month_days and month_days[n] == 28"
    },
    {
        "id":221,
        "response":" from collections import Counter\nfrom typing import Dict\n\ndef merge_dictionaries(dct: Dict, dct2: Dict) -> Dict:\n    return dict(Counter(dct) + Counter(dct2))"
    },
    {
        "id":222,
        "response":" from re import fullmatch\n\ndef pass_validity(s):\n  return bool(fullmatch(r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$\", s))"
    },
    {
        "id":223,
        "response":" from re import search\n\ndef check_substring(s, s2):\n  if search(s2, s):\n    return True\n  else:\n    return False"
    },
    {
        "id":224,
        "response":" from typing import List\n\ndef remove_even(lst: List[int]) -> List[int]:\n        return [num for num in lst if num % 2 != 0]"
    },
    {
        "id":225,
        "response":" from typing import List\n\n     def access_elements(lst: List[int], lst2: List[int]) -> List[int]:\n         return [lst[i] for i in range(len(lst)) if i in lst2]"
    },
    {
        "id":226,
        "response":" from math import sqrt\n     from typing import Tuple\n\n     def check_Type_Of_Triangle(a: int, b: int, c: int) -> Tuple[str, bool]:\n         s = (a + b + c) \/ 2\n         if a + b > c and a + c > b and b + c > a:\n             if sqrt(s*(s-a)*(s-b)*(s-c)) == int(sqrt(s*(s-a)*(s-b)*(s-c))):\n                 return \"Equilateral\", True\n             elif (a == b == c) or (a == b) or (b == c):\n                 return \"Isosceles\", True\n             else:\n                 return \"Scalene\", True\n         else:\n             return \"Not a triangle\", False"
    },
    {
        "id":227,
        "response":" from typing import List\n\n     def sum_column(lst: List[List[int]], n: int) -> int:\n        return sum(lst[n])"
    },
    {
        "id":228,
        "response":" from collections import Counter\n     from typing import List\n\n     def count_alpha_dig_spl(s: str) -> int:\n        counter = Counter()\n        for char in s:\n            if char.isalpha():\n                counter['alpha'] += 1\n            elif char.isdigit():\n                counter['dig'] += 1\n            elif char in \"!@#$%^&*()_+-={}:<>?\":\n                counter['spl'] += 1\n        return sum(counter.values())"
    },
    {
        "id":229,
        "response":" from collections import Counter\nfrom typing import List\n\ndef second_frequent(lst: List[str]) -> str:\n     return lst[Counter(lst).most_common(2)[1][0]]"
    },
    {
        "id":230,
        "response":" from math import ceil\n\ndef round_up(a, b):\n    return ceil(a \/ b) * b"
    },
    {
        "id":231,
        "response":" from typing import List, Tuple\n\n     def count_Pairs(lst: List[int]) -> int:\n         pairs = {}\n         for i in lst:\n             pairs[i] = pairs.get(i, 0) + 1\n         count = 0\n         for v in pairs.values():\n             count += v * (v - 1) \/\/ 2\n         return count"
    },
    {
        "id":232,
        "response":" from re import findall\nfrom typing import List\n\ndef extract_max(s: str) -> int:\n  return max(map(int, findall(r'\\d+', s)))"
    },
    {
        "id":233,
        "response":" from collections import Counter\n\ndef get_key(dct):\n    return [k for k, v in dct.items() if v == max(dct.values())]"
    },
    {
        "id":234,
        "response":" from typing import List\n\n     def generate_matrix(n: int) -> List[List[int]]:\n         return [[(i * j + j) % n + 1 for j in range(1, n + 1)] for i in range(n)]"
    },
    {
        "id":235,
        "response":" from typing import Union\n\n     def slope(n: Union[int, float], n2: Union[int, float], n3: Union[int, float], n4: Union[int, Union[int, float], float]) -> Union[int, float]:\n         return (n4 - n) \/ (n3 - n2)"
    },
    {
        "id":236,
        "response":" from typing import List\n\n     def max_sub_array_sum(lst: List[int], n: int) -> int:\n         max_sum = float('-inf')\n         current_sum = 0\n         for i in range(n):\n             current_sum = max(lst[i], current_sum + lst[i])\n             max_sum = max(max_sum, current_sum)\n         return max_sum"
    },
    {
        "id":237,
        "response":" from math import sqrt\n     def cube_Sum(n):\n      sum = 0\n      for i in range(1, n+1):\n       sum += i**3\n      return sum"
    },
    {
        "id":238,
        "response":" from collections import Counter\nfrom typing import List\n\ndef min_Swaps(s: str, s2: str) -> int:\n  n = len(s)\n  cnt1 = Counter(s)\n  cnt2 = Counter(s2)\n  res = 0\n  for c in set(s):\n    if cnt1[c] != cnt2[c]:\n      res += max(cnt1[c], cnt2[c]) - min(cnt1[c], cnt2[c])\n  return res"
    },
    {
        "id":239,
        "response":" from typing import List, Tuple\n\ndef sort_tuple(lst: List[Tuple]) -> List[Tuple]:\n    return sorted(lst, key=lambda x: x[0])"
    },
    {
        "id":240,
        "response":" def Check_Solution(n, n2, n3):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def get_divisors(num):\n            divisors = set()\n            for i in range(1, int(num**0.5) + 1):\n                if num % i == 0:\n                    divisors.add(i)\n                    divisors.add(num \/\/ i)\n            return divisors\n\n        def check_parity(a, b, c, d):\n            a1, b1, c1, d1 = get_divisors(a), get_divisors(b), get_divisors(c), get_divisors(d)\n            if len(a1) == len(b1) == len(c1) == len(d1) == 1:\n                return True\n            return False\n\n        return check_parity(n, n2, n3, n) or check_parity(n, n3, n2, n) or check_parity(n2, n, n3, n) or check_parity(n2, n3, n, n) or check_parity(n3, n, n2, n) or check_parity(n3, n2, n, n)"
    },
    {
        "id":241,
        "response":" from typing import List\n\n     def get_inv_count(lst: List[int]) -> int:\n        return sum(1 for i in lst if i % 2 == 0)"
    },
    {
        "id":242,
        "response":" from collections import Counter\n\ndef get_odd_occurence(lst, n):\n  counter = Counter(lst)\n  for num, count in counter.items():\n    if count % 2 != 0 and count >= n:\n      return num"
    },
    {
        "id":243,
        "response":" from typing import List\n\n     def nth_super_ugly_number(n: int, lst: List[int]) -> int:\n        heap = []\n        for num in lst:\n            heap.append(num)\n        heapify(heap)\n        for _ in range(n-1):\n            min_num = heappop(heap)\n            for num in lst:\n                if num <= min_num:\n                    heappush(heap, num * min_num)\n        return heappop(heap)"
    },
    {
        "id":244,
        "response":" from typing import List\n\n     def get_kth_element(arr: List[int], k: int) -> int:\n        if k < 1 or k > len(arr):\n            return None\n        return arr[k-1]"
    },
    {
        "id":245,
        "response":" import math\n     def factorial(n):\n      return math.factorial(n)"
    },
    {
        "id":246,
        "response":" from typing import List\nfrom collections import defaultdict\n\ndef find_platform(lst: List[int], lst2: List[int], n: int) -> int:\n     platform = defaultdict(int)\n     for i in range(len(lst)):\n         platform[lst[i]] += 1\n     ans = 0\n     platform.sort()\n     for i in range(len(platform)-1):\n         ans += (platform[i+1] - platform[i]) * (platform[i+1] - platform[i] + 1) \/\/ 2\n     return ans"
    },
    {
        "id":247,
        "response":" from typing import List\n\n     def lcopy(lst: List) -> List:\n         return lst[:]"
    },
    {
        "id":248,
        "response":" from math import sqrt\nfrom typing import List\n\ndef area_trapezium(n: int, n2: int, n3: int) -> float:\n    a = (n + n2) \/ 2\n    b = sqrt((n2 - n3)**2 + (n3 - n)**2)\n    c = sqrt((n3 - n2)**2 + (n - n2)**2)\n    return 0.5 * a * (b + c)"
    },
    {
        "id":249,
        "response":" from collections import Counter\n\ndef sum_of_divisors(n):\n    return sum(i for i in range(1, n+1) if n % i == 0)"
    },
    {
        "id":250,
        "response":" from math import sqrt\n\ndef is_triangleexists(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"
    },
    {
        "id":251,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef sum_of_inverse_divisors(n, n2):\n  def inverse_divisors(num):\n    return [i for i in range(1, num) if num % i == 0]\n  return reduce(lambda x, y: x + y, inverse_divisors(n), inverse_divisors(n2))"
    },
    {
        "id":252,
        "response":" from typing import List\n\n     def remove_negs(lst: List[int]) -> List[int]:\n         return [i for i in lst if i >= 0]"
    },
    {
        "id":253,
        "response":" from math import sqrt\n\ndef sum_of_odd_factors(n):\n  def is_prime(x):\n    if x < 2:\n      return False\n    for i in range(2, int(sqrt(x)) + 1):\n      if x % i == 0:\n        return False\n    return True\n\n  sum = 0\n  for i in range(1, n + 1):\n    if n % i == 0 and is_prime(i):\n      sum += i\n  return sum"
    },
    {
        "id":254,
        "response":" from collections import deque\nfrom typing import List\n\ndef raw_heap(lst: List[int]) -> str:\n  heap = deque(lst)\n  heapify(heap)\n  return ''.join(map(str, heap))"
    },
    {
        "id":255,
        "response":" from typing import Union\n\n     def check_Even_Parity(n: Union[int, float]) -> bool:\n        return n % 2 == 0"
    },
    {
        "id":256,
        "response":" from typing import List\n\n     def find_min_swaps(lst: List[int]) -> int:\n         n = len(lst)\n         degrees = [0] * (n + 1)\n         for i in range(n):\n             degrees[lst[i]] += 1\n         for i in range(1, n + 1):\n             degrees[i] += degrees[i - 1]\n         swaps = 0\n         for i in range(n):\n             if lst[i] != i + 1:\n                 j = degrees[lst[i] - 1]\n                 swaps += j\n                 degrees[lst[i]] -= 1\n                 degrees[lst[j]] += 1\n         return swaps"
    },
    {
        "id":257,
        "response":" from typing import List\n\n     def listify_list(lst: List[str]) -> List[str]:\n        return lst"
    },
    {
        "id":258,
        "response":" from typing import List\n\n     def count_list(lst: List[int]) -> List[int]:\n         return [i**2 for i in lst]"
    },
    {
        "id":259,
        "response":" from typing import List\nfrom itertools import combinations\n\ndef sub_lists(lst: List[int]) -> List[List[int]]:\n    return [list(x) for x in combinations(lst, 2)]"
    },
    {
        "id":260,
        "response":" from re import match\n\ndef check_alphanumeric(s):\n    return bool(match('^[a-zA-Z0-9]+$', s))"
    },
    {
        "id":261,
        "response":" from itertools import combinations\n\ndef anagram_lambda(lst, s):\n  return [\"\".join(g) for g in set(\"\".join(g) for g in combinations(lst, 2) if sorted(g) == sorted(s))]"
    },
    {
        "id":262,
        "response":" from collections import Counter\nfrom typing import List\n\ndef n_common_words(s: str, n: int) -> List[str]:\n     words = s.split()\n     words = [word for word in words if word not in ['the', 'and', 'a', 'of', 'to']]\n     counter = Counter(words)\n     return [word for word, freq in counter.most_common(n)]"
    },
    {
        "id":263,
        "response":" from typing import List\n\n     def find_longest_conseq_subseq(lst: List[int]) -> int:\n        if not lst:\n            return 0\n        max_length = 1\n        current_length = 1\n        for i in range(1, len(lst)):\n            if lst[i] - lst[i-1] == 1:\n                current_length += 1\n            else:\n                max_length = max(max_length, current_length)\n                current_length = 1\n        return max(max_length, current_length)"
    },
    {
        "id":264,
        "response":" from typing import List\n\n     def palindrome_lambda(lst: List[str]) -> List[str]:\n        return [i for i in lst if lst[i] == lst[-i-1]]"
    },
    {
        "id":265,
        "response":" from typing import List\n\n     def ntimes_list(lst: List, n: int) -> List:\n        return [lst[i % len(lst)] for i in range(n)]"
    },
    {
        "id":266,
        "response":" from calendar import monthrange\n\ndef check_monthnumb(s):\n     return monthrange(2024, int(s))[1] == 31"
    },
    {
        "id":267,
        "response":" from typing import List\n\n     def min_Num(lst: List[int], n: int) -> int:\n         return min(lst) + n"
    },
    {
        "id":268,
        "response":" from typing import List\n\n     def length_Of_Last_Word(s: str) -> int:\n         return len(s.split()[-1])"
    },
    {
        "id":269,
        "response":" from typing import List\n\n     def remove_list_range(lst: List[int], n: int, n2: int) -> List[int]:\n        return [i for i in lst if i < n or i >= n2]"
    },
    {
        "id":270,
        "response":" from typing import List\n\n     def sum_positivenum(lst: List[int]) -> int:\n         return sum(num for num in lst if num > 0)"
    },
    {
        "id":271,
        "response":" from typing import List\n\n     def are_Rotations(s: str, s2: str) -> bool:\n        return len(s) == len(s2) and s in s2 + s2"
    },
    {
        "id":272,
        "response":" from typing import List, Set\n\n     def check_subset(lst: List[int], lst2: List[int]) -> bool:\n        return set(lst).issubset(set(lst2))"
    },
    {
        "id":273,
        "response":" def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            yield a\n            a, b = b, a + b"
    },
    {
        "id":274,
        "response":" from typing import Union\n\n     def check_Concat(s: str, s2: str) -> bool:\n        return s == s2"
    },
    {
        "id":275,
        "response":" from typing import List\n\n     def min_difference(lst: List[tuple]) -> int:\n         return min(abs(a - b) for a, b in zip(lst, lst[1:]))"
    },
    {
        "id":276,
        "response":" from math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    def lcm_two_numbers(x, y):\n        return x * y \/\/ gcd(x, y)\n    return reduce(lcm_two_numbers, [a, b])"
    },
    {
        "id":277,
        "response":" from collections import Counter\n\ndef sort_String(s):\n  return ''.join(sorted(s))"
    },
    {
        "id":278,
        "response":" from typing import List, Tuple\n\n     def check_tuples(tup: Tuple) -> bool:\n        return len(tup) == 1"
    },
    {
        "id":279,
        "response":" from re import search\n\ndef text_match(s):\n     return search(r'a.*b', s)"
    },
    {
        "id":280,
        "response":" from math import sqrt\n\n     def Check_Solution(n, n2, n3):\n        return int(sqrt(n2**2 + n3**2)) == n"
    },
    {
        "id":281,
        "response":" from typing import List\n\n     def sum_even_odd(lst: List[int]) -> int:\n        return sum(i for i in lst if i % 2 == 0) + sum(i for i in lst if i % 2 != 0)"
    },
    {
        "id":282,
        "response":" from typing import List\n\n     def parallelogram_perimeter(n: int, n2: int) -> int:\n        return 2 * (n + n2)"
    },
    {
        "id":283,
        "response":" from typing import List\n\n     def div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n        return [i for i in lst if i % m == 0 and i % n == 0]"
    },
    {
        "id":284,
        "response":" from typing import List\n\n     def all_Bits_Set_In_The_Given_Range(n: int, n2: int, n3: int) -> bool:\n        return (n & n2) == n"
    },
    {
        "id":285,
        "response":" from typing import List\n\n     def is_isomorphic(s: str, s2: str) -> bool:\n         if len(s) != len(s2):\n             return False\n         mapping = {}\n         for i in range(len(s)):\n             if s[i] in mapping and mapping[s[i]] != s2[i]:\n                 return False\n             if s[i] not in mapping and s2[i] in mapping.values():\n                 return False\n             mapping[s[i]] = s2[i]\n         return True"
    },
    {
        "id":286,
        "response":" from typing import Tuple\n\n     def sum_num(tup: Tuple[int, ...]) -> float:\n         return sum(tup) \/ len(tup)"
    },
    {
        "id":287,
        "response":" from typing import Optional\n\n     def is_odd(n: int) -> bool:\n        return n & 1"
    },
    {
        "id":288,
        "response":" from typing import Tuple\n\n     def substract_elements(tup: Tuple[int, int]) -> Tuple[int, int]:\n        return (tup[0] - tup[1], tup[0] - tup[1])"
    },
    {
        "id":289,
        "response":" from typing import List\n\n     def reverse_list_lists(lst: List[List[int]]) -> List[List[int]]:\n         return [list(reversed(i)) for i in lst]"
    },
    {
        "id":290,
        "response":" from collections import Counter\n\ndef find_Extra(lst, lst2, n):\n     return [i for i in range(len(lst)) if Counter(lst[i:]) - Counter(lst2) > n]"
    },
    {
        "id":291,
        "response":" def same_Length(n, n2):\n        return len(str(n)) == len(str(n2))"
    },
    {
        "id":292,
        "response":" from typing import List\n\n     def remove_spaces(s: str) -> str:\n         return s.replace(\" \", \"\")"
    },
    {
        "id":293,
        "response":" from typing import List\n\n     def Extract(lst: List[int]) -> int:\n        return lst[-1]"
    },
    {
        "id":294,
        "response":" from typing import Tuple\n\ndef float_to_tuple(s: str) -> Tuple[float, float]:\n        return tuple(map(float, s.split(',')))"
    },
    {
        "id":295,
        "response":" from itertools import combinations\n\ndef max_sum_subseq(lst):\n  return max(sum(c) for c in combinations(lst, 2))"
    },
    {
        "id":296,
        "response":" from typing import List\n\n     def sort_list_last(lst: List[int]) -> List[int]:\n         return sorted(lst, reverse=True)"
    },
    {
        "id":297,
        "response":" from typing import List\n\n     def is_word_present(s: str, s2: str) -> bool:\n        return s2.find(s) != -1"
    },
    {
        "id":298,
        "response":" from typing import List\n\n     def extract_elements(lst: List[int], n: int) -> List[int]:\n        return lst[n:]"
    },
    {
        "id":299,
        "response":" def check(lst, n):\n        return all(x in lst for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])"
    },
    {
        "id":300,
        "response":" from typing import List\n\n     def match_num(s: str) -> str:\n         for i in range(1, len(s) + 1):\n             if s.startswith(str(i)):\n                 return str(i)\n         return \"No match found\""
    },
    {
        "id":301,
        "response":" from math import gcd\nfrom typing import Tuple\n\ndef num_comm_div(n: int, n2: int) -> Tuple[int, int]:\n  return (abs(n), abs(n2))"
    },
    {
        "id":302,
        "response":" from typing import Tuple\n\n     def find(n, n2):\n        return n % n2, n \/\/ n2"
    },
    {
        "id":303,
        "response":" def add_consecutive_nums(lst):\n        return sum(lst[i] + lst[i+1] for i in range(len(lst)-1) if lst[i] != lst[i+1])"
    },
    {
        "id":304,
        "response":" from math import sqrt\n     from itertools import count\n     def sum_Of_Series(n):\n        return sum(i**3 for i in count(1) if i**3 <= n)"
    },
    {
        "id":305,
        "response":" def re_order(lst):\n        while lst and lst[-1] == 0:\n            lst.pop()\n        return lst"
    },
    {
        "id":306,
        "response":" from math import comb\n     def permutation_coefficient(n, k):\n        if k > n:\n            return 0\n        return comb(n, k)"
    },
    {
        "id":307,
        "response":" from typing import List\n\n     def remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n         return [word for word in lst if word not in lst2]"
    },
    {
        "id":308,
        "response":" from typing import List\n\n     def same_order(list1: List, list2: List) -> bool:\n        return list1 == list2"
    },
    {
        "id":309,
        "response":" from typing import List\n\n     def average_Odd(n: int) -> float:\n        return sum(i for i in range(n) if i % 2 != 0) \/ n"
    },
    {
        "id":310,
        "response":" from itertools import combinations\n\n     def no_of_subsequences(lst, k):\n        return sum(1 for a in combinations(lst, k) if any(x <= y for x, y in combinations(a, 2)))"
    },
    {
        "id":311,
        "response":" from functools import lru_cache\n\ndef find_Min_Sum(n):\n  @lru_cache(None)\n  def dfs(node, sum):\n    if node == 1:\n      return sum\n    if node == 0:\n      return float('inf')\n    return min(dfs(node-1, sum+node), dfs(node-2, sum))\n\n  return dfs(n, 0)"
    },
    {
        "id":312,
        "response":" from collections import Counter\n     def count_element_freq(tup):\n        return Counter(tup)"
    },
    {
        "id":313,
        "response":" from typing import List\n\ndef add_str(tup: List[str], s: str) -> List[str]:\n  return tup + [s]"
    },
    {
        "id":314,
        "response":" from typing import Tuple\n\n     def sum_elements(tup: Tuple[int, int, int]) -> int:\n        return tup[0] + tup[1] + tup[2]"
    },
    {
        "id":315,
        "response":" from typing import List\n\n     def modular_sum(lst: List[int], m: int) -> bool:\n         return sum(lst) % m == 0"
    },
    {
        "id":316,
        "response":" from typing import List\n\n     def radix_sort(lst: List[int]) -> List[int]:\n        RADIX = 10\n        placement = 1\n        max_digit = max(lst)\n        while placement < max_digit:\n            buckets = [list() for _ in range(RADIX)]\n            for i in lst:\n                tmp = int((i \/ placement) % RADIX)\n                buckets[tmp].append(i)\n            a = 0\n            for b in range(RADIX):\n                buck = buckets[b]\n                for i in buck:\n                    lst[a] = i\n                    a += 1\n            placement *= RADIX\n        return lst"
    },
    {
        "id":317,
        "response":" from typing import List\n\n     def largest_pos(lst: List[int]) -> int:\n        return max(lst)"
    },
    {
        "id":318,
        "response":" from math import sqrt\n     def sqrt_root(n):\n        return sqrt(n)"
    },
    {
        "id":319,
        "response":" from math import sqrt\n\nfrom typing import List, Tuple\n\ndef volume_tetrahedron(n: float) -> float:\n    return n**3 \/ 6"
    },
    {
        "id":320,
        "response":" from math import gcd\nfrom typing import List\n\ndef get_lcm(lst: List[int]) -> int:\n    def lcm(a, b):\n        return a * b \/\/ gcd(a, b)\n\n    result = lst[0]\n    for i in lst[1:]:\n        result = lcm(result, i)\n    return result"
    },
    {
        "id":321,
        "response":" from typing import List\n\n     def check_isosceles(a: int, b: int, c: int) -> bool:\n        return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"
    },
    {
        "id":322,
        "response":" from typing import List\n\ndef lbs(lst: List[int]) -> int:\n     return max(lst, key=len)"
    },
    {
        "id":323,
        "response":" from typing import List\n\n     def check_string(s: str) -> bool:\n        for char in s:\n            if not (char.isalpha() or char.isdigit() or char.isalnum()):\n                return False\n            if char.isupper():\n                if s.count(char) > 1:\n                    return False\n            if char.islower():\n                if s.count(char) > 1:\n                    return False\n        return True"
    },
    {
        "id":324,
        "response":" from typing import List\n\n     def max_sum_increasing_subsequence(lst: List[int]) -> int:\n         if not lst:\n             return 0\n         dp = [lst[0]]\n         for i in range(1, len(lst)):\n             if lst[i] > dp[-1]:\n                 dp.append(lst[i])\n             else:\n                 idx = binary_search(dp, lst[i])\n                 dp[idx] = lst[i]\n         return sum(dp)\n\n     def binary_search(arr, target):\n         left, right = 0, len(arr) - 1\n         while left <= right:\n             mid = (left + right) \/\/ 2\n             if arr[mid] == target:\n                 return mid\n             elif arr[mid] < target:\n                 left = mid + 1\n             else:\n                 right = mid - 1\n         return left"
    },
    {
        "id":325,
        "response":" from typing import List\n\n     def parallel_lines(lst: List, lst2: List) -> bool:\n         return lst == lst2"
    },
    {
        "id":326,
        "response":" from typing import List\n\ndef capitalize_first_last_letters(s: str) -> str:\n        return s[0].upper() + s[1:-1] + s[-1].upper()"
    },
    {
        "id":327,
        "response":" from typing import List, Tuple\n\n     def get_pairs_count(lst: List[int], n: int) -> int:\n        count = 0\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                if lst[i] + lst[j] == n:\n                    count += 1\n        return count"
    },
    {
        "id":328,
        "response":" from typing import List\n\n     def min_length(lst: List[int]) -> int:\n        return min(lst)"
    },
    {
        "id":329,
        "response":" from math import sqrt\nfrom collections import deque\n\ndef jacobsthal_lucas(n):\n    a, b = 2, 3\n    for _ in range(n):\n        a, b = b, a + b\n    return b"
    },
    {
        "id":330,
        "response":" from typing import List\n\n     def negative_count(lst: List[int]) -> float:\n        return sum(1 for x in lst if x < 0) \/ len(lst)"
    },
    {
        "id":331,
        "response":" def min_coins(lst, n, n2):\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        for i in lst:\n            for j in range(n, i - 1, -1):\n                dp[j] = min(dp[j], dp[j - i] + 1)\n        return dp[n]"
    },
    {
        "id":332,
        "response":" from itertools import permutations\n\n     def check_permutation(s, s2):\n        return s in permutations(s2)"
    },
    {
        "id":333,
        "response":" from typing import Any, Tuple\n\ndef remove_datatype(tup: Tuple[Any, Any], param: Any) -> Tuple[Any, Any]:\n     return tup[:param] + tup[param+1:]"
    },
    {
        "id":334,
        "response":" from re import search\n\ndef search_literal(s, s2):\n     return search(s2, s).start()"
    },
    {
        "id":335,
        "response":" from math import pi\n\ndef topbottom_surfacearea(n):\n  return 2 * pi * n ** 2"
    },
    {
        "id":336,
        "response":" from typing import List\n\n     def nth_items(lst: List, n: int) -> int:\n         return lst[n-1] if n <= len(lst) else -1"
    },
    {
        "id":337,
        "response":" from collections import Counter\n\ndef first_repeated_word(s):\n  words = s.split()\n  counter = Counter(words)\n  for word in words:\n    if counter[word] == 1:\n      return word\n  return None"
    },
    {
        "id":338,
        "response":" from typing import List\n\n     def string_list_to_tuple(s: List[str]) -> tuple:\n         return tuple(s)"
    },
    {
        "id":339,
        "response":" from typing import List\n     from math import sqrt\n     def basesnum_coresspondingnum(lst, lst2):\n        dict={}\n        for i in range(len(lst)):\n            dict[lst[i]]=[]\n            for j in range(len(lst2)):\n                if sqrt(lst2[j])%1==0 and lst[i]>0:\n                    dict[lst[i]].append(lst2[j])\n        return dict"
    },
    {
        "id":340,
        "response":" from typing import List\nfrom collections import Counter\n\ndef find_Diff(lst: List[int]) -> int:\n    freq = Counter(lst)\n    return max(freq.values()) - min(freq.values())"
    },
    {
        "id":341,
        "response":" from math import sqrt\n\ndef check_abundant(n):\n  s = 0\n  for i in range(1, int(sqrt(n)) + 1):\n    if n % i == 0:\n      if i * i != n:\n        s += i + n \/\/ i\n      else:\n        s += i\n  return s > n"
    },
    {
        "id":342,
        "response":" from re import sub\n     def fill_spaces(s):\n        return sub(r'[,\\. ]', '|', s)\n     print(fill_spaces(\"Hello, World!\"))"
    },
    {
        "id":343,
        "response":" from typing import List\n\n     def count_digits(n, n2):\n        return len(str(n + n2))"
    },
    {
        "id":344,
        "response":" from typing import List, Tuple\n\n     def flatten_tuple(tup: Tuple) -> List:\n         return list(tup)"
    },
    {
        "id":345,
        "response":" def toggle_F_and_L_bits(n):\n        return (n ^ (n & 0xAAAAAAAA)) & 0xFFFFFFFF"
    },
    {
        "id":346,
        "response":" from typing import List\n\n     def last_occurence_char(s: str, s2: str) -> int:\n        return s.rfind(s2[-1])"
    },
    {
        "id":347,
        "response":" from itertools import accumulate\nfrom typing import List\n\ndef Total_Hamming_Distance(n: int) -> int:\n  def hamming_distance(a: int, b: int) -> int:\n    return bin(a^b).count('1')\n\n  return sum(list(accumulate(range(1, n+1), hamming_distance)))"
    },
    {
        "id":348,
        "response":" from typing import List\n\n     def longest_increasing_subsequence(lst: List[int]) -> int:\n         if not lst:\n             return 0\n         dp = [1] * len(lst)\n         for i in range(1, len(lst)):\n             for j in range(i):\n                 if lst[i] > lst[j]:\n                     dp[i] = max(dp[i], dp[j] + 1)\n         return max(dp)"
    },
    {
        "id":349,
        "response":" from math import comb\n     def odd_Num_Sum(n):\n        return sum(comb(2*i, 4) for i in range(n))\n    "
    },
    {
        "id":350,
        "response":" from typing import List\n\n     def find_max(arr: List[int], n: int, n2: int) -> int:\n         if n2 == 0:\n             return arr[0]\n         else:\n             max_val = arr[0]\n             for i in range(n):\n                 if arr[i] > max_val:\n                     max_val = arr[i]\n             return max_val"
    },
    {
        "id":351,
        "response":" from typing import List\n\n     def extract_column(lst: List[List[int]], n: int) -> List[int]:\n         return [sublist[n] for sublist in lst]"
    },
    {
        "id":352,
        "response":" from typing import List\nfrom itertools import pairwise\n\ndef Seq_Linear(lst: List[int]) -> bool:\n     return len(set(pairwise(lst))) == len(lst)"
    },
    {
        "id":353,
        "response":" from typing import Tuple\n\n     def tuple_to_float(tup):\n        return tuple(float(i) for i in tup)"
    },
    {
        "id":354,
        "response":" from typing import List\n\ndef find_mysterious_numbers(lst: List[int]) -> List[int]:\n        def is_prime(n: int) -> bool:\n            if n <= 1:\n                return False\n            if n == 2:\n                return True\n            if n % 2 == 0:\n                return False\n            max_divisor = int(n**0.5) + 1\n            for d in range(3, max_divisor, 2):\n                if n % d == 0:\n                    return False\n            return True\n\n        return [n for n in lst if is_prime(n)]"
    },
    {
        "id":355,
        "response":" from math import sqrt\nfrom typing import List\n\ndef difference(n: int) -> int:\n    cubes = [i**3 for i in range(1, n+1)]\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum(cubes)"
    },
    {
        "id":356,
        "response":" from typing import List\n\n     def find_Odd_Pair(lst: List[int], n: int) -> List[int]:\n         return [(i, j) for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] ^ lst[j] == n]"
    },
    {
        "id":357,
        "response":" from typing import List\n\ndef toggle_string(s: str) -> str:\n        return ''.join(''.join(c if i % 2 == 0 else c.swapcase() for i, c in enumerate(s)) for j in range(0, len(s), 2))"
    },
    {
        "id":358,
        "response":" from typing import List\n\n     def digit_distance_nums(n: int, n2: int) -> int:\n        return abs(int(str(n)) - int(str(n2)))"
    },
    {
        "id":359,
        "response":" from typing import List\n\n     def max_sub_array_sum(lst: List[int], n: int) -> int:\n        max_sum = float('-inf')\n        current_sum = 0\n        for i in range(n):\n            current_sum += lst[i]\n            max_sum = max(max_sum, current_sum)\n            if current_sum < 0:\n                current_sum = 0\n        return max_sum"
    },
    {
        "id":360,
        "response":" from typing import Tuple\n\ndef union_elements(tup1: Tuple, tup2: Tuple) -> Tuple:\n     return tuple(set(tup1) | set(tup2))"
    },
    {
        "id":361,
        "response":" from typing import List\n\n     def assign_elements(lst: List[int]) -> List[int]:\n         if len(lst) < 2:\n             return lst\n         lst.sort()\n         i = 0\n         while i < len(lst) - 1:\n             if lst[i] == lst[i + 1]:\n                 lst[i] = lst[i + 1]\n                 lst.pop(i + 1)\n             else:\n                 i += 1\n         return lst"
    },
    {
        "id":362,
        "response":" from typing import List\n\n     def find_max_length(lst: List) -> int:\n         return max(len(x) for x in lst)"
    },
    {
        "id":363,
        "response":" from re import search\n\ndef extract_values(s):\n    return search(r'\\d+', s).group()"
    },
    {
        "id":364,
        "response":" from typing import List\n\n     def count_Pairs(lst: List[int]) -> int:\n        return len([x for x in set(lst) if lst.count(x) % 2 != 0])"
    },
    {
        "id":365,
        "response":" from typing import List\n\n     def split(s: str) -> List[str]:\n         return s.split()"
    },
    {
        "id":366,
        "response":" from typing import List\n\n     def sum_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))"
    },
    {
        "id":367,
        "response":" def issort_list(lst):\n        def merge_sort(lst):\n            if len(lst) <= 1:\n                return lst\n            mid = len(lst) \/\/ 2\n            left = merge_sort(lst[:mid])\n            right = merge_sort(lst[mid:])\n            return merge(left, right)\n\n        def merge(left, right):\n            result = []\n            while len(left) > 0 and len(right) > 0:\n                if left[0] <= right[0]:\n                    result.append(left.pop(0))\n                else:\n                    result.append(right.pop(0))\n            result.extend(left)\n            result.extend(right)\n            return result\n\n        return merge_sort(lst)"
    },
    {
        "id":368,
        "response":" from typing import List\n\n     def empty_list(n: int) -> List[str]:\n         return ['' for _ in range(n)]"
    },
    {
        "id":369,
        "response":" from typing import List\n\ndef sort_sublists(lst: List[List[str]]) -> List[List[str]]:\n     return sorted(lst, key=lambda x: len(x))"
    },
    {
        "id":370,
        "response":" from typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n        return [word for word in lst if word not in lst2]"
    },
    {
        "id":371,
        "response":" from typing import List\n\n     def max_sum_pair_diff_lessthan_K(lst: List[int], n: int, k: int) -> int:\n         if n < 2:\n             return 0\n         lst.sort()\n         i = 0\n         j = n - 1\n         res = 0\n         while i < j:\n             if lst[i] + lst[j] <= k:\n                 res += lst[j]\n                 j -= 1\n             else:\n                 i += 1\n         return res"
    },
    {
        "id":372,
        "response":" from collections import Counter\n\ndef two_unique_nums(lst):\n  return [i for i in set(lst) if lst.count(i) == 1]"
    },
    {
        "id":373,
        "response":" from functools import reduce\nfrom operator import mul\n\ndef unique_product(lst):\n    return reduce(mul, list(set(lst)))"
    },
    {
        "id":374,
        "response":" from math import pi\n\ndef surfacearea_cylinder(r, h):\n    return 2 * pi * r * (r + h)"
    },
    {
        "id":375,
        "response":" from typing import List\n\n     def count_no(n: int, n2: int, n3: int, n4: int) -> int:\n         return n2 + n3 + n4"
    },
    {
        "id":376,
        "response":" def is_Sub_Array(lst, lst2):\n        m, n = len(lst), len(lst2)\n        i, j = 0, 0\n        while i < m and j < n:\n            if lst[i] == lst2[j]:\n                j += 1\n            i += 1\n        return j == n"
    },
    {
        "id":377,
        "response":" from math import factorial\n\ndef last_Digit_Factorial(n):\n    return str(factorial(n))[-1]"
    },
    {
        "id":378,
        "response":" from itertools import zip_longest\n\ndef interleave_lists(lst, lst2, lst3):\n  return [x for pair in zip_longest(lst, lst2, lst3) for x in pair if x is not None]"
    },
    {
        "id":379,
        "response":" from typing import Tuple\n\n     def find_dissimilar(tup: Tuple, tup2: Tuple) -> Tuple:\n        return tuple(i for i in tup if i not in tup2)"
    },
    {
        "id":380,
        "response":" from typing import Tuple\n\n     def extract_even(tup: Tuple) -> Tuple:\n        return tup[1]"
    },
    {
        "id":381,
        "response":" from math import pi\n\ndef surface_Area(n, n2):\n  return n**2 * n2 * (n * n + n2) \/ 2"
    },
    {
        "id":382,
        "response":" from typing import Dict\n\n     def my_dict(dct: Dict) -> bool:\n        return len(dct) == 0"
    },
    {
        "id":383,
        "response":" from math import comb\n\n     def catalan_number(n):\n        return comb(2*n, n) \/\/ (n+1)"
    },
    {
        "id":384,
        "response":" from re import findall\nfrom typing import List\n\ndef find_adverbs(s: str) -> List[tuple]:\n    adverbs = findall(r'\\b(an|very|well|really|extremely|really|extremely)\\b', s)\n    return adverbs"
    },
    {
        "id":385,
        "response":" from typing import List\n\n     def expensive_items(lst: List, n: int) -> List:\n         return [i for i in lst if i >= n]"
    },
    {
        "id":386,
        "response":" from typing import List\n\n     def split_Arr(lst: List[int], n: int, n2: int) -> List[List[int]]:\n         return [lst[i:i+n] for i in range(0, len(lst), n)]"
    },
    {
        "id":387,
        "response":" from typing import List, Tuple\n\ndef list_tuple(lst: List) -> Tuple:\n    return tuple(lst)"
    },
    {
        "id":388,
        "response":" def big_diff(lst):\n        return max(lst) - min(lst)"
    },
    {
        "id":389,
        "response":" from math import sqrt\n\ndef perfect_squares(a, b):\n    i = int(sqrt(b))\n    while i >= int(sqrt(a)):\n        if i * i == a and (i + 1) * (i + 1) == b:\n            return (i, i + 1)\n        i -= 1\n    return None"
    },
    {
        "id":390,
        "response":" from typing import Tuple\n\n     def polar_rect(r: float, theta: float) -> Tuple[float, float]:\n        x = round(r * math.cos(theta))\n        y = round(r * math.sin(theta))\n        return x, y"
    },
    {
        "id":391,
        "response":" def swap_list(lst):\n        if len(lst) <= 1:\n            return lst\n        return [lst[-1]] + swap_list(lst[:-1])"
    },
    {
        "id":392,
        "response":" from math import comb\n     def sum_Of_product(n):\n        return sum(comb(n, k) for k in range(n + 1))"
    },
    {
        "id":393,
        "response":" def removezero_ip(s):\n        return s.replace('0', '')"
    },
    {
        "id":394,
        "response":" def diff_even_odd(lst):\n        return lst[0] - lst[1] if len(lst) > 1 else None"
    },
    {
        "id":395,
        "response":" from typing import List\n\n     def min_Swaps(s: str, s2: str) -> int:\n        n = len(s)\n        m = len(s2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                elif s[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[n][m]"
    },
    {
        "id":396,
        "response":" from typing import Tuple\n\ndef tuple_size(tup: Tuple) -> int:\n    return len(tup)"
    },
    {
        "id":397,
        "response":" from typing import List\n\n     def find_kth(lst: List[int], lst2: List[int], n: int, n2: int, n3: int) -> int:\n        return lst[n2*n3]"
    },
    {
        "id":398,
        "response":" from typing import List\n\n     def armstrong_number(n: int) -> bool:\n        return n == sum(int(digit) ** len(str(n)) for digit in str(n))"
    },
    {
        "id":399,
        "response":" from typing import List\n\n     def sum_average(n: int) -> tuple:\n        total: int = 0\n        for i in range(1, n+1):\n            total += i\n        return total, total\/n"
    },
    {
        "id":400,
        "response":" from typing import Union\n\n     def is_Even(n: Union[int, float]) -> bool:\n         return n % 2 == 0"
    }
]