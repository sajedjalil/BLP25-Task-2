[
    {
        "id":1,
        "response":" ```python\nfrom typing import List\n\ndef max_chain_length(lst: List[List[int]], n: int) -> int:\n    lst.sort(key=lambda x: x[1])\n    count = 1\n    end = lst[0][1]\n    for i in range(1, n):\n        if lst[i][0] > end:\n            count += 1\n            end = lst[i][1]\n    return count\n```"
    },
    {
        "id":2,
        "response":" ```python\nfrom typing import Optional\n\ndef first_repeated_char(s: str) -> Optional[str]:\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n```"
    },
    {
        "id":3,
        "response":" ```python\ndef get_ludic(n):\n    ludic = [True] * (n + 1)\n    ludic[0] = ludic[1] = False\n    for i in range(2, n + 1):\n        if ludic[i]:\n            for j in range(i * 2, n + 1, i):\n                ludic[j] = False\n    return [i for i in range(1, n + 1) if ludic[i]]\n```"
    },
    {
        "id":4,
        "response":" ```python\ndef reverse_words(s):\n    import re\n    words = re.findall(r'\\S+', s)\n    return ' '.join(word[::-1] for word in words)\n```"
    },
    {
        "id":5,
        "response":" ```python\nimport math\n\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n```"
    },
    {
        "id":6,
        "response":"\r\nimport math\r\n\r\ndef radian_degree(n):\r\n    return n * math.pi \/ 180<|eot_id|>"
    },
    {
        "id":7,
        "response":" import re\n\ndef find_literals(s, s2):\n    matches = re.finditer(re.escape(s2), s)\n    return [match.start() for match in matches]assistant\n\n```python\nimport re\n\ndef find_literals(s, s2):\n    matches = re.finditer(re.escape(s2), s)\n    return [match.start() for match in matches]\n```"
    },
    {
        "id":8,
        "response":" ```python\nimport math\n\ndef bell_Number(n):\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n```"
    },
    {
        "id":9,
        "response":" ```python\nimport math\n\ndef floor_Min(n, n2, n3):\n    return min(math.floor(n), math.floor(n2), math.floor(n3))\n```"
    },
    {
        "id":10,
        "response":" ```python\ndef remove_kth_element(lst, n):\n    from typing import List\n    if n < 1 or n > len(lst):\n        return lst\n    return lst[:n-1] + lst[n:]\n```"
    },
    {
        "id":11,
        "response":" ```python\ndef max_of_nth(lst, n):\n    import operator\n    return max(map(operator.itemgetter(n), lst))\n```"
    },
    {
        "id":12,
        "response":" ```python\nfrom typing import List\n\ndef merge(lst: List[List[int]]) -> List[int]:\n    first_elements = [sublist[0] for sublist in lst if sublist]\n    last_elements = [sublist[-1] for sublist in lst if sublist]\n    return first_elements + last_elements\n```"
    },
    {
        "id":13,
        "response":" ```python\nfrom typing import List, Tuple, Any\n\ndef maximum_value(lst: List[Tuple[Any, ...]]) -> Any:\n    return max(max(t) for t in lst)\n```"
    },
    {
        "id":14,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef cummulative_sum(lst: List[Tuple[int]]) -> List[int]:\n    total = 0\n    result = []\n    for tup in lst:\n        for val in tup:\n            total += val\n            result.append(total)\n    return result\n```<|eot_id|>"
    },
    {
        "id":15,
        "response":" ```python\nfrom typing import Tuple\n\ndef average_tuple(tup: Tuple[Tuple[int, ...], ...]) -> float:\n    total_sum = sum(sum(inner_tup) for inner_tup in tup)\n    total_count = sum(len(inner_tup) for inner_tup in tup)\n    return total_sum \/ total_count if total_count != 0 else 0.0\n```"
    },
    {
        "id":16,
        "response":" ```python\ndef tuple_modulo(tup1, tup2):\n    return tuple(a % b for a, b in zip(tup1, tup2))\n```"
    },
    {
        "id":17,
        "response":" ```python\nimport math\n\ndef min_Jumps(d, n2, n3):\n    if d == 0:\n        return 0\n    if n2 == 0 and n3 == 0:\n        return -1\n    if n2 == n3:\n        if d % n2 == 0:\n            return d \/\/ n2\n        else:\n            return -1\n    gcd = math.gcd(n2, n3)\n    if d % gcd != 0:\n        return -1\n    a, b, g = extended_gcd(n2, n3)\n    a *= d \/\/ g\n    b *= d \/\/ g\n    k1 = math.ceil(-a \/ (n3 \/\/ g))\n    a += k1 * (n3 \/\/ g)\n    b -= k1 * (n2 \/\/ g)\n    k2 = math.ceil(b \/ (n2 \/\/ g))\n    a -= k2 * (n3 \/\/ g)\n    b += k2 * (n2 \/\/ g)\n    k3 = math.floor(a \/ (n3 \/\/ g))\n    a -= k3 * (n3 \/\/ g)\n    b += k3 * (n2 \/\/ g)\n    k4 = math.floor(-b \/ (n2 \/\/ g))\n    a += k4 * (n3 \/\/ g)\n    b -= k4 * (n2 \/\/ g)\n    ans = float('inf')\n    if a >= 0:\n        ans = min(ans, a)\n    if b >= 0:\n        ans = min(ans, b)\n    if ans == float('inf'):\n        return -1\n    return ans\n\ndef extended_gcd(a, b):\n    if a == 0:\n        return 0, 1, b\n    x, y, g = extended_gcd(b % a, a)\n    return y - (b \/\/ a) * x, x, g\n```"
    },
    {
        "id":18,
        "response":" ```python\nfrom typing import List, Any\n\ndef div_list(lst1: List[Any], lst2: List[Any]) -> List[Any]:\n    return list(map(lambda x, y: x \/ y if y != 0 else float('inf'), lst1, lst2))\n```"
    },
    {
        "id":19,
        "response":" ```python\nimport re\n\ndef move_num(s):\n    nums = re.findall('\\d', s)\n    non_nums = re.sub('\\d', '', s)\n    return non_nums + ''.join(nums)\n```"
    },
    {
        "id":20,
        "response":" ```python\nfrom typing import List\nimport itertools\n\ndef largest_subset(lst: List[int], n: int) -> List[int]:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    max_len = 0\n    max_subset = []\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if all((x % y == 0 or y % x == 0) for x, y in itertools.combinations(subset, 2)):\n                if len(subset) > max_len:\n                    max_len = len(subset)\n                    max_subset = list(subset)\n    return max_subset\n```"
    },
    {
        "id":21,
        "response":" ```python\nimport re\n\ndef increment_numerics(lst, k):\n    result = []\n    for s in lst:\n        result.append(re.sub(r'\\d+', lambda x: str(int(x.group()) + k), s))\n    return result\n```"
    },
    {
        "id":22,
        "response":" ```python\nimport typing\n\ndef get_median(lst: typing.List[int], lst2: typing.List[int], n: int) -> float:\n    merged = sorted(lst + lst2)\n    if n % 2 == 0:\n        return (merged[n\/\/2 - 1] + merged[n\/\/2]) \/ 2\n    else:\n        return merged[n\/\/2]\n```"
    },
    {
        "id":23,
        "response":" ```python\nfrom typing import List\n\ndef nth_nums(lst: List[int], n: int) -> List[int]:\n    return list(map(lambda x: x ** n, lst))\n```"
    },
    {
        "id":24,
        "response":" ```python\ndef is_upper(s: str) -> str:\n    return s.upper()\n```"
    },
    {
        "id":25,
        "response":" ```python\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":26,
        "response":" ```python\nimport math\n\ndef triangle_area(n):\n    return (n ** 2) \/ 2\n```"
    },
    {
        "id":27,
        "response":" ```python\nimport typing\n\ndef find_First_Missing(lst: typing.List[int], n: int, n2: int) -> int:\n    s = set(lst)\n    for i in range(n2):\n        if i not in s:\n            return i\n    return n2\n```<|eot_id|>"
    },
    {
        "id":28,
        "response":" def replace_spaces(s):\n        return s.replace(' ', '%20')<|eot_id|>"
    },
    {
        "id":29,
        "response":" ```python\nfrom typing import List, Union\n\ndef Split(lst: List[Union[int, str]]) -> List[int]:\n    return [i for i in lst if isinstance(i, int) and i % 2 == 0]\n```"
    },
    {
        "id":30,
        "response":" ```python\nfrom typing import Tuple, List\n\ndef get_coordinates(tup: Tuple[int, int]) -> List[Tuple[int, int]]:\n    x, y = tup\n    coordinates = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return coordinates\n```"
    },
    {
        "id":31,
        "response":" import re\n\ndef replace_spaces(s):\n    s = re.sub(r'\\s', '_', s)\n    s = re.sub(r'_', ' ', s, count=s.count('_') - s.count(' '))\n    return s<|eot_id|>"
    },
    {
        "id":32,
        "response":" ```python\nfrom typing import List\n\ndef move_zero(lst: List[int]) -> List[int]:\n    return [i for i in lst if i != 0] + [0] * lst.count(0)\n```"
    },
    {
        "id":33,
        "response":" ```python\nfrom typing import List\n\ndef pair_OR_Sum(lst: List[int], n: int) -> int:\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += lst[i] ^ lst[j]\n    return total\n```<|eot_id|>"
    },
    {
        "id":34,
        "response":" ```python\ndef even_Power_Sum(n):\n    import math\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**4\n    return sum\n```"
    },
    {
        "id":35,
        "response":" import heapq\n\ndef heap_sort(lst):\n    heap = []\n    for val in lst:\n        heapq.heappush(heap, val)\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "id":36,
        "response":" ```python\nimport typing\n\ndef Check_Solution(a: float, b: float, c: float) -> bool:\n    if a == 0:\n        return False\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        return False\n    root1 = (-b + determinant**0.5) \/ (2*a)\n    root2 = (-b - determinant**0.5) \/ (2*a)\n    return root1 * root2 == -1\n```"
    },
    {
        "id":37,
        "response":" ```python\ndef noprofit_noloss(selling_price, cost_price):\n    return selling_price == cost_price\n```"
    },
    {
        "id":38,
        "response":" ```python\nimport math\n\ndef wind_chill(temperature, wind_speed):\n    if temperature > 50 or wind_speed < 3:\n        return temperature\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)\n    return round(wind_chill_index, 2)\n```"
    },
    {
        "id":39,
        "response":" ```python\ndef sample_nam(lst):\n    import re\n    return sum(len(name) for name in lst if re.match('^[A-Z]', name))\n```"
    },
    {
        "id":40,
        "response":" ```python\nimport re\ndef remove_parenthesis(text):\n    return re.sub(r'\\([^)]*\\)', '', text)\n```"
    },
    {
        "id":41,
        "response":" ```python\ndef is_nonagonal(n):\n    i = 1\n    count = 0\n    while True:\n        nonagonal_num = i * (7 * i - 5) \/\/ 2\n        if nonagonal_num == n:\n            return True\n        elif nonagonal_num > n:\n            return False\n        i += 1\n```"
    },
    {
        "id":42,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef remove_similar_row(matrix: List[Tuple[int, ...]]) -> List[Tuple[int, ...]]:\n    seen = set()\n    result = []\n    for row in matrix:\n        row_tuple = tuple(sorted(row))\n        if row_tuple not in seen:\n            seen.add(row_tuple)\n            result.append(row)\n    return result\n```"
    },
    {
        "id":43,
        "response":" import re\ndef text_match_wordz_middle(s):\n    pattern = r'\\b\\w+z\\w+\\b'\n    return re.findall(pattern, s)assistant<|end_header_id|>\n\n```python\nimport re\ndef text_match_wordz_middle(s):\n    pattern = r'\\b\\w+z\\w+\\b'\n    return re.findall(pattern, s)\n```"
    },
    {
        "id":44,
        "response":" ```python\nfrom typing import List\n\ndef reverse_Array_Upto_K(lst: List[int], n: int) -> List[int]:\n    return lst[:n][::-1] + lst[n:]\n```"
    },
    {
        "id":45,
        "response":" ```python\nfrom typing import List, Tuple\nimport functools\nimport operator\n\ndef find_k_product(lst: List[Tuple[int]], n: int) -> int:\n    return functools.reduce(operator.mul, (t[n] for t in lst), 1)\n```<|eot_id|>"
    },
    {
        "id":46,
        "response":" ```python\nimport math\n\ndef No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3\n```"
    },
    {
        "id":47,
        "response":" import re\ndef split_upperstring(s):\n    return re.sub('([A-Z])', r' \\1', s).strip().split()"
    },
    {
        "id":48,
        "response":" ```python\nfrom typing import List\n\ndef exchange_elements(lst: List[int]) -> List[int]:\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n```"
    },
    {
        "id":49,
        "response":" ```python\ndef sum_Range_list(lst, n, n2):\n    from typing import List\n    if not isinstance(lst, list) or not all(isinstance(i, (int, float)) for i in lst):\n        raise TypeError(\"Input must be a list of numbers\")\n    if not isinstance(n, int) or not isinstance(n2, int):\n        raise TypeError(\"Indices must be integers\")\n    if n < 0 or n2 < 0 or n >= len(lst) or n2 >= len(lst):\n        raise IndexError(\"Index out of range\")\n    if n > n2:\n        n, n2 = n2, n\n    return sum(lst[n:n2+1])\n```"
    },
    {
        "id":50,
        "response":" ```python\nfrom typing import List\n\ndef are_Equal(lst: List[int], lst2: List[int], n: int, n2: int) -> bool:\n    if n != n2:\n        return False\n    count_dict = {}\n    for num in lst:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    for num in lst2:\n        count_dict[num] = count_dict.get(num, 0) - 1\n    for count in count_dict.values():\n        if count != 0:\n            return False\n    return True\n```"
    },
    {
        "id":51,
        "response":" ```python\ndef check_subset(tup1, tup2):\n    return set(tup1).issubset(set(tup2))\n```"
    },
    {
        "id":52,
        "response":" ```python\nfrom typing import List, Tuple, Any\n\ndef matrix_to_list(matrix: Tuple[Tuple[Any, ...], ...]) -> List[Tuple[Any, ...]]:\n    return list(zip(*matrix))\n```"
    },
    {
        "id":53,
        "response":" from collections import defaultdict\nfrom itertools import groupby\n\ndef grouping_dictionary(lst):\n    lst.sort(key=lambda x: x[0])\n    result = defaultdict(list)\n    for key, group in groupby(lst, lambda x: x[0]):\n        result[key] = [value for _, value in group]\n    return dict(result)assistant<|end_header_id|>\n\n```python\nfrom collections import defaultdict\nfrom itertools import groupby\n\ndef grouping_dictionary(lst):\n    lst.sort(key=lambda x: x[0])\n    result = defaultdict(list)\n    for key, group in groupby(lst, lambda x: x[0]):\n        result[key] = [value for _, value in group]\n    return dict(result)\n```"
    },
    {
        "id":54,
        "response":"\r\ndef rectangle_perimeter(length, width):\r\n    return 2 * (length + width)\r\n    \r\nrectangle_perimeter(5, 3)assistant\n\ndef rectangle_perimeter(length, width):\n    return 2 * (length + width)|eot_id|>"
    },
    {
        "id":55,
        "response":" ```python\ndef fifth_Power_Sum(n: int) -> int:\n    return sum(i ** 5 for i in range(1, n + 1))\n```"
    },
    {
        "id":56,
        "response":" ```python\nfrom typing import List\n\ndef find_Min_Sum(lst: List[int], lst2: List[int], n: int) -> int:\n    lst.sort()\n    lst2.sort(reverse=True)\n    return sum(abs(a - b) for a, b in zip(lst, lst2))\n```"
    },
    {
        "id":57,
        "response":" import math\n\ndef first_Digit(n):\n    fact = math.factorial(n)\n    while fact >= 10:\n        fact \/\/= 10\n    return fact<|eot_id|>"
    },
    {
        "id":58,
        "response":" from collections import Counter\n\ndef max_occurrences(lst):\n    if not lst:\n        return None\n    count = Counter(lst)\n    return max(count, key=count.get)"
    },
    {
        "id":59,
        "response":" ```python\nfrom typing import List\n\ndef Repeat(lst: List[int]) -> None:\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count > 1:\n            print(num)\n```"
    },
    {
        "id":60,
        "response":" ```python\ndef find_Points(n, n2, n3, n4):\n    import itertools\n    range1 = list(range(n, n2 + 1))\n    range2 = list(range(n3, n4 + 1))\n    all_points = list(itertools.chain(range1, range2))\n    common_points = list(set(range1) & set(range2))\n    result = [point for point in all_points if point not in common_points]\n    return result\n```"
    },
    {
        "id":61,
        "response":" ```python\ndef max_sum_of_three_consecutive(lst, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return lst[0]\n    if n == 2:\n        return lst[0] + lst[1]\n\n    incl = lst[0]\n    excl = 0\n    incl_prev = incl\n    for i in range(1, n):\n        new_excl = max(incl, excl)\n        incl = excl + lst[i]\n        excl = new_excl\n        if i >= 2:\n            incl = max(incl, incl_prev + lst[i])\n        incl_prev = new_excl\n\n    return max(incl, excl)\n```"
    },
    {
        "id":62,
        "response":" ```python\nfrom typing import Dict\n\ndef sorted_dict(dct: Dict) -> Dict:\n    return dict(sorted(dct.items()))\n```"
    },
    {
        "id":63,
        "response":" ```python\nimport math\n\ndef find_max_val(x, y, n):\n    return n - (n % x - y + x) % x\n```"
    },
    {
        "id":64,
        "response":" ```python\ndef average_Even(n):\n    import numpy as np\n    numbers = np.arange(2, n, 2)\n    return np.mean(numbers)\n```"
    },
    {
        "id":65,
        "response":" ```python\ndef move_last(lst):\n    if len(lst) > 0:\n        first_element = lst.pop(0)\n        lst.append(first_element)\n```"
    },
    {
        "id":66,
        "response":" from collections import Counter\n\ndef count_char(s, s2):\n    counter = Counter(s)\n    return counter.get(s2, 0)"
    },
    {
        "id":67,
        "response":" ```python\nimport re\n\ndef Check_Vow(s, s2):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char in vowels:\n            count += 1\n    for char in s2:\n        if char in vowels:\n            count += 1\n    return count\n```"
    },
    {
        "id":68,
        "response":" import re\ndef replace(s, s2):\n    return re.sub(r'(.)\\1+', r'\\1', s)"
    },
    {
        "id":69,
        "response":" import re\ndef check_IP(s):\n    pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    return bool(re.match(pattern, s))"
    },
    {
        "id":70,
        "response":" ```python\nfrom typing import List\n\ndef decreasing_trend(lst: List[int]) -> bool:\n    return all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n```"
    },
    {
        "id":71,
        "response":" ```python\ndef set_Right_most_Unset_Bit(n):\n    import re\n    bin_n = bin(n)[2:]\n    match = re.search('0', bin_n)\n    if match:\n        rightmost_unset_bit_pos = len(bin_n) - match.start() - 1\n        return n | (1 << rightmost_unset_bit_pos)\n    else:\n        return n\n```"
    },
    {
        "id":72,
        "response":" def max_of_three(n, n2, n3):\n        return max(n, n2, n3)assistant\n\n```python\ndef max_of_three(n, n2, n3):\n    return max(n, n2, n3)\n```"
    },
    {
        "id":73,
        "response":" ```python\nfrom typing import List\n\ndef convert(lst: List[int]) -> int:\n    return int(''.join(map(str, lst)))\n```"
    },
    {
        "id":74,
        "response":" ```python\nfrom typing import List\nimport re\n\ndef remove_duplicate(s: str) -> str:\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    unique_words = list(dict.fromkeys(words))\n    return ' '.join(unique_words)\n```"
    },
    {
        "id":75,
        "response":" ```python\ndef sum_nums(n1, n2, n3, n4):\n    sum = n1 + n2\n    if n3 <= sum <= n4:\n        return 20\n    return sum\n```"
    },
    {
        "id":76,
        "response":" import re\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":77,
        "response":"\r\ndef validity_triangle(n, n2, n3):\r\n    return n + n2 > n3 and n + n3 > n2 and n2 + n3 > n"
    },
    {
        "id":78,
        "response":" ```python\nimport re\ndef remove_spaces(s: str) -> str:\n    return re.sub(' ', '', s)\n```"
    },
    {
        "id":79,
        "response":" ```python\ndef access_key(dct, n):\n    from typing import Dict, Any\n    keys = list(dct.keys())\n    if n < len(keys):\n        return keys[n]\n    else:\n        return None\n```"
    },
    {
        "id":80,
        "response":" ```python\nfrom typing import List\n\ndef increasing_trend(lst: List[int]) -> bool:\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1))\n```"
    },
    {
        "id":81,
        "response":" ```python\nimport math\n\ndef smallest_Divisor(n):\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n```"
    },
    {
        "id":82,
        "response":" ```python\nfrom typing import List\n\ndef mul_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x * y, lst1, lst2))\n```"
    },
    {
        "id":83,
        "response":" ```python\nimport math\n\ndef sum_Square(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        if math.sqrt(n - i * i) % 1 == 0:\n            return True\n    return False\n```"
    },
    {
        "id":84,
        "response":" ```python\nfrom collections import Counter\n\ndef count_Char(s: str, s2: str) -> int:\n    counter = Counter(s)\n    return sum(counter[c] for c in s2)\n```"
    },
    {
        "id":85,
        "response":" ```python\nimport math\n\ndef sum_Of_Primes(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n    return sum(i for i in range(2, n + 1) if primes[i])\n```"
    },
    {
        "id":86,
        "response":" ```python\nfrom typing import Tuple, Dict\nfrom collections import Counter\n\ndef freq_element(tup: Tuple) -> Dict:\n    return dict(Counter(tup))\n```"
    },
    {
        "id":87,
        "response":" def recur_gcd(n, n2):\n        if n2 == 0:\n            return n\n        else:\n            return recur_gcd(n2, n % n2)"
    },
    {
        "id":88,
        "response":" import math\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)assistant<|end_header_id|>\n\nimport math\ndef len_complex(real, imag):\n    return math.sqrt(real**2 + imag**2)"
    },
    {
        "id":89,
        "response":" ```python\nfrom typing import List\n\ndef min_jumps(lst: List[int], n: int) -> int:\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (lst[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (j + lst[j] >= i) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]\n```"
    },
    {
        "id":90,
        "response":" ```python\nfrom typing import List\n\ndef mul_consecutive_nums(lst: List[int]) -> List[int]:\n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] * lst[i + 1])\n    return result\n```"
    },
    {
        "id":91,
        "response":" from typing import List, Tuple\nfrom itertools import defaultdict\n\ndef group_element(lst: List[Tuple[int, int]]) -> dict:\n    result = defaultdict(list)\n    for key, value in lst:\n        result[value].append(key)\n    return dict(result)assistant<|end_header_id|>\n\nfrom typing import List, Tuple\nfrom itertools import defaultdict\n\ndef group_element(lst: List[Tuple[int, int]]) -> dict:\n    result = defaultdict(list)\n    for key, value in lst:\n        result[value].append(key)\n    return dict(result)"
    },
    {
        "id":92,
        "response":" ```python\nimport math\n\ndef last_Two_Digits(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 2:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial = (factorial * i) % 100\n    return factorial\n```"
    },
    {
        "id":93,
        "response":" import re\ndef remove_multiple_spaces(s):\n    return re.sub(' +', ' ', s)assistant\n\nimport re\ndef remove_multiple_spaces(s):\n    return re.sub(' +', ' ', s)"
    },
    {
        "id":94,
        "response":" ```python\nfrom typing import Dict, Any\n\ndef extract_unique(dct: Dict[Any, Any]) -> set:\n    return set(dct.values())\n```"
    },
    {
        "id":95,
        "response":" ```python\nfrom typing import Tuple\n\ndef check_greater(tup1: Tuple, tup2: Tuple) -> bool:\n    if len(tup1) != len(tup2):\n        return False\n    return all(x < y for x, y in zip(tup1, tup2))\n```"
    },
    {
        "id":96,
        "response":" from typing import List, Any\n\ndef zip_list(lst1: List[Any], lst2: List[Any]) -> List[Any]:\n    return [val for pair in zip(lst1, lst2) for val in pair] + lst1[len(lst2):] + lst2[len(lst1):]"
    },
    {
        "id":97,
        "response":" ```python\nfrom typing import List\n\ndef count_even(lst: List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 == 0, lst)))\n```"
    },
    {
        "id":98,
        "response":" ```python\nfrom typing import Dict, Tuple\n\ndef sort_dict_item(dct: Dict[Tuple, int]) -> Dict[Tuple, int]:\n    return dict(sorted(dct.items(), key=lambda item: tuple(i for i in item[0])))\n\n```"
    },
    {
        "id":99,
        "response":" ```python\nfrom collections import deque\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    if s == s2:\n        return 0\n    \n    s = list(s)\n    s2 = list(s2)\n    n = len(s)\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        if s[i] != s2[i]:\n            graph[i].append(i)\n    \n    visited = [False] * n\n    cycles = 0\n    for i in range(n):\n        if not visited[i] and s[i] != s2[i]:\n            queue = deque([i])\n            visited[i] = True\n            count0 = 0\n            count1 = 0\n            while queue:\n                node = queue.popleft()\n                if s[node] == '0':\n                    count0 += 1\n                else:\n                    count1 += 1\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        queue.append(neighbor)\n                        visited[neighbor] = True\n            cycles += min(count0, count1)\n    \n    return cycles\n```"
    },
    {
        "id":100,
        "response":" ```python\nfrom typing import List\n\ndef count_range_in_list(lst: List[int], n: int, n2: int) -> int:\n    return sum(1 for x in lst if n <= x <= n2)\n```"
    },
    {
        "id":101,
        "response":" ```python\ndef equilibrium_index(lst):\n    total_sum = sum(lst)\n    left_sum = 0\n    for i, num in enumerate(lst):\n        if left_sum == total_sum - left_sum - num:\n            return i\n        left_sum += num\n    return -1\n```<|eot_id|>"
    },
    {
        "id":102,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef removals(lst: List[int], n: int, n2: int) -> int:\n    lst.sort()\n    result = n\n    right = 0\n    for left in range(n):\n        while right < n and lst[right] - lst[left] <= n2:\n            right += 1\n        result = min(result, n - (right - left))\n    return result\n```"
    },
    {
        "id":103,
        "response":" ```python\ndef is_key_present(dct, n):\n    return n in dct\n```"
    },
    {
        "id":104,
        "response":"\r\ndef harmonic_sum(n):\r\n    return sum(1.0\/i for i in range(1, n))"
    },
    {
        "id":105,
        "response":" ```python\nfrom typing import List\n\ndef sort_sublists(lst: List[List[int]]) -> List[List[int]]:\n    return sorted(lst, key=lambda x: (len(x), x))\n```"
    },
    {
        "id":106,
        "response":" ```python\nfrom typing import List\n\ndef is_subset(lst: List[int], n: int, lst2: List[int], n2: int) -> bool:\n    set1 = set(lst[:n])\n    set2 = set(lst2[:n2])\n    return set2.issubset(set1)\n```"
    },
    {
        "id":107,
        "response":" ```python\ndef count_Set_Bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('1')\n    return count\n```"
    },
    {
        "id":108,
        "response":" ```python\ndef Convert(s):\n    return list(s)\n```"
    },
    {
        "id":109,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef get_unique(lst: List[Tuple]) -> dict:\n    result = {}\n    for tup in lst:\n        for val in tup:\n            if val not in result:\n                result[val] = 1\n            else:\n                result[val] += 1\n    return {k: v for k, v in result.items() if v == 1}\n```"
    },
    {
        "id":110,
        "response":" ```python\ndef front_and_rear(tup):\n    if len(tup) < 2:\n        return None\n    return (tup[0], tup[-1])\n```<|eot_id|>"
    },
    {
        "id":111,
        "response":" ```python\ndef product_Equal(n):\n    import math\n    digits = [int(d) for d in str(n)]\n    even_product = math.prod(digits[::2])\n    odd_product = math.prod(digits[1::2])\n    return even_product % 2 == odd_product % 2\n```"
    },
    {
        "id":112,
        "response":" ```python\nfrom typing import List\n\ndef remove_duplicate(lst: List) -> List:\n    return list(dict.fromkeys(lst))\n```"
    },
    {
        "id":113,
        "response":" ```python\nfrom typing import Tuple, Any\n\ndef check_valid(tup: Tuple[Any, ...]) -> bool:\n    return all(val is not None and val != '' for val in tup)\n```"
    },
    {
        "id":114,
        "response":" ```python\nfrom collections import defaultdict\n\ndef count_Fac(n):\n    factors = defaultdict(int)\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n            factors[i] += 1\n    if n > 1:\n        factors[n] += 1\n    return len(factors)\n```"
    },
    {
        "id":115,
        "response":" ```python\ndef str_to_tuple(s):\n    import re\n    return tuple(map(int, re.findall(r'\\d+', s)))\n```"
    },
    {
        "id":116,
        "response":" ```python\ndef rombus_perimeter(n):\n    return 4 * n\n```"
    },
    {
        "id":117,
        "response":" import math\n\ndef sd_calc(lst):\n    n = len(lst)\n    mean = sum(lst) \/ n\n    variance = sum((x - mean) ** 2 for x in lst) \/ n\n    return math.sqrt(variance)"
    },
    {
        "id":118,
        "response":" ```python\ndef alternate_elements(lst):\n    return lst[::2]\n```"
    },
    {
        "id":119,
        "response":" import re\ndef text_match(s):\n    pattern = r'^ab*$'\n    return bool(re.match(pattern, s))<|eot_id|>"
    },
    {
        "id":120,
        "response":" ```python\nfrom typing import Tuple, Dict, Any\n\ndef add_dict_to_tuple(tup: Tuple, dct: Dict) -> Tuple:\n    return tup + (dct,)\n```"
    },
    {
        "id":121,
        "response":" ```python\nimport numpy as np\n\ndef maxAverageOfPath(matrix, n):\n    dp = np.zeros((n, n))\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[n-1][n-1] \/ (2*n - 1)\n```"
    },
    {
        "id":122,
        "response":" ```python\nfrom typing import Dict\n\ndef filter_data(dct: Dict[str, Dict[str, int]], height: int, weight: int) -> Dict[str, Dict[str, int]]:\n    return {key: value for key, value in dct.items() if value['height'] > height and value['weight'] > weight}\n```"
    },
    {
        "id":123,
        "response":" ```python\nfrom typing import List\n\ndef count_same_pair(lst: List[int], lst2: List[int]) -> int:\n    return sum(map(lambda x, y: x == y, lst, lst2))\n```"
    },
    {
        "id":124,
        "response":" ```python\ndef power_base_sum(base, power):\n    import math\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n```"
    },
    {
        "id":125,
        "response":" ```python\nimport re\nfrom typing import List\n\ndef extract_quotation(s: str) -> List[str]:\n    return re.findall(r'\"([^\"]*)\"', s)\n```"
    },
    {
        "id":126,
        "response":" ```python\nfrom typing import Tuple\n\ndef multiply_elements(tup: Tuple) -> list:\n    return [tup[i] * tup[i+1] for i in range(len(tup)-1)]\n```"
    },
    {
        "id":127,
        "response":" import re\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)assistant\n\nimport re\ndef remove_char(s):\n    return re.sub('[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":128,
        "response":" ```python\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(sum, zip(lst1, lst2)))\n```"
    },
    {
        "id":129,
        "response":" from typing import List\n\ndef add_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x + y, lst1, lst2))assistant<|end_header_id|>\nfrom typing import List\n\ndef add_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x + y, lst1, lst2))"
    },
    {
        "id":130,
        "response":" from itertools import groupby\n\ndef consecutive_duplicates(lst):\n    return [key for key, _ in groupby(lst)]<|eot_id|>"
    },
    {
        "id":131,
        "response":" import math\ndef lateralsurface_cone(r, l):\n    return math.pi * r * l<|eot_id|>"
    },
    {
        "id":132,
        "response":" import re\ndef replace_specialchar(s: str) -> str:\n    return re.sub('[ ,.]', ':', s)assistant\n\nimport re\ndef replace_specialchar(s: str) -> str:\n    return re.sub('[ ,.]', ':', s)"
    },
    {
        "id":133,
        "response":" from typing import List\n\ndef find_first_occurrence(lst: List[int], n: int) -> int:\n    left, right = 0, len(lst) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] == n:\n            result = mid\n            right = mid - 1\n        elif lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n    <|eot_id|>"
    },
    {
        "id":134,
        "response":" ```python\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(lst: List[int], n: int) -> int:\n    mod = 10**9 + 7\n    prefix = [1] * (n + 1)\n    for i in range(n):\n        prefix[i + 1] = prefix[i] * lst[i] % mod\n    \n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = prefix[j + 1] * pow(prefix[i], mod - 2, mod) % mod\n            total_sum = (total_sum + prod) % mod\n    \n    return total_sum\n```"
    },
    {
        "id":135,
        "response":" ```python\ndef toggle_middle_bits(n):\n    import math\n    count = int(math.log(n, 2)) + 1\n    mask = ((1 << count) - 1) ^ (1 << (count - 1)) ^ 1\n    return n ^ mask\n```"
    },
    {
        "id":136,
        "response":" from typing import List\nimport bisect\n\ndef left_insertion(lst: List[int], n: int) -> int:\n    return bisect.bisect_left(lst, n)assistant<|end_header_id|>\n\n```python\nfrom typing import List\nimport bisect\n\ndef left_insertion(lst: List[int], n: int) -> int:\n    return bisect.bisect_left(lst, n)\n```"
    },
    {
        "id":137,
        "response":" import re\ndef check_str(s):\n    return bool(re.match('^[aeiouAEIOU]', s))<|eot_id|>"
    },
    {
        "id":138,
        "response":" ```python\ndef geometric_sum(n):\n    if n <= 0:\n        return 0\n    return (1 - (1\/2)**n) \/ (1 - 1\/2)\n```"
    },
    {
        "id":139,
        "response":" ```python\nimport math\n\ndef find_Index(n):\n    i = 1\n    while True:\n        triangular_num = i * (i + 1) \/\/ 2\n        if len(str(triangular_num)) >= n:\n            return i\n        i += 1\n```"
    },
    {
        "id":140,
        "response":" ```python\ndef tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}\n```"
    },
    {
        "id":141,
        "response":" def all_Characters_Same(s):\n        return len(set(s)) == 1\n    <|eot_id|>"
    },
    {
        "id":142,
        "response":" import math\ndef area_tetrahedron(n):\n    return math.sqrt(3) * n * n<|eot_id|>"
    },
    {
        "id":143,
        "response":" from typing import List\n     from collections import deque\n\ndef rotate_right(lst: List[int], n: int, n2: int) -> List[int]:\n    d = deque(lst)\n    d.rotate(n)\n    return list(d)assistant\n\n```python\nfrom typing import List\nfrom collections import deque\n\ndef rotate_right(lst: List[int], n: int, n2: int) -> List[int]:\n    d = deque(lst)\n    d.rotate(n)\n    return list(d)\n```"
    },
    {
        "id":144,
        "response":" ```python\ndef check_none(tup):\n    return any(i is None for i in tup)\n```"
    },
    {
        "id":145,
        "response":" ```python\ndef divisible_by_digits(n1, n2):\n    def is_divisible(num):\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n\n    return [num for num in range(n1, n2+1) if is_divisible(num)]\n```"
    },
    {
        "id":146,
        "response":"\r\nimport math\r\n\r\ndef sector_area(radius, angle):\r\n    return (angle \/ 360) * math.pi * radius ** 2\r\n    \r\n    \r\n    <|eot_id|>"
    },
    {
        "id":147,
        "response":" ```python\ndef lcs_of_three(s, s2, s3, n, n2, n3):\n    import numpy as np\n    dp = np.zeros((n + 1, n2 + 1, n3 + 1), dtype=int)\n    for i in range(1, n + 1):\n        for j in range(1, n2 + 1):\n            for k in range(1, n3 + 1):\n                if s[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1\n                else:\n                    dp[i, j, k] = max(dp[i - 1, j, k], dp[i, j - 1, k], dp[i, j, k - 1], dp[i - 1, j - 1, k], dp[i - 1, j, k - 1], dp[i, j - 1, k - 1])\n    return dp[n, n2, n3]\n```"
    },
    {
        "id":148,
        "response":" import re\ndef capital_words_spaces(s):\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", s)assistant<|end_header_id||>"
    },
    {
        "id":149,
        "response":" ```python\nfrom typing import List\n\ndef sort_numeric_strings(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: int(x))\n```"
    },
    {
        "id":150,
        "response":" ```python\ndef add_tuple(lst, tup):\n    lst.append(tup)\n    return lst\n```"
    },
    {
        "id":151,
        "response":" ```python\nimport typing\n\ndef check_min_heap(lst: typing.List[int], n: int) -> bool:\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n\n        if left_child < n and lst[i] > lst[left_child]:\n            return False\n\n        if right_child < n and lst[i] > lst[right_child]:\n            return False\n\n    return True\n```"
    },
    {
        "id":152,
        "response":" ```python\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * a + b\n    return b\n```"
    },
    {
        "id":153,
        "response":" ```python\nimport heapq\nfrom typing import List, Tuple, Any\n\ndef min_k(lst: List[Tuple[Any, ...]], n: int) -> List[Tuple[Any, ...]]:\n    return heapq.nsmallest(n, lst)\n```"
    },
    {
        "id":154,
        "response":" ```python\nfrom typing import List\n\ndef extract_index_list(lst: List[int], lst2: List[int], lst3: List[int]) -> List[int]:\n    set1 = set(lst)\n    set2 = set(lst2)\n    set3 = set(lst3)\n    common_elements = set1 & set2 & set3\n    return list(common_elements)\n```"
    },
    {
        "id":155,
        "response":" ```python\nimport typing\n\ndef second_smallest(lst: typing.List[int]) -> int:\n    if len(lst) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    unique_nums = set(lst)\n    if len(unique_nums) < 2:\n        raise ValueError(\"List must contain at least two distinct elements\")\n    return sorted(unique_nums)[1]\n```"
    },
    {
        "id":156,
        "response":" import re\ndef text_match_zero_one(s):\n    pattern = r'^0*1?$'\n    return bool(re.match(pattern, s))<|eot_id|>"
    },
    {
        "id":157,
        "response":" ```python\nfrom typing import List\n\ndef count_reverse_pairs(lst: List[str]) -> int:\n    count = 0\n    seen = set()\n    for s in lst:\n        if s[::-1] in seen:\n            count += 1\n        seen.add(s)\n    return count\n```"
    },
    {
        "id":158,
        "response":" ```python\nfrom typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    seen = set()\n    count = 0\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in seen:\n            seen.add(sublist_tuple)\n            count += 1\n    return count\n```"
    },
    {
        "id":159,
        "response":" import re\ndef is_decimal(s):\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, s))<|eot_id|>"
    },
    {
        "id":160,
        "response":" ```python\nfrom typing import List\n\ndef unique_Element(lst: List[int], n: int) -> bool:\n    return len(set(lst)) == 1\n```"
    },
    {
        "id":161,
        "response":"\r\nimport math\r\n\r\ndef arc_length(radius, angle):\r\n    return radius * angle * math.pi \/ 180\r\n    \r\n    <|eot_id|>"
    },
    {
        "id":162,
        "response":" ```python\ndef check_monthnumber_number(n):\n    return n in [4, 6, 9, 11]\n```"
    },
    {
        "id":163,
        "response":" ```python\nimport typing\n\ndef find_Min_Diff(tup: typing.Tuple[int], n: int) -> int:\n    tup = sorted(tup)\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = abs(tup[i] - tup[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```"
    },
    {
        "id":164,
        "response":" import re\ndef number_ctr(s):\n    return len(re.findall(r'\\d', s))<|eot_id|>"
    },
    {
        "id":165,
        "response":" ```python\ndef is_polite(n):\n    import itertools\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n\n    polite_numbers = set()\n    for r in range(1, n + 1):\n        for combo in itertools.combinations(primes, r):\n            num = sum(combo)\n            polite_numbers.add(num)\n\n    polite_numbers = sorted(list(polite_numbers))\n    return polite_numbers[n-1]\n```"
    },
    {
        "id":166,
        "response":" from typing import Iterable, Any\n     from itertools import tee\n\ndef pair_wise(lst: Iterable[Any]) -> Iterable[tuple[Any, Any]]:\n    a, b = tee(lst)\n    next(b, None)\n    return zip(a, b)"
    },
    {
        "id":167,
        "response":" ```python\nfrom typing import List\nfrom collections import defaultdict\n\ndef get_Pairs_Count(lst: List[int], n: int, sum: int) -> int:\n    count_map = defaultdict(int)\n    twice_count = 0\n    for i in range(n):\n        twice_count += count_map[sum - lst[i]]\n        count_map[lst[i]] += 1\n    return twice_count\n```"
    },
    {
        "id":168,
        "response":" ```python\ndef check_Odd_Parity(n: int) -> bool:\n    return bin(n).count('1') % 2 != 0\n```"
    },
    {
        "id":169,
        "response":" ```python\nfrom typing import List\n\ndef Diff(lst1: List, lst2: List) -> List:\n    return list(set(lst1) - set(lst2)) + list(set(lst2) - set(lst1))\n```"
    },
    {
        "id":170,
        "response":" ```python\ndef odd_Num_Sum(n):\n    import math\n    sum = 0\n    for i in range(n):\n        sum += (2 * i + 1) ** 4\n    return sum\n```"
    },
    {
        "id":171,
        "response":" ```python\ndef check_expression(s):\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack\n```"
    },
    {
        "id":172,
        "response":" ```python\nimport re\ndef remove_length(s, n):\n    words = re.findall(r'\\b\\w+\\b', s)\n    filtered_words = [word for word in words if len(word) != n]\n    return ' '.join(filtered_words)\n```"
    },
    {
        "id":173,
        "response":" ```python\nimport re\ndef occurance_substring(s, s2):\n    matches = re.finditer(s2, s)\n    return [(m.start(), m.end()) for m in matches]\n```"
    },
    {
        "id":174,
        "response":" ```python\nimport re\n\ndef check_email(s):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":175,
        "response":" ```python\nfrom typing import List\n\ndef odd_position(lst: List[int]) -> bool:\n    return all(not num % 2 or i % 2 == 0 for i, num in enumerate(lst))\n```"
    },
    {
        "id":176,
        "response":" ```python\nimport re\n\ndef count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(1, len(s) - 1):\n        if s[i] not in vowels and (s[i-1] in vowels or s[i+1] in vowels):\n            count += 1\n    if len(s) > 1 and (s[0] not in vowels and s[1] in vowels):\n        count += 1\n    if len(s) > 1 and (s[-1] not in vowels and s[-2] in vowels):\n        count += 1\n    return count\n```"
    },
    {
        "id":177,
        "response":" ```python\nfrom typing import List\nfrom collections import Counter\n\ndef find_Sum(lst: List[int], n: int) -> int:\n    count = Counter(lst)\n    return sum(i for i in lst if count[i] == 1)\n```"
    },
    {
        "id":178,
        "response":" from typing import List, Any\nfrom itertools import groupby\n\ndef pack_consecutive_duplicates(lst: List[Any]) -> List[List[Any]]:\n    return [list(g) for k, g in groupby(lst)]<|eot_id|>"
    },
    {
        "id":179,
        "response":" ```python\nfrom typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    seen = set()\n    count = 0\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in seen:\n            seen.add(sublist_tuple)\n            count += 1\n    return count\n```"
    },
    {
        "id":180,
        "response":" ```python\nfrom typing import List, Tuple\nimport itertools\n\ndef find_combinations(lst: List[Tuple[int]]) -> List[Tuple[int]]:\n    result = []\n    for r in range(1, len(lst) + 1):\n        for combination in itertools.combinations(lst, r):\n            sums = [sum(t) for t in itertools.product(*combination)]\n            result.extend(sums)\n    return list(set(result))\n```<|eot_id|>"
    },
    {
        "id":181,
        "response":" ```python\nimport math\n\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0\n```"
    },
    {
        "id":182,
        "response":" ```python\ndef Odd_Length_Sum(lst):\n    n = len(lst)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for i in range(n - length + 1):\n            total_sum += sum(lst[i:i + length])\n    return total_sum\n```"
    },
    {
        "id":183,
        "response":" ```python\nimport colorsys\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r \/ 255.0, g \/ 255.0, b \/ 255.0\n    h, s, v = colorsys.rgb_to_hsv(r, g, b)\n    return round(h * 360), round(s * 100), round(v * 100)\n```"
    },
    {
        "id":184,
        "response":" ```python\ndef mul_even_odd(lst):\n    from functools import reduce\n    even = next((i for i in lst if i % 2 == 0), None)\n    odd = next((i for i in lst if i % 2 != 0), None)\n    if even is None or odd is None:\n        return None\n    return even * odd\n```"
    },
    {
        "id":185,
        "response":" ```python\nfrom ast import literal_eval\n\ndef tuple_str_int(s):\n    return literal_eval(s)\n```"
    },
    {
        "id":186,
        "response":" from typing import List\nimport bisect\n\ndef right_insertion(lst: List[int], n: int) -> int:\n    return bisect.bisect_right(lst, n)"
    },
    {
        "id":187,
        "response":" import re\ndef text_match_three(s):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, s))<|eot_id|>"
    },
    {
        "id":188,
        "response":" ```python\nfrom typing import List, Any\n\ndef new_tuple(lst: List[Any], s: str) -> tuple:\n    return tuple([s] + lst)\n```"
    },
    {
        "id":189,
        "response":" ```python\nimport math\n\ndef perimeter_polygon(n, n2):\n    return n * n2\n```"
    },
    {
        "id":190,
        "response":" ```python\ndef even_position(lst):\n    from typing import List\n    return all(num % 2 == 0 for idx, num in enumerate(lst) if idx % 2 == 0)\n```"
    },
    {
        "id":191,
        "response":" ```python\nimport typing\n\ndef remove_nested(tup: typing.Tuple) -> typing.List:\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result\n```"
    },
    {
        "id":192,
        "response":" ```python\nfrom typing import List\n\ndef count_list(lst: List) -> int:\n    return len(lst)\n```"
    },
    {
        "id":193,
        "response":" ```python\nfrom typing import List\n\ndef last(lst: List[int], n: int, target: int) -> int:\n    for i in range(n - 1, -1, -1):\n        if lst[i] == target:\n            return i\n    return -1\n```"
    },
    {
        "id":194,
        "response":" import re\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))<|eot_id|>"
    },
    {
        "id":195,
        "response":" ```python\nimport heapq\nfrom typing import List\n\ndef cheap_items(lst: List[int], n: int) -> List[int]:\n    return heapq.nsmallest(n, lst)\n```"
    },
    {
        "id":196,
        "response":"\r\ndef return_sum(dct):\r\n    return sum(dct.values())<|eot_id|>"
    },
    {
        "id":197,
        "response":" ```python\nimport math\n\ndef sum_in_Range(l, r):\n    sum_odd = ((r + 1) \/\/ 2) ** 2\n    sum_even = (r \/\/ 2) ** 2\n    sum_r = sum_odd - sum_even\n    \n    sum_odd = (l \/\/ 2) ** 2\n    sum_even = ((l - 1) \/\/ 2) ** 2\n    sum_l = sum_odd - sum_even\n    \n    return sum_r - sum_l + l if l % 2 != 0 else sum_r - sum_l\n```"
    },
    {
        "id":198,
        "response":" ```python\nfrom typing import List\n\ndef _sum(lst: List[int]) -> int:\n    total = 0\n    for num in lst:\n        total += num\n    return total\n```"
    },
    {
        "id":199,
        "response":" ```python\ndef left_Rotate(n, d):\n    import ctypes\n    num_bits = ctypes.sizeof(ctypes.c_int) * 8\n    d = d % num_bits\n    return (n << d) | (n >> (num_bits - d))\n```"
    },
    {
        "id":200,
        "response":" import re\ndef remove_all_spaces(s):\n    return re.sub(r'\\s+', '', s) |eot_id|>"
    },
    {
        "id":201,
        "response":" ```python\nfrom typing import Tuple\n\ndef test_three_equal(n: int, n2: int, n3: int) -> int:\n    nums = [n, n2, n3]\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    max_count = max(count_dict.values(), default=0)\n    return max_count if max_count > 1 else 0\n```"
    },
    {
        "id":202,
        "response":" ```python\nfrom typing import List\n\ndef count_Rotation(lst: List[int], n: int) -> int:\n    min_val = min(lst)\n    return lst.index(min_val)\n```"
    },
    {
        "id":203,
        "response":" import math\ndef is_Perfect_Square(n):\n    if n < 0:\n        return False\n    sqrt = math.sqrt(n)\n    return sqrt == int(sqrt)assistant<|end_header_id|>"
    },
    {
        "id":204,
        "response":" ```python\nimport typing\n\ndef is_Product_Even(lst: typing.List[int], n: int) -> bool:\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product % 2 == 0\n```"
    },
    {
        "id":205,
        "response":" ```python\nimport typing\n\ndef max_sum_list(lst: typing.List[typing.List[int]]) -> typing.List[int]:\n    return max(lst, key=sum, default=[])\n```"
    },
    {
        "id":206,
        "response":"\r\nimport re\r\n\r\ndef max_run_uppercase(s):\r\n    return max(map(len, re.findall(r'[A-Z]+', s)), default=0)\r\n\n```"
    },
    {
        "id":207,
        "response":" ```python\nfrom typing import List, Optional\n\ndef first_odd(lst: List[int]) -> Optional[int]:\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None\n```"
    },
    {
        "id":208,
        "response":" ```python\ndef check_K(tup, k):\n    return k in tup\n```"
    },
    {
        "id":209,
        "response":" ```python\nfrom typing import Tuple\n\ndef check_smaller(tup1: Tuple, tup2: Tuple) -> bool:\n    if len(tup1) != len(tup2):\n        return False\n    return all(x > y for x, y in zip(tup1, tup2))\n```"
    },
    {
        "id":210,
        "response":" from collections import Counter\nfrom typing import Any\n\ndef count_variable(*args: Any) -> dict[Any, int]:\n    return dict(Counter(args))<|eot_id|>"
    },
    {
        "id":211,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef check_identical(lst1: List[Tuple], lst2: List[Tuple]) -> bool:\n    if len(lst1) != len(lst2):\n        return False\n    return set(lst1) == set(lst2)\n```"
    },
    {
        "id":212,
        "response":" import re\ndef road_rd(s):\n    return re.sub('road', 'rd.', s)assistant\n\nimport re\ndef road_rd(s):\n    return re.sub('road', 'rd.', s, flags=re.IGNORECASE)"
    },
    {
        "id":213,
        "response":" def string_length(s: str) -> int:\n        return len(s)assistant\n\n```python\ndef string_length(s: str) -> int:\n    return len(s)\n```"
    },
    {
        "id":214,
        "response":" ```python\ndef rombus_area(d1, d2):\n    return (d1 * d2) \/ 2\n```"
    },
    {
        "id":215,
        "response":" ```python\ndef sort_by_dnf(lst, n):\n    low = 0\n    mid = 0\n    high = n - 1\n    while mid <= high:\n        if lst[mid] == 0:\n            lst[low], lst[mid] = lst[mid], lst[low]\n            low += 1\n            mid += 1\n        elif lst[mid] == 1:\n            mid += 1\n        else:\n            lst[mid], lst[high] = lst[high], lst[mid]\n            high -= 1\n    return lst\n```"
    },
    {
        "id":216,
        "response":" ```python\ndef clear_tuple(tup):\n    return ()\n```"
    },
    {
        "id":217,
        "response":" ```python\nfrom typing import List\n\ndef div_of_nums(lst: List[int], n: int, m: int) -> List[int]:\n    return list(filter(lambda x: x % n == 0 or x % m == 0, lst))\n```"
    },
    {
        "id":218,
        "response":" ```python\nimport re\ndef lower_ctr(s):\n    return len(re.findall(r'[a-z]', s))\n```"
    },
    {
        "id":219,
        "response":" ```python\nfrom typing import List\nfrom itertools import groupby\n\ndef count_duplic(lst: List[int]) -> List[int]:\n    return [len(list(g)) for k, g in groupby(lst) if len(list(g)) > 1]\n```"
    },
    {
        "id":220,
        "response":"\r\ndef check_monthnum_number(n):\r\n    return n in [2]"
    },
    {
        "id":221,
        "response":" ```python\ndef merge_dictionaries(dct, dct2):\n    return {**dct, **dct2}\n```"
    },
    {
        "id":222,
        "response":" import re\ndef pass_validity(s):\n    if len(s) < 8:\n        return False\n    if not re.search(\"[a-z]\", s):\n        return False\n    if not re.search(\"[A-Z]\", s):\n        return False\n    if not re.search(\"[0-9]\", s):\n        return False\n    if not re.search(\"[_@$]\", s):\n        return False\n    return True<|eot_id|>"
    },
    {
        "id":223,
        "response":" import re\ndef check_substring(s, s2):\n    pattern = re.escape(s2)\n    return bool(re.match(pattern, s))<|eot_id|>"
    },
    {
        "id":224,
        "response":" ```python\nfrom typing import List\n\ndef remove_even(lst: List[int]) -> List[int]:\n    return [num for num in lst if num % 2 != 0]\n```"
    },
    {
        "id":225,
        "response":" ```python\nfrom typing import List, Any\n\ndef access_elements(lst: List[Any], indices: List[int]) -> List[Any]:\n    return [lst[i] for i in indices if i < len(lst)]\n```"
    },
    {
        "id":226,
        "response":" ```python\nimport math\n\ndef check_Type_Of_Triangle(n1, n2, n3):\n    sides = sorted([n1, n2, n3])\n    if sides[0] + sides[1] <= sides[2] or sides[0] <= 0:\n        return \"Not a Triangle\"\n    elif sides[0] == sides[1] == sides[2]:\n        return \"Equilateral\"\n    elif sides[0] == sides[1] or sides[1] == sides[2]:\n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            return \"Right Isosceles\"\n        else:\n            return \"Isosceles\"\n    elif sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return \"Right Scalene\"\n    else:\n        return \"Scalene\"\n```"
    },
    {
        "id":227,
        "response":" ```python\nimport typing\n\ndef sum_column(lst: typing.List[typing.List[int]], n: int) -> int:\n    return sum(row[n] for row in lst if n < len(row))\n```"
    },
    {
        "id":228,
        "response":"\r\nimport re\r\n\r\ndef count_alpha_dig_spl(s: str) -> tuple:\r\n    alpha_count = len(re.findall(r'[a-zA-Z]', s))\r\n    dig_count = len(re.findall(r'\\d', s))\r\n    spl_count = len(re.findall(r'[^a-zA-Z0-9]', s))\r\n    return alpha_count, dig_count, spl_count<|eot_id|>"
    },
    {
        "id":229,
        "response":" ```python\nfrom collections import Counter\n\ndef second_frequent(lst):\n    count = Counter(lst)\n    freq = sorted(count.values(), reverse=True)\n    if len(freq) < 2 or freq[0] == freq[1]:\n        return None\n    second_max_freq = freq[1]\n    result = [k for k, v in count.items() if v == second_max_freq]\n    return result[0] if result else None\n```"
    },
    {
        "id":230,
        "response":" import math\ndef round_up(n, n2):\n    return math.ceil(n \/ n2) * n2<|eot_id|>"
    },
    {
        "id":231,
        "response":" ```python\nfrom typing import List\nfrom collections import Counter\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    count = Counter(lst)\n    total = 0\n    for value in count.values():\n        total += value * (value - 1) \/\/ 2\n    return total\n```"
    },
    {
        "id":232,
        "response":" ```python\nimport re\ndef extract_max(s: str) -> int:\n    numbers = list(map(int, re.findall(r'\\d+', s)))\n    return max(numbers) if numbers else 0\n```"
    },
    {
        "id":233,
        "response":" ```python\ndef get_key(dct):\n    return list(dct.keys())\n```"
    },
    {
        "id":234,
        "response":" import numpy as np\n\ndef generate_matrix(n):\n    matrix = np.zeros((n, n), dtype=int)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    dir_index = 0\n    row, col = 0, 0\n    for i in range(n * n):\n        matrix[row, col] = 2 ** (i + 1)\n        next_row, next_col = row + directions[dir_index][0], col + directions[dir_index][1]\n        if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row, next_col] == 0:\n            row, col = next_row, next_col\n        else:\n            dir_index = (dir_index + 1) % 4\n            row, col = row + directions[dir_index][0], col + directions[dir_index][1]\n    return matrix.tolist()"
    },
    {
        "id":235,
        "response":" ```python\nfrom typing import Union\n\ndef slope(x1: Union[int, float], y1: Union[int, float], x2: Union[int, float], y2: Union[int, float]) -> Union[float, str]:\n    if x1 == x2:\n        return 'undefined'\n    return (y2 - y1) \/ (x2 - x1)\n```"
    },
    {
        "id":236,
        "response":" ```python\nimport typing\n\ndef max_sub_array_sum(lst: typing.List[int], n: int) -> int:\n    max_sum = float('-inf')\n    max_length = 0\n    current_sum = 0\n    start = 0\n\n    for end in range(n):\n        current_sum += lst[end]\n\n        while current_sum < 0 and start <= end:\n            current_sum -= lst[start]\n            start += 1\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = end - start + 1\n        elif current_sum == max_sum:\n            max_length = max(max_length, end - start + 1)\n\n    return max_length\n```"
    },
    {
        "id":237,
        "response":" ```python\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n, 2))\n```"
    },
    {
        "id":238,
        "response":" ```python\nfrom itertools import zip_longest\n\ndef min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    count = 0\n    for a, b in zip_longest(s1, s2):\n        if a != b:\n            count += 1\n    return count \/\/ 2\n```"
    },
    {
        "id":239,
        "response":" ```python\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[0])\n```"
    },
    {
        "id":240,
        "response":" ```python\nimport math\n\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return False\n    root1 = (-b + math.sqrt(d)) \/ (2 * a)\n    root2 = (-b - math.sqrt(d)) \/ (2 * a)\n    return math.isclose(root1, -root2)\n```"
    },
    {
        "id":241,
        "response":" ```python\nfrom typing import List\n\ndef get_inv_count(lst: List[int], n: int) -> int:\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] > lst[j]:\n                inv_count += 1\n    return inv_count\n```"
    },
    {
        "id":242,
        "response":" ```python\nfrom collections import Counter\n\ndef get_odd_occurence(lst, n):\n    count = Counter(lst)\n    for num, freq in count.items():\n        if freq % 2 != 0:\n            return num\n    return -1\n```"
    },
    {
        "id":243,
        "response":" import heapq\n\ndef nth_super_ugly_number(n, primes):\n    ugly = [1]\n    heap = []\n    for prime in primes:\n        heapq.heappush(heap, prime)\n    seen = set([1])\n    for _ in range(n - 1):\n        num = heapq.heappop(heap)\n        for prime in primes:\n            new_num = num * prime\n            if new_num not in seen:\n                seen.add(new_num)\n                heapq.heappush(heap, new_num)\n    return heapq.heappop(heap)"
    },
    {
        "id":244,
        "response":" ```python\nimport typing\n\ndef get_Number(n: int, k: int) -> int:\n    arr = list(range(1, n + 1))\n    odd = [x for x in arr if x % 2 != 0]\n    even = [x for x in arr if x % 2 == 0]\n    new_arr = odd + even\n    if k > len(new_arr):\n        return -1\n    return new_arr[k - 1]\n```<|eot_id|>"
    },
    {
        "id":245,
        "response":" import math\n\ndef find_Digits(n):\n    count = 0\n    if n < 0:\n        return 0\n    factorial = math.factorial(n)\n    while factorial > 0:\n        factorial \/\/= 10\n        count += 1\n    return count\n    <|eot_id|>"
    },
    {
        "id":246,
        "response":" ```python\nimport heapq\nfrom typing import List\n\ndef find_platform(arr: List[int], dep: List[int], n: int) -> int:\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        result = max(result, plat_needed)\n    return result\n```"
    },
    {
        "id":247,
        "response":" ```python\ndef lcopy(lst):\n    import copy\n    return copy.deepcopy(list(lst[0]))\n```"
    },
    {
        "id":248,
        "response":"\r\ndef area_trapezium(a, b, height):\r\n    return 0.5 * (a + b) * height<|eot_id|>"
    },
    {
        "id":249,
        "response":" ```python\ndef Sum(n):\n    return sum(int(digit) for digit in str(n))\n```"
    },
    {
        "id":250,
        "response":"\r\ndef is_triangleexists(a, b, c):\r\n    return a + b > c and a + c > b and b + c > a\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    "
    },
    {
        "id":251,
        "response":" ```python\nimport math\n\ndef Sum_of_Inverse_Divisors(n, n2):\n    sum = 0.0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/ i == i:\n                sum = sum + 1.0 \/ i\n            else:\n                sum = sum + 1.0 \/ i + 1.0 \/ (n \/ i)\n    return sum\n```"
    },
    {
        "id":252,
        "response":" ```python\nimport typing\n\ndef remove_negs(lst: typing.List[int]) -> typing.List[int]:\n    return [num for num in lst if num >= 0]\n```"
    },
    {
        "id":253,
        "response":" ```python\nimport math\n\ndef sum_of_odd_Factors(n):\n    sum = 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count += 1\n            n = n \/\/ i\n            curr_term *= i\n            curr_sum += curr_term\n        sum *= curr_sum\n    if n >= 2:\n        sum *= (1 + n)\n    return sum\n```"
    },
    {
        "id":254,
        "response":" import heapq\n\ndef raw_heap(lst):\n    heapq.heapify(lst)\n    return lst<|eot_id|>"
    },
    {
        "id":255,
        "response":" ```python\ndef check_Even_Parity(n: int) -> bool:\n    return bin(n).count('1') % 2 == 0\n```"
    },
    {
        "id":256,
        "response":" ```python\nfrom typing import List\n\ndef find_Min_Swaps(lst: List[int], n: int) -> int:\n    ones = sum(lst)\n    cnt_one = 0\n    max_cnt_one = 0\n    left = 0\n    for right in range(n):\n        cnt_one += lst[right]\n        if right - left + 1 > ones:\n            cnt_one -= lst[left]\n            left += 1\n        max_cnt_one = max(max_cnt_one, cnt_one)\n    return ones - max_cnt_one\n```"
    },
    {
        "id":257,
        "response":" ```python\nfrom typing import List\n\ndef listify_list(lst: List[str]) -> List[List[str]]:\n    return list(map(list, lst))\n```"
    },
    {
        "id":258,
        "response":" def count_list(lst):\n        import itertools\n        return list(itertools.chain(*lst))<|eot_id|>"
    },
    {
        "id":259,
        "response":" ```python\nfrom typing import List\n\ndef sub_lists(lst: List) -> List[List]:\n    sublists = [[]]\n    for i in range(len(lst) + 1):\n        for j in range(i):\n            sublists.append(lst[j: i])\n    return sublists\n```"
    },
    {
        "id":260,
        "response":" ```python\ndef check_alphanumeric(s):\n    import re\n    return bool(re.search(r'[a-zA-Z0-9]$', s))\n```"
    },
    {
        "id":261,
        "response":" ```python\nfrom typing import List\nfrom collections import Counter\n\ndef anagram_lambda(lst: List[str], s: str) -> List[str]:\n    s_count = Counter(s)\n    return list(filter(lambda x: Counter(x) == s_count, lst))\n```"
    },
    {
        "id":262,
        "response":" ```python\nimport re\nfrom collections import Counter\n\ndef n_common_words(s, n):\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    freq = Counter(words)\n    return freq.most_common(n)\n```"
    },
    {
        "id":263,
        "response":" ```python\nfrom typing import List\n\ndef find_longest_conseq_subseq(lst: List[int], n: int) -> int:\n    s = set(lst)\n    max_len = 0\n    for num in s:\n        if num - 1 not in s:\n            curr_num = num\n            curr_len = 1\n            while curr_num + 1 in s:\n                curr_num += 1\n                curr_len += 1\n            max_len = max(max_len, curr_len)\n    return max_len\n```"
    },
    {
        "id":264,
        "response":" ```python\nfrom typing import List\n\ndef palindrome_lambda(lst: List[str]) -> List[str]:\n    return list(filter(lambda s: s == s[::-1], lst))\n```"
    },
    {
        "id":265,
        "response":" ```python\nfrom typing import List, Any\n\ndef ntimes_list(lst: List[Any], n: int) -> None:\n    list(map(lambda x: print(x), lst * n))\n```"
    },
    {
        "id":266,
        "response":" ```python\nimport calendar\n\ndef check_monthnumb(s):\n    month_name = s.capitalize()\n    for i in range(1, 13):\n        if calendar.month_name[i] == month_name:\n            return calendar.monthrange(2024, i)[1] == 31\n    return False\n```"
    },
    {
        "id":267,
        "response":" ```python\nfrom typing import List\n\ndef min_Num(lst: List[int], n: int) -> int:\n    total_sum = sum(lst)\n    if total_sum % 2 == 0:\n        return 0\n    else:\n        return 1\n```"
    },
    {
        "id":268,
        "response":" ```python\nimport re\ndef length_Of_Last_Word(s: str) -> int:\n    s = re.sub(r'\\s+$', '', s)\n    words = s.split()\n    if not words:\n        return 0\n    return len(words[-1])\n```<|eot_id|>"
    },
    {
        "id":269,
        "response":" ```python\nfrom typing import List\n\ndef remove_list_range(lst: List[int], n: int, n2: int) -> List[int]:\n    return [i for i in lst if n <= i <= n2]\n```"
    },
    {
        "id":270,
        "response":" ```python\nfrom typing import List\n\ndef sum_positivenum(lst: List[int]) -> int:\n    return sum(filter(lambda x: x > 0, lst))\n```"
    },
    {
        "id":271,
        "response":" ```python\ndef are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return s2 in s1 + s1\n```"
    },
    {
        "id":272,
        "response":" ```python\nfrom typing import List, Any\n\ndef check_subset(lst1: List[Any], lst2: List[Any]) -> bool:\n    def flatten(lst: List[Any]) -> List[Any]:\n        return [item for sublist in lst for item in (flatten(sublist) if isinstance(sublist, list) else [sublist])]\n\n    return set(flatten(lst2)).issubset(set(flatten(lst1)))\n```"
    },
    {
        "id":273,
        "response":" def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"
    },
    {
        "id":274,
        "response":" ```python\nfrom typing import List\n\ndef check_Concat(s1: str, s2: str) -> bool:\n    if len(s1) != len(s2)*2:\n        return False\n    s2_s2 = s2 + s2\n    return s1 in s2_s2\n```"
    },
    {
        "id":275,
        "response":" ```python\nfrom typing import Tuple\n\ndef min_difference(lst: Tuple[Tuple[int, int], ...]) -> int:\n    return min(abs(x - y) for x, y in lst)\n```"
    },
    {
        "id":276,
        "response":" import math\n\ndef lcm(n, n2):\n    return abs(n*n2) \/\/ math.gcd(n, n2)"
    },
    {
        "id":277,
        "response":" ```python\ndef sort_String(s):\n    return ''.join(sorted(s))\n```"
    },
    {
        "id":278,
        "response":" ```python\nfrom typing import Tuple, List\n\ndef check_tuples(tup: Tuple, lst: List[int]) -> bool:\n    k = len(lst)\n    return len(tup) == k\n```"
    },
    {
        "id":279,
        "response":" import re\ndef text_match(s):\n    pattern = re.compile(r'^a.*b$')\n    return bool(pattern.match(s))<|eot_id|>"
    },
    {
        "id":280,
        "response":" ```python\nimport math\n\ndef Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d > 0:\n        return 2\n    elif d == 0:\n        return 1\n    else:\n        return 0\n```"
    },
    {
        "id":281,
        "response":" ```python\ndef sum_even_odd(lst):\n    import itertools\n    even_sum = sum(itertools.filterfalse(lambda x: x % 2, lst))\n    odd_sum = sum(itertools.filterfalse(lambda x: not x % 2, lst))\n    return even_sum, odd_sum\n```"
    },
    {
        "id":282,
        "response":" def parallelogram_perimeter(a, b):\n        return 2 * (a + b)"
    },
    {
        "id":283,
        "response":" ```python\nfrom typing import List\n\ndef div_of_nums(lst: List[int], n: int, n2: int) -> List[int]:\n    return list(filter(lambda x: x % n == 0 and x % n2 == 0, lst))\n```"
    },
    {
        "id":284,
        "response":" ```python\ndef all_Bits_Set_In_The_Given_Range(n, left, right):\n    import math\n    mask = ((1 << (right - left + 1)) - 1) << left\n    return (n & mask) == mask\n```"
    },
    {
        "id":285,
        "response":" ```python\nfrom typing import Dict\n\ndef is_Isomorphic(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    \n    s_to_s2: Dict[str, str] = {}\n    s2_to_s: Dict[str, str] = {}\n    \n    for c1, c2 in zip(s, s2):\n        if c1 not in s_to_s2 and c2 not in s2_to_s:\n            s_to_s2[c1] = c2\n            s2_to_s[c2] = c1\n        elif s_to_s2.get(c1) != c2 or s2_to_s.get(c2) != c1:\n            return False\n    \n    return True\n```"
    },
    {
        "id":286,
        "response":" ```python\nfrom typing import Tuple\n\ndef sum_num(tup: Tuple[int, ...]) -> float:\n    if not tup:\n        return 0.0\n    return sum(tup) \/ len(tup)\n```"
    },
    {
        "id":287,
        "response":" def is_odd(n: int) -> bool:\n        return (n & 1) != 0<|eot_id|>"
    },
    {
        "id":288,
        "response":" ```python\nfrom typing import Tuple\n\ndef substract_elements(tup1: Tuple, tup2: Tuple) -> Tuple:\n    return tuple(a - b for a, b in zip(tup1, tup2))\n```"
    },
    {
        "id":289,
        "response":" ```python\nfrom typing import List\n\ndef reverse_list_lists(lst: List[List[int]]) -> List[List[int]]:\n    return [sublist[::-1] for sublist in lst]\n```"
    },
    {
        "id":290,
        "response":" ```python\nfrom typing import List\n\ndef find_Extra(lst: List[int], lst2: List[int], n: int) -> int:\n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return i\n    return n\n```"
    },
    {
        "id":291,
        "response":" ```python\ndef same_Length(n, n2):\n    import math\n    return math.floor(math.log10(n)) + 1 == math.floor(math.log10(n2)) + 1\n```"
    },
    {
        "id":292,
        "response":" import re\ndef remove_spaces(s):\n    return re.sub(' +', ' ', s).strip()<|eot_id|>"
    },
    {
        "id":293,
        "response":" ```python\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    return [sublist[-1] for sublist in lst]\n```"
    },
    {
        "id":294,
        "response":" ```python\nfrom typing import Tuple\n\ndef float_to_tuple(s: str) -> Tuple[float, ...]:\n    return tuple(map(float, s.strip('()').split(',')))\n```"
    },
    {
        "id":295,
        "response":" ```python\ndef max_sum_subseq(lst):\n    import typing\n    if not lst:\n        return 0\n    if len(lst) <= 2:\n        return max(0, max(lst))\n    dp = [0]*len(lst)\n    dp[0] = max(0, lst[0])\n    dp[1] = max(dp[0], lst[1])\n    for i in range(2, len(lst)):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i])\n    return dp[-1]\n```"
    },
    {
        "id":296,
        "response":" def sort_list_last(lst):\n        return sorted(lst)"
    },
    {
        "id":297,
        "response":" ```python\nimport re\n\ndef is_Word_Present(s, s2):\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    return s2.lower() in words\n```"
    },
    {
        "id":298,
        "response":" ```python\nfrom typing import List\n\ndef extract_elements(lst: List, n: int) -> List:\n    return [lst[i:i+n] for i in range(len(lst)-n+1)]\n```"
    },
    {
        "id":299,
        "response":" ```python\nimport typing\n\ndef check(lst: typing.List[int], n: int) -> bool:\n    corner_elements = [lst[0], lst[n-1]]\n    other_elements = lst[1:n-1]\n    corner_elements.sort()\n    for element in other_elements:\n        if not (corner_elements[0] <= element <= corner_elements[1]):\n            return False\n    return True\n```"
    },
    {
        "id":300,
        "response":" ```python\nimport re\n\ndef match_num(s):\n    pattern = r'^\\d+'\n    return bool(re.match(pattern, s))\n```"
    },
    {
        "id":301,
        "response":" import math\n\ndef num_comm_div(n1, n2):\n    count = 0\n    gcd = math.gcd(n1, n2)\n    for i in range(1, int(gcd**0.5) + 1):\n        if gcd % i == 0:\n            if gcd \/\/ i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n    <|eot_id|>"
    },
    {
        "id":302,
        "response":" ```python\ndef find(n, n2):\n    return n % n2\n```"
    },
    {
        "id":303,
        "response":" ```python\nfrom typing import List\n\ndef add_consecutive_nums(lst: List[int]) -> List[int]:\n    return [lst[i] + lst[i+1] for i in range(len(lst)-1)]\n```"
    },
    {
        "id":304,
        "response":" ```python\nimport math\n\ndef sum_Of_Series(n):\n    return (n * (n + 1) \/\/ 2) ** 2\n```"
    },
    {
        "id":305,
        "response":" ```python\ndef re_order(lst):\n    return [i for i in lst if i != 0] + [0] * lst.count(0)\n```"
    },
    {
        "id":306,
        "response":"\r\nimport math\r\n\r\ndef permutation_coefficient(n, k):\r\n    if k > n:\r\n        return 0\r\n    return math.factorial(n) \/\/ math.factorial(n - k)\r\n\n<|eot_id|>"
    },
    {
        "id":307,
        "response":" ```python\nfrom typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    return [word for word in lst if word not in lst2]\n```"
    },
    {
        "id":308,
        "response":" ```python\nfrom typing import List\n\ndef same_order(lst1: List, lst2: List) -> bool:\n    set1 = set(lst1)\n    set2 = set(lst2)\n    common = list(set1.intersection(set2))\n    common.sort(key=lst1.index)\n    lst_common = [i for i in lst1 if i in common]\n    return lst_common == [i for i in lst2 if i in common]\n```"
    },
    {
        "id":309,
        "response":" ```python\ndef average_Odd(n):\n    import itertools\n    odd_numbers = list(itertools.islice(filter(lambda x: x % 2 != 0, itertools.count(1, 2)), n))\n    return sum(odd_numbers) \/ len(odd_numbers)\n```"
    },
    {
        "id":310,
        "response":" ```python\nfrom typing import List\n\ndef no_of_subsequences(lst: List[int], n: int) -> int:\n    count = 0\n    left = 0\n    right = 0\n    product = 1\n    \n    while right < len(lst):\n        product *= lst[right]\n        \n        while left <= right and product >= n:\n            product \/\/= lst[left]\n            left += 1\n        \n        count += right - left + 1\n        right += 1\n    \n    total_subsequences = 2 ** len(lst)\n    return total_subsequences - count\n```"
    },
    {
        "id":311,
        "response":" ```python\nimport math\n\ndef find_Min_Sum(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return sum(factors)\n```"
    },
    {
        "id":312,
        "response":" ```python\nfrom typing import Tuple, Any\nfrom collections import defaultdict\n\ndef count_element_freq(tup: Tuple[Any]) -> dict:\n    freq = defaultdict(int)\n    stack = list(tup)\n    while stack:\n        elem = stack.pop()\n        if isinstance(elem, tuple):\n            stack.extend(elem)\n        else:\n            freq[elem] += 1\n    return dict(freq)\n```"
    },
    {
        "id":313,
        "response":" ```python\ndef add_str(tup, s):\n    return [str(i) + s for i in tup]\n```"
    },
    {
        "id":314,
        "response":" ```python\nfrom typing import Tuple\n\ndef sum_elements(tup: Tuple[Tuple[int], ...]) -> int:\n    return sum(sum(inner_tup) for inner_tup in tup)\n```"
    },
    {
        "id":315,
        "response":" ```python\nfrom typing import List\n\ndef modular_sum(lst: List[int], m: int, n: int) -> bool:\n    dp = [[False] * m for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(n):\n        for j in range(m):\n            dp[i + 1][j] = dp[i + 1][j] or dp[i][j]\n            dp[i + 1][(j + lst[i]) % m] = dp[i + 1][(j + lst[i]) % m] or dp[i][j]\n    return dp[n][0]\n```"
    },
    {
        "id":316,
        "response":" ```python\nfrom typing import List\n\ndef radix_sort(lst: List[int]) -> List[int]:\n    RADIX = 10\n    placement = 1\n    max_digit = max(lst)\n    while placement < max_digit:\n        buckets = [list() for _ in range(RADIX)]\n        for i in lst:\n            tmp = int((i \/ placement) % RADIX)\n            buckets[tmp].append(i)\n        a = 0\n        for b in range(RADIX):\n            buck = buckets[b]\n            for i in buck:\n                lst[a] = i\n                a += 1\n        placement *= RADIX\n    return lst\n```"
    },
    {
        "id":317,
        "response":" ```python\nimport typing\n\ndef largest_pos(lst: typing.List[int]) -> int:\n    return max((i for i in lst if i > 0), default=None)\n```"
    },
    {
        "id":318,
        "response":" ```python\nimport math\n\ndef sqrt_root(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return math.isqrt(n)\n```"
    },
    {
        "id":319,
        "response":" ```python\nimport math\n\ndef volume_tetrahedron(n):\n    return (n ** 3) \/ (6 * math.sqrt(2))\n```"
    },
    {
        "id":320,
        "response":" import math\nfrom functools import reduce\n\ndef get_lcm(lst):\n    def lcm(a, b):\n        return a * b \/\/ math.gcd(a, b)\n    return reduce(lcm, lst, 1)"
    },
    {
        "id":321,
        "response":" ```python\ndef check_isosceles(n1, n2, n3):\n    import typing\n    if not (isinstance(n1, (int, float)) and isinstance(n2, (int, float)) and isinstance(n3, (int, float))):\n        raise TypeError(\"Input must be a number\")\n    if n1 <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    sides = sorted([n1, n2, n3])\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    return n1 == n2 or n2 == n3 or n1 == n3\n```"
    },
    {
        "id":322,
        "response":" def lbs(lst):\n    import bisect\n    n = len(lst)\n    inc_seq = []\n    inc_len = [0]*n\n    for i in range(n):\n        pos = bisect.bisect_left(inc_seq, lst[i])\n        if pos == len(inc_seq):\n            inc_seq.append(lst[i])\n        else:\n            inc_seq[pos] = lst[i]\n        inc_len[i] = pos + 1\n\n    dec_seq = []\n    dec_len = [0]*n\n    for i in range(n-1, -1, -1):\n        pos = bisect.bisect_left(dec_seq, lst[i])\n        if pos == len(dec_seq):\n            dec_seq.append(lst[i])\n        else:\n            dec_seq[pos] = lst[i]\n        dec_len[i] = pos + 1\n\n    return max(inc_len[i] + dec_len[i] - 1 for i in range(n))"
    },
    {
        "id":323,
        "response":" ```python\nimport re\nfrom typing import Callable\n\ndef check_string(s: str, min_length: int = 8) -> bool:\n    checks: list[Callable[[str], bool]] = [\n        lambda x: any(c.isupper() for c in x),\n        lambda x: any(c.islower() for c in x),\n        lambda x: any(c.isdigit() for c in x),\n        lambda x: len(x) >= min_length\n    ]\n    return all(check(s) for check in checks)\n```"
    },
    {
        "id":324,
        "response":" ```python\ndef max_sum_increasing_subsequence(lst, n):\n    import sys\n    max_sum = lst[:]\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j] and max_sum[i] < max_sum[j] + lst[i]:\n                max_sum[i] = max_sum[j] + lst[i]\n    return max(max_sum)\n```"
    },
    {
        "id":325,
        "response":" ```python\nfrom typing import List\n\ndef parallel_lines(lst: List[float], lst2: List[float]) -> bool:\n    if len(lst) != 4 or len(lst2) != 4:\n        raise ValueError(\"Invalid input\")\n    x1, y1, x2, y2 = lst\n    x3, y3, x4, y4 = lst2\n    denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)\n    return denominator == 0\n```"
    },
    {
        "id":326,
        "response":" ```python\nimport re\ndef capitalize_first_last_letters(s):\n    return re.sub(r'\\b\\w+\\b', lambda m: m.group(0)[0].upper() + m.group(0)[1:-1] + (m.group(0)[-1].upper() if len(m.group(0)) > 1 else ''), s)\n```"
    },
    {
        "id":327,
        "response":" ```python\nfrom typing import List\nfrom collections import Counter\n\ndef get_pairs_count(lst: List[int], n: int, n2: int) -> int:\n    count = Counter(lst)\n    total = 0\n    for num in count:\n        if n - num in count:\n            if n - num == num:\n                total += count[num] * (count[num] - 1) \/\/ 2\n            elif num < n - num:\n                total += count[num] * count[n - num]\n    return total\n```"
    },
    {
        "id":328,
        "response":" ```python\nfrom typing import List\n\ndef min_length(lst: List[List[int]]) -> int:\n    return min(len(sublist) for sublist in lst) if lst else 0\n```"
    },
    {
        "id":329,
        "response":" ```python\ndef jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    return b\n```"
    },
    {
        "id":330,
        "response":" ```python\nfrom typing import List\n\ndef negative_count(lst: List[int]) -> float:\n    total_count = len(lst)\n    if total_count == 0:\n        return 0.0\n    negative_numbers = sum(1 for num in lst if num < 0)\n    return negative_numbers \/ total_count\n```<|eot_id|>"
    },
    {
        "id":331,
        "response":" ```python\nfrom typing import List\n\ndef min_coins(lst: List[int], n: int, n2: int) -> int:\n    dp = [float('inf')] * (n2 + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(lst[i], n2 + 1):\n            dp[j] = min(dp[j], dp[j - lst[i]] + 1)\n    return dp[n2] if dp[n2] != float('inf') else -1\n```"
    },
    {
        "id":332,
        "response":" from collections import Counter\n\ndef check_permutation(s1: str, s2: str) -> bool:\n    if len(s1) != len(s2):\n        return False\n    return Counter(s1) == Counter(s2)assistant\n\n```python\nfrom collections import Counter\n\ndef check_permutation(s1: str, s2: str) -> bool:\n    if len(s1) != len(s2):\n        return False\n    return Counter(s1) == Counter(s2)\n```"
    },
    {
        "id":333,
        "response":" ```python\nfrom typing import Tuple, Any, Type\n\ndef remove_datatype(tup: Tuple[Any], param: Type) -> Tuple[Any]:\n    return tuple(i for i in tup if not isinstance(i, param))\n```"
    },
    {
        "id":334,
        "response":" ```python\nimport re\n\ndef search_literal(s, s2):\n    try:\n        pattern = re.compile(re.escape(s2))\n        match = pattern.search(s)\n        if match:\n            return match.start()\n        else:\n            return -1\n    except re.error:\n        return -1\n```"
    },
    {
        "id":335,
        "response":" ```python\nimport math\n\ndef topbottom_surfacearea(r):\n    return math.pi * (r ** 2)\n```"
    },
    {
        "id":336,
        "response":" ```python\nfrom typing import List, Any\n\ndef nth_items(lst: List[Any], n: int) -> Any:\n    if n < 0 or n >= len(lst):\n        raise IndexError(\"Index out of range\")\n    return lst[n]\n```"
    },
    {
        "id":337,
        "response":" ```python\nimport re\nfrom typing import Optional\n\ndef first_repeated_word(s: str) -> Optional[str]:\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None\n```"
    },
    {
        "id":338,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef string_list_to_tuple(lst: List[str]) -> Tuple[str, ...]:\n    return tuple(lst)\n```"
    },
    {
        "id":339,
        "response":" ```python\nfrom typing import List\n\ndef basesnum_coresspondingnum(lst: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: x ** y, lst, lst2))\n```<|eot_id|>"
    },
    {
        "id":340,
        "response":"\r\nfrom collections import Counter\r\n\r\ndef find_Diff(lst, n):\r\n    freq = Counter(lst)\r\n    max_freq = max(freq.values())\r\n    min_freq = min(freq.values())\r\n    return max_freq - min_freq\r\n    \r\n    \r\n    <|eot_id|>"
    },
    {
        "id":341,
        "response":" ```python\nimport math\n\ndef check_abundant(n):\n    if n <= 0:\n        return False\n    sum_divisors = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n \/\/ i:\n                sum_divisors += n \/\/ i\n    return sum_divisors > n\n```"
    },
    {
        "id":342,
        "response":" import re\ndef fill_spaces(s):\n    return re.sub('[ ,.]', ':', s)"
    },
    {
        "id":343,
        "response":"\r\ndef count_digits(n, n2):\r\n    import math\r\n    sum = n + n2\r\n    if sum == 0:\r\n        return 1\r\n    if sum < 0:\r\n        sum = -sum\r\n    return math.floor(math.log10(sum)) + 1\r\nprint(count_digits(10, 20))"
    },
    {
        "id":344,
        "response":" ```python\nfrom typing import List, Tuple, Union\n\ndef flatten_tuple(lst: List[Union[str, Tuple]]) -> str:\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return ' '.join(result)\n```"
    },
    {
        "id":345,
        "response":" ```python\nimport math\n\ndef toggle_F_and_L_bits(n):\n    num_bits = math.floor(math.log2(n)) + 1\n    mask = (1 << (num_bits - 1)) | 1\n    return n ^ mask\n```<|eot_id|>"
    },
    {
        "id":346,
        "response":" ```python\nfrom typing import Optional\n\ndef last_occurence_char(s: str, s2: str) -> Optional[int]:\n    try:\n        return s.rindex(s2)\n    except ValueError:\n        return None\n```"
    },
    {
        "id":347,
        "response":" ```python\ndef Total_Hamming_Distance(n: int) -> int:\n    import math\n    total = 0\n    for i in range(int(math.log(n, 2)) + 1):\n        mask = 1 << i\n        count = sum(1 for j in range(n + 1) if j & mask)\n        total += count * (n - count + 1)\n    return total - n\n```"
    },
    {
        "id":348,
        "response":" from typing import List\n\ndef longest_increasing_subsequence(lst: List[int]) -> int:\n    if not lst:\n        return 0\n\n    dp = [1] * len(lst)\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)  # type: ignore<|eot_id|>"
    },
    {
        "id":349,
        "response":" ```python\ndef odd_Num_Sum(n):\n    return sum(i**5 for i in range(1, n*2, 2))\n```"
    },
    {
        "id":350,
        "response":" ```python\nimport typing\n\ndef find_Max(lst: typing.List[int], n: int, n2: int) -> int:\n    return max(lst)\n```"
    },
    {
        "id":351,
        "response":" ```python\nfrom typing import List, Any\n\ndef extract_column(lst: List[List[Any]], n: int) -> List[Any]:\n    return [sublist[n] for sublist in lst if n < len(sublist)]\n```"
    },
    {
        "id":352,
        "response":" ```python\nimport typing\n\ndef Seq_Linear(lst: typing.List[int]) -> bool:\n    if len(lst) < 2:\n        return True\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != diff:\n            return False\n    return True\n```"
    },
    {
        "id":353,
        "response":" ```python\ndef tuple_to_float(tup):\n    from functools import reduce\n    return reduce(lambda x, y: float(str(x) + '.' + str(y)), tup)\n```"
    },
    {
        "id":354,
        "response":" ```python\nfrom typing import List, Union\n\ndef Split(lst: List[Union[int, str]]) -> List[int]:\n    return [i for i in lst if isinstance(i, int) and i % 2 != 0]\n```"
    },
    {
        "id":355,
        "response":" ```python\ndef difference(n):\n    sum_of_cubes = (n * (n + 1) \/\/ 2) ** 2\n    sum_of_numbers = n * (n + 1) \/\/ 2\n    return sum_of_cubes - sum_of_numbers\n```"
    },
    {
        "id":356,
        "response":" ```python\nfrom typing import List\n\ndef find_Odd_Pair(lst: List[int], n: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (lst[i] ^ lst[j]) % 2 != 0:\n                count += 1\n    return count\n```"
    },
    {
        "id":357,
        "response":" def toggle_string(s):\n        return s.swapcase()assistant\n\n```python\ndef toggle_string(s):\n    return s.swapcase()\n```"
    },
    {
        "id":358,
        "response":" ```python\ndef digit_distance_nums(n, n2):\n    import math\n    n = str(n)\n    n2 = str(n2)\n    max_len = max(len(n), len(n2))\n    n = n.zfill(max_len)\n    n2 = n2.zfill(max_len)\n    return sum(abs(int(a) - int(b)) for a, b in zip(n, n2))\n```"
    },
    {
        "id":359,
        "response":" ```python\ndef max_sub_array_sum(lst, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum = max(lst[i], current_sum + lst[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n```"
    },
    {
        "id":360,
        "response":" ```python\nfrom typing import Tuple\n\ndef union_elements(tup1: Tuple, tup2: Tuple) -> Tuple:\n    return tuple(set(tup1).union(set(tup2)))\n```"
    },
    {
        "id":361,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef assign_elements(lst: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                result.append((lst[i][0], lst[j][1]))\n    return result\n```"
    },
    {
        "id":362,
        "response":" ```python\nfrom typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    return max(map(len, lst), default=0)\n```"
    },
    {
        "id":363,
        "response":" import re\ndef extract_values(s):\n    return re.findall(r'\"([^\"]*)\"', s)assistant\n\nimport re\ndef extract_values(s):\n    return re.findall(r'\"([^\"]*)\"', s)"
    },
    {
        "id":364,
        "response":" ```python\nfrom typing import List\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    count = 0\n    for num in freq:\n        if freq[num] % 2 != 0:\n            count += freq[num] * (freq[num] - 1) \/\/ 2\n\n    return count\n```"
    },
    {
        "id":365,
        "response":" ```python\ndef split(s):\n    return list(s)\n```"
    },
    {
        "id":366,
        "response":" def sum_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))assistant\n\n```python\ndef sum_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))\n```"
    },
    {
        "id":367,
        "response":" ```python\nfrom typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst) or lst == sorted(lst, reverse=True)\n```"
    },
    {
        "id":368,
        "response":" ```python\ndef empty_list(n):\n    return [{} for _ in range(n)]\n```"
    },
    {
        "id":369,
        "response":" ```python\nfrom typing import List\n\ndef sort_sublists(lst: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in lst]\n```"
    },
    {
        "id":370,
        "response":" ```python\nimport re\ndef remove_words(lst, lst2):\n    pattern = re.compile('|'.join(re.escape(word) for word in lst2), re.IGNORECASE)\n    return [s for s in lst if not pattern.search(s)]\n```"
    },
    {
        "id":371,
        "response":" ```python\ndef max_sum_pair_diff_lessthan_K(lst, n, k):\n    import sys\n    lst.sort()\n    i = n - 1\n    j = n - 2\n    max_sum = 0\n    while j >= 0:\n        if lst[i] - lst[j] < k:\n            max_sum += lst[i] + lst[j]\n            i -= 2\n            j -= 2\n        else:\n            j -= 1\n    return max_sum\n```"
    },
    {
        "id":372,
        "response":" ```python\nfrom typing import List\n\ndef two_unique_nums(lst: List[int]) -> List[int]:\n    count_dict = {}\n    unique_nums = []\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_nums.append(num)\n    return unique_nums[:2]\n```"
    },
    {
        "id":373,
        "response":" ```python\nfrom typing import List\nimport math\n\ndef unique_product(lst: List[int]) -> int:\n    unique_nums = set(lst)\n    return math.prod(unique_nums)\n```"
    },
    {
        "id":374,
        "response":" import math\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)assistant\n\n```python\nimport math\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)\n```"
    },
    {
        "id":375,
        "response":""
    },
    {
        "id":376,
        "response":" ```python\nfrom typing import List\n\ndef is_Sub_Array(lst: List[int], lst2: List[int], n: int, n2: int) -> bool:\n    i = 0\n    j = 0\n    while i < n and j < n2:\n        if lst[i] == lst2[j]:\n            i += 1\n            j += 1\n            if j == n2:\n                return True\n        else:\n            i = i - j + 1\n            j = 0\n    return False\n```"
    },
    {
        "id":377,
        "response":" ```python\ndef last_Digit_Factorial(n):\n    import math\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n < 5:\n        return math.factorial(n) % 10\n    else:\n        return 0\n```"
    },
    {
        "id":378,
        "response":" ```python\nfrom typing import List, Any\n\ndef interleave_lists(*lists: List[Any]) -> List[Any]:\n    return [element for tup in zip(*lists) for element in tup]\n```"
    },
    {
        "id":379,
        "response":" ```python\nfrom typing import Tuple\n\ndef find_dissimilar(tup1: Tuple, tup2: Tuple) -> Tuple:\n    set1 = set(tup1)\n    set2 = set(tup2)\n    dissimilar = tuple(set1.symmetric_difference(set2))\n    return dissimilar\n```"
    },
    {
        "id":380,
        "response":" ```python\nfrom typing import Tuple, Any\n\ndef extract_even(tup: Tuple[Any, ...]) -> Tuple[int, ...]:\n    even_elements = []\n    stack = [tup]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, tuple):\n            for element in current:\n                stack.append(element)\n        elif isinstance(current, int) and current % 2 == 0:\n            even_elements.append(current)\n    return tuple(even_elements)\n```"
    },
    {
        "id":381,
        "response":" import math\ndef surface_Area(b, s):\n    base_area = b ** 2\n    slant_height = math.sqrt((s ** 2) - ((b \/ 2) ** 2))\n    triangle_area = 0.5 * b * slant_height\n    total_surface_area = base_area + (4 * triangle_area)\n    return total_surface_area<|eot_id|>"
    },
    {
        "id":382,
        "response":" ```python\ndef my_dict(dct):\n    return not bool(dct)\n```"
    },
    {
        "id":383,
        "response":"\r\nimport math\r\n\r\ndef catalan_number(n):\r\n    return math.comb(2 * n, n) \/\/ (n + 1)\r\n\n```"
    },
    {
        "id":384,
        "response":" ```python\nimport re\nfrom typing import List, Tuple\n\ndef find_adverbs(s: str) -> List[Tuple[str, int]]:\n    adverbs = re.finditer(r'\\b\\w+ly\\b', s)\n    return [(match.group(), match.start()) for match in adverbs]\n```"
    },
    {
        "id":385,
        "response":" ```python\nimport heapq\nfrom typing import List\n\ndef expensive_items(lst: List[List[str]], n: int) -> List[List[str]]:\n    return heapq.nlargest(n, lst, key=lambda x: float(x[1]))\n```"
    },
    {
        "id":386,
        "response":" ```python\ndef split_Arr(lst, n, n2):\n    from collections import deque\n    d = deque(lst)\n    d.rotate(-n)\n    return list(d)\n```"
    },
    {
        "id":387,
        "response":" ```python\ndef list_tuple(lst):\n    return tuple(lst)\n```"
    },
    {
        "id":388,
        "response":" ```python\nimport typing\n\ndef big_diff(lst: typing.List[int]) -> int:\n    return max(lst) - min(lst)\n```"
    },
    {
        "id":389,
        "response":" import math\n\ndef perfect_squares(n, n2):\n    start = math.ceil(math.sqrt(n))\n    end = math.floor(math.sqrt(n2))\n    return list(range(start**2, (end+1)**2, 2*start-1 if start % 2 == 1 else 2*start)) if start <= end else []<|eot_id|>"
    },
    {
        "id":390,
        "response":" import math\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return x, y<|eot_id|>"
    },
    {
        "id":391,
        "response":" def swap_List(lst):\n        if len(lst) > 1:\n            lst[0], lst[-1] = lst[-1], lst[0]\n        return lst\n```<|eot_id|>"
    },
    {
        "id":392,
        "response":" ```python\nimport math\n\ndef sum_Of_product(n):\n    total = 0\n    for k in range(n + 1):\n        total += math.comb(n, k) * math.comb(n, k)\n    return total\n```"
    },
    {
        "id":393,
        "response":" ```python\nimport re\ndef removezero_ip(s):\n    return '.'.join(str(int(i)) for i in s.split('.'))\n```"
    },
    {
        "id":394,
        "response":" ```python\ndef diff_even_odd(lst):\n    first_even = next((x for x in lst if x % 2 == 0), None)\n    first_odd = next((x for x in lst if x % 2 != 0), None)\n    if first_even is None or first_odd is None:\n        return None\n    return first_even - first_odd\n```"
    },
    {
        "id":395,
        "response":" ```python\nfrom typing import *\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    if s.count('1') != s2.count('1'):\n        return -1\n    \n    s1_ones = []\n    s2_ones = []\n    for i in range(len(s)):\n        if s[i] == '1':\n            s1_ones.append(i)\n        if s2[i] == '1':\n            s2_ones.append(i)\n    \n    res = 0\n    for i in range(len(s1_ones)):\n        res += abs(s1_ones[i] - s2_ones[i])\n    \n    return res \/\/ 2\n```"
    },
    {
        "id":396,
        "response":"\r\ndef tuple_size(tup):\r\n    return len(tup)"
    },
    {
        "id":397,
        "response":" ```python\nimport heapq\nfrom typing import List\n\ndef find_kth(lst: List[int], lst2: List[int], n: int, n2: int, k: int) -> int:\n    return list(heapq.merge(lst, lst2))[k-1]\n```<|eot_id|>"
    },
    {
        "id":398,
        "response":" ```python\ndef armstrong_number(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit) ** num_len for digit in num_str)\n```<|eot_id|>"
    },
    {
        "id":399,
        "response":"\r\ndef sum_average(n):\r\n    total_sum = n * (n + 1) \/\/ 2\r\n    average = total_sum \/ n if n > 0 else 0\r\n    return total_sum, average\r\n    \r\n    \r\n\n```<|eot_id|>"
    },
    {
        "id":400,
        "response":" def is_Even(n):\n    return (n & 1) == 0"
    }
]