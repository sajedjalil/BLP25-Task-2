[
    {
        "id":1,
        "response":"import sys\n\ndef max_chain_length(lst, n):\n    m = min(n, len(lst))\n    if m == 0:\n        return 0\n    pairs = lst[:m]\n    adj = [[] for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            if i != j and pairs[i][1] == pairs[j][0]:\n                adj[i].append(j)\n    sys.setrecursionlimit(1000000)\n    memo = {}\n    def dfs(u):\n        if u in memo:\n            return memo[u]\n        best = 1\n        for v in adj[u]:\n            best = max(best, 1 + dfs(v))\n        memo[u] = best\n        return best\n    maxlen = 0\n"
    },
    {
        "id":2,
        "response":"from typing import Optional\n\ndef first_repeated_char(s: str) -> Optional[str]:\n    seen = set()\n    for ch in s:\n        if ch in seen:\n            return ch\n        seen.add(ch)\n    return None"
    },
    {
        "id":3,
        "response":""
    },
    {
        "id":4,
        "response":"from typing import List\n\ndef reverse_words(s: str) -> str:\n    words = s.split()\n    return ' '.join(reversed(words))"
    },
    {
        "id":5,
        "response":"import math\n\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True"
    },
    {
        "id":6,
        "response":"import math\n\ndef radian_degree(n):\n    return float(n) * math.pi \/ 180.0"
    },
    {
        "id":7,
        "response":"import re\n\ndef find_literals(s: str, s2: str) -> list[int]:\n    if not s2:\n        return []\n    pattern = re.compile(re.escape(s2))\n    return [m.start() for m in pattern.finditer(s)]"
    },
    {
        "id":8,
        "response":""
    },
    {
        "id":9,
        "response":""
    },
    {
        "id":10,
        "response":"import typing\n\ndef remove_kth_element(lst: typing.List[typing.Any], n: int) -> typing.List[typing.Any]:\n    if 0 <= n < len(lst):\n        lst.pop(n)\n    return lst"
    },
    {
        "id":11,
        "response":"import typing\n\ndef max_of_nth(lst, n):\n    if not isinstance"
    },
    {
        "id":12,
        "response":""
    },
    {
        "id":13,
        "response":"import itertools\nfrom typing import List, Tuple, Optional, Union\n\ndef maximum_value(lst: List[Tuple[Union[int, float], ...]]) -> Optional[Union[int, float]]:\n    if not lst:\n        return None\n    flattened = itertools.chain.from_iterable(lst)\n    return max(flattened, default=None)"
    },
    {
        "id":14,
        "response":"import itertools\n\ndef cummulative_sum(lst):\n    total = 0\n    result = []\n    for val in itertools.chain.from_iterable(lst):\n        total += val\n        result.append(total)\n    return result"
    },
    {
        "id":15,
        "response":"import typing\n\ndef average_tuple(tup: typing.Tuple[typing.Tuple[float, ...], ...]) -> float:\n    total = 0.0\n    count = 0\n    for sub in tup:\n        for num in sub:\n            total += num\n            count += 1\n    return total \/ count if count else 0.0"
    },
    {
        "id":16,
        "response":"import typing\n\ndef tuple_modulo(tup: typing.Tuple[int, ...], tup2: typing.Tuple[int, ...]) -> typing.Tuple[int, ...]:\n    if len(tup) != len(tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    return tuple(a % b for a, b in zip(tup, tup2))"
    },
    {
        "id":17,
        "response":""
    },
    {
        "id":18,
        "response":"import typing\n\ndef div_list(lst: typing.List[float], lst2: typing.List[float]) -> typing.List[typing.Optional[float]]:\n    return list(map(lambda x, y: x \/ y if y != 0 else None, lst, lst2))"
    },
    {
        "id":19,
        "response":"import typing\n\ndef move_num(s: str) -> str:\n    non_digits = []\n    digits = []\n    for ch in s:\n        if ch.isdigit():\n            digits.append(ch)\n        else:\n            non_digits.append(ch)\n    return \"\".join(non_digits + digits)"
    },
    {
        "id":20,
        "response":"import typing\n\ndef largest_subset(lst: typing.List[int], n: int) -> typing.List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    size = len(sorted_lst)\n    dp = [1] * size\n    prev = [-1] * size\n    max_len = 1\n    max_idx = 0\n    for i in range(size):\n        for j in range(i):\n            if sorted_lst[i] % sorted_lst[j] == 0:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        if dp[i] > max_len:\n            max_len = dp[i]\n            max_idx = i\n    result = []\n    idx = max_idx\n    while idx != -1:\n        result.append(sorted_lst[idx])\n        idx = prev[idx]\n    result.reverse()\n    return result"
    },
    {
        "id":21,
        "response":"import re\nfrom typing import List\n\ndef increment_numerics(lst: List[str], n: int) -> List[str]:\n    pattern = re.compile(r'-?\\d+')\n    result = []\n    for s in lst:\n        def repl(match):\n            num = int(match.group())\n            return str(num + n)\n        result.append(pattern.sub(repl, s))\n    return result"
    },
    {
        "id":22,
        "response":"import typing\n\ndef get_median(lst: typing.List[int], lst2: typing.List[int], n: int) -> float | None:\n    if n == 0:\n        return None\n    i = j = 0\n    prev = curr = 0\n    for _ in range(n):\n        if i < n and (j >= n or lst[i] <= lst2[j]):\n            prev = curr\n            curr = lst[i]\n            i += 1\n        else:\n            prev = curr\n            curr = lst2[j]\n            j += 1\n    return (prev + curr) \/ 2.0"
    },
    {
        "id":23,
        "response":"import typing\n\ndef nth_nums(lst: typing.List[typing.Any], n: int) -> typing.List[typing.Any]:\n    return list(map(lambda x: x ** n, lst))"
    },
    {
        "id":24,
        "response":"def is_upper(s: str) -> str:\n    return s.upper()"
    },
    {
        "id":25,
        "response":"import typing\n\ndef swap_List(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":26,
        "response":"import typing\n\ndef triangle_area(n: typing.Union[int, float]) -> float:\n    if n < 0:\n        raise ValueError(\"Radius must be non-negative\")\n    return float(n * n)"
    },
    {
        "id":27,
        "response":"import typing\n\ndef find_First_Missing(lst: typing.List[int], n: int, n2: int) -> int:\n    present = set()\n    for num in lst:\n        if 1 <= num <= n2:\n            present.add(num)\n    for i in range(1, n2 + 1):\n        if i not in present:\n            return i\n    return n2 + 1"
    },
    {
        "id":28,
        "response":"import typing\n\ndef replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')"
    },
    {
        "id":29,
        "response":"import typing\n\ndef Split(lst: list) -> list:\n    return [x for x in lst if isinstance(x, int) and not isinstance(x, bool) and x % 2 == 0]"
    },
    {
        "id":30,
        "response":"import typing\n\ndef get_coordinates(tup: typing.Tuple[int, int]) -> typing.List[typing.Tuple[int, int]]:\n    x, y = tup\n    return [\n        (x - 1, y - 1), (x - 1, y), (x - 1, y + 1),\n        (x, y - 1),                 (x, y + 1),\n        (x + 1, y - 1), (x + 1, y), (x + 1, y + 1)\n    ]"
    },
    {
        "id":31,
        "response":"import re\nfrom typing import Any\n\ndef replace_spaces(s: str) -> str:\n    return re.sub(r'\\s|_', lambda m: '_' if m.group(0).isspace() else ' ', s)"
    },
    {
        "id":32,
        "response":"from typing import List\n\ndef move_zero(lst: List[int]) -> List[int]:\n    write_index = 0\n    for read_index, value in enumerate(lst):\n        if value != 0:\n            lst[write_index] = value\n            write_index += 1\n    for i in range(write_index, len(lst)):\n        lst[i] = 0\n    return lst"
    },
    {
        "id":33,
        "response":"```python\nimport typing\n\ndef pair_OR_Sum(lst: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    max_val = max(lst)\n    max_bit = max_val.bit_length()\n    total = 0\n    for bit in range(max_bit):\n        mask = 1 << bit\n        cnt1 = sum(1 for x in lst if x & mask)\n        cnt0 = n - cnt1\n        total += cnt1 * cnt0 * mask\n    return total\n```"
    },
    {
        "id":34,
        "response":"from typing import Union\n\ndef even_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    n = int(n)\n    total = n * (n + 1) * (2 * n + 1) * (3 * n * n + 3 * n - 1) \/\/ 30\n    return 16 * total"
    },
    {
        "id":35,
        "response":"import heapq\n\ndef heap_sort(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    h = lst[:]\n    heapq.heapify(h)\n    return [heapq.heappop(h) for _ in range(len(h))]"
    },
    {
        "id":36,
        "response":"import math\n\ndef Check_Solution(n, n2, n3):\n    if n == 0"
    },
    {
        "id":37,
        "response":"import math\n\ndef noprofit_noloss(n: float, n2: float) -> bool:\n    return math.isclose(n, n2, rel_tol=1e-9, abs_tol=0.0)"
    },
    {
        "id":38,
        "response":"import math\nfrom typing import Union\n\ndef wind_chill(temp_f: Union[int, float], wind_speed_mph: Union[int, float]) -> float:\n    if wind_speed_mph <= 3:\n        return float(temp_f)\n    v_power = wind_speed_mph ** 0.16\n    wc = 35.74 + 0.6215 * temp_f - 35.75 * v_power + 0.4275 * temp_f * v_power\n    return wc"
    },
    {
        "id":39,
        "response":"import typing\n\ndef sample_nam(lst: typing.List[str]) -> int:\n    return sum(len(name) for name in lst if isinstance(name, str) and name and not name[0].islower())"
    },
    {
        "id":40,
        "response":"import typing\n\ndef remove_parenthesis(lst: typing.Union[str, typing.List[str]]) -> typing.Union[str, typing.List[str]]:\n    def _remove(s: str) -> str:\n        result = []\n        depth = 0\n        for ch in s:\n            if ch == '(':\n                depth += 1\n            elif ch == ')':\n                if depth > 0:\n                    depth -= 1\n                else:\n                    result.append(ch)\n            elif depth == 0:\n                result.append(ch)\n        return ''.join(result)\n    if isinstance(lst, str):\n        return _remove(lst)\n    elif isinstance(lst, list):\n        return [_remove(item) if isinstance(item, str) else item for item in lst]\n    else:\n        return lst"
    },
    {
        "id":41,
        "response":"import typing\n\ndef is_nonagonal(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return (7 * n * n - 5 * n) \/\/ 2"
    },
    {
        "id":42,
        "response":"import typing\n\ndef remove_similar_row(lst: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    seen = set()\n    result = []\n    for row in lst:\n        if row not in seen:\n            seen.add(row)\n            result.append(row)\n    return result"
    },
    {
        "id":43,
        "response":""
    },
    {
        "id":44,
        "response":"from typing import List, Any\n\ndef reverse_Array_Upto_K(lst: List[Any], n: int) -> List[Any]:\n    if not isinstance(lst, list) or not isinstance(n, int):\n        return lst\n    length = len(lst)\n    if n <= 0:\n        return lst\n    k = n if n <= length else length\n    lst[:k] = lst[:k][::-1]\n    return lst"
    },
    {
        "id":45,
        "response":"import typing\n\ndef find_k_product(lst: typing.List[typing.Tuple], n: int) -> int:\n    product = 1\n    count = 0\n    for t in lst:\n        try:\n            val = t[n]\n        except IndexError:\n            continue\n        product *= val\n        count += 1\n    return product if count > 0 else 0\n\n"
    },
    {
        "id":46,
        "response":"from typing import Any\n\ndef No_of_cubes(n: int, k: int) -> int:\n    if n <= 0 or k <= 0 or k > n:\n        return 0\n    return (n - k + 1) ** 3"
    },
    {
        "id":47,
        "response":""
    },
    {
        "id":48,
        "response":""
    },
    {
        "id":49,
        "response":"import typing\n\ndef sum_Range_list(lst: typing.List[int], n: int, n2: int) -> int:\n    if not lst:\n        return 0\n    length = len(lst)\n    if n < 0:\n        n = length + n\n    if n2 < 0:\n        n2 = length + n2\n    n = max(0, min(n, length - 1))\n    n2 = max(0, min(n2, length - 1))\n    start, end = sorted((n, n2))\n    return sum(lst[start:end + 1])"
    },
    {
        "id":50,
        "response":"from typing import List, Any\n\ndef are_Equal(lst: List[Any], lst2: List[Any], n: int, n2: int) -> bool:\n    if n != n2:\n        return False\n    if n > len(lst) or n2 > len(lst2):\n        return False\n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return False\n    return True"
    },
    {
        "id":51,
        "response":"from typing import Tuple\n\ndef check_subset(tup: Tuple, tup2: Tuple) -> bool:\n    return set(tup).issubset(set(tup2))"
    },
    {
        "id":52,
        "response":"import typing\n\ndef matrix_to_list(lst: typing.Iterable[typing.Iterable[typing.Any]]) -> typing.List[typing.Tuple[typing.Any, ...]]:\n    return list(zip(*lst))"
    },
    {
        "id":53,
        "response":"from collections import defaultdict\n\ndef grouping_dictionary(lst):\n    d = defaultdict(list)\n    for key, value in lst:\n        d[key].append(value)\n    return dict(d)"
    },
    {
        "id":54,
        "response":"from typing import Union\n\ndef rectangle_perimeter(n: Union[int, float], n2: Union[int, float]) -> Union[int, float]:\n    return 2 * (n + n2)"
    },
    {
        "id":55,
        "response":"import typing\n\ndef fifth_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    n_sq = n * n\n    n_plus = n + 1\n    n_plus_sq = n_plus * n_plus\n    part = 2 * n_sq + 2 * n - 1\n    return (n_sq * n_plus_sq * part) \/\/ 12"
    },
    {
        "id":56,
        "response":"import typing\n\ndef find_Min_Sum(lst: typing.List[int], lst2: typing.List[int], n: int) -> int:\n    n = min(n, len(lst), len(lst2))\n    if n <= 0:\n        return 0\n    a = sorted(lst[:n])\n    b = sorted(lst2[:n])\n    total = 0\n    for i in range(n):\n        total += abs(a[i] - b[i])\n    return total"
    },
    {
        "id":57,
        "response":"import math\n\ndef first_Digit(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 1\n    if n <= 1000:\n        log_sum = 0.0\n        for i in range(1, n + 1):\n            log_sum += math.log10(i)\n    else:\n        log_sum = n * math.log10(n \/ math.e) + 0.5 * math.log10(2 * math.pi * n)\n    fractional = log_sum - math.floor(log_sum)\n    first_digit = int(10 ** fractional + 1e-10)\n    return first_digit"
    },
    {
        "id":58,
        "response":"import collections\nfrom typing import Any, List, Optional\n\ndef max_occurrences(lst: List[Any]) -> Optional[Any]:\n    if not lst:\n        return None\n    counter = collections.Counter(lst)\n    max_count = max(counter.values())\n    for item, count in counter.items():\n        if count == max_count:\n            return item\n    return None"
    },
    {
        "id":59,
        "response":"from collections import Counter\n\ndef Repeat(lst):\n    freq = Counter(lst)\n    printed = set()\n    for num in lst:\n        if freq[num] > 1 and num not in printed:\n            print(num)\n            printed.add(num)"
    },
    {
        "id":60,
        "response":""
    },
    {
        "id":61,
        "response":"import typing\n\ndef max_sum_of_three_consecutive(lst: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0] = max(0, lst[0])\n    if n > 1:\n        dp[1] = max(dp[0], max(0, lst[1]), lst[0] + lst[1])\n    for i in range(2, n):\n        take_i = lst[i] + (dp[i - 2] if i - 2 >= 0 else 0)\n        take_i_i1 = lst[i] + lst[i - 1] + (dp[i - 3] if i - 3 >= 0 else 0)\n        dp[i] = max(dp[i - 1], take_i, take_i_i1)\n    return dp[-1]"
    },
    {
        "id":62,
        "response":"import typing\n\ndef sorted_dict(dct: typing.Dict[typing.Any, typing.Any]) -> typing.Dict[typing.Any, typing.Any]:\n    return {k: sorted(v) if isinstance(v, list) else v for k, v in dct.items()}"
    },
    {
        "id":63,
        "response":""
    },
    {
        "id":64,
        "response":"import typing\n\ndef average_Even(n: int) -> float:\n    if n < 2:\n        return 0.0\n    k = n \/\/ 2\n    return float(k + 1)"
    },
    {
        "id":65,
        "response":"import typing\n\ndef move_last(lst: typing.List[typing.Any]) -> None:\n    if lst:\n        lst.append(lst.pop(0))"
    },
    {
        "id":66,
        "response":"import typing\n\ndef count_char(s: str, s2: str) -> int:\n    if not s or not s2:\n        return 0\n    return s.count(s2)"
    },
    {
        "id":67,
        "response":"import typing\n\ndef Check_Vow(s: str, s2: str) -> typing.Tuple[int, int]:\n    vowels = set('aeiouAEIOU')\n    if not isinstance(s, str):\n        s = ''\n    if not isinstance(s2, str):\n        s2 = ''\n    count1 = sum(1 for ch in s if ch in vowels)\n    count2 = sum(1 for ch in s2 if ch in vowels)\n    return count1, count2"
    },
    {
        "id":68,
        "response":"import re\n\ndef replace(s: str, s2: str) -> str:\n    if not s or not s2:\n        return s\n    return re.sub(re.escape(s2) + '+', s2, s)"
    },
    {
        "id":69,
        "response":"import re\n\ndef check_IP(s: str) -> bool:\n    pattern = re.compile(r'^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$')\n    return bool(pattern.match(s))"
    },
    {
        "id":70,
        "response":"import typing\n\ndef decreasing_trend(lst: typing.List[float]) -> bool:\n    if len(lst) < 2:\n        return True\n    return all(x > y for x, y in zip(lst, lst[1:]))"
    },
    {
        "id":71,
        "response":"import typing\n\ndef set_Right_most_Unset_Bit(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    return n | (n + 1)"
    },
    {
        "id":72,
        "response":"def max_of_three(n, n2, n3):\n    return max(n, n2, n3)"
    },
    {
        "id":73,
        "response":"import typing\n\ndef convert(lst: typing.List[int]) -> int:\n    if not lst:\n        return 0\n    for x in lst:\n        if not isinstance(x, int):\n            raise TypeError(\"All elements must be integers\")\n        if x < 0:\n            raise ValueError(\"Negative integers not allowed\")\n    return int(''.join(str(x) for x in lst))"
    },
    {
        "id":74,
        "response":"import typing\n\ndef remove_duplicate(s: str) -> str:\n    if not s:\n        return \"\"\n    seen: typing.Set[str] = set()\n    result: typing.List[str] = []\n    for word in s.split():\n        if word not in seen:\n            seen.add(word)\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "id":75,
        "response":"from typing import Any\n\ndef sum_nums(n: int, n2: int, n3: int, n4: int) -> int:\n    total = n + n2\n    low = n3 if n3 <= n4 else n4\n    high = n4 if n3 <= n4 else n3\n    if low <= total <= high:\n        return 20\n    return total"
    },
    {
        "id":76,
        "response":"import re\n\ndef remove_extra_char(s: str) -> str:\n    return re.sub(r'[^A-Za-z0-9]', '', s)"
    },
    {
        "id":77,
        "response":"import typing\n\ndef validity_triangle(n: float, n2: float, n3: float) -> bool:\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    return n + n2 > n3 and n + n3 > n2 and n2 + n3 > n"
    },
    {
        "id":78,
        "response":"import typing\n\ndef remove_spaces(s: typing.Optional[str]) -> typing.Optional[str]:\n    if s is None:\n        return None\n    return s.replace(' ', '')"
    },
    {
        "id":79,
        "response":"import typing\n\ndef access_key(dct: typing.Dict[typing.Any, typing.Any], n: int) -> typing.Any:\n    return list(dct.keys())[n]"
    },
    {
        "id":80,
        "response":"import typing\n\ndef increasing_trend(lst: typing.Iterable[typing.Any]) -> bool:\n    data = list(lst)\n    if len(data) < 2:\n        return True\n    try:\n        return all(data[i] < data[i + 1] for i in range(len(data) - 1))\n    except TypeError:\n        return False"
    },
    {
        "id":81,
        "response":"import math\n\ndef smallest_Divisor(n: int) -> int | None:\n    if n == 0:\n        return None\n    if n < 0:\n        n = abs(n)\n    if n == 1:\n        return 1\n    limit = math.isqrt(n)\n    for i in range(2, limit + 1):\n        if n % i == 0:\n            return i\n    return n"
    },
    {
        "id":82,
        "response":"import typing\n\ndef mul_list(lst: typing.List[int], lst2: typing.List[int]) -> typing.List[int]:\n    return list(map(lambda x_y: x_y[0] * x_y[1], zip(lst, lst2)))"
    },
    {
        "id":83,
        "response":"import math\n\ndef sum_Square(n):\n    if n < 0:\n        return False\n    limit = math.isqrt(n)\n    for i in range(limit + 1):\n        remainder = n - i * i\n        m = math.isqrt(remainder)\n        if m * m == remainder:\n            return True\n    return False"
    },
    {
        "id":84,
        "response":""
    },
    {
        "id":85,
        "response":"import math\n\ndef sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    sieve = bytearray(b'\\x01') * (n + 1)\n    sieve[0:2] = b'\\x00\\x00'\n    limit = int(math.isqrt(n))\n    for i in range(2, limit + 1):\n        if sieve[i]:\n            step = i\n            start = i * i\n            sieve[start:n + 1:step] = b'\\x00' * ((n - start) \/\/ step + 1)\n    return sum(i for i, is_prime in enumerate(sieve) if is_prime)"
    },
    {
        "id":86,
        "response":"from collections import Counter\n\ndef freq_element(tup):\n    return dict(Counter(tup))"
    },
    {
        "id":87,
        "response":"import typing\n\ndef recur_gcd(a: int, b: int) -> int:\n    a = abs(a)\n    b = abs(b)\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)"
    },
    {
        "id":88,
        "response":"import math\n\ndef len_complex(n, n2):\n    return math.hypot(n, n2)"
    },
    {
        "id":89,
        "response":"import typing\n\ndef min_jumps(lst: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    if not lst or lst[0] == 0:\n        return -1\n    max_reach = lst[0]\n    step = lst[0]\n    jumps = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        max_reach = max(max_reach, i + lst[i])\n        step -= 1\n        if step == 0:\n            jumps += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return -1"
    },
    {
        "id":90,
        "response":"import typing\n\ndef mul_consecutive_nums(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return [lst[i] * lst[i + 1] for i in range(len(lst) - 1)]"
    },
    {
        "id":91,
        "response":"import collections\nfrom typing import List, Tuple, Dict, Any\n\ndef group_element(lst: List[Tuple[Any, Any]]) -> Dict[Any, List[Any]]:\n    groups = collections.defaultdict(list)\n    for item in lst:\n        if len(item) < 2:\n            continue\n        first, second = item[0], item[1]\n        groups[second].append(first)\n    return dict(groups)"
    },
    {
        "id":92,
        "response":"import math\n\ndef last_Two_Digits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n >= 10:\n        return 0\n    fact = 1\n    for i in range(2, n + 1):\n        fact = (fact * i) % 100\n    return fact"
    },
    {
        "id":93,
        "response":"import re\n\ndef remove_multiple_spaces(s: str) -> str:\n    return re.sub(r' +', ' ', s)"
    },
    {
        "id":94,
        "response":"import typing\n\ndef extract_unique(dct: typing.Dict[typing.Any, typing.Any]) -> typing.List[typing.Any]:\n    seen: typing.Set[typing.Any] = set()\n    unique: typing.List[typing.Any] = []\n    for value in dct.values():\n        try:\n            if value not in seen:\n                seen.add(value)\n                unique.append(value)\n        except TypeError:\n            if value not in unique:\n                unique.append(value)\n    return unique"
    },
    {
        "id":95,
        "response":"import typing\n\ndef check_greater(tup: typing.Tuple, tup2: typing.Tuple) -> bool:\n    if len(tup) != len(tup2):\n        return False\n    return all(b > a for a, b in zip(tup, tup2))"
    },
    {
        "id":96,
        "response":"import typing\n\ndef zip_list(lst: list, lst2: list) -> list:\n    return [(lst[i], lst2[i]) for i in range(min(len(lst), len(lst2)))]"
    },
    {
        "id":97,
        "response":"from typing import List\n\ndef count_even(lst: List[int]) -> int:\n    return sum(map(lambda x: 1 if x % 2 == 0 else 0, lst))"
    },
    {
        "id":98,
        "response":"import math\nfrom typing import Any, Dict, List, Tuple\n\ndef sort_dict_item(dct: Dict[Tuple[Any, ...], Any]) -> List[Tuple[Tuple[Any, ...], Any]]:\n    return sorted(dct.items(), key=lambda kv: math.prod(kv[0]) if all(isinstance(x, (int, float)) for x in kv[0]) else 0)"
    },
    {
        "id":99,
        "response":"import sys\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    count01 = 0\n    count10 = 0\n    for a, b in zip(s, s2):\n        if a == '0' and b == '1':\n            count01 += 1\n        elif a == '1' and b == '0':\n            count10 += 1\n    if count01 != count10:\n        return -1\n    return count01\n"
    },
    {
        "id":100,
        "response":"from typing import List\n\ndef count_range_in_list(lst: List[int], n: int, n2: int) -> int:\n    if n > n2:\n        n, n2 = n2, n\n    count = 0\n    for x in lst:\n        if n <= x <= n2:\n            count += 1\n    return count"
    },
    {
        "id":101,
        "response":"import typing\n\ndef equilibrium_index(lst: typing.List[int]) -> int:\n    total = sum(lst)\n    left_sum = 0\n    for i, val in enumerate(lst):\n        total -= val\n        if left_sum == total:\n            return i\n        left_sum += val\n    return -1"
    },
    {
        "id":102,
        "response":""
    },
    {
        "id":103,
        "response":"from typing import Any, Dict\n\ndef is_key_present(dct: Dict[Any, Any], n: Any) -> bool:\n    return n in dct"
    },
    {
        "id":104,
        "response":"import math\nfrom typing import Union\n\ndef harmonic_sum(n: int) -> float:\n    if n <= 1:\n        return 0.0\n    return math.fsum(1.0 \/ i for i in range(1, n))"
    },
    {
        "id":105,
        "response":"from typing import List, Any\n\ndef sort_sublists(lst: List[List[Any]]) -> List[List[Any]]:\n    return sorted(lst, key=lambda x: (len(x), x))"
    },
    {
        "id":106,
        "response":"import typing\n\ndef is_subset(lst: typing.List[typing.Any], n: int, lst2: typing.List[typing.Any], n2: int) -> bool:\n    return set(lst[:min(n, len(lst))]).issubset(set(lst2[:min(n2, len(lst2))]))"
    },
    {
        "id":107,
        "response":"from typing import *\n\ndef count_Set_Bits(n: int) -> int:\n    if n <= 0:\n        return 0\n    total = 0\n    i = 0\n    while (1 << i) <= n:\n        cycle_len = 1 << (i + 1)\n        full_cycles = (n + 1) \/\/ cycle_len\n        total += full_cycles * (1 << i)\n        remainder = (n + 1) % cycle_len\n        total += max(0, remainder - (1 << i))\n        i += 1\n    return total"
    },
    {
        "id":108,
        "response":"import typing\n\ndef Convert(s: str) -> typing.List[str]:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return list(s)"
    },
    {
        "id":109,
        "response":"```python\nfrom typing import Iterable, Dict, Any\n\ndef get_unique(lst: Iterable[Any]) -> Dict[Any, int]:\n    mapping: Dict[Any, int] = {}\n    key: int = 0\n    for value in lst:\n        if value not in mapping:\n            mapping[value] = key\n            key += 1\n    return mapping\n```"
    },
    {
        "id":110,
        "response":"import typing\n\ndef front_and_rear(tup: typing.Tuple) -> typing.Tuple[typing.Any, typing.Any]:\n    if not tup:\n        return (None, None)\n    return (tup[0], tup[-1])"
    },
    {
        "id":111,
        "response":"import typing\n\ndef product_Equal(n: int) -> bool:\n    n = abs(n)\n    digits = [int(d) for d in str(n)]\n    odd_prod = 1\n    even_prod = 1\n    for i, d in enumerate(digits, start=1):\n        if i % 2 == 1:\n            odd_prod *= d\n        else:\n            even_prod *= d\n    return odd_prod == even_prod"
    },
    {
        "id":112,
        "response":"from typing import List\n\ndef remove_duplicate(lst: List) -> List:\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"
    },
    {
        "id":113,
        "response":"from typing import Tuple, Any\n\ndef check_valid(tup: Tuple[Any, ...]) -> bool:\n    return all(x is not None for x in tup)"
    },
    {
        "id":114,
        "response":"import math\n\ndef count_Fac(n: int) -> int:\n    if n < 2:\n        return 0\n    n = abs(n)\n    exponents = set()\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n \/\/= 2\n    if count:\n        exponents.add(count)\n    i = 3\n    limit = int(math.isqrt(n)) + 1\n    while i <= limit and n > 1:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n \/\/= i\n        if count:\n            exponents.add(count)\n            limit = int(math.isqrt(n)) + 1\n        i += 2\n    if n > 1:\n        exponents.add(1)\n    return len(exponents)"
    },
    {
        "id":115,
        "response":"import re\n\ndef str_to_tuple(s: str) -> tuple:\n    if not s:\n        return ()\n    parts = re.split(r'[\\s,]+', s.strip())\n    result = []\n    for p in parts:\n        if p:\n            try:\n                result.append(int(p))\n            except ValueError:\n                continue\n    return tuple(result)"
    },
    {
        "id":116,
        "response":"import typing\n\ndef rombus_perimeter(n: typing.Union[int, float]) -> typing.Union[int, float]:\n    if not isinstance(n, (int, float)):\n        raise TypeError(\"Input must be an int or float\")\n    return 4 * n"
    },
    {
        "id":117,
        "response":"import math\nfrom typing import List, Optional\n\ndef sd_calc(lst: List[float]) -> Optional[float]:\n    if not lst:\n        return None\n    n = len(lst)\n    mean = sum(lst) \/ n\n    var = sum((x - mean) ** 2 for x in lst) \/ n\n    return math.sqrt(var)"
    },
    {
        "id":118,
        "response":"import typing\n\ndef alternate_elements(lst: typing.List) -> typing.List:\n    return lst[::2]"
    },
    {
        "id":119,
        "response":"import re\n\ndef text_match(s: str) -> bool:\n    return bool(re.fullmatch(r'a(?:b)*', s))"
    },
    {
        "id":120,
        "response":"from typing import Tuple, Dict, Any\n\ndef add_dict_to_tuple(tup: Tuple[Any, ...], dct: Dict[Any, Any]) -> Tuple[Any, ...]:\n    return tup + (dct,)"
    },
    {
        "id":121,
        "response":"import typing\n\ndef maxAverageOfPath(lst: typing.List[typing.List[int]], n: int) -> typing.List[int]:\n    if n == 0 or not lst or not lst[0]:\n        return []\n    # DP arrays for sum, length, and predecessor\n    sum_dp = [[0] * n for _ in range(n)]\n    len_dp = [[0] * n for _ in range(n)]\n    prev = [[None] * n for _ in range(n)]\n    sum_dp[0][0] = lst[0][0]\n    len_dp[0][0] = 1\n    prev[0][0] = None\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            best_sum = None\n            best_len = None\n            best_prev = None\n            # from top\n            if i > 0:\n                cand_sum = sum_dp[i-1][j] +"
    },
    {
        "id":122,
        "response":""
    },
    {
        "id":123,
        "response":""
    },
    {
        "id":124,
        "response":"from typing import Union\n\ndef power_base_sum(n: int, n2: int) -> Union[int, float]:\n    s = sum(int(d) for d in str(abs(n)))\n    return pow(s, n2)"
    },
    {
        "id":125,
        "response":"import re\n\ndef extract_quotation(s):\n    return re.findall(r'[\"\\'](.*?)[\"\\']', s)"
    },
    {
        "id":126,
        "response":"import typing\n\ndef multiply_elements(tup: typing.Tuple[typing.Any, ...]) -> typing.Tuple[typing.Any, ...]:\n    return tuple(tup[i] * tup[i + 1] for i in range(len(tup) - 1))"
    },
    {
        "id":127,
        "response":"import re\n\ndef remove_char(s: str) -> str:\n    return re.sub(r'[^A-Za-z0-9]', '', s)"
    },
    {
        "id":128,
        "response":"from typing import List, Any\n\ndef sum_list(lst: List[Any], lst2: List[Any]) -> List[Any]:\n    return [a + b for a, b in zip(lst, lst2)]"
    },
    {
        "id":129,
        "response":"import typing\n\ndef add_list(lst: typing.List[typing.Any], lst2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return list(map(lambda x, y: x + y, lst, lst2))"
    },
    {
        "id":130,
        "response":"from typing import List, TypeVar\n\nT = TypeVar('T')\n\ndef consecutive_duplicates(lst: List[T]) -> List[T]:\n    result: List[T] = []\n    prev = object()\n    for item in lst:\n        if item != prev:\n            result.append(item)\n            prev = item\n    return result"
    },
    {
        "id":131,
        "response":"import math\n\ndef lateralsurface_cone(n: float, n2: float) -> float:\n    if n <= 0 or n2 <= 0:\n        raise ValueError(\"Radius and slant height must be positive\")\n    return math.pi *"
    },
    {
        "id":132,
        "response":"import typing\n\ndef replace_specialchar(s: str) -> str:\n    return s.translate(str.maketrans({' ': ':', ',': ':', '.': ':'}))"
    },
    {
        "id":133,
        "response":"from typing import List\n\ndef find_first_occurrence(lst: List[int], n: int) -> int:\n    left, right = 0, len(lst) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] == n:\n            result = mid\n            right = mid - 1\n        elif lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    {
        "id":134,
        "response":""
    },
    {
        "id":135,
        "response":""
    },
    {
        "id":136,
        "response":"import bisect\n\ndef left_insertion(lst, n):\n    return bisect.bisect_left(lst, n)"
    },
    {
        "id":137,
        "response":"import typing\n\ndef check_str(s: str) -> bool:\n    s = s.lstrip()\n    if not s:\n        return False\n    return s[0].lower() in 'aeiou'"
    },
    {
        "id":138,
        "response":"import math\n\ndef geometric_sum(n: int) -> int:\n    if n <= 1:\n        return 0\n    return pow(2, n - 1) - 1"
    },
    {
        "id":139,
        "response":"import math\n\ndef find_Index(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    target = 10 ** (n - 1)\n    D = 1 + 8 * target\n    sqrt_floor = math.isqrt(D)\n"
    },
    {
        "id":140,
        "response":"import typing\n\ndef tuple_to_dict(tup: typing.Tuple) -> dict:\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple length must be even to form key-value pairs.\")\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}"
    },
    {
        "id":141,
        "response":"def all_Characters_Same(s: str) -> bool:\n    if not s:\n        return True\n    first = s[0]\n    for ch in s:\n        if ch != first:\n            return False\n    return True"
    },
    {
        "id":142,
        "response":"import math\n\ndef area_tetrahedron(n):\n    return math.sqrt(3) * n * n"
    },
    {
        "id":143,
        "response":""
    },
    {
        "id":144,
        "response":"import typing\n\ndef check_none(tup: typing.Tuple[typing.Any, ...]) -> bool:\n    return any(x == 0 for x in tup)"
    },
    {
        "id":145,
        "response":"import typing\n\ndef divisible_by_digits(n: int, n2: int) -> typing.List[int]:\n    if n > n2:\n        return []\n    start = max(n, 1)\n    result: typing.List[int] = []\n    for num in range(start, n2 + 1):\n        temp = num\n        digits = []\n        while temp > 0:\n            digits.append(temp % 10)\n            temp \/\/= 10\n        if not digits:\n            continue\n        valid = True\n        for d in digits:\n            if d == 0 or num % d != 0:\n                valid = False\n                break\n        if valid:\n            result.append(num)\n    return result"
    },
    {
        "id":146,
        "response":"import math\n\ndef sector_area(n: float, n2: float) -> float:\n    if n < 0 or n2 < 0:\n        return 0.0\n    return (n2 \/ 360.0) * math.pi * n * n"
    },
    {
        "id":147,
        "response":"import sys\n\ndef lcs_of_three(s, s2, s3, n, n2, n3):\n    if n == 0 or n2 == 0 or n3 == 0:\n        return \"\"\n    dp = [[[0] * (n3 + 1) for _ in range(n2 + 1)] for __ in range(n + 1)]\n    max_len = 0\n    end_i = 0\n    for i in range(1, n + 1):\n        si = s[i - 1]\n        for j in range(1, n2 + 1):\n            sj = s2[j - 1]\n            for k in range(1, n3 + 1):\n                if si == sj == s3[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                    if dp[i][j][k] > max_len:\n                        max_len = dp[i][j][k]\n                        end_i = i\n                else:\n                    dp[i][j][k] = 0\n    if max_len == 0:\n        return \"\"\n    return s[end_i - max_len:end_i]"
    },
    {
        "id":148,
        "response":""
    },
    {
        "id":149,
        "response":"import typing\n\ndef sort_numeric_strings(lst: typing.List[str]) -> typing.List[str]:\n    return sorted(lst, key=lambda x: float(x) if '.' in x or 'e' in x.lower() else int(x))"
    },
    {
        "id":150,
        "response":"import typing\n\ndef add_tuple(lst: typing.List[typing.Any], tup: typing.Tuple[typing.Any, ...]) -> typing.List[typing.Any]:\n    if lst is None:\n        lst = []\n    lst.append(tup)\n    return lst"
    },
    {
        "id":151,
        "response":"import typing\n\ndef check_min_heap(lst: typing.List[typing.Any], n: int) -> bool:\n    if n <= 1:\n        return True\n    if n > len(lst):\n        return False\n    for i in range(n):\n        left = 2 * i + 1\n        if left < n and lst[i] > lst[left]:\n            return False\n        right = 2 * i + 2\n        if right < n and lst[i] > lst[right]:\n            return False\n    return True"
    },
    {
        "id":152,
        "response":"import typing\n\ndef jacobsthal_num(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b"
    },
    {
        "id":153,
        "response":"import heapq\nfrom typing import List, Tuple, Any\n\ndef min_k(lst: List[Tuple[Any, ...]], n: int) -> List[Tuple[Any, ...]]:\n    if n <= 0:\n        return []\n    return heapq.nsmallest(n, lst)"
    },
    {
        "id":154,
        "response":"import typing\n\ndef extract_index_list(lst: typing.List[typing.Any], lst2: typing.List[typing.Any], lst3: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    min_len = min(len(lst), len(lst2), len(lst3))\n    result = []\n    for i in range(min_len):\n        if lst[i] == lst2[i] == lst3[i]:\n            result.append(lst[i])\n    return result"
    },
    {
        "id":155,
        "response":"import typing\n\ndef second_smallest(lst: typing.Iterable[typing.Any]) -> typing.Optional[typing.Any]:\n    try:\n        unique = set(lst)\n    except TypeError:\n        raise TypeError(\"Input must be an iterable\")\n    if len(unique) < 2:\n        return None\n    smallest = None\n    second = None\n    for num in unique:\n        if smallest is None or num < smallest:\n            second = smallest\n            smallest = num\n        elif second is None or num < second:\n            second = num\n    return second"
    },
    {
        "id":156,
        "response":"import re\nfrom typing import Any\n\ndef text_match_zero_one(s: str) -> bool:\n    return '0' in s or 'b' in s"
    },
    {
        "id":157,
        "response":"import typing\n\ndef count_reverse_pairs(lst: typing.List[str]) -> int:\n    seen = {}\n    count = 0\n    for s in lst:\n        rev = s[::-1]\n        count += seen.get(rev, 0)\n        seen[s] = seen.get(s, 0) + 1\n    return count"
    },
    {
        "id":158,
        "response":"from typing import List, Any\n\ndef unique_sublists(lst: List[Any]) -> int:\n    seen = set()\n    n = len(lst)\n    for i in range(n):\n        for j in range(i, n):\n            seen.add(tuple(lst[i:j+1]))\n    return len(seen)"
    },
    {
        "id":159,
        "response":"import re\n\ndef is_decimal(s: str) -> bool:\n    if not isinstance(s, str):\n        return False\n    s = s.strip()\n    pattern = re.compile(r'^[+-]?\\d+\\.\\d{2}$')\n    return bool(pattern.fullmatch(s))"
    },
    {
        "id":160,
        "response":"import typing\n\ndef unique_Element(lst: typing.List[int], n: int) -> bool:\n    if n <= 0 or n > len(lst):\n        return False\n    first = lst[0]\n    for i in range(1, n):\n        if lst[i] != first:\n            return False\n    return True"
    },
    {
        "id":161,
        "response":"import math\n\ndef arc_length(radius: float, angle_deg: float) -> float:\n    if radius < 0:\n        raise ValueError(\"radius must be non-negative\")\n    return radius * math.radians(angle_deg)"
    },
    {
        "id":162,
        "response":"import typing\n\ndef check_monthnumber_number(n: int) -> bool:\n    return n in (4, 6, 9, 11)"
    },
    {
        "id":163,
        "response":"import typing\n\ndef find_Min_Diff(tup: typing.Sequence[int], n: int) -> int:\n    if n < 2:\n        return 0\n    arr = sorted(tup[:n])\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(2, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            if min_diff == 0:\n                break\n    return min_diff"
    },
    {
        "id":164,
        "response":""
    },
    {
        "id":165,
        "response":""
    },
    {
        "id":166,
        "response":""
    },
    {
        "id":167,
        "response":"import collections\n\ndef get_Pairs_Count(lst, target_sum):\n    freq = collections.Counter(lst)\n    count = 0\n    for x in list(freq):\n        y = target_sum - x\n        if y not in freq:\n            continue\n        if x < y:\n            count += freq[x] * freq[y]\n        elif x == y:\n            count += freq[x] * (freq[x] - 1) \/\/ 2\n    return count"
    },
    {
        "id":168,
        "response":"def check_Odd_Parity(n):\n    return bin(n).count('1') % 2 == 1"
    },
    {
        "id":169,
        "response":""
    },
    {
        "id":170,
        "response":"from typing import Union\n\ndef odd_Num_Sum(n: Union[int, float]) -> int:\n    try:\n        n = int(n)\n    except Exception:\n        return 0\n    if n <= 0:\n        return 0\n    total = 0\n    for k in range(1, n + 1):\n        odd = 2 * k - 1\n        total += odd ** 4\n    return total"
    },
    {
        "id":171,
        "response":"import typing\n\ndef check_expression(s: str) -> bool:\n    stack = []\n    pairs = {')': '(', ']': '[', '}': '{'}\n    for ch in s:\n        if ch in ('(', '[', '{'):\n            stack.append(ch)\n        elif ch in pairs:\n            if not stack or stack[-1] != pairs[ch]:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "id":172,
        "response":"import typing\n\ndef remove_length(s: str, n: int) -> str:\n    if not s or n <= 0:\n        return s\n    words = s.split()\n    filtered = [w for w in words if len(w) != n]\n    return \" \".join(filtered)"
    },
    {
        "id":173,
        "response":"import typing\n\ndef occurrence_substring(s: str, sub: str) -> typing.Tuple[int, list[int]]:\n    if not sub:\n        return 0, []\n    positions: list[int] = []\n    start = 0\n    while True:\n        idx = s.find(sub, start)\n        if idx == -1:\n            break\n        positions.append(idx)\n        start = idx + 1\n    return len(positions), positions"
    },
    {
        "id":174,
        "response":"import string\n\ndef check_email(s: str) -> bool:\n    if not isinstance(s, str):\n        return False\n    if s.count(\"@\") != 1:\n        return False\n    local, domain = s.split(\"@\", 1)\n    if not local or not domain:\n        return False\n    allowed_local_special = set(\"!#$%&'*+-\/=?^_`{|}~\")\n    if local[0] == '.' or local[-1] == '.':\n        return False\n    prev_dot = False\n    for ch in local:\n        if ch == '.':\n            if prev_dot:\n                return False\n            prev_dot = True\n            continue\n        prev_dot = False\n        if ch.isalnum() or ch in allowed_local_special:\n            continue\n        return False\n    if domain[0] == '.' or domain[-1] == '.':\n        return False\n    if '..' in domain:\n        return False\n    labels = domain.split('.')\n    if len(labels) < 2:\n        return False\n    for i, label in enumerate(labels):\n        if not label:\n            return False\n        if not (label[0].isalnum() and label[-1].isalnum()):\n            return False\n        for ch in label:\n            if ch.isalnum() or ch == '-':\n                continue\n            return False\n        if label[0] == '-' or label[-1] == '-':\n            return False\n    tld = labels[-1]\n    if len(tld) < 2 or not tld.isalpha():\n        return False\n    return True"
    },
    {
        "id":175,
        "response":"from typing import List, Any\n\ndef odd_position(lst: List[Any]) -> bool:\n    for i in range(1, len(lst), 2):\n        try:\n            if lst[i] % 2 == 0:\n                return False\n        except Exception:\n            return False\n    return True"
    },
    {
        "id":176,
        "response":"import typing\n\ndef count_vowels(s: str) -> int:\n    vowels = set('aeiouAEIOU')\n    n = len(s)\n    cnt = 0\n    for i in range(n):\n        if (i > 0 and s[i-1] in vowels) or (i < n-1 and s[i+1] in vowels):\n            cnt += 1\n    return cnt"
    },
    {
        "id":177,
        "response":"import collections\nfrom typing import List\n\ndef find_Sum(lst: List[int], n: int) -> int:\n    effective_len = max(0, min(n, len(lst)))\n    sub_lst = lst[:effective_len]\n    counts = collections.Counter(sub_lst)\n    total = 0\n    for value, count in counts.items():\n        if count == 1:\n            total += value\n    return total"
    },
    {
        "id":178,
        "response":"```python\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(lst: List[Any]) -> List[List[Any]]:\n    if not lst:\n        return []\n    result: List[List[Any]] = []\n    current: List[Any] = [lst[0]]\n    for item in lst[1:]:\n        if item == current[-1]:\n            current.append(item)\n        else:\n            result.append(current)\n            current = [item]\n    result.append(current)\n    return result\n```"
    },
    {
        "id":179,
        "response":"import typing\n\ndef unique_sublists(lst: typing.List[typing.Any]) -> int:\n    unique = set()\n    for sub in lst:\n        try:\n            key = tuple(sub)\n        except TypeError:\n            key = sub\n        unique.add(key)\n    return len(unique)"
    },
    {
        "id":180,
        "response":"import itertools\nfrom collections import defaultdict\nfrom typing import List, Tuple\n\ndef find_combinations(lst: List[Tuple[int, ...]]) -> List[List[Tuple[int, ...]]]:\n    sum_to_tuples = defaultdict(list)\n    for t in lst:\n        sum_to_tuples[sum(t)].append(t)\n    result = []\n    for group in sum_to_tuples.values():\n        if len(group) < 2:\n            continue\n        for combo in itertools.combinations(group, 2):\n            result.append(list(combo))\n    return result"
    },
    {
        "id":181,
        "response":"import math\n\ndef count_Divisors(n: int) -> str:\n    if n <= 0:\n        return None\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n \/\/ i:\n                count += 1\n        i += 1\n    return 'Even' if count % 2 == 0 else 'Odd'"
    },
    {
        "id":182,
        "response":"import typing\n\ndef Odd_Length_Sum(lst: typing.List[int]) -> int:\n    n = len(lst)\n    total = 0\n    for i, val in enumerate(lst):\n        left = i + 1\n        right = n - i\n        same_left = (left + 1) \/\/ 2\n        opp_left = left \/\/ 2\n        same_right = (right + 1) \/\/ 2\n        opp_right = right \/\/ 2\n        count = same_left * same_right + opp_left * opp_right\n        total += val * count\n    return total"
    },
    {
        "id":183,
        "response":"import typing\n\ndef rgb_to_hsv(r: float, g: float, b: float) -> typing.Tuple[float, float, float]:\n    if max(r, g, b) > 1:\n        r \/= 255.0\n        g \/= 255.0\n        b \/= 255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    delta = maxc - minc\n    if maxc == 0:\n        s = 0.0\n    else:\n        s = delta \/ maxc\n    if delta == 0:\n        h = 0.0\n    else:\n        if maxc == r:\n            h = ((g - b) \/ delta) % 6\n        elif maxc == g:\n            h = ((b - r) \/ delta) + 2\n        else:\n            h = ((r - g) \/ delta) + 4\n        h *= 60\n    return (h, s, v)"
    },
    {
        "id":184,
        "response":"def mul_even_odd(lst):\n    even = None\n    odd = None\n    for x in lst:\n        if even is None and x % 2 == 0:\n            even = x\n        if odd is None and x % 2 != 0:\n            odd = x\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return None\n    return even * odd"
    },
    {
        "id":185,
        "response":"import ast\nfrom typing import Tuple\n\ndef tuple_str_int(s: str) -> Tuple[int, ...]:\n    try:\n        parsed = ast.literal_eval(s)\n    except Exception:\n        raise ValueError(\"Invalid tuple string\")\n    if not isinstance(parsed, (tuple, list)):\n        raise ValueError(\"String does not represent a tuple or list\")\n    return tuple(int(x) for x in parsed)"
    },
    {
        "id":186,
        "response":"import bisect\nfrom typing import List\n\ndef right_insertion(lst: List[int], n: int) -> int:\n    return bisect.bisect_right(lst, n)"
    },
    {
        "id":187,
        "response":"import re\n\ndef text_match_three(s: str) -> bool:\n    return bool(re.search(r'abbb', s))"
    },
    {
        "id":188,
        "response":"import typing\n\ndef new_tuple(lst: typing.List[typing.Any], s: str) -> tuple:\n    return tuple(lst) + tuple(s)"
    },
    {
        "id":189,
        "response":"from typing import Union\n\ndef perimeter_polygon(n: int, side_length: Union[int, float]) -> float:\n    if n < 3:\n        raise ValueError(\"Number of sides must be at least 3\")\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    return n * float(side_length)"
    },
    {
        "id":190,
        "response":"from typing import List\n\ndef even_position(lst: List[int]) -> bool:\n    for i, v in enumerate(lst):\n        if i % 2 == 0 and v % 2 != 0:\n            return False\n    return True"
    },
    {
        "id":191,
        "response":""
    },
    {
        "id":192,
        "response":"import typing\n\ndef count_list(lst: typing.Any) -> int:\n    if not isinstance(lst, list):\n        return 0\n    count = 0\n    stack = [lst]\n    while stack:\n        current = stack.pop()\n        for item in current:\n            if isinstance(item, list):\n                count += 1\n                stack.append(item)\n    return count"
    },
    {
        "id":193,
        "response":""
    },
    {
        "id":194,
        "response":"import re\n\npattern = re.compile(r'^a.+b$')\n\ndef text_starta_endb(s: str) -> bool:\n    return bool(pattern.match(s))"
    },
    {
        "id":195,
        "response":"import typing\n\ndef cheap_items(lst: typing.List[typing.Any], n: int) -> typing.List[typing.Any]:\n    if n <= 0:\n        return []\n    def get_price(item: typing.Any) -> float:\n        price = None\n        if isinstance(item, dict):\n            price = item.get('price')\n        elif isinstance(item, (list, tuple)) and len(item) >= 2:\n            price = item[1]\n        if isinstance(price, (int, float)):\n            return price\n        return float('inf')\n    sorted_items = sorted(lst, key=get_price)\n    return sorted_items[:n]"
    },
    {
        "id":196,
        "response":"import typing\n\ndef return_sum(dct: dict) -> float:\n    return sum(dct.values())"
    },
    {
        "id":197,
        "response":"import math\n\ndef sum_in_Range(n: int, n2: int) -> int:\n    l, r = (n, n2) if n <= n2 else (n2, n)\n    if l < 1:\n        l = 1\n    if l % 2 == 0:\n        l += 1\n    if r % 2 == 0:\n        r -= 1\n    if l > r:\n        return 0\n    count = (r - l) \/\/ 2 + 1\n    return count * (l + r) \/\/ 2"
    },
    {
        "id":198,
        "response":"import typing\n\ndef _sum(lst: typing.Any) -> float:\n    if lst is None:\n        return 0\n    return sum(lst)"
    },
    {
        "id":199,
        "response":"import math\n\ndef left_Rotate(n: int, n2: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    bit_len = n.bit_length()\n    shift = n2 % bit_len\n    if shift == 0:\n        return n\n    mask = (1 << bit_len) - 1\n    return ((n << shift) | (n >> (bit_len - shift))) & mask"
    },
    {
        "id":200,
        "response":"import re\n\ndef remove_all_spaces(s: str) -> str:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return re.sub(r'\\s', '', s)"
    },
    {
        "id":201,
        "response":"import typing\n\ndef test_three_equal(n: int, n2: int, n3: int) -> int:\n    if n == n2 == n3:\n        return 3\n    if n == n2 or n == n3 or n2 == n3:\n        return 2\n    return 0"
    },
    {
        "id":202,
        "response":"import typing\n\ndef count_Rotation(lst: typing.List[typing.Any], n: int) -> int:\n    if not lst:\n        return 0\n    if n != len(lst):\n        n = len(lst)\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if mid < high and lst[mid] > lst[mid + 1]:\n            return mid + 1\n        if mid > low and lst[mid] < lst[mid - 1]:\n            return mid\n        if lst[low] <= lst[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0"
    },
    {
        "id":203,
        "response":"import math\n\ndef is_Perfect_Square(n):\n    if not isinstance(n, (int, float)):\n        return False\n    if isinstance(n, float):\n        if not n.is_integer():\n            return False\n        n = int(n)\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n"
    },
    {
        "id":204,
        "response":"import typing\n\ndef is_Product_Even(lst: typing.List[int], n: int) -> bool:\n    if n <= 0:\n        return False\n    limit = min(n, len(lst))\n    for i in range(limit):\n        if lst[i] % 2 == 0:\n            return True\n    return False"
    },
    {
        "id":205,
        "response":"import typing\n\ndef max_sum_list(lst: typing.List[typing.List[typing.Any]]) -> typing.Optional[typing.List[typing.Any]]:\n    if not lst:\n        return None\n    max_sum = None\n    best_list = None\n    for sub in lst:\n        if not isinstance(sub, list):\n            continue\n        current_sum = sum(sub)\n        if max_sum is None or current_sum > max_sum:\n            max_sum = current_sum\n            best_list = sub\n    return best_list if best_list is not None else None"
    },
    {
        "id":206,
        "response":"import typing\n\ndef max_run_uppercase(s: str) -> int:\n    max_run = 0\n    current = 0\n    for ch in s:\n        if ch.isupper():\n            current += 1\n            if current > max_run:\n                max_run = current\n        else:\n            current = 0\n    return max_run"
    },
    {
        "id":207,
        "response":"import typing\n\ndef first_odd(lst: typing.List[int]) -> typing.Optional[int]:\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            return num\n    return None"
    },
    {
        "id":208,
        "response":"import typing\n\ndef check_K(tup: typing.Any, n: typing.Any) -> bool:\n    stack = [tup]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, tuple):\n            for el in current:\n                if el == n:\n                    return True\n                if isinstance(el, tuple):\n                    stack.append(el)\n        else:\n            if current == n:\n                return True\n    return False"
    },
    {
        "id":209,
        "response":"import typing\n\ndef check_smaller(tup: typing.Tuple, tup2: typing.Tuple) -> bool:\n    if len(tup) != len(tup2):\n        return False\n    return all(b < a for a, b in zip(tup, tup2))"
    },
    {
        "id":210,
        "response":"from typing import List, Any\n\ndef count_variable(*args: int) -> List[int]:\n    result: List[int] = []\n    for val in args:\n        if isinstance(val, int) and val > 0:\n            result.extend([val] * val)\n    return result"
    },
    {
        "id":211,
        "response":"import typing\n\ndef check_identical(lst: typing.List[typing.Tuple[typing.Any, ...]], lst2: typing.List[typing.Tuple[typing.Any, ...]]) -> bool:\n    if not isinstance(lst, list) or not isinstance(lst2, list):\n        return False\n    if len(lst) != len(lst2):\n        return False\n    for a, b in zip(lst, lst2):\n        if a != b:\n            return False\n    return True"
    },
    {
        "id":212,
        "response":"import re\nfrom typing import Any\n\ndef road_rd(s: str) -> str:\n    if not isinstance(s, str):\n        return s\n    return s.replace('road', 'rd.')"
    },
    {
        "id":213,
        "response":"from typing import Any\n\ndef string_length(s: str) -> int:\n    return len(s)"
    },
    {
        "id":214,
        "response":"import math\n\ndef rombus_area(n: float, n2: float) -> float:\n    return abs(n * n2) \/ 2.0"
    },
    {
        "id":215,
        "response":"import typing\n\ndef sort_by_dnf(lst: typing.List[int], n: int) -> None:\n    low, mid, high = 0, 0, n - 1\n    while mid <= high:\n        if lst[mid] == 0:\n            lst[low], lst[mid] = lst[mid], lst[low]\n            low += 1\n            mid += 1\n        elif lst[mid] == 1:\n            mid += 1\n        else:\n            lst[mid], lst[high] = lst[high], lst[mid]\n            high -= 1"
    },
    {
        "id":216,
        "response":""
    },
    {
        "id":217,
        "response":"from typing import List\n\ndef div_of_nums(lst: List[int], n: int, n2: int) -> List[int]:\n    return list(filter(lambda x: (n != 0 and x % n == 0) or (n2 != 0 and x % n2 == 0), lst))"
    },
    {
        "id":218,
        "response":"def lower_ctr(s):\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    return sum(1 for c in s if c.islower())"
    },
    {
        "id":219,
        "response":"import typing\n\ndef count_duplic(lst: typing.List[typing.Any]) -> typing.Dict[typing.Any, int]:\n    result: typing.Dict[typing.Any, int] = {}\n    if not lst:\n        return result\n    current = lst[0]\n    count = 1\n    for item in lst[1:]:\n        if item == current:\n            count += 1\n        else:\n            result[current] = result.get(current,"
    },
    {
        "id":220,
        "response":"import typing\n\ndef check_monthnum_number(n: int) -> bool:\n    return n == 2"
    },
    {
        "id":221,
        "response":"from typing import Dict\n\ndef merge_dictionaries(dct: Dict, dct2: Dict) -> Dict:\n    return {**(dct or {}), **(dct2 or {})}"
    },
    {
        "id":222,
        "response":"import re\n\ndef pass_validity(s: str) -> bool:\n    if not isinstance(s, str) or not s:\n        return False\n    if len(s) < 8:\n        return False\n    if not re.search(r'[A-Z]', s):\n        return False\n    if not re.search(r'[a-z]', s):\n        return False\n    if not re.search(r'\\d', s):\n        return False\n    if not re.search(r'[!@#$%^&*()_\\-+=\\[\\]{}|\\\\:;\\\"\\'<>,.?\/~`]', s):\n        return False\n    return True"
    },
    {
        "id":223,
        "response":"import re\n\ndef check_substring(s: str, s2: str) -> bool:\n    return bool(re.match(r'^' + re.escape(s2), s))"
    },
    {
        "id":224,
        "response":"import typing\n\ndef remove_even(lst: typing.List[int]) -> typing.List[int]:\n    return [x for x in lst if x % 2 != 0]"
    },
    {
        "id":225,
        "response":"from typing import List, Iterable\n\ndef access_elements(lst: List, indices: Iterable[int]) -> List:\n    result = []\n    n = len(lst)\n    for i in indices:\n        if i < -n or i >= n:\n            raise IndexError(f\"Index {i} out of range for list of length {n}\")\n        result.append(lst[i])\n    return result"
    },
    {
        "id":226,
        "response":"import typing\n\ndef check_Type_Of_Triangle(n: float, n2: float, n3: float) -> str:\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return \"Invalid\"\n    if not (n + n2 > n3 and n + n3 > n2 and n2 + n3 > n):\n        return \"Invalid\"\n    if n == n2 == n3:\n        return \"Equilateral\"\n    if n == n2 or n == n3 or n2 == n3:\n        return \"Isosceles\"\n    return \"Scalene\""
    },
    {
        "id":227,
        "response":"import typing\n\ndef sum_column(lst: typing.List[typing.List[typing.Any]], n: int) -> typing.Any:\n    total = 0\n    for row in lst:\n        if isinstance(row, (list, tuple)) and 0 <= n < len(row):\n            total += row[n]\n    return total"
    },
    {
        "id":228,
        "response":"import re\nfrom typing import Tuple\n\ndef count_alpha_dig_spl(s: str) -> Tuple[int, int, int]:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    alpha = digit = special = 0\n    for ch in s:\n        if ch.isalpha():\n            alpha += 1\n        elif ch.isdigit():\n            digit += 1\n        else:\n            special += 1\n    return alpha, digit, special"
    },
    {
        "id":229,
        "response":"import collections\nfrom typing import List, Optional\n\ndef second_frequent(lst: List[str]) -> Optional[str]:\n    if not lst:\n        return None\n    counter = collections.Counter(lst)\n    if len(counter) < 2:\n        return None\n    most_common = counter.most_common()\n    first_count = most_common[0][1]\n    for string, count in most_common[1:]:\n        if count < first_count:\n            return string\n    return None"
    },
    {
        "id":230,
        "response":""
    },
    {
        "id":231,
        "response":"import collections\n\ndef count_Pairs(lst, n):\n    if n <= 0:\n        return 0\n    sub = lst[:n]\n    counter = collections.Counter(sub)\n    total = 0\n    for freq in counter.values():\n        if freq > 1:\n            total += freq * (freq - 1) \/\/ 2\n    return total"
    },
    {
        "id":232,
        "response":"import re\nfrom typing import Optional\n\ndef extract_max(s: str) -> Optional[float]:\n    numbers = re.findall(r'-?\\d+\\.?\\d*', s)\n    if not numbers:\n        return None\n    nums = [float(num) for num in numbers]\n    return max(nums)"
    },
    {
        "id":233,
        "response":"def get_key(dct):\n    return list(dct.keys())"
    },
    {
        "id":234,
        "response":"import typing\n\ndef generate_matrix(n: int) -> typing.List[typing.List[int]]:\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    top, bottom, left, right = 0, n - 1, 0, n - 1\n    num = 1\n    while top <= bottom and left <= right:\n        for col in range(left, right + 1):\n            matrix[top][col] = num * num\n            num += 1\n        top += 1\n        for row in range(top, bottom + 1):\n            matrix[row][right] = num * num\n            num += 1\n        right -= 1\n        if top <= bottom:\n            for col in range(right, left - 1, -1):\n                matrix[bottom][col] = num * num\n                num += 1\n            bottom -= 1\n        if left <= right:\n            for row in range(bottom, top - 1, -1):\n                matrix[row][left] = num * num\n                num += 1\n            left += 1\n    return matrix"
    },
    {
        "id":235,
        "response":"import typing\n\ndef slope(n: float, n2: float, n3: float, n4: float) -> typing.Optional[float]:\n    dx = n3 - n\n    if dx == 0:\n        return None\n    return (n4 - n2) \/ dx"
    },
    {
        "id":236,
        "response":""
    },
    {
        "id":237,
        "response":""
    },
    {
        "id":238,
        "response":"from typing import Tuple\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    count01 = 0\n    count10 = 0\n    for a, b in zip(s, s2):\n        if a == '0' and b == '1':\n            count01 += 1\n        elif a == '1' and b == '0':\n            count10 += 1\n    return max(count01, count10)"
    },
    {
        "id":239,
        "response":"from typing import List, Tuple, Any\n\ndef sort_tuple(lst: List[Tuple[Any, ...]]) -> List[Tuple[Any, ...]]:\n    return sorted(lst, key=lambda x: str(x[0]) if x else '')"
    },
    {
        "id":240,
        "response":"import math\n\ndef Check_Solution(a: float, b: float, c: float) -> bool:\n    if a == 0:\n        return False\n    if b != 0:\n        return False\n    if a * c >= 0:\n        return False\n    return True"
    },
    {
        "id":241,
        "response":"import typing\n\ndef get_inv_count(lst: typing.List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    if n > len(lst):\n        n = len(lst)\n    temp = [0] * n\n\n    def merge_sort(left: int, right: int) -> int:\n        if right - left <= 1:\n            return 0\n        mid = (left + right) \/\/ 2\n        inv = merge_sort(left, mid) + merge_sort(mid, right)\n        i, j, k = left, mid, left\n        while i < mid and j < right:\n            if lst[i] <= lst[j]:\n                temp[k] = lst[i]\n                i += 1\n            else:\n                temp[k] = lst[j]\n                inv += mid - i\n                j += 1\n            k += 1\n        while i < mid:\n            temp[k] = lst[i]\n            i += 1\n            k += 1\n        while j < right:\n            temp[k] = lst[j]\n            j += 1\n            k += 1\n        lst[left:right] = temp[left:right]\n        return inv\n\n    return merge_sort(0, n)"
    },
    {
        "id":242,
        "response":"```python\nimport typing\n\ndef get_odd_occurence(lst: typing.List[int], n: int) -> typing.Optional[int]:\n    if not lst or n <= 0:\n        return None\n    result = 0\n    limit = min(n, len(lst))\n    for i in range(limit):\n        result ^= lst[i]\n    return result if limit > 0 else None\n```"
    },
    {
        "id":243,
        "response":"import heapq\nfrom typing import List\n\ndef nth_super_ugly_number(n: int, lst: List[int]) -> int:\n    if n <= 0:\n        return 0\n    primes = sorted(set(lst))\n    heap = [1]\n    seen = {1}\n    result = 1\n    for _ in range(n):\n        result = heapq.heappop(heap)\n        for p in primes:\n            new_val = result * p\n            if new_val not in seen:\n                seen.add(new_val)\n                heapq.heappush(heap, new_val)\n    return result"
    },
    {
        "id":244,
        "response":"```python\nimport typing\n\ndef get_Number(arr: typing.List[int], k: int) -> typing.Optional[int]:\n    if not isinstance(arr, list) or not isinstance(k, int):\n        return None\n    if k <= 0 or k > len(arr):\n        return None\n    return arr[k - 1]\n```"
    },
    {
        "id":245,
        "response":"import math\n\ndef find_Digits(n):\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n <= 1:\n        return 1\n    total = 0.0\n    for i in range(2, n + 1):\n        total += math.log10(i)\n    return math.floor(total) + 1"
    },
    {
        "id":246,
        "response":"import typing\n\ndef find_platform(lst: typing.List[int], lst2: typing.List[int], n: int) -> int:\n    if n == 0:\n        return 0\n    arrivals = sorted(lst[:n])\n    departures = sorted(lst2[:n])\n    i = j = 0\n    platforms_needed = 0\n    max_platforms = 0\n    while i < n and j < n:\n        if arrivals[i] <= departures[j]:\n            platforms_needed += 1\n            i += 1\n            if platforms_needed > max_platforms:\n                max_platforms = platforms_needed\n        else:\n            platforms_needed -= 1\n            j += 1\n    return max_platforms"
    },
    {
        "id":247,
        "response":"from typing import Any, Tuple, List\n\ndef lcopy(t: Tuple[Any, ...]) -> List[Any]:\n    if len(t) != 1:\n        raise ValueError(\"Input must be a singleton tuple\")\n    elem = t[0]\n    if not isinstance(elem, list):\n        raise TypeError(\"Element inside tuple must be a list\")\n    return list(elem)"
    },
    {
        "id":248,
        "response":"import typing\n\ndef area_trapezium(n: typing.Union[int, float], n2: typing.Union[int, float], n3: typing.Union[int, float]) -> float:\n    return (n + n2) * n3 \/ 2.0"
    },
    {
        "id":249,
        "response":"import math\n\ndef Sum(n: int) -> int:\n    if n == 0:\n        return 0\n    m = abs(n)\n    total = 1\n    if m == 1:\n        return 1\n    limit = math.isqrt(m)\n    for i in range(2, limit + 1):\n        if m % i == 0:\n            total += i\n            other = m \/\/ i\n            if other != i:\n                total += other\n    total += m\n    return total"
    },
    {
        "id":250,
        "response":"import typing\n\ndef is_triangleexists(n: float, n2: float, n3: float) -> bool:\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    return abs((n + n2 + n3) - 180) < 1e-9"
    },
    {
        "id":251,
        "response":"import math\nfrom typing import Union\n\ndef Sum_of_Inverse_Divisors(n: int, n2: int) -> float:\n    def sum_inv(num: int) -> float:\n        if num <= 0:\n            return 0.0\n        total = 0.0\n        limit = int(math.isqrt(num))\n        for d in range(1, limit + 1):\n            if num % d == 0:\n                total += 1.0 \/ d\n                other = num \/\/ d\n                if other != d:\n                    total += "
    },
    {
        "id":252,
        "response":"from typing import List, Union\n\ndef remove_negs(lst: List[Union[int, float]]) -> List[Union[int, float]]:\n    return [x for x in lst if x >= 0]"
    },
    {
        "id":253,
        "response":"import math\n\ndef sum_of_odd_Factors(n):\n    if n == 0:\n        return 0\n    n = abs(n)\n    total = 0\n    limit = int(math.isqrt(n))\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            if i & 1:\n                total += i\n            j = n \/\/ i\n            if j != i and (j & 1):\n                total += j\n    return total"
    },
    {
        "id":254,
        "response":""
    },
    {
        "id":255,
        "response":"from typing import Any\n\ndef check_Even_Parity(n: int) -> bool:\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    return n % 2 == 0"
    },
    {
        "id":256,
        "response":"import typing\n\ndef find_Min_Swaps(lst: typing.List[int], n: int) -> int:\n    swaps = 0\n    ones_seen = 0\n    for i in range(n):\n        if lst[i] == 1:\n            ones_seen += 1\n        elif lst[i] == 0:\n            swaps += ones_seen\n    return swaps"
    },
    {
        "id":257,
        "response":"from typing import List\n\ndef listify_list(lst: List[str]) -> List[List[str]]:\n    return list(map(list, lst))"
    },
    {
        "id":258,
        "response":"import math\nfrom typing import List, Any\n\ndef count_list(lst: List[List[Any]]) -> int:\n    count = 0\n    for sub in lst:\n        if not isinstance(sub, list):\n            continue\n        for item in sub:\n            if isinstance(item, int) and item >= 0:\n                root = math.isqrt(item)\n                if root * root == item:\n                    count += 1\n    return count"
    },
    {
        "id":259,
        "response":"from typing import List, Any\n\ndef sub_lists(lst: List[Any]) -> List[List[Any]]:\n    return [lst[i:j] for i in range(len(lst)) for j in range(i + 1, len(lst) + 1)]"
    },
    {
        "id":260,
        "response":""
    },
    {
        "id":261,
        "response":"import typing\n\ndef anagram_lambda(lst: typing.List[str], s: str) -> typing.List[str]:\n    return list(filter(lambda x: sorted(x) == sorted(s), lst))"
    },
    {
        "id":262,
        "response":"import re\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef n_common_words(s: str, n: int) -> List[Tuple[str, int]]:\n    if not s or n <= 0:\n        return []\n    words = re.findall(r'\\b\\w+\\b', s.lower())\n    counter = Counter(words)\n    return counter.most_common(n)"
    },
    {
        "id":263,
        "response":"```python\nimport typing\n\ndef find_longest_conseq_subseq(lst: typing.List[int], n: int) -> int:\n    if not lst:\n        return 0\n    nums = set(lst)\n    max_len = 0\n    for num in nums:\n        if num - 1 not in nums:\n            current = num\n            length = 1\n            while current + 1 in nums:\n                current += 1\n                length += 1\n            if length > max_len:\n                max_len = length\n    return max_len\n```"
    },
    {
        "id":264,
        "response":"from typing import List\n\ndef palindrome_lambda(lst: List[str]) -> List[str]:\n    return list(filter(lambda s: s == s[::-1], lst))"
    },
    {
        "id":265,
        "response":"import typing\n\ndef ntimes_list(lst: typing.List, n: int) -> None:\n    list(map(lambda _: print(lst), range(n)))"
    },
    {
        "id":266,
        "response":"import re\nimport typing\n\ndef check_monthnumb(s: str) -> bool:\n    month = s.strip().lower()\n    months_31 = {\"january\", \"march\", \"may\", \"july\", \"august\", \"october\", \"december\",\n                 \"jan\", \"mar\", \"may\", \"jul\", \"aug\", \"oct\", \"dec\"}\n    return month in months_31"
    },
    {
        "id":267,
        "response":""
    },
    {
        "id":268,
        "response":"import typing\n\ndef length_Of_Last_Word(s: str) -> int:\n    i = len(s) - 1\n    while i >= 0 and s[i] == ' ':\n        i -= 1\n    length = 0\n    while i >= 0 and s[i] != ' ':\n        length += 1\n        i -= 1\n    return length"
    },
    {
        "id":269,
        "response":""
    },
    {
        "id":270,
        "response":"import re\nimport typing\nimport itertools\n\ndef sum_positivenum(lst: list) -> float:\n    if not lst:\n        return 0\n    return sum(filter(lambda x: isinstance(x, (int, float)) and x > 0, lst))"
    },
    {
        "id":271,
        "response":"import typing\n\ndef are_Rotations(s: str, s2: str) -> bool:\n    if s is None or s2 is None:\n        return False\n    if len(s) != len(s2):\n        return False\n    return s2 in s + s"
    },
    {
        "id":272,
        "response":""
    },
    {
        "id":273,
        "response":"from typing import Union\n\ndef fibonacci(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)"
    },
    {
        "id":274,
        "response":"import re\nfrom typing import *\n\ndef check_Concat(s: str, s2: str) -> bool:\n    if not s2:\n        return s == \"\"\n    if len(s) % len(s2) != 0:\n        return False\n    return s == s2 * (len(s) \/\/ len(s2))"
    },
    {
        "id":275,
        "response":"import itertools\nfrom typing import Tuple, Optional\n\ndef min_difference(lst: Tuple[Tuple[int, ...], ...]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    sums = [sum(t) for t in lst]\n    min_diff = None\n    for a, b in itertools.combinations(sums, 2):\n        diff = abs(a - b)\n        if min_diff is None or diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "id":276,
        "response":"import math\n\ndef lcm(a: int, b: int) -> int:\n    if a == 0 or b == 0:\n        return 0\n    return abs(a * b) \/\/ math.gcd(a, b)"
    },
    {
        "id":277,
        "response":"import typing\n\ndef sort_String(s: str) -> str:\n    return \"\".join(sorted(s))"
    },
    {
        "id":278,
        "response":"import typing\n\ndef check_tuples(tup: typing.Tuple, lst: typing.List) -> bool:\n    return all(elem in lst for elem in tup)"
    },
    {
        "id":279,
        "response":"import re\nfrom typing import Any\n\ndef text_match(s: str) -> bool:\n    return bool(re.search(r'a.+b$', s))"
    },
    {
        "id":280,
        "response":"import math\nfrom typing import Union\n\ndef Check_Solution(a: Union[int, float], b: Union[int, float], c: Union[int, float]) -> int:\n    if a == 0:\n        if b == 0:\n            return 0\n        return 1\n    d = b * b - 4 * a * c\n    if d > 0:\n        return 2\n    if d == 0:\n        return 1\n    return 0"
    },
    {
        "id":281,
        "response":"import typing\n\ndef sum_even_odd(lst: typing.List[int]) -> int:\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    even_val = even if even is not None else 0\n    odd_val = odd if odd is not None else 0\n    return even_val + odd_val"
    },
    {
        "id":282,
        "response":"import typing\n\ndef parallelogram_perimeter(n: typing.Union[int, float], n2: typing.Union[int, float]) -> float:\n    if n < 0 or n2 < 0:\n        raise ValueError(\"Side lengths must be non-negative\")\n    return 2 * (n + n2)"
    },
    {
        "id":283,
        "response":"import typing\n\ndef div_of_nums(lst: typing.List[int], n: int, n2: int) -> typing.List[int]:\n    if n == 0 or n2 == 0:\n        raise ValueError(\"Divisors must be non-zero\")\n    return list(filter(lambda x: x % n == 0 and x % n2 == 0, lst))"
    },
    {
        "id":284,
        "response":"import typing\n\ndef all_Bits_Set_In_The_Given_Range(n: int, n2: int, n3: int) -> bool:\n    if n2 > n3 or n2 < 0 or n3 < 0:\n        return False\n    if n < 0:\n        return False\n    width = n3 - n2 + 1\n    mask = ((1 << width) - 1) << n2\n    return (n & ~mask) == 0"
    },
    {
        "id":285,
        "response":"from typing import Dict\n\ndef is_Isomorphic(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    mapping: Dict[str, str] = {}\n    reverse_mapping: Dict[str, str] = {}\n    for c1, c2 in zip(s, s2):\n        if c1 in mapping:\n            if mapping[c1] != c2:\n                return False\n        else:\n            if c2 in reverse_mapping:\n                return False\n            mapping[c1] = c2\n            reverse_mapping[c2] = c1\n    return True"
    },
    {
        "id":286,
        "response":"import typing\n\ndef sum_num(tup: typing.Iterable[float]) -> float:\n    seq = list(tup)\n    if not seq:\n        raise ValueError(\"Cannot compute average of empty sequence\")\n    return sum(seq) \/ len(seq)"
    },
    {
        "id":287,
        "response":"def is_odd(n: int) -> bool:\n    return bool(n & 1)"
    },
    {
        "id":288,
        "response":"import typing\n\ndef substract_elements(tup: typing.Tuple, tup2: typing.Tuple) -> typing.Tuple:\n    if isinstance(tup, tuple) and isinstance(tup2, tuple):\n        return tuple(substract_elements(a, b) for a, b in zip(tup, tup2))\n    else:\n        return tup - tup2"
    },
    {
        "id":289,
        "response":"import typing\n\ndef reverse_list_lists(lst: typing.List[typing.List]) -> typing.List[typing.List]:\n    return [list(reversed(sub)) for sub in lst]"
    },
    {
        "id":290,
        "response":"import typing\n\ndef find_Extra(lst: typing.List[int], lst2: typing.List[int], n: int) -> int:\n    if n == 0:\n        return -1\n    i, j = 0, 0\n    while i < n and j < len(lst2):\n        if lst[i] != lst2[j]:\n            return i\n        i += 1\n        j += 1\n    return n - 1"
    },
    {
        "id":291,
        "response":"import typing\n\ndef same_Length(n: int, n2: int) -> bool:\n    return len(str(abs(n))) == len(str(abs(n2)))"
    },
    {
        "id":292,
        "response":"import re\n\ndef remove_spaces(s: str) -> str:\n    return re.sub(r' +', ' ', s)"
    },
    {
        "id":293,
        "response":"import typing\n\ndef Extract(lst: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any]:\n    return [sub[-1] if sub else None for sub in lst]"
    },
    {
        "id":294,
        "response":""
    },
    {
        "id":295,
        "response":"from typing import List\n\ndef max_sum_subseq(lst: List[int]) -> int:\n    if not lst:\n        return 0\n    incl = max(0, lst[0])\n    excl = 0\n    for num in lst[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)"
    },
    {
        "id":296,
        "response":"import typing\n\ndef sort_list_last(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return sorted(lst)"
    },
    {
        "id":297,
        "response":"import re\n\ndef is_Word_Present(s, s2):\n    if not s or not s2:\n        return False\n    word_list = re.findall(r\"\\b\\w+\\b\", s)\n    target = s2.strip().lower()\n    for word in word_list:\n        if word.lower() == target:\n            return True\n    return False"
    },
    {
        "id":298,
        "response":"from typing import List, Any\n\ndef extract_elements(lst: List[Any], n: int) -> List[List[Any]]:\n    if n <= 0 or n > len(lst):\n        return []\n    return [lst[i:i + n] for i in range(len(lst) - n + 1)]"
    },
    {
        "id":299,
        "response":""
    },
    {
        "id":300,
        "response":"import re\nfrom typing import Any\n\ndef match_num(s: str) -> bool:\n    return bool(s) and s[0].isdigit()"
    },
    {
        "id":301,
        "response":"import math\n\ndef num_comm_div(n, n2):\n    if n == 0 and n2 == 0:\n        return [0]\n    g = abs(math.gcd(n, n2))\n    divisors = []\n    i = 1\n    while i * i <= g:\n        if g % i == 0:\n            divisors.append(i)\n            if i != g \/\/ i:\n                divisors.append(g \/\/ i)\n        i += 1\n    return sorted(divisors)"
    },
    {
        "id":302,
        "response":"from typing import Any\n\ndef find(n: int, n2: int) -> int:\n    return n % n2"
    },
    {
        "id":303,
        "response":"import typing\n\ndef add_consecutive_nums(lst: typing.List[int]) -> typing.List[int]:\n    return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]"
    },
    {
        "id":304,
        "response":"import math\n\ndef sum_Of_Series(n: int) -> int:\n    if n <= 0:\n        return 0\n    return (n * (n + 1) \/\/ 2) ** 2"
    },
    {
        "id":305,
        "response":"import typing\n\ndef re_order(lst: typing.List[int]) -> typing.List[int]:\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    pos = 0\n    for i, val in enumerate(lst):\n        if val != 0:\n            lst[pos], lst[i] = lst[i], lst[pos]\n            pos += 1\n    return lst"
    },
    {
        "id":306,
        "response":"import typing\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    if not isinstance(n, int) or not isinstance(k, int):\n        raise TypeError(\"n and k must be integers\")\n    if n < 0 or k < 0:\n        raise ValueError(\"n and k must be non-negative\")\n    if k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result"
    },
    {
        "id":307,
        "response":"import typing\n\ndef remove_words(lst: typing.List[str], lst2: typing.List[str]) -> typing.List[str]:\n    to_remove = set(lst2)\n    return [word for word in lst if word not in to_remove]"
    },
    {
        "id":308,
        "response":"import typing\n\ndef same_order(lst: typing.List[typing.Any], lst2: typing.List[typing.Any]) -> bool:\n    common = set(lst) & set(lst2)\n    filtered1 = [x for x in lst if x in common]\n    filtered2 = [x for x in lst2 if x in common]\n    return filtered1 == filtered2"
    },
    {
        "id":309,
        "response":"import typing\n\ndef average_Odd(n: int) -> float:\n    if n < 1:\n        return 0.0\n    if n % 2 == 0:\n        n -= 1\n    if n < 1:\n        return 0.0\n    k = (n + 1) \/\/ 2\n    return float(k)"
    },
    {
        "id":310,
        "response":"import typing\n\ndef no_of_subsequences(lst: typing.List[int], k: int) -> int:\n    if k <= 1:\n        return 0\n    n = len(lst)\n    count = 0\n    left = 0\n    product = 1.0\n    for right in range(n):\n        val = lst[right]\n        if val == 0:\n            count += right - left + 1\n            product = 1.0\n            left = right + 1\n            continue\n        product *= val\n        while left <= right and product >= k:\n            product \/= lst[left]\n            left += 1\n        count += right - left + 1\n    return count"
    },
    {
        "id":311,
        "response":"import math\n\ndef find_Min_Sum(n: int) -> int:\n    if n <= 1:\n        return 0\n    dp = [0] * (n + 1)\n    dp[1] = 0\n    for i in range(2, n + 1):\n        best = i\n        limit = int(math.isqrt(i))\n        for d in range(2, limit + 1):\n            if i % d == 0:\n                other = i \/\/ d\n                sum1 = d + dp[other]\n                sum2 = other + dp[d]\n                if sum1 < best:\n                    best = sum1\n                if sum2 < best:\n                    best = sum2\n        dp[i] = best\n    return dp[n]"
    },
    {
        "id":312,
        "response":"import collections\nfrom typing import Any, Dict, Tuple\n\ndef count_element_freq(tup: Tuple[Any, ...]) -> Dict[Any, int]:\n    freq = collections.Counter()\n    stack = [tup]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, tuple):\n            stack.extend(current)\n        else:\n            freq[current] += 1\n    return dict(freq)"
    },
    {
        "id":313,
        "response":"from typing import Tuple, List\n\ndef add_str(tup: Tuple, s: str) -> List[str]:\n    return [str(item) + s for item in tup]"
    },
    {
        "id":314,
        "response":"import typing\n\ndef sum_elements(tup: typing.List[typing.Tuple[typing.Any, ...]]) -> float:\n    return sum(sum(inner) for inner in tup)"
    },
    {
        "id":315,
        "response":"import typing\n\ndef modular_sum(lst: typing.List[int], m: int, _unused: int = None) -> bool:\n    if m <= 0:\n        return False\n    if not lst:\n        return False\n    remainders: set[int] = set()\n    for num in lst:\n        if num % m == 0:\n            return True\n        new_rems = { (rem + num) % m for rem in remainders }\n        new_rems.add(num % m)\n        remainders.update(new_rems)\n        if 0 in remainders:\n            return True\n    return False"
    },
    {
        "id":316,
        "response":"import typing\n\ndef radix_sort(lst: typing.List[int]) -> typing.List[int]:\n    if not lst:\n        return []\n    positives = [x for x in lst if x >= 0]\n    negatives = [-x for x in lst if x < 0]\n    def counting_sort(arr: typing.List[int], exp: int) -> typing.List[int]:\n        n = len(arr)\n        output = [0] * n\n        count = [0] * 10\n        for i in range(n):\n            index = (arr[i] \/\/ exp) % 10\n            count[index] += 1\n        for i in range(1, 10):\n            count[i] += count[i - 1]\n        for i in range(n - 1, -1, -1):\n            index = (arr[i] \/\/ exp) % 10\n            output[count[index] - 1] = arr[i]\n            count[index] -= 1\n        return output\n    def radix(arr: typing.List[int]) -> typing.List[int]:\n        if not arr:\n            return []\n        max_val = max(arr)\n        exp = 1\n        while max_val \/\/ exp > 0:\n            arr = counting_sort(arr, exp)\n            exp *= 10\n        return arr\n    sorted_pos = radix(positives)\n    sorted_neg = radix(negatives)\n    sorted_neg = [-x for x in reversed(sorted_neg)]\n    return sorted_neg + sorted_pos"
    },
    {
        "id":317,
        "response":"```python\nfrom typing import List, Optional\n\ndef largest_pos(lst: List[float]) -> Optional[float]:\n    positives = [x for x in lst if isinstance(x, (int, float)) and x > 0]\n    if not positives:\n        return None\n    return max(positives)\n```"
    },
    {
        "id":318,
        "response":"import math\n\ndef sqrt_root(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"square root is not defined for negative numbers\")\n    return math.isqrt(n)"
    },
    {
        "id":319,
        "response":"import math\n\ndef volume_tetrahedron(n: float) -> float:\n    if n <= 0:\n        return 0.0\n    return (n ** 3) \/ (6 * math.sqrt(2))"
    },
    {
        "id":320,
        "response":"import math\nimport functools\n\ndef get_lcm(lst):\n    if not lst:\n        return 0\n    def lcm(a, b):\n        return abs(a * b) \/\/ math.gcd(a, b) if a and b else 0\n    return functools.reduce(lcm, lst)"
    },
    {
        "id":321,
        "response":"import typing\n\ndef check_isosceles(n: float, n2: float, n3: float) -> bool:\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    if n + n2 <= n3 or n + n3 <= n2 or n2 + n3 <= n:\n        return False\n    return n != n2 and n != n3 and n2 != n3"
    },
    {
        "id":322,
        "response":"import typing\n\ndef lbs(lst: typing.List[int]) -> int:\n    n = len(lst)\n    if n == 0:\n        return 0\n    inc = [1] * n\n    dec = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if lst[j] < lst[i] and inc[j] + 1 > inc[i]:\n                inc[i] = inc[j] + 1\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if lst[j] < lst[i] and dec[j] + 1 > dec[i]:\n                dec[i] = dec[j] + 1\n    max_len = 0\n    for i in range(n):\n        curr = inc[i] + dec[i] - 1\n        if curr > max_len:\n            max_len = curr\n    return max_len"
    },
    {
        "id":323,
        "response":"from typing import Callable\n\nhas_upper: Callable[[str], bool] = lambda s: any(c.isupper() for c in s)\nhas_lower: Callable[[str], bool] = lambda s: any(c.islower() for c in s)\nhas_digit: Callable[[str], bool] = lambda s: any(c.isdigit() for c in s)\nhas_length: Callable[[str], bool] = lambda s: len(s) >= 8\n\ndef check_string(s: str) -> bool:\n    return all(func(s) for func in (has_upper, has_lower, has_digit, has_length))"
    },
    {
        "id":324,
        "response":"```python\nfrom typing import List\n\ndef max_sum_increasing_subsequence(lst: List[int], n: int) -> int:\n    m = min(n, len(lst))\n    if m == 0:\n        return 0\n    dp = [0] * m\n    for i in range(m):\n        best = 0\n        for j in range(i):\n            if lst[j] < lst[i] and dp[j] > best:\n                best = dp[j]\n        dp[i] = lst[i] + best\n    return max(dp)\n```"
    },
    {
        "id":325,
        "response":"import math\nfrom typing import List, Tuple\n\ndef parallel_lines(lst: List[Tuple[float, float]], lst2: List[Tuple[float, float]]) -> bool:\n    if len(lst) != 2 or len(lst2) != 2:\n        return False\n    (x1, y1), (x2, y2) = lst\n    (x3, y3), (x4, y4) = lst2\n    dx1, dy1 = x2 - x1, y2 - y1\n    dx2, dy2 = x4 - x3, y4 - y3\n    if dx1 == 0 and dx2 == 0:\n        return True\n    if dx1 == 0 or dx2 == 0:\n        return False\n    slope1 = dy1 \/ dx1\n    slope2 = dy2 \/ dx2\n    return math.isclose(slope1, slope2, rel_tol=1e-9, abs_tol=1e-9)"
    },
    {
        "id":326,
        "response":"import re\n\ndef capitalize_first_last_letters(s: str) -> str:\n    def repl(m: re.Match) -> str:\n        word = m.group(0)\n        if len(word) == 1:\n            return word.upper()\n        return word[0].upper() + word[1:-1] + word[-1].upper()\n    return re.sub(r'\\b\\w+\\b', repl, s)"
    },
    {
        "id":327,
        "response":""
    },
    {
        "id":328,
        "response":"import typing\n\ndef min_length(lst: typing.List[typing.List[typing.Any]]) -> typing.List[typing.Any] | None:\n    if not lst:\n        return None\n    min_list = lst[0]\n    min_len = len(min_list)\n    for sub in lst[1:]:\n        cur_len = len(sub)\n        if cur_len < min_len:\n            min_len = cur_len\n            min_list = sub\n    return min_list"
    },
    {
        "id":329,
        "response":""
    },
    {
        "id":330,
        "response":"import typing\n\ndef negative_count(lst: typing.List[int]) -> float:\n    if not lst:\n        return 0.0\n    negative = sum(1 for x in lst if x < 0)\n    return negative \/ len(lst)"
    },
    {
        "id":331,
        "response":"from typing import List\n\ndef min_coins(lst: List[int], n: int, n2: int) -> int:\n    INF = n + 1\n    dp = [INF] * (n + 1)\n    dp[0] = 0\n    for coin in lst:\n        for i in range(coin, n + 1):\n            if dp[i - coin] + 1 < dp[i]:\n                dp[i] = dp[i - coin] + 1\n    return dp[n] if dp[n] != INF else -1"
    },
    {
        "id":332,
        "response":"import collections\n\ndef check_permutation(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    return collections.Counter(s) == collections.Counter(s2)"
    },
    {
        "id":333,
        "response":"import typing\n\ndef remove_datatype(tup: tuple, param: typing.Union[type, tuple]) -> tuple:\n    if not isinstance(tup, tuple):\n        raise TypeError(\"tup must be a tuple\")\n    if not isinstance(param, (type, tuple)):\n        raise TypeError(\"param must be a type or tuple of types\")\n    if isinstance(param, tuple):\n        for p in param:\n            if not isinstance(p, type):\n                raise TypeError(\"All elements in param tuple must be types\")\n    return tuple(x for x in tup if not isinstance(x, param))"
    },
    {
        "id":334,
        "response":"```python\nimport typing\n\ndef search_literal(s: str, s2: str) -> typing.List[int]:\n    if not s or not s2 or len(s2) > len(s):\n        return []\n    positions = []\n    idx = s.find(s2)\n    while idx != -1:\n        positions.append(idx)\n        idx = s.find(s2, idx + 1)\n    return positions\n```"
    },
    {
        "id":335,
        "response":"import math\n\ndef topbottom_surfacearea(n: float) -> float:\n    return math.pi * n * n"
    },
    {
        "id":336,
        "response":"import typing\n\ndef nth_items(lst: list, n: int) -> typing.Any:\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        if -n > len(lst):\n            raise IndexError(\"list index out of range\")\n    else:\n        if n >= len(lst):\n            raise IndexError(\"list index out of range\")\n    return lst[n]"
    },
    {
        "id":337,
        "response":"import re\n\ndef first_repeated_word(s: str):\n    words = re.findall(r'\\b\\w+\\b', s)\n    seen = set()\n    for w in words:\n        lw = w.lower()\n        if lw in seen:\n            return w\n        seen.add(lw)\n    return None"
    },
    {
        "id":338,
        "response":"import typing\n\ndef string_list_to_tuple(lst: typing.List[str]) -> typing.Tuple[str, ...]:\n    return tuple(lst)"
    },
    {
        "id":339,
        "response":"import typing\n\ndef basesnum_coresspondingnum(lst: typing.List[typing.Any], lst2: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    return list(map(lambda pair: pair[0] ** pair[1], zip(lst, lst2)))"
    },
    {
        "id":340,
        "response":"import collections\n\ndef find_Diff(lst, n):\n    if not lst or n <= 0:\n        return 0\n    freq = collections.Counter(lst)\n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    return max_freq - min_freq"
    },
    {
        "id":341,
        "response":"import math\n\ndef check_abundant(n: int) -> bool:\n    if n <= 1:\n        return False\n    total = 1\n    limit = int(math.isqrt(n))\n    for i in range(2, limit + 1):\n        if n % i == 0:\n            total += i\n            other = n \/\/ i\n            if other != i:\n                total += other\n    return total > n"
    },
    {
        "id":342,
        "response":"import re\n\ndef fill_spaces(s: str) -> str:\n    return re.sub(r'[ ,\\.]', ':', s)"
    },
    {
        "id":343,
        "response":"import typing\n\ndef count_digits(n: int, n2: int) -> None:\n    print(n + n2)"
    },
    {
        "id":344,
        "response":"from typing import List, Tuple, Any\n\ndef flatten_tuple(lst: List[Tuple[Any, ...]]) -> List[Any]:\n    return [item for subtuple in lst for item in subtuple]"
    },
    {
        "id":345,
        "response":""
    },
    {
        "id":346,
        "response":"import typing\n\ndef last_occurence_char(s: str, s2: str) -> int:\n    if not s or not s2:\n        return -1\n    return s.rfind(s2)"
    },
    {
        "id":347,
        "response":""
    },
    {
        "id":348,
        "response":"import bisect\ndef longest_increasing_subsequence(lst):\n    if not lst:\n        return 0\n    tails = []\n    for x in lst:\n        i = bisect.bisect_left(tails, x)\n        if i == len(tails):\n            tails.append(x)\n        else:\n            tails[i] = x\n    return len(tails)"
    },
    {
        "id":349,
        "response":""
    },
    {
        "id":350,
        "response":"import typing\n\ndef find_Max(lst: typing.List[int], n: int, n2: int) -> typing.Optional[int]:\n    if not lst:\n        return None\n    low = max(0, n)\n    high = min(len(lst) - 1, n2)\n    if low > high:\n        return None\n    while low <= high:\n        if low == high:\n            return lst[low]\n        mid = (low + high) \/\/ 2\n        if mid < high and lst[mid] > lst[mid + 1]:\n            return lst[mid]\n        if mid > low and lst[mid] < lst[mid - 1]:\n            return lst[mid - 1]\n        if lst[mid] >= lst[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return lst[high] if high >= 0 else None"
    },
    {
        "id":351,
        "response":"from typing import List, Any\n\ndef extract_column(lst: List[Any], n: int) -> List[Any]:\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise IndexError(\"column index out of range\")\n    column = []\n    for row in lst:\n        if isinstance(row, list) and n < len(row):\n            column.append(row[n])\n    return column"
    },
    {
        "id":352,
        "response":"import typing\n\ndef Seq_Linear(lst: typing.List[float]) -> bool:\n    if len(lst) <= 2:\n        return True\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i - 1] != diff:\n            return False\n    return True"
    },
    {
        "id":353,
        "response":""
    },
    {
        "id":354,
        "response":"from typing import List, Any\n\ndef Split(lst: List[Any]) -> List[int]:\n    return [x for x in lst if isinstance(x, int) and not isinstance(x, bool) and x % 2 != 0]"
    },
    {
        "id":355,
        "response":"import typing\n\ndef difference(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    s = n * (n + 1) \/\/ 2\n    return s * s - s"
    },
    {
        "id":356,
        "response":"import typing\n\ndef find_Odd_Pair(lst: typing.List[int], n: int) -> typing.List[typing.Tuple[int, int]]:\n    if n % 2 == 0:\n        return []\n   "
    },
    {
        "id":357,
        "response":"import typing\n\ndef toggle_string(s: str) -> str:\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)"
    },
    {
        "id":358,
        "response":"import typing\n\ndef digit_distance_nums(n: int, n2: int) -> int:\n    n1, n2 = abs(n), abs(n2)\n    s1, s2 = str(n1), str(n2)\n    if len(s1) < len(s2):\n        s1 = s1.rjust(len(s2), '0')\n    elif len(s2) < len(s1):\n        s2 = s2.rjust(len(s1), '0')\n    distance = 0\n    for d1, d2 in zip(s1, s2):\n        distance += abs(int(d1) - int(d2))\n    return distance"
    },
    {
        "id":359,
        "response":"import typing\n\ndef max_sub_array_sum(lst: typing.List[int], n: int) -> int:\n    if n <= 0 or not lst:\n        return 0\n    max_ending_here = max_so_far = lst[0]\n    for i in range(1, n):\n        max_ending_here = lst[i] if lst[i] > max_ending_here + lst[i] else max_ending_here + lst[i]\n        max_so_far = max_so_far if max_so_far > max_ending_here else max_ending_here\n    return max_so_far"
    },
    {
        "id":360,
        "response":"import typing\n\ndef union_elements(tup: typing.Tuple, tup2: typing.Tuple) -> typing.Tuple:\n    seen = set()\n    result = []\n    for item in tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    for item in tup2:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)"
    },
    {
        "id":361,
        "response":"import typing\n\ndef assign_elements(lst: typing.List[tuple]) -> dict:\n    mapping = {}\n    for a, b in lst:\n        mapping[a] = b\n        mapping[b] = a\n    return mapping"
    },
    {
        "id":362,
        "response":"import typing\n\ndef Find_Max_Length(lst: typing.List) -> int:\n    max_len = 0\n    for item in lst:\n        if isinstance(item, list):\n            l = len(item)\n            if l > max_len:\n                max_len = l\n    return max_len"
    },
    {
        "id":363,
        "response":"import re\n\ndef extract_values(s: str):\n    return re.findall(r'[\"\\'](.*?)[\"\\']', s)"
    },
    {
        "id":364,
        "response":"import collections\n\ndef count_Pairs(lst, n):\n    if n <= 1:\n        return 0\n    freq = collections.Counter(lst)\n    total_pairs = n * (n - 1) \/\/ 2\n    equal_pairs = sum(f * (f - 1) \/\/ 2 for f in freq.values())\n    return total_pairs - equal_pairs"
    },
    {
        "id":365,
        "response":"from typing import List\n\ndef split(s: str) -> List[str]:\n    return list(s)"
    },
    {
        "id":366,
        "response":"from typing import Any\n\ndef sum_digits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    total = 0\n    while n:\n        total += n % 10\n        n \/\/= 10\n    return total"
    },
    {
        "id":367,
        "response":"from typing import List, Any\n\ndef issort_list(lst: List[Any]) -> bool:\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        try:\n            if lst[i] > lst[i + 1]:\n                return False\n        except TypeError:\n            return False\n    return True"
    },
    {
        "id":368,
        "response":"from typing import List\n\ndef empty_list(n: int) -> List[dict]:\n    return [{} for _ in range(n)]"
    },
    {
        "id":369,
        "response":"import typing\n\ndef sort_sublists(lst: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    result: typing.List[typing.Any] = []\n    for sub in lst:\n        if isinstance(sub, list):\n            result.append(sorted(sub))\n        else:\n            result.append(sub)\n    return result"
    },
    {
        "id":370,
        "response":"import re\nfrom typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    if not lst2:\n        return lst.copy()\n    substrings = set(lst2)\n    result = []\n    for s in lst:\n        words = s.split()\n        filtered = [w for w in words if not any(sub in w for sub in substrings)]\n        result.append(\" \".join(filtered"
    },
    {
        "id":371,
        "response":"```python\nimport typing\n\ndef max_sum_pair_diff_lessthan_K(lst: typing.List[int], K: int, max_pairs: int) -> int:\n    if not lst or K < 0 or max_pairs <= 0:\n        return 0\n    sorted_lst = sorted(lst, reverse=True)\n    total = 0\n    pairs = 0\n    i = 0\n    n = len(sorted_lst)\n    while i < n - 1 and pairs < max_pairs:\n        if abs(sorted_lst[i] - sorted_lst[i + 1]) < K:\n            total += sorted_lst[i] + sorted_lst[i + 1]\n            pairs += 1\n            i += 2\n        else:\n            i += 1\n    return total\n```"
    },
    {
        "id":372,
        "response":"import typing\n\ndef two_unique_nums(lst: typing.List[int]) -> typing.List[int]:\n    seen = set()\n    result = []\n    for x in lst:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result"
    },
    {
        "id":373,
        "response":"import math\n\ndef unique_product(lst):\n    return math.prod(set(lst))"
    },
    {
        "id":374,
        "response":"import math\n\ndef surfacearea_cylinder(r: float, h: float) -> float:\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n    return 2 * math.pi * r * (r + h)"
    },
    {
        "id":375,
        "response":"import math\n\ndef count_no(n, n2, n3, n4):\n    if n <= 0:\n        return None\n    nums = [abs(n2"
    },
    {
        "id":376,
        "response":"from typing import List\n\ndef is_Sub_Array(lst: List[int], lst2: List[int], n: int, n2: int) -> bool:\n    if n2 == 0:\n        return True\n    if n2 > n:\n        return False\n    for i in range(n - n2 + 1):\n        if lst[i:i+n2] == lst2:\n            return True\n    return False"
    },
    {
        "id":377,
        "response":"import typing\n\ndef last_Digit_Factorial(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 4\n    return 0"
    },
    {
        "id":378,
        "response":"import typing\n\ndef interleave_lists(*lists: typing.List[typing.Any]) -> typing.List[typing.Any]:\n    if not lists:\n        return []\n    length = len(lists[0])\n    for l in lists:\n        if len(l) != length:\n            raise ValueError(\"All lists must have the same length\")\n    return [item for group in zip(*lists) for item in group]"
    },
    {
        "id":379,
        "response":"```python\nimport typing\n\ndef find_dissimilar(tup: typing.Tuple, tup2: typing.Tuple) -> typing.Tuple:\n    return tuple(sorted(set(tup) ^ set(tup2)))\n```"
    },
    {
        "id":380,
        "response":""
    },
    {
        "id":381,
        "response":"import math\n\ndef surface_Area(n: float, n2: float) -> float:\n    base_area = n * n\n    slant_height = math.sqrt((n \/ 2) ** 2 + n2 ** 2)\n    lateral_area = 2 * n * slant_height\n    return base_area + lateral_area"
    },
    {
        "id":382,
        "response":"def my_dict(dct):\n    return not bool(dct)"
    },
    {
        "id":383,
        "response":"import math\n\ndef catalan_number(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return math.comb(2 * n, n) \/\/ (n + 1)"
    },
    {
        "id":384,
        "response":""
    },
    {
        "id":385,
        "response":"import typing\n\ndef expensive_items(lst: typing.List[typing.Any], n: int) -> typing.List[typing.Any]:\n    if n <= 0:\n        return []\n    if not lst:\n        return []\n    def get_price(item):\n        if isinstance(item, dict):\n            return item.get(\"price\", float(\"-inf\"))\n        if isinstance(item, (tuple, list)) and len(item) > 0:\n            return item[0]\n        return item\n    return sorted(lst, key=get_price, reverse=True)[:n]"
    },
    {
        "id":386,
        "response":"from typing import List, Any\n\ndef split_Arr(lst: List[Any], n: int, n2: int) -> List[Any]:\n    length = len(lst)\n    n = max(0, min(n, length))\n    n2 = max(0, min(n2, length))\n    first_part = lst[:n]\n    second_part = lst[n:n2]\n    third_part = lst[n2:]\n    return second_part + third_part + first_part"
    },
    {
        "id":387,
        "response":"import typing\n\ndef list_tuple(lst: typing.List) -> typing.Tuple:\n    return tuple(lst)"
    },
    {
        "id":388,
        "response":"from typing import Iterable, Union\n\ndef big_diff(lst: Iterable[Union[int, float]]) -> Union[int, float, None]:\n    try:\n        items = list(lst)\n    except TypeError:\n        return None\n    if not items:\n        return None\n    try:\n        return max(items) - min(items)\n    except TypeError:\n        return None"
    },
    {
        "id":389,
        "response":""
    },
    {
        "id":390,
        "response":"import math\n\ndef polar_rect(r, theta):\n    return (r * math.cos(theta), r * math.sin(theta))"
    },
    {
        "id":391,
        "response":"from typing import List, Any\n\ndef swap_List(lst: List[Any]) -> List[Any]:\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "id":392,
        "response":""
    },
    {
        "id":393,
        "response":"import typing\n\ndef removezero_ip(s: str) -> str:\n    if not s:\n        return s\n    parts = s.split('.')\n    new_parts = []\n    for p in parts:\n        stripped = p.lstrip('0')\n        new_parts.append(stripped if stripped else '0')\n    return '.'.join(new_parts)"
    },
    {
        "id":394,
        "response":"import typing\n\ndef diff_even_odd(lst: typing.List[int]) -> typing.Optional[int]:\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even - first_odd"
    },
    {
        "id":395,
        "response":"```python\nimport typing\n\ndef min_Swaps(s: str, s2: str) -> int:\n    if len(s) != len(s2):\n        return -1\n    if s.count('1') != s2.count('1'):\n        return -1\n    mismatches = 0\n    for a, b in zip(s, s2):\n        if a != b:\n            mismatches += 1\n    return mismatches \/\/ 2\n```"
    },
    {
        "id":396,
        "response":"def tuple_size(tup: tuple) -> int:\n    return len(tup)"
    },
    {
        "id":397,
        "response":"import typing\n\ndef find_kth(lst: typing.List[int], lst2: typing.List[int], n: int, n2: int, n3: int) -> int:\n    i = 0\n    j = 0\n    k = n3\n    if k < 1 or k > n + n2:\n        raise ValueError(\"k is out of bounds\")\n    while k > 0:\n        if i < n and (j >= n2 or lst[i] <= lst2[j]):\n            val = lst[i]\n            i += 1\n        else:\n            val = lst2[j]\n            j += 1\n        k -= 1\n    return val"
    },
    {
        "id":398,
        "response":"from typing import Any\n\ndef armstrong_number(n: int) -> bool:\n    if n < 0:\n        return False\n    digits = str(n)\n    power = len(digits)\n    total = sum(int(d) ** power for d in digits)\n    return total == n"
    },
    {
        "id":399,
        "response":"import typing\n\ndef sum_average(n: int) -> typing.Tuple[int, float]:\n    if n <= 0:\n        return 0, 0.0\n    total = n * (n + 1) \/\/ 2\n    avg = total \/ n\n    return total, avg"
    },
    {
        "id":400,
        "response":"import typing\n\ndef is_Even(n: int) -> bool:\n    return (n & 1) == 0"
    }
]