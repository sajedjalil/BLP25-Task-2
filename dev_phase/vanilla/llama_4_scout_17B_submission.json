[
    {
        "id":1,
        "response":"\n\n\n\n```python\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_chain_length(pairs: List[Tuple[int, int]], n: int) -> int:\n    graph = defaultdict(list)\n    in_degree = [0] * (n + 1)\n    \n    for u, v in pairs:\n        graph[u].append(v)\n        in_degree[v] += 1\n\n    queue = [i for i in range(1, n + 1) if in_degree[i] == 0]\n    max_len = 0\n    \n    while queue:\n        node = queue.pop(0)\n        max_len = max(max_len, node)\n        \n        for neighbor in graph[node]:\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n\n    return max_len\n```"
    },
    {
        "id":2,
        "response":" ```python\nimport collections\n\ndef first_repeated_char(s):\n    char_count = collections.defaultdict(int)\n    for char in s:\n        char_count[char] += 1\n        if char_count[char] == 2:\n            return char\n    return None\n```"
    },
    {
        "id":3,
        "response":" import math\n\ndef get_ludic(n):\n    ludics = [1]\n    sieve = [True] * (n + 1)\n    sieve[1] = False\n    for i in range(2, n + 1):\n        if sieve[i]:\n            ludics.append(i)\n            for j in range(i * i, n + 1, i):\n                sieve[j] = False\n    return ludics[-1] if len(ludics) > 0 else None"
    },
    {
        "id":4,
        "response":" ```python\nimport re\ndef reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))\n```"
    },
    {
        "id":5,
        "response":" ```python\nimport math\n\ndef prime_num(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n```"
    },
    {
        "id":6,
        "response":" import math\n\ndef radian_degree(n):\n    return n * math.pi \/ 180"
    },
    {
        "id":7,
        "response":" import re\n    def find_literals(s, s2):\n        try:\n            return re.search(s2, s).start()\n        except AttributeError:\n            return -1<|eot_id|>"
    },
    {
        "id":8,
        "response":" import math\n\ndef bell_Number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n    return bell[n][0]"
    },
    {
        "id":9,
        "response":" import math\n\n    def floor_Min(n, n2, n3):\n        return min(math.floor(n), math.floor(n2), math.floor(n3))<|eot_id|>"
    },
    {
        "id":10,
        "response":" ```python\nfrom typing import List\n\ndef remove_kth_element(lst: List[int], n: int) -> List[int]:\n    if n < 1 or n > len(lst):\n        return lst\n    return lst[:n-1] + lst[n:]\n```"
    },
    {
        "id":11,
        "response":" ```python\nimport typing\n\ndef max_of_nth(lst: typing.List[typing.Tuple], n: int) -> int:\n    if not lst or n < 1 or n > max(len(t) for t in lst):\n        raise ValueError(\"Invalid input\")\n    return max(t[n-1] for t in lst)\n```"
    },
    {
        "id":12,
        "response":" ```python\nfrom typing import List\n\ndef merge(lst: List[List[int]]) -> List[int]:\n    if not lst:\n        return []\n    first = [sublist[0] for sublist in lst if sublist]\n    last = [sublist[-1] for sublist in lst if sublist]\n    return first + last\n```"
    },
    {
        "id":13,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef maximum_value(lst: List[Tuple[int, int]]) -> int:\n    return max(lst, key=lambda x: x[1])[1]\n```"
    },
    {
        "id":14,
        "response":"\n\n\n\nfrom typing import List, Tuple\n\ndef cummulative_sum(lst: List[Tuple[int, int]]) -> List[int]:\n    result = []\n    total = 0\n    for tup in lst:\n        total += tup[0] + tup[1]\n        result.append(total)\n    return result<|eot_id|>"
    },
    {
        "id":15,
        "response":"\n\n\n\nfrom typing import Tuple, Union\n\ndef average_tuple(tup: Tuple[Union[int, float], ...]) -> float:\n    if not tup:\n        return 0.0\n    return sum(tup) \/ len(tup)"
    },
    {
        "id":16,
        "response":" ```python\nimport operator\nimport itertools\n\ndef tuple_modulo(tup, tup2):\n    return tuple(map(operator.mod, tup, tup2))\n```"
    },
    {
        "id":17,
        "response":" import math\n\ndef minJumps(n, n2, n3):\n    if n <= 0:\n        return -1\n    if n == 1:\n        return 0\n    jumps = [float('inf')] * (n + 1)\n    jumps[0] = 0\n    jumps[1] = 0\n    for i in range(2, n + 1):\n        if i - 1 >= 0 and jumps[i - 1] != float('inf'):\n            jumps[i] = min(jumps[i], jumps[i - 1] + 1)\n        if i - n2 >= 0 and jumps[i - n2] != float('inf'):\n            jumps[i] = min(jumps[i], jumps[i - n2] + 1)\n        if i - n3 >= 0 and jumps[i - n3] != float('inf'):\n            jumps[i] = min(jumps[i], jumps[i - n3] + 1)\n    return jumps[n] if jumps[n] != float('inf') else -1"
    },
    {
        "id":18,
        "response":" ```python\nfrom typing import List\nimport itertools\n\ndef div_list(lst: List[int], lst2: List[int]) -> List[List[int]]:\n    return list(map(list, itertools.zip_longest(lst, lst2, fillvalue=None)))\n```"
    },
    {
        "id":19,
        "response":" import re\ndef move_num(s):\n    return re.sub(r'(\\d+)', lambda x: x.group(0)[::-1], s)"
    },
    {
        "id":20,
        "response":"\n\n\n\nfrom typing import List\nimport itertools\n\ndef largest_subset(lst: List[int], n: int) -> List[int]:\n    max_len = 0\n    max_subset = []\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) % n == 0 and len(subset) > max_len:\n                max_len = len(subset)\n                max_subset = list(subset)\n    return max_subset<|end_header_id|>"
    },
    {
        "id":21,
        "response":" import re\n     from typing import List\n\n     def increment_numerics(lst: List[str], n: int) -> List[str]:\n        result = []\n        for s in lst:\n            def replace(match):\n                return str(int(match.group(0)) + n)\n            result.append(re.sub(r'\\d+', replace, s))\n        return result<|eot_id|>"
    },
    {
        "id":22,
        "response":" import heapq\n\ndef get_median(lst, lst2, n):\n    merged = list(heapq.merge(lst, lst2))\n    if len(merged) % 2 == 0:\n        return (merged[n-1] + merged[n]) \/ 2.0\n    else:\n        return merged[n]"
    },
    {
        "id":23,
        "response":" ```python\nfrom typing import List\n\ndef nth_nums(lst: List[int], n: int) -> List[int]:\n    return list(map(lambda x: x ** n, lst))\n```"
    },
    {
        "id":24,
        "response":"\n\n\n\nimport re\ndef is_upper(s: str) -> str:\n    return s.upper()<|eot_id|> \n```python\nimport re\ndef is_upper(s: str) -> str:\n    return s.upper()\n```"
    },
    {
        "id":25,
        "response":" ```python\nfrom typing import List\n\ndef swap_List(lst: List) -> List:\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":26,
        "response":" import math\n\ndef triangle_area(n):\n    r = n \/ math.pi\n    return (r ** 2) * 2 \/ 2"
    },
    {
        "id":27,
        "response":"\n\n\n\nfrom typing import List\n\ndef find_First_Missing(lst: List[int], n: int, n2: int) -> int:\n    num_set = set(lst)\n    for i in range(n2+1):\n        if i not in num_set:\n            return i\n    return n2+1<|end_header_id|>"
    },
    {
        "id":28,
        "response":"\n\n\n\n```python\nimport re\ndef replace_spaces(s):\n    return re.sub(' ', '%20', s)\n```"
    },
    {
        "id":29,
        "response":" ```python\nfrom typing import List, Union\n\ndef Split(lst: List[Union[int, float]]) -> List[int]:\n    return [i for i in lst if i % 2 == 0]\n```"
    },
    {
        "id":30,
        "response":" import itertools \n\n    def get_coordinates(tup):\n        x, y = tup\n        return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]"
    },
    {
        "id":31,
        "response":" import re\n    def replace_spaces(s: str) -> str:\n        return re.sub(r'[\\s_]', lambda x: '_' if x.group() == ' ' else ' ', s)"
    },
    {
        "id":32,
        "response":" ```python\nfrom typing import List\n\ndef move_zero(lst: List[int]) -> List[int]:\n    return [i for i in lst if i != 0] + [i for i in lst if i == 0]\n```"
    },
    {
        "id":33,
        "response":"\n\n\n\nfrom typing import List\n\ndef pair_xor_sum(lst: List[int], n: int) -> int:\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += lst[i] ^ lst[j]\n    return total"
    },
    {
        "id":34,
        "response":" ```python\nimport math\n\ndef even_Power_Sum(n: int) -> int:\n    sum = 0\n    i = 0\n    while i < n:\n        num = 2 * i + 2\n        sum += pow(num, 4)\n        i += 1\n    return sum\n```"
    },
    {
        "id":35,
        "response":" import heapq\n\n    def heap_sort(lst):\n        heapq.heapify(lst)\n        sorted_lst = []\n        while lst:\n            sorted_lst.append(heapq.heappop(lst))\n        return sorted_lst<|eot_id|>"
    },
    {
        "id":36,
        "response":" import math\n\ndef Check_Solution(n, n2, n3):\n    determinant = n2**2 - 4*n*n3\n    if determinant < 0:\n        return False\n    root1 = (-n2 + math.sqrt(determinant)) \/ (2 * n)\n    root2 = (-n2 - math.sqrt(determinant)) \/ (2 * n)\n    return root1 == 1 \/ root2 or root2 == 1 \/ root1<|end_header_id|>"
    },
    {
        "id":37,
        "response":" ```python\nfrom typing import List\n\ndef noprofit_noloss(arr: List[int]) -> bool:\n    profit = 0\n    loss = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            profit += arr[i] - arr[i-1]\n        elif arr[i] < arr[i-1]:\n            loss += arr[i-1] - arr[i]\n    return profit == loss\n    ```"
    },
    {
        "id":38,
        "response":" import math\n\ndef wind_chill(n, n2):\n    if n < -50 or n > 50 or n2 < 0 or n2 > 100:\n        raise ValueError(\"Invalid input\")\n    return round(35.74 + 0.6215 * n - 35.75 * math.pow(n2, 0.16) + 0.4275 * n * math.pow(n2, 0.16), 2)"
    },
    {
        "id":39,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef sample_nam(lst: List[str]) -> int:\n    return sum(len(name) for name in lst if not name or not name[0].islower())\n```"
    },
    {
        "id":40,
        "response":" ```python\nimport re\n\ndef remove_parenthesis(lst):\n    return [re.sub(r'\\([^)]*\\)', '', s) for s in lst]\n```"
    },
    {
        "id":41,
        "response":" import math\n\ndef is_nonagonal(n):\n    x = (math.sqrt(8 * n + 1) + 1) \/ 2\n    return x == int(x)"
    },
    {
        "id":42,
        "response":"\n\n\n\nfrom typing import List, Tuple\n\ndef remove_similar_row(matrix: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int]]:\n    seen = set()\n    result = []\n    for row in matrix:\n        if row not in seen:\n            result.append(row)\n            seen.add(row)\n    return result"
    },
    {
        "id":43,
        "response":" import re\ndef text_match_wordz_middle(s):\n    return bool(re.search(r'\\Bz\\w*\\b|\\B\\w*z\\b', s))<|end_header_id|>"
    },
    {
        "id":44,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef reverse_Array_Upto_K(lst: List[int], k: int) -> List[int]:\n    return lst[:k][::-1] + lst[k:]\n```"
    },
    {
        "id":45,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef find_k_product(lst: List[Tuple[int, int]], n: int) -> int:\n    product = 1\n    for tup in lst:\n        product *= tup[n]\n    return product\n```"
    },
    {
        "id":46,
        "response":" ```python\nimport math\n\ndef No_of_cubes(n, k):\n    if n < k or k <= 0 or n <= 0:\n        return 0\n    return (n - k + 1) ** 3 if k == 1 else (n - k + 1) ** 3 - (n - k) ** 3 if k > 1 and k <= n else 0\n    #Alternative solution \ndef no_of_cubes(n,k):\n    if n < k or k <= 0 or n <= 0:\n        return 0\n    count  = 0 \n    for i in range(n-k+1):\n        for j in range(n-k+1):\n            for l in range(n-k+1):\n                count+=1\n    return count\n```"
    },
    {
        "id":47,
        "response":" ```python\nimport re\n\ndef split_upperstring(s):\n    return re.sub('([A-Z])', r' \\1', s).strip()\n```"
    },
    {
        "id":48,
        "response":" ```python\nfrom typing import List\n\ndef exchange_elements(lst: List[int]) -> List[int]:\n    if len(lst) < 2:\n        return lst\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n```"
    },
    {
        "id":49,
        "response":" ```python\nfrom typing import List\n\ndef sum_Range_list(lst: List[int], n: int, n2: int) -> int:\n    if n < 0 or n2 >= len(lst) or n > n2:\n        return None\n    return sum(lst[n:n2+1])\n```"
    },
    {
        "id":50,
        "response":" ```python\nfrom typing import List\n\ndef are_Equal(lst: List[int], lst2: List[int], n: int, n2: int) -> bool:\n    if n != n2:\n        return False\n    lst.sort()\n    lst2.sort()\n    return lst == lst2\n```"
    },
    {
        "id":51,
        "response":" ```python\nfrom typing import Tuple\n\ndef check_subset(tup1: Tuple, tup2: Tuple) -> bool:\n    return set(tup1).issubset(set(tup2))\n```"
    },
    {
        "id":52,
        "response":" ```python\nimport typing\n\ndef matrix_to_list(matrix: typing.List[typing.Tuple]) -> typing.List[typing.Tuple]:\n    return list(zip(*matrix))\n```"
    },
    {
        "id":53,
        "response":" import collections\n     def grouping_dictionary(lst):\n        result = collections.defaultdict(list)\n        for key, value in lst:\n            result[key].append(value)\n        return dict(result)"
    },
    {
        "id":54,
        "response":" ```python\nfrom typing import Union\n\ndef rectangle_perimeter(length: Union[int, float], width: Union[int, float]) -> Union[int, float]:\n    if length <= 0 or width <= 0:\n        raise ValueError(\"Length and width must be positive numbers\")\n    return 2 * (length + width)\n```"
    },
    {
        "id":55,
        "response":"\n\n\n\n```python\nimport math\n\ndef fifth_Power_Sum(n):\n    return sum(int(i) ** 5 for i in range(1, n+1))\n```"
    },
    {
        "id":56,
        "response":" import sys\n     def find_Min_Sum(lst1, lst2, n):\n        lst1.sort()\n        lst2.sort()\n        sum = 0\n        for i in range(n):\n            sum += abs(lst1[i] - lst2[i])\n        return sum"
    },
    {
        "id":57,
        "response":" import math\n\ndef first_Digit(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        factorial = math.factorial(n)\n        return int(str(factorial)[0])"
    },
    {
        "id":58,
        "response":" from collections import Counter\n    def max_occurrences(lst):\n        if not lst:\n            return None\n        counter = Counter(lst)\n        max_count = max(counter.values())\n        return [item for item, count in counter.items() if count == max_count] \n    <|eot_id|> \n```python\nfrom collections import Counter\ndef max_occurrences(lst):\n    if not lst:\n        return None\n    counter = Counter(lst)\n    max_count = max(counter.values())\n    return [item for item, count in counter.items() if count == max_count]\n```"
    },
    {
        "id":59,
        "response":" ```python\nfrom typing import List\n\ndef Repeat(lst: List[int]) -> None:\n    seen = set()\n    duplicates = set()\n    for num in lst:\n        if num in seen:\n            duplicates.add(num)\n        seen.add(num)\n    for dup in duplicates:\n        print(dup)\n```"
    },
    {
        "id":60,
        "response":" ```python\nimport itertools\n\ndef find_Points(n, n2, n3, n4):\n    range1 = set(range(n, n2 + 1))\n    range2 = set(range(n3, n4 + 1))\n    common = range1.intersection(range2)\n    points = list(range1.symmetric_difference(range2))\n    return sorted(points)\n```"
    },
    {
        "id":61,
        "response":" import typing\n\n    def max_sum_of_three_consecutive(lst: typing.List[int], n: int) -> int:\n        if n < 3:\n            return sum(lst)\n        if len(lst) < 3:\n            return 0\n        dp = [0]*len(lst)\n        dp[0] = lst[0]\n        dp[1] = lst[0] + lst[1]\n        dp[2] = max(lst[0]+lst[1], lst[1]+lst[2], lst[0]+lst[2], lst[2])\n        for i in range(3, len(lst)):\n            dp[i] = max(dp[i-1], dp[i-2]+lst[i], dp[i-3]+lst[i]+lst[i-1])\n        return dp[-1] if len(dp) > 1 else dp[0]"
    },
    {
        "id":62,
        "response":" ```python\nfrom typing import Dict, List\n\ndef sorted_dict(dct: Dict) -> Dict:\n    return dict(sorted(dct.items(), key=lambda item: item[1]))\n```"
    },
    {
        "id":63,
        "response":" import math\n\n    def find_max_val(n, n2, n3):\n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n\n        gcd_n_n2 = gcd(n, n2)\n        return n3 - (n3 % gcd_n_n2)"
    },
    {
        "id":64,
        "response":"\n\n\n\nimport typing\n\ndef average_Even(n: int) -> float:\n    even_numbers = [i for i in range(2, n+1, 2)]\n    return sum(even_numbers) \/ len(even_numbers) if even_numbers else 0<|end_header_id|>"
    },
    {
        "id":65,
        "response":" ```python\nfrom typing import List\n\ndef move_last(lst: List[int]) -> List[int]:\n    if len(lst) > 1:\n        return lst[1:] + lst[:1]\n    return lst\n```"
    },
    {
        "id":66,
        "response":" from collections import Counter\n\ndef count_char(s: str, s2: str) -> dict:\n    if not isinstance(s, str) or not isinstance(s2, str):\n        raise TypeError(\"Both inputs must be strings\")\n    if len(s2) != 1:\n        raise ValueError(\"Second input must be a single character\")\n    counter = Counter(s)\n    return dict(counter[s2]) if s2 in counter else {s2: 0}"
    },
    {
        "id":67,
        "response":" ```python\nimport re\ndef Check_Vow(s, s2):\n    return len(re.findall('[aeiou]', s, flags=re.IGNORECASE)) + len(re.findall('[aeiou]', s2, flags=re.IGNORECASE))\n```"
    },
    {
        "id":68,
        "response":"\n\n\n\nimport re\ndef replace(s, s2):\n    return re.sub(s, s2, s)"
    },
    {
        "id":69,
        "response":" import re\n    def check_IP(s):\n        pattern = r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n        if re.match(pattern, s):\n            return True\n        return False<|eot_id|>"
    },
    {
        "id":70,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef decreasing_trend(lst: List[int]) -> bool:\n    return all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n```"
    },
    {
        "id":71,
        "response":" ```python\nimport math\n\ndef set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 1\n    rmub = n & ~(n - 1)\n    return n | rmub\n```"
    },
    {
        "id":72,
        "response":" ```python\nfrom typing import Union\n\ndef max_of_three(n: Union[int, float], n2: Union[int, float], n3: Union[int, float]) -> Union[int, float]:\n    return max(n, n2, n3)\n```"
    },
    {
        "id":73,
        "response":"\n\n\n\nfrom typing import List\n\ndef convert(lst: List[int]) -> int:\n    return int(''.join(map(str, lst)))<|eot_id|>"
    },
    {
        "id":74,
        "response":" import re\n     from typing import List\n\n     def remove_duplicate(s: str) -> str:\n        words: List[str] = re.sub(r'[^\\w\\s]', '', s).split()\n        seen = set()\n        unique_words = [word for word in words if not (word in seen or seen.add(word))]\n        return ' '.join(unique_words)"
    },
    {
        "id":75,
        "response":" ```python\nfrom typing import Tuple\n\ndef sum_nums(n: int, n2: int, n3: int, n4: int) -> int:\n    total = n + n2 + n3 + n4\n    if n3 <= total <= n4:\n        return 20\n    return total\n```"
    },
    {
        "id":76,
        "response":" import re\n    def remove_extra_char(s: str) -> str:\n        return re.sub('[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":77,
        "response":" import typing\n\ndef validity_triangle(n: int, n2: int, n3: int) -> bool:\n    if n <= 0 or n2 <= 0 or n3 <= 0:\n        return False\n    if n >= n2 + n3 or n2 >= n + n3 or n3 >= n + n2:\n        return False\n    return True<|end_header_id|>"
    },
    {
        "id":78,
        "response":" ```python\ndef remove_spaces(s: str) -> str:\n    return s.replace(\" \", \"\")\n```"
    },
    {
        "id":79,
        "response":"\n\n\n\n```python\nimport typing\n\ndef access_key(dct: typing.Dict, n: int) -> typing.Any:\n    keys = list(dct.keys())\n    if n < 0:\n        n = len(keys) + n\n    if n < 0 or n >= len(keys):\n        raise IndexError(\"Index out of range\")\n    return dct[keys[n]]\n```"
    },
    {
        "id":80,
        "response":" ```python\nfrom typing import List\n\ndef increasing_trend(lst: List[int]) -> bool:\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n```"
    },
    {
        "id":81,
        "response":"\n\n\n\nfrom typing import *\n\ndef smallest_Divisor(n: int) -> int:\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n<|eot_id|>"
    },
    {
        "id":82,
        "response":" ```python\nfrom typing import List\nfrom itertools import zip_longest\nfrom operator import mul\n\ndef mul_list(lst: List[int], lst2: List[int]) -> List[int]:\n    return list(map(mul, lst, lst2))\n```"
    },
    {
        "id":83,
        "response":" import math\n\ndef sum_Square(n):\n    i = 0\n    while i * i <= n:\n        j = int(math.sqrt(n - i * i))\n        if i * i + j * j == n:\n            return True\n        i += 1\n    return False<|eot_id|>"
    },
    {
        "id":84,
        "response":"\n\n\n\nfrom typing import List\nimport re\ndef count_Char(s: str, s2: str) -> List[int]:\n    if not s or not s2:\n        return []\n    if len(s2) == 1:\n        return [s.count(s2)]\n    count_list = []\n    for i in range(len(s) - len(s2) + 1):\n        if s[i:i+len(s2)] == s2:\n            count_list.append(i)\n    return count_list<|end_header_id|>"
    },
    {
        "id":85,
        "response":"\n\n\n\nimport math\n\ndef sum_Of_Primes(n: int) -> int:\n    sieve = [True] * (n + 1)\n    sieve[0:2] = [False, False]\n    for currentPrime in range(2, int(math.sqrt(n)) + 1):\n        if sieve[currentPrime]:\n            for multiple in range(currentPrime**2, n + 1, currentPrime):\n                sieve[multiple] = False\n    return sum(num for num, isPrime in enumerate(sieve) if isPrime)"
    },
    {
        "id":86,
        "response":" from typing import List, Tuple\nfrom collections import Counter\n\ndef freq_element(tup: Tuple[int]) -> dict:\n    return dict(Counter(tup))<|end_header_id|>"
    },
    {
        "id":87,
        "response":" ```python\nfrom typing import Tuple\n\ndef recur_gcd(n: int, n2: int) -> int:\n    if n2 == 0:\n        return n\n    else:\n        return recur_gcd(n2, n % n2)\n```"
    },
    {
        "id":88,
        "response":" import math\ndef len_complex(n, n2):\n    return math.sqrt(n**2 + n2**2)"
    },
    {
        "id":89,
        "response":"\n\n\n\nfrom typing import List\n\ndef min_jumps(lst: List[int], n: int) -> int:\n    if n <= 1:\n        return 0\n    if lst[0] == 0:\n        return -1\n\n    maxReach = lst[0]\n    step = lst[0]\n    jump = 1\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        maxReach = max(maxReach, i + lst[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= maxReach:\n                return -1\n            step = maxReach - i\n    return -1\n```"
    },
    {
        "id":90,
        "response":"\n\n\n\nfrom typing import List\nimport itertools\n\ndef mul_consecutive_nums(lst: List[int]):\n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] * lst[i+1])\n    return result"
    },
    {
        "id":91,
        "response":"\n\n\n\nfrom typing import List, Tuple\nfrom itertools import groupby\n\ndef group_element(lst: List[Tuple[int, int]]) -> dict:\n    sorted_lst = sorted(lst, key=lambda x: x[1])\n    return {k: [i[0] for i in g] for k, g in groupby(sorted_lst, key=lambda x: x[1])}"
    },
    {
        "id":92,
        "response":" import math\n\ndef last_Two_Digits(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers\"\n    elif n < 2:\n        return n\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result = (result * i) % 100\n        return result"
    },
    {
        "id":93,
        "response":" import re\n\n    def remove_multiple_spaces(s):\n        return re.sub(' +', ' ', s)"
    },
    {
        "id":94,
        "response":"\n\n\n\n```python\nfrom typing import Dict, List\n\ndef extract_unique(dct: Dict) -> List:\n    return list(set(dct.values()))\n```"
    },
    {
        "id":95,
        "response":" ```python\nimport typing\n\ndef check_greater(tup: typing.Tuple[int, int, int], tup2: typing.Tuple[int, int, int]) -> bool:\n    if len(tup) != len(tup2):\n        return False\n    return all(a < b for a, b in zip(tup, tup2))\n```"
    },
    {
        "id":96,
        "response":" from typing import List\n\ndef zip_list(lst: List, lst2: List) -> List:\n    return list(zip(lst, lst2))"
    },
    {
        "id":97,
        "response":" from typing import List\nfrom functools import reduce\n\ndef count_even(lst: List[int]) -> int:\n    return reduce(lambda x, y: x + (1 if y % 2 == 0 else 0), lst, 0)"
    },
    {
        "id":98,
        "response":" from typing import Dict\n    import itertools\n\n    def sort_dict_item(dct: Dict) -> Dict:\n        return dict(sorted(dct.items(), key=lambda item: tuple(sorted(item[0]))))\n<|eot_id|>"
    },
    {
        "id":99,
        "response":"\n\n\n\nfrom typing import List\nfrom collections import deque\n\ndef minSwaps(s: str, target: str) -> int:\n    n = len(s)\n    queue = deque()\n    visited = set()\n    swaps = 0\n    state = list(s)\n    \n    queue.append(state)\n    visited.add(''.join(state))\n    \n    while queue:\n        for _ in range(len(queue)):\n            curr = queue.popleft()\n            if ''.join(curr) == target:\n                return swaps\n            \n            for i in range(n - 1):\n                next_state = curr[:]\n                next_state[i], next_state[i + 1] = next_state[i + 1], next_state[i]\n                next_state_tuple = tuple(next_state)\n                if next_state_tuple not in visited:\n                    queue.append(next_state)\n                    visited.add(next_state_tuple)\n        swaps += 1\n    return -1\n```"
    },
    {
        "id":100,
        "response":" ```python\nfrom typing import List\n\ndef count_range_in_list(lst: List[int], n: int, n2: int) -> int:\n    return sum(1 for i in lst if n <= i <= n2)\n```"
    },
    {
        "id":101,
        "response":"\n\n\n\nfrom typing import List\n\ndef equilibrium_index(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    \n    total_sum = sum(lst)\n    left_sum = 0\n    indices = []\n    \n    for i, num in enumerate(lst):\n        if left_sum == total_sum - left_sum - num:\n            indices.append(i)\n        left_sum += num\n    \n    return indices"
    },
    {
        "id":102,
        "response":" import heapq\n     from typing import List\n\n    def removals(lst: List[int], n: int, k: int) -> int:\n        if k < 0:\n            return 0\n        max_heap = []\n        count = 0\n        for i in lst:\n            heapq.heappush(max_heap, -i)\n            if len(max_heap) > n:\n                heapq.heappop(max_heap)\n            if max_heap and -max_heap[0] - i > k:\n                heapq.heappop(max_heap)\n                count += 1\n                heapq.heappush(max_heap, -i)\n        return count<|eot_id|>"
    },
    {
        "id":103,
        "response":" ```python\nfrom typing import Dict, Any\n\ndef is_key_present(dct: Dict[Any, Any], key: Any) -> bool:\n    return key in dct\n```"
    },
    {
        "id":104,
        "response":" import math\n\ndef harmonic_sum(n):\n    sum = 0\n    for i in range(1, n):\n        sum += 1 \/ i\n    return sum<|end_header_id|>"
    },
    {
        "id":105,
        "response":" from typing import List\n\n    def sort_sublists(lst: List[List[int]]) -> List[List[int]]:\n        return sorted(lst, key=lambda x: (len(x), x))"
    },
    {
        "id":106,
        "response":" import typing \n\ndef is_subset(lst: typing.List[int], n: int, lst2: typing.List[int], n2: int) -> bool:\n    if n > n2:\n        return False\n    lst_set = set(lst)\n    lst2_set = set(lst2)\n    return lst_set.issubset(lst2_set)"
    },
    {
        "id":107,
        "response":" import math\n\ndef count_Set_Bits(n: int) -> int:\n    count = 0\n    i = 1\n    while i <= n:\n        divider = i << 1\n        quotient = n \/\/ divider\n        count += quotient * i\n        count += max(0, n % divider - i + 1)\n        i <<= 1\n    return count"
    },
    {
        "id":108,
        "response":" ```python\ndef Convert(s):\n    return list(s)\n```"
    },
    {
        "id":109,
        "response":"\n\n\n\nfrom typing import List, Dict, Tuple\n\ndef get_unique(lst: List[Tuple[int, int]]) -> Dict[int, int]:\n    unique_count: Dict[int, int] = {}\n    for tup in lst:\n        for val in tup:\n            if val in unique_count:\n                unique_count[val] += 1\n            else:\n                unique_count[val] = 1\n    return unique_count<|eot_id|>"
    },
    {
        "id":110,
        "response":" from typing import Tuple\n\ndef front_and_rear(tup: Tuple) -> Tuple:\n    if len(tup) == 0:\n        return ()\n    elif len(tup) == 1:\n        return tup[0], tup[0]\n    else:\n        return tup[0], tup[-1]"
    },
    {
        "id":111,
        "response":" ```python\nimport re\nfrom typing import Union\n\ndef product_Equal(n: Union[int, str]) -> bool:\n    if isinstance(n, int):\n        str_n = str(n)\n    else:\n        str_n = n\n    \n    product_even = 1\n    product_odd = 1\n    \n    for i in range(len(str_n)):\n        digit = int(str_n[i])\n        if i % 2 == 0:\n            product_even *= digit\n        else:\n            product_odd *= digit\n            \n    return product_even % 2 == 0 and product_odd % 2 == 0\n```"
    },
    {
        "id":112,
        "response":" from typing import List\n\n    def remove_duplicate(lst: List[int]) -> List[int]:\n        return list(set(lst))"
    },
    {
        "id":113,
        "response":" ```python\nimport re\n\ndef check_valid(tup):\n    for item in tup:\n        if not isinstance(item, (int, float, str)):\n            return False\n        if isinstance(item, str) and not re.match('^[a-zA-Z0-9]+$', item):\n            return False\n    return True\n```"
    },
    {
        "id":114,
        "response":"\n\n\n\nimport math\nfrom typing import Dict\n\ndef count_Fac(n: int) -> int:\n    factors: Dict[int, int] = {}\n    while n % 2 == 0:\n        factors[2] = factors.get(2, 0) + 1\n        n = n \/\/ 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n = n \/\/ i\n    if n > 2:\n        factors[n] = factors.get(n, 0) + 1\n    return len(factors)"
    },
    {
        "id":115,
        "response":" ```python\nimport re\nfrom typing import Tuple\n\ndef str_to_tuple(s: str) -> Tuple[int, ...]:\n    return tuple(map(int, re.findall(r'-?\\d+', s)))\n```"
    },
    {
        "id":116,
        "response":"\n\n\n\nimport math\n\ndef rombus_perimeter(n):\n    return 4 * n<|eot_id|>"
    },
    {
        "id":117,
        "response":" import math\nfrom typing import List\n\ndef sd_calc(lst: List[float]) -> float:\n    n = len(lst)\n    mean = sum(lst) \/ n\n    variance = sum((x - mean) ** 2 for x in lst) \/ n\n    return math.sqrt(variance)"
    },
    {
        "id":118,
        "response":" ```python\nfrom typing import List\n\ndef alternate_elements(lst: List[int]) -> List[int]:\n    return lst[::2]\n```"
    },
    {
        "id":119,
        "response":" import re\n    def text_match(s):\n        pattern = r\"^a(b*)$\"\n        if re.match(pattern, s):\n            return True\n        else:\n            return False<|eot_id|>    <|start_header_id|>assistant\n\n```python\nimport re\ndef text_match(s):\n    pattern = r\"^a(b*)$\"\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":120,
        "response":" ```python\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(tup: Tuple, dct: Dict) -> Tuple:\n    return tup + (dct,)\n```"
    },
    {
        "id":121,
        "response":""
    },
    {
        "id":122,
        "response":"\n\n\n\nfrom typing import Dict\n\ndef filter_data(dct: Dict[str, int], n: int, n2: int) -> Dict[str, int]:\n    return {k: v for k, v in dct.items() if n <= v[0] <= n2}"
    },
    {
        "id":123,
        "response":"\n\n\n\nfrom typing import List\nfrom itertools import zip_longest, chain\n\ndef count_same_pair(lst: List[int], lst2: List[int]) -> int:\n    pairs1 = list(zip(lst, lst))\n    pairs2 = list(zip(lst2, lst2))\n    common_pairs = list(map(lambda pair: pair[0] == pair[1], chain(pairs1, pairs2)))\n    return sum(common_pairs)"
    },
    {
        "id":124,
        "response":" import math\n\n    def power_base_sum(n, n2):\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n \/\/= 10\n        return sum ** n2"
    },
    {
        "id":125,
        "response":" import re\n     from typing import List\n\n     def extract_quotation(s: str) -> List[str]:\n        return re.findall(r'\"[^\"]*\"', s) or re.findall(r\"'[^']*'\", s)"
    },
    {
        "id":126,
        "response":"\n\n\n\n```python\nfrom typing import Tuple\n\ndef multiply_elements(tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    if len(tup) < 2:\n        return ()\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] * tup[i + 1])\n    return tuple(result)\n```"
    },
    {
        "id":127,
        "response":" import re\n     def remove_char(s):\n        return re.sub('[^a-zA-Z0-9]', '', s)"
    },
    {
        "id":128,
        "response":" ```python\nfrom typing import List\n\ndef sum_list(lst: List[int], lst2: List[int]) -> List[int]:\n    return [x + y for x, y in zip(lst, lst2)]\n```"
    },
    {
        "id":129,
        "response":" ```python\nfrom typing import List\nfrom itertools import zip_longest\n\ndef add_list(lst: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x: x[0] + x[1], zip_longest(lst, lst2, fillvalue=0)))\n```"
    },
    {
        "id":130,
        "response":" from typing import List\n\ndef consecutive_duplicates(lst: List) -> List:\n    result = []\n    for i in lst:\n        if not result or i != result[-1]:\n            result.append(i)\n    return result<|end_header_id|>"
    },
    {
        "id":131,
        "response":" import math\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)"
    },
    {
        "id":132,
        "response":" ```python\nimport re\ndef replace_specialchar(s: str) -> str:\n    return re.sub('[ ,.]', ':', s)\n```"
    },
    {
        "id":133,
        "response":"\n\n\n\nfrom typing import List\n\ndef find_first_occurrence(lst: List[int], n: int) -> int:\n    for i in range(len(lst)):\n        if lst[i] == n:\n            return i\n    return -1<|end_header_id|>"
    },
    {
        "id":134,
        "response":"\n\n\n\nimport math\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(lst: List[int], n: int) -> int:\n    MOD = 1000000007\n    res = 0\n    for i in range(n):\n        mul = 1\n        for j in range(i, n):\n            mul = (mul * lst[j]) % MOD\n            res = (res + mul) % MOD\n    return res"
    },
    {
        "id":135,
        "response":"\n\n\n\n```python\nimport math\ndef toggle_middle_bits(n):\n    if n < 3:\n        return n\n    num_bits = int(math.log2(n)) + 1\n    mask = (1 << (num_bits - 2)) - 1\n    return n ^ (mask << 1)\n```"
    },
    {
        "id":136,
        "response":"\n\n\n\nfrom typing import List\n\ndef left_insertion(lst: List[int], n: int) -> int:\n    left, right = 0, len(lst)\n    while left < right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] > n:\n            right = mid\n        else:\n            left = mid + 1\n    return left"
    },
    {
        "id":137,
        "response":"\n\n\n\n```python\ndef check_str(s: str) -> bool:\n    if not s:\n        return False\n    vowels = 'aeiouAEIOU'\n    return s[0] in vowels\n```"
    },
    {
        "id":138,
        "response":" import math\n\ndef geometric_sum(n):\n    if n <= 0:\n        return 0\n    else:\n        r = 1 \/ 2\n        sum = (1 - pow(r, n)) \/ (1 - r)\n        return sum<|eot_id|>"
    },
    {
        "id":139,
        "response":" import math\n\ndef find_Index(n):\n    m = (math.sqrt(8 * n + 1) - 1) \/ 2\n    if m == int(m):\n        return int(m)\n    else:\n        return math.ceil(m)"
    },
    {
        "id":140,
        "response":"\n\n\n\n```python\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(tup: Tuple) -> Dict:\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}\n```"
    },
    {
        "id":141,
        "response":" ```python\nimport re\ndef all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1\n    ```"
    },
    {
        "id":142,
        "response":" import math\n\ndef area_tetrahedron(n):\n    return (math.sqrt(3)\/4) * n**2 * 4"
    },
    {
        "id":143,
        "response":" from collections import deque\n    def rotate_right(lst, n, k):\n        d = deque(lst)\n        d.rotate(k)\n        return list(d) \ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    n = len(lst)\n    k = 3\n    print(rotate_right(lst, n, k))"
    },
    {
        "id":144,
        "response":" ```python\nimport typing\n\ndef check_none(tup: typing.Tuple) -> bool:\n    return any(x is None for x in tup)\n```"
    },
    {
        "id":145,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef divisible_by_digits(n: int, n2: int) -> List[int]:\n    def is_divisible(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n\n    return [i for i in range(n, n2+1) if is_divisible(i)]\n```"
    },
    {
        "id":146,
        "response":" import math\n\ndef sector_area(n, n2):\n    return (n2\/360) * math.pi * n * n"
    },
    {
        "id":147,
        "response":" import numpy as np\n\ndef lcs_of_three(s, s2, s3, n, n2, n3):\n    dp = np.zeros((n + 1, n2 + 1, n3 + 1), dtype=int)\n    for i in range(1, n + 1):\n        for j in range(1, n2 + 1):\n            for k in range(1, n3 + 1):\n                if s[i - 1] == s2[j - 1] == s3[k - 1]:\n                    dp[i, j, k] = dp[i - 1, j - 1, k - 1] + 1\n                else:\n                    dp[i, j, k] = max(dp[i - 1, j, k], dp[i, j - 1, k], dp[i, j, k - 1], dp[i - 1, j - 1, k], dp[i - 1, j, k - 1], dp[i, j - 1, k - 1])\n    lcs = []\n    i, j, k = n, n2, n3\n    while i > 0 and j > 0 and k > 0:\n        if s[i - 1] == s2[j - 1] == s3[k - 1]:\n            lcs.append(s[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        else:\n            max_val = max(dp[i - 1, j, k], dp[i, j - 1, k], dp[i, j, k - 1], dp[i - 1, j - 1, k], dp[i - 1, j, k - 1], dp[i, j - 1, k - 1])\n            if max_val == dp[i - 1, j, k]:\n                i -= 1\n            elif max_val == dp[i, j - 1, k]:\n                j -= 1\n            elif max_val == dp[i, j, k - 1]:\n                k -= 1\n            elif max_val == dp[i - 1, j - 1, k]:\n                i -= 1\n                j -= 1\n            elif max_val == dp[i - 1, j, k - 1]:\n                i -= 1\n                k -= 1\n            else:\n                j -= 1\n                k -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "id":148,
        "response":" import re\n     def capital_words_spaces(s):\n        return re.sub(r\"([A-Z])\", r\" \\1\", s).strip()"
    },
    {
        "id":149,
        "response":" from typing import List\n\ndef sort_numeric_strings(lst: List[str]) -> List[str]:\n    return sorted(lst, key=lambda x: int(x))"
    },
    {
        "id":150,
        "response":"\n\n\n\nfrom typing import List, Tuple\n\ndef add_tuple(lst: List, tup: Tuple):\n    lst.append(tup)"
    },
    {
        "id":151,
        "response":" import math\n\ndef check_min_heap(lst, n):\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and lst[i] > lst[left_child]:\n            return False\n        if right_child < n and lst[i] > lst[right_child]:\n            return False\n    return True"
    },
    {
        "id":152,
        "response":"\n\n\n\n```python\nimport math\n\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, 2*a + b\n    return b\n```"
    },
    {
        "id":153,
        "response":" import heapq\n     from typing import List, Tuple\n\n     def min_k(lst: List[Tuple[int, int]], n: int) -> List[Tuple[int, int]]:\n        return heapq.nsmallest(n, lst)"
    },
    {
        "id":154,
        "response":" ```python\nfrom typing import List\n\ndef extract_index_list(lst: List, lst2: List, lst3: List) -> List:\n    min_len = min(len(lst), len(lst2), len(lst3))\n    return [lst[i] for i in range(min_len) if lst[i] == lst2[i] == lst3[i]]\n```"
    },
    {
        "id":155,
        "response":" ```python\nimport heapq\ndef second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    return heapq.nsmallest(2, lst)[1]\n```"
    },
    {
        "id":156,
        "response":" import re\ndef text_match_zero_one(s):\n    return bool(re.search(r'\\b|0', s))<|eot_id|>    <|start_header_id|>assistant\n\n```python\nimport re\ndef text_match_zero_one(s):\n    return bool(re.search(r'0|b', s))\n```"
    },
    {
        "id":157,
        "response":"\n\n\n\nfrom typing import List\n\ndef count_reverse_pairs(lst: List[str]) -> int:\n    count = 0\n    seen = set()\n    for s in lst:\n        if s[::-1] in seen:\n            count += 1\n        seen.add(s)\n    return count<|end_header_id|>"
    },
    {
        "id":158,
        "response":" from typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    return len(set(tuple(sublist) for sublist in lst))"
    },
    {
        "id":159,
        "response":"\n\n\n\nimport re\ndef is_decimal(s):\n    pattern = r'^-?\\d{1,}\\.\\d{2}$'\n    return bool(re.match(pattern, s)) \ndef is_decimal(s: str) -> bool:\n    try:\n        num = float(s)\n        return num - int(num) == 0.00 or (num - int(num) >= 0.00 and num - int(num) < 0.01) or (num - int(num) > 0.99 and num - int(num) <= 1.00)\n    except ValueError:\n        return False"
    },
    {
        "id":160,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef unique_Element(lst: List[int], n: int) -> bool:\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    unique_count = 0\n    for count in count_dict.values():\n        if count == 1:\n            unique_count += 1\n    return unique_count == 1\n```"
    },
    {
        "id":161,
        "response":" import math\n\ndef arc_length(n, n2):\n    if n < 0 or n2 < 0:\n        return 0\n    theta = math.radians(n2)\n    return n * theta"
    },
    {
        "id":162,
        "response":" ```python\nimport calendar\n\ndef check_monthnumber_number(n):\n    if n < 1 or n > 12:\n        return False\n    return calendar.monthrange(2024, n)[1] == 30\n    ```"
    },
    {
        "id":163,
        "response":"\n\n\n\nfrom typing import List, Tuple\n\ndef find_Min_Diff(tup: Tuple[int], n: int) -> int:\n    lst = sorted(list(tup))\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = lst[i+1] - lst[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff<|eot_id|>"
    },
    {
        "id":164,
        "response":"\n\n\n\nimport re\ndef number_ctr(s):\n    return len(re.findall(r'\\d+', s))"
    },
    {
        "id":165,
        "response":" ```python\nimport math\n\ndef is_polite(n):\n    for i in range(1, n):\n        sum = i + (i + 1)\n        if sum == n:\n            return True\n        elif sum > n:\n            break\n    return False\n\ndef nth_polite_number(n):\n    count = 0\n    num = 1\n    while True:\n        if is_polite(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n```"
    },
    {
        "id":166,
        "response":"\n\n\n\nfrom typing import List, Tuple\nimport itertools\n\ndef pair_wise(lst: List) -> List[Tuple]:\n    return list(itertools.pairwise(lst))"
    },
    {
        "id":167,
        "response":" import itertools \n\n    def get_Pairs_Count(lst, n, n2):\n        count = 0\n        for i, j in itertools.combinations(lst, 2):\n            if i + j == n + n2:\n                count += 1\n        return count<|eot_id|>    <|start_header_id|>assistant\n\n```python\nimport itertools \n\ndef get_Pairs_Count(lst, n, n2):\n    count = 0\n    for i, j in itertools.combinations(lst, 2):\n        if i + j == n + n2:\n            count += 1\n    return count\n```"
    },
    {
        "id":168,
        "response":"\n\n\n\nfrom typing import Union\n\ndef check_Odd_Parity(n: int) -> Union[bool, str]:\n    if not isinstance(n, int):\n        return \"Invalid input. Please enter an integer.\"\n    return n % 2 != 0"
    },
    {
        "id":169,
        "response":" from typing import List\n\ndef Diff(lst1: List, lst2: List) -> List:\n    return list(set(lst1) - set(lst2)) + list(set(lst2) - set(lst1))"
    },
    {
        "id":170,
        "response":" ```python\nimport math\n\ndef odd_Num_Sum(n: int) -> int:\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        sum += math.pow(num, 4)\n        num += 2\n        count += 1\n    return int(sum)\n```"
    },
    {
        "id":171,
        "response":"\n\n\n\nfrom typing import List\n\ndef check_expression(s: str) -> bool:\n    stack: List[str] = []\n    bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    open_brackets = set([\"(\", \"{\", \"[\"])\n\n    for c in s:\n        if c in open_brackets:\n            stack.append(c)\n        elif c in bracket_map:\n            if stack == [] or bracket_map[c] != stack.pop():\n                return False\n    return stack == []<|eot_id|>"
    },
    {
        "id":172,
        "response":" import re\n     def remove_length(s, n):\n        return re.sub(r'\\b\\w{' + str(n) + r'}\\b', '', s).strip()"
    },
    {
        "id":173,
        "response":" import re\n\ndef occurance_substring(s, s2):\n    return [(m.start(), m.end()) for m in re.finditer(s2, s)]"
    },
    {
        "id":174,
        "response":" ```python\nimport re\nfrom typing import Optional\n\ndef check_email(s: str) -> Optional[str]:\n    if '@' not in s:\n        return None\n    local_part, _, domain = s.partition('@')\n    if not local_part or not domain:\n        return None\n    if '..' in local_part or '..' in domain:\n        return None\n    if not re.match(r'^[a-zA-Z0-9_.+-]+$', local_part):\n        return None\n    if not re.match(r'^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', domain):\n        return None\n    return s\n```"
    },
    {
        "id":175,
        "response":" ```python\nfrom typing import List\n\ndef odd_position(lst: List[int]) -> bool:\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            return False\n    return True\n```"
    },
    {
        "id":176,
        "response":"\n\n\n\nfrom typing import Dict\n\ndef count_vowels(s: str) -> int:\n    vowels: str = 'aeiou'\n    count: int = 0\n    s: str = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i > 0 and s[i-1] in vowels:\n                count += 1\n            if i < len(s) - 1 and s[i+1] in vowels:\n                count += 1\n    return count<|eot_id|>"
    },
    {
        "id":177,
        "response":"\n\n\n\nimport typing\n\ndef find_Sum(lst: typing.List[int], n: int) -> int:\n    unique_elements = set(lst)\n    return sum(unique_elements)"
    },
    {
        "id":178,
        "response":" from typing import List\n\ndef pack_consecutive_duplicates(lst: List) -> List:\n    if not lst:\n        return []\n    \n    result = [[lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result<|eot_id|>"
    },
    {
        "id":179,
        "response":" from typing import List\n\ndef unique_sublists(lst: List[List[int]]) -> int:\n    return len(set(tuple(sublist) for sublist in lst))<|end_header_id|>"
    },
    {
        "id":180,
        "response":" import itertools\n\n    def find_combinations(lst):\n        result = []\n        for r in range(1, len(lst) + 1):\n            result.extend(itertools.combinations(lst, r))\n        return result<|eot_id|>"
    },
    {
        "id":181,
        "response":"\n\n\n\nimport math\n\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/ i == i:\n                count += 1\n            else:\n                count += 2\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "id":182,
        "response":" ```python\nimport re\nfrom typing import List\n\ndef Odd_Length_Sum(lst: List[str]) -> int:\n    return sum(len(sub) for string in lst for sub in re.findall(r'\\w+', string) if len(sub) % 2 != 0)\n```"
    },
    {
        "id":183,
        "response":" import colorsys\n\ndef rgb_to_hsv(r, g, b):\n    return colorsys.rgb_to_hsv(r\/255, g\/255, b\/255)<|end_header_id|>"
    },
    {
        "id":184,
        "response":"\n\n\n\nfrom typing import List\n\ndef mul_even_odd(lst: List[int]) -> int:\n    even = None\n    odd = None\n    for i in lst:\n        if i % 2 == 0:\n            if even is None:\n                even = i\n        else:\n            if odd is None:\n                odd = i\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return 0<|eot_id|>"
    },
    {
        "id":185,
        "response":"\n\n\n\n```python\nimport re\nfrom typing import Tuple\n\ndef tuple_str_int(s: str) -> Tuple[int, ...]:\n    return tuple(map(int, re.findall(r'\\d+', s)))\n```"
    },
    {
        "id":186,
        "response":"\n\n\n\nfrom typing import List\n\ndef right_insertion(lst: List[int], n: int) -> int:\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        mid = (left + right) \/\/ 2\n        if lst[mid] == n:\n            return mid\n        elif lst[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "id":187,
        "response":" import re\ndef text_match_three(s):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, s))<|eot_id|>"
    },
    {
        "id":188,
        "response":"\n\n\n\nfrom typing import List, Tuple\n\ndef new_tuple(lst: List, s: str) -> Tuple:\n    return (*lst, s)\n    \n  \nprint(new_tuple([1,2,3], \"hello\")) \nprint(new_tuple([], \"world\")) \nprint(new_tuple([\"a\",\"b\",\"c\"], \"python\")) \nprint(new_tuple([True, False], \"java\")) \nprint(new_tuple([1.2, 3.4], \"c++\")) \nprint(new_tuple([], \"\")) \nprint(new_tuple([], None)) \nprint(new_tuple(None, \"swift\")) \nprint(new_tuple([1,2,3], None)) \nprint(new_tuple(None, None)) \nprint(new_tuple([1,2,3], \"\")) \nprint(new_tuple([], \"scala\")) \nprint(new_tuple([1,2,3], \"ruby\")) \nprint(new_tuple([1,2,3], \"kotlin\")) \nprint(new_tuple([1,2,3], \"php\")) \nprint(new_tuple([1,2,3], \"perl\")) \nprint(new_tuple([1,2,3], \"go\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"rust\")) \nprint(new_tuple([1,2,3], \"swift\")) \nprint(new_tuple([1,2,3], \"javascript\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"ruby\")) \nprint(new_tuple([1,2,3], \"kotlin\")) \nprint(new_tuple([1,2,3], \"php\")) \nprint(new_tuple([1,2,3], \"perl\")) \nprint(new_tuple([1,2,3], \"go\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"rust\")) \nprint(new_tuple([1,2,3], \"swift\")) \nprint(new_tuple([1,2,3], \"javascript\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"ruby\")) \nprint(new_tuple([1,2,3], \"kotlin\")) \nprint(new_tuple([1,2,3], \"php\")) \nprint(new_tuple([1,2,3], \"perl\")) \nprint(new_tuple([1,2,3], \"go\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"rust\")) \nprint(new_tuple([1,2,3], \"swift\")) \nprint(new_tuple([1,2,3], \"javascript\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"ruby\")) \nprint(new_tuple([1,2,3], \"kotlin\")) \nprint(new_tuple([1,2,3], \"php\")) \nprint(new_tuple([1,2,3], \"perl\")) \nprint(new_tuple([1,2,3], \"go\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"rust\")) \nprint(new_tuple([1,2,3], \"swift\")) \nprint(new_tuple([1,2,3], \"javascript\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"ruby\")) \nprint(new_tuple([1,2,3], \"kotlin\")) \nprint(new_tuple([1,2,3], \"php\")) \nprint(new_tuple([1,2,3], \"perl\")) \nprint(new_tuple([1,2,3], \"go\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"rust\")) \nprint(new_tuple([1,2,3], \"swift\")) \nprint(new_tuple([1,2,3], \"javascript\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"ruby\")) \nprint(new_tuple([1,2,3], \"kotlin\")) \nprint(new_tuple([1,2,3], \"php\")) \nprint(new_tuple([1,2,3], \"perl\")) \nprint(new_tuple([1,2,3], \"go\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"rust\")) \nprint(new_tuple([1,2,3], \"swift\")) \nprint(new_tuple([1,2,3], \"javascript\")) \nprint(new_tuple([1,2,3], \"typescript\")) \nprint(new_tuple([1,2,3], \"ruby\")) \nprint(new_tuple([1,2,"
    },
    {
        "id":189,
        "response":" import math\n\ndef perimeter_polygon(n, side_length):\n    return n * side_length<|end_header_id|>"
    },
    {
        "id":190,
        "response":"\n\n\n\n```python\nimport typing\n\ndef even_position(lst: typing.List[int]) -> bool:\n    for i in range(0, len(lst), 2):\n        if not isinstance(lst[i], int) or lst[i] % 2 != 0:\n            return False\n    return True\n```"
    },
    {
        "id":191,
        "response":" ```python\nimport typing\n\ndef remove_nested(tup: typing.Tuple) -> typing.Tuple:\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)\n```"
    },
    {
        "id":192,
        "response":"\n\n\n\nfrom typing import List\n\ndef count_list(lst: List[int], n: int) -> int:\n    count = 0\n    for i in lst:\n        if i == n:\n            count += 1\n    return count<|eot_id|>"
    },
    {
        "id":193,
        "response":"\n\n\n\n```python\nimport bisect\n\ndef last(lst, n):\n    index = bisect.bisect_right(lst, n)\n    if index:\n        return index - 1\n    else:\n        return -1\n```"
    },
    {
        "id":194,
        "response":" import re\ndef text_starta_endb(s: str) -> bool:\n    return bool(re.match(r'^a.*b$', s))<|eot_id|>    <|start_header_id|>assistant\n\n```python\nimport re\ndef text_starta_endb(s: str) -> bool:\n    return bool(re.match(r'^a.*b$', s))\n```"
    },
    {
        "id":195,
        "response":" import heapq\n     from typing import List, Tuple\n\n     def cheap_items(lst: List[Tuple[str, int]], n: int) -> List[Tuple[str, int]]:\n        return heapq.nsmallest(n, lst, key=lambda x: x[1])"
    },
    {
        "id":196,
        "response":" ```python\nfrom typing import Dict\n\ndef return_sum(dct: Dict) -> int:\n    return sum(dct.values())\n```"
    },
    {
        "id":197,
        "response":"\n\n\n\nimport math\n\ndef sum_in_Range(l, r):\n    if not isinstance(l, int) or not isinstance(r, int):\n        raise TypeError(\"Both inputs must be integers\")\n    if l > r:\n        l, r = r, l\n    count = (r - l) \/\/ 2 + 1\n    return count * (l + r) \/\/ 2 if (l % 2 != 0 and r % 2 != 0) else count * (l + 1 + r - 1) \/\/ 2 if l % 2 != 0 or r % 2 != 0 else count * (l + r - 1) \/\/ 2"
    },
    {
        "id":198,
        "response":" ```python\nfrom typing import List\n\ndef _sum(lst: List[int]) -> int:\n    return sum(lst)\n```"
    },
    {
        "id":199,
        "response":"\n\n\n\n```python\nfrom typing import *\n\ndef left_Rotate(n: int, k: int) -> int:\n    import math\n    k = k % (int(math.log2(n))+1)\n    return ((n << k) | (n >> (int(math.log2(n))+1-k))) & ((1 << (int(math.log2(n))+1)) - 1)\n```"
    },
    {
        "id":200,
        "response":" import re\n    def remove_all_spaces(s: str) -> str:\n        return re.sub(r\"\\s+\", \"\", s)"
    },
    {
        "id":201,
        "response":" ```python\nfrom typing import List\n\ndef test_three_equal(n: int, n2: int, n3: int) -> int:\n    nums: List[int] = [n, n2, n3]\n    count: int = 0\n    for i in nums:\n        if nums.count(i) == 3:\n            count += 1\n    return count\n```"
    },
    {
        "id":202,
        "response":"\n\n\n\nfrom typing import List\n\ndef count_Rotation(lst: List[int], n: int) -> int:\n    min_index = lst.index(min(lst))\n    return min_index\n    <|eot_id|> \n```python\nfrom typing import List\n\ndef count_Rotation(lst: List[int], n: int) -> int:\n    min_index = lst.index(min(lst))\n    return min_index\n```"
    },
    {
        "id":203,
        "response":" import math\n\ndef is_Perfect_Square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt = math.isqrt(n)\n    return sqrt * sqrt == n"
    },
    {
        "id":204,
        "response":" ```python\nimport math\nfrom typing import List\n\ndef is_Product_Even(lst: List[int], n: int) -> bool:\n    product = 1\n    for i in range(n):\n        product *= lst[i]\n    return product % 2 == 0\n```"
    },
    {
        "id":205,
        "response":" ```python\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[List[int]]:\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n            \n    return max_list\n```"
    },
    {
        "id":206,
        "response":" ```python\nimport re\ndef max_run_uppercase(s: str) -> int:\n    if not s:\n        return 0\n    return max(map(len, re.findall(r'[A-Z]+', s)))\n```"
    },
    {
        "id":207,
        "response":"\n\n\n\nfrom typing import List\n\ndef first_odd(lst: List[int]) -> int:\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None<|end_header_id|>"
    },
    {
        "id":208,
        "response":" ```python\nimport typing\n\ndef check_K(tup: typing.Tuple, n: int) -> bool:\n    return n in tup\n```"
    },
    {
        "id":209,
        "response":" ```python\nimport typing\n\ndef check_smaller(tup: typing.Tuple[int, ...], tup2: typing.Tuple[int, ...]) -> bool:\n    if len(tup) != len(tup2):\n        return False\n    return all(a < b for a, b in zip(tup, tup2))\n```"
    },
    {
        "id":210,
        "response":"\n\n\n\nfrom typing import List\nimport itertools\n\ndef count_variable(*args):\n    result = []\n    for i in args:\n        result.extend([i] * args.count(i))\n    return result<|eot_id|> \n```python\nfrom typing import List\nimport itertools\n\ndef count_variable(*args):\n    result = []\n    for i in args:\n        result.extend([i] * args.count(i))\n    return result\n```"
    },
    {
        "id":211,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef check_identical(lst1: List[Tuple], lst2: List[Tuple]) -> bool:\n    if len(lst1) != len(lst2):\n        return False\n    return sorted(lst1) == sorted(lst2)\n```"
    },
    {
        "id":212,
        "response":" import re\n\n    def road_rd(s):\n        return re.sub(r'\\broad\\b', 'rd.', s)"
    },
    {
        "id":213,
        "response":"\n\n\n\n```python\ndef string_length(s: str) -> int:\n    return len(s)\n```"
    },
    {
        "id":214,
        "response":" import math\n\ndef rombus_area(n, n2):\n    return (1\/2) * n * n2"
    },
    {
        "id":215,
        "response":" from typing import List\n\n    def sort_by_dnf(lst: List[int], n: int) -> List[int]:\n        low, mid, high = 0, 0, n - 1\n\n        while mid <= high:\n            if lst[mid] == 0:\n                lst[low], lst[mid] = lst[mid], lst[low]\n                low += 1\n                mid += 1\n            elif lst[mid] == 1:\n                mid += 1\n            else:\n                lst[mid], lst[high] = lst[high], lst[mid]\n                high -= 1\n        return lst<|eot_id|>"
    },
    {
        "id":216,
        "response":" ```python\nfrom typing import Tuple\n\ndef clear_tuple(tup: Tuple) -> Tuple:\n    return ()\n```"
    },
    {
        "id":217,
        "response":" from typing import List\n\ndef div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n    return list(filter(lambda x: x % m == 0 or x % n == 0, lst))"
    },
    {
        "id":218,
        "response":"\n\n\n\nfrom typing import Dict\n\ndef lower_ctr(s: str) -> Dict[str, int]:\n    count = 0\n    for char in s:\n        if char.islower():\n            count += 1\n    return {\"lowercase\": count}"
    },
    {
        "id":219,
        "response":"\n\n\n\nfrom typing import List\nfrom itertools import groupby\n\ndef count_duplic(lst: List[int]) -> List[tuple]:\n    result = []\n    for k, g in groupby(lst):\n        count = len(list(g))\n        if count > 1:\n            result.append((k, count))\n    return result<|end_header_id|>"
    },
    {
        "id":220,
        "response":" ```python\nimport calendar\n\ndef check_monthnum_number(n):\n    if n < 1 or n > 12:\n        return False\n    return calendar.monthrange(2024, n)[1] == 28\n    ```"
    },
    {
        "id":221,
        "response":" from typing import Dict\n\ndef merge_dictionaries(dict1: Dict, dict2: Dict) -> Dict:\n    return {**dict1, **dict2}"
    },
    {
        "id":222,
        "response":" import re\n\ndef pass_validity(s: str) -> bool:\n    if len(s) < 8:\n        return False\n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    for char in s:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        elif not char.isalnum():\n            has_special = True\n    return has_upper and has_lower and has_digit and has_special<|eot_id|>"
    },
    {
        "id":223,
        "response":" import re\n    def check_substring(s, s2):\n        return bool(re.match(s2, s))<|eot_id|>    <|start_header_id|>assistant\n\n```python\nimport re\ndef check_substring(s, s2):\n    return bool(re.match(s2, s))\n```"
    },
    {
        "id":224,
        "response":"\n\n\n\nfrom typing import List\n\ndef remove_even(lst: List[int]) -> List[int]:\n    return [i for i in lst if i % 2 != 0]"
    },
    {
        "id":225,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef access_elements(lst: List[int], lst2: List[int]) -> List[int]:\n    return [lst[i] for i in lst2 if i < len(lst)]\n```"
    },
    {
        "id":226,
        "response":" import math\n\ndef check_Type_Of_Triangle(n, n2, n3):\n    if n + n2 > n3 and n + n3 > n2 and n2 + n3 > n:\n        if n == n2 == n3:\n            return \"Equilateral\"\n        elif n == n2 or n == n3 or n2 == n3:\n            return \"Isosceles\"\n        else:\n            return \"Scalene\"\n    else:\n        return \"Not a Triangle\""
    },
    {
        "id":227,
        "response":" ```python\nfrom typing import List\n\ndef sum_column(lst: List[List[int]], n: int) -> int:\n    return sum(row[n] for row in lst)\n```"
    },
    {
        "id":228,
        "response":" import re\n     from typing import Tuple\n\n    def count_alpha_dig_spl(s: str) -> Tuple[int, int, int]:\n        alpha_count = len(re.findall(r'[a-zA-Z]', s))\n        dig_count = len(re.findall(r'\\d', s))\n        spl_count = len(re.findall(r'[^a-zA-Z0-9\\s]', s))\n        return alpha_count, dig_count, spl_count"
    },
    {
        "id":229,
        "response":" from collections import Counter\n    def second_frequent(lst):\n        if len(lst) == 0:\n            return None\n        if len(lst) == 1:\n            return None\n        count = Counter(lst)\n        sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n        if len(sorted_count) < 2:\n            return None\n        return sorted_count[1][0]"
    },
    {
        "id":230,
        "response":" import math\n\ndef round_up(n, n2):\n    return math.ceil(n \/ n2) * n2<|end_header_id|>"
    },
    {
        "id":231,
        "response":"\n\n\n\nfrom typing import List\nfrom collections import Counter\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    count = Counter(lst)\n    pairs = 0\n    for i in count:\n        if count[i] >= 2:\n            pairs += count[i] * (count[i] - 1) \/\/ 2\n    return pairs<|eot_id|>"
    },
    {
        "id":232,
        "response":" import re\nfrom typing import Union\n\ndef extract_max(s: str) -> Union[int, float, None]:\n    numbers = re.findall(r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\", s)\n    if not numbers:\n        return None\n    numbers = [float(num) for num in numbers]\n    return max(numbers)"
    },
    {
        "id":233,
        "response":" ```python\nfrom typing import Dict, List\n\ndef get_key(dct: Dict) -> List:\n    return list(dct.keys())\n```"
    },
    {
        "id":234,
        "response":" import numpy as np\n\ndef generate_matrix(n):\n    matrix = np.zeros((n, n), dtype=int)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] \n    dir_index = 0\n    row, col = 0, 0\n    for i in range(1, n * n + 1):\n        matrix[row, col] = 2 ** i\n        next_row, next_col = row + directions[dir_index][0], col + directions[dir_index][1]\n        if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row, next_col] == 0:\n            row, col = next_row, next_col\n        else:\n            dir_index = (dir_index + 1) % 4\n            row, col = row + directions[dir_index][0], col + directions[dir_index][1]\n    return matrix<|eot_id|>"
    },
    {
        "id":235,
        "response":" import math\n\ndef slope(n, n2, n3, n4):\n    if n == n3:\n        return float('inf')\n    else:\n        return (n4 - n2) \/ (n - n3)"
    },
    {
        "id":236,
        "response":" import sys\n\ndef max_sub_array_sum(lst, n):\n    max_so_far = -sys.maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    tempStart = 0\n\n    for i in range(0, n):\n        if lst[i] > max_ending_here + lst[i]:\n            max_ending_here = lst[i]\n            tempStart = i\n        else:\n            max_ending_here = max_ending_here + lst[i]\n\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = tempStart\n            end = i\n\n    return end - start + 1"
    },
    {
        "id":237,
        "response":"\n\n\n\n```python\nimport math\n\ndef cube_Sum(n: int) -> int:\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i ** 3\n    return sum\n```"
    },
    {
        "id":238,
        "response":"\n\n\n\n```python\nfrom collections import Counter\nimport itertools\n\ndef minSwaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    diff = sum(a != b for a, b in zip(s1, s2))\n    if diff % 2 != 0:\n        return -1\n    count = Counter()\n    for a, b in zip(s1, s2):\n        if a != b:\n            count[a] += 1\n    return diff \/\/ 2 - max(count.values(), default=0)\n```"
    },
    {
        "id":239,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef sort_tuple(lst: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(lst, key=lambda x: x[0])\n```"
    },
    {
        "id":240,
        "response":" ```python\nimport math\n\ndef Check_Solution(n, n2, n3):\n    D = n2**2 - 4*n*n3\n    if D < 0:\n        return False\n    root1 = (-n2 + math.sqrt(D))\/(2*n)\n    root2 = (-n2 - math.sqrt(D))\/(2*n)\n    return root1 == -root2\n    ```"
    },
    {
        "id":241,
        "response":" from typing import List\n\ndef get_inv_count(lst: List[int], n: int) -> int:\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] > lst[j]:\n                inv_count += 1\n    return inv_count<|end_header_id|>"
    },
    {
        "id":242,
        "response":" import collections\n\n    def get_odd_occurence(lst, n):\n        count_map = collections.defaultdict(int)\n        for num in lst:\n            count_map[num] += 1\n        for num, count in count_map.items():\n            if count % 2 != 0:\n                return num\n        return None<|eot_id|>    def get_odd_occurence(lst, n):\n        count_map = collections.defaultdict(int)\n        for num in lst:\n            count_map[num] += 1\n        for num, count in count_map.items():\n            if count % 2 != 0:\n                return num\n        return Noneassistant\n\n```python\nimport collections\n\ndef get_odd_occurence(lst, n):\n    count_map = collections.defaultdict(int)\n    for num in lst:\n        count_map[num] += 1\n    for num, count in count_map.items():\n        if count % 2 != 0:\n            return num\n    return None\n```"
    },
    {
        "id":243,
        "response":" import heapq\n\ndef nth_super_ugly_number(n, lst):\n    primes = lst\n    ugly = [1]\n    idx = [0]*len(primes)\n    while len(ugly) < n:\n        next_ugly = min(primes[i]*ugly[idx[i]] for i in range(len(primes)))\n        ugly.append(next_ugly)\n        for i in range(len(primes)):\n            if primes[i]*ugly[idx[i]] == next_ugly:\n                idx[i] += 1\n    return ugly[-1]"
    },
    {
        "id":244,
        "response":" ```python\nimport itertools\n\ndef get_Number(n, n2):\n    odd = [i for i in n if i % 2 != 0]\n    even = [i for i in n if i % 2 == 0]\n    combined = list(itertools.chain(odd, even))\n    return combined[n2-1] if n2 <= len(combined) else None\n```"
    },
    {
        "id":245,
        "response":" import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    product = 1\n    for i in range(1, n+1):\n        product *= i\n    return len(str(product))"
    },
    {
        "id":246,
        "response":" import sys\n    from typing import List\n\n    def find_platform(arr: List[int], dep: List[int], n: int) -> int:\n        arr.sort()\n        dep.sort()\n        plat_needed = 1\n        result = 1\n        i = 1\n        j = 0\n        while i < n and j < n:\n            if arr[i] <= dep[j]:\n                plat_needed += 1\n                i += 1\n            elif arr[i] > dep[j]:\n                plat_needed -= 1\n                j += 1\n            if plat_needed > result:\n                result = plat_needed\n        return result<|eot_id|>"
    },
    {
        "id":247,
        "response":"\n\n\n\nfrom typing import List, Tuple\n\ndef lcopy(lst: Tuple) -> List:\n    return list(lst)"
    },
    {
        "id":248,
        "response":" import typing\n\ndef area_trapezium(n: float, n2: float, n3: float) -> float:\n    return 0.5 * (n + n2) * n3"
    },
    {
        "id":249,
        "response":"\n\n\n\n```python\nimport math\n\ndef Sum(n: int) -> int:\n    if n < 1:\n        return 0\n    total = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                total += i\n            else:\n                total += i + n \/\/ i\n    return total - n\n```"
    },
    {
        "id":250,
        "response":" import typing\n\ndef is_triangleexists(n: float, n2: float, n3: float) -> bool:\n    return n > 0 and n2 > 0 and n3 > 0 and n + n2 > n3 and n + n3 > n2 and n2 + n3 > n"
    },
    {
        "id":251,
        "response":" import math\nfrom typing import List\n\ndef Sum_of_Inverse_Divisors(n: int, n2: int) -> float:\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                sum += 1 \/ i\n            else:\n                sum += 1 \/ i + 1 \/ (n \/\/ i)\n    return sum * n2"
    },
    {
        "id":252,
        "response":" ```python\nfrom typing import List\n\ndef remove_negs(lst: List[int]) -> List[int]:\n    return [i for i in lst if i >= 0]\n```"
    },
    {
        "id":253,
        "response":" ```python\nimport math\n\ndef sum_of_odd_Factors(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 != 0:\n                sum += i\n            if (n \/\/ i) % 2 != 0 and i != n \/\/ i:\n                sum += n \/\/ i\n    return sum\n```"
    },
    {
        "id":254,
        "response":" import heapq\n     from typing import List\n\n    def raw_heap(lst: List[int]) -> List[int]:\n        heapq.heapify(lst)\n        return lst<|eot_id|>"
    },
    {
        "id":255,
        "response":" ```python\ndef check_Even_Parity(n: int) -> bool:\n    import re\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    return (n & 1) == 0\n    ```"
    },
    {
        "id":256,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef find_Min_Swaps(lst: List[int], n: int) -> int:\n    swaps = 0\n    for i in range(n):\n        if lst[i] != 0:\n            continue\n        j = i + 1\n        while j < n and lst[j] == 0:\n            j += 1\n        if j == n:\n            break\n        lst[i], lst[j] = lst[j], lst[i]\n        swaps += 1\n    return swaps\n```"
    },
    {
        "id":257,
        "response":" ```python\nfrom typing import List\n\ndef listify_list(lst: List[str]) -> List[List[str]]:\n    return list(map(list, lst))\n```"
    },
    {
        "id":258,
        "response":" ```python\nfrom typing import List\n\ndef count_list(lst: List[List[int]]) -> List[int]:\n    return [len(sublist) for sublist in lst]\n\ndef square_list(lst: List[int]) -> List[int]:\n    return [i ** 2 for i in lst]\n    ```"
    },
    {
        "id":259,
        "response":"\n\n\n\nfrom typing import List\nimport itertools\n\ndef sub_lists(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            result.append(list(subset))\n    return result<|eot_id|>"
    },
    {
        "id":260,
        "response":" ```python\nimport string\n\ndef check_alphanumeric(s: str) -> bool:\n    for char in reversed(s):\n        if not char.isalnum():\n            return False\n        else:\n            break\n    return True\n    #OR \ndef check_alphanumeric(s: str) -> bool:\n    return s[::-1].isalnum() or s == ''\n```"
    },
    {
        "id":261,
        "response":" ```python\nfrom typing import List\n\ndef anagram_lambda(lst: List[str], s: str) -> List[str]:\n    sorted_s = \"\".join(sorted(s))\n    return list(filter(lambda x: \"\".join(sorted(x)) == sorted_s and x != s, lst))\n```"
    },
    {
        "id":262,
        "response":" import re\n     from collections import Counter\n     from typing import List\n\n     def n_common_words(s: str, n: int) -> List[tuple]:\n        words = re.findall(r'\\b\\w+\\b', s.lower())\n        common = Counter(words).most_common(n)\n        return common<|eot_id|>"
    },
    {
        "id":263,
        "response":"\n\n\n\nimport typing as t\n\ndef find_longest_conseq_subseq(lst: t.List[int], n: int) -> int:\n    if not lst or n == 0:\n        return 0\n\n    num_set = set(lst)\n    max_length = 0\n\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n\n            max_length = max(max_length, current_length)\n\n    return max_length if max_length <= n else max_length"
    },
    {
        "id":264,
        "response":"\n\n\n\nimport re\nfrom typing import List\n\ndef palindrome_lambda(lst: List[str]) -> List[str]:\n    palindrome_filter = list(filter(lambda s: s == s[::-1], lst))\n    return palindrome_filter<|end_header_id|>"
    },
    {
        "id":265,
        "response":"\n\n\n\n```python\nfrom typing import List\nfrom itertools import repeat\n\ndef ntimes_list(lst: List, n: int) -> List:\n    return list(map(list, repeat(lst, n)))\n```"
    },
    {
        "id":266,
        "response":" import calendar \n\n    def check_monthnumb(s):\n        month_name = ['January', 'February', 'March', 'April', 'May', 'June', \n                    'July', 'August', 'September', 'October', 'November', 'December']\n        if s in month_name:\n            month_num = month_name.index(s) + 1\n            if calendar.monthrange(2024, month_num)[1] == 31:\n                return True\n            else:\n                return False\n        else:\n            return \"Invalid month name\" \n    def check_monthnumb1(s):\n        month_name = ['January', 'February', 'March', 'April', 'May', 'June', \n                    'July', 'August', 'September', 'October', 'November', 'December']\n        if s in month_name:\n            month_num = month_name.index(s) + 1\n            return calendar.monthrange(2024, month_num)[1] == 31\n        else:\n            return \"Invalid month name\""
    },
    {
        "id":267,
        "response":"\n\n\n\nfrom typing import List\n\ndef min_Num(lst: List[int], n: int) -> int:\n    total_sum = sum(lst)\n    if total_sum % 2 == 0:\n        return 0\n    else:\n        return 1<|eot_id|>"
    },
    {
        "id":268,
        "response":" ```python\nfrom typing import Optional\n\ndef length_Of_Last_Word(s: str) -> Optional[int]:\n    words = s.split()\n    if not words:\n        return None\n    return len(words[-1])\n```"
    },
    {
        "id":269,
        "response":" ```python\nfrom typing import List\n\ndef remove_list_range(lst: List[int], n: int, n2: int) -> List[int]:\n    return [i for i in lst if n <= i <= n2]\n```"
    },
    {
        "id":270,
        "response":" from typing import List\nfrom functools import reduce\n\ndef sum_positivenum(lst: List[int]) -> int:\n    positive_nums = list(filter(lambda x: x > 0, lst))\n    return reduce(lambda x, y: x + y, positive_nums, 0)"
    },
    {
        "id":271,
        "response":" ```python\nfrom typing import *\n\n\ndef are_Rotations(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    return s2 in s + s\n```"
    },
    {
        "id":272,
        "response":" ```python\nfrom typing import List, Union\n\ndef check_subset(lst: List[Union[int, List]], lst2: List[Union[int, List]]) -> bool:\n    def flatten(lst: List[Union[int, List]]) -> List[int]:\n        flat_list = []\n        for i in lst:\n            if isinstance(i, list):\n                flat_list.extend(flatten(i))\n            else:\n                flat_list.append(i)\n        return flat_list\n\n    flat_lst = flatten(lst)\n    flat_lst2 = flatten(lst2)\n\n    return set(flat_lst).issubset(set(flat_lst2))\n    ```"
    },
    {
        "id":273,
        "response":"\n\n\n\nfrom typing import List\n\ndef fibonacci(n: int) -> List[int]:\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_sequence = [0, 1]\n        while len(fib_sequence) < n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return fib_sequence<|eot_id|>"
    },
    {
        "id":274,
        "response":" ```python\nimport re\n\ndef check_Concat(s, s2):\n    if len(s) + len(s2) != len(s + s2):\n        return False\n    return re.fullmatch(s + '.*', s + s2) is not None\n    #OR\ndef check_Concat(s, s2):\n    return s+s2==s2+s \n    #OR\ndef check_Concat(s, s2):\n    if len(s) + len(s2) != len(s + s2):\n        return False\n    i=0\n    for c in s+s2:\n        if i<len(s) and c==s[i]:\n            i+=1\n        elif i==len(s):\n            break\n    return i==len(s)\n    #OR\ndef check_Concat(s, s2):\n    return (s+s2).startswith(s) and (s+s2).endswith(s2)\n```"
    },
    {
        "id":275,
        "response":"\n\n\n\nfrom typing import List, Tuple\nimport itertools\n\ndef min_difference(lst: List[Tuple[int, int]]) -> int:\n    diff = []\n    for (a, b), (c, d) in itertools.combinations(lst, 2):\n        diff.append(abs((a - b) - (c - d)))\n    return min(diff) if diff else 0"
    },
    {
        "id":276,
        "response":" import math\n\ndef lcm(n, n2):\n    return abs(n*n2) \/\/ math.gcd(n, n2)"
    },
    {
        "id":277,
        "response":"\n\n\n\nimport re\ndef sort_String(s):\n    return ''.join(sorted(s))<|eot_id|>assistant\n\n```python\nimport re\ndef sort_String(s):\n    return ''.join(sorted(s))\n```"
    },
    {
        "id":278,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef check_tuples(tup: Tuple, lst: List) -> bool:\n    if len(tup) != len(lst):\n        return False\n    return set(tup) == set(lst)\n```"
    },
    {
        "id":279,
        "response":" import re\n    def text_match(s):\n        pattern = r\".*a.*b$\"\n        if re.match(pattern, s):\n            return True\n        else:\n            return False<|eot_id|>    <|start_header_id|>assistant\n\n```python\nimport re\ndef text_match(s):\n    pattern = r\".*a.*b$\"\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":280,
        "response":" import math\n\ndef Check_Solution(n, n2, n3):\n    D = n2 * n2 - 4 * n * n3\n    if D > 0:\n        return 2\n    elif D == 0:\n        return 1\n    else:\n        return 0"
    },
    {
        "id":281,
        "response":"\n\n\n\nfrom typing import List\n\ndef sum_even_odd(lst: List[int]) -> tuple:\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum, odd_sum"
    },
    {
        "id":282,
        "response":" import math \n\ndef parallelogram_perimeter(n, n2):\n    return 2 * (n + n2)"
    },
    {
        "id":283,
        "response":" ```python\nfrom typing import List\n\ndef div_of_nums(lst: List[int], m: int, n: int) -> List[int]:\n    return list(filter(lambda x: x % m == 0 and x % n == 0, lst))\n    ```"
    },
    {
        "id":284,
        "response":" import math\n\ndef all_Bits_Set_In_The_Given_Range(n, left, right):\n    if left > right:\n        return False\n    if n == 0 and left == 0 and right == 0:\n        return True\n    mask = ((1 << (right - left + 1)) - 1) << left\n    return (n & mask) == mask"
    },
    {
        "id":285,
        "response":"\n\n\n\n```python\nfrom typing import Dict\n\ndef is_Isomorphic(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n\n    s_to_t: Dict[str, str] = {}\n    t_to_s: Dict[str, str] = {}\n\n    for char_s, char_t in zip(s, t):\n        if (char_s in s_to_t and s_to_t[char_s] != char_t) or (char_t in t_to_s and t_to_s[char_t] != char_s):\n            return False\n        s_to_t[char_s] = char_t\n        t_to_s[char_t] = char_s\n\n    return True\n```"
    },
    {
        "id":286,
        "response":"\n\n\n\nimport typing\n\ndef sum_num(tup: typing.Tuple[float, ...]) -> float:\n    return sum(tup) \/ len(tup) if tup else 0.0<|eot_id|>"
    },
    {
        "id":287,
        "response":" ```python\nimport typing\n\ndef is_odd(n: int) -> bool:\n    return (n & 1) != 0\n```"
    },
    {
        "id":288,
        "response":" ```python\nfrom typing import Tuple\n\ndef subtract_elements(tup: Tuple, tup2: Tuple) -> Tuple:\n    if len(tup) != len(tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n\n    result = []\n    for i in range(len(tup)):\n        if isinstance(tup[i], tuple) and isinstance(tup2[i], tuple):\n            result.append(subtract_elements(tup[i], tup2[i]))\n        elif isinstance(tup[i], (int, float)) and isinstance(tup2[i], (int, float)):\n            result.append(tup[i] - tup2[i])\n        else:\n            raise ValueError(\"Tuple elements must be numbers or tuples\")\n\n    return tuple(result)\n\n# Example usage:\ntup = (1, 2, (3, 4))\ntup2 = (5, 6, (7, 8))\nprint(subtract_elements(tup, tup2)) \n    ```"
    },
    {
        "id":289,
        "response":" ```python\nfrom typing import List\n\ndef reverse_list_lists(lst: List[List[int]]) -> List[List[int]]:\n    return [sublist[::-1] for sublist in lst]\n```"
    },
    {
        "id":290,
        "response":" import bisect\n\ndef find_Extra(lst, lst2, n):\n    for i in range(n):\n        if lst[i] != lst2[i]:\n            return i\n    return n"
    },
    {
        "id":291,
        "response":"\n\n\n\n```python\nimport math\ndef same_Length(n, n2):\n    return math.floor(math.log10(abs(n))+1) == math.floor(math.log10(abs(n2))+1)\n```"
    },
    {
        "id":292,
        "response":" import re\n    def remove_spaces(s):\n        return re.sub(' +', ' ', s)"
    },
    {
        "id":293,
        "response":" ```python\nfrom typing import List\n\ndef extract(lst: List[List[int]]) -> List[int]:\n    return [sublist[-1] for sublist in lst if sublist]\n```"
    },
    {
        "id":294,
        "response":" import re\n     from typing import Tuple\n\n     def float_to_tuple(s: str) -> Tuple[float, float]:\n         match = re.match(r'(\\-?\\d*\\.?\\d+)\\s*,\\s*(\\-?\\d*\\.?\\d+)', s)\n         if match:\n             return float(match.group(1)), float(match.group(2))\n         else:\n             raise ValueError(\"Invalid input string\")<|eot_id|>"
    },
    {
        "id":295,
        "response":" import typing\n\n    def max_sum_subseq(lst: typing.List[int]) -> int:\n        if not lst:\n            return 0\n        if len(lst) <= 2:\n            return max(0, max(lst))\n        \n        incl = lst[0]\n        excl = 0\n        \n        for i in range(1, len(lst)):\n            new_excl = max(incl, excl)\n            incl = excl + lst[i]\n            excl = new_excl\n        \n        return max(incl, excl)"
    },
    {
        "id":296,
        "response":" from typing import List\n\n    def sort_list_asc(lst: List[int]) -> List[int]:\n        return sorted(lst)"
    },
    {
        "id":297,
        "response":" import re\n\ndef is_Word_Present(s, s2):\n    return bool(re.search(r'\\b' + re.escape(s2) + r'\\b', s))"
    },
    {
        "id":298,
        "response":"\n\n\n\nfrom typing import List\n\ndef extract_elements(lst: List[int], n: int) -> List[int]:\n    if n <= 0 or n > len(lst):\n        return []\n    result = []\n    for i in range(len(lst) - n + 1):\n        result.append(lst[i:i+n])\n    return result<|eot_id|>"
    },
    {
        "id":299,
        "response":" import sys\ndef check(lst, n):\n    i = 0\n    j = n - 1\n    min_val = sys.maxsize\n    max_val = -sys.maxsize - 1\n    while i <= j:\n        if i == j:\n            if lst[i] < min_val:\n                min_val = lst[i]\n            if lst[i] > max_val:\n                max_val = lst[i]\n            break\n        if lst[i] >= lst[j]:\n            if lst[i] <= min_val:\n                min_val = lst[i]\n            if lst[i] > max_val:\n                max_val = lst[i]\n            i += 1\n        else:\n            if lst[j] <= min_val:\n                min_val = lst[j]\n            if lst[j] > max_val:\n                max_val = lst[j]\n            j -= 1\n    for val in lst:\n        if val < min_val or val > max_val:\n            return False\n    return True<|eot_id|>"
    },
    {
        "id":300,
        "response":" ```python\nimport re\ndef match_num(s: str) -> bool:\n    return bool(re.match(r'^\\d+', s))\n```"
    },
    {
        "id":301,
        "response":" import math\n\ndef num_comm_div(n, n2):\n    return math.gcd(n, n2)"
    },
    {
        "id":302,
        "response":" import math\n\ndef find(n, n2):\n    return n % n2"
    },
    {
        "id":303,
        "response":"\n\n\n\nfrom typing import List\n\ndef add_consecutive_nums(lst: List[int]) -> List[int]:\n    result = []\n    for i in range(len(lst) - 1):\n        result.append(lst[i] + lst[i + 1])\n    return result<|end_header_id|>"
    },
    {
        "id":304,
        "response":" ```python\nimport math\n\ndef sum_Of_Series(n: int) -> int:\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum\n```"
    },
    {
        "id":305,
        "response":" from typing import List\n\n    def re_order(lst: List[int]) -> List[int]:\n        return [i for i in lst if i != 0] + [i for i in lst if i == 0]"
    },
    {
        "id":306,
        "response":" import math\n\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    return math.factorial(n) \/\/ math.factorial(n-k)"
    },
    {
        "id":307,
        "response":" import re\n     from typing import List\n\n     def remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n        return [word for word in lst if word not in lst2]<|end_header_id|>"
    },
    {
        "id":308,
        "response":" import itertools\n\ndef same_order(lst, lst2):\n    common_elements = list(set(lst) & set(lst2))\n    common_elements_in_order = [i for i in lst if i in common_elements]\n    common_elements_in_order2 = [i for i in lst2 if i in common_elements]\n    return common_elements_in_order == common_elements_in_order2<|end_header_id|>"
    },
    {
        "id":309,
        "response":" ```python\nimport typing\n\ndef average_Odd(n: int) -> float:\n    if n <= 0:\n        return 0.0\n    odd_numbers = [i for i in range(1, n+1) if i % 2 != 0]\n    return sum(odd_numbers) \/ len(odd_numbers)\n```"
    },
    {
        "id":310,
        "response":" import math\nfrom typing import List\n\ndef no_of_subsequences(lst: List[int], k: int) -> int:\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for num in lst:\n        for j in range(k, num - 1, -1):\n            dp[j] += dp[j \/\/ num]\n    return dp[k]<|end_header_id|>"
    },
    {
        "id":311,
        "response":" import math \n\ndef find_Min_Sum(n):\n    if n < 1:\n        return -1\n    dp = [i for i in range(n+1)]\n    dp[0] = 0\n    dp[1] = 0\n    for i in range(1, n+1):\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                dp[i] = min(dp[i], dp[i\/\/j] + j)\n                if j*j != i:\n                    dp[i] = min(dp[i], dp[i\/\/j*j] + j)\n    return dp[n]"
    },
    {
        "id":312,
        "response":" from typing import Tuple, Any\nfrom collections import Counter\n\ndef count_element_freq(tup: Tuple[Any]) -> dict:\n    flat_list = [item for sublist in tup for item in (flatten(sublist) if isinstance(sublist, tuple) else [sublist])]\n    return dict(Counter(flat_list))\n\ndef flatten(tup: Tuple[Any]) -> list:\n    flat_list = []\n    for item in tup:\n        if isinstance(item, tuple):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n<|eot_id|>"
    },
    {
        "id":313,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef add_str(tup: Tuple, s: str) -> List[str]:\n    return [i + s for i in tup]\n    ```"
    },
    {
        "id":314,
        "response":" ```python\nfrom typing import List, Tuple\n\ndef sum_elements(tup_list: List[Tuple[int, int]]) -> List[int]:\n    return [sum(tup) for tup in tup_list]\n    ```"
    },
    {
        "id":315,
        "response":" import itertools\n\ndef modular_sum(lst, n, m):\n    for r in range(1, len(lst) + 1):\n        for subset in itertools.combinations(lst, r):\n            if sum(subset) % m == n:\n                return True\n    return False<|end_header_id|>"
    },
    {
        "id":316,
        "response":" import typing\n\n    def radix_sort(lst: typing.List[int]) -> typing.List[int]:\n        RADIX = 10\n        placement = 1\n\n        max_digit = max(lst)\n\n        while placement < max_digit:\n          buckets = [list() for _ in range(RADIX)]\n          for i in lst:\n            tmp = int((i \/ placement) % RADIX)\n            buckets[tmp].append(i)\n          a = 0\n          for b in range(RADIX):\n            buck = buckets[b]\n            for i in buck:\n              lst[a] = i\n              a += 1\n          placement *= RADIX\n        return lst<|end_header_id|>"
    },
    {
        "id":317,
        "response":" ```python\nimport typing\n\ndef largest_pos(lst: typing.List[int]) -> int:\n    pos_nums = [num for num in lst if num > 0]\n    if not pos_nums:\n        return None\n    return max(pos_nums)\n```"
    },
    {
        "id":318,
        "response":" import math\n\ndef sqrt_root(n: int) -> float:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return math.sqrt(n)"
    },
    {
        "id":319,
        "response":" import math\n\ndef volume_tetrahedron(n):\n    return (math.pow(n, 3))\/(6*math.sqrt(2))"
    },
    {
        "id":320,
        "response":" import math\nfrom typing import List\n\ndef get_lcm(lst: List[int]) -> int:\n    lcm = lst[0]\n    for i in lst[1:]:\n        lcm = lcm*i\/\/math.gcd(lcm, i)\n    return lcm\n<|eot_id|>"
    },
    {
        "id":321,
        "response":" import math\n\ndef check_scalene(n, n2, n3):\n    if n + n2 > n3 and n + n3 > n2 and n2 + n3 > n:\n        if n != n2 and n != n3 and n2 != n3:\n            return True\n    return False"
    },
    {
        "id":322,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef lbs(lst: List[int]) -> List[int]:\n    n = len(lst)\n    inc = [1]*n\n    dec = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j] and inc[i] < inc[j] + 1:\n                inc[i] = inc[j] + 1\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if lst[i] > lst[j] and dec[i] < dec[j] + 1:\n                dec[i] = dec[j] + 1\n    max_len = 0\n    index = 0\n    for i in range(n):\n        if inc[i] + dec[i] - 1 > max_len:\n            max_len = inc[i] + dec[i] - 1\n            index = i\n    return lst[index-max_len+1:index+1]\n```"
    },
    {
        "id":323,
        "response":" ```python\nimport re\nfrom typing import Callable\n\ndef check_string(s: str) -> bool:\n    check = lambda s: bool(re.search(r\"[A-Z]\", s)) and \\\n                      bool(re.search(r\"[a-z]\", s)) and \\\n                      bool(re.search(r\"\\d\", s)) and \\\n                      len(s) >= 8\n    return check(s)\n```"
    },
    {
        "id":324,
        "response":" import sys \n\n    def max_sum_increasing_subsequence(lst, n):\n        dp = [i for i in lst]\n        for i in range(1, n):\n            for j in range(i):\n                if lst[i] > lst[j] and dp[i] < dp[j] + lst[i]:\n                    dp[i] = dp[j] + lst[i]\n        return max(dp) \n    def main():\n        lst = [1, 101, 2, 3, 100, 4, 5]\n        n = len(lst)\n        print(max_sum_increasing_subsequence(lst, n))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "id":325,
        "response":" ```python\nimport math\n\ndef parallel_lines(line1, line2):\n    A1, B1, C1 = line1\n    A2, B2, C2 = line2\n    if A1 * B2 == A2 * B1:\n        return True\n    else:\n        return False\n```"
    },
    {
        "id":326,
        "response":"\n\n\n\n```python\nimport re\ndef capitalize_first_last_letters(s):\n    return re.sub(r'\\b\\w', lambda m: m.group(0).upper(), s, 1).capitalize().title()\n```"
    },
    {
        "id":327,
        "response":" import typing\n\ndef get_pairs_count(lst: typing.List[int], n: int, n2: int) -> int:\n    count = 0\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if n - i in freq:\n            if n - i == i:\n                count += freq[i] * (freq[i] - 1) \/\/ 2\n            elif i < n - i:\n                count += freq[i] * freq[n - i]\n    return count"
    },
    {
        "id":328,
        "response":"\n\n\n\nfrom typing import List\n\ndef min_length(lst: List[List[int]]) -> List[int]:\n    return min(lst, key=len)"
    },
    {
        "id":329,
        "response":" import math\n\ndef jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * a + 3 * b\n    return b"
    },
    {
        "id":330,
        "response":" from typing import List\n\ndef negative_count(lst: List[int]) -> float:\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count \/ len(lst) if lst else 0"
    },
    {
        "id":331,
        "response":" import sys\n     import math\n\n    def min_coins(lst, n, n2):\n        dp = [0] + [sys.maxsize]*n\n        for i in range(1, n+1):\n            for j in lst:\n                if i >= j and dp[i-j] != sys.maxsize:\n                    dp[i] = min(dp[i], dp[i-j]+1)\n        if dp[n] == sys.maxsize or n2 < dp[n]:\n            return -1\n        else:\n            return dp[n]"
    },
    {
        "id":332,
        "response":" ```python\nfrom collections import Counter\n\ndef check_permutation(s: str, s2: str) -> bool:\n    if len(s) != len(s2):\n        return False\n    return Counter(s) == Counter(s2)\n```"
    },
    {
        "id":333,
        "response":" ```python\nfrom typing import Tuple, TypeVar, Union\n\nT = TypeVar('T')\n\ndef remove_datatype(tup: Tuple[Union[T, ...]], param: type) -> Tuple[Union[T, ...]]:\n    return tuple(i for i in tup if not isinstance(i, param))\n    ```"
    },
    {
        "id":334,
        "response":"\n\n\n\n```python\nimport re\n\ndef search_literal(s, s2):\n    try:\n        return re.search(s2, s).start()\n    except AttributeError:\n        return -1\n```"
    },
    {
        "id":335,
        "response":" import math\ndef topbottom_surfacearea(n: tuple) -> float:\n    pi = math.pi\n    r, h = n\n    return pi * r * r"
    },
    {
        "id":336,
        "response":" ```python\nfrom typing import List, TypeVar\n\nT = TypeVar('T')\n\ndef nth_items(lst: List[T], n: int) -> T:\n    if n < 1 or n > len(lst):\n        raise IndexError(\"n is out of range\")\n    return lst[n - 1]\n```"
    },
    {
        "id":337,
        "response":" ```python\nimport re\nfrom typing import List, Optional\n\ndef first_repeated_word(s: str) -> Optional[str]:\n    words: List[str] = re.findall(r'\\b\\w+\\b', s.lower())\n    seen: set = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None\n```"
    },
    {
        "id":338,
        "response":"\n\n\n\nfrom typing import List, Tuple\n\ndef string_list_to_tuple(string_list: List[str]) -> Tuple[str]:\n    return tuple(string_list)"
    },
    {
        "id":339,
        "response":"\n\n\n\nimport math\nfrom typing import List\n\ndef basesnum_coresspondingnum(lst: List[int], lst2: List[int]) -> List[int]:\n    return list(map(lambda x, y: y ** x, lst, lst2))<|eot_id|>"
    },
    {
        "id":340,
        "response":" import collections\n     def find_Diff(lst, n):\n        fr = collections.Counter(lst)\n        return max(fr.values()) - min(fr.values())<|end_header_id|>"
    },
    {
        "id":341,
        "response":" ```python\nimport math\n\ndef check_abundant(n: int) -> bool:\n    if n < 1:\n        return False\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n \/\/ i:\n                sum_divisors += n \/\/ i\n    return sum_divisors - n > n\n    ```"
    },
    {
        "id":342,
        "response":" import re\n    def fill_spaces(s):\n        return re.sub('[ .,]', ':', s)"
    },
    {
        "id":343,
        "response":" ```python\nfrom typing import Tuple\n\ndef count_digits(n: int, n2: int) -> None:\n    sum = n + n2\n    count = 0\n    if sum == 0:\n        print(1)\n    else:\n        while sum != 0:\n            sum \/\/= 10\n            count += 1\n        print(count)\n```"
    },
    {
        "id":344,
        "response":" ```python\nfrom typing import List, Tuple, Union\n\ndef flatten_tuple(lst: List[Union[Tuple, int, str]]) -> List[Union[int, str]]:\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n```"
    },
    {
        "id":345,
        "response":" ```python\nimport re\nimport typing\n\ndef toggle_F_and_L_bits(n: int) -> int:\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    first_bit_mask = 1 << (num_bits - 1)\n    last_bit_mask = 1\n    toggled_first_bit = n ^ first_bit_mask\n    toggled_last_bit = toggled_first_bit ^ last_bit_mask\n    return toggled_last_bit\n```"
    },
    {
        "id":346,
        "response":" ```python\nimport re\ndef last_occurence_char(s, s2):\n    try:\n        return s.rindex(s2)\n    except ValueError:\n        return -1\n```"
    },
    {
        "id":347,
        "response":"\n\n\n\n```python\nimport math\n\ndef Total_Hamming_Distance(n: int) -> int:\n    res = 0\n    i = 0\n    while (1 << i) < n:\n        res += (1 << i) * max(0, min(n, (1 << (i + 1)) - (1 << i)) - (1 << i))\n        i += 1\n    return res\n```"
    },
    {
        "id":348,
        "response":"\n\n\n\nfrom typing import List\n\ndef longest_increasing_subsequence(lst: List[int]) -> int:\n    if not lst:\n        return 0\n\n    dp = [1] * len(lst)\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "id":349,
        "response":" ```python\nimport math\n\ndef odd_Num_Sum(n: int) -> int:\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 != 0:\n            sum += math.pow(i, 5)\n            count += 1\n        i += 1\n    return int(sum)\n```"
    },
    {
        "id":350,
        "response":"\n\n\n\nimport math\n\ndef find_Max(lst, n, k):\n    max_val = lst[0]\n    for i in range(k):\n        max_val = max(max_val, lst[i])\n    for i in range(k, n):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val\ndef find_Max_rotated(lst, n):\n    max_val = lst[0]\n    for i in range(1, n):\n        max_val = max(max_val, lst[i])\n    return max_val\n\ndef find_Max_efficient(lst, n, k):\n    max_so_far = -math.inf\n    max_ending_here = 0\n    for i in range(n):\n        max_ending_here = max_ending_here + lst[i]\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0 \n    return max_so_far\n\ndef find_Max_final(lst, n, k):\n    return find_Max_rotated(lst, n)"
    },
    {
        "id":351,
        "response":" ```python\nimport typing\n\ndef extract_column(lst: typing.List[typing.List], n: int) -> typing.List:\n    return [sublist[n] for sublist in lst if len(sublist) > n]\n```"
    },
    {
        "id":352,
        "response":"\n\n\n\nfrom typing import List\n\ndef Seq_Linear(lst: List[float]) -> bool:\n    if len(lst) < 2:\n        return True\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != diff:\n            return False\n    return True"
    },
    {
        "id":353,
        "response":"\n\n\n\nfrom typing import Tuple\n\ndef tuple_to_float(tup: Tuple[float, float, float]) -> float:\n    return float(''.join(map(str, tup)))<|eot_id|>"
    },
    {
        "id":354,
        "response":" ```python\nimport typing\n\ndef Split(lst: typing.List[typing.Any]) -> typing.List[int]:\n    return [i for i in lst if isinstance(i, int) and i % 2 != 0]\n```"
    },
    {
        "id":355,
        "response":" ```python\nimport math\n\ndef difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = n * (n + 1) \/\/ 2\n    return sum_of_cubes - sum_of_numbers**2\n```"
    },
    {
        "id":356,
        "response":" ```python\nimport itertools\n\ndef find_Odd_Pair(lst, n):\n    odd = [i for i in lst if i % 2 != 0]\n    pairs = list(itertools.combinations(odd, 2))\n    result = [pair for pair in pairs if (pair[0] ^ pair[1]) == n]\n    return result\n    ```"
    },
    {
        "id":357,
        "response":" def toggle_string(s: str) -> str:\n        import string\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)"
    },
    {
        "id":358,
        "response":"\n\n\n\nfrom typing import Tuple\n\ndef digit_distance_nums(n: int, n2: int) -> int:\n    digits1 = [int(i) for i in str(n)]\n    digits2 = [int(i) for i in str(n2)]\n    max_len = max(len(digits1), len(digits2))\n    digits1 = [0] * (max_len - len(digits1)) + digits1\n    digits2 = [0] * (max_len - len(digits2)) + digits2\n    return sum(abs(a - b) for a, b in zip(digits1, digits2))"
    },
    {
        "id":359,
        "response":"\n\n\n\nimport sys\n\ndef max_sub_array_sum(lst, n):\n    if not lst or n == 0:\n        return 0\n\n    max_so_far = -sys.maxsize - 1\n    max_ending_here = 0\n\n    for i in range(0, n):\n        max_ending_here = max_ending_here + lst[i]\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "id":360,
        "response":" ```python\nfrom typing import Tuple, Union\n\ndef union_elements(tup1: Tuple[Union[int, str]], tup2: Tuple[Union[int, str]]) -> Tuple[Union[int, str]]:\n    return tuple(set(tup1 + tup2))\n\ntup1 = (1, 2, 3, 'a', 'b')\ntup2 = (3, 4, 5, 'b', 'c')\nprint(union_elements(tup1, tup2))\n```"
    },
    {
        "id":361,
        "response":"\n\n\n\nfrom typing import List, Tuple\n\ndef assign_elements(lst: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    if not lst:\n        return []\n    \n    result = []\n    for i in range(0, len(lst) \/\/ 2):\n        result.append((lst[i][0], lst[-i-1][1]))\n        result.append((lst[-i-1][0], lst[i][1]))\n    if len(lst) % 2 != 0:\n        mid = len(lst) \/\/ 2\n        result.append((lst[mid][0], lst[mid][1]))\n    return result"
    },
    {
        "id":362,
        "response":" ```python\nfrom typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    return max(len(sublist) for sublist in lst)\n```"
    },
    {
        "id":363,
        "response":" import re\nfrom typing import List\n\ndef extract_values(s: str) -> List[str]:\n    pattern = r'\"[^\"]*\"'\n    return re.findall(pattern, s)"
    },
    {
        "id":364,
        "response":"\n\n\n\n```python\nfrom typing import List\nfrom collections import Counter\n\ndef count_Pairs(lst: List[int], n: int) -> int:\n    freq = Counter(lst)\n    count = 0\n    for f in freq.values():\n        count += f * (f - 1) \/\/ 2\n    return n * (n - 1) \/\/ 2 - count\n```"
    },
    {
        "id":365,
        "response":"\n\n\n\n```python\nimport re\ndef split(s):\n    return re.findall('[a-zA-Z]+|[!?,.:; ]', s)\n```"
    },
    {
        "id":366,
        "response":" import re\ndef sum_digits(n):\n    return sum(int(digit) for digit in re.findall(r'\\d', str(n)))<|eot_id|>"
    },
    {
        "id":367,
        "response":"\n\n\n\nfrom typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst) or lst == sorted(lst, reverse=True)<|end_header_id|>"
    },
    {
        "id":368,
        "response":" ```python\nfrom typing import List\n\ndef empty_list(n: int) -> List[dict]:\n    return [{} for _ in range(n)]\n```"
    },
    {
        "id":369,
        "response":" ```python\nfrom typing import List\n\ndef sort_sublists(lst: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in lst]\n```"
    },
    {
        "id":370,
        "response":"\n\n\n\nimport re\nfrom typing import List\n\ndef remove_words(lst: List[str], lst2: List[str]) -> List[str]:\n    return [s for s in lst if not any(re.search(r'\\b' + re.escape(word) + r'\\b', s, re.IGNORECASE) for word in lst2)]"
    },
    {
        "id":371,
        "response":" import heapq\ndef max_sum_pair_diff_lessthan_K(lst, n, k):\n    if n < 2:\n        return 0\n    heapq.heapify(lst)\n    max_sum = 0\n    while len(lst) > 1:\n        first = heapq.heappop(lst)\n        second = heapq.heappop(lst)\n        if second - first < k:\n            max_sum += first + second\n            heapq.heappush(lst, first)\n            heapq.heappush(lst, second)\n        else:\n            heapq.heappush(lst, first)\n            heapq.heappush(lst, second)\n            break\n    return max_sum<|end_header_id|>"
    },
    {
        "id":372,
        "response":"\n\n\n\nfrom typing import List\ndef two_unique_nums(lst: List[int]) -> List[int]:\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    result = []\n    for num, freq in count.items():\n        if freq == 2:\n            result.append(num)\n    return result<|eot_id|>"
    },
    {
        "id":373,
        "response":"\n\n\n\nfrom typing import List\nimport math\n\ndef unique_product(lst: List[int]) -> int:\n    unique_nums = set(lst)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "id":374,
        "response":" import math\n\ndef surfacearea_cylinder(n, n2):\n    return 2 * math.pi * n * (n + n2)"
    },
    {
        "id":375,
        "response":""
    },
    {
        "id":376,
        "response":" ```python\nfrom typing import List\n\ndef is_Sub_Array(lst: List[int], lst2: List[int], n: int, n2: int) -> bool:\n    if n2 > n:\n        return False\n\n    for i in range(n - n2 + 1):\n        if lst[i:i + n2] == lst2:\n            return True\n    return False\n```"
    },
    {
        "id":377,
        "response":" import math\n\n    def last_Digit_Factorial(n: int) -> int:\n        if n < 0:\n            raise ValueError(\"Input must be a non-negative integer.\")\n        if n < 2:\n            return 1\n        factorial = 1\n        for i in range(2, n + 1):\n            factorial = (factorial * i) % 10\n        return factorial<|eot_id|>"
    },
    {
        "id":378,
        "response":" import itertools\n\n    def interleave_lists(lst1, lst2, lst3):\n        return [item for tup in itertools.zip_longest(lst1, lst2, lst3) for item in tup if item is not None]"
    },
    {
        "id":379,
        "response":" ```python\nfrom typing import Tuple\n\ndef find_dissimilar(tup1: Tuple, tup2: Tuple) -> Tuple:\n    set1 = set(tup1)\n    set2 = set(tup2)\n    dissimilar1 = tuple(set1.symmetric_difference(set2))\n    return dissimilar1\n\ntup1 = (1, 2, 3, 4)\ntup2 = (3, 4, 5, 6)\nprint(find_dissimilar(tup1, tup2))\n```"
    },
    {
        "id":380,
        "response":" ```python\nfrom typing import Tuple, Union\n\ndef extract_even(tup: Tuple[Union[int, Tuple], ...]) -> list:\n    even_elements = []\n    stack = [tup]\n    while stack:\n        current = stack.pop()\n        if isinstance(current, tuple):\n            stack.extend(current)\n        elif isinstance(current, int) and current % 2 == 0:\n            even_elements.append(current)\n    return even_elements\n```"
    },
    {
        "id":381,
        "response":" import math\n\ndef surface_Area(n, n2):\n    area = n * n\n    perimeter = 4 * n\n    slant_height = math.sqrt((n \/ 2) ** 2 + n2 ** 2)\n    lateral_surface_area = 0.5 * perimeter * slant_height\n    total_surface_area = area + lateral_surface_area\n    return total_surface_area<|end_header_id|>"
    },
    {
        "id":382,
        "response":" ```python\ndef my_dict(dct: dict) -> bool:\n    return len(dct) == 0\n```"
    },
    {
        "id":383,
        "response":" ```python\nimport math\n\ndef catalan_number(n):\n    return math.comb(2 * n, n) \/\/ (n + 1)\n```"
    },
    {
        "id":384,
        "response":" import re\nfrom typing import List, Tuple\n\ndef find_adverbs(s: str) -> List[Tuple[str, int]]:\n    adverbs = re.findall(r'\\b(very|well|quickly|highly|extremely|slowly|loudly|wisely|rapidly|nicely|politely)\\b', s, re.IGNORECASE)\n    positions = [(m.start(), m.group()) for m in re.finditer(r'\\b(very|well|quickly|highly|extremely|slowly|loudly|wisely|rapidly|nicely|politely)\\b', s, re.IGNORECASE)]\n    return [(word, pos) for pos, word in positions]"
    },
    {
        "id":385,
        "response":" import heapq\n     from typing import List, Tuple\n\n     def expensive_items(lst: List[Tuple[str, int]], n: int) -> List[Tuple[str, int]]:\n        return heapq.nlargest(n, lst, key=lambda x: x[1])"
    },
    {
        "id":386,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef split_Arr(lst: List[int], n: int, n2: int) -> List[int]:\n    return lst[n:n2] + lst[:n] + lst[n2:]\n```"
    },
    {
        "id":387,
        "response":"\n\n\n\nfrom typing import List, Tuple\n\ndef list_tuple(lst: List) -> Tuple:\n    return tuple(lst)"
    },
    {
        "id":388,
        "response":"\n\n\n\n```python\ndef big_diff(lst):\n    return max(lst) - min(lst)\n```"
    },
    {
        "id":389,
        "response":" import math\n\n    def perfect_squares(n, n2):\n        start = math.ceil(math.sqrt(n))\n        end = math.floor(math.sqrt(n2))\n        return [i*i for i in range(start, end+1)]"
    },
    {
        "id":390,
        "response":" import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return x, y"
    },
    {
        "id":391,
        "response":" ```python\nfrom typing import List\n\ndef swap_List(lst: List) -> List:\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```"
    },
    {
        "id":392,
        "response":" ```python\nimport math\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i + j == n:\n                sum += math.comb(n, i) * math.comb(n, j)\n    return sum\n```"
    },
    {
        "id":393,
        "response":" ```python\nimport re\n\ndef removezero_ip(s):\n    return '.'.join(filter(None, map(lambda x: x.lstrip('0') or '0', s.split('.'))))\n```"
    },
    {
        "id":394,
        "response":"\n\n\n\n```python\nfrom typing import List\n\ndef diff_even_odd(lst: List[int]) -> int:\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2 != 0]\n    if even and odd:\n        return max(even) - max(odd)\n    elif even:\n        return max(even)\n    elif odd:\n        return -max(odd)\n    else:\n        return 0\n```"
    },
    {
        "id":395,
        "response":" ```python\nfrom collections import deque\nfrom typing import List\n\ndef minSwaps(s: str, target: str) -> int:\n    n = len(s)\n    queue = deque()\n    visited = set()\n    swaps = 0\n    state = list(s)\n    \n    queue.append((''.join(state), swaps))\n    visited.add(''.join(state))\n    \n    while queue:\n        current, swaps = queue.popleft()\n        \n        if current == target:\n            return swaps\n        \n        for i in range(n - 1):\n            new_state = list(current)\n            new_state[i], new_state[i + 1] = new_state[i + 1], new_state[i]\n            new_state_str = ''.join(new_state)\n            \n            if new_state_str not in visited:\n                queue.append((new_state_str, swaps + 1))\n                visited.add(new_state_str)\n    return -1\n```"
    },
    {
        "id":396,
        "response":"\n\n\n\n```python\nimport typing\n\ndef tuple_size(tup: typing.Tuple) -> int:\n    return len(tup)\n```"
    },
    {
        "id":397,
        "response":" import heapq \n\n    def find_kth(lst, lst2, n, n2, k):\n        merged = []\n        i, j = 0, 0\n        while i < n and j < n2:\n            if lst[i] < lst2[j]:\n                heapq.heappush(merged, lst[i])\n                i += 1\n            else:\n                heapq.heappush(merged, lst2[j])\n                j += 1\n        while i < n:\n            heapq.heappush(merged, lst[i])\n            i += 1\n        while j < n2:\n            heapq.heappush(merged, lst2[j])\n            j += 1\n        return heapq.nsmallest(k, merged)[-1] if k <= n + n2 else None<|eot_id|> \n```python\nimport heapq \n\ndef find_kth(lst, lst2, n, n2, k):\n    merged = []\n    i, j = 0, 0\n    while i < n and j < n2:\n        if lst[i] < lst2[j]:\n            heapq.heappush(merged, lst[i])\n            i += 1\n        else:\n            heapq.heappush(merged, lst2[j])\n            j += 1\n    while i < n:\n        heapq.heappush(merged, lst[i])\n        i += 1\n    while j < n2:\n        heapq.heappush(merged, lst2[j])\n        j += 1\n    return heapq.nsmallest(k, merged)[-1] if k <= n + n2 else None\n```"
    },
    {
        "id":398,
        "response":" import math\n\ndef armstrong_number(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    return sum == n"
    },
    {
        "id":399,
        "response":" ```python\nfrom typing import Tuple\n\ndef sum_average(n: int) -> Tuple[float, float]:\n    if n < 1:\n        raise ValueError(\"Input should be a positive integer\")\n    total = n * (n + 1) \/\/ 2\n    avg = total \/ n\n    return total, avg\n```"
    },
    {
        "id":400,
        "response":" ```python\nimport typing\n\ndef is_Even(n: int) -> bool:\n    return (n & 1) == 0\n```"
    }
]